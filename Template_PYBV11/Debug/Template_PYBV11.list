
Template_PYBV11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  0800c77c  0800c77c  0001c77c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c968  0800c968  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c968  0800c968  0001c968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c970  0800c970  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c970  0800c970  0001c970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c974  0800c974  0001c974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f50  200001e0  0800cb58  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005130  0800cb58  00025130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020100  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004330  00000000  00000000  00040310  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001558  00000000  00000000  00044640  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001380  00000000  00000000  00045b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000897a  00000000  00000000  00046f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017a30  00000000  00000000  0004f892  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c298f  00000000  00000000  000672c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00129c51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af0  00000000  00000000  00129ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c764 	.word	0x0800c764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800c764 	.word	0x0800c764

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <setup>:

static int counte = 0;
static char buf[20];

void setup()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	LED_animation();
 8000584:	f000 f86c 	bl	8000660 <LED_animation>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <loop>:

void loop()
{
 800058c:	b590      	push	{r4, r7, lr}
 800058e:	b08b      	sub	sp, #44	; 0x2c
 8000590:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 8000592:	2110      	movs	r1, #16
 8000594:	4829      	ldr	r0, [pc, #164]	; (800063c <loop+0xb0>)
 8000596:	f001 fc6e 	bl	8001e76 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800059a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059e:	f000 fdcf 	bl	8001140 <HAL_Delay>

	FRESULT fres;
	uint16_t raw_temp;
	float temp_c;
	char log_path[] = "/TEMPLOG.TXT";
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <loop+0xb4>)
 80005a4:	f107 0418 	add.w	r4, r7, #24
 80005a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005aa:	c407      	stmia	r4!, {r0, r1, r2}
 80005ac:	7023      	strb	r3, [r4, #0]
	char buf[20];

	println("Enter append...");
 80005ae:	4825      	ldr	r0, [pc, #148]	; (8000644 <loop+0xb8>)
 80005b0:	f000 f8a4 	bl	80006fc <println>
	fres = AppendToFile(log_path, strlen(log_path), buf, strlen(buf));
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff fe09 	bl	80001d0 <strlen>
 80005be:	4604      	mov	r4, r0
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe04 	bl	80001d0 <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	1d3a      	adds	r2, r7, #4
 80005cc:	f107 0018 	add.w	r0, r7, #24
 80005d0:	4621      	mov	r1, r4
 80005d2:	f000 f8e1 	bl	8000798 <AppendToFile>
 80005d6:	4603      	mov	r3, r0
 80005d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	println("After append....");
 80005dc:	481a      	ldr	r0, [pc, #104]	; (8000648 <loop+0xbc>)
 80005de:	f000 f88d 	bl	80006fc <println>

	if (fres != FR_OK)
 80005e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d006      	beq.n	80005f8 <loop+0x6c>
	{
		println("Fres not ok!");
 80005ea:	4818      	ldr	r0, [pc, #96]	; (800064c <loop+0xc0>)
 80005ec:	f000 f886 	bl	80006fc <println>
		BlinkLED(200, 3);
 80005f0:	2103      	movs	r1, #3
 80005f2:	20c8      	movs	r0, #200	; 0xc8
 80005f4:	f000 f948 	bl	8000888 <BlinkLED>
	}

	println("Detect test!");
 80005f8:	4815      	ldr	r0, [pc, #84]	; (8000650 <loop+0xc4>)
 80005fa:	f000 f87f 	bl	80006fc <println>
	uint8_t detecte = BSP_SD_IsDetected();
 80005fe:	f006 ff2d 	bl	800745c <BSP_SD_IsDetected>
 8000602:	4603      	mov	r3, r0
 8000604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	printLen = sprintf(printBuffer, "%d", detecte);
 8000608:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800060c:	461a      	mov	r2, r3
 800060e:	4911      	ldr	r1, [pc, #68]	; (8000654 <loop+0xc8>)
 8000610:	4811      	ldr	r0, [pc, #68]	; (8000658 <loop+0xcc>)
 8000612:	f00b fd63 	bl	800c0dc <siprintf>
 8000616:	4603      	mov	r3, r0
 8000618:	461a      	mov	r2, r3
 800061a:	4b10      	ldr	r3, [pc, #64]	; (800065c <loop+0xd0>)
 800061c:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 800061e:	bf00      	nop
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <loop+0xd0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	b29b      	uxth	r3, r3
 8000626:	4619      	mov	r1, r3
 8000628:	480b      	ldr	r0, [pc, #44]	; (8000658 <loop+0xcc>)
 800062a:	f00b f80f 	bl	800b64c <CDC_Transmit_FS>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d0f5      	beq.n	8000620 <loop+0x94>
}
 8000634:	bf00      	nop
 8000636:	372c      	adds	r7, #44	; 0x2c
 8000638:	46bd      	mov	sp, r7
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	40020400 	.word	0x40020400
 8000640:	0800c7c4 	.word	0x0800c7c4
 8000644:	0800c77c 	.word	0x0800c77c
 8000648:	0800c78c 	.word	0x0800c78c
 800064c:	0800c7a0 	.word	0x0800c7a0
 8000650:	0800c7b0 	.word	0x0800c7b0
 8000654:	0800c7c0 	.word	0x0800c7c0
 8000658:	20000200 	.word	0x20000200
 800065c:	200001fc 	.word	0x200001fc

08000660 <LED_animation>:

void LED_animation()
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000664:	2064      	movs	r0, #100	; 0x64
 8000666:	f000 fd6b 	bl	8001140 <HAL_Delay>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800066a:	2201      	movs	r2, #1
 800066c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000670:	4820      	ldr	r0, [pc, #128]	; (80006f4 <LED_animation+0x94>)
 8000672:	f001 fbe7 	bl	8001e44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000676:	2064      	movs	r0, #100	; 0x64
 8000678:	f000 fd62 	bl	8001140 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GRN_GPIO_Port, LED_GRN_Pin, GPIO_PIN_SET);
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000682:	481c      	ldr	r0, [pc, #112]	; (80006f4 <LED_animation+0x94>)
 8000684:	f001 fbde 	bl	8001e44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f000 fd59 	bl	8001140 <HAL_Delay>
	HAL_GPIO_WritePin(LED_YEL_GPIO_Port, LED_YEL_Pin, GPIO_PIN_SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000694:	4817      	ldr	r0, [pc, #92]	; (80006f4 <LED_animation+0x94>)
 8000696:	f001 fbd5 	bl	8001e44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800069a:	2064      	movs	r0, #100	; 0x64
 800069c:	f000 fd50 	bl	8001140 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2110      	movs	r1, #16
 80006a4:	4814      	ldr	r0, [pc, #80]	; (80006f8 <LED_animation+0x98>)
 80006a6:	f001 fbcd 	bl	8001e44 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f000 fd48 	bl	8001140 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2110      	movs	r1, #16
 80006b4:	4810      	ldr	r0, [pc, #64]	; (80006f8 <LED_animation+0x98>)
 80006b6:	f001 fbc5 	bl	8001e44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006ba:	2064      	movs	r0, #100	; 0x64
 80006bc:	f000 fd40 	bl	8001140 <HAL_Delay>
	HAL_GPIO_WritePin(LED_YEL_GPIO_Port, LED_YEL_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <LED_animation+0x94>)
 80006c8:	f001 fbbc 	bl	8001e44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006cc:	2064      	movs	r0, #100	; 0x64
 80006ce:	f000 fd37 	bl	8001140 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GRN_GPIO_Port, LED_GRN_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d8:	4806      	ldr	r0, [pc, #24]	; (80006f4 <LED_animation+0x94>)
 80006da:	f001 fbb3 	bl	8001e44 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80006de:	2064      	movs	r0, #100	; 0x64
 80006e0:	f000 fd2e 	bl	8001140 <HAL_Delay>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006ea:	4802      	ldr	r0, [pc, #8]	; (80006f4 <LED_animation+0x94>)
 80006ec:	f001 fbaa 	bl	8001e44 <HAL_GPIO_WritePin>
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400

080006fc <println>:

static void println(char* str)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2110      	movs	r1, #16
 8000708:	4820      	ldr	r0, [pc, #128]	; (800078c <println+0x90>)
 800070a:	f001 fb9b 	bl	8001e44 <HAL_GPIO_WritePin>

	printLen = strlen(str);
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff fd5e 	bl	80001d0 <strlen>
 8000714:	4602      	mov	r2, r0
 8000716:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <println+0x94>)
 8000718:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 800071a:	2300      	movs	r3, #0
 800071c:	73fb      	strb	r3, [r7, #15]
 800071e:	e009      	b.n	8000734 <println+0x38>
	{
		printBuffer[i] = str[i];
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	441a      	add	r2, r3
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	7811      	ldrb	r1, [r2, #0]
 800072a:	4a1a      	ldr	r2, [pc, #104]	; (8000794 <println+0x98>)
 800072c:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	3301      	adds	r3, #1
 8000732:	73fb      	strb	r3, [r7, #15]
 8000734:	7bfa      	ldrb	r2, [r7, #15]
 8000736:	4b16      	ldr	r3, [pc, #88]	; (8000790 <println+0x94>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	429a      	cmp	r2, r3
 800073c:	d3f0      	bcc.n	8000720 <println+0x24>
	}
	printBuffer[printLen] = '\n';
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <println+0x94>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <println+0x98>)
 8000744:	210a      	movs	r1, #10
 8000746:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <println+0x94>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a11      	ldr	r2, [pc, #68]	; (8000794 <println+0x98>)
 8000750:	210d      	movs	r1, #13
 8000752:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <println+0x94>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	3302      	adds	r3, #2
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <println+0x98>)
 800075c:	2100      	movs	r1, #0
 800075e:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 8000760:	bf00      	nop
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <println+0x94>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	b29b      	uxth	r3, r3
 8000768:	3303      	adds	r3, #3
 800076a:	b29b      	uxth	r3, r3
 800076c:	4619      	mov	r1, r3
 800076e:	4809      	ldr	r0, [pc, #36]	; (8000794 <println+0x98>)
 8000770:	f00a ff6c 	bl	800b64c <CDC_Transmit_FS>
 8000774:	4603      	mov	r3, r0
 8000776:	2b01      	cmp	r3, #1
 8000778:	d0f3      	beq.n	8000762 <println+0x66>

	HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, GPIO_PIN_RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	2110      	movs	r1, #16
 800077e:	4803      	ldr	r0, [pc, #12]	; (800078c <println+0x90>)
 8000780:	f001 fb60 	bl	8001e44 <HAL_GPIO_WritePin>
};
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40020400 	.word	0x40020400
 8000790:	200001fc 	.word	0x200001fc
 8000794:	20000200 	.word	0x20000200

08000798 <AppendToFile>:

FRESULT AppendToFile(char* path, size_t path_len, char* msg, size_t msg_len) {
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	f5ad 5d86 	sub.w	sp, sp, #4288	; 0x10c0
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	f107 0410 	add.w	r4, r7, #16
 80007a6:	3c04      	subs	r4, #4
 80007a8:	6020      	str	r0, [r4, #0]
 80007aa:	f107 0010 	add.w	r0, r7, #16
 80007ae:	3808      	subs	r0, #8
 80007b0:	6001      	str	r1, [r0, #0]
 80007b2:	f107 0110 	add.w	r1, r7, #16
 80007b6:	390c      	subs	r1, #12
 80007b8:	600a      	str	r2, [r1, #0]
 80007ba:	f107 0210 	add.w	r2, r7, #16
 80007be:	3a10      	subs	r2, #16
 80007c0:	6013      	str	r3, [r2, #0]
	FIL file;
	int len;
	UINT bytes_written;

	//mount SD card
	fresult = f_mount(&g_sFatFs, "0", 1);
 80007c2:	2201      	movs	r2, #1
 80007c4:	492c      	ldr	r1, [pc, #176]	; (8000878 <AppendToFile+0xe0>)
 80007c6:	482d      	ldr	r0, [pc, #180]	; (800087c <AppendToFile+0xe4>)
 80007c8:	f00a f9a0 	bl	800ab0c <f_mount>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80007d2:	f102 020f 	add.w	r2, r2, #15
 80007d6:	7013      	strb	r3, [r2, #0]

	//open file on SD card
	fresult = f_open(&file, "file.txt", FA_OPEN_ALWAYS | FA_WRITE);
 80007d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007dc:	3b18      	subs	r3, #24
 80007de:	2212      	movs	r2, #18
 80007e0:	4927      	ldr	r1, [pc, #156]	; (8000880 <AppendToFile+0xe8>)
 80007e2:	4618      	mov	r0, r3
 80007e4:	f00a f9d8 	bl	800ab98 <f_open>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80007ee:	f102 020f 	add.w	r2, r2, #15
 80007f2:	7013      	strb	r3, [r2, #0]

	//go to the end of the file
	//fresult = f_lseek(&file, file.fsize);

	//generate some string
	len = sprintf( buffer, "Hello World!\r\n");
 80007f4:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80007f8:	f103 0308 	add.w	r3, r3, #8
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <AppendToFile+0xec>)
 80007fe:	461c      	mov	r4, r3
 8000800:	4613      	mov	r3, r2
 8000802:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000804:	c407      	stmia	r4!, {r0, r1, r2}
 8000806:	8023      	strh	r3, [r4, #0]
 8000808:	3402      	adds	r4, #2
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	7023      	strb	r3, [r4, #0]
 800080e:	230e      	movs	r3, #14
 8000810:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000814:	f102 0208 	add.w	r2, r2, #8
 8000818:	6013      	str	r3, [r2, #0]

	//write data to the file
	fresult = f_write(&file, buffer, len, &bytes_written);
 800081a:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800081e:	f103 0308 	add.w	r3, r3, #8
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000828:	3b1c      	subs	r3, #28
 800082a:	f507 5182 	add.w	r1, r7, #4160	; 0x1040
 800082e:	f101 0108 	add.w	r1, r1, #8
 8000832:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000836:	3818      	subs	r0, #24
 8000838:	f00a fb7a 	bl	800af30 <f_write>
 800083c:	4603      	mov	r3, r0
 800083e:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000842:	f102 020f 	add.w	r2, r2, #15
 8000846:	7013      	strb	r3, [r2, #0]

	//close file
	fresult = f_close (&file);
 8000848:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800084c:	3b18      	subs	r3, #24
 800084e:	4618      	mov	r0, r3
 8000850:	f00a fd80 	bl	800b354 <f_close>
 8000854:	4603      	mov	r3, r0
 8000856:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800085a:	f102 020f 	add.w	r2, r2, #15
 800085e:	7013      	strb	r3, [r2, #0]
	return fresult;
 8000860:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8000864:	f103 030f 	add.w	r3, r3, #15
 8000868:	781b      	ldrb	r3, [r3, #0]
}
 800086a:	4618      	mov	r0, r3
 800086c:	f507 5786 	add.w	r7, r7, #4288	; 0x10c0
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bd90      	pop	{r4, r7, pc}
 8000876:	bf00      	nop
 8000878:	0800c7d4 	.word	0x0800c7d4
 800087c:	20000400 	.word	0x20000400
 8000880:	0800c7d8 	.word	0x0800c7d8
 8000884:	0800c7e4 	.word	0x0800c7e4

08000888 <BlinkLED>:

void BlinkLED(uint32_t blink_delay, uint8_t num_blinks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]
	for (int i = 0; i < num_blinks; i++)
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e014      	b.n	80008c4 <BlinkLED+0x3c>
	{
		HAL_GPIO_WritePin(LED_GRN_GPIO_Port, LED_GRN_Pin, GPIO_PIN_SET);
 800089a:	2201      	movs	r2, #1
 800089c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <BlinkLED+0x4c>)
 80008a2:	f001 facf 	bl	8001e44 <HAL_GPIO_WritePin>
		HAL_Delay(blink_delay);
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f000 fc4a 	bl	8001140 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GRN_GPIO_Port, LED_GRN_Pin, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b2:	4808      	ldr	r0, [pc, #32]	; (80008d4 <BlinkLED+0x4c>)
 80008b4:	f001 fac6 	bl	8001e44 <HAL_GPIO_WritePin>
		HAL_Delay(blink_delay);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f000 fc41 	bl	8001140 <HAL_Delay>
	for (int i = 0; i < num_blinks; i++)
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	3301      	adds	r3, #1
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	78fb      	ldrb	r3, [r7, #3]
 80008c6:	68fa      	ldr	r2, [r7, #12]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbe6      	blt.n	800089a <BlinkLED+0x12>
	}
}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40020000 	.word	0x40020000

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008dc:	f000 fbbe 	bl	800105c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e0:	f000 f812 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e4:	f000 f8f0 	bl	8000ac8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008e8:	f000 f8c6 	bl	8000a78 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80008ec:	f000 f8a4 	bl	8000a38 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80008f0:	f006 fd22 	bl	8007338 <MX_FATFS_Init>
  MX_I2C1_Init();
 80008f4:	f000 f872 	bl	80009dc <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80008f8:	f00a fdb2 	bl	800b460 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80008fc:	f7ff fe40 	bl	8000580 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8000900:	f7ff fe44 	bl	800058c <loop>
 8000904:	e7fc      	b.n	8000900 <main+0x28>
	...

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b094      	sub	sp, #80	; 0x50
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0320 	add.w	r3, r7, #32
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f00b fb1f 	bl	800bf5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	4b28      	ldr	r3, [pc, #160]	; (80009d4 <SystemClock_Config+0xcc>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <SystemClock_Config+0xcc>)
 8000936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093a:	6413      	str	r3, [r2, #64]	; 0x40
 800093c:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <SystemClock_Config+0xcc>)
 800093e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000948:	2300      	movs	r3, #0
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <SystemClock_Config+0xd0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a21      	ldr	r2, [pc, #132]	; (80009d8 <SystemClock_Config+0xd0>)
 8000952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <SystemClock_Config+0xd0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800096e:	2302      	movs	r3, #2
 8000970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000978:	2306      	movs	r3, #6
 800097a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800097c:	23a8      	movs	r3, #168	; 0xa8
 800097e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000980:	2302      	movs	r3, #2
 8000982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000984:	2307      	movs	r3, #7
 8000986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4618      	mov	r0, r3
 800098e:	f002 fd4f 	bl	8003430 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000998:	f000 f926 	bl	8000be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2302      	movs	r3, #2
 80009a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2105      	movs	r1, #5
 80009ba:	4618      	mov	r0, r3
 80009bc:	f002 ffa8 	bl	8003910 <HAL_RCC_ClockConfig>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009c6:	f000 f90f 	bl	8000be8 <Error_Handler>
  }
}
 80009ca:	bf00      	nop
 80009cc:	3750      	adds	r7, #80	; 0x50
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40023800 	.word	0x40023800
 80009d8:	40007000 	.word	0x40007000

080009dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <MX_I2C1_Init+0x54>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009e8:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <MX_I2C1_Init+0x58>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_I2C1_Init+0x50>)
 80009fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_I2C1_Init+0x50>)
 8000a1a:	f001 fa47 	bl	8001eac <HAL_I2C_Init>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a24:	f000 f8e0 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200016e0 	.word	0x200016e0
 8000a30:	40005400 	.word	0x40005400
 8000a34:	000186a0 	.word	0x000186a0

08000a38 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <MX_SDIO_SD_Init+0x38>)
 8000a3e:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <MX_SDIO_SD_Init+0x3c>)
 8000a40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a42:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <MX_SDIO_SD_Init+0x38>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <MX_SDIO_SD_Init+0x38>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <MX_SDIO_SD_Init+0x38>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <MX_SDIO_SD_Init+0x38>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a5a:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <MX_SDIO_SD_Init+0x38>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000a60:	4b03      	ldr	r3, [pc, #12]	; (8000a70 <MX_SDIO_SD_Init+0x38>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	20001794 	.word	0x20001794
 8000a74:	40012c00 	.word	0x40012c00

08000a78 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <MX_DMA_Init+0x4c>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a0f      	ldr	r2, [pc, #60]	; (8000ac4 <MX_DMA_Init+0x4c>)
 8000a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <MX_DMA_Init+0x4c>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	203b      	movs	r0, #59	; 0x3b
 8000aa0:	f000 fc4b 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000aa4:	203b      	movs	r0, #59	; 0x3b
 8000aa6:	f000 fc64 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2045      	movs	r0, #69	; 0x45
 8000ab0:	f000 fc43 	bl	800133a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ab4:	2045      	movs	r0, #69	; 0x45
 8000ab6:	f000 fc5c 	bl	8001372 <HAL_NVIC_EnableIRQ>

}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ace:	f107 0314 	add.w	r3, r7, #20
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
 8000adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b3e      	ldr	r3, [pc, #248]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a3d      	ldr	r2, [pc, #244]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b3b      	ldr	r3, [pc, #236]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0304 	and.w	r3, r3, #4
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a36      	ldr	r2, [pc, #216]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b34      	ldr	r3, [pc, #208]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60bb      	str	r3, [r7, #8]
 8000b1a:	4b30      	ldr	r3, [pc, #192]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a2f      	ldr	r2, [pc, #188]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b2d      	ldr	r3, [pc, #180]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a28      	ldr	r2, [pc, #160]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	603b      	str	r3, [r7, #0]
 8000b52:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a21      	ldr	r2, [pc, #132]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b1f      	ldr	r3, [pc, #124]	; (8000bdc <MX_GPIO_Init+0x114>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GRN_Pin|LED_YEL_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000b70:	481b      	ldr	r0, [pc, #108]	; (8000be0 <MX_GPIO_Init+0x118>)
 8000b72:	f001 f967 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLU_Pin|MMA_AVDD_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2130      	movs	r1, #48	; 0x30
 8000b7a:	481a      	ldr	r0, [pc, #104]	; (8000be4 <MX_GPIO_Init+0x11c>)
 8000b7c:	f001 f962 	bl	8001e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SD_SW_Pin MMA_INT_Pin SW_USR_Pin */
  GPIO_InitStruct.Pin = SD_SW_Pin|MMA_INT_Pin|SW_USR_Pin;
 8000b80:	230e      	movs	r3, #14
 8000b82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4814      	ldr	r0, [pc, #80]	; (8000be4 <MX_GPIO_Init+0x11c>)
 8000b94:	f000 ffa4 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GRN_Pin LED_YEL_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GRN_Pin|LED_YEL_Pin;
 8000b98:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <MX_GPIO_Init+0x118>)
 8000bb2:	f000 ff95 	bl	8001ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLU_Pin MMA_AVDD_Pin */
  GPIO_InitStruct.Pin = LED_BLU_Pin|MMA_AVDD_Pin;
 8000bb6:	2330      	movs	r3, #48	; 0x30
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_GPIO_Init+0x11c>)
 8000bce:	f000 ff87 	bl	8001ae0 <HAL_GPIO_Init>

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020000 	.word	0x40020000
 8000be4:	40020400 	.word	0x40020400

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a0f      	ldr	r2, [pc, #60]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40023800 	.word	0x40023800

08000c48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a19      	ldr	r2, [pc, #100]	; (8000ccc <HAL_I2C_MspInit+0x84>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d12b      	bne.n	8000cc2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_I2C_MspInit+0x88>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_I2C_MspInit+0x88>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <HAL_I2C_MspInit+0x88>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	613b      	str	r3, [r7, #16]
 8000c84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23c0      	movs	r3, #192	; 0xc0
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c96:	2304      	movs	r3, #4
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <HAL_I2C_MspInit+0x8c>)
 8000ca2:	f000 ff1d 	bl	8001ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_I2C_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_I2C_MspInit+0x88>)
 8000cb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_I2C_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	40023800 	.word	0x40023800
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08a      	sub	sp, #40	; 0x28
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a70      	ldr	r2, [pc, #448]	; (8000eb8 <HAL_SD_MspInit+0x1e0>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	f040 80da 	bne.w	8000eb0 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	4b6e      	ldr	r3, [pc, #440]	; (8000ebc <HAL_SD_MspInit+0x1e4>)
 8000d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d04:	4a6d      	ldr	r2, [pc, #436]	; (8000ebc <HAL_SD_MspInit+0x1e4>)
 8000d06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000d0c:	4b6b      	ldr	r3, [pc, #428]	; (8000ebc <HAL_SD_MspInit+0x1e4>)
 8000d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	4b67      	ldr	r3, [pc, #412]	; (8000ebc <HAL_SD_MspInit+0x1e4>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a66      	ldr	r2, [pc, #408]	; (8000ebc <HAL_SD_MspInit+0x1e4>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b64      	ldr	r3, [pc, #400]	; (8000ebc <HAL_SD_MspInit+0x1e4>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d34:	2300      	movs	r3, #0
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	4b60      	ldr	r3, [pc, #384]	; (8000ebc <HAL_SD_MspInit+0x1e4>)
 8000d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3c:	4a5f      	ldr	r2, [pc, #380]	; (8000ebc <HAL_SD_MspInit+0x1e4>)
 8000d3e:	f043 0308 	orr.w	r3, r3, #8
 8000d42:	6313      	str	r3, [r2, #48]	; 0x30
 8000d44:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <HAL_SD_MspInit+0x1e4>)
 8000d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d48:	f003 0308 	and.w	r3, r3, #8
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000d50:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000d54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d62:	230c      	movs	r3, #12
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4854      	ldr	r0, [pc, #336]	; (8000ec0 <HAL_SD_MspInit+0x1e8>)
 8000d6e:	f000 feb7 	bl	8001ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d84:	230c      	movs	r3, #12
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	484c      	ldr	r0, [pc, #304]	; (8000ec0 <HAL_SD_MspInit+0x1e8>)
 8000d90:	f000 fea6 	bl	8001ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d94:	2304      	movs	r3, #4
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000da4:	230c      	movs	r3, #12
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4845      	ldr	r0, [pc, #276]	; (8000ec4 <HAL_SD_MspInit+0x1ec>)
 8000db0:	f000 fe96 	bl	8001ae0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000db4:	4b44      	ldr	r3, [pc, #272]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000db6:	4a45      	ldr	r2, [pc, #276]	; (8000ecc <HAL_SD_MspInit+0x1f4>)
 8000db8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000dba:	4b43      	ldr	r3, [pc, #268]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dc0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc2:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc8:	4b3f      	ldr	r3, [pc, #252]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dce:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dd4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000dd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ddc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dde:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000de0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000de4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000de6:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000de8:	2220      	movs	r2, #32
 8000dea:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dec:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000df2:	4b35      	ldr	r3, [pc, #212]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000df4:	2204      	movs	r2, #4
 8000df6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000df8:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000dfe:	4b32      	ldr	r3, [pc, #200]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000e00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e04:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000e08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e0c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000e0e:	482e      	ldr	r0, [pc, #184]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000e10:	f000 faca 	bl	80013a8 <HAL_DMA_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000e1a:	f7ff fee5 	bl	8000be8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a29      	ldr	r2, [pc, #164]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000e22:	641a      	str	r2, [r3, #64]	; 0x40
 8000e24:	4a28      	ldr	r2, [pc, #160]	; (8000ec8 <HAL_SD_MspInit+0x1f0>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000e2a:	4b29      	ldr	r3, [pc, #164]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e2c:	4a29      	ldr	r2, [pc, #164]	; (8000ed4 <HAL_SD_MspInit+0x1fc>)
 8000e2e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000e30:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e36:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e38:	4b25      	ldr	r3, [pc, #148]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e3a:	2240      	movs	r2, #64	; 0x40
 8000e3c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3e:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	4b22      	ldr	r3, [pc, #136]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e4c:	4b20      	ldr	r3, [pc, #128]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e52:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e5a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e5e:	2220      	movs	r2, #32
 8000e60:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e68:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e70:	2203      	movs	r2, #3
 8000e72:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000e74:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e76:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e7a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e7e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e82:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000e84:	4812      	ldr	r0, [pc, #72]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e86:	f000 fa8f 	bl	80013a8 <HAL_DMA_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000e90:	f7ff feaa 	bl	8000be8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e98:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_SD_MspInit+0x1f8>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2031      	movs	r0, #49	; 0x31
 8000ea6:	f000 fa48 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000eaa:	2031      	movs	r0, #49	; 0x31
 8000eac:	f000 fa61 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3728      	adds	r7, #40	; 0x28
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40012c00 	.word	0x40012c00
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020800 	.word	0x40020800
 8000ec4:	40020c00 	.word	0x40020c00
 8000ec8:	20001680 	.word	0x20001680
 8000ecc:	40026458 	.word	0x40026458
 8000ed0:	20001734 	.word	0x20001734
 8000ed4:	400264a0 	.word	0x400264a0

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <HardFault_Handler+0x4>

08000eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <MemManage_Handler+0x4>

08000ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <UsageFault_Handler+0x4>

08000efe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2c:	f000 f8e8 	bl	8001100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <SDIO_IRQHandler+0x10>)
 8000f3a:	f003 f90b 	bl	8004154 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20001794 	.word	0x20001794

08000f48 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <DMA2_Stream3_IRQHandler+0x10>)
 8000f4e:	f000 fb53 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20001680 	.word	0x20001680

08000f5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <OTG_FS_IRQHandler+0x10>)
 8000f62:	f001 fa2b 	bl	80023bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20004d24 	.word	0x20004d24

08000f70 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <DMA2_Stream6_IRQHandler+0x10>)
 8000f76:	f000 fb3f 	bl	80015f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20001734 	.word	0x20001734

08000f84 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x50>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d102      	bne.n	8000f9a <_sbrk+0x16>
		heap_end = &end;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <_sbrk+0x50>)
 8000f96:	4a10      	ldr	r2, [pc, #64]	; (8000fd8 <_sbrk+0x54>)
 8000f98:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <_sbrk+0x50>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <_sbrk+0x50>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	466a      	mov	r2, sp
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d907      	bls.n	8000fbe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fae:	f00a ff8f 	bl	800bed0 <__errno>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	230c      	movs	r3, #12
 8000fb6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbc:	e006      	b.n	8000fcc <_sbrk+0x48>
	}

	heap_end += incr;
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <_sbrk+0x50>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <_sbrk+0x50>)
 8000fc8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fca:	68fb      	ldr	r3, [r7, #12]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20001434 	.word	0x20001434
 8000fd8:	20005130 	.word	0x20005130

08000fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b08      	ldr	r3, [pc, #32]	; (8001004 <SystemInit+0x28>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <SystemInit+0x28>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SystemInit+0x28>)
 8000ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ff6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001040 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800100c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800100e:	e003      	b.n	8001018 <LoopCopyDataInit>

08001010 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001012:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001014:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001016:	3104      	adds	r1, #4

08001018 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001018:	480b      	ldr	r0, [pc, #44]	; (8001048 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800101c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800101e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001020:	d3f6      	bcc.n	8001010 <CopyDataInit>
  ldr  r2, =_sbss
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001024:	e002      	b.n	800102c <LoopFillZerobss>

08001026 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001026:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001028:	f842 3b04 	str.w	r3, [r2], #4

0800102c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800102e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001030:	d3f9      	bcc.n	8001026 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001032:	f7ff ffd3 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001036:	f00a ff51 	bl	800bedc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103a:	f7ff fc4d 	bl	80008d8 <main>
  bx  lr    
 800103e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001040:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001044:	0800c978 	.word	0x0800c978
  ldr  r0, =_sdata
 8001048:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800104c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001050:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001054:	20005130 	.word	0x20005130

08001058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001058:	e7fe      	b.n	8001058 <ADC_IRQHandler>
	...

0800105c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0d      	ldr	r2, [pc, #52]	; (800109c <HAL_Init+0x40>)
 8001066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800106a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0a      	ldr	r2, [pc, #40]	; (800109c <HAL_Init+0x40>)
 8001072:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a07      	ldr	r2, [pc, #28]	; (800109c <HAL_Init+0x40>)
 800107e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001084:	2003      	movs	r0, #3
 8001086:	f000 f94d 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108a:	2000      	movs	r0, #0
 800108c:	f000 f808 	bl	80010a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001090:	f7ff fdb2 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023c00 	.word	0x40023c00

080010a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_InitTick+0x54>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x58>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f965 	bl	800138e <HAL_SYSTICK_Config>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e00e      	b.n	80010ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d80a      	bhi.n	80010ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d4:	2200      	movs	r2, #0
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	f04f 30ff 	mov.w	r0, #4294967295
 80010dc:	f000 f92d 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <HAL_InitTick+0x5c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e000      	b.n	80010ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000004 	.word	0x20000004

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000008 	.word	0x20000008
 8001124:	20001818 	.word	0x20001818

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20001818 	.word	0x20001818

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_Delay+0x40>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000008 	.word	0x20000008

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	; (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff29 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff3e 	bl	80011cc <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800137c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff31 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffa2 	bl	80012e0 <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff feb8 	bl	8001128 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d101      	bne.n	80013c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e099      	b.n	80014f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2202      	movs	r2, #2
 80013d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f022 0201 	bic.w	r2, r2, #1
 80013e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013e4:	e00f      	b.n	8001406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013e6:	f7ff fe9f 	bl	8001128 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b05      	cmp	r3, #5
 80013f2:	d908      	bls.n	8001406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2220      	movs	r2, #32
 80013f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e078      	b.n	80014f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e8      	bne.n	80013e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	4b38      	ldr	r3, [pc, #224]	; (8001500 <HAL_DMA_Init+0x158>)
 8001420:	4013      	ands	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	4313      	orrs	r3, r2
 8001456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	2b04      	cmp	r3, #4
 800145e:	d107      	bne.n	8001470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001468:	4313      	orrs	r3, r2
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4313      	orrs	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	f023 0307 	bic.w	r3, r3, #7
 8001486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	4313      	orrs	r3, r2
 8001490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	2b04      	cmp	r3, #4
 8001498:	d117      	bne.n	80014ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00e      	beq.n	80014ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f000 fa9d 	bl	80019ec <DMA_CheckFifoParam>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d008      	beq.n	80014ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2240      	movs	r2, #64	; 0x40
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80014c6:	2301      	movs	r3, #1
 80014c8:	e016      	b.n	80014f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 fa54 	bl	8001980 <DMA_CalcBaseAndBitshift>
 80014d8:	4603      	mov	r3, r0
 80014da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	223f      	movs	r2, #63	; 0x3f
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	f010803f 	.word	0xf010803f

08001504 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001522:	2b01      	cmp	r3, #1
 8001524:	d101      	bne.n	800152a <HAL_DMA_Start_IT+0x26>
 8001526:	2302      	movs	r3, #2
 8001528:	e040      	b.n	80015ac <HAL_DMA_Start_IT+0xa8>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b01      	cmp	r3, #1
 800153c:	d12f      	bne.n	800159e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2202      	movs	r2, #2
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 f9e6 	bl	8001924 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	223f      	movs	r2, #63	; 0x3f
 800155e:	409a      	lsls	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f042 0216 	orr.w	r2, r2, #22
 8001572:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001578:	2b00      	cmp	r3, #0
 800157a:	d007      	beq.n	800158c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0208 	orr.w	r2, r2, #8
 800158a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0201 	orr.w	r2, r2, #1
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e005      	b.n	80015aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015a6:	2302      	movs	r3, #2
 80015a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d004      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2280      	movs	r2, #128	; 0x80
 80015cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00c      	b.n	80015ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2205      	movs	r2, #5
 80015d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0201 	bic.w	r2, r2, #1
 80015e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001604:	4b92      	ldr	r3, [pc, #584]	; (8001850 <HAL_DMA_IRQHandler+0x258>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a92      	ldr	r2, [pc, #584]	; (8001854 <HAL_DMA_IRQHandler+0x25c>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0a9b      	lsrs	r3, r3, #10
 8001610:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001616:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001622:	2208      	movs	r2, #8
 8001624:	409a      	lsls	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4013      	ands	r3, r2
 800162a:	2b00      	cmp	r3, #0
 800162c:	d01a      	beq.n	8001664 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 0204 	bic.w	r2, r2, #4
 800164a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001650:	2208      	movs	r2, #8
 8001652:	409a      	lsls	r2, r3
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165c:	f043 0201 	orr.w	r2, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001668:	2201      	movs	r2, #1
 800166a:	409a      	lsls	r2, r3
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4013      	ands	r3, r2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d012      	beq.n	800169a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00b      	beq.n	800169a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	2201      	movs	r2, #1
 8001688:	409a      	lsls	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001692:	f043 0202 	orr.w	r2, r3, #2
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800169e:	2204      	movs	r2, #4
 80016a0:	409a      	lsls	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d012      	beq.n	80016d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00b      	beq.n	80016d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	2204      	movs	r2, #4
 80016be:	409a      	lsls	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f043 0204 	orr.w	r2, r3, #4
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	2210      	movs	r2, #16
 80016d6:	409a      	lsls	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d043      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d03c      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f2:	2210      	movs	r2, #16
 80016f4:	409a      	lsls	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d018      	beq.n	800173a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d108      	bne.n	8001728 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171a:	2b00      	cmp	r3, #0
 800171c:	d024      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	4798      	blx	r3
 8001726:	e01f      	b.n	8001768 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	2b00      	cmp	r3, #0
 800172e:	d01b      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	4798      	blx	r3
 8001738:	e016      	b.n	8001768 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001744:	2b00      	cmp	r3, #0
 8001746:	d107      	bne.n	8001758 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0208 	bic.w	r2, r2, #8
 8001756:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176c:	2220      	movs	r2, #32
 800176e:	409a      	lsls	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 808e 	beq.w	8001896 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0310 	and.w	r3, r3, #16
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 8086 	beq.w	8001896 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178e:	2220      	movs	r2, #32
 8001790:	409a      	lsls	r2, r3
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b05      	cmp	r3, #5
 80017a0:	d136      	bne.n	8001810 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 0216 	bic.w	r2, r2, #22
 80017b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	695a      	ldr	r2, [r3, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d103      	bne.n	80017d2 <HAL_DMA_IRQHandler+0x1da>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d007      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0208 	bic.w	r2, r2, #8
 80017e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	223f      	movs	r2, #63	; 0x3f
 80017e8:	409a      	lsls	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001802:	2b00      	cmp	r3, #0
 8001804:	d07d      	beq.n	8001902 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
        }
        return;
 800180e:	e078      	b.n	8001902 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d01c      	beq.n	8001858 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d108      	bne.n	800183e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	2b00      	cmp	r3, #0
 8001832:	d030      	beq.n	8001896 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
 800183c:	e02b      	b.n	8001896 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001842:	2b00      	cmp	r3, #0
 8001844:	d027      	beq.n	8001896 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	4798      	blx	r3
 800184e:	e022      	b.n	8001896 <HAL_DMA_IRQHandler+0x29e>
 8001850:	20000000 	.word	0x20000000
 8001854:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0210 	bic.w	r2, r2, #16
 8001874:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189a:	2b00      	cmp	r3, #0
 800189c:	d032      	beq.n	8001904 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d022      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2205      	movs	r2, #5
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	3301      	adds	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d307      	bcc.n	80018de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f2      	bne.n	80018c2 <HAL_DMA_IRQHandler+0x2ca>
 80018dc:	e000      	b.n	80018e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80018de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
 8001900:	e000      	b.n	8001904 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001902:	bf00      	nop
    }
  }
}
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop

0800190c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001940:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b40      	cmp	r3, #64	; 0x40
 8001950:	d108      	bne.n	8001964 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001962:	e007      	b.n	8001974 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	60da      	str	r2, [r3, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	b2db      	uxtb	r3, r3
 800198e:	3b10      	subs	r3, #16
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <DMA_CalcBaseAndBitshift+0x64>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	091b      	lsrs	r3, r3, #4
 8001998:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800199a:	4a13      	ldr	r2, [pc, #76]	; (80019e8 <DMA_CalcBaseAndBitshift+0x68>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	d909      	bls.n	80019c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019b6:	f023 0303 	bic.w	r3, r3, #3
 80019ba:	1d1a      	adds	r2, r3, #4
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	; 0x58
 80019c0:	e007      	b.n	80019d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80019ca:	f023 0303 	bic.w	r3, r3, #3
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3714      	adds	r7, #20
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	aaaaaaab 	.word	0xaaaaaaab
 80019e8:	0800c898 	.word	0x0800c898

080019ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d11f      	bne.n	8001a46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d855      	bhi.n	8001ab8 <DMA_CheckFifoParam+0xcc>
 8001a0c:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <DMA_CheckFifoParam+0x28>)
 8001a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a12:	bf00      	nop
 8001a14:	08001a25 	.word	0x08001a25
 8001a18:	08001a37 	.word	0x08001a37
 8001a1c:	08001a25 	.word	0x08001a25
 8001a20:	08001ab9 	.word	0x08001ab9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d045      	beq.n	8001abc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a34:	e042      	b.n	8001abc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a3e:	d13f      	bne.n	8001ac0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a44:	e03c      	b.n	8001ac0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a4e:	d121      	bne.n	8001a94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d836      	bhi.n	8001ac4 <DMA_CheckFifoParam+0xd8>
 8001a56:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <DMA_CheckFifoParam+0x70>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a6d 	.word	0x08001a6d
 8001a60:	08001a73 	.word	0x08001a73
 8001a64:	08001a6d 	.word	0x08001a6d
 8001a68:	08001a85 	.word	0x08001a85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a70:	e02f      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d024      	beq.n	8001ac8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a82:	e021      	b.n	8001ac8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001a8c:	d11e      	bne.n	8001acc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a92:	e01b      	b.n	8001acc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d902      	bls.n	8001aa0 <DMA_CheckFifoParam+0xb4>
 8001a9a:	2b03      	cmp	r3, #3
 8001a9c:	d003      	beq.n	8001aa6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a9e:	e018      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8001aa4:	e015      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d00e      	beq.n	8001ad0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ab6:	e00b      	b.n	8001ad0 <DMA_CheckFifoParam+0xe4>
      break;
 8001ab8:	bf00      	nop
 8001aba:	e00a      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8001abc:	bf00      	nop
 8001abe:	e008      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ac0:	bf00      	nop
 8001ac2:	e006      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ac4:	bf00      	nop
 8001ac6:	e004      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ac8:	bf00      	nop
 8001aca:	e002      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
      break;   
 8001acc:	bf00      	nop
 8001ace:	e000      	b.n	8001ad2 <DMA_CheckFifoParam+0xe6>
      break;
 8001ad0:	bf00      	nop
    }
  } 
  
  return status; 
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e16b      	b.n	8001dd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 815a 	bne.w	8001dce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d00b      	beq.n	8001b3a <HAL_GPIO_Init+0x5a>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d007      	beq.n	8001b3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b2e:	2b11      	cmp	r3, #17
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d130      	bne.n	8001b9c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b70:	2201      	movs	r2, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 0201 	and.w	r2, r3, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0xfc>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b12      	cmp	r3, #18
 8001bda:	d123      	bne.n	8001c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	220f      	movs	r2, #15
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3208      	adds	r2, #8
 8001c1e:	69b9      	ldr	r1, [r7, #24]
 8001c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0203 	and.w	r2, r3, #3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80b4 	beq.w	8001dce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b5f      	ldr	r3, [pc, #380]	; (8001de8 <HAL_GPIO_Init+0x308>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a5e      	ldr	r2, [pc, #376]	; (8001de8 <HAL_GPIO_Init+0x308>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b5c      	ldr	r3, [pc, #368]	; (8001de8 <HAL_GPIO_Init+0x308>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c82:	4a5a      	ldr	r2, [pc, #360]	; (8001dec <HAL_GPIO_Init+0x30c>)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a51      	ldr	r2, [pc, #324]	; (8001df0 <HAL_GPIO_Init+0x310>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d02b      	beq.n	8001d06 <HAL_GPIO_Init+0x226>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a50      	ldr	r2, [pc, #320]	; (8001df4 <HAL_GPIO_Init+0x314>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d025      	beq.n	8001d02 <HAL_GPIO_Init+0x222>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a4f      	ldr	r2, [pc, #316]	; (8001df8 <HAL_GPIO_Init+0x318>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01f      	beq.n	8001cfe <HAL_GPIO_Init+0x21e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4e      	ldr	r2, [pc, #312]	; (8001dfc <HAL_GPIO_Init+0x31c>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0x21a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_GPIO_Init+0x320>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0x216>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4c      	ldr	r2, [pc, #304]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_GPIO_Init+0x212>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4b      	ldr	r2, [pc, #300]	; (8001e08 <HAL_GPIO_Init+0x328>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x20e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	; (8001e0c <HAL_GPIO_Init+0x32c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_GPIO_Init+0x20a>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e00e      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cea:	2308      	movs	r3, #8
 8001cec:	e00c      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cee:	2306      	movs	r3, #6
 8001cf0:	e00a      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001d06:	2300      	movs	r3, #0
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d18:	4934      	ldr	r1, [pc, #208]	; (8001dec <HAL_GPIO_Init+0x30c>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d26:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4a:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d50:	4b2f      	ldr	r3, [pc, #188]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7a:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	f67f ae90 	bls.w	8001afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	3724      	adds	r7, #36	; 0x24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40013800 	.word	0x40013800
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40020400 	.word	0x40020400
 8001df8:	40020800 	.word	0x40020800
 8001dfc:	40020c00 	.word	0x40020c00
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40021400 	.word	0x40021400
 8001e08:	40021800 	.word	0x40021800
 8001e0c:	40021c00 	.word	0x40021c00
 8001e10:	40013c00 	.word	0x40013c00

08001e14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691a      	ldr	r2, [r3, #16]
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e001      	b.n	8001e36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
 8001e50:	4613      	mov	r3, r2
 8001e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e54:	787b      	ldrb	r3, [r7, #1]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e5a:	887a      	ldrh	r2, [r7, #2]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e62:	887b      	ldrh	r3, [r7, #2]
 8001e64:	041a      	lsls	r2, r3, #16
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	619a      	str	r2, [r3, #24]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695a      	ldr	r2, [r3, #20]
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	401a      	ands	r2, r3
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d104      	bne.n	8001e9a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	041a      	lsls	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e11f      	b.n	80020fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d106      	bne.n	8001ed8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe feb8 	bl	8000c48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2224      	movs	r2, #36	; 0x24
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0201 	bic.w	r2, r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f10:	f001 fea2 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8001f14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a7b      	ldr	r2, [pc, #492]	; (8002108 <HAL_I2C_Init+0x25c>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d807      	bhi.n	8001f30 <HAL_I2C_Init+0x84>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a7a      	ldr	r2, [pc, #488]	; (800210c <HAL_I2C_Init+0x260>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	bf94      	ite	ls
 8001f28:	2301      	movls	r3, #1
 8001f2a:	2300      	movhi	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	e006      	b.n	8001f3e <HAL_I2C_Init+0x92>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a77      	ldr	r2, [pc, #476]	; (8002110 <HAL_I2C_Init+0x264>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	bf94      	ite	ls
 8001f38:	2301      	movls	r3, #1
 8001f3a:	2300      	movhi	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0db      	b.n	80020fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4a72      	ldr	r2, [pc, #456]	; (8002114 <HAL_I2C_Init+0x268>)
 8001f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4e:	0c9b      	lsrs	r3, r3, #18
 8001f50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	4a64      	ldr	r2, [pc, #400]	; (8002108 <HAL_I2C_Init+0x25c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d802      	bhi.n	8001f80 <HAL_I2C_Init+0xd4>
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	e009      	b.n	8001f94 <HAL_I2C_Init+0xe8>
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f86:	fb02 f303 	mul.w	r3, r2, r3
 8001f8a:	4a63      	ldr	r2, [pc, #396]	; (8002118 <HAL_I2C_Init+0x26c>)
 8001f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f90:	099b      	lsrs	r3, r3, #6
 8001f92:	3301      	adds	r3, #1
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	430b      	orrs	r3, r1
 8001f9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	69db      	ldr	r3, [r3, #28]
 8001fa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4956      	ldr	r1, [pc, #344]	; (8002108 <HAL_I2C_Init+0x25c>)
 8001fb0:	428b      	cmp	r3, r1
 8001fb2:	d80d      	bhi.n	8001fd0 <HAL_I2C_Init+0x124>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1e59      	subs	r1, r3, #1
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	bf38      	it	cc
 8001fcc:	2304      	movcc	r3, #4
 8001fce:	e04f      	b.n	8002070 <HAL_I2C_Init+0x1c4>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d111      	bne.n	8001ffc <HAL_I2C_Init+0x150>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1e58      	subs	r0, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	440b      	add	r3, r1
 8001fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fea:	3301      	adds	r3, #1
 8001fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf0c      	ite	eq
 8001ff4:	2301      	moveq	r3, #1
 8001ff6:	2300      	movne	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e012      	b.n	8002022 <HAL_I2C_Init+0x176>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf0c      	ite	eq
 800201c:	2301      	moveq	r3, #1
 800201e:	2300      	movne	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_I2C_Init+0x17e>
 8002026:	2301      	movs	r3, #1
 8002028:	e022      	b.n	8002070 <HAL_I2C_Init+0x1c4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10e      	bne.n	8002050 <HAL_I2C_Init+0x1a4>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1e58      	subs	r0, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6859      	ldr	r1, [r3, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	440b      	add	r3, r1
 8002040:	fbb0 f3f3 	udiv	r3, r0, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800204a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800204e:	e00f      	b.n	8002070 <HAL_I2C_Init+0x1c4>
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	1e58      	subs	r0, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6859      	ldr	r1, [r3, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	0099      	lsls	r1, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	fbb0 f3f3 	udiv	r3, r0, r3
 8002066:	3301      	adds	r3, #1
 8002068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	6809      	ldr	r1, [r1, #0]
 8002074:	4313      	orrs	r3, r2
 8002076:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800209e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6911      	ldr	r1, [r2, #16]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68d2      	ldr	r2, [r2, #12]
 80020aa:	4311      	orrs	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6812      	ldr	r2, [r2, #0]
 80020b0:	430b      	orrs	r3, r1
 80020b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f042 0201 	orr.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2220      	movs	r2, #32
 80020ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	000186a0 	.word	0x000186a0
 800210c:	001e847f 	.word	0x001e847f
 8002110:	003d08ff 	.word	0x003d08ff
 8002114:	431bde83 	.word	0x431bde83
 8002118:	10624dd3 	.word	0x10624dd3

0800211c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800211c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800211e:	b08f      	sub	sp, #60	; 0x3c
 8002120:	af0a      	add	r7, sp, #40	; 0x28
 8002122:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e10f      	b.n	800234e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d106      	bne.n	800214e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f009 fbb3 	bl	800b8b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2203      	movs	r2, #3
 8002152:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215e:	2b00      	cmp	r3, #0
 8002160:	d102      	bne.n	8002168 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f003 ff1c 	bl	8005faa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	687e      	ldr	r6, [r7, #4]
 800217a:	466d      	mov	r5, sp
 800217c:	f106 0410 	add.w	r4, r6, #16
 8002180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002182:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002188:	e894 0003 	ldmia.w	r4, {r0, r1}
 800218c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002190:	1d33      	adds	r3, r6, #4
 8002192:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002194:	6838      	ldr	r0, [r7, #0]
 8002196:	f003 fdf3 	bl	8005d80 <USB_CoreInit>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2202      	movs	r2, #2
 80021a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0d0      	b.n	800234e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f003 ff0a 	bl	8005fcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b8:	2300      	movs	r3, #0
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	e04a      	b.n	8002254 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	6879      	ldr	r1, [r7, #4]
 80021c2:	4613      	mov	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	1a9b      	subs	r3, r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	440b      	add	r3, r1
 80021cc:	333d      	adds	r3, #61	; 0x3d
 80021ce:	2201      	movs	r2, #1
 80021d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021d2:	7bfa      	ldrb	r2, [r7, #15]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	333c      	adds	r3, #60	; 0x3c
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	b298      	uxth	r0, r3
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	3342      	adds	r3, #66	; 0x42
 80021fa:	4602      	mov	r2, r0
 80021fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021fe:	7bfa      	ldrb	r2, [r7, #15]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	333f      	adds	r3, #63	; 0x3f
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002212:	7bfa      	ldrb	r2, [r7, #15]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	00db      	lsls	r3, r3, #3
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3344      	adds	r3, #68	; 0x44
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3348      	adds	r3, #72	; 0x48
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3350      	adds	r3, #80	; 0x50
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	3301      	adds	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	7bfa      	ldrb	r2, [r7, #15]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	429a      	cmp	r2, r3
 800225c:	d3af      	bcc.n	80021be <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800225e:	2300      	movs	r3, #0
 8002260:	73fb      	strb	r3, [r7, #15]
 8002262:	e044      	b.n	80022ee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002264:	7bfa      	ldrb	r2, [r7, #15]
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	440b      	add	r3, r1
 8002272:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002290:	7bfa      	ldrb	r2, [r7, #15]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	1a9b      	subs	r3, r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022bc:	7bfa      	ldrb	r2, [r7, #15]
 80022be:	6879      	ldr	r1, [r7, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	440b      	add	r3, r1
 80022ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022d2:	7bfa      	ldrb	r2, [r7, #15]
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	1a9b      	subs	r3, r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e8:	7bfb      	ldrb	r3, [r7, #15]
 80022ea:	3301      	adds	r3, #1
 80022ec:	73fb      	strb	r3, [r7, #15]
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d3b5      	bcc.n	8002264 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	687e      	ldr	r6, [r7, #4]
 8002300:	466d      	mov	r5, sp
 8002302:	f106 0410 	add.w	r4, r6, #16
 8002306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800230c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800230e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002312:	e885 0003 	stmia.w	r5, {r0, r1}
 8002316:	1d33      	adds	r3, r6, #4
 8002318:	cb0e      	ldmia	r3, {r1, r2, r3}
 800231a:	6838      	ldr	r0, [r7, #0]
 800231c:	f003 fe80 	bl	8006020 <USB_DevInit>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2202      	movs	r2, #2
 800232a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e00d      	b.n	800234e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4618      	mov	r0, r3
 8002348:	f004 fe75 	bl	8007036 <USB_DevDisconnect>

  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002356 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_PCD_Start+0x1c>
 800236e:	2302      	movs	r3, #2
 8002370:	e020      	b.n	80023b4 <HAL_PCD_Start+0x5e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	2b01      	cmp	r3, #1
 8002380:	d109      	bne.n	8002396 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002386:	2b01      	cmp	r3, #1
 8002388:	d005      	beq.n	8002396 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f004 fe33 	bl	8007006 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f003 fdef 	bl	8005f88 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b08d      	sub	sp, #52	; 0x34
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f004 feda 	bl	800718c <USB_GetMode>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f040 838e 	bne.w	8002afc <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f004 fe3e 	bl	8007066 <USB_ReadInterrupts>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 8384 	beq.w	8002afa <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 fe35 	bl	8007066 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b02      	cmp	r3, #2
 8002404:	d107      	bne.n	8002416 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f002 0202 	and.w	r2, r2, #2
 8002414:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f004 fe23 	bl	8007066 <USB_ReadInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002426:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800242a:	d17b      	bne.n	8002524 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f004 fe29 	bl	800708c <USB_ReadDevAllOutEpInterrupt>
 800243a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800243c:	e06f      	b.n	800251e <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d064      	beq.n	8002512 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f004 fe4e 	bl	80070f4 <USB_ReadDevOutEPInterrupt>
 8002458:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00c      	beq.n	800247e <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	015a      	lsls	r2, r3, #5
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002470:	461a      	mov	r2, r3
 8002472:	2301      	movs	r3, #1
 8002474:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fe0d 	bl	8003098 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00c      	beq.n	80024a2 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002488:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 ff0c 	bl	80032a8 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800249c:	461a      	mov	r2, r3
 800249e:	2308      	movs	r3, #8
 80024a0:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 0310 	and.w	r3, r3, #16
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b8:	461a      	mov	r2, r3
 80024ba:	2310      	movs	r3, #16
 80024bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d108      	bne.n	80024e2 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024da:	461a      	mov	r2, r3
 80024dc:	2101      	movs	r1, #1
 80024de:	f004 fe99 	bl	8007214 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	015a      	lsls	r2, r3, #5
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	4413      	add	r3, r2
 80024ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ee:	461a      	mov	r2, r3
 80024f0:	2320      	movs	r3, #32
 80024f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250a:	461a      	mov	r2, r3
 800250c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002510:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002514:	3301      	adds	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800251a:	085b      	lsrs	r3, r3, #1
 800251c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800251e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002520:	2b00      	cmp	r3, #0
 8002522:	d18c      	bne.n	800243e <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f004 fd9c 	bl	8007066 <USB_ReadInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002534:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002538:	f040 80c4 	bne.w	80026c4 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f004 fdbd 	bl	80070c0 <USB_ReadDevAllInEpInterrupt>
 8002546:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800254c:	e0b6      	b.n	80026bc <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80ab 	beq.w	80026b0 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002560:	b2d2      	uxtb	r2, r2
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f004 fde3 	bl	8007130 <USB_ReadDevInEPInterrupt>
 800256a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d05b      	beq.n	800262e <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	f003 030f 	and.w	r3, r3, #15
 800257c:	2201      	movs	r2, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800258a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	43db      	mvns	r3, r3
 8002590:	69f9      	ldr	r1, [r7, #28]
 8002592:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002596:	4013      	ands	r3, r2
 8002598:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a6:	461a      	mov	r2, r3
 80025a8:	2301      	movs	r3, #1
 80025aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d11b      	bne.n	80025ec <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b8:	4613      	mov	r3, r2
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	1a9b      	subs	r3, r3, r2
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	440b      	add	r3, r1
 80025c2:	3348      	adds	r3, #72	; 0x48
 80025c4:	6819      	ldr	r1, [r3, #0]
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	1a9b      	subs	r3, r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4403      	add	r3, r0
 80025d4:	3344      	adds	r3, #68	; 0x44
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4419      	add	r1, r3
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025de:	4613      	mov	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4403      	add	r3, r0
 80025e8:	3348      	adds	r3, #72	; 0x48
 80025ea:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4619      	mov	r1, r3
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f009 f9ed 	bl	800b9d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d116      	bne.n	800262e <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	2b00      	cmp	r3, #0
 8002604:	d113      	bne.n	800262e <HAL_PCD_IRQHandler+0x272>
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800260a:	4613      	mov	r3, r2
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	1a9b      	subs	r3, r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	440b      	add	r3, r1
 8002614:	3350      	adds	r3, #80	; 0x50
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d108      	bne.n	800262e <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002626:	461a      	mov	r2, r3
 8002628:	2101      	movs	r1, #1
 800262a:	f004 fdf3 	bl	8007214 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 0308 	and.w	r3, r3, #8
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002644:	461a      	mov	r2, r3
 8002646:	2308      	movs	r3, #8
 8002648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002660:	461a      	mov	r2, r3
 8002662:	2310      	movs	r3, #16
 8002664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800267c:	461a      	mov	r2, r3
 800267e:	2340      	movs	r3, #64	; 0x40
 8002680:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	4413      	add	r3, r2
 8002694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002698:	461a      	mov	r2, r3
 800269a:	2302      	movs	r3, #2
 800269c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fc67 	bl	8002f7e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	3301      	adds	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f47f af45 	bne.w	800254e <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f004 fccc 	bl	8007066 <USB_ReadInterrupts>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026d8:	d122      	bne.n	8002720 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e8:	f023 0301 	bic.w	r3, r3, #1
 80026ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d108      	bne.n	800270a <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002700:	2100      	movs	r1, #0
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 fe88 	bl	8003418 <HAL_PCDEx_LPM_Callback>
 8002708:	e002      	b.n	8002710 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f009 f9d8 	bl	800bac0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800271e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f004 fc9e 	bl	8007066 <USB_ReadInterrupts>
 800272a:	4603      	mov	r3, r0
 800272c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002734:	d112      	bne.n	800275c <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d102      	bne.n	800274c <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f009 f994 	bl	800ba74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800275a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f004 fc80 	bl	8007066 <USB_ReadInterrupts>
 8002766:	4603      	mov	r3, r0
 8002768:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800276c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002770:	f040 80a7 	bne.w	80028c2 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002782:	f023 0301 	bic.w	r3, r3, #1
 8002786:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2110      	movs	r1, #16
 800278e:	4618      	mov	r0, r3
 8002790:	f003 fdb8 	bl	8006304 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002798:	e036      	b.n	8002808 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027a6:	461a      	mov	r2, r3
 80027a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027be:	0151      	lsls	r1, r2, #5
 80027c0:	69fa      	ldr	r2, [r7, #28]
 80027c2:	440a      	add	r2, r1
 80027c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027da:	461a      	mov	r2, r3
 80027dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	015a      	lsls	r2, r3, #5
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	4413      	add	r3, r2
 80027ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	0151      	lsls	r1, r2, #5
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	440a      	add	r2, r1
 80027f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80027fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002800:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002804:	3301      	adds	r3, #1
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280e:	429a      	cmp	r2, r3
 8002810:	d3c3      	bcc.n	800279a <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002818:	69db      	ldr	r3, [r3, #28]
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002820:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002824:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002834:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002838:	69fa      	ldr	r2, [r7, #28]
 800283a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800283e:	f043 030b 	orr.w	r3, r3, #11
 8002842:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	69fa      	ldr	r2, [r7, #28]
 8002850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002854:	f043 030b 	orr.w	r3, r3, #11
 8002858:	6453      	str	r3, [r2, #68]	; 0x44
 800285a:	e015      	b.n	8002888 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800286a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800286e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002872:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	69fa      	ldr	r2, [r7, #28]
 800287e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002882:	f043 030b 	orr.w	r3, r3, #11
 8002886:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69fa      	ldr	r2, [r7, #28]
 8002892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002896:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800289a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6818      	ldr	r0, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028ac:	461a      	mov	r2, r3
 80028ae:	f004 fcb1 	bl	8007214 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	695a      	ldr	r2, [r3, #20]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f004 fbcd 	bl	8007066 <USB_ReadInterrupts>
 80028cc:	4603      	mov	r3, r0
 80028ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028d6:	d124      	bne.n	8002922 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f004 fc63 	bl	80071a8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f003 fd6d 	bl	80063c6 <USB_GetDevSpeed>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681c      	ldr	r4, [r3, #0]
 80028f8:	f001 f9a2 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 80028fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002902:	b2db      	uxtb	r3, r3
 8002904:	461a      	mov	r2, r3
 8002906:	4620      	mov	r0, r4
 8002908:	f003 fa9c 	bl	8005e44 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f009 f888 	bl	800ba22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002920:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f004 fb9d 	bl	8007066 <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b10      	cmp	r3, #16
 8002934:	d161      	bne.n	80029fa <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0210 	bic.w	r2, r2, #16
 8002944:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	1a9b      	subs	r3, r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	0c5b      	lsrs	r3, r3, #17
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	2b02      	cmp	r3, #2
 8002970:	d124      	bne.n	80029bc <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d035      	beq.n	80029ea <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002988:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800298c:	b29b      	uxth	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	6a38      	ldr	r0, [r7, #32]
 8002992:	f004 fa15 	bl	8006dc0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	091b      	lsrs	r3, r3, #4
 800299e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029a2:	441a      	add	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	699a      	ldr	r2, [r3, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b4:	441a      	add	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	619a      	str	r2, [r3, #24]
 80029ba:	e016      	b.n	80029ea <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	0c5b      	lsrs	r3, r3, #17
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d110      	bne.n	80029ea <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80029ce:	2208      	movs	r2, #8
 80029d0:	4619      	mov	r1, r3
 80029d2:	6a38      	ldr	r0, [r7, #32]
 80029d4:	f004 f9f4 	bl	8006dc0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	699a      	ldr	r2, [r3, #24]
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029e4:	441a      	add	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0210 	orr.w	r2, r2, #16
 80029f8:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 fb31 	bl	8007066 <USB_ReadInterrupts>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f003 0308 	and.w	r3, r3, #8
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d10a      	bne.n	8002a24 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f008 fff9 	bl	800ba06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f002 0208 	and.w	r2, r2, #8
 8002a22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 fb1c 	bl	8007066 <USB_ReadInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a38:	d10f      	bne.n	8002a5a <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	4619      	mov	r1, r3
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f009 f85b 	bl	800bb00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695a      	ldr	r2, [r3, #20]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f004 fb01 	bl	8007066 <USB_ReadInterrupts>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a6e:	d10f      	bne.n	8002a90 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	4619      	mov	r1, r3
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f009 f82e 	bl	800badc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f004 fae6 	bl	8007066 <USB_ReadInterrupts>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa4:	d10a      	bne.n	8002abc <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f009 f83c 	bl	800bb24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f004 fad0 	bl	8007066 <USB_ReadInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d115      	bne.n	8002afc <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f009 f82c 	bl	800bb40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	6859      	ldr	r1, [r3, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	605a      	str	r2, [r3, #4]
 8002af8:	e000      	b.n	8002afc <HAL_PCD_IRQHandler+0x740>
      return;
 8002afa:	bf00      	nop
    }
  }
}
 8002afc:	3734      	adds	r7, #52	; 0x34
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd90      	pop	{r4, r7, pc}

08002b02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_PCD_SetAddress+0x1a>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e013      	b.n	8002b44 <HAL_PCD_SetAddress+0x42>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fa40 	bl	8006fba <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	70fb      	strb	r3, [r7, #3]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	803b      	strh	r3, [r7, #0]
 8002b62:	4613      	mov	r3, r2
 8002b64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002b66:	2300      	movs	r3, #0
 8002b68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	da0f      	bge.n	8002b92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	f003 020f 	and.w	r2, r3, #15
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	3338      	adds	r3, #56	; 0x38
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	4413      	add	r3, r2
 8002b86:	3304      	adds	r3, #4
 8002b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	705a      	strb	r2, [r3, #1]
 8002b90:	e00f      	b.n	8002bb2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	f003 020f 	and.w	r2, r3, #15
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3304      	adds	r3, #4
 8002baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb2:	78fb      	ldrb	r3, [r7, #3]
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002bbe:	883a      	ldrh	r2, [r7, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	78ba      	ldrb	r2, [r7, #2]
 8002bc8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	785b      	ldrb	r3, [r3, #1]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d004      	beq.n	8002bdc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002bdc:	78bb      	ldrb	r3, [r7, #2]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d102      	bne.n	8002be8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_PCD_EP_Open+0xaa>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e00e      	b.n	8002c14 <HAL_PCD_EP_Open+0xc8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68f9      	ldr	r1, [r7, #12]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f003 fc03 	bl	8006410 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002c12:	7afb      	ldrb	r3, [r7, #11]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	da0f      	bge.n	8002c50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	f003 020f 	and.w	r2, r3, #15
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	3338      	adds	r3, #56	; 0x38
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	4413      	add	r3, r2
 8002c44:	3304      	adds	r3, #4
 8002c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	705a      	strb	r2, [r3, #1]
 8002c4e:	e00f      	b.n	8002c70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	f003 020f 	and.w	r2, r3, #15
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	3304      	adds	r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_PCD_EP_Close+0x6e>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e00e      	b.n	8002ca8 <HAL_PCD_EP_Close+0x8c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68f9      	ldr	r1, [r7, #12]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f003 fc41 	bl	8006520 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc0:	7afb      	ldrb	r3, [r7, #11]
 8002cc2:	f003 020f 	and.w	r2, r3, #15
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d102      	bne.n	8002d0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d0c:	7afb      	ldrb	r3, [r7, #11]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	6979      	ldr	r1, [r7, #20]
 8002d24:	f003 fec4 	bl	8006ab0 <USB_EP0StartXfer>
 8002d28:	e008      	b.n	8002d3c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	461a      	mov	r2, r3
 8002d36:	6979      	ldr	r1, [r7, #20]
 8002d38:	f003 fc76 	bl	8006628 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	460b      	mov	r3, r1
 8002d50:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	f003 020f 	and.w	r2, r3, #15
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002d68:	681b      	ldr	r3, [r3, #0]
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	60f8      	str	r0, [r7, #12]
 8002d7e:	607a      	str	r2, [r7, #4]
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	460b      	mov	r3, r1
 8002d84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d86:	7afb      	ldrb	r3, [r7, #11]
 8002d88:	f003 020f 	and.w	r2, r3, #15
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	3338      	adds	r3, #56	; 0x38
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	683a      	ldr	r2, [r7, #0]
 8002da8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	2201      	movs	r2, #1
 8002db4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002db6:	7afb      	ldrb	r3, [r7, #11]
 8002db8:	f003 030f 	and.w	r3, r3, #15
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d102      	bne.n	8002dd0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dd0:	7afb      	ldrb	r3, [r7, #11]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691b      	ldr	r3, [r3, #16]
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	6979      	ldr	r1, [r7, #20]
 8002de8:	f003 fe62 	bl	8006ab0 <USB_EP0StartXfer>
 8002dec:	e008      	b.n	8002e00 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	461a      	mov	r2, r3
 8002dfa:	6979      	ldr	r1, [r7, #20]
 8002dfc:	f003 fc14 	bl	8006628 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3718      	adds	r7, #24
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e16:	78fb      	ldrb	r3, [r7, #3]
 8002e18:	f003 020f 	and.w	r2, r3, #15
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d901      	bls.n	8002e28 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e050      	b.n	8002eca <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da0f      	bge.n	8002e50 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	3338      	adds	r3, #56	; 0x38
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	3304      	adds	r3, #4
 8002e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	705a      	strb	r2, [r3, #1]
 8002e4e:	e00d      	b.n	8002e6c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	4613      	mov	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	1a9b      	subs	r3, r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e72:	78fb      	ldrb	r3, [r7, #3]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_PCD_EP_SetStall+0x82>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e01e      	b.n	8002eca <HAL_PCD_EP_SetStall+0xc0>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68f9      	ldr	r1, [r7, #12]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 ffb9 	bl	8006e12 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ea0:	78fb      	ldrb	r3, [r7, #3]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10a      	bne.n	8002ec0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	b2d9      	uxtb	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f004 f9aa 	bl	8007214 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	460b      	mov	r3, r1
 8002edc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	f003 020f 	and.w	r2, r3, #15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d901      	bls.n	8002ef0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e042      	b.n	8002f76 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ef0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	da0f      	bge.n	8002f18 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 020f 	and.w	r2, r3, #15
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	3338      	adds	r3, #56	; 0x38
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	705a      	strb	r2, [r3, #1]
 8002f16:	e00f      	b.n	8002f38 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	f003 020f 	and.w	r2, r3, #15
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3304      	adds	r3, #4
 8002f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3e:	78fb      	ldrb	r3, [r7, #3]
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_PCD_EP_ClrStall+0x86>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e00e      	b.n	8002f76 <HAL_PCD_EP_ClrStall+0xa4>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68f9      	ldr	r1, [r7, #12]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f003 ffc1 	bl	8006eee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b08a      	sub	sp, #40	; 0x28
 8002f82:	af02      	add	r7, sp, #8
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	00db      	lsls	r3, r3, #3
 8002f98:	1a9b      	subs	r3, r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	3338      	adds	r3, #56	; 0x38
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d901      	bls.n	8002fb6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e06c      	b.n	8003090 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	69fa      	ldr	r2, [r7, #28]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d902      	bls.n	8002fd2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3303      	adds	r3, #3
 8002fd6:	089b      	lsrs	r3, r3, #2
 8002fd8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fda:	e02b      	b.n	8003034 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	69fa      	ldr	r2, [r7, #28]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d902      	bls.n	8002ff8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	3303      	adds	r3, #3
 8002ffc:	089b      	lsrs	r3, r3, #2
 8002ffe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	68d9      	ldr	r1, [r3, #12]
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003010:	b2db      	uxtb	r3, r3
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4603      	mov	r3, r0
 8003016:	6978      	ldr	r0, [r7, #20]
 8003018:	f003 fe9d 	bl	8006d56 <USB_WritePacket>

    ep->xfer_buff  += len;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	441a      	add	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	441a      	add	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	b29b      	uxth	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	429a      	cmp	r2, r3
 8003048:	d809      	bhi.n	800305e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003052:	429a      	cmp	r2, r3
 8003054:	d203      	bcs.n	800305e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1be      	bne.n	8002fdc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	695a      	ldr	r2, [r3, #20]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	429a      	cmp	r2, r3
 8003068:	d811      	bhi.n	800308e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	2201      	movs	r2, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800307e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	43db      	mvns	r3, r3
 8003084:	6939      	ldr	r1, [r7, #16]
 8003086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800308a:	4013      	ands	r3, r2
 800308c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	333c      	adds	r3, #60	; 0x3c
 80030b0:	3304      	adds	r3, #4
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	f040 80b3 	bne.w	8003236 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d028      	beq.n	800312c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a70      	ldr	r2, [pc, #448]	; (80032a0 <PCD_EP_OutXfrComplete_int+0x208>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d90e      	bls.n	8003100 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d009      	beq.n	8003100 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030f8:	461a      	mov	r2, r3
 80030fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030fe:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f008 fc39 	bl	800b978 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6818      	ldr	r0, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003110:	461a      	mov	r2, r3
 8003112:	2101      	movs	r1, #1
 8003114:	f004 f87e 	bl	8007214 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003124:	461a      	mov	r2, r3
 8003126:	2308      	movs	r3, #8
 8003128:	6093      	str	r3, [r2, #8]
 800312a:	e0b3      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	461a      	mov	r2, r3
 8003144:	2320      	movs	r3, #32
 8003146:	6093      	str	r3, [r2, #8]
 8003148:	e0a4      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 809f 	bne.w	8003294 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4a51      	ldr	r2, [pc, #324]	; (80032a0 <PCD_EP_OutXfrComplete_int+0x208>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d90f      	bls.n	800317e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4413      	add	r3, r2
 8003170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003174:	461a      	mov	r2, r3
 8003176:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800317a:	6093      	str	r3, [r2, #8]
 800317c:	e08a      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	4613      	mov	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003190:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	0159      	lsls	r1, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	440b      	add	r3, r1
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80031a4:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4403      	add	r3, r0
 80031b4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031b8:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	4613      	mov	r3, r2
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	440b      	add	r3, r1
 80031c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4403      	add	r3, r0
 80031dc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4419      	add	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4403      	add	r3, r0
 80031f2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031f6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	4619      	mov	r1, r3
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f008 fbcc 	bl	800b99c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d144      	bne.n	8003294 <PCD_EP_OutXfrComplete_int+0x1fc>
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	683a      	ldr	r2, [r7, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d138      	bne.n	8003294 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800322c:	461a      	mov	r2, r3
 800322e:	2101      	movs	r1, #1
 8003230:	f003 fff0 	bl	8007214 <USB_EP0_OutStart>
 8003234:	e02e      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	4a1a      	ldr	r2, [pc, #104]	; (80032a4 <PCD_EP_OutXfrComplete_int+0x20c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d124      	bne.n	8003288 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003254:	461a      	mov	r2, r3
 8003256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325a:	6093      	str	r3, [r2, #8]
 800325c:	e01a      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f003 0320 	and.w	r3, r3, #32
 8003264:	2b00      	cmp	r3, #0
 8003266:	d008      	beq.n	800327a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	461a      	mov	r2, r3
 8003276:	2320      	movs	r3, #32
 8003278:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	4619      	mov	r1, r3
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f008 fb8b 	bl	800b99c <HAL_PCD_DataOutStageCallback>
 8003286:	e005      	b.n	8003294 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	4619      	mov	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f008 fb84 	bl	800b99c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3718      	adds	r7, #24
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	4f54300a 	.word	0x4f54300a
 80032a4:	4f54310a 	.word	0x4f54310a

080032a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	333c      	adds	r3, #60	; 0x3c
 80032c0:	3304      	adds	r3, #4
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	015a      	lsls	r2, r3, #5
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	4413      	add	r3, r2
 80032ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d113      	bne.n	8003306 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a1f      	ldr	r2, [pc, #124]	; (8003360 <PCD_EP_OutSetupPacket_int+0xb8>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d922      	bls.n	800332c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01d      	beq.n	800332c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fc:	461a      	mov	r2, r3
 80032fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003302:	6093      	str	r3, [r2, #8]
 8003304:	e012      	b.n	800332c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a16      	ldr	r2, [pc, #88]	; (8003364 <PCD_EP_OutSetupPacket_int+0xbc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d10e      	bne.n	800332c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	461a      	mov	r2, r3
 8003326:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800332a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f008 fb23 	bl	800b978 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a0a      	ldr	r2, [pc, #40]	; (8003360 <PCD_EP_OutSetupPacket_int+0xb8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d90c      	bls.n	8003354 <PCD_EP_OutSetupPacket_int+0xac>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d108      	bne.n	8003354 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800334c:	461a      	mov	r2, r3
 800334e:	2101      	movs	r1, #1
 8003350:	f003 ff60 	bl	8007214 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	4f54300a 	.word	0x4f54300a
 8003364:	4f54310a 	.word	0x4f54310a

08003368 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	70fb      	strb	r3, [r7, #3]
 8003374:	4613      	mov	r3, r2
 8003376:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d107      	bne.n	8003396 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003386:	883b      	ldrh	r3, [r7, #0]
 8003388:	0419      	lsls	r1, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	430a      	orrs	r2, r1
 8003392:	629a      	str	r2, [r3, #40]	; 0x28
 8003394:	e028      	b.n	80033e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4413      	add	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
 80033a8:	e00d      	b.n	80033c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	3340      	adds	r3, #64	; 0x40
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	4413      	add	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	3301      	adds	r3, #1
 80033c4:	73fb      	strb	r3, [r7, #15]
 80033c6:	7bfa      	ldrb	r2, [r7, #15]
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d3ec      	bcc.n	80033aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033d0:	883b      	ldrh	r3, [r7, #0]
 80033d2:	0418      	lsls	r0, r3, #16
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6819      	ldr	r1, [r3, #0]
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	3b01      	subs	r3, #1
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	4302      	orrs	r2, r0
 80033e0:	3340      	adds	r3, #64	; 0x40
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr

080033f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033f6:	b480      	push	{r7}
 80033f8:	b083      	sub	sp, #12
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
 80033fe:	460b      	mov	r3, r1
 8003400:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	460b      	mov	r3, r1
 8003422:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e25b      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d075      	beq.n	800353a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344e:	4ba3      	ldr	r3, [pc, #652]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00c      	beq.n	8003474 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4ba0      	ldr	r3, [pc, #640]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003462:	2b08      	cmp	r3, #8
 8003464:	d112      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003466:	4b9d      	ldr	r3, [pc, #628]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003472:	d10b      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	4b99      	ldr	r3, [pc, #612]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d05b      	beq.n	8003538 <HAL_RCC_OscConfig+0x108>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d157      	bne.n	8003538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e236      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x74>
 8003496:	4b91      	ldr	r3, [pc, #580]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a90      	ldr	r2, [pc, #576]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x98>
 80034ae:	4b8b      	ldr	r3, [pc, #556]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a8a      	ldr	r2, [pc, #552]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b88      	ldr	r3, [pc, #544]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a87      	ldr	r2, [pc, #540]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034c8:	4b84      	ldr	r3, [pc, #528]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a83      	ldr	r2, [pc, #524]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b81      	ldr	r3, [pc, #516]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a80      	ldr	r2, [pc, #512]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fe1e 	bl	8001128 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fd fe1a 	bl	8001128 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	; 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e1fb      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b76      	ldr	r3, [pc, #472]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fd fe0a 	bl	8001128 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003518:	f7fd fe06 	bl	8001128 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	; 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1e7      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0xe8>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003546:	4b65      	ldr	r3, [pc, #404]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b62      	ldr	r3, [pc, #392]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355e:	4b5f      	ldr	r3, [pc, #380]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	4b5c      	ldr	r3, [pc, #368]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1bb      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b56      	ldr	r3, [pc, #344]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4952      	ldr	r1, [pc, #328]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a0:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <HAL_RCC_OscConfig+0x2b0>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fd fdbf 	bl	8001128 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fd fdbb 	bl	8001128 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e19c      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	4b46      	ldr	r3, [pc, #280]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b43      	ldr	r3, [pc, #268]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4940      	ldr	r1, [pc, #256]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e2:	4b3f      	ldr	r3, [pc, #252]	; (80036e0 <HAL_RCC_OscConfig+0x2b0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fd fd9e 	bl	8001128 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fd fd9a 	bl	8001128 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e17b      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b36      	ldr	r3, [pc, #216]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d030      	beq.n	800367c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d016      	beq.n	8003650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b30      	ldr	r3, [pc, #192]	; (80036e4 <HAL_RCC_OscConfig+0x2b4>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fd fd7e 	bl	8001128 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003630:	f7fd fd7a 	bl	8001128 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e15b      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	4b26      	ldr	r3, [pc, #152]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003644:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x200>
 800364e:	e015      	b.n	800367c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003650:	4b24      	ldr	r3, [pc, #144]	; (80036e4 <HAL_RCC_OscConfig+0x2b4>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003656:	f7fd fd67 	bl	8001128 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800365e:	f7fd fd63 	bl	8001128 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e144      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003670:	4b1a      	ldr	r3, [pc, #104]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f0      	bne.n	800365e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80a0 	beq.w	80037ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800368a:	2300      	movs	r3, #0
 800368c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800368e:	4b13      	ldr	r3, [pc, #76]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a0e      	ldr	r2, [pc, #56]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <HAL_RCC_OscConfig+0x2ac>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036b6:	2301      	movs	r3, #1
 80036b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	4b0b      	ldr	r3, [pc, #44]	; (80036e8 <HAL_RCC_OscConfig+0x2b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d121      	bne.n	800370a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036c6:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <HAL_RCC_OscConfig+0x2b8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <HAL_RCC_OscConfig+0x2b8>)
 80036cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036d2:	f7fd fd29 	bl	8001128 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d8:	e011      	b.n	80036fe <HAL_RCC_OscConfig+0x2ce>
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	42470000 	.word	0x42470000
 80036e4:	42470e80 	.word	0x42470e80
 80036e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ec:	f7fd fd1c 	bl	8001128 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e0fd      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036fe:	4b81      	ldr	r3, [pc, #516]	; (8003904 <HAL_RCC_OscConfig+0x4d4>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d106      	bne.n	8003720 <HAL_RCC_OscConfig+0x2f0>
 8003712:	4b7d      	ldr	r3, [pc, #500]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003716:	4a7c      	ldr	r2, [pc, #496]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	6713      	str	r3, [r2, #112]	; 0x70
 800371e:	e01c      	b.n	800375a <HAL_RCC_OscConfig+0x32a>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	2b05      	cmp	r3, #5
 8003726:	d10c      	bne.n	8003742 <HAL_RCC_OscConfig+0x312>
 8003728:	4b77      	ldr	r3, [pc, #476]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a76      	ldr	r2, [pc, #472]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800372e:	f043 0304 	orr.w	r3, r3, #4
 8003732:	6713      	str	r3, [r2, #112]	; 0x70
 8003734:	4b74      	ldr	r3, [pc, #464]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003738:	4a73      	ldr	r2, [pc, #460]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800373a:	f043 0301 	orr.w	r3, r3, #1
 800373e:	6713      	str	r3, [r2, #112]	; 0x70
 8003740:	e00b      	b.n	800375a <HAL_RCC_OscConfig+0x32a>
 8003742:	4b71      	ldr	r3, [pc, #452]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a70      	ldr	r2, [pc, #448]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003748:	f023 0301 	bic.w	r3, r3, #1
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b6e      	ldr	r3, [pc, #440]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a6d      	ldr	r2, [pc, #436]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d015      	beq.n	800378e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003762:	f7fd fce1 	bl	8001128 <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	e00a      	b.n	8003780 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376a:	f7fd fcdd 	bl	8001128 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	f241 3288 	movw	r2, #5000	; 0x1388
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0bc      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003780:	4b61      	ldr	r3, [pc, #388]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0ee      	beq.n	800376a <HAL_RCC_OscConfig+0x33a>
 800378c:	e014      	b.n	80037b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fd fccb 	bl	8001128 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	e00a      	b.n	80037ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003796:	f7fd fcc7 	bl	8001128 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e0a6      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ac:	4b56      	ldr	r3, [pc, #344]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1ee      	bne.n	8003796 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037b8:	7dfb      	ldrb	r3, [r7, #23]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d105      	bne.n	80037ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037be:	4b52      	ldr	r3, [pc, #328]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	4a51      	ldr	r2, [pc, #324]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80037c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 8092 	beq.w	80038f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037d4:	4b4c      	ldr	r3, [pc, #304]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 030c 	and.w	r3, r3, #12
 80037dc:	2b08      	cmp	r3, #8
 80037de:	d05c      	beq.n	800389a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d141      	bne.n	800386c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e8:	4b48      	ldr	r3, [pc, #288]	; (800390c <HAL_RCC_OscConfig+0x4dc>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fd fc9b 	bl	8001128 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fd fc97 	bl	8001128 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e078      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003808:	4b3f      	ldr	r3, [pc, #252]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	019b      	lsls	r3, r3, #6
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	041b      	lsls	r3, r3, #16
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003836:	061b      	lsls	r3, r3, #24
 8003838:	4933      	ldr	r1, [pc, #204]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383e:	4b33      	ldr	r3, [pc, #204]	; (800390c <HAL_RCC_OscConfig+0x4dc>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003844:	f7fd fc70 	bl	8001128 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384c:	f7fd fc6c 	bl	8001128 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e04d      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800385e:	4b2a      	ldr	r3, [pc, #168]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x41c>
 800386a:	e045      	b.n	80038f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800386c:	4b27      	ldr	r3, [pc, #156]	; (800390c <HAL_RCC_OscConfig+0x4dc>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003872:	f7fd fc59 	bl	8001128 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800387a:	f7fd fc55 	bl	8001128 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e036      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388c:	4b1e      	ldr	r3, [pc, #120]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1f0      	bne.n	800387a <HAL_RCC_OscConfig+0x44a>
 8003898:	e02e      	b.n	80038f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e029      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038a6:	4b18      	ldr	r3, [pc, #96]	; (8003908 <HAL_RCC_OscConfig+0x4d8>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d11c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d115      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10d      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d106      	bne.n	80038f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40007000 	.word	0x40007000
 8003908:	40023800 	.word	0x40023800
 800390c:	42470060 	.word	0x42470060

08003910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e0cc      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003924:	4b68      	ldr	r3, [pc, #416]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	429a      	cmp	r2, r3
 8003930:	d90c      	bls.n	800394c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003932:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b63      	ldr	r3, [pc, #396]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	429a      	cmp	r2, r3
 8003946:	d001      	beq.n	800394c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e0b8      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0302 	and.w	r3, r3, #2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d020      	beq.n	800399a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	d005      	beq.n	8003970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003964:	4b59      	ldr	r3, [pc, #356]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4a58      	ldr	r2, [pc, #352]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800396e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0308 	and.w	r3, r3, #8
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800397c:	4b53      	ldr	r3, [pc, #332]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	4a52      	ldr	r2, [pc, #328]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	494d      	ldr	r1, [pc, #308]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d044      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ae:	4b47      	ldr	r3, [pc, #284]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d119      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e07f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b3f      	ldr	r3, [pc, #252]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d109      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e06f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039de:	4b3b      	ldr	r3, [pc, #236]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e067      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ee:	4b37      	ldr	r3, [pc, #220]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f023 0203 	bic.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	4934      	ldr	r1, [pc, #208]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a00:	f7fd fb92 	bl	8001128 <HAL_GetTick>
 8003a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a08:	f7fd fb8e 	bl	8001128 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e04f      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	4b2b      	ldr	r3, [pc, #172]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 020c 	and.w	r2, r3, #12
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d1eb      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d20c      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b22      	ldr	r3, [pc, #136]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e032      	b.n	8003abe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0304 	and.w	r3, r3, #4
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a64:	4b19      	ldr	r3, [pc, #100]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4916      	ldr	r1, [pc, #88]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0308 	and.w	r3, r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d009      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	490e      	ldr	r1, [pc, #56]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a96:	f000 f821 	bl	8003adc <HAL_RCC_GetSysClockFreq>
 8003a9a:	4601      	mov	r1, r0
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	; (8003acc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f003 030f 	and.w	r3, r3, #15
 8003aa6:	4a0a      	ldr	r2, [pc, #40]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa8:	5cd3      	ldrb	r3, [r2, r3]
 8003aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8003aae:	4a09      	ldr	r2, [pc, #36]	; (8003ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab2:	4b09      	ldr	r3, [pc, #36]	; (8003ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd faf2 	bl	80010a0 <HAL_InitTick>

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023c00 	.word	0x40023c00
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	0800c880 	.word	0x0800c880
 8003ad4:	20000000 	.word	0x20000000
 8003ad8:	20000004 	.word	0x20000004

08003adc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	2300      	movs	r3, #0
 8003aec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af2:	4b50      	ldr	r3, [pc, #320]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d007      	beq.n	8003b0e <HAL_RCC_GetSysClockFreq+0x32>
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d008      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x38>
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 808d 	bne.w	8003c22 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b4b      	ldr	r3, [pc, #300]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b0a:	60bb      	str	r3, [r7, #8]
       break;
 8003b0c:	e08c      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b0e:	4b4b      	ldr	r3, [pc, #300]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b10:	60bb      	str	r3, [r7, #8]
      break;
 8003b12:	e089      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b14:	4b47      	ldr	r3, [pc, #284]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b1e:	4b45      	ldr	r3, [pc, #276]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d023      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b2a:	4b42      	ldr	r3, [pc, #264]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	099b      	lsrs	r3, r3, #6
 8003b30:	f04f 0400 	mov.w	r4, #0
 8003b34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	ea03 0501 	and.w	r5, r3, r1
 8003b40:	ea04 0602 	and.w	r6, r4, r2
 8003b44:	4a3d      	ldr	r2, [pc, #244]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b46:	fb02 f106 	mul.w	r1, r2, r6
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	fb02 f205 	mul.w	r2, r2, r5
 8003b50:	440a      	add	r2, r1
 8003b52:	493a      	ldr	r1, [pc, #232]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b54:	fba5 0101 	umull	r0, r1, r5, r1
 8003b58:	1853      	adds	r3, r2, r1
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f04f 0400 	mov.w	r4, #0
 8003b62:	461a      	mov	r2, r3
 8003b64:	4623      	mov	r3, r4
 8003b66:	f7fc fb8b 	bl	8000280 <__aeabi_uldivmod>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e049      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b72:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	f04f 0400 	mov.w	r4, #0
 8003b7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	ea03 0501 	and.w	r5, r3, r1
 8003b88:	ea04 0602 	and.w	r6, r4, r2
 8003b8c:	4629      	mov	r1, r5
 8003b8e:	4632      	mov	r2, r6
 8003b90:	f04f 0300 	mov.w	r3, #0
 8003b94:	f04f 0400 	mov.w	r4, #0
 8003b98:	0154      	lsls	r4, r2, #5
 8003b9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b9e:	014b      	lsls	r3, r1, #5
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4622      	mov	r2, r4
 8003ba4:	1b49      	subs	r1, r1, r5
 8003ba6:	eb62 0206 	sbc.w	r2, r2, r6
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	f04f 0400 	mov.w	r4, #0
 8003bb2:	0194      	lsls	r4, r2, #6
 8003bb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003bb8:	018b      	lsls	r3, r1, #6
 8003bba:	1a5b      	subs	r3, r3, r1
 8003bbc:	eb64 0402 	sbc.w	r4, r4, r2
 8003bc0:	f04f 0100 	mov.w	r1, #0
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	00e2      	lsls	r2, r4, #3
 8003bca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003bce:	00d9      	lsls	r1, r3, #3
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4614      	mov	r4, r2
 8003bd4:	195b      	adds	r3, r3, r5
 8003bd6:	eb44 0406 	adc.w	r4, r4, r6
 8003bda:	f04f 0100 	mov.w	r1, #0
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	02a2      	lsls	r2, r4, #10
 8003be4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003be8:	0299      	lsls	r1, r3, #10
 8003bea:	460b      	mov	r3, r1
 8003bec:	4614      	mov	r4, r2
 8003bee:	4618      	mov	r0, r3
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f04f 0400 	mov.w	r4, #0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	4623      	mov	r3, r4
 8003bfc:	f7fc fb40 	bl	8000280 <__aeabi_uldivmod>
 8003c00:	4603      	mov	r3, r0
 8003c02:	460c      	mov	r4, r1
 8003c04:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c06:	4b0b      	ldr	r3, [pc, #44]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	3301      	adds	r3, #1
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1e:	60bb      	str	r3, [r7, #8]
      break;
 8003c20:	e002      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c22:	4b05      	ldr	r3, [pc, #20]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003c24:	60bb      	str	r3, [r7, #8]
      break;
 8003c26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c28:	68bb      	ldr	r3, [r7, #8]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c32:	bf00      	nop
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	00b71b00 	.word	0x00b71b00

08003c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000000 	.word	0x20000000

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c5c:	f7ff fff0 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c60:	4601      	mov	r1, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4a03      	ldr	r2, [pc, #12]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6e:	5cd3      	ldrb	r3, [r2, r3]
 8003c70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	0800c890 	.word	0x0800c890

08003c80 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e022      	b.n	8003cd8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d105      	bne.n	8003caa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7fd f817 	bl	8000cd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2203      	movs	r2, #3
 8003cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f814 	bl	8003ce0 <HAL_SD_InitCard>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e00a      	b.n	8003cd8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ce0:	b5b0      	push	{r4, r5, r7, lr}
 8003ce2:	b08e      	sub	sp, #56	; 0x38
 8003ce4:	af04      	add	r7, sp, #16
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003cec:	2300      	movs	r3, #0
 8003cee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003cfc:	2376      	movs	r3, #118	; 0x76
 8003cfe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681d      	ldr	r5, [r3, #0]
 8003d04:	466c      	mov	r4, sp
 8003d06:	f107 0314 	add.w	r3, r7, #20
 8003d0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003d12:	f107 0308 	add.w	r3, r7, #8
 8003d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f001 facd 	bl	80052b8 <SDIO_Init>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e031      	b.n	8003d94 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003d30:	4b1a      	ldr	r3, [pc, #104]	; (8003d9c <HAL_SD_InitCard+0xbc>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 fb05 	bl	800534a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003d40:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <HAL_SD_InitCard+0xbc>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fffa 	bl	8004d40 <SD_PowerON>
 8003d4c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	431a      	orrs	r2, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e013      	b.n	8003d94 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 ff19 	bl	8004ba4 <SD_InitCard>
 8003d72:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3728      	adds	r7, #40	; 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d9c:	422580a0 	.word	0x422580a0

08003da0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b08c      	sub	sp, #48	; 0x30
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d107      	bne.n	8003dc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0c9      	b.n	8003f5c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 80c2 	bne.w	8003f5a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	441a      	add	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d907      	bls.n	8003dfa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e0b0      	b.n	8003f5c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2203      	movs	r2, #3
 8003dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003e18:	f043 0302 	orr.w	r3, r3, #2
 8003e1c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	4a50      	ldr	r2, [pc, #320]	; (8003f64 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8003e24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a4f      	ldr	r2, [pc, #316]	; (8003f68 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8003e2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	2200      	movs	r2, #0
 8003e34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3380      	adds	r3, #128	; 0x80
 8003e40:	4619      	mov	r1, r3
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	025b      	lsls	r3, r3, #9
 8003e48:	089b      	lsrs	r3, r3, #2
 8003e4a:	f7fd fb5b 	bl	8001504 <HAL_DMA_Start_IT>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d017      	beq.n	8003e84 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003e62:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a40      	ldr	r2, [pc, #256]	; (8003f6c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e06b      	b.n	8003f5c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003e84:	4b3a      	ldr	r3, [pc, #232]	; (8003f70 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8003e86:	2201      	movs	r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d002      	beq.n	8003e98 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	025b      	lsls	r3, r3, #9
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f001 fae5 	bl	8005470 <SDMMC_CmdBlockLength>
 8003ea6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8003ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00f      	beq.n	8003ece <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2e      	ldr	r2, [pc, #184]	; (8003f6c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e046      	b.n	8003f5c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ece:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	025b      	lsls	r3, r3, #9
 8003ed8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003eda:	2390      	movs	r3, #144	; 0x90
 8003edc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f107 0210 	add.w	r2, r7, #16
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f001 fa8f 	bl	8005418 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d90a      	bls.n	8003f16 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2282      	movs	r2, #130	; 0x82
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f001 faf3 	bl	80054f8 <SDMMC_CmdReadMultiBlock>
 8003f12:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003f14:	e009      	b.n	8003f2a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2281      	movs	r2, #129	; 0x81
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 fac6 	bl	80054b4 <SDMMC_CmdReadSingleBlock>
 8003f28:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a0d      	ldr	r2, [pc, #52]	; (8003f6c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e002      	b.n	8003f5c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	e000      	b.n	8003f5c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
  }
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3730      	adds	r7, #48	; 0x30
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	080049b3 	.word	0x080049b3
 8003f68:	08004a25 	.word	0x08004a25
 8003f6c:	004005ff 	.word	0x004005ff
 8003f70:	4225858c 	.word	0x4225858c

08003f74 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b08c      	sub	sp, #48	; 0x30
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d107      	bne.n	8003f9c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0ce      	b.n	800413a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	f040 80c7 	bne.w	8004138 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003fb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	441a      	add	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d907      	bls.n	8003fce <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e0b5      	b.n	800413a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2203      	movs	r2, #3
 8003fd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	6812      	ldr	r2, [r2, #0]
 8003fe8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	4a53      	ldr	r2, [pc, #332]	; (8004144 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8003ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffe:	4a52      	ldr	r2, [pc, #328]	; (8004148 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004000:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004006:	2200      	movs	r2, #0
 8004008:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	2b01      	cmp	r3, #1
 8004010:	d002      	beq.n	8004018 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004014:	025b      	lsls	r3, r3, #9
 8004016:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004020:	4618      	mov	r0, r3
 8004022:	f001 fa25 	bl	8005470 <SDMMC_CmdBlockLength>
 8004026:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00f      	beq.n	800404e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a46      	ldr	r2, [pc, #280]	; (800414c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004034:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2201      	movs	r2, #1
 8004046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e075      	b.n	800413a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d90a      	bls.n	800406a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	22a0      	movs	r2, #160	; 0xa0
 8004058:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004060:	4618      	mov	r0, r3
 8004062:	f001 fa8d 	bl	8005580 <SDMMC_CmdWriteMultiBlock>
 8004066:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004068:	e009      	b.n	800407e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2290      	movs	r2, #144	; 0x90
 800406e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004076:	4618      	mov	r0, r3
 8004078:	f001 fa60 	bl	800553c <SDMMC_CmdWriteSingleBlock>
 800407c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d012      	beq.n	80040aa <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a30      	ldr	r2, [pc, #192]	; (800414c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800408a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004092:	431a      	orrs	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e047      	b.n	800413a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80040aa:	4b29      	ldr	r3, [pc, #164]	; (8004150 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3380      	adds	r3, #128	; 0x80
 80040bc:	461a      	mov	r2, r3
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	025b      	lsls	r3, r3, #9
 80040c2:	089b      	lsrs	r3, r3, #2
 80040c4:	f7fd fa1e 	bl	8001504 <HAL_DMA_Start_IT>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d01c      	beq.n	8004108 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	6812      	ldr	r2, [r2, #0]
 80040d8:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80040dc:	f023 0302 	bic.w	r3, r3, #2
 80040e0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a19      	ldr	r2, [pc, #100]	; (800414c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e018      	b.n	800413a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004108:	f04f 33ff 	mov.w	r3, #4294967295
 800410c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	025b      	lsls	r3, r3, #9
 8004112:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004114:	2390      	movs	r3, #144	; 0x90
 8004116:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004118:	2300      	movs	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800411c:	2300      	movs	r3, #0
 800411e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004120:	2301      	movs	r3, #1
 8004122:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f107 0210 	add.w	r2, r7, #16
 800412c:	4611      	mov	r1, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f001 f972 	bl	8005418 <SDIO_ConfigData>

      return HAL_OK;
 8004134:	2300      	movs	r3, #0
 8004136:	e000      	b.n	800413a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
  }
}
 800413a:	4618      	mov	r0, r3
 800413c:	3730      	adds	r7, #48	; 0x30
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	08004989 	.word	0x08004989
 8004148:	08004a25 	.word	0x08004a25
 800414c:	004005ff 	.word	0x004005ff
 8004150:	4225858c 	.word	0x4225858c

08004154 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d008      	beq.n	8004182 <HAL_SD_IRQHandler+0x2e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 fff6 	bl	800516c <SD_Read_IT>
 8004180:	e165      	b.n	800444e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 808f 	beq.w	80042b0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800419a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6812      	ldr	r2, [r2, #0]
 80041a6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80041aa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80041ae:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f022 0201 	bic.w	r2, r2, #1
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d039      	beq.n	800423e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d104      	bne.n	80041de <HAL_SD_IRQHandler+0x8a>
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d011      	beq.n	8004202 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 f9ee 	bl	80055c4 <SDMMC_CmdStopTransfer>
 80041e8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f943 	bl	8004488 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f240 523a 	movw	r2, #1338	; 0x53a
 800420a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d104      	bne.n	800422e <HAL_SD_IRQHandler+0xda>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f920 	bl	8004474 <HAL_SD_RxCpltCallback>
 8004234:	e10b      	b.n	800444e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f912 	bl	8004460 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800423c:	e107      	b.n	800444e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8102 	beq.w	800444e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b00      	cmp	r3, #0
 8004252:	d011      	beq.n	8004278 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4618      	mov	r0, r3
 800425a:	f001 f9b3 	bl	80055c4 <SDMMC_CmdStopTransfer>
 800425e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f908 	bl	8004488 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	f040 80e5 	bne.w	800444e <HAL_SD_IRQHandler+0x2fa>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	f040 80df 	bne.w	800444e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0208 	bic.w	r2, r2, #8
 800429e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f8d9 	bl	8004460 <HAL_SD_TxCpltCallback>
}
 80042ae:	e0ce      	b.n	800444e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_SD_IRQHandler+0x17c>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 ffa0 	bl	800520e <SD_Write_IT>
 80042ce:	e0be      	b.n	800444e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d6:	f240 233a 	movw	r3, #570	; 0x23a
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80b6 	beq.w	800444e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	f043 0202 	orr.w	r2, r3, #2
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004302:	f003 0308 	and.w	r3, r3, #8
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	f043 0208 	orr.w	r2, r3, #8
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	f003 0310 	and.w	r3, r3, #16
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	f043 0210 	orr.w	r2, r3, #16
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	f043 0208 	orr.w	r2, r3, #8
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f240 723a 	movw	r2, #1850	; 0x73a
 800436c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800437c:	f023 0302 	bic.w	r3, r3, #2
 8004380:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f001 f91c 	bl	80055c4 <SDMMC_CmdStopTransfer>
 800438c:	4602      	mov	r2, r0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004392:	431a      	orrs	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f869 	bl	8004488 <HAL_SD_ErrorCallback>
}
 80043b6:	e04a      	b.n	800444e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d045      	beq.n	800444e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_SD_IRQHandler+0x282>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d011      	beq.n	80043fa <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <HAL_SD_IRQHandler+0x304>)
 80043dc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fd f8e6 	bl	80015b4 <HAL_DMA_Abort_IT>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d02f      	beq.n	800444e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fb68 	bl	8004ac8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80043f8:	e029      	b.n	800444e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d104      	bne.n	800440e <HAL_SD_IRQHandler+0x2ba>
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d011      	beq.n	8004432 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	4a12      	ldr	r2, [pc, #72]	; (800445c <HAL_SD_IRQHandler+0x308>)
 8004414:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4618      	mov	r0, r3
 800441c:	f7fd f8ca 	bl	80015b4 <HAL_DMA_Abort_IT>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d013      	beq.n	800444e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fb83 	bl	8004b36 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004430:	e00d      	b.n	800444e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f828 	bl	800449c <HAL_SD_AbortCallback>
}
 800444c:	e7ff      	b.n	800444e <HAL_SD_IRQHandler+0x2fa>
 800444e:	bf00      	nop
 8004450:	3710      	adds	r7, #16
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	08004ac9 	.word	0x08004ac9
 800445c:	08004b37 	.word	0x08004b37

08004460 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044be:	0f9b      	lsrs	r3, r3, #30
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ca:	0e9b      	lsrs	r3, r3, #26
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044dc:	0e1b      	lsrs	r3, r3, #24
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004506:	b2da      	uxtb	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004510:	0d1b      	lsrs	r3, r3, #20
 8004512:	b29a      	uxth	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	b2da      	uxtb	r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800452e:	0bdb      	lsrs	r3, r3, #15
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	b2da      	uxtb	r2, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004540:	0b9b      	lsrs	r3, r3, #14
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	b2da      	uxtb	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004552:	0b5b      	lsrs	r3, r3, #13
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	b2da      	uxtb	r2, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004564:	0b1b      	lsrs	r3, r3, #12
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	b2da      	uxtb	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457c:	2b00      	cmp	r3, #0
 800457e:	d163      	bne.n	8004648 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004584:	009a      	lsls	r2, r3, #2
 8004586:	f640 73fc 	movw	r3, #4092	; 0xffc
 800458a:	4013      	ands	r3, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004590:	0f92      	lsrs	r2, r2, #30
 8004592:	431a      	orrs	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800459c:	0edb      	lsrs	r3, r3, #27
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	0e1b      	lsrs	r3, r3, #24
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c0:	0d5b      	lsrs	r3, r3, #21
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d2:	0c9b      	lsrs	r3, r3, #18
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e4:	0bdb      	lsrs	r3, r3, #15
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	7e1b      	ldrb	r3, [r3, #24]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	3302      	adds	r3, #2
 8004608:	2201      	movs	r2, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004612:	fb02 f203 	mul.w	r2, r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	7a1b      	ldrb	r3, [r3, #8]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	2201      	movs	r2, #1
 8004626:	409a      	lsls	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004634:	0a52      	lsrs	r2, r2, #9
 8004636:	fb02 f203 	mul.w	r2, r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004644:	661a      	str	r2, [r3, #96]	; 0x60
 8004646:	e031      	b.n	80046ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	2b01      	cmp	r3, #1
 800464e:	d11d      	bne.n	800468c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	431a      	orrs	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	3301      	adds	r3, #1
 800466c:	029a      	lsls	r2, r3, #10
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	661a      	str	r2, [r3, #96]	; 0x60
 800468a:	e00f      	b.n	80046ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a58      	ldr	r2, [pc, #352]	; (80047f4 <HAL_SD_GetCardCSD+0x344>)
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e09d      	b.n	80047e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b0:	0b9b      	lsrs	r3, r3, #14
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c2:	09db      	lsrs	r3, r3, #7
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	0fdb      	lsrs	r3, r3, #31
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	0f5b      	lsrs	r3, r3, #29
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	0e9b      	lsrs	r3, r3, #26
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	b2da      	uxtb	r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	0d9b      	lsrs	r3, r3, #22
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	b2da      	uxtb	r2, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	0d5b      	lsrs	r3, r3, #21
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	b2da      	uxtb	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	b2da      	uxtb	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	0bdb      	lsrs	r3, r3, #15
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	b2da      	uxtb	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	0b9b      	lsrs	r3, r3, #14
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	b2da      	uxtb	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	0b5b      	lsrs	r3, r3, #13
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	b2da      	uxtb	r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	0b1b      	lsrs	r3, r3, #12
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	b2da      	uxtb	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	004005ff 	.word	0x004005ff

080047f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004850:	b5b0      	push	{r4, r5, r7, lr}
 8004852:	b08e      	sub	sp, #56	; 0x38
 8004854:	af04      	add	r7, sp, #16
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2203      	movs	r2, #3
 800485e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004866:	2b03      	cmp	r3, #3
 8004868:	d02e      	beq.n	80048c8 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004870:	d106      	bne.n	8004880 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004876:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
 800487e:	e029      	b.n	80048d4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004886:	d10a      	bne.n	800489e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fb0f 	bl	8004eac <SD_WideBus_Enable>
 800488e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	639a      	str	r2, [r3, #56]	; 0x38
 800489c:	e01a      	b.n	80048d4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10a      	bne.n	80048ba <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 fb4c 	bl	8004f42 <SD_WideBus_Disable>
 80048aa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	431a      	orrs	r2, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	639a      	str	r2, [r3, #56]	; 0x38
 80048b8:	e00c      	b.n	80048d4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
 80048c6:	e005      	b.n	80048d4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d009      	beq.n	80048f0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a18      	ldr	r2, [pc, #96]	; (8004944 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e024      	b.n	800493a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681d      	ldr	r5, [r3, #0]
 8004916:	466c      	mov	r4, sp
 8004918:	f107 0318 	add.w	r3, r7, #24
 800491c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004920:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800492a:	4628      	mov	r0, r5
 800492c:	f000 fcc4 	bl	80052b8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3728      	adds	r7, #40	; 0x28
 800493e:	46bd      	mov	sp, r7
 8004940:	bdb0      	pop	{r4, r5, r7, pc}
 8004942:	bf00      	nop
 8004944:	004005ff 	.word	0x004005ff

08004948 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004954:	f107 030c 	add.w	r3, r7, #12
 8004958:	4619      	mov	r1, r3
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa7e 	bl	8004e5c <SD_SendStatus>
 8004960:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d005      	beq.n	8004974 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	431a      	orrs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	0a5b      	lsrs	r3, r3, #9
 8004978:	f003 030f 	and.w	r3, r3, #15
 800497c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800497e:	693b      	ldr	r3, [r7, #16]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004994:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr

080049b2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c4:	2b82      	cmp	r3, #130	; 0x82
 80049c6:	d111      	bne.n	80049ec <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fdf9 	bl	80055c4 <SDMMC_CmdStopTransfer>
 80049d2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff fd4e 	bl	8004488 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 0208 	bic.w	r2, r2, #8
 80049fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f7ff fd2d 	bl	8004474 <HAL_SD_RxCpltCallback>
#endif
}
 8004a1a:	bf00      	nop
 8004a1c:	3710      	adds	r7, #16
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
	...

08004a24 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a30:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc ff6a 	bl	800190c <HAL_DMA_GetError>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d03e      	beq.n	8004abc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a44:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d002      	beq.n	8004a5a <SD_DMAError+0x36>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d12d      	bne.n	8004ab6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <SD_DMAError+0xa0>)
 8004a60:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004a70:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004a7e:	6978      	ldr	r0, [r7, #20]
 8004a80:	f7ff ff62 	bl	8004948 <HAL_SD_GetCardState>
 8004a84:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	2b06      	cmp	r3, #6
 8004a8a:	d002      	beq.n	8004a92 <SD_DMAError+0x6e>
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2b05      	cmp	r3, #5
 8004a90:	d10a      	bne.n	8004aa8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 fd94 	bl	80055c4 <SDMMC_CmdStopTransfer>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004ab6:	6978      	ldr	r0, [r7, #20]
 8004ab8:	f7ff fce6 	bl	8004488 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004abc:	bf00      	nop
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	004005ff 	.word	0x004005ff

08004ac8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f7ff ff31 	bl	8004948 <HAL_SD_GetCardState>
 8004ae6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	2b06      	cmp	r3, #6
 8004afa:	d002      	beq.n	8004b02 <SD_DMATxAbort+0x3a>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2b05      	cmp	r3, #5
 8004b00:	d10a      	bne.n	8004b18 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fd5c 	bl	80055c4 <SDMMC_CmdStopTransfer>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	431a      	orrs	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d103      	bne.n	8004b28 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff fcbb 	bl	800449c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b26:	e002      	b.n	8004b2e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f7ff fcad 	bl	8004488 <HAL_SD_ErrorCallback>
}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}

08004b36 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b084      	sub	sp, #16
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b4c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f7ff fefa 	bl	8004948 <HAL_SD_GetCardState>
 8004b54:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2b06      	cmp	r3, #6
 8004b68:	d002      	beq.n	8004b70 <SD_DMARxAbort+0x3a>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b05      	cmp	r3, #5
 8004b6e:	d10a      	bne.n	8004b86 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fd25 	bl	80055c4 <SDMMC_CmdStopTransfer>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	431a      	orrs	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff fc84 	bl	800449c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004b94:	e002      	b.n	8004b9c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fc76 	bl	8004488 <HAL_SD_ErrorCallback>
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b094      	sub	sp, #80	; 0x50
 8004ba8:	af04      	add	r7, sp, #16
 8004baa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004bac:	2301      	movs	r3, #1
 8004bae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f000 fbd7 	bl	8005368 <SDIO_GetPowerState>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d102      	bne.n	8004bc6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004bc4:	e0b7      	b.n	8004d36 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d02f      	beq.n	8004c2e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fe00 	bl	80057d8 <SDMMC_CmdSendCID>
 8004bd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <SD_InitCard+0x40>
    {
      return errorstate;
 8004be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be2:	e0a8      	b.n	8004d36 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2100      	movs	r1, #0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 fc01 	bl	80053f2 <SDIO_GetResponse>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2104      	movs	r1, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fbf8 	bl	80053f2 <SDIO_GetResponse>
 8004c02:	4602      	mov	r2, r0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2108      	movs	r1, #8
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fbef 	bl	80053f2 <SDIO_GetResponse>
 8004c14:	4602      	mov	r2, r0
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	210c      	movs	r1, #12
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fbe6 	bl	80053f2 <SDIO_GetResponse>
 8004c26:	4602      	mov	r2, r0
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c32:	2b03      	cmp	r3, #3
 8004c34:	d00d      	beq.n	8004c52 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f107 020e 	add.w	r2, r7, #14
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fe06 	bl	8005852 <SDMMC_CmdSetRelAdd>
 8004c46:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <SD_InitCard+0xae>
    {
      return errorstate;
 8004c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c50:	e071      	b.n	8004d36 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c56:	2b03      	cmp	r3, #3
 8004c58:	d036      	beq.n	8004cc8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004c5a:	89fb      	ldrh	r3, [r7, #14]
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f000 fdd0 	bl	8005814 <SDMMC_CmdSendCSD>
 8004c74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7e:	e05a      	b.n	8004d36 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2100      	movs	r1, #0
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fbb3 	bl	80053f2 <SDIO_GetResponse>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2104      	movs	r1, #4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f000 fbaa 	bl	80053f2 <SDIO_GetResponse>
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2108      	movs	r1, #8
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 fba1 	bl	80053f2 <SDIO_GetResponse>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	210c      	movs	r1, #12
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 fb98 	bl	80053f2 <SDIO_GetResponse>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2104      	movs	r1, #4
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 fb8f 	bl	80053f2 <SDIO_GetResponse>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	0d1a      	lsrs	r2, r3, #20
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004cdc:	f107 0310 	add.w	r3, r7, #16
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fbe4 	bl	80044b0 <HAL_SD_GetCardCSD>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004cee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004cf2:	e020      	b.n	8004d36 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	f04f 0400 	mov.w	r4, #0
 8004d02:	461a      	mov	r2, r3
 8004d04:	4623      	mov	r3, r4
 8004d06:	4608      	mov	r0, r1
 8004d08:	f000 fc7e 	bl	8005608 <SDMMC_CmdSelDesel>
 8004d0c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <SD_InitCard+0x174>
  {
    return errorstate;
 8004d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d16:	e00e      	b.n	8004d36 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681d      	ldr	r5, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	466c      	mov	r4, sp
 8004d20:	f103 0210 	add.w	r2, r3, #16
 8004d24:	ca07      	ldmia	r2, {r0, r1, r2}
 8004d26:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d2e:	4628      	mov	r0, r5
 8004d30:	f000 fac2 	bl	80052b8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3740      	adds	r7, #64	; 0x40
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004d40 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	2300      	movs	r3, #0
 8004d52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fc78 	bl	800564e <SDMMC_CmdGoIdleState>
 8004d5e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	e072      	b.n	8004e50 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fc8b 	bl	800568a <SDMMC_CmdOperCond>
 8004d74:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fc61 	bl	800564e <SDMMC_CmdGoIdleState>
 8004d8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d004      	beq.n	8004d9e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	e05b      	b.n	8004e50 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d137      	bne.n	8004e16 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f000 fc8b 	bl	80056c8 <SDMMC_CmdAppCommand>
 8004db2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d02d      	beq.n	8004e16 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004dbe:	e047      	b.n	8004e50 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2100      	movs	r1, #0
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f000 fc7e 	bl	80056c8 <SDMMC_CmdAppCommand>
 8004dcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <SD_PowerON+0x98>
    {
      return errorstate;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	e03b      	b.n	8004e50 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	491e      	ldr	r1, [pc, #120]	; (8004e58 <SD_PowerON+0x118>)
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fc94 	bl	800570c <SDMMC_CmdAppOperCommand>
 8004de4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004dec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004df0:	e02e      	b.n	8004e50 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2100      	movs	r1, #0
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 fafa 	bl	80053f2 <SDIO_GetResponse>
 8004dfe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	0fdb      	lsrs	r3, r3, #31
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <SD_PowerON+0xcc>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e000      	b.n	8004e0e <SD_PowerON+0xce>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]

    count++;
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	3301      	adds	r3, #1
 8004e14:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d802      	bhi.n	8004e26 <SD_PowerON+0xe6>
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d0cc      	beq.n	8004dc0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d902      	bls.n	8004e36 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004e30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e34:	e00c      	b.n	8004e50 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	645a      	str	r2, [r3, #68]	; 0x44
 8004e46:	e002      	b.n	8004e4e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3718      	adds	r7, #24
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	c1100000 	.word	0xc1100000

08004e5c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004e6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e70:	e018      	b.n	8004ea4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7a:	041b      	lsls	r3, r3, #16
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f000 fd08 	bl	8005894 <SDMMC_CmdSendStatus>
 8004e84:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	e009      	b.n	8004ea4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2100      	movs	r1, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 faab 	bl	80053f2 <SDIO_GetResponse>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	2300      	movs	r3, #0
 8004eba:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fa95 	bl	80053f2 <SDIO_GetResponse>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ed2:	d102      	bne.n	8004eda <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ed4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ed8:	e02f      	b.n	8004f3a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004eda:	f107 030c 	add.w	r3, r7, #12
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f879 	bl	8004fd8 <SD_FindSCR>
 8004ee6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	e023      	b.n	8004f3a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01c      	beq.n	8004f36 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f04:	041b      	lsls	r3, r3, #16
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f000 fbdd 	bl	80056c8 <SDMMC_CmdAppCommand>
 8004f0e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	e00f      	b.n	8004f3a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2102      	movs	r1, #2
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fc16 	bl	8005752 <SDMMC_CmdBusWidth>
 8004f26:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	e003      	b.n	8004f3a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e001      	b.n	8004f3a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004f36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b086      	sub	sp, #24
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2100      	movs	r1, #0
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 fa4a 	bl	80053f2 <SDIO_GetResponse>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f68:	d102      	bne.n	8004f70 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004f6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f6e:	e02f      	b.n	8004fd0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004f70:	f107 030c 	add.w	r3, r7, #12
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f82e 	bl	8004fd8 <SD_FindSCR>
 8004f7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d001      	beq.n	8004f88 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	e023      	b.n	8004fd0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01c      	beq.n	8004fcc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f9a:	041b      	lsls	r3, r3, #16
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f000 fb92 	bl	80056c8 <SDMMC_CmdAppCommand>
 8004fa4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	e00f      	b.n	8004fd0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f000 fbcb 	bl	8005752 <SDMMC_CmdBusWidth>
 8004fbc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	e003      	b.n	8004fd0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e001      	b.n	8004fd0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004fcc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004fd8:	b590      	push	{r4, r7, lr}
 8004fda:	b08f      	sub	sp, #60	; 0x3c
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004fe2:	f7fc f8a1 	bl	8001128 <HAL_GetTick>
 8004fe6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004fec:	2300      	movs	r3, #0
 8004fee:	60bb      	str	r3, [r7, #8]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2108      	movs	r1, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fa36 	bl	8005470 <SDMMC_CmdBlockLength>
 8005004:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <SD_FindSCR+0x38>
  {
    return errorstate;
 800500c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500e:	e0a9      	b.n	8005164 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005018:	041b      	lsls	r3, r3, #16
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f000 fb53 	bl	80056c8 <SDMMC_CmdAppCommand>
 8005022:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005026:	2b00      	cmp	r3, #0
 8005028:	d001      	beq.n	800502e <SD_FindSCR+0x56>
  {
    return errorstate;
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	e09a      	b.n	8005164 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800502e:	f04f 33ff 	mov.w	r3, #4294967295
 8005032:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005034:	2308      	movs	r3, #8
 8005036:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005038:	2330      	movs	r3, #48	; 0x30
 800503a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800503c:	2302      	movs	r3, #2
 800503e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005040:	2300      	movs	r3, #0
 8005042:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005044:	2301      	movs	r3, #1
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f107 0210 	add.w	r2, r7, #16
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f9e0 	bl	8005418 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f000 fb9a 	bl	8005796 <SDMMC_CmdSendSCR>
 8005062:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	d022      	beq.n	80050b0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800506a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800506c:	e07a      	b.n	8005164 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00e      	beq.n	800509a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	f107 0208 	add.w	r2, r7, #8
 8005088:	18d4      	adds	r4, r2, r3
 800508a:	4608      	mov	r0, r1
 800508c:	f000 f93f 	bl	800530e <SDIO_ReadFIFO>
 8005090:	4603      	mov	r3, r0
 8005092:	6023      	str	r3, [r4, #0]
      index++;
 8005094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005096:	3301      	adds	r3, #1
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800509a:	f7fc f845 	bl	8001128 <HAL_GetTick>
 800509e:	4602      	mov	r2, r0
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a8:	d102      	bne.n	80050b0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80050aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050ae:	e059      	b.n	8005164 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b6:	f240 432a 	movw	r3, #1066	; 0x42a
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0d6      	beq.n	800506e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c6:	f003 0308 	and.w	r3, r3, #8
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d005      	beq.n	80050da <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2208      	movs	r2, #8
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80050d6:	2308      	movs	r3, #8
 80050d8:	e044      	b.n	8005164 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d005      	beq.n	80050f4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2202      	movs	r2, #2
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80050f0:	2302      	movs	r3, #2
 80050f2:	e037      	b.n	8005164 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d005      	beq.n	800510e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2220      	movs	r2, #32
 8005108:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800510a:	2320      	movs	r3, #32
 800510c:	e02a      	b.n	8005164 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f240 523a 	movw	r2, #1338	; 0x53a
 8005116:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	061a      	lsls	r2, r3, #24
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	021b      	lsls	r3, r3, #8
 8005120:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005124:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	0a1b      	lsrs	r3, r3, #8
 800512a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800512e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	0e1b      	lsrs	r3, r3, #24
 8005134:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	601a      	str	r2, [r3, #0]
    scr++;
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	3304      	adds	r3, #4
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	061a      	lsls	r2, r3, #24
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800514c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	0a1b      	lsrs	r3, r3, #8
 8005152:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005156:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	0e1b      	lsrs	r3, r3, #24
 800515c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005160:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	373c      	adds	r7, #60	; 0x3c
 8005168:	46bd      	mov	sp, r7
 800516a:	bd90      	pop	{r4, r7, pc}

0800516c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005178:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d03f      	beq.n	8005206 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	e033      	b.n	80051f4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 f8bc 	bl	800530e <SDIO_ReadFIFO>
 8005196:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	0a1b      	lsrs	r3, r3, #8
 80051b0:	b2da      	uxtb	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	3301      	adds	r3, #1
 80051ba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	3b01      	subs	r3, #1
 80051c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	0e1b      	lsrs	r3, r3, #24
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	3301      	adds	r3, #1
 80051e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	3301      	adds	r3, #1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	2b07      	cmp	r3, #7
 80051f8:	d9c8      	bls.n	800518c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	693a      	ldr	r2, [r7, #16]
 8005204:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8005206:	bf00      	nop
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d043      	beq.n	80052b0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]
 800522c:	e037      	b.n	800529e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	3301      	adds	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3b01      	subs	r3, #1
 800523e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	021a      	lsls	r2, r3, #8
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4313      	orrs	r3, r2
 800524a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3301      	adds	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	3b01      	subs	r3, #1
 8005256:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	041a      	lsls	r2, r3, #16
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	4313      	orrs	r3, r2
 8005262:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	3b01      	subs	r3, #1
 800526e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	061a      	lsls	r2, r3, #24
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	4313      	orrs	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	3301      	adds	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	3b01      	subs	r3, #1
 8005286:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f107 0208 	add.w	r2, r7, #8
 8005290:	4611      	mov	r1, r2
 8005292:	4618      	mov	r0, r3
 8005294:	f000 f848 	bl	8005328 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	3301      	adds	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b07      	cmp	r3, #7
 80052a2:	d9c4      	bls.n	800522e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80052b0:	bf00      	nop
 80052b2:	3718      	adds	r7, #24
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80052b8:	b084      	sub	sp, #16
 80052ba:	b480      	push	{r7}
 80052bc:	b085      	sub	sp, #20
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
 80052c2:	f107 001c 	add.w	r0, r7, #28
 80052c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80052ce:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052d0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052d2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80052d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80052da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80052de:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80052e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80052f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3714      	adds	r7, #20
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	b004      	add	sp, #16
 800530c:	4770      	bx	lr

0800530e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800530e:	b480      	push	{r7}
 8005310:	b083      	sub	sp, #12
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800534a:	b580      	push	{r7, lr}
 800534c:	b082      	sub	sp, #8
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2203      	movs	r2, #3
 8005356:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005358:	2002      	movs	r0, #2
 800535a:	f7fb fef1 	bl	8001140 <HAL_Delay>
  
  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0303 	and.w	r3, r3, #3
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053a2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80053a8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80053ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68db      	ldr	r3, [r3, #12]
 80053ba:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80053be:	f023 030f 	bic.w	r3, r3, #15
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	b2db      	uxtb	r3, r3
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr

080053f2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b085      	sub	sp, #20
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	3314      	adds	r3, #20
 8005400:	461a      	mov	r2, r3
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	4413      	add	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
}  
 800540c:	4618      	mov	r0, r3
 800540e:	3714      	adds	r7, #20
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800543e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005444:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800544a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	431a      	orrs	r2, r3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005462:	2300      	movs	r3, #0

}
 8005464:	4618      	mov	r0, r3
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b088      	sub	sp, #32
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800547e:	2310      	movs	r3, #16
 8005480:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005482:	2340      	movs	r3, #64	; 0x40
 8005484:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800548a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800548e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005490:	f107 0308 	add.w	r3, r7, #8
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7ff ff74 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	2110      	movs	r1, #16
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f000 fa40 	bl	8005928 <SDMMC_GetCmdResp1>
 80054a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054aa:	69fb      	ldr	r3, [r7, #28]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3720      	adds	r7, #32
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b088      	sub	sp, #32
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80054c2:	2311      	movs	r3, #17
 80054c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054c6:	2340      	movs	r3, #64	; 0x40
 80054c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054ca:	2300      	movs	r3, #0
 80054cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054d4:	f107 0308 	add.w	r3, r7, #8
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff ff52 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054e4:	2111      	movs	r1, #17
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa1e 	bl	8005928 <SDMMC_GetCmdResp1>
 80054ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054ee:	69fb      	ldr	r3, [r7, #28]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3720      	adds	r7, #32
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b088      	sub	sp, #32
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005506:	2312      	movs	r3, #18
 8005508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800550e:	2300      	movs	r3, #0
 8005510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005516:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005518:	f107 0308 	add.w	r3, r7, #8
 800551c:	4619      	mov	r1, r3
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7ff ff30 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005524:	f241 3288 	movw	r2, #5000	; 0x1388
 8005528:	2112      	movs	r1, #18
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f9fc 	bl	8005928 <SDMMC_GetCmdResp1>
 8005530:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005532:	69fb      	ldr	r3, [r7, #28]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}

0800553c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800554a:	2318      	movs	r3, #24
 800554c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800554e:	2340      	movs	r3, #64	; 0x40
 8005550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800555a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800555c:	f107 0308 	add.w	r3, r7, #8
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff ff0e 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005568:	f241 3288 	movw	r2, #5000	; 0x1388
 800556c:	2118      	movs	r1, #24
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f9da 	bl	8005928 <SDMMC_GetCmdResp1>
 8005574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005576:	69fb      	ldr	r3, [r7, #28]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3720      	adds	r7, #32
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800558e:	2319      	movs	r3, #25
 8005590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005592:	2340      	movs	r3, #64	; 0x40
 8005594:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005596:	2300      	movs	r3, #0
 8005598:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800559a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800559e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055a0:	f107 0308 	add.w	r3, r7, #8
 80055a4:	4619      	mov	r1, r3
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7ff feec 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80055ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80055b0:	2119      	movs	r1, #25
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f9b8 	bl	8005928 <SDMMC_GetCmdResp1>
 80055b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055ba:	69fb      	ldr	r3, [r7, #28]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b088      	sub	sp, #32
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055d0:	230c      	movs	r3, #12
 80055d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055d4:	2340      	movs	r3, #64	; 0x40
 80055d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055d8:	2300      	movs	r3, #0
 80055da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055e2:	f107 0308 	add.w	r3, r7, #8
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f7ff fecb 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80055ee:	4a05      	ldr	r2, [pc, #20]	; (8005604 <SDMMC_CmdStopTransfer+0x40>)
 80055f0:	210c      	movs	r1, #12
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f998 	bl	8005928 <SDMMC_GetCmdResp1>
 80055f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055fa:	69fb      	ldr	r3, [r7, #28]
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3720      	adds	r7, #32
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	05f5e100 	.word	0x05f5e100

08005608 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b08a      	sub	sp, #40	; 0x28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005618:	2307      	movs	r3, #7
 800561a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005628:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800562a:	f107 0310 	add.w	r3, r7, #16
 800562e:	4619      	mov	r1, r3
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff fea7 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005636:	f241 3288 	movw	r2, #5000	; 0x1388
 800563a:	2107      	movs	r1, #7
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f973 	bl	8005928 <SDMMC_GetCmdResp1>
 8005642:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005646:	4618      	mov	r0, r3
 8005648:	3728      	adds	r7, #40	; 0x28
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b088      	sub	sp, #32
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800565e:	2300      	movs	r3, #0
 8005660:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005662:	2300      	movs	r3, #0
 8005664:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005666:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800566a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800566c:	f107 0308 	add.w	r3, r7, #8
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f7ff fe86 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 f92d 	bl	80058d8 <SDMMC_GetCmdError>
 800567e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005680:	69fb      	ldr	r3, [r7, #28]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b088      	sub	sp, #32
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005692:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005696:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005698:	2308      	movs	r3, #8
 800569a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800569c:	2340      	movs	r3, #64	; 0x40
 800569e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056a0:	2300      	movs	r3, #0
 80056a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056aa:	f107 0308 	add.w	r3, r7, #8
 80056ae:	4619      	mov	r1, r3
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff fe67 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fb16 	bl	8005ce8 <SDMMC_GetCmdResp7>
 80056bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056be:	69fb      	ldr	r3, [r7, #28]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3720      	adds	r7, #32
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056d6:	2337      	movs	r3, #55	; 0x37
 80056d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056da:	2340      	movs	r3, #64	; 0x40
 80056dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056e8:	f107 0308 	add.w	r3, r7, #8
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f7ff fe48 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80056f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056f8:	2137      	movs	r1, #55	; 0x37
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f914 	bl	8005928 <SDMMC_GetCmdResp1>
 8005700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005702:	69fb      	ldr	r3, [r7, #28]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800571c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005720:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005722:	2329      	movs	r3, #41	; 0x29
 8005724:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005726:	2340      	movs	r3, #64	; 0x40
 8005728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800572e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005732:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005734:	f107 0308 	add.w	r3, r7, #8
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f7ff fe22 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa23 	bl	8005b8c <SDMMC_GetCmdResp3>
 8005746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005748:	69fb      	ldr	r3, [r7, #28]
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b088      	sub	sp, #32
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
 800575a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005760:	2306      	movs	r3, #6
 8005762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005764:	2340      	movs	r3, #64	; 0x40
 8005766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005768:	2300      	movs	r3, #0
 800576a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800576c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005770:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005772:	f107 0308 	add.w	r3, r7, #8
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f7ff fe03 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800577e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005782:	2106      	movs	r1, #6
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f8cf 	bl	8005928 <SDMMC_GetCmdResp1>
 800578a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800578c:	69fb      	ldr	r3, [r7, #28]
}
 800578e:	4618      	mov	r0, r3
 8005790:	3720      	adds	r7, #32
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b088      	sub	sp, #32
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80057a2:	2333      	movs	r3, #51	; 0x33
 80057a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057a6:	2340      	movs	r3, #64	; 0x40
 80057a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057aa:	2300      	movs	r3, #0
 80057ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057b4:	f107 0308 	add.w	r3, r7, #8
 80057b8:	4619      	mov	r1, r3
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7ff fde2 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80057c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c4:	2133      	movs	r1, #51	; 0x33
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f8ae 	bl	8005928 <SDMMC_GetCmdResp1>
 80057cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057ce:	69fb      	ldr	r3, [r7, #28]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3720      	adds	r7, #32
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80057e4:	2302      	movs	r3, #2
 80057e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80057e8:	23c0      	movs	r3, #192	; 0xc0
 80057ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057ec:	2300      	movs	r3, #0
 80057ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057f6:	f107 0308 	add.w	r3, r7, #8
 80057fa:	4619      	mov	r1, r3
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f7ff fdc1 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f97c 	bl	8005b00 <SDMMC_GetCmdResp2>
 8005808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800580a:	69fb      	ldr	r3, [r7, #28]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3720      	adds	r7, #32
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005822:	2309      	movs	r3, #9
 8005824:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005826:	23c0      	movs	r3, #192	; 0xc0
 8005828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800582e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005832:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005834:	f107 0308 	add.w	r3, r7, #8
 8005838:	4619      	mov	r1, r3
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff fda2 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 f95d 	bl	8005b00 <SDMMC_GetCmdResp2>
 8005846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005848:	69fb      	ldr	r3, [r7, #28]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3720      	adds	r7, #32
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b088      	sub	sp, #32
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005860:	2303      	movs	r3, #3
 8005862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005864:	2340      	movs	r3, #64	; 0x40
 8005866:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800586c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005870:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff fd83 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	2103      	movs	r1, #3
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f9bc 	bl	8005c00 <SDMMC_GetCmdResp6>
 8005888:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800588a:	69fb      	ldr	r3, [r7, #28]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b088      	sub	sp, #32
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80058a2:	230d      	movs	r3, #13
 80058a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4619      	mov	r1, r3
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7ff fd62 	bl	8005384 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80058c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058c4:	210d      	movs	r1, #13
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f82e 	bl	8005928 <SDMMC_GetCmdResp1>
 80058cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058ce:	69fb      	ldr	r3, [r7, #28]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3720      	adds	r7, #32
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80058d8:	b490      	push	{r4, r7}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058e0:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <SDMMC_GetCmdError+0x48>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a0f      	ldr	r2, [pc, #60]	; (8005924 <SDMMC_GetCmdError+0x4c>)
 80058e6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ea:	0a5b      	lsrs	r3, r3, #9
 80058ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80058f4:	4623      	mov	r3, r4
 80058f6:	1e5c      	subs	r4, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d102      	bne.n	8005902 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005900:	e009      	b.n	8005916 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f2      	beq.n	80058f4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	22c5      	movs	r2, #197	; 0xc5
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bc90      	pop	{r4, r7}
 800591e:	4770      	bx	lr
 8005920:	20000000 	.word	0x20000000
 8005924:	10624dd3 	.word	0x10624dd3

08005928 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	460b      	mov	r3, r1
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005936:	4b6f      	ldr	r3, [pc, #444]	; (8005af4 <SDMMC_GetCmdResp1+0x1cc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a6f      	ldr	r2, [pc, #444]	; (8005af8 <SDMMC_GetCmdResp1+0x1d0>)
 800593c:	fba2 2303 	umull	r2, r3, r2, r3
 8005940:	0a5b      	lsrs	r3, r3, #9
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005948:	4623      	mov	r3, r4
 800594a:	1e5c      	subs	r4, r3, #1
 800594c:	2b00      	cmp	r3, #0
 800594e:	d102      	bne.n	8005956 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005950:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005954:	e0c9      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <SDMMC_GetCmdResp1+0x20>
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1eb      	bne.n	8005948 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2204      	movs	r2, #4
 8005980:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005982:	2304      	movs	r3, #4
 8005984:	e0b1      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d004      	beq.n	800599c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005998:	2301      	movs	r3, #1
 800599a:	e0a6      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	22c5      	movs	r2, #197	; 0xc5
 80059a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f7ff fd18 	bl	80053d8 <SDIO_GetCommandResponse>
 80059a8:	4603      	mov	r3, r0
 80059aa:	461a      	mov	r2, r3
 80059ac:	7afb      	ldrb	r3, [r7, #11]
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d001      	beq.n	80059b6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e099      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80059b6:	2100      	movs	r1, #0
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff fd1a 	bl	80053f2 <SDIO_GetResponse>
 80059be:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	4b4e      	ldr	r3, [pc, #312]	; (8005afc <SDMMC_GetCmdResp1+0x1d4>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e08d      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	da02      	bge.n	80059da <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80059d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059d8:	e087      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80059e4:	2340      	movs	r3, #64	; 0x40
 80059e6:	e080      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80059f2:	2380      	movs	r3, #128	; 0x80
 80059f4:	e079      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a04:	e071      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a14:	e069      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a24:	e061      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a34:	e059      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a44:	e051      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a54:	e049      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a64:	e041      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005a70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a74:	e039      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a84:	e031      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005a90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a94:	e029      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d002      	beq.n	8005aa6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005aa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005aa4:	e021      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005ab0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005ab4:	e019      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ac0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005ac4:	e011      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005ad0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005ad4:	e009      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005ae0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005ae4:	e001      	b.n	8005aea <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd90      	pop	{r4, r7, pc}
 8005af2:	bf00      	nop
 8005af4:	20000000 	.word	0x20000000
 8005af8:	10624dd3 	.word	0x10624dd3
 8005afc:	fdffe008 	.word	0xfdffe008

08005b00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005b00:	b490      	push	{r4, r7}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b08:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <SDMMC_GetCmdResp2+0x84>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a1e      	ldr	r2, [pc, #120]	; (8005b88 <SDMMC_GetCmdResp2+0x88>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	0a5b      	lsrs	r3, r3, #9
 8005b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	1e5c      	subs	r4, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b28:	e026      	b.n	8005b78 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f0      	beq.n	8005b1c <SDMMC_GetCmdResp2+0x1c>
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1eb      	bne.n	8005b1c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d004      	beq.n	8005b5a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2204      	movs	r2, #4
 8005b54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b56:	2304      	movs	r3, #4
 8005b58:	e00e      	b.n	8005b78 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d004      	beq.n	8005b70 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e003      	b.n	8005b78 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	22c5      	movs	r2, #197	; 0xc5
 8005b74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bc90      	pop	{r4, r7}
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000000 	.word	0x20000000
 8005b88:	10624dd3 	.word	0x10624dd3

08005b8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005b8c:	b490      	push	{r4, r7}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b94:	4b18      	ldr	r3, [pc, #96]	; (8005bf8 <SDMMC_GetCmdResp3+0x6c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a18      	ldr	r2, [pc, #96]	; (8005bfc <SDMMC_GetCmdResp3+0x70>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	0a5b      	lsrs	r3, r3, #9
 8005ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005ba8:	4623      	mov	r3, r4
 8005baa:	1e5c      	subs	r4, r3, #1
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bb4:	e01b      	b.n	8005bee <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <SDMMC_GetCmdResp3+0x1c>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1eb      	bne.n	8005ba8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	f003 0304 	and.w	r3, r3, #4
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d004      	beq.n	8005be6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2204      	movs	r2, #4
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005be2:	2304      	movs	r3, #4
 8005be4:	e003      	b.n	8005bee <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	22c5      	movs	r2, #197	; 0xc5
 8005bea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bc90      	pop	{r4, r7}
 8005bf6:	4770      	bx	lr
 8005bf8:	20000000 	.word	0x20000000
 8005bfc:	10624dd3 	.word	0x10624dd3

08005c00 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	607a      	str	r2, [r7, #4]
 8005c0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c0e:	4b34      	ldr	r3, [pc, #208]	; (8005ce0 <SDMMC_GetCmdResp6+0xe0>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a34      	ldr	r2, [pc, #208]	; (8005ce4 <SDMMC_GetCmdResp6+0xe4>)
 8005c14:	fba2 2303 	umull	r2, r3, r2, r3
 8005c18:	0a5b      	lsrs	r3, r3, #9
 8005c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c1e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005c22:	4623      	mov	r3, r4
 8005c24:	1e5c      	subs	r4, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c2e:	e052      	b.n	8005cd6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c34:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <SDMMC_GetCmdResp6+0x22>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1eb      	bne.n	8005c22 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4e:	f003 0304 	and.w	r3, r3, #4
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d004      	beq.n	8005c60 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2204      	movs	r2, #4
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	e03a      	b.n	8005cd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d004      	beq.n	8005c76 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e02f      	b.n	8005cd6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff fbae 	bl	80053d8 <SDIO_GetCommandResponse>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	461a      	mov	r2, r3
 8005c80:	7afb      	ldrb	r3, [r7, #11]
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d001      	beq.n	8005c8a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e025      	b.n	8005cd6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	22c5      	movs	r2, #197	; 0xc5
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005c90:	2100      	movs	r1, #0
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7ff fbad 	bl	80053f2 <SDIO_GetResponse>
 8005c98:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d106      	bne.n	8005cb2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	0c1b      	lsrs	r3, r3, #16
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e011      	b.n	8005cd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d002      	beq.n	8005cc2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cc0:	e009      	b.n	8005cd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ccc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cd0:	e001      	b.n	8005cd6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd90      	pop	{r4, r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000000 	.word	0x20000000
 8005ce4:	10624dd3 	.word	0x10624dd3

08005ce8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005ce8:	b490      	push	{r4, r7}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005cf0:	4b21      	ldr	r3, [pc, #132]	; (8005d78 <SDMMC_GetCmdResp7+0x90>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a21      	ldr	r2, [pc, #132]	; (8005d7c <SDMMC_GetCmdResp7+0x94>)
 8005cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cfa:	0a5b      	lsrs	r3, r3, #9
 8005cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d00:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d04:	4623      	mov	r3, r4
 8005d06:	1e5c      	subs	r4, r3, #1
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d10:	e02c      	b.n	8005d6c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d0f0      	beq.n	8005d04 <SDMMC_GetCmdResp7+0x1c>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1eb      	bne.n	8005d04 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d004      	beq.n	8005d42 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2204      	movs	r2, #4
 8005d3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d3e:	2304      	movs	r3, #4
 8005d40:	e014      	b.n	8005d6c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d004      	beq.n	8005d58 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e009      	b.n	8005d6c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2240      	movs	r2, #64	; 0x40
 8005d68:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d6a:	2300      	movs	r3, #0
  
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc90      	pop	{r4, r7}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20000000 	.word	0x20000000
 8005d7c:	10624dd3 	.word	0x10624dd3

08005d80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d80:	b084      	sub	sp, #16
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	f107 001c 	add.w	r0, r7, #28
 8005d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d122      	bne.n	8005dde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d105      	bne.n	8005dd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 fa7c 	bl	80072d0 <USB_CoreReset>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]
 8005ddc:	e01a      	b.n	8005e14 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f001 fa70 	bl	80072d0 <USB_CoreReset>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
 8005e06:	e005      	b.n	8005e14 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d10b      	bne.n	8005e32 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f043 0206 	orr.w	r2, r3, #6
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f043 0220 	orr.w	r2, r3, #32
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e3e:	b004      	add	sp, #16
 8005e40:	4770      	bx	lr
	...

08005e44 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d165      	bne.n	8005f24 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4a41      	ldr	r2, [pc, #260]	; (8005f60 <USB_SetTurnaroundTime+0x11c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d906      	bls.n	8005e6e <USB_SetTurnaroundTime+0x2a>
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4a40      	ldr	r2, [pc, #256]	; (8005f64 <USB_SetTurnaroundTime+0x120>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d802      	bhi.n	8005e6e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e68:	230f      	movs	r3, #15
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e062      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4a3c      	ldr	r2, [pc, #240]	; (8005f64 <USB_SetTurnaroundTime+0x120>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d906      	bls.n	8005e84 <USB_SetTurnaroundTime+0x40>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4a3b      	ldr	r2, [pc, #236]	; (8005f68 <USB_SetTurnaroundTime+0x124>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d802      	bhi.n	8005e84 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e7e:	230e      	movs	r3, #14
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	e057      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4a38      	ldr	r2, [pc, #224]	; (8005f68 <USB_SetTurnaroundTime+0x124>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d906      	bls.n	8005e9a <USB_SetTurnaroundTime+0x56>
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4a37      	ldr	r2, [pc, #220]	; (8005f6c <USB_SetTurnaroundTime+0x128>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d802      	bhi.n	8005e9a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e94:	230d      	movs	r3, #13
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e04c      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a33      	ldr	r2, [pc, #204]	; (8005f6c <USB_SetTurnaroundTime+0x128>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d906      	bls.n	8005eb0 <USB_SetTurnaroundTime+0x6c>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4a32      	ldr	r2, [pc, #200]	; (8005f70 <USB_SetTurnaroundTime+0x12c>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d802      	bhi.n	8005eb0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005eaa:	230c      	movs	r3, #12
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	e041      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4a2f      	ldr	r2, [pc, #188]	; (8005f70 <USB_SetTurnaroundTime+0x12c>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d906      	bls.n	8005ec6 <USB_SetTurnaroundTime+0x82>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4a2e      	ldr	r2, [pc, #184]	; (8005f74 <USB_SetTurnaroundTime+0x130>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d802      	bhi.n	8005ec6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ec0:	230b      	movs	r3, #11
 8005ec2:	617b      	str	r3, [r7, #20]
 8005ec4:	e036      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	4a2a      	ldr	r2, [pc, #168]	; (8005f74 <USB_SetTurnaroundTime+0x130>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d906      	bls.n	8005edc <USB_SetTurnaroundTime+0x98>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	4a29      	ldr	r2, [pc, #164]	; (8005f78 <USB_SetTurnaroundTime+0x134>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d802      	bhi.n	8005edc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ed6:	230a      	movs	r3, #10
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e02b      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4a26      	ldr	r2, [pc, #152]	; (8005f78 <USB_SetTurnaroundTime+0x134>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d906      	bls.n	8005ef2 <USB_SetTurnaroundTime+0xae>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4a25      	ldr	r2, [pc, #148]	; (8005f7c <USB_SetTurnaroundTime+0x138>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d802      	bhi.n	8005ef2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005eec:	2309      	movs	r3, #9
 8005eee:	617b      	str	r3, [r7, #20]
 8005ef0:	e020      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <USB_SetTurnaroundTime+0x138>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d906      	bls.n	8005f08 <USB_SetTurnaroundTime+0xc4>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	4a20      	ldr	r2, [pc, #128]	; (8005f80 <USB_SetTurnaroundTime+0x13c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d802      	bhi.n	8005f08 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005f02:	2308      	movs	r3, #8
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	e015      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <USB_SetTurnaroundTime+0x13c>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d906      	bls.n	8005f1e <USB_SetTurnaroundTime+0xda>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	4a1c      	ldr	r2, [pc, #112]	; (8005f84 <USB_SetTurnaroundTime+0x140>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d802      	bhi.n	8005f1e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005f18:	2307      	movs	r3, #7
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	e00a      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005f1e:	2306      	movs	r3, #6
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	e007      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005f24:	79fb      	ldrb	r3, [r7, #7]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d102      	bne.n	8005f30 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005f2a:	2309      	movs	r3, #9
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	e001      	b.n	8005f34 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005f30:	2309      	movs	r3, #9
 8005f32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	68da      	ldr	r2, [r3, #12]
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	029b      	lsls	r3, r3, #10
 8005f48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	371c      	adds	r7, #28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	00d8acbf 	.word	0x00d8acbf
 8005f64:	00e4e1bf 	.word	0x00e4e1bf
 8005f68:	00f423ff 	.word	0x00f423ff
 8005f6c:	0106737f 	.word	0x0106737f
 8005f70:	011a499f 	.word	0x011a499f
 8005f74:	01312cff 	.word	0x01312cff
 8005f78:	014ca43f 	.word	0x014ca43f
 8005f7c:	016e35ff 	.word	0x016e35ff
 8005f80:	01a6ab1f 	.word	0x01a6ab1f
 8005f84:	01e847ff 	.word	0x01e847ff

08005f88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f043 0201 	orr.w	r2, r3, #1
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	370c      	adds	r7, #12
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fe4:	78fb      	ldrb	r3, [r7, #3]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d106      	bne.n	8005ff8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68db      	ldr	r3, [r3, #12]
 8005fee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60da      	str	r2, [r3, #12]
 8005ff6:	e00b      	b.n	8006010 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d106      	bne.n	800600c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	60da      	str	r2, [r3, #12]
 800600a:	e001      	b.n	8006010 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e003      	b.n	8006018 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006010:	2032      	movs	r0, #50	; 0x32
 8006012:	f7fb f895 	bl	8001140 <HAL_Delay>

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006020:	b084      	sub	sp, #16
 8006022:	b580      	push	{r7, lr}
 8006024:	b086      	sub	sp, #24
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
 800602a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800602e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	e009      	b.n	8006054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	3340      	adds	r3, #64	; 0x40
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	2200      	movs	r2, #0
 800604c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	3301      	adds	r3, #1
 8006052:	613b      	str	r3, [r7, #16]
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	2b0e      	cmp	r3, #14
 8006058:	d9f2      	bls.n	8006040 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800605a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d112      	bne.n	8006086 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006064:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	639a      	str	r2, [r3, #56]	; 0x38
 8006084:	e00b      	b.n	800609e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006096:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060a4:	461a      	mov	r2, r3
 80060a6:	2300      	movs	r3, #0
 80060a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b0:	4619      	mov	r1, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b8:	461a      	mov	r2, r3
 80060ba:	680b      	ldr	r3, [r1, #0]
 80060bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d10c      	bne.n	80060de <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d104      	bne.n	80060d4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060ca:	2100      	movs	r1, #0
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f961 	bl	8006394 <USB_SetDevSpeed>
 80060d2:	e008      	b.n	80060e6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060d4:	2101      	movs	r1, #1
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f95c 	bl	8006394 <USB_SetDevSpeed>
 80060dc:	e003      	b.n	80060e6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060de:	2103      	movs	r1, #3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f957 	bl	8006394 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060e6:	2110      	movs	r1, #16
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f90b 	bl	8006304 <USB_FlushTxFifo>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f929 	bl	8006350 <USB_FlushRxFifo>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d001      	beq.n	8006108 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800610e:	461a      	mov	r2, r3
 8006110:	2300      	movs	r3, #0
 8006112:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611a:	461a      	mov	r2, r3
 800611c:	2300      	movs	r3, #0
 800611e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	461a      	mov	r2, r3
 8006128:	2300      	movs	r3, #0
 800612a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800612c:	2300      	movs	r3, #0
 800612e:	613b      	str	r3, [r7, #16]
 8006130:	e043      	b.n	80061ba <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006144:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006148:	d118      	bne.n	800617c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10a      	bne.n	8006166 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	461a      	mov	r2, r3
 800615e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	e013      	b.n	800618e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	461a      	mov	r2, r3
 8006174:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e008      	b.n	800618e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	461a      	mov	r2, r3
 800618a:	2300      	movs	r3, #0
 800618c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619a:	461a      	mov	r2, r3
 800619c:	2300      	movs	r3, #0
 800619e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ac:	461a      	mov	r2, r3
 80061ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	3301      	adds	r3, #1
 80061b8:	613b      	str	r3, [r7, #16]
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d3b7      	bcc.n	8006132 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	e043      	b.n	8006250 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061de:	d118      	bne.n	8006212 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d10a      	bne.n	80061fc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	461a      	mov	r2, r3
 80061f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	e013      	b.n	8006224 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	461a      	mov	r2, r3
 800620a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	e008      	b.n	8006224 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621e:	461a      	mov	r2, r3
 8006220:	2300      	movs	r3, #0
 8006222:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	461a      	mov	r2, r3
 8006232:	2300      	movs	r3, #0
 8006234:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	015a      	lsls	r2, r3, #5
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006242:	461a      	mov	r2, r3
 8006244:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006248:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	3301      	adds	r3, #1
 800624e:	613b      	str	r3, [r7, #16]
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	429a      	cmp	r2, r3
 8006256:	d3b7      	bcc.n	80061c8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006266:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800626a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	2b01      	cmp	r3, #1
 8006270:	d111      	bne.n	8006296 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006278:	461a      	mov	r2, r3
 800627a:	4b20      	ldr	r3, [pc, #128]	; (80062fc <USB_DevInit+0x2dc>)
 800627c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800628c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006290:	f043 0303 	orr.w	r3, r3, #3
 8006294:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2200      	movs	r2, #0
 800629a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d105      	bne.n	80062b6 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	f043 0210 	orr.w	r2, r3, #16
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	4b11      	ldr	r3, [pc, #68]	; (8006300 <USB_DevInit+0x2e0>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d005      	beq.n	80062d4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f043 0208 	orr.w	r2, r3, #8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d107      	bne.n	80062ea <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062e2:	f043 0304 	orr.w	r3, r3, #4
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062f6:	b004      	add	sp, #16
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	00800100 	.word	0x00800100
 8006300:	803c3800 	.word	0x803c3800

08006304 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	019b      	lsls	r3, r3, #6
 8006316:	f043 0220 	orr.w	r2, r3, #32
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	3301      	adds	r3, #1
 8006322:	60fb      	str	r3, [r7, #12]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <USB_FlushTxFifo+0x48>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d901      	bls.n	8006330 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800632c:	2303      	movs	r3, #3
 800632e:	e006      	b.n	800633e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
 8006334:	f003 0320 	and.w	r3, r3, #32
 8006338:	2b20      	cmp	r3, #32
 800633a:	d0f0      	beq.n	800631e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	00030d40 	.word	0x00030d40

08006350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006358:	2300      	movs	r3, #0
 800635a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2210      	movs	r2, #16
 8006360:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4a09      	ldr	r2, [pc, #36]	; (8006390 <USB_FlushRxFifo+0x40>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d901      	bls.n	8006374 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e006      	b.n	8006382 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b10      	cmp	r3, #16
 800637e:	d0f0      	beq.n	8006362 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	00030d40 	.word	0x00030d40

08006394 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	68f9      	ldr	r1, [r7, #12]
 80063b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063b4:	4313      	orrs	r3, r2
 80063b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3714      	adds	r7, #20
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b087      	sub	sp, #28
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 0306 	and.w	r3, r3, #6
 80063de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80063e6:	2300      	movs	r3, #0
 80063e8:	75fb      	strb	r3, [r7, #23]
 80063ea:	e00a      	b.n	8006402 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d002      	beq.n	80063f8 <USB_GetDevSpeed+0x32>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2b06      	cmp	r3, #6
 80063f6:	d102      	bne.n	80063fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063f8:	2302      	movs	r3, #2
 80063fa:	75fb      	strb	r3, [r7, #23]
 80063fc:	e001      	b.n	8006402 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063fe:	230f      	movs	r3, #15
 8006400:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006402:	7dfb      	ldrb	r3, [r7, #23]
}
 8006404:	4618      	mov	r0, r3
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	785b      	ldrb	r3, [r3, #1]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d13a      	bne.n	80064a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	69da      	ldr	r2, [r3, #28]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	2101      	movs	r1, #1
 800643e:	fa01 f303 	lsl.w	r3, r1, r3
 8006442:	b29b      	uxth	r3, r3
 8006444:	68f9      	ldr	r1, [r7, #12]
 8006446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800644a:	4313      	orrs	r3, r2
 800644c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d155      	bne.n	8006510 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	78db      	ldrb	r3, [r3, #3]
 800647e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006480:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	059b      	lsls	r3, r3, #22
 8006486:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006488:	4313      	orrs	r3, r2
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800649a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	e036      	b.n	8006510 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064a8:	69da      	ldr	r2, [r3, #28]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	f003 030f 	and.w	r3, r3, #15
 80064b2:	2101      	movs	r1, #1
 80064b4:	fa01 f303 	lsl.w	r3, r1, r3
 80064b8:	041b      	lsls	r3, r3, #16
 80064ba:	68f9      	ldr	r1, [r7, #12]
 80064bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d11a      	bne.n	8006510 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064f6:	430b      	orrs	r3, r1
 80064f8:	4313      	orrs	r3, r2
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	0151      	lsls	r1, r2, #5
 80064fe:	68fa      	ldr	r2, [r7, #12]
 8006500:	440a      	add	r2, r1
 8006502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800650a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800650e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr
	...

08006520 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	785b      	ldrb	r3, [r3, #1]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d135      	bne.n	80065a8 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006542:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	f003 030f 	and.w	r3, r3, #15
 800654c:	2101      	movs	r1, #1
 800654e:	fa01 f303 	lsl.w	r3, r1, r3
 8006552:	b29b      	uxth	r3, r3
 8006554:	43db      	mvns	r3, r3
 8006556:	68f9      	ldr	r1, [r7, #12]
 8006558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800655c:	4013      	ands	r3, r2
 800655e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	69da      	ldr	r2, [r3, #28]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	2101      	movs	r1, #1
 8006572:	fa01 f303 	lsl.w	r3, r1, r3
 8006576:	b29b      	uxth	r3, r3
 8006578:	43db      	mvns	r3, r3
 800657a:	68f9      	ldr	r1, [r7, #12]
 800657c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006580:	4013      	ands	r3, r2
 8006582:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	0159      	lsls	r1, r3, #5
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	440b      	add	r3, r1
 800659a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800659e:	4619      	mov	r1, r3
 80065a0:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <USB_DeactivateEndpoint+0x100>)
 80065a2:	4013      	ands	r3, r2
 80065a4:	600b      	str	r3, [r1, #0]
 80065a6:	e034      	b.n	8006612 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	f003 030f 	and.w	r3, r3, #15
 80065b8:	2101      	movs	r1, #1
 80065ba:	fa01 f303 	lsl.w	r3, r1, r3
 80065be:	041b      	lsls	r3, r3, #16
 80065c0:	43db      	mvns	r3, r3
 80065c2:	68f9      	ldr	r1, [r7, #12]
 80065c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065c8:	4013      	ands	r3, r2
 80065ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065d2:	69da      	ldr	r2, [r3, #28]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f003 030f 	and.w	r3, r3, #15
 80065dc:	2101      	movs	r1, #1
 80065de:	fa01 f303 	lsl.w	r3, r1, r3
 80065e2:	041b      	lsls	r3, r3, #16
 80065e4:	43db      	mvns	r3, r3
 80065e6:	68f9      	ldr	r1, [r7, #12]
 80065e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065ec:	4013      	ands	r3, r2
 80065ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	015a      	lsls	r2, r3, #5
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	4413      	add	r3, r2
 80065f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	0159      	lsls	r1, r3, #5
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	440b      	add	r3, r1
 8006606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800660a:	4619      	mov	r1, r3
 800660c:	4b05      	ldr	r3, [pc, #20]	; (8006624 <USB_DeactivateEndpoint+0x104>)
 800660e:	4013      	ands	r3, r2
 8006610:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr
 8006620:	ec337800 	.word	0xec337800
 8006624:	eff37800 	.word	0xeff37800

08006628 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b08a      	sub	sp, #40	; 0x28
 800662c:	af02      	add	r7, sp, #8
 800662e:	60f8      	str	r0, [r7, #12]
 8006630:	60b9      	str	r1, [r7, #8]
 8006632:	4613      	mov	r3, r2
 8006634:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	785b      	ldrb	r3, [r3, #1]
 8006644:	2b01      	cmp	r3, #1
 8006646:	f040 815c 	bne.w	8006902 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d132      	bne.n	80066b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	69fa      	ldr	r2, [r7, #28]
 8006666:	440a      	add	r2, r1
 8006668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800666c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006670:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006674:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	0151      	lsls	r1, r2, #5
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	440a      	add	r2, r1
 800668c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006690:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006694:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	015a      	lsls	r2, r3, #5
 800669a:	69fb      	ldr	r3, [r7, #28]
 800669c:	4413      	add	r3, r2
 800669e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	0151      	lsls	r1, r2, #5
 80066a8:	69fa      	ldr	r2, [r7, #28]
 80066aa:	440a      	add	r2, r1
 80066ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b0:	0cdb      	lsrs	r3, r3, #19
 80066b2:	04db      	lsls	r3, r3, #19
 80066b4:	6113      	str	r3, [r2, #16]
 80066b6:	e074      	b.n	80067a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	69fa      	ldr	r2, [r7, #28]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d2:	0cdb      	lsrs	r3, r3, #19
 80066d4:	04db      	lsls	r3, r3, #19
 80066d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	69ba      	ldr	r2, [r7, #24]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	69fa      	ldr	r2, [r7, #28]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	691a      	ldr	r2, [r3, #16]
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6959      	ldr	r1, [r3, #20]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	440b      	add	r3, r1
 8006714:	1e59      	subs	r1, r3, #1
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	fbb1 f3f3 	udiv	r3, r1, r3
 800671e:	04d9      	lsls	r1, r3, #19
 8006720:	4b9d      	ldr	r3, [pc, #628]	; (8006998 <USB_EPStartXfer+0x370>)
 8006722:	400b      	ands	r3, r1
 8006724:	69b9      	ldr	r1, [r7, #24]
 8006726:	0148      	lsls	r0, r1, #5
 8006728:	69f9      	ldr	r1, [r7, #28]
 800672a:	4401      	add	r1, r0
 800672c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006730:	4313      	orrs	r3, r2
 8006732:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	691a      	ldr	r2, [r3, #16]
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800674a:	69b9      	ldr	r1, [r7, #24]
 800674c:	0148      	lsls	r0, r1, #5
 800674e:	69f9      	ldr	r1, [r7, #28]
 8006750:	4401      	add	r1, r0
 8006752:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006756:	4313      	orrs	r3, r2
 8006758:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	78db      	ldrb	r3, [r3, #3]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d11f      	bne.n	80067a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	015a      	lsls	r2, r3, #5
 8006766:	69fb      	ldr	r3, [r7, #28]
 8006768:	4413      	add	r3, r2
 800676a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	69ba      	ldr	r2, [r7, #24]
 8006772:	0151      	lsls	r1, r2, #5
 8006774:	69fa      	ldr	r2, [r7, #28]
 8006776:	440a      	add	r2, r1
 8006778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800677c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006780:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	0151      	lsls	r1, r2, #5
 8006794:	69fa      	ldr	r2, [r7, #28]
 8006796:	440a      	add	r2, r1
 8006798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800679c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d14b      	bne.n	8006840 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d009      	beq.n	80067c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067bc:	461a      	mov	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	78db      	ldrb	r3, [r3, #3]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d128      	bne.n	800681e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d110      	bne.n	80067fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	0151      	lsls	r1, r2, #5
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	440a      	add	r2, r1
 80067f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067fa:	6013      	str	r3, [r2, #0]
 80067fc:	e00f      	b.n	800681e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	69ba      	ldr	r2, [r7, #24]
 800680e:	0151      	lsls	r1, r2, #5
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	440a      	add	r2, r1
 8006814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800681c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	69fa      	ldr	r2, [r7, #28]
 8006832:	440a      	add	r2, r1
 8006834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006838:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	e12f      	b.n	8006aa0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69ba      	ldr	r2, [r7, #24]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	440a      	add	r2, r1
 8006856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800685a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800685e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	78db      	ldrb	r3, [r3, #3]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d015      	beq.n	8006894 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 8117 	beq.w	8006aa0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006878:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	2101      	movs	r1, #1
 8006884:	fa01 f303 	lsl.w	r3, r1, r3
 8006888:	69f9      	ldr	r1, [r7, #28]
 800688a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800688e:	4313      	orrs	r3, r2
 8006890:	634b      	str	r3, [r1, #52]	; 0x34
 8006892:	e105      	b.n	8006aa0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d110      	bne.n	80068c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80068c2:	6013      	str	r3, [r2, #0]
 80068c4:	e00f      	b.n	80068e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	015a      	lsls	r2, r3, #5
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	4413      	add	r3, r2
 80068ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69ba      	ldr	r2, [r7, #24]
 80068d6:	0151      	lsls	r1, r2, #5
 80068d8:	69fa      	ldr	r2, [r7, #28]
 80068da:	440a      	add	r2, r1
 80068dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	68d9      	ldr	r1, [r3, #12]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	781a      	ldrb	r2, [r3, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	b298      	uxth	r0, r3
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	9300      	str	r3, [sp, #0]
 80068f8:	4603      	mov	r3, r0
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f000 fa2b 	bl	8006d56 <USB_WritePacket>
 8006900:	e0ce      	b.n	8006aa0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691c:	0cdb      	lsrs	r3, r3, #19
 800691e:	04db      	lsls	r3, r3, #19
 8006920:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006944:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d126      	bne.n	800699c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695a:	691a      	ldr	r2, [r3, #16]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006964:	69b9      	ldr	r1, [r7, #24]
 8006966:	0148      	lsls	r0, r1, #5
 8006968:	69f9      	ldr	r1, [r7, #28]
 800696a:	4401      	add	r1, r0
 800696c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006970:	4313      	orrs	r3, r2
 8006972:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	69fb      	ldr	r3, [r7, #28]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	69ba      	ldr	r2, [r7, #24]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	69fa      	ldr	r2, [r7, #28]
 8006988:	440a      	add	r2, r1
 800698a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800698e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006992:	6113      	str	r3, [r2, #16]
 8006994:	e036      	b.n	8006a04 <USB_EPStartXfer+0x3dc>
 8006996:	bf00      	nop
 8006998:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	695a      	ldr	r2, [r3, #20]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	4413      	add	r3, r2
 80069a6:	1e5a      	subs	r2, r3, #1
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	8afb      	ldrh	r3, [r7, #22]
 80069c2:	04d9      	lsls	r1, r3, #19
 80069c4:	4b39      	ldr	r3, [pc, #228]	; (8006aac <USB_EPStartXfer+0x484>)
 80069c6:	400b      	ands	r3, r1
 80069c8:	69b9      	ldr	r1, [r7, #24]
 80069ca:	0148      	lsls	r0, r1, #5
 80069cc:	69f9      	ldr	r1, [r7, #28]
 80069ce:	4401      	add	r1, r0
 80069d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069d4:	4313      	orrs	r3, r2
 80069d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e4:	691a      	ldr	r2, [r3, #16]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	8af9      	ldrh	r1, [r7, #22]
 80069ec:	fb01 f303 	mul.w	r3, r1, r3
 80069f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f4:	69b9      	ldr	r1, [r7, #24]
 80069f6:	0148      	lsls	r0, r1, #5
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	4401      	add	r1, r0
 80069fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a00:	4313      	orrs	r3, r2
 8006a02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d10d      	bne.n	8006a26 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	68d9      	ldr	r1, [r3, #12]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a22:	460a      	mov	r2, r1
 8006a24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	78db      	ldrb	r3, [r3, #3]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d128      	bne.n	8006a80 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d110      	bne.n	8006a60 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	0151      	lsls	r1, r2, #5
 8006a50:	69fa      	ldr	r2, [r7, #28]
 8006a52:	440a      	add	r2, r1
 8006a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	e00f      	b.n	8006a80 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	0151      	lsls	r1, r2, #5
 8006a72:	69fa      	ldr	r2, [r7, #28]
 8006a74:	440a      	add	r2, r1
 8006a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	69ba      	ldr	r2, [r7, #24]
 8006a90:	0151      	lsls	r1, r2, #5
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	440a      	add	r2, r1
 8006a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	1ff80000 	.word	0x1ff80000

08006ab0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	60b9      	str	r1, [r7, #8]
 8006aba:	4613      	mov	r3, r2
 8006abc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	785b      	ldrb	r3, [r3, #1]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	f040 80cd 	bne.w	8006c6c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d132      	bne.n	8006b40 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ae6:	691b      	ldr	r3, [r3, #16]
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006af4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006af8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006afc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	697a      	ldr	r2, [r7, #20]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b1c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	697a      	ldr	r2, [r7, #20]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b38:	0cdb      	lsrs	r3, r3, #19
 8006b3a:	04db      	lsls	r3, r3, #19
 8006b3c:	6113      	str	r3, [r2, #16]
 8006b3e:	e04e      	b.n	8006bde <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5a:	0cdb      	lsrs	r3, r3, #19
 8006b5c:	04db      	lsls	r3, r3, #19
 8006b5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	693a      	ldr	r2, [r7, #16]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b7a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b7e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b82:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	695a      	ldr	r2, [r3, #20]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	429a      	cmp	r2, r3
 8006b8e:	d903      	bls.n	8006b98 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	015a      	lsls	r2, r3, #5
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	0151      	lsls	r1, r2, #5
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	440a      	add	r2, r1
 8006bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc4:	691a      	ldr	r2, [r3, #16]
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bce:	6939      	ldr	r1, [r7, #16]
 8006bd0:	0148      	lsls	r0, r1, #5
 8006bd2:	6979      	ldr	r1, [r7, #20]
 8006bd4:	4401      	add	r1, r0
 8006bd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006bde:	79fb      	ldrb	r3, [r7, #7]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d11e      	bne.n	8006c22 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d009      	beq.n	8006c00 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	015a      	lsls	r2, r3, #5
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	4413      	add	r3, r2
 8006c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	693a      	ldr	r2, [r7, #16]
 8006c10:	0151      	lsls	r1, r2, #5
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	440a      	add	r2, r1
 8006c16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	e092      	b.n	8006d48 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	0151      	lsls	r1, r2, #5
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	440a      	add	r2, r1
 8006c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c40:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d07e      	beq.n	8006d48 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c60:	6979      	ldr	r1, [r7, #20]
 8006c62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c66:	4313      	orrs	r3, r2
 8006c68:	634b      	str	r3, [r1, #52]	; 0x34
 8006c6a:	e06d      	b.n	8006d48 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	0151      	lsls	r1, r2, #5
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	440a      	add	r2, r1
 8006c82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c86:	0cdb      	lsrs	r3, r3, #19
 8006c88:	04db      	lsls	r3, r3, #19
 8006c8a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ca6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006caa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006cae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	0151      	lsls	r1, r2, #5
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	440a      	add	r2, r1
 8006cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006cde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	015a      	lsls	r2, r3, #5
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	4413      	add	r3, r2
 8006ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cec:	691a      	ldr	r2, [r3, #16]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cf6:	6939      	ldr	r1, [r7, #16]
 8006cf8:	0148      	lsls	r0, r1, #5
 8006cfa:	6979      	ldr	r1, [r7, #20]
 8006cfc:	4401      	add	r1, r0
 8006cfe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d02:	4313      	orrs	r3, r2
 8006d04:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d06:	79fb      	ldrb	r3, [r7, #7]
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d10d      	bne.n	8006d28 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	68db      	ldr	r3, [r3, #12]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	68d9      	ldr	r1, [r3, #12]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d24:	460a      	mov	r2, r1
 8006d26:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d42:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006d46:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b089      	sub	sp, #36	; 0x24
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	60f8      	str	r0, [r7, #12]
 8006d5e:	60b9      	str	r1, [r7, #8]
 8006d60:	4611      	mov	r1, r2
 8006d62:	461a      	mov	r2, r3
 8006d64:	460b      	mov	r3, r1
 8006d66:	71fb      	strb	r3, [r7, #7]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d74:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d11a      	bne.n	8006db2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d7c:	88bb      	ldrh	r3, [r7, #4]
 8006d7e:	3303      	adds	r3, #3
 8006d80:	089b      	lsrs	r3, r3, #2
 8006d82:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d84:	2300      	movs	r3, #0
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	e00f      	b.n	8006daa <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d8a:	79fb      	ldrb	r3, [r7, #7]
 8006d8c:	031a      	lsls	r2, r3, #12
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d96:	461a      	mov	r2, r3
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	3304      	adds	r3, #4
 8006da2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61bb      	str	r3, [r7, #24]
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d3eb      	bcc.n	8006d8a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3724      	adds	r7, #36	; 0x24
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b089      	sub	sp, #36	; 0x24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006dd6:	88fb      	ldrh	r3, [r7, #6]
 8006dd8:	3303      	adds	r3, #3
 8006dda:	089b      	lsrs	r3, r3, #2
 8006ddc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006dde:	2300      	movs	r3, #0
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	e00b      	b.n	8006dfc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	601a      	str	r2, [r3, #0]
    pDest++;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	3304      	adds	r3, #4
 8006df4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d3ef      	bcc.n	8006de4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e04:	69fb      	ldr	r3, [r7, #28]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3724      	adds	r7, #36	; 0x24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e10:	4770      	bx	lr

08006e12 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b085      	sub	sp, #20
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	785b      	ldrb	r3, [r3, #1]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d12c      	bne.n	8006e88 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	db12      	blt.n	8006e66 <USB_EPSetStall+0x54>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00f      	beq.n	8006e66 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	015a      	lsls	r2, r3, #5
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	68ba      	ldr	r2, [r7, #8]
 8006e56:	0151      	lsls	r1, r2, #5
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	440a      	add	r2, r1
 8006e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e64:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	0151      	lsls	r1, r2, #5
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	440a      	add	r2, r1
 8006e7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	e02b      	b.n	8006ee0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	db12      	blt.n	8006ec0 <USB_EPSetStall+0xae>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d00f      	beq.n	8006ec0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ebe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ede:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
 8006ef6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	785b      	ldrb	r3, [r3, #1]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d128      	bne.n	8006f5c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	0151      	lsls	r1, r2, #5
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	440a      	add	r2, r1
 8006f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f24:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f28:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	78db      	ldrb	r3, [r3, #3]
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d003      	beq.n	8006f3a <USB_EPClearStall+0x4c>
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	78db      	ldrb	r3, [r3, #3]
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d138      	bne.n	8006fac <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	015a      	lsls	r2, r3, #5
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4413      	add	r3, r2
 8006f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	0151      	lsls	r1, r2, #5
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	440a      	add	r2, r1
 8006f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	e027      	b.n	8006fac <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68ba      	ldr	r2, [r7, #8]
 8006f6c:	0151      	lsls	r1, r2, #5
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	440a      	add	r2, r1
 8006f72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	78db      	ldrb	r3, [r3, #3]
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d003      	beq.n	8006f8c <USB_EPClearStall+0x9e>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	78db      	ldrb	r3, [r3, #3]
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d10f      	bne.n	8006fac <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006faa:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006fdc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	78fb      	ldrb	r3, [r7, #3]
 8006fe8:	011b      	lsls	r3, r3, #4
 8006fea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006fee:	68f9      	ldr	r1, [r7, #12]
 8006ff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr

08007006 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007020:	f023 0302 	bic.w	r3, r3, #2
 8007024:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007026:	2003      	movs	r0, #3
 8007028:	f7fa f88a 	bl	8001140 <HAL_Delay>

  return HAL_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007050:	f043 0302 	orr.w	r3, r3, #2
 8007054:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007056:	2003      	movs	r0, #3
 8007058:	f7fa f872 	bl	8001140 <HAL_Delay>

  return HAL_OK;
 800705c:	2300      	movs	r3, #0
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007066:	b480      	push	{r7}
 8007068:	b085      	sub	sp, #20
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4013      	ands	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800707e:	68fb      	ldr	r3, [r7, #12]
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709e:	699b      	ldr	r3, [r3, #24]
 80070a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	4013      	ands	r3, r2
 80070ae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	0c1b      	lsrs	r3, r3, #16
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	4013      	ands	r3, r2
 80070e2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	b29b      	uxth	r3, r3
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3714      	adds	r7, #20
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4413      	add	r3, r2
 800710c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	68ba      	ldr	r2, [r7, #8]
 800711e:	4013      	ands	r3, r2
 8007120:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007122:	68bb      	ldr	r3, [r7, #8]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007152:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	f003 030f 	and.w	r3, r3, #15
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	fa22 f303 	lsr.w	r3, r2, r3
 8007160:	01db      	lsls	r3, r3, #7
 8007162:	b2db      	uxtb	r3, r3
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	4013      	ands	r3, r2
 800717c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800717e:	68bb      	ldr	r3, [r7, #8]
}
 8007180:	4618      	mov	r0, r3
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	f003 0301 	and.w	r3, r3, #1
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071c2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80071c6:	f023 0307 	bic.w	r3, r3, #7
 80071ca:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f003 0306 	and.w	r3, r3, #6
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d109      	bne.n	80071f0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071ea:	f043 0303 	orr.w	r3, r3, #3
 80071ee:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007202:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
	...

08007214 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	460b      	mov	r3, r1
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	333c      	adds	r3, #60	; 0x3c
 800722a:	3304      	adds	r3, #4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	4a26      	ldr	r2, [pc, #152]	; (80072cc <USB_EP0_OutStart+0xb8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d90a      	bls.n	800724e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007248:	d101      	bne.n	800724e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	e037      	b.n	80072be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	461a      	mov	r2, r3
 8007256:	2300      	movs	r3, #0
 8007258:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	697a      	ldr	r2, [r7, #20]
 8007264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007268:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800726c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	697a      	ldr	r2, [r7, #20]
 8007278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800727c:	f043 0318 	orr.w	r3, r3, #24
 8007280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	691b      	ldr	r3, [r3, #16]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007290:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007294:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007296:	7afb      	ldrb	r3, [r7, #11]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d10f      	bne.n	80072bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80072ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	4f54300a 	.word	0x4f54300a

080072d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	4a13      	ldr	r2, [pc, #76]	; (8007334 <USB_CoreReset+0x64>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d901      	bls.n	80072ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80072ea:	2303      	movs	r3, #3
 80072ec:	e01b      	b.n	8007326 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	daf2      	bge.n	80072dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f043 0201 	orr.w	r2, r3, #1
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3301      	adds	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4a09      	ldr	r2, [pc, #36]	; (8007334 <USB_CoreReset+0x64>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d901      	bls.n	8007318 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e006      	b.n	8007326 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b01      	cmp	r3, #1
 8007322:	d0f0      	beq.n	8007306 <USB_CoreReset+0x36>

  return HAL_OK;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	00030d40 	.word	0x00030d40

08007338 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007338:	b580      	push	{r7, lr}
 800733a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800733c:	4904      	ldr	r1, [pc, #16]	; (8007350 <MX_FATFS_Init+0x18>)
 800733e:	4805      	ldr	r0, [pc, #20]	; (8007354 <MX_FATFS_Init+0x1c>)
 8007340:	f004 f87e 	bl	800b440 <FATFS_LinkDriver>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	4b03      	ldr	r3, [pc, #12]	; (8007358 <MX_FATFS_Init+0x20>)
 800734a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800734c:	bf00      	nop
 800734e:	bd80      	pop	{r7, pc}
 8007350:	20001820 	.word	0x20001820
 8007354:	0800c8a0 	.word	0x0800c8a0
 8007358:	2000181c 	.word	0x2000181c

0800735c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800735c:	b480      	push	{r7}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007360:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007362:	4618      	mov	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007376:	f000 f871 	bl	800745c <BSP_SD_IsDetected>
 800737a:	4603      	mov	r3, r0
 800737c:	2b01      	cmp	r3, #1
 800737e:	d001      	beq.n	8007384 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e012      	b.n	80073aa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007384:	480b      	ldr	r0, [pc, #44]	; (80073b4 <BSP_SD_Init+0x48>)
 8007386:	f7fc fc7b 	bl	8003c80 <HAL_SD_Init>
 800738a:	4603      	mov	r3, r0
 800738c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800738e:	79fb      	ldrb	r3, [r7, #7]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d109      	bne.n	80073a8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007394:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007398:	4806      	ldr	r0, [pc, #24]	; (80073b4 <BSP_SD_Init+0x48>)
 800739a:	f7fd fa59 	bl	8004850 <HAL_SD_ConfigWideBusOperation>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d001      	beq.n	80073a8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80073a4:	2301      	movs	r3, #1
 80073a6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80073a8:	79fb      	ldrb	r3, [r7, #7]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20001794 	.word	0x20001794

080073b8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	68f9      	ldr	r1, [r7, #12]
 80073ce:	4806      	ldr	r0, [pc, #24]	; (80073e8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80073d0:	f7fc fce6 	bl	8003da0 <HAL_SD_ReadBlocks_DMA>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d001      	beq.n	80073de <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80073de:	7dfb      	ldrb	r3, [r7, #23]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20001794 	.word	0x20001794

080073ec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	68f9      	ldr	r1, [r7, #12]
 8007402:	4806      	ldr	r0, [pc, #24]	; (800741c <BSP_SD_WriteBlocks_DMA+0x30>)
 8007404:	f7fc fdb6 	bl	8003f74 <HAL_SD_WriteBlocks_DMA>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007412:	7dfb      	ldrb	r3, [r7, #23]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	20001794 	.word	0x20001794

08007420 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007424:	4805      	ldr	r0, [pc, #20]	; (800743c <BSP_SD_GetCardState+0x1c>)
 8007426:	f7fd fa8f 	bl	8004948 <HAL_SD_GetCardState>
 800742a:	4603      	mov	r3, r0
 800742c:	2b04      	cmp	r3, #4
 800742e:	bf14      	ite	ne
 8007430:	2301      	movne	r3, #1
 8007432:	2300      	moveq	r3, #0
 8007434:	b2db      	uxtb	r3, r3
}
 8007436:	4618      	mov	r0, r3
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20001794 	.word	0x20001794

08007440 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4803      	ldr	r0, [pc, #12]	; (8007458 <BSP_SD_GetCardInfo+0x18>)
 800744c:	f7fd f9d4 	bl	80047f8 <HAL_SD_GetCardInfo>
}
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	20001794 	.word	0x20001794

0800745c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007462:	2301      	movs	r3, #1
 8007464:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8007466:	f000 f80b 	bl	8007480 <BSP_PlatformIsDetected>
 800746a:	4603      	mov	r3, r0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007470:	2300      	movs	r3, #0
 8007472:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	b2db      	uxtb	r3, r3
}
 8007478:	4618      	mov	r0, r3
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007480:	b580      	push	{r7, lr}
 8007482:	b082      	sub	sp, #8
 8007484:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8007486:	2301      	movs	r3, #1
 8007488:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800748a:	2102      	movs	r1, #2
 800748c:	4806      	ldr	r0, [pc, #24]	; (80074a8 <BSP_PlatformIsDetected+0x28>)
 800748e:	f7fa fcc1 	bl	8001e14 <HAL_GPIO_ReadPin>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d001      	beq.n	800749c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8007498:	2300      	movs	r3, #0
 800749a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800749c:	79fb      	ldrb	r3, [r7, #7]
}  
 800749e:	4618      	mov	r0, r3
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	40020400 	.word	0x40020400

080074ac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80074b4:	f7f9 fe38 	bl	8001128 <HAL_GetTick>
 80074b8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80074ba:	e006      	b.n	80074ca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80074bc:	f7ff ffb0 	bl	8007420 <BSP_SD_GetCardState>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80074c6:	2300      	movs	r3, #0
 80074c8:	e009      	b.n	80074de <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80074ca:	f7f9 fe2d 	bl	8001128 <HAL_GetTick>
 80074ce:	4602      	mov	r2, r0
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d8f0      	bhi.n	80074bc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80074da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b082      	sub	sp, #8
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	4603      	mov	r3, r0
 80074f0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <SD_CheckStatus+0x38>)
 80074f4:	2201      	movs	r2, #1
 80074f6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80074f8:	f7ff ff92 	bl	8007420 <BSP_SD_GetCardState>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d107      	bne.n	8007512 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007502:	4b07      	ldr	r3, [pc, #28]	; (8007520 <SD_CheckStatus+0x38>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f023 0301 	bic.w	r3, r3, #1
 800750c:	b2da      	uxtb	r2, r3
 800750e:	4b04      	ldr	r3, [pc, #16]	; (8007520 <SD_CheckStatus+0x38>)
 8007510:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007512:	4b03      	ldr	r3, [pc, #12]	; (8007520 <SD_CheckStatus+0x38>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	b2db      	uxtb	r3, r3
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000009 	.word	0x20000009

08007524 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
 800752a:	4603      	mov	r3, r0
 800752c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800752e:	f7ff ff1d 	bl	800736c <BSP_SD_Init>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d107      	bne.n	8007548 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	4618      	mov	r0, r3
 800753c:	f7ff ffd4 	bl	80074e8 <SD_CheckStatus>
 8007540:	4603      	mov	r3, r0
 8007542:	461a      	mov	r2, r3
 8007544:	4b04      	ldr	r3, [pc, #16]	; (8007558 <SD_initialize+0x34>)
 8007546:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8007548:	4b03      	ldr	r3, [pc, #12]	; (8007558 <SD_initialize+0x34>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	b2db      	uxtb	r3, r3
}
 800754e:	4618      	mov	r0, r3
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	20000009 	.word	0x20000009

0800755c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007566:	79fb      	ldrb	r3, [r7, #7]
 8007568:	4618      	mov	r0, r3
 800756a:	f7ff ffbd 	bl	80074e8 <SD_CheckStatus>
 800756e:	4603      	mov	r3, r0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af00      	add	r7, sp, #0
 800757e:	60b9      	str	r1, [r7, #8]
 8007580:	607a      	str	r2, [r7, #4]
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800758c:	f247 5030 	movw	r0, #30000	; 0x7530
 8007590:	f7ff ff8c 	bl	80074ac <SD_CheckStatusWithTimeout>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	da01      	bge.n	800759e <SD_read+0x26>
  {
    return res;
 800759a:	7ffb      	ldrb	r3, [r7, #31]
 800759c:	e08b      	b.n	80076b6 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	f003 0303 	and.w	r3, r3, #3
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f040 8085 	bne.w	80076b4 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	68b8      	ldr	r0, [r7, #8]
 80075b0:	f7ff ff02 	bl	80073b8 <BSP_SD_ReadBlocks_DMA>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d133      	bne.n	8007622 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80075ba:	4b41      	ldr	r3, [pc, #260]	; (80076c0 <SD_read+0x148>)
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80075c0:	f7f9 fdb2 	bl	8001128 <HAL_GetTick>
 80075c4:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80075c6:	bf00      	nop
 80075c8:	4b3d      	ldr	r3, [pc, #244]	; (80076c0 <SD_read+0x148>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d108      	bne.n	80075e2 <SD_read+0x6a>
 80075d0:	f7f9 fdaa 	bl	8001128 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f247 522f 	movw	r2, #29999	; 0x752f
 80075de:	4293      	cmp	r3, r2
 80075e0:	d9f2      	bls.n	80075c8 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80075e2:	4b37      	ldr	r3, [pc, #220]	; (80076c0 <SD_read+0x148>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d102      	bne.n	80075f0 <SD_read+0x78>
      {
        res = RES_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	77fb      	strb	r3, [r7, #31]
 80075ee:	e061      	b.n	80076b4 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 80075f0:	4b33      	ldr	r3, [pc, #204]	; (80076c0 <SD_read+0x148>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80075f6:	f7f9 fd97 	bl	8001128 <HAL_GetTick>
 80075fa:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80075fc:	e007      	b.n	800760e <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80075fe:	f7ff ff0f 	bl	8007420 <BSP_SD_GetCardState>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	d102      	bne.n	800760e <SD_read+0x96>
          {
            res = RES_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800760c:	e052      	b.n	80076b4 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800760e:	f7f9 fd8b 	bl	8001128 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	f247 522f 	movw	r2, #29999	; 0x752f
 800761c:	4293      	cmp	r3, r2
 800761e:	d9ee      	bls.n	80075fe <SD_read+0x86>
 8007620:	e048      	b.n	80076b4 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8007622:	2300      	movs	r3, #0
 8007624:	61bb      	str	r3, [r7, #24]
 8007626:	e034      	b.n	8007692 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	607a      	str	r2, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	4619      	mov	r1, r3
 8007632:	4824      	ldr	r0, [pc, #144]	; (80076c4 <SD_read+0x14c>)
 8007634:	f7ff fec0 	bl	80073b8 <BSP_SD_ReadBlocks_DMA>
 8007638:	4603      	mov	r3, r0
 800763a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800763c:	7fbb      	ldrb	r3, [r7, #30]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d12c      	bne.n	800769c <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8007642:	4b1f      	ldr	r3, [pc, #124]	; (80076c0 <SD_read+0x148>)
 8007644:	2200      	movs	r2, #0
 8007646:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8007648:	f7f9 fd6e 	bl	8001128 <HAL_GetTick>
 800764c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800764e:	bf00      	nop
 8007650:	4b1b      	ldr	r3, [pc, #108]	; (80076c0 <SD_read+0x148>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d108      	bne.n	800766a <SD_read+0xf2>
 8007658:	f7f9 fd66 	bl	8001128 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	f247 522f 	movw	r2, #29999	; 0x752f
 8007666:	4293      	cmp	r3, r2
 8007668:	d9f2      	bls.n	8007650 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800766a:	4b15      	ldr	r3, [pc, #84]	; (80076c0 <SD_read+0x148>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d016      	beq.n	80076a0 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	4a13      	ldr	r2, [pc, #76]	; (80076c4 <SD_read+0x14c>)
 8007676:	4618      	mov	r0, r3
 8007678:	4611      	mov	r1, r2
 800767a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800767e:	461a      	mov	r2, r3
 8007680:	f004 fc60 	bl	800bf44 <memcpy>
          buff += BLOCKSIZE;
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800768a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800768c:	69bb      	ldr	r3, [r7, #24]
 800768e:	3301      	adds	r3, #1
 8007690:	61bb      	str	r3, [r7, #24]
 8007692:	69bb      	ldr	r3, [r7, #24]
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d8c6      	bhi.n	8007628 <SD_read+0xb0>
 800769a:	e002      	b.n	80076a2 <SD_read+0x12a>
        }
        else
        {
          break;
 800769c:	bf00      	nop
 800769e:	e000      	b.n	80076a2 <SD_read+0x12a>
            break;
 80076a0:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d104      	bne.n	80076b4 <SD_read+0x13c>
 80076aa:	7fbb      	ldrb	r3, [r7, #30]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d101      	bne.n	80076b4 <SD_read+0x13c>
        res = RES_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 80076b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	2000163c 	.word	0x2000163c
 80076c4:	20001438 	.word	0x20001438

080076c8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b088      	sub	sp, #32
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	603b      	str	r3, [r7, #0]
 80076d4:	4603      	mov	r3, r0
 80076d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 80076dc:	4b4c      	ldr	r3, [pc, #304]	; (8007810 <SD_write+0x148>)
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80076e2:	f247 5030 	movw	r0, #30000	; 0x7530
 80076e6:	f7ff fee1 	bl	80074ac <SD_CheckStatusWithTimeout>
 80076ea:	4603      	mov	r3, r0
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	da01      	bge.n	80076f4 <SD_write+0x2c>
  {
    return res;
 80076f0:	7ffb      	ldrb	r3, [r7, #31]
 80076f2:	e088      	b.n	8007806 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	f003 0303 	and.w	r3, r3, #3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f040 8082 	bne.w	8007804 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	6879      	ldr	r1, [r7, #4]
 8007704:	68b8      	ldr	r0, [r7, #8]
 8007706:	f7ff fe71 	bl	80073ec <BSP_SD_WriteBlocks_DMA>
 800770a:	4603      	mov	r3, r0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d130      	bne.n	8007772 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8007710:	f7f9 fd0a 	bl	8001128 <HAL_GetTick>
 8007714:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8007716:	bf00      	nop
 8007718:	4b3d      	ldr	r3, [pc, #244]	; (8007810 <SD_write+0x148>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d108      	bne.n	8007732 <SD_write+0x6a>
 8007720:	f7f9 fd02 	bl	8001128 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	f247 522f 	movw	r2, #29999	; 0x752f
 800772e:	4293      	cmp	r3, r2
 8007730:	d9f2      	bls.n	8007718 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8007732:	4b37      	ldr	r3, [pc, #220]	; (8007810 <SD_write+0x148>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <SD_write+0x78>
      {
        res = RES_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	77fb      	strb	r3, [r7, #31]
 800773e:	e061      	b.n	8007804 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8007740:	4b33      	ldr	r3, [pc, #204]	; (8007810 <SD_write+0x148>)
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8007746:	f7f9 fcef 	bl	8001128 <HAL_GetTick>
 800774a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800774c:	e007      	b.n	800775e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800774e:	f7ff fe67 	bl	8007420 <BSP_SD_GetCardState>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <SD_write+0x96>
          {
            res = RES_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	77fb      	strb	r3, [r7, #31]
            break;
 800775c:	e052      	b.n	8007804 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800775e:	f7f9 fce3 	bl	8001128 <HAL_GetTick>
 8007762:	4602      	mov	r2, r0
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	f247 522f 	movw	r2, #29999	; 0x752f
 800776c:	4293      	cmp	r3, r2
 800776e:	d9ee      	bls.n	800774e <SD_write+0x86>
 8007770:	e048      	b.n	8007804 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8007772:	2300      	movs	r3, #0
 8007774:	61bb      	str	r3, [r7, #24]
 8007776:	e034      	b.n	80077e2 <SD_write+0x11a>
      {
        WriteStatus = 0;
 8007778:	4b25      	ldr	r3, [pc, #148]	; (8007810 <SD_write+0x148>)
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	4619      	mov	r1, r3
 8007788:	4822      	ldr	r0, [pc, #136]	; (8007814 <SD_write+0x14c>)
 800778a:	f7ff fe2f 	bl	80073ec <BSP_SD_WriteBlocks_DMA>
 800778e:	4603      	mov	r3, r0
 8007790:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8007792:	7fbb      	ldrb	r3, [r7, #30]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d129      	bne.n	80077ec <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8007798:	f7f9 fcc6 	bl	8001128 <HAL_GetTick>
 800779c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800779e:	bf00      	nop
 80077a0:	4b1b      	ldr	r3, [pc, #108]	; (8007810 <SD_write+0x148>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d108      	bne.n	80077ba <SD_write+0xf2>
 80077a8:	f7f9 fcbe 	bl	8001128 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d9f2      	bls.n	80077a0 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 80077ba:	4b15      	ldr	r3, [pc, #84]	; (8007810 <SD_write+0x148>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d016      	beq.n	80077f0 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	4a13      	ldr	r2, [pc, #76]	; (8007814 <SD_write+0x14c>)
 80077c6:	4618      	mov	r0, r3
 80077c8:	4611      	mov	r1, r2
 80077ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077ce:	461a      	mov	r2, r3
 80077d0:	f004 fbb8 	bl	800bf44 <memcpy>
          buff += BLOCKSIZE;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80077da:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	3301      	adds	r3, #1
 80077e0:	61bb      	str	r3, [r7, #24]
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d8c6      	bhi.n	8007778 <SD_write+0xb0>
 80077ea:	e002      	b.n	80077f2 <SD_write+0x12a>
        }
        else
        {
          break;
 80077ec:	bf00      	nop
 80077ee:	e000      	b.n	80077f2 <SD_write+0x12a>
            break;
 80077f0:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d104      	bne.n	8007804 <SD_write+0x13c>
 80077fa:	7fbb      	ldrb	r3, [r7, #30]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <SD_write+0x13c>
        res = RES_OK;
 8007800:	2300      	movs	r3, #0
 8007802:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8007804:	7ffb      	ldrb	r3, [r7, #31]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3720      	adds	r7, #32
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20001638 	.word	0x20001638
 8007814:	20001438 	.word	0x20001438

08007818 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08c      	sub	sp, #48	; 0x30
 800781c:	af00      	add	r7, sp, #0
 800781e:	4603      	mov	r3, r0
 8007820:	603a      	str	r2, [r7, #0]
 8007822:	71fb      	strb	r3, [r7, #7]
 8007824:	460b      	mov	r3, r1
 8007826:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800782e:	4b25      	ldr	r3, [pc, #148]	; (80078c4 <SD_ioctl+0xac>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	f003 0301 	and.w	r3, r3, #1
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <SD_ioctl+0x28>
 800783c:	2303      	movs	r3, #3
 800783e:	e03c      	b.n	80078ba <SD_ioctl+0xa2>

  switch (cmd)
 8007840:	79bb      	ldrb	r3, [r7, #6]
 8007842:	2b03      	cmp	r3, #3
 8007844:	d834      	bhi.n	80078b0 <SD_ioctl+0x98>
 8007846:	a201      	add	r2, pc, #4	; (adr r2, 800784c <SD_ioctl+0x34>)
 8007848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800784c:	0800785d 	.word	0x0800785d
 8007850:	08007865 	.word	0x08007865
 8007854:	0800787d 	.word	0x0800787d
 8007858:	08007897 	.word	0x08007897
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007862:	e028      	b.n	80078b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007864:	f107 030c 	add.w	r3, r7, #12
 8007868:	4618      	mov	r0, r3
 800786a:	f7ff fde9 	bl	8007440 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800786e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800787a:	e01c      	b.n	80078b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fddd 	bl	8007440 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	b29a      	uxth	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800788e:	2300      	movs	r3, #0
 8007890:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007894:	e00f      	b.n	80078b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007896:	f107 030c 	add.w	r3, r7, #12
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fdd0 	bl	8007440 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80078a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a2:	0a5a      	lsrs	r2, r3, #9
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80078a8:	2300      	movs	r3, #0
 80078aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80078ae:	e002      	b.n	80078b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80078b0:	2304      	movs	r3, #4
 80078b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80078b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3730      	adds	r7, #48	; 0x30
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000009 	.word	0x20000009

080078c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	460b      	mov	r3, r1
 80078d2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	7c1b      	ldrb	r3, [r3, #16]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d115      	bne.n	800790c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80078e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078e4:	2202      	movs	r2, #2
 80078e6:	2181      	movs	r1, #129	; 0x81
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f004 f99e 	bl	800bc2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80078f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078f8:	2202      	movs	r2, #2
 80078fa:	2101      	movs	r1, #1
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f004 f994 	bl	800bc2a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800790a:	e012      	b.n	8007932 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800790c:	2340      	movs	r3, #64	; 0x40
 800790e:	2202      	movs	r2, #2
 8007910:	2181      	movs	r1, #129	; 0x81
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f004 f989 	bl	800bc2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800791e:	2340      	movs	r3, #64	; 0x40
 8007920:	2202      	movs	r2, #2
 8007922:	2101      	movs	r1, #1
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f004 f980 	bl	800bc2a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2201      	movs	r2, #1
 800792e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007932:	2308      	movs	r3, #8
 8007934:	2203      	movs	r2, #3
 8007936:	2182      	movs	r1, #130	; 0x82
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f004 f976 	bl	800bc2a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007944:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007948:	f004 faec 	bl	800bf24 <malloc>
 800794c:	4603      	mov	r3, r0
 800794e:	461a      	mov	r2, r3
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007960:	2301      	movs	r3, #1
 8007962:	73fb      	strb	r3, [r7, #15]
 8007964:	e026      	b.n	80079b4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800796c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2200      	movs	r2, #0
 800797c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2200      	movs	r2, #0
 8007984:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	7c1b      	ldrb	r3, [r3, #16]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800799a:	2101      	movs	r1, #1
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f004 fa35 	bl	800be0c <USBD_LL_PrepareReceive>
 80079a2:	e007      	b.n	80079b4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079aa:	2340      	movs	r3, #64	; 0x40
 80079ac:	2101      	movs	r1, #1
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f004 fa2c 	bl	800be0c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	460b      	mov	r3, r1
 80079c8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80079ce:	2181      	movs	r1, #129	; 0x81
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f004 f950 	bl	800bc76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f004 f949 	bl	800bc76 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80079ec:	2182      	movs	r1, #130	; 0x82
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f004 f941 	bl	800bc76 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00e      	beq.n	8007a22 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a14:	4618      	mov	r0, r3
 8007a16:	f004 fa8d 	bl	800bf34 <free>
    pdev->pClassData = NULL;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a3c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d039      	beq.n	8007aca <USBD_CDC_Setup+0x9e>
 8007a56:	2b20      	cmp	r3, #32
 8007a58:	d17c      	bne.n	8007b54 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	88db      	ldrh	r3, [r3, #6]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d029      	beq.n	8007ab6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	b25b      	sxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	da11      	bge.n	8007a90 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	683a      	ldr	r2, [r7, #0]
 8007a76:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007a78:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	88d2      	ldrh	r2, [r2, #6]
 8007a7e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007a80:	6939      	ldr	r1, [r7, #16]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	88db      	ldrh	r3, [r3, #6]
 8007a86:	461a      	mov	r2, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 f9c9 	bl	8008e20 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007a8e:	e068      	b.n	8007b62 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	785a      	ldrb	r2, [r3, #1]
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	88db      	ldrh	r3, [r3, #6]
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007aa6:	6939      	ldr	r1, [r7, #16]
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	88db      	ldrh	r3, [r3, #6]
 8007aac:	461a      	mov	r2, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f001 f9e4 	bl	8008e7c <USBD_CtlPrepareRx>
    break;
 8007ab4:	e055      	b.n	8007b62 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	7850      	ldrb	r0, [r2, #1]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	6839      	ldr	r1, [r7, #0]
 8007ac6:	4798      	blx	r3
    break;
 8007ac8:	e04b      	b.n	8007b62 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	2b0a      	cmp	r3, #10
 8007ad0:	d017      	beq.n	8007b02 <USBD_CDC_Setup+0xd6>
 8007ad2:	2b0b      	cmp	r3, #11
 8007ad4:	d029      	beq.n	8007b2a <USBD_CDC_Setup+0xfe>
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d133      	bne.n	8007b42 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d107      	bne.n	8007af4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007ae4:	f107 030c 	add.w	r3, r7, #12
 8007ae8:	2202      	movs	r2, #2
 8007aea:	4619      	mov	r1, r3
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 f997 	bl	8008e20 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007af2:	e02e      	b.n	8007b52 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f001 f927 	bl	8008d4a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007afc:	2302      	movs	r3, #2
 8007afe:	75fb      	strb	r3, [r7, #23]
      break;
 8007b00:	e027      	b.n	8007b52 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d107      	bne.n	8007b1c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007b0c:	f107 030f 	add.w	r3, r7, #15
 8007b10:	2201      	movs	r2, #1
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 f983 	bl	8008e20 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007b1a:	e01a      	b.n	8007b52 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f001 f913 	bl	8008d4a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007b24:	2302      	movs	r3, #2
 8007b26:	75fb      	strb	r3, [r7, #23]
      break;
 8007b28:	e013      	b.n	8007b52 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d00d      	beq.n	8007b50 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007b34:	6839      	ldr	r1, [r7, #0]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f001 f907 	bl	8008d4a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007b40:	e006      	b.n	8007b50 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8007b42:	6839      	ldr	r1, [r7, #0]
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f001 f900 	bl	8008d4a <USBD_CtlError>
      ret = USBD_FAIL;
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b4e:	e000      	b.n	8007b52 <USBD_CDC_Setup+0x126>
      break;
 8007b50:	bf00      	nop
    }
    break;
 8007b52:	e006      	b.n	8007b62 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8007b54:	6839      	ldr	r1, [r7, #0]
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f001 f8f7 	bl	8008d4a <USBD_CtlError>
    ret = USBD_FAIL;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	75fb      	strb	r3, [r7, #23]
    break;
 8007b60:	bf00      	nop
  }

  return ret;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b7e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007b86:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d03a      	beq.n	8007c08 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007b92:	78fa      	ldrb	r2, [r7, #3]
 8007b94:	6879      	ldr	r1, [r7, #4]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	440b      	add	r3, r1
 8007ba0:	331c      	adds	r3, #28
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d029      	beq.n	8007bfc <USBD_CDC_DataIn+0x90>
 8007ba8:	78fa      	ldrb	r2, [r7, #3]
 8007baa:	6879      	ldr	r1, [r7, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	331c      	adds	r3, #28
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	78f9      	ldrb	r1, [r7, #3]
 8007bbc:	68b8      	ldr	r0, [r7, #8]
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	1a5b      	subs	r3, r3, r1
 8007bc4:	009b      	lsls	r3, r3, #2
 8007bc6:	4403      	add	r3, r0
 8007bc8:	3344      	adds	r3, #68	; 0x44
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	fbb2 f1f3 	udiv	r1, r2, r3
 8007bd0:	fb03 f301 	mul.w	r3, r3, r1
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d110      	bne.n	8007bfc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007bda:	78fa      	ldrb	r2, [r7, #3]
 8007bdc:	6879      	ldr	r1, [r7, #4]
 8007bde:	4613      	mov	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	440b      	add	r3, r1
 8007be8:	331c      	adds	r3, #28
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007bee:	78f9      	ldrb	r1, [r7, #3]
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f004 f8e6 	bl	800bdc6 <USBD_LL_Transmit>
 8007bfa:	e003      	b.n	8007c04 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	e000      	b.n	8007c0a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007c08:	2302      	movs	r3, #2
  }
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c24:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007c26:	78fb      	ldrb	r3, [r7, #3]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f004 f911 	bl	800be52 <USBD_LL_GetRxDataSize>
 8007c30:	4602      	mov	r2, r0
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00d      	beq.n	8007c5e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007c56:	4611      	mov	r1, r2
 8007c58:	4798      	blx	r3

    return USBD_OK;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	e000      	b.n	8007c60 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007c5e:	2302      	movs	r3, #2
  }
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007c76:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d015      	beq.n	8007cae <USBD_CDC_EP0_RxReady+0x46>
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007c88:	2bff      	cmp	r3, #255	; 0xff
 8007c8a:	d010      	beq.n	8007cae <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	68fa      	ldr	r2, [r7, #12]
 8007c96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007c9a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007ca2:	b292      	uxth	r2, r2
 8007ca4:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	22ff      	movs	r2, #255	; 0xff
 8007caa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2243      	movs	r2, #67	; 0x43
 8007cc4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007cc6:	4b03      	ldr	r3, [pc, #12]	; (8007cd4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	20000094 	.word	0x20000094

08007cd8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2243      	movs	r2, #67	; 0x43
 8007ce4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007ce6:	4b03      	ldr	r3, [pc, #12]	; (8007cf4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	20000050 	.word	0x20000050

08007cf8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2243      	movs	r2, #67	; 0x43
 8007d04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007d06:	4b03      	ldr	r3, [pc, #12]	; (8007d14 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	200000d8 	.word	0x200000d8

08007d18 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	220a      	movs	r2, #10
 8007d24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007d26:	4b03      	ldr	r3, [pc, #12]	; (8007d34 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	370c      	adds	r7, #12
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr
 8007d34:	2000000c 	.word	0x2000000c

08007d38 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007d42:	2302      	movs	r3, #2
 8007d44:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d005      	beq.n	8007d58 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	683a      	ldr	r2, [r7, #0]
 8007d50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007d54:	2300      	movs	r3, #0
 8007d56:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3714      	adds	r7, #20
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d64:	4770      	bx	lr

08007d66 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007d66:	b480      	push	{r7}
 8007d68:	b087      	sub	sp, #28
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	4613      	mov	r3, r2
 8007d72:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d7a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	68ba      	ldr	r2, [r7, #8]
 8007d80:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007d84:	88fa      	ldrh	r2, [r7, #6]
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b085      	sub	sp, #20
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007daa:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	b084      	sub	sp, #16
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007dd0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01c      	beq.n	8007e16 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d115      	bne.n	8007e12 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2201      	movs	r2, #1
 8007dea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	2181      	movs	r1, #129	; 0x81
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f003 ffdc 	bl	800bdc6 <USBD_LL_Transmit>

      return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	e002      	b.n	8007e18 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007e12:	2301      	movs	r3, #1
 8007e14:	e000      	b.n	8007e18 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007e16:	2302      	movs	r3, #2
  }
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e2e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d017      	beq.n	8007e6a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	7c1b      	ldrb	r3, [r3, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f003 ffdc 	bl	800be0c <USBD_LL_PrepareReceive>
 8007e54:	e007      	b.n	8007e66 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e5c:	2340      	movs	r3, #64	; 0x40
 8007e5e:	2101      	movs	r1, #1
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f003 ffd3 	bl	800be0c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007e66:	2300      	movs	r3, #0
 8007e68:	e000      	b.n	8007e6c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007e6a:	2302      	movs	r3, #2
  }
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	4613      	mov	r3, r2
 8007e80:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d101      	bne.n	8007e8c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e01a      	b.n	8007ec2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d003      	beq.n	8007eac <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	79fa      	ldrb	r2, [r7, #7]
 8007eb8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f003 fe4e 	bl	800bb5c <USBD_LL_Init>

  return USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3710      	adds	r7, #16
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d006      	beq.n	8007eec <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
 8007eea:	e001      	b.n	8007ef0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007eec:	2302      	movs	r3, #2
 8007eee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007efe:	b580      	push	{r7, lr}
 8007f00:	b082      	sub	sp, #8
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f003 fe74 	bl	800bbf4 <USBD_LL_Start>

  return USBD_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007f16:	b480      	push	{r7}
 8007f18:	b083      	sub	sp, #12
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f1e:	2300      	movs	r3, #0
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00c      	beq.n	8007f60 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	78fa      	ldrb	r2, [r7, #3]
 8007f50:	4611      	mov	r1, r2
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	4798      	blx	r3
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	460b      	mov	r3, r1
 8007f74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	78fa      	ldrb	r2, [r7, #3]
 8007f80:	4611      	mov	r1, r2
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	4798      	blx	r3
  return USBD_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3708      	adds	r7, #8
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}

08007f90 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fe94 	bl	8008cd0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8007fc4:	f003 031f 	and.w	r3, r3, #31
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d00c      	beq.n	8007fe6 <USBD_LL_SetupStage+0x56>
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d302      	bcc.n	8007fd6 <USBD_LL_SetupStage+0x46>
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d010      	beq.n	8007ff6 <USBD_LL_SetupStage+0x66>
 8007fd4:	e017      	b.n	8008006 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 fa04 	bl	80083ec <USBD_StdDevReq>
    break;
 8007fe4:	e01a      	b.n	800801c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007fec:	4619      	mov	r1, r3
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fa66 	bl	80084c0 <USBD_StdItfReq>
    break;
 8007ff4:	e012      	b.n	800801c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 faa4 	bl	800854c <USBD_StdEPReq>
    break;
 8008004:	e00a      	b.n	800801c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800800c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008010:	b2db      	uxtb	r3, r3
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f003 fe4d 	bl	800bcb4 <USBD_LL_StallEP>
    break;
 800801a:	bf00      	nop
  }

  return USBD_OK;
 800801c:	2300      	movs	r3, #0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b086      	sub	sp, #24
 800802a:	af00      	add	r7, sp, #0
 800802c:	60f8      	str	r0, [r7, #12]
 800802e:	460b      	mov	r3, r1
 8008030:	607a      	str	r2, [r7, #4]
 8008032:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008034:	7afb      	ldrb	r3, [r7, #11]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d14b      	bne.n	80080d2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008040:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008048:	2b03      	cmp	r3, #3
 800804a:	d134      	bne.n	80080b6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	68da      	ldr	r2, [r3, #12]
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	429a      	cmp	r2, r3
 8008056:	d919      	bls.n	800808c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	68da      	ldr	r2, [r3, #12]
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	1ad2      	subs	r2, r2, r3
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	68da      	ldr	r2, [r3, #12]
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800806e:	429a      	cmp	r2, r3
 8008070:	d203      	bcs.n	800807a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008076:	b29b      	uxth	r3, r3
 8008078:	e002      	b.n	8008080 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800807e:	b29b      	uxth	r3, r3
 8008080:	461a      	mov	r2, r3
 8008082:	6879      	ldr	r1, [r7, #4]
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 ff17 	bl	8008eb8 <USBD_CtlContinueRx>
 800808a:	e038      	b.n	80080fe <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800809e:	2b03      	cmp	r3, #3
 80080a0:	d105      	bne.n	80080ae <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f000 ff14 	bl	8008edc <USBD_CtlSendStatus>
 80080b4:	e023      	b.n	80080fe <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80080bc:	2b05      	cmp	r3, #5
 80080be:	d11e      	bne.n	80080fe <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80080c8:	2100      	movs	r1, #0
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f003 fdf2 	bl	800bcb4 <USBD_LL_StallEP>
 80080d0:	e015      	b.n	80080fe <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080d8:	699b      	ldr	r3, [r3, #24]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00d      	beq.n	80080fa <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d108      	bne.n	80080fa <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	7afa      	ldrb	r2, [r7, #11]
 80080f2:	4611      	mov	r1, r2
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	4798      	blx	r3
 80080f8:	e001      	b.n	80080fe <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80080fa:	2302      	movs	r3, #2
 80080fc:	e000      	b.n	8008100 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3718      	adds	r7, #24
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b086      	sub	sp, #24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	460b      	mov	r3, r1
 8008112:	607a      	str	r2, [r7, #4]
 8008114:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008116:	7afb      	ldrb	r3, [r7, #11]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d17f      	bne.n	800821c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3314      	adds	r3, #20
 8008120:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008128:	2b02      	cmp	r3, #2
 800812a:	d15c      	bne.n	80081e6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	68da      	ldr	r2, [r3, #12]
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	429a      	cmp	r2, r3
 8008136:	d915      	bls.n	8008164 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	1ad2      	subs	r2, r2, r3
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	b29b      	uxth	r3, r3
 800814c:	461a      	mov	r2, r3
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f000 fe81 	bl	8008e58 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008156:	2300      	movs	r3, #0
 8008158:	2200      	movs	r2, #0
 800815a:	2100      	movs	r1, #0
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f003 fe55 	bl	800be0c <USBD_LL_PrepareReceive>
 8008162:	e04e      	b.n	8008202 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	697a      	ldr	r2, [r7, #20]
 800816a:	6912      	ldr	r2, [r2, #16]
 800816c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008170:	fb02 f201 	mul.w	r2, r2, r1
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	2b00      	cmp	r3, #0
 8008178:	d11c      	bne.n	80081b4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	689a      	ldr	r2, [r3, #8]
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008182:	429a      	cmp	r2, r3
 8008184:	d316      	bcc.n	80081b4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	689a      	ldr	r2, [r3, #8]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8008190:	429a      	cmp	r2, r3
 8008192:	d20f      	bcs.n	80081b4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008194:	2200      	movs	r2, #0
 8008196:	2100      	movs	r1, #0
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 fe5d 	bl	8008e58 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80081a6:	2300      	movs	r3, #0
 80081a8:	2200      	movs	r2, #0
 80081aa:	2100      	movs	r1, #0
 80081ac:	68f8      	ldr	r0, [r7, #12]
 80081ae:	f003 fe2d 	bl	800be0c <USBD_LL_PrepareReceive>
 80081b2:	e026      	b.n	8008202 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00a      	beq.n	80081d6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80081c6:	2b03      	cmp	r3, #3
 80081c8:	d105      	bne.n	80081d6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80081d6:	2180      	movs	r1, #128	; 0x80
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f003 fd6b 	bl	800bcb4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fe8f 	bl	8008f02 <USBD_CtlReceiveStatus>
 80081e4:	e00d      	b.n	8008202 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	d004      	beq.n	80081fa <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d103      	bne.n	8008202 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80081fa:	2180      	movs	r1, #128	; 0x80
 80081fc:	68f8      	ldr	r0, [r7, #12]
 80081fe:	f003 fd59 	bl	800bcb4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8008208:	2b01      	cmp	r3, #1
 800820a:	d11d      	bne.n	8008248 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fe82 	bl	8007f16 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800821a:	e015      	b.n	8008248 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008222:	695b      	ldr	r3, [r3, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00d      	beq.n	8008244 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800822e:	2b03      	cmp	r3, #3
 8008230:	d108      	bne.n	8008244 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	7afa      	ldrb	r2, [r7, #11]
 800823c:	4611      	mov	r1, r2
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	4798      	blx	r3
 8008242:	e001      	b.n	8008248 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008244:	2302      	movs	r3, #2
 8008246:	e000      	b.n	800824a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3718      	adds	r7, #24
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800825a:	2340      	movs	r3, #64	; 0x40
 800825c:	2200      	movs	r2, #0
 800825e:	2100      	movs	r1, #0
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f003 fce2 	bl	800bc2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2240      	movs	r2, #64	; 0x40
 8008272:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008276:	2340      	movs	r3, #64	; 0x40
 8008278:	2200      	movs	r2, #0
 800827a:	2180      	movs	r1, #128	; 0x80
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f003 fcd4 	bl	800bc2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2240      	movs	r2, #64	; 0x40
 800828c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d009      	beq.n	80082ca <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	687a      	ldr	r2, [r7, #4]
 80082c0:	6852      	ldr	r2, [r2, #4]
 80082c2:	b2d2      	uxtb	r2, r2
 80082c4:	4611      	mov	r1, r2
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
  }

  return USBD_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	460b      	mov	r3, r1
 80082de:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2204      	movs	r2, #4
 800830c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800834e:	2b03      	cmp	r3, #3
 8008350:	d10b      	bne.n	800836a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	6878      	ldr	r0, [r7, #4]
 8008368:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	460b      	mov	r3, r1
 800837e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008380:	2300      	movs	r3, #0
}
 8008382:	4618      	mov	r0, r3
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800838e:	b480      	push	{r7}
 8008390:	b083      	sub	sp, #12
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800839a:	2300      	movs	r3, #0
}
 800839c:	4618      	mov	r0, r3
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2201      	movs	r2, #1
 80083ca:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	6852      	ldr	r2, [r2, #4]
 80083da:	b2d2      	uxtb	r2, r2
 80083dc:	4611      	mov	r1, r2
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	4798      	blx	r3

  return USBD_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083f6:	2300      	movs	r3, #0
 80083f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008402:	2b20      	cmp	r3, #32
 8008404:	d004      	beq.n	8008410 <USBD_StdDevReq+0x24>
 8008406:	2b40      	cmp	r3, #64	; 0x40
 8008408:	d002      	beq.n	8008410 <USBD_StdDevReq+0x24>
 800840a:	2b00      	cmp	r3, #0
 800840c:	d008      	beq.n	8008420 <USBD_StdDevReq+0x34>
 800840e:	e04c      	b.n	80084aa <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	6839      	ldr	r1, [r7, #0]
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	4798      	blx	r3
    break;
 800841e:	e049      	b.n	80084b4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	785b      	ldrb	r3, [r3, #1]
 8008424:	2b09      	cmp	r3, #9
 8008426:	d83a      	bhi.n	800849e <USBD_StdDevReq+0xb2>
 8008428:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <USBD_StdDevReq+0x44>)
 800842a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800842e:	bf00      	nop
 8008430:	08008481 	.word	0x08008481
 8008434:	08008495 	.word	0x08008495
 8008438:	0800849f 	.word	0x0800849f
 800843c:	0800848b 	.word	0x0800848b
 8008440:	0800849f 	.word	0x0800849f
 8008444:	08008463 	.word	0x08008463
 8008448:	08008459 	.word	0x08008459
 800844c:	0800849f 	.word	0x0800849f
 8008450:	08008477 	.word	0x08008477
 8008454:	0800846d 	.word	0x0800846d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f9d2 	bl	8008804 <USBD_GetDescriptor>
      break;
 8008460:	e022      	b.n	80084a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008462:	6839      	ldr	r1, [r7, #0]
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fac7 	bl	80089f8 <USBD_SetAddress>
      break;
 800846a:	e01d      	b.n	80084a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fb04 	bl	8008a7c <USBD_SetConfig>
      break;
 8008474:	e018      	b.n	80084a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008476:	6839      	ldr	r1, [r7, #0]
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f000 fb8d 	bl	8008b98 <USBD_GetConfig>
      break;
 800847e:	e013      	b.n	80084a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008480:	6839      	ldr	r1, [r7, #0]
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fbbc 	bl	8008c00 <USBD_GetStatus>
      break;
 8008488:	e00e      	b.n	80084a8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fbea 	bl	8008c66 <USBD_SetFeature>
      break;
 8008492:	e009      	b.n	80084a8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fbf9 	bl	8008c8e <USBD_ClrFeature>
      break;
 800849c:	e004      	b.n	80084a8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800849e:	6839      	ldr	r1, [r7, #0]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f000 fc52 	bl	8008d4a <USBD_CtlError>
      break;
 80084a6:	bf00      	nop
    }
    break;
 80084a8:	e004      	b.n	80084b4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80084aa:	6839      	ldr	r1, [r7, #0]
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	f000 fc4c 	bl	8008d4a <USBD_CtlError>
    break;
 80084b2:	bf00      	nop
  }

  return ret;
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop

080084c0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d003      	beq.n	80084e2 <USBD_StdItfReq+0x22>
 80084da:	2b40      	cmp	r3, #64	; 0x40
 80084dc:	d001      	beq.n	80084e2 <USBD_StdItfReq+0x22>
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d12a      	bne.n	8008538 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80084e8:	3b01      	subs	r3, #1
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d81d      	bhi.n	800852a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	889b      	ldrh	r3, [r3, #4]
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d813      	bhi.n	8008520 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	6839      	ldr	r1, [r7, #0]
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	4798      	blx	r3
 8008506:	4603      	mov	r3, r0
 8008508:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	88db      	ldrh	r3, [r3, #6]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d110      	bne.n	8008534 <USBD_StdItfReq+0x74>
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10d      	bne.n	8008534 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fcdf 	bl	8008edc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800851e:	e009      	b.n	8008534 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fc11 	bl	8008d4a <USBD_CtlError>
      break;
 8008528:	e004      	b.n	8008534 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f000 fc0c 	bl	8008d4a <USBD_CtlError>
      break;
 8008532:	e000      	b.n	8008536 <USBD_StdItfReq+0x76>
      break;
 8008534:	bf00      	nop
    }
    break;
 8008536:	e004      	b.n	8008542 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008538:	6839      	ldr	r1, [r7, #0]
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fc05 	bl	8008d4a <USBD_CtlError>
    break;
 8008540:	bf00      	nop
  }

  return USBD_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
 8008554:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	889b      	ldrh	r3, [r3, #4]
 800855e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008568:	2b20      	cmp	r3, #32
 800856a:	d004      	beq.n	8008576 <USBD_StdEPReq+0x2a>
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d002      	beq.n	8008576 <USBD_StdEPReq+0x2a>
 8008570:	2b00      	cmp	r3, #0
 8008572:	d008      	beq.n	8008586 <USBD_StdEPReq+0x3a>
 8008574:	e13b      	b.n	80087ee <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	4798      	blx	r3
    break;
 8008584:	e138      	b.n	80087f8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800858e:	2b20      	cmp	r3, #32
 8008590:	d10a      	bne.n	80085a8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	6839      	ldr	r1, [r7, #0]
 800859c:	6878      	ldr	r0, [r7, #4]
 800859e:	4798      	blx	r3
 80085a0:	4603      	mov	r3, r0
 80085a2:	73fb      	strb	r3, [r7, #15]

      return ret;
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	e128      	b.n	80087fa <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	785b      	ldrb	r3, [r3, #1]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d03e      	beq.n	800862e <USBD_StdEPReq+0xe2>
 80085b0:	2b03      	cmp	r3, #3
 80085b2:	d002      	beq.n	80085ba <USBD_StdEPReq+0x6e>
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d070      	beq.n	800869a <USBD_StdEPReq+0x14e>
 80085b8:	e113      	b.n	80087e2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d002      	beq.n	80085ca <USBD_StdEPReq+0x7e>
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d015      	beq.n	80085f4 <USBD_StdEPReq+0xa8>
 80085c8:	e02b      	b.n	8008622 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00c      	beq.n	80085ea <USBD_StdEPReq+0x9e>
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	2b80      	cmp	r3, #128	; 0x80
 80085d4:	d009      	beq.n	80085ea <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f003 fb6a 	bl	800bcb4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80085e0:	2180      	movs	r1, #128	; 0x80
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f003 fb66 	bl	800bcb4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80085e8:	e020      	b.n	800862c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80085ea:	6839      	ldr	r1, [r7, #0]
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f000 fbac 	bl	8008d4a <USBD_CtlError>
        break;
 80085f2:	e01b      	b.n	800862c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	885b      	ldrh	r3, [r3, #2]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10e      	bne.n	800861a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00b      	beq.n	800861a <USBD_StdEPReq+0xce>
 8008602:	7bbb      	ldrb	r3, [r7, #14]
 8008604:	2b80      	cmp	r3, #128	; 0x80
 8008606:	d008      	beq.n	800861a <USBD_StdEPReq+0xce>
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	88db      	ldrh	r3, [r3, #6]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8008610:	7bbb      	ldrb	r3, [r7, #14]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f003 fb4d 	bl	800bcb4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 fc5e 	bl	8008edc <USBD_CtlSendStatus>

        break;
 8008620:	e004      	b.n	800862c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8008622:	6839      	ldr	r1, [r7, #0]
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fb90 	bl	8008d4a <USBD_CtlError>
        break;
 800862a:	bf00      	nop
      }
      break;
 800862c:	e0de      	b.n	80087ec <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008634:	2b02      	cmp	r3, #2
 8008636:	d002      	beq.n	800863e <USBD_StdEPReq+0xf2>
 8008638:	2b03      	cmp	r3, #3
 800863a:	d015      	beq.n	8008668 <USBD_StdEPReq+0x11c>
 800863c:	e026      	b.n	800868c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800863e:	7bbb      	ldrb	r3, [r7, #14]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00c      	beq.n	800865e <USBD_StdEPReq+0x112>
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b80      	cmp	r3, #128	; 0x80
 8008648:	d009      	beq.n	800865e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	4619      	mov	r1, r3
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f003 fb30 	bl	800bcb4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008654:	2180      	movs	r1, #128	; 0x80
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f003 fb2c 	bl	800bcb4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800865c:	e01c      	b.n	8008698 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fb72 	bl	8008d4a <USBD_CtlError>
        break;
 8008666:	e017      	b.n	8008698 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	885b      	ldrh	r3, [r3, #2]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d112      	bne.n	8008696 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f003 fb37 	bl	800bcf2 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fc29 	bl	8008edc <USBD_CtlSendStatus>
        }
        break;
 800868a:	e004      	b.n	8008696 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fb5b 	bl	8008d4a <USBD_CtlError>
        break;
 8008694:	e000      	b.n	8008698 <USBD_StdEPReq+0x14c>
        break;
 8008696:	bf00      	nop
      }
      break;
 8008698:	e0a8      	b.n	80087ec <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d002      	beq.n	80086aa <USBD_StdEPReq+0x15e>
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d031      	beq.n	800870c <USBD_StdEPReq+0x1c0>
 80086a8:	e095      	b.n	80087d6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d007      	beq.n	80086c0 <USBD_StdEPReq+0x174>
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	2b80      	cmp	r3, #128	; 0x80
 80086b4:	d004      	beq.n	80086c0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80086b6:	6839      	ldr	r1, [r7, #0]
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 fb46 	bl	8008d4a <USBD_CtlError>
          break;
 80086be:	e08f      	b.n	80087e0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80086c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	da0b      	bge.n	80086e0 <USBD_StdEPReq+0x194>
 80086c8:	7bbb      	ldrb	r3, [r7, #14]
 80086ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086ce:	4613      	mov	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	4413      	add	r3, r2
 80086d4:	009b      	lsls	r3, r3, #2
 80086d6:	3310      	adds	r3, #16
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	4413      	add	r3, r2
 80086dc:	3304      	adds	r3, #4
 80086de:	e00a      	b.n	80086f6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	4413      	add	r3, r2
 80086f6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	2200      	movs	r2, #0
 80086fc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2202      	movs	r2, #2
 8008702:	4619      	mov	r1, r3
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fb8b 	bl	8008e20 <USBD_CtlSendData>
          break;
 800870a:	e069      	b.n	80087e0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800870c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008710:	2b00      	cmp	r3, #0
 8008712:	da11      	bge.n	8008738 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	f003 020f 	and.w	r2, r3, #15
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	4613      	mov	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	440b      	add	r3, r1
 8008726:	3318      	adds	r3, #24
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d117      	bne.n	800875e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fb0a 	bl	8008d4a <USBD_CtlError>
            break;
 8008736:	e053      	b.n	80087e0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008738:	7bbb      	ldrb	r3, [r7, #14]
 800873a:	f003 020f 	and.w	r2, r3, #15
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 faf7 	bl	8008d4a <USBD_CtlError>
            break;
 800875c:	e040      	b.n	80087e0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800875e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008762:	2b00      	cmp	r3, #0
 8008764:	da0b      	bge.n	800877e <USBD_StdEPReq+0x232>
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800876c:	4613      	mov	r3, r2
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	3310      	adds	r3, #16
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	3304      	adds	r3, #4
 800877c:	e00a      	b.n	8008794 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	4413      	add	r3, r2
 8008794:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008796:	7bbb      	ldrb	r3, [r7, #14]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d002      	beq.n	80087a2 <USBD_StdEPReq+0x256>
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	2b80      	cmp	r3, #128	; 0x80
 80087a0:	d103      	bne.n	80087aa <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2200      	movs	r2, #0
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	e00e      	b.n	80087c8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80087aa:	7bbb      	ldrb	r3, [r7, #14]
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f003 fabe 	bl	800bd30 <USBD_LL_IsStallEP>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d003      	beq.n	80087c2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2201      	movs	r2, #1
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	e002      	b.n	80087c8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	2200      	movs	r2, #0
 80087c6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2202      	movs	r2, #2
 80087cc:	4619      	mov	r1, r3
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fb26 	bl	8008e20 <USBD_CtlSendData>
          break;
 80087d4:	e004      	b.n	80087e0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fab6 	bl	8008d4a <USBD_CtlError>
        break;
 80087de:	bf00      	nop
      }
      break;
 80087e0:	e004      	b.n	80087ec <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fab0 	bl	8008d4a <USBD_CtlError>
      break;
 80087ea:	bf00      	nop
    }
    break;
 80087ec:	e004      	b.n	80087f8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80087ee:	6839      	ldr	r1, [r7, #0]
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f000 faaa 	bl	8008d4a <USBD_CtlError>
    break;
 80087f6:	bf00      	nop
  }

  return ret;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
 800880c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	885b      	ldrh	r3, [r3, #2]
 8008812:	0a1b      	lsrs	r3, r3, #8
 8008814:	b29b      	uxth	r3, r3
 8008816:	3b01      	subs	r3, #1
 8008818:	2b06      	cmp	r3, #6
 800881a:	f200 80c9 	bhi.w	80089b0 <USBD_GetDescriptor+0x1ac>
 800881e:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <USBD_GetDescriptor+0x20>)
 8008820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008824:	08008841 	.word	0x08008841
 8008828:	08008859 	.word	0x08008859
 800882c:	08008899 	.word	0x08008899
 8008830:	080089b1 	.word	0x080089b1
 8008834:	080089b1 	.word	0x080089b1
 8008838:	0800895d 	.word	0x0800895d
 800883c:	08008983 	.word	0x08008983
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	7c12      	ldrb	r2, [r2, #16]
 800884c:	f107 010a 	add.w	r1, r7, #10
 8008850:	4610      	mov	r0, r2
 8008852:	4798      	blx	r3
 8008854:	60f8      	str	r0, [r7, #12]
    break;
 8008856:	e0b0      	b.n	80089ba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	7c1b      	ldrb	r3, [r3, #16]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d10d      	bne.n	800887c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008868:	f107 020a 	add.w	r2, r7, #10
 800886c:	4610      	mov	r0, r2
 800886e:	4798      	blx	r3
 8008870:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	3301      	adds	r3, #1
 8008876:	2202      	movs	r2, #2
 8008878:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800887a:	e09e      	b.n	80089ba <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	f107 020a 	add.w	r2, r7, #10
 8008888:	4610      	mov	r0, r2
 800888a:	4798      	blx	r3
 800888c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3301      	adds	r3, #1
 8008892:	2202      	movs	r2, #2
 8008894:	701a      	strb	r2, [r3, #0]
    break;
 8008896:	e090      	b.n	80089ba <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	885b      	ldrh	r3, [r3, #2]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b05      	cmp	r3, #5
 80088a0:	d856      	bhi.n	8008950 <USBD_GetDescriptor+0x14c>
 80088a2:	a201      	add	r2, pc, #4	; (adr r2, 80088a8 <USBD_GetDescriptor+0xa4>)
 80088a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a8:	080088c1 	.word	0x080088c1
 80088ac:	080088d9 	.word	0x080088d9
 80088b0:	080088f1 	.word	0x080088f1
 80088b4:	08008909 	.word	0x08008909
 80088b8:	08008921 	.word	0x08008921
 80088bc:	08008939 	.word	0x08008939
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	687a      	ldr	r2, [r7, #4]
 80088ca:	7c12      	ldrb	r2, [r2, #16]
 80088cc:	f107 010a 	add.w	r1, r7, #10
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
 80088d4:	60f8      	str	r0, [r7, #12]
      break;
 80088d6:	e040      	b.n	800895a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	7c12      	ldrb	r2, [r2, #16]
 80088e4:	f107 010a 	add.w	r1, r7, #10
 80088e8:	4610      	mov	r0, r2
 80088ea:	4798      	blx	r3
 80088ec:	60f8      	str	r0, [r7, #12]
      break;
 80088ee:	e034      	b.n	800895a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	687a      	ldr	r2, [r7, #4]
 80088fa:	7c12      	ldrb	r2, [r2, #16]
 80088fc:	f107 010a 	add.w	r1, r7, #10
 8008900:	4610      	mov	r0, r2
 8008902:	4798      	blx	r3
 8008904:	60f8      	str	r0, [r7, #12]
      break;
 8008906:	e028      	b.n	800895a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800890e:	691b      	ldr	r3, [r3, #16]
 8008910:	687a      	ldr	r2, [r7, #4]
 8008912:	7c12      	ldrb	r2, [r2, #16]
 8008914:	f107 010a 	add.w	r1, r7, #10
 8008918:	4610      	mov	r0, r2
 800891a:	4798      	blx	r3
 800891c:	60f8      	str	r0, [r7, #12]
      break;
 800891e:	e01c      	b.n	800895a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7c12      	ldrb	r2, [r2, #16]
 800892c:	f107 010a 	add.w	r1, r7, #10
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
      break;
 8008936:	e010      	b.n	800895a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	7c12      	ldrb	r2, [r2, #16]
 8008944:	f107 010a 	add.w	r1, r7, #10
 8008948:	4610      	mov	r0, r2
 800894a:	4798      	blx	r3
 800894c:	60f8      	str	r0, [r7, #12]
      break;
 800894e:	e004      	b.n	800895a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008950:	6839      	ldr	r1, [r7, #0]
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f9f9 	bl	8008d4a <USBD_CtlError>
      return;
 8008958:	e04b      	b.n	80089f2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800895a:	e02e      	b.n	80089ba <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	7c1b      	ldrb	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d109      	bne.n	8008978 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800896a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800896c:	f107 020a 	add.w	r2, r7, #10
 8008970:	4610      	mov	r0, r2
 8008972:	4798      	blx	r3
 8008974:	60f8      	str	r0, [r7, #12]
      break;
 8008976:	e020      	b.n	80089ba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f9e5 	bl	8008d4a <USBD_CtlError>
      return;
 8008980:	e037      	b.n	80089f2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	7c1b      	ldrb	r3, [r3, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10d      	bne.n	80089a6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008992:	f107 020a 	add.w	r2, r7, #10
 8008996:	4610      	mov	r0, r2
 8008998:	4798      	blx	r3
 800899a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	3301      	adds	r3, #1
 80089a0:	2207      	movs	r2, #7
 80089a2:	701a      	strb	r2, [r3, #0]
      break;
 80089a4:	e009      	b.n	80089ba <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f9ce 	bl	8008d4a <USBD_CtlError>
      return;
 80089ae:	e020      	b.n	80089f2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f9c9 	bl	8008d4a <USBD_CtlError>
    return;
 80089b8:	e01b      	b.n	80089f2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80089ba:	897b      	ldrh	r3, [r7, #10]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d011      	beq.n	80089e4 <USBD_GetDescriptor+0x1e0>
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	88db      	ldrh	r3, [r3, #6]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00d      	beq.n	80089e4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	88da      	ldrh	r2, [r3, #6]
 80089cc:	897b      	ldrh	r3, [r7, #10]
 80089ce:	4293      	cmp	r3, r2
 80089d0:	bf28      	it	cs
 80089d2:	4613      	movcs	r3, r2
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 80089d8:	897b      	ldrh	r3, [r7, #10]
 80089da:	461a      	mov	r2, r3
 80089dc:	68f9      	ldr	r1, [r7, #12]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fa1e 	bl	8008e20 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	88db      	ldrh	r3, [r3, #6]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d102      	bne.n	80089f2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fa75 	bl	8008edc <USBD_CtlSendStatus>
  }
}
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	889b      	ldrh	r3, [r3, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d130      	bne.n	8008a6c <USBD_SetAddress+0x74>
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	88db      	ldrh	r3, [r3, #6]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d12c      	bne.n	8008a6c <USBD_SetAddress+0x74>
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	885b      	ldrh	r3, [r3, #2]
 8008a16:	2b7f      	cmp	r3, #127	; 0x7f
 8008a18:	d828      	bhi.n	8008a6c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	885b      	ldrh	r3, [r3, #2]
 8008a1e:	b2db      	uxtb	r3, r3
 8008a20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a24:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	d104      	bne.n	8008a3a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f989 	bl	8008d4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a38:	e01c      	b.n	8008a74 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	7bfa      	ldrb	r2, [r7, #15]
 8008a3e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	4619      	mov	r1, r3
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f003 f99e 	bl	800bd88 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fa45 	bl	8008edc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d004      	beq.n	8008a62 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a60:	e008      	b.n	8008a74 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2201      	movs	r2, #1
 8008a66:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a6a:	e003      	b.n	8008a74 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 f96b 	bl	8008d4a <USBD_CtlError>
  }
}
 8008a74:	bf00      	nop
 8008a76:	3710      	adds	r7, #16
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	885b      	ldrh	r3, [r3, #2]
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	4b41      	ldr	r3, [pc, #260]	; (8008b94 <USBD_SetConfig+0x118>)
 8008a8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008a90:	4b40      	ldr	r3, [pc, #256]	; (8008b94 <USBD_SetConfig+0x118>)
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d904      	bls.n	8008aa2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008a98:	6839      	ldr	r1, [r7, #0]
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f955 	bl	8008d4a <USBD_CtlError>
 8008aa0:	e075      	b.n	8008b8e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008aa8:	2b02      	cmp	r3, #2
 8008aaa:	d002      	beq.n	8008ab2 <USBD_SetConfig+0x36>
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d023      	beq.n	8008af8 <USBD_SetConfig+0x7c>
 8008ab0:	e062      	b.n	8008b78 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008ab2:	4b38      	ldr	r3, [pc, #224]	; (8008b94 <USBD_SetConfig+0x118>)
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d01a      	beq.n	8008af0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008aba:	4b36      	ldr	r3, [pc, #216]	; (8008b94 <USBD_SetConfig+0x118>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008acc:	4b31      	ldr	r3, [pc, #196]	; (8008b94 <USBD_SetConfig+0x118>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff fa2a 	bl	8007f2c <USBD_SetClassConfig>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d104      	bne.n	8008ae8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008ade:	6839      	ldr	r1, [r7, #0]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f932 	bl	8008d4a <USBD_CtlError>
          return;
 8008ae6:	e052      	b.n	8008b8e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f9f7 	bl	8008edc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008aee:	e04e      	b.n	8008b8e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f9f3 	bl	8008edc <USBD_CtlSendStatus>
      break;
 8008af6:	e04a      	b.n	8008b8e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008af8:	4b26      	ldr	r3, [pc, #152]	; (8008b94 <USBD_SetConfig+0x118>)
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d112      	bne.n	8008b26 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2202      	movs	r2, #2
 8008b04:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008b08:	4b22      	ldr	r3, [pc, #136]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008b12:	4b20      	ldr	r3, [pc, #128]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7ff fa26 	bl	8007f6a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 f9dc 	bl	8008edc <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008b24:	e033      	b.n	8008b8e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008b26:	4b1b      	ldr	r3, [pc, #108]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d01d      	beq.n	8008b70 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f7ff fa14 	bl	8007f6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008b42:	4b14      	ldr	r3, [pc, #80]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b4c:	4b11      	ldr	r3, [pc, #68]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7ff f9ea 	bl	8007f2c <USBD_SetClassConfig>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d104      	bne.n	8008b68 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008b5e:	6839      	ldr	r1, [r7, #0]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f8f2 	bl	8008d4a <USBD_CtlError>
          return;
 8008b66:	e012      	b.n	8008b8e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f9b7 	bl	8008edc <USBD_CtlSendStatus>
      break;
 8008b6e:	e00e      	b.n	8008b8e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 f9b3 	bl	8008edc <USBD_CtlSendStatus>
      break;
 8008b76:	e00a      	b.n	8008b8e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f8e5 	bl	8008d4a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008b80:	4b04      	ldr	r3, [pc, #16]	; (8008b94 <USBD_SetConfig+0x118>)
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	4619      	mov	r1, r3
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7ff f9ef 	bl	8007f6a <USBD_ClrClassConfig>
      break;
 8008b8c:	bf00      	nop
    }
  }
}
 8008b8e:	3708      	adds	r7, #8
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}
 8008b94:	20001640 	.word	0x20001640

08008b98 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	88db      	ldrh	r3, [r3, #6]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d004      	beq.n	8008bb4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 f8cc 	bl	8008d4a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008bb2:	e021      	b.n	8008bf8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	db17      	blt.n	8008bee <USBD_GetConfig+0x56>
 8008bbe:	2b02      	cmp	r3, #2
 8008bc0:	dd02      	ble.n	8008bc8 <USBD_GetConfig+0x30>
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d00b      	beq.n	8008bde <USBD_GetConfig+0x46>
 8008bc6:	e012      	b.n	8008bee <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	3308      	adds	r3, #8
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f922 	bl	8008e20 <USBD_CtlSendData>
      break;
 8008bdc:	e00c      	b.n	8008bf8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3304      	adds	r3, #4
 8008be2:	2201      	movs	r2, #1
 8008be4:	4619      	mov	r1, r3
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f000 f91a 	bl	8008e20 <USBD_CtlSendData>
      break;
 8008bec:	e004      	b.n	8008bf8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8008bee:	6839      	ldr	r1, [r7, #0]
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f000 f8aa 	bl	8008d4a <USBD_CtlError>
      break;
 8008bf6:	bf00      	nop
}
 8008bf8:	bf00      	nop
 8008bfa:	3708      	adds	r7, #8
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b082      	sub	sp, #8
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c10:	3b01      	subs	r3, #1
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d81e      	bhi.n	8008c54 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	88db      	ldrh	r3, [r3, #6]
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d004      	beq.n	8008c28 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f892 	bl	8008d4a <USBD_CtlError>
      break;
 8008c26:	e01a      	b.n	8008c5e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d005      	beq.n	8008c44 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f043 0202 	orr.w	r2, r3, #2
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	330c      	adds	r3, #12
 8008c48:	2202      	movs	r2, #2
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f8e7 	bl	8008e20 <USBD_CtlSendData>
    break;
 8008c52:	e004      	b.n	8008c5e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008c54:	6839      	ldr	r1, [r7, #0]
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f000 f877 	bl	8008d4a <USBD_CtlError>
    break;
 8008c5c:	bf00      	nop
  }
}
 8008c5e:	bf00      	nop
 8008c60:	3708      	adds	r7, #8
 8008c62:	46bd      	mov	sp, r7
 8008c64:	bd80      	pop	{r7, pc}

08008c66 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008c66:	b580      	push	{r7, lr}
 8008c68:	b082      	sub	sp, #8
 8008c6a:	af00      	add	r7, sp, #0
 8008c6c:	6078      	str	r0, [r7, #4]
 8008c6e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	885b      	ldrh	r3, [r3, #2]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d106      	bne.n	8008c86 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f92b 	bl	8008edc <USBD_CtlSendStatus>
  }

}
 8008c86:	bf00      	nop
 8008c88:	3708      	adds	r7, #8
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b082      	sub	sp, #8
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d80b      	bhi.n	8008cbc <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	885b      	ldrh	r3, [r3, #2]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d10c      	bne.n	8008cc6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f911 	bl	8008edc <USBD_CtlSendStatus>
    }
    break;
 8008cba:	e004      	b.n	8008cc6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008cbc:	6839      	ldr	r1, [r7, #0]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 f843 	bl	8008d4a <USBD_CtlError>
    break;
 8008cc4:	e000      	b.n	8008cc8 <USBD_ClrFeature+0x3a>
    break;
 8008cc6:	bf00      	nop
  }
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	781a      	ldrb	r2, [r3, #0]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	785a      	ldrb	r2, [r3, #1]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	3302      	adds	r3, #2
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	3303      	adds	r3, #3
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	021b      	lsls	r3, r3, #8
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	4413      	add	r3, r2
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	3304      	adds	r3, #4
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	b29a      	uxth	r2, r3
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	3305      	adds	r3, #5
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	b29b      	uxth	r3, r3
 8008d16:	021b      	lsls	r3, r3, #8
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	4413      	add	r3, r2
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	3306      	adds	r3, #6
 8008d26:	781b      	ldrb	r3, [r3, #0]
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	3307      	adds	r3, #7
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	021b      	lsls	r3, r3, #8
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	4413      	add	r3, r2
 8008d38:	b29a      	uxth	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	80da      	strh	r2, [r3, #6]

}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008d54:	2180      	movs	r1, #128	; 0x80
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f002 ffac 	bl	800bcb4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008d5c:	2100      	movs	r1, #0
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f002 ffa8 	bl	800bcb4 <USBD_LL_StallEP>
}
 8008d64:	bf00      	nop
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b086      	sub	sp, #24
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d032      	beq.n	8008de8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f000 f834 	bl	8008df0 <USBD_GetLen>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008d96:	7dfb      	ldrb	r3, [r7, #23]
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	75fa      	strb	r2, [r7, #23]
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	4413      	add	r3, r2
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	7812      	ldrb	r2, [r2, #0]
 8008da6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008da8:	7dfb      	ldrb	r3, [r7, #23]
 8008daa:	1c5a      	adds	r2, r3, #1
 8008dac:	75fa      	strb	r2, [r7, #23]
 8008dae:	461a      	mov	r2, r3
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4413      	add	r3, r2
 8008db4:	2203      	movs	r2, #3
 8008db6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008db8:	e012      	b.n	8008de0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1c5a      	adds	r2, r3, #1
 8008dbe:	60fa      	str	r2, [r7, #12]
 8008dc0:	7dfa      	ldrb	r2, [r7, #23]
 8008dc2:	1c51      	adds	r1, r2, #1
 8008dc4:	75f9      	strb	r1, [r7, #23]
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	440a      	add	r2, r1
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	1c5a      	adds	r2, r3, #1
 8008dd4:	75fa      	strb	r2, [r7, #23]
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4413      	add	r3, r2
 8008ddc:	2200      	movs	r2, #0
 8008dde:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d1e8      	bne.n	8008dba <USBD_GetString+0x4e>
    }
  }
}
 8008de8:	bf00      	nop
 8008dea:	3718      	adds	r7, #24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008dfc:	e005      	b.n	8008e0a <USBD_GetLen+0x1a>
    {
        len++;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	3301      	adds	r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	3301      	adds	r3, #1
 8008e08:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1f5      	bne.n	8008dfe <USBD_GetLen+0xe>
    }

    return len;
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2202      	movs	r2, #2
 8008e32:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008e36:	88fa      	ldrh	r2, [r7, #6]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008e3c:	88fa      	ldrh	r2, [r7, #6]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008e42:	88fb      	ldrh	r3, [r7, #6]
 8008e44:	68ba      	ldr	r2, [r7, #8]
 8008e46:	2100      	movs	r1, #0
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f002 ffbc 	bl	800bdc6 <USBD_LL_Transmit>

  return USBD_OK;
 8008e4e:	2300      	movs	r3, #0
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3710      	adds	r7, #16
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	4613      	mov	r3, r2
 8008e64:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008e66:	88fb      	ldrh	r3, [r7, #6]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	68f8      	ldr	r0, [r7, #12]
 8008e6e:	f002 ffaa 	bl	800bdc6 <USBD_LL_Transmit>

  return USBD_OK;
 8008e72:	2300      	movs	r3, #0
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	4613      	mov	r3, r2
 8008e88:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2203      	movs	r2, #3
 8008e8e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008e92:	88fa      	ldrh	r2, [r7, #6]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008e9a:	88fa      	ldrh	r2, [r7, #6]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f002 ffaf 	bl	800be0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008eae:	2300      	movs	r3, #0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ec6:	88fb      	ldrh	r3, [r7, #6]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	2100      	movs	r1, #0
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f002 ff9d 	bl	800be0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2204      	movs	r2, #4
 8008ee8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008eec:	2300      	movs	r3, #0
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f002 ff67 	bl	800bdc6 <USBD_LL_Transmit>

  return USBD_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}

08008f02 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008f02:	b580      	push	{r7, lr}
 8008f04:	b082      	sub	sp, #8
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2205      	movs	r2, #5
 8008f0e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008f12:	2300      	movs	r3, #0
 8008f14:	2200      	movs	r2, #0
 8008f16:	2100      	movs	r1, #0
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f002 ff77 	bl	800be0c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3708      	adds	r7, #8
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	4603      	mov	r3, r0
 8008f30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	4a08      	ldr	r2, [pc, #32]	; (8008f58 <disk_status+0x30>)
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	79fa      	ldrb	r2, [r7, #7]
 8008f40:	4905      	ldr	r1, [pc, #20]	; (8008f58 <disk_status+0x30>)
 8008f42:	440a      	add	r2, r1
 8008f44:	7a12      	ldrb	r2, [r2, #8]
 8008f46:	4610      	mov	r0, r2
 8008f48:	4798      	blx	r3
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	2000166c 	.word	0x2000166c

08008f5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008f6a:	79fb      	ldrb	r3, [r7, #7]
 8008f6c:	4a0d      	ldr	r2, [pc, #52]	; (8008fa4 <disk_initialize+0x48>)
 8008f6e:	5cd3      	ldrb	r3, [r2, r3]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d111      	bne.n	8008f98 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	4a0b      	ldr	r2, [pc, #44]	; (8008fa4 <disk_initialize+0x48>)
 8008f78:	2101      	movs	r1, #1
 8008f7a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	4a09      	ldr	r2, [pc, #36]	; (8008fa4 <disk_initialize+0x48>)
 8008f80:	009b      	lsls	r3, r3, #2
 8008f82:	4413      	add	r3, r2
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	79fa      	ldrb	r2, [r7, #7]
 8008f8a:	4906      	ldr	r1, [pc, #24]	; (8008fa4 <disk_initialize+0x48>)
 8008f8c:	440a      	add	r2, r1
 8008f8e:	7a12      	ldrb	r2, [r2, #8]
 8008f90:	4610      	mov	r0, r2
 8008f92:	4798      	blx	r3
 8008f94:	4603      	mov	r3, r0
 8008f96:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	2000166c 	.word	0x2000166c

08008fa8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008fa8:	b590      	push	{r4, r7, lr}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	607a      	str	r2, [r7, #4]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	4a0a      	ldr	r2, [pc, #40]	; (8008fe4 <disk_read+0x3c>)
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	4413      	add	r3, r2
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	689c      	ldr	r4, [r3, #8]
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	4a07      	ldr	r2, [pc, #28]	; (8008fe4 <disk_read+0x3c>)
 8008fc8:	4413      	add	r3, r2
 8008fca:	7a18      	ldrb	r0, [r3, #8]
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	68b9      	ldr	r1, [r7, #8]
 8008fd2:	47a0      	blx	r4
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd90      	pop	{r4, r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	2000166c 	.word	0x2000166c

08008fe8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008fe8:	b590      	push	{r4, r7, lr}
 8008fea:	b087      	sub	sp, #28
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008ff8:	7bfb      	ldrb	r3, [r7, #15]
 8008ffa:	4a0a      	ldr	r2, [pc, #40]	; (8009024 <disk_write+0x3c>)
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	68dc      	ldr	r4, [r3, #12]
 8009004:	7bfb      	ldrb	r3, [r7, #15]
 8009006:	4a07      	ldr	r2, [pc, #28]	; (8009024 <disk_write+0x3c>)
 8009008:	4413      	add	r3, r2
 800900a:	7a18      	ldrb	r0, [r3, #8]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	68b9      	ldr	r1, [r7, #8]
 8009012:	47a0      	blx	r4
 8009014:	4603      	mov	r3, r0
 8009016:	75fb      	strb	r3, [r7, #23]
  return res;
 8009018:	7dfb      	ldrb	r3, [r7, #23]
}
 800901a:	4618      	mov	r0, r3
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd90      	pop	{r4, r7, pc}
 8009022:	bf00      	nop
 8009024:	2000166c 	.word	0x2000166c

08009028 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	4603      	mov	r3, r0
 8009030:	603a      	str	r2, [r7, #0]
 8009032:	71fb      	strb	r3, [r7, #7]
 8009034:	460b      	mov	r3, r1
 8009036:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009038:	79fb      	ldrb	r3, [r7, #7]
 800903a:	4a09      	ldr	r2, [pc, #36]	; (8009060 <disk_ioctl+0x38>)
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	79fa      	ldrb	r2, [r7, #7]
 8009046:	4906      	ldr	r1, [pc, #24]	; (8009060 <disk_ioctl+0x38>)
 8009048:	440a      	add	r2, r1
 800904a:	7a10      	ldrb	r0, [r2, #8]
 800904c:	79b9      	ldrb	r1, [r7, #6]
 800904e:	683a      	ldr	r2, [r7, #0]
 8009050:	4798      	blx	r3
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]
  return res;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}
 8009060:	2000166c 	.word	0x2000166c

08009064 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	3301      	adds	r3, #1
 8009070:	781b      	ldrb	r3, [r3, #0]
 8009072:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009074:	89fb      	ldrh	r3, [r7, #14]
 8009076:	021b      	lsls	r3, r3, #8
 8009078:	b21a      	sxth	r2, r3
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	b21b      	sxth	r3, r3
 8009080:	4313      	orrs	r3, r2
 8009082:	b21b      	sxth	r3, r3
 8009084:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009086:	89fb      	ldrh	r3, [r7, #14]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	3303      	adds	r3, #3
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	021b      	lsls	r3, r3, #8
 80090a8:	687a      	ldr	r2, [r7, #4]
 80090aa:	3202      	adds	r2, #2
 80090ac:	7812      	ldrb	r2, [r2, #0]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	021b      	lsls	r3, r3, #8
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	3201      	adds	r2, #1
 80090ba:	7812      	ldrb	r2, [r2, #0]
 80090bc:	4313      	orrs	r3, r2
 80090be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	021b      	lsls	r3, r3, #8
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	7812      	ldrb	r2, [r2, #0]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	60fb      	str	r3, [r7, #12]
	return rv;
 80090cc:	68fb      	ldr	r3, [r7, #12]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80090da:	b480      	push	{r7}
 80090dc:	b083      	sub	sp, #12
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	1c5a      	adds	r2, r3, #1
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	887a      	ldrh	r2, [r7, #2]
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	701a      	strb	r2, [r3, #0]
 80090f2:	887b      	ldrh	r3, [r7, #2]
 80090f4:	0a1b      	lsrs	r3, r3, #8
 80090f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	607a      	str	r2, [r7, #4]
 80090fe:	887a      	ldrh	r2, [r7, #2]
 8009100:	b2d2      	uxtb	r2, r2
 8009102:	701a      	strb	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	1c5a      	adds	r2, r3, #1
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	b2d2      	uxtb	r2, r2
 8009124:	701a      	strb	r2, [r3, #0]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	0a1b      	lsrs	r3, r3, #8
 800912a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	607a      	str	r2, [r7, #4]
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	b2d2      	uxtb	r2, r2
 8009136:	701a      	strb	r2, [r3, #0]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	0a1b      	lsrs	r3, r3, #8
 800913c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	1c5a      	adds	r2, r3, #1
 8009142:	607a      	str	r2, [r7, #4]
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	b2d2      	uxtb	r2, r2
 8009148:	701a      	strb	r2, [r3, #0]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	0a1b      	lsrs	r3, r3, #8
 800914e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	1c5a      	adds	r2, r3, #1
 8009154:	607a      	str	r2, [r7, #4]
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	b2d2      	uxtb	r2, r2
 800915a:	701a      	strb	r2, [r3, #0]
}
 800915c:	bf00      	nop
 800915e:	370c      	adds	r7, #12
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr

08009168 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	60b9      	str	r1, [r7, #8]
 8009172:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d00d      	beq.n	800919e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009182:	693a      	ldr	r2, [r7, #16]
 8009184:	1c53      	adds	r3, r2, #1
 8009186:	613b      	str	r3, [r7, #16]
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	1c59      	adds	r1, r3, #1
 800918c:	6179      	str	r1, [r7, #20]
 800918e:	7812      	ldrb	r2, [r2, #0]
 8009190:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3b01      	subs	r3, #1
 8009196:	607b      	str	r3, [r7, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d1f1      	bne.n	8009182 <mem_cpy+0x1a>
	}
}
 800919e:	bf00      	nop
 80091a0:	371c      	adds	r7, #28
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80091aa:	b480      	push	{r7}
 80091ac:	b087      	sub	sp, #28
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	60f8      	str	r0, [r7, #12]
 80091b2:	60b9      	str	r1, [r7, #8]
 80091b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	1c5a      	adds	r2, r3, #1
 80091be:	617a      	str	r2, [r7, #20]
 80091c0:	68ba      	ldr	r2, [r7, #8]
 80091c2:	b2d2      	uxtb	r2, r2
 80091c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	607b      	str	r3, [r7, #4]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1f3      	bne.n	80091ba <mem_set+0x10>
}
 80091d2:	bf00      	nop
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80091de:	b480      	push	{r7}
 80091e0:	b089      	sub	sp, #36	; 0x24
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	60f8      	str	r0, [r7, #12]
 80091e6:	60b9      	str	r1, [r7, #8]
 80091e8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	61fb      	str	r3, [r7, #28]
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80091f2:	2300      	movs	r3, #0
 80091f4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	61fa      	str	r2, [r7, #28]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	4619      	mov	r1, r3
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	1c5a      	adds	r2, r3, #1
 8009204:	61ba      	str	r2, [r7, #24]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	1acb      	subs	r3, r1, r3
 800920a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	3b01      	subs	r3, #1
 8009210:	607b      	str	r3, [r7, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <mem_cmp+0x40>
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d0eb      	beq.n	80091f6 <mem_cmp+0x18>

	return r;
 800921e:	697b      	ldr	r3, [r7, #20]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3724      	adds	r7, #36	; 0x24
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009236:	e002      	b.n	800923e <chk_chr+0x12>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	3301      	adds	r3, #1
 800923c:	607b      	str	r3, [r7, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <chk_chr+0x26>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	461a      	mov	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	4293      	cmp	r3, r2
 8009250:	d1f2      	bne.n	8009238 <chk_chr+0xc>
	return *str;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	781b      	ldrb	r3, [r3, #0]
}
 8009256:	4618      	mov	r0, r3
 8009258:	370c      	adds	r7, #12
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
	...

08009264 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	60fb      	str	r3, [r7, #12]
 8009276:	e029      	b.n	80092cc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009278:	4a27      	ldr	r2, [pc, #156]	; (8009318 <chk_lock+0xb4>)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	011b      	lsls	r3, r3, #4
 800927e:	4413      	add	r3, r2
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d01d      	beq.n	80092c2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009286:	4a24      	ldr	r2, [pc, #144]	; (8009318 <chk_lock+0xb4>)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	4413      	add	r3, r2
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	429a      	cmp	r2, r3
 8009296:	d116      	bne.n	80092c6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009298:	4a1f      	ldr	r2, [pc, #124]	; (8009318 <chk_lock+0xb4>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	011b      	lsls	r3, r3, #4
 800929e:	4413      	add	r3, r2
 80092a0:	3304      	adds	r3, #4
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d10c      	bne.n	80092c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80092ac:	4a1a      	ldr	r2, [pc, #104]	; (8009318 <chk_lock+0xb4>)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	4413      	add	r3, r2
 80092b4:	3308      	adds	r3, #8
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80092bc:	429a      	cmp	r2, r3
 80092be:	d102      	bne.n	80092c6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80092c0:	e007      	b.n	80092d2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80092c2:	2301      	movs	r3, #1
 80092c4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3301      	adds	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d9d2      	bls.n	8009278 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d109      	bne.n	80092ec <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d102      	bne.n	80092e4 <chk_lock+0x80>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d101      	bne.n	80092e8 <chk_lock+0x84>
 80092e4:	2300      	movs	r3, #0
 80092e6:	e010      	b.n	800930a <chk_lock+0xa6>
 80092e8:	2312      	movs	r3, #18
 80092ea:	e00e      	b.n	800930a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d108      	bne.n	8009304 <chk_lock+0xa0>
 80092f2:	4a09      	ldr	r2, [pc, #36]	; (8009318 <chk_lock+0xb4>)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	011b      	lsls	r3, r3, #4
 80092f8:	4413      	add	r3, r2
 80092fa:	330c      	adds	r3, #12
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009302:	d101      	bne.n	8009308 <chk_lock+0xa4>
 8009304:	2310      	movs	r3, #16
 8009306:	e000      	b.n	800930a <chk_lock+0xa6>
 8009308:	2300      	movs	r3, #0
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr
 8009316:	bf00      	nop
 8009318:	2000164c 	.word	0x2000164c

0800931c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009322:	2300      	movs	r3, #0
 8009324:	607b      	str	r3, [r7, #4]
 8009326:	e002      	b.n	800932e <enq_lock+0x12>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3301      	adds	r3, #1
 800932c:	607b      	str	r3, [r7, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d806      	bhi.n	8009342 <enq_lock+0x26>
 8009334:	4a09      	ldr	r2, [pc, #36]	; (800935c <enq_lock+0x40>)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	011b      	lsls	r3, r3, #4
 800933a:	4413      	add	r3, r2
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1f2      	bne.n	8009328 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	2b02      	cmp	r3, #2
 8009346:	bf14      	ite	ne
 8009348:	2301      	movne	r3, #1
 800934a:	2300      	moveq	r3, #0
 800934c:	b2db      	uxtb	r3, r3
}
 800934e:	4618      	mov	r0, r3
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	2000164c 	.word	0x2000164c

08009360 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800936a:	2300      	movs	r3, #0
 800936c:	60fb      	str	r3, [r7, #12]
 800936e:	e01f      	b.n	80093b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009370:	4a41      	ldr	r2, [pc, #260]	; (8009478 <inc_lock+0x118>)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	4413      	add	r3, r2
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	429a      	cmp	r2, r3
 8009380:	d113      	bne.n	80093aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009382:	4a3d      	ldr	r2, [pc, #244]	; (8009478 <inc_lock+0x118>)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	011b      	lsls	r3, r3, #4
 8009388:	4413      	add	r3, r2
 800938a:	3304      	adds	r3, #4
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009392:	429a      	cmp	r2, r3
 8009394:	d109      	bne.n	80093aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009396:	4a38      	ldr	r2, [pc, #224]	; (8009478 <inc_lock+0x118>)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	4413      	add	r3, r2
 800939e:	3308      	adds	r3, #8
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d006      	beq.n	80093b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	3301      	adds	r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d9dc      	bls.n	8009370 <inc_lock+0x10>
 80093b6:	e000      	b.n	80093ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80093b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d132      	bne.n	8009426 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]
 80093c4:	e002      	b.n	80093cc <inc_lock+0x6c>
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	3301      	adds	r3, #1
 80093ca:	60fb      	str	r3, [r7, #12]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d806      	bhi.n	80093e0 <inc_lock+0x80>
 80093d2:	4a29      	ldr	r2, [pc, #164]	; (8009478 <inc_lock+0x118>)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	011b      	lsls	r3, r3, #4
 80093d8:	4413      	add	r3, r2
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1f2      	bne.n	80093c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d101      	bne.n	80093ea <inc_lock+0x8a>
 80093e6:	2300      	movs	r3, #0
 80093e8:	e040      	b.n	800946c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	4922      	ldr	r1, [pc, #136]	; (8009478 <inc_lock+0x118>)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	011b      	lsls	r3, r3, #4
 80093f4:	440b      	add	r3, r1
 80093f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	689a      	ldr	r2, [r3, #8]
 80093fc:	491e      	ldr	r1, [pc, #120]	; (8009478 <inc_lock+0x118>)
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	011b      	lsls	r3, r3, #4
 8009402:	440b      	add	r3, r1
 8009404:	3304      	adds	r3, #4
 8009406:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	695a      	ldr	r2, [r3, #20]
 800940c:	491a      	ldr	r1, [pc, #104]	; (8009478 <inc_lock+0x118>)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	011b      	lsls	r3, r3, #4
 8009412:	440b      	add	r3, r1
 8009414:	3308      	adds	r3, #8
 8009416:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009418:	4a17      	ldr	r2, [pc, #92]	; (8009478 <inc_lock+0x118>)
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	011b      	lsls	r3, r3, #4
 800941e:	4413      	add	r3, r2
 8009420:	330c      	adds	r3, #12
 8009422:	2200      	movs	r2, #0
 8009424:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d009      	beq.n	8009440 <inc_lock+0xe0>
 800942c:	4a12      	ldr	r2, [pc, #72]	; (8009478 <inc_lock+0x118>)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	011b      	lsls	r3, r3, #4
 8009432:	4413      	add	r3, r2
 8009434:	330c      	adds	r3, #12
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d001      	beq.n	8009440 <inc_lock+0xe0>
 800943c:	2300      	movs	r3, #0
 800943e:	e015      	b.n	800946c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d108      	bne.n	8009458 <inc_lock+0xf8>
 8009446:	4a0c      	ldr	r2, [pc, #48]	; (8009478 <inc_lock+0x118>)
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	4413      	add	r3, r2
 800944e:	330c      	adds	r3, #12
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	3301      	adds	r3, #1
 8009454:	b29a      	uxth	r2, r3
 8009456:	e001      	b.n	800945c <inc_lock+0xfc>
 8009458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800945c:	4906      	ldr	r1, [pc, #24]	; (8009478 <inc_lock+0x118>)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	011b      	lsls	r3, r3, #4
 8009462:	440b      	add	r3, r1
 8009464:	330c      	adds	r3, #12
 8009466:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	3301      	adds	r3, #1
}
 800946c:	4618      	mov	r0, r3
 800946e:	3714      	adds	r7, #20
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	2000164c 	.word	0x2000164c

0800947c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	3b01      	subs	r3, #1
 8009488:	607b      	str	r3, [r7, #4]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d825      	bhi.n	80094dc <dec_lock+0x60>
		n = Files[i].ctr;
 8009490:	4a17      	ldr	r2, [pc, #92]	; (80094f0 <dec_lock+0x74>)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	011b      	lsls	r3, r3, #4
 8009496:	4413      	add	r3, r2
 8009498:	330c      	adds	r3, #12
 800949a:	881b      	ldrh	r3, [r3, #0]
 800949c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800949e:	89fb      	ldrh	r3, [r7, #14]
 80094a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094a4:	d101      	bne.n	80094aa <dec_lock+0x2e>
 80094a6:	2300      	movs	r3, #0
 80094a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80094aa:	89fb      	ldrh	r3, [r7, #14]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d002      	beq.n	80094b6 <dec_lock+0x3a>
 80094b0:	89fb      	ldrh	r3, [r7, #14]
 80094b2:	3b01      	subs	r3, #1
 80094b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80094b6:	4a0e      	ldr	r2, [pc, #56]	; (80094f0 <dec_lock+0x74>)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	4413      	add	r3, r2
 80094be:	330c      	adds	r3, #12
 80094c0:	89fa      	ldrh	r2, [r7, #14]
 80094c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80094c4:	89fb      	ldrh	r3, [r7, #14]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d105      	bne.n	80094d6 <dec_lock+0x5a>
 80094ca:	4a09      	ldr	r2, [pc, #36]	; (80094f0 <dec_lock+0x74>)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	011b      	lsls	r3, r3, #4
 80094d0:	4413      	add	r3, r2
 80094d2:	2200      	movs	r2, #0
 80094d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	737b      	strb	r3, [r7, #13]
 80094da:	e001      	b.n	80094e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80094dc:	2302      	movs	r3, #2
 80094de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80094e0:	7b7b      	ldrb	r3, [r7, #13]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	2000164c 	.word	0x2000164c

080094f4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80094fc:	2300      	movs	r3, #0
 80094fe:	60fb      	str	r3, [r7, #12]
 8009500:	e010      	b.n	8009524 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009502:	4a0d      	ldr	r2, [pc, #52]	; (8009538 <clear_lock+0x44>)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	011b      	lsls	r3, r3, #4
 8009508:	4413      	add	r3, r2
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	429a      	cmp	r2, r3
 8009510:	d105      	bne.n	800951e <clear_lock+0x2a>
 8009512:	4a09      	ldr	r2, [pc, #36]	; (8009538 <clear_lock+0x44>)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	011b      	lsls	r3, r3, #4
 8009518:	4413      	add	r3, r2
 800951a:	2200      	movs	r2, #0
 800951c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	3301      	adds	r3, #1
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d9eb      	bls.n	8009502 <clear_lock+0xe>
	}
}
 800952a:	bf00      	nop
 800952c:	3714      	adds	r7, #20
 800952e:	46bd      	mov	sp, r7
 8009530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	2000164c 	.word	0x2000164c

0800953c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	78db      	ldrb	r3, [r3, #3]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d034      	beq.n	80095ba <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009554:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	7858      	ldrb	r0, [r3, #1]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009560:	2301      	movs	r3, #1
 8009562:	697a      	ldr	r2, [r7, #20]
 8009564:	f7ff fd40 	bl	8008fe8 <disk_write>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d002      	beq.n	8009574 <sync_window+0x38>
			res = FR_DISK_ERR;
 800956e:	2301      	movs	r3, #1
 8009570:	73fb      	strb	r3, [r7, #15]
 8009572:	e022      	b.n	80095ba <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	1ad2      	subs	r2, r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	69db      	ldr	r3, [r3, #28]
 8009586:	429a      	cmp	r2, r3
 8009588:	d217      	bcs.n	80095ba <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	789b      	ldrb	r3, [r3, #2]
 800958e:	613b      	str	r3, [r7, #16]
 8009590:	e010      	b.n	80095b4 <sync_window+0x78>
					wsect += fs->fsize;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	69db      	ldr	r3, [r3, #28]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	4413      	add	r3, r2
 800959a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	7858      	ldrb	r0, [r3, #1]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80095a6:	2301      	movs	r3, #1
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	f7ff fd1d 	bl	8008fe8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	613b      	str	r3, [r7, #16]
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d8eb      	bhi.n	8009592 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d6:	683a      	ldr	r2, [r7, #0]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d01b      	beq.n	8009614 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f7ff ffad 	bl	800953c <sync_window>
 80095e2:	4603      	mov	r3, r0
 80095e4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d113      	bne.n	8009614 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	7858      	ldrb	r0, [r3, #1]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80095f6:	2301      	movs	r3, #1
 80095f8:	683a      	ldr	r2, [r7, #0]
 80095fa:	f7ff fcd5 	bl	8008fa8 <disk_read>
 80095fe:	4603      	mov	r3, r0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009604:	f04f 33ff 	mov.w	r3, #4294967295
 8009608:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800960a:	2301      	movs	r3, #1
 800960c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009614:	7bfb      	ldrb	r3, [r7, #15]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3710      	adds	r7, #16
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
	...

08009620 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b084      	sub	sp, #16
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff ff87 	bl	800953c <sync_window>
 800962e:	4603      	mov	r3, r0
 8009630:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009632:	7bfb      	ldrb	r3, [r7, #15]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d159      	bne.n	80096ec <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	781b      	ldrb	r3, [r3, #0]
 800963c:	2b03      	cmp	r3, #3
 800963e:	d149      	bne.n	80096d4 <sync_fs+0xb4>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	791b      	ldrb	r3, [r3, #4]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d145      	bne.n	80096d4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	899b      	ldrh	r3, [r3, #12]
 8009652:	461a      	mov	r2, r3
 8009654:	2100      	movs	r1, #0
 8009656:	f7ff fda8 	bl	80091aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	3334      	adds	r3, #52	; 0x34
 800965e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009662:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009666:	4618      	mov	r0, r3
 8009668:	f7ff fd37 	bl	80090da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3334      	adds	r3, #52	; 0x34
 8009670:	4921      	ldr	r1, [pc, #132]	; (80096f8 <sync_fs+0xd8>)
 8009672:	4618      	mov	r0, r3
 8009674:	f7ff fd4c 	bl	8009110 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	3334      	adds	r3, #52	; 0x34
 800967c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009680:	491e      	ldr	r1, [pc, #120]	; (80096fc <sync_fs+0xdc>)
 8009682:	4618      	mov	r0, r3
 8009684:	f7ff fd44 	bl	8009110 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3334      	adds	r3, #52	; 0x34
 800968c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7ff fd3a 	bl	8009110 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	3334      	adds	r3, #52	; 0x34
 80096a0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	691b      	ldr	r3, [r3, #16]
 80096a8:	4619      	mov	r1, r3
 80096aa:	4610      	mov	r0, r2
 80096ac:	f7ff fd30 	bl	8009110 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6a1b      	ldr	r3, [r3, #32]
 80096b4:	1c5a      	adds	r2, r3, #1
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7858      	ldrb	r0, [r3, #1]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c8:	2301      	movs	r3, #1
 80096ca:	f7ff fc8d 	bl	8008fe8 <disk_write>
			fs->fsi_flag = 0;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	785b      	ldrb	r3, [r3, #1]
 80096d8:	2200      	movs	r2, #0
 80096da:	2100      	movs	r1, #0
 80096dc:	4618      	mov	r0, r3
 80096de:	f7ff fca3 	bl	8009028 <disk_ioctl>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <sync_fs+0xcc>
 80096e8:	2301      	movs	r3, #1
 80096ea:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	41615252 	.word	0x41615252
 80096fc:	61417272 	.word	0x61417272

08009700 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009700:	b480      	push	{r7}
 8009702:	b083      	sub	sp, #12
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	3b02      	subs	r3, #2
 800970e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	3b02      	subs	r3, #2
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	429a      	cmp	r2, r3
 800971a:	d301      	bcc.n	8009720 <clust2sect+0x20>
 800971c:	2300      	movs	r3, #0
 800971e:	e008      	b.n	8009732 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	895b      	ldrh	r3, [r3, #10]
 8009724:	461a      	mov	r2, r3
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	fb03 f202 	mul.w	r2, r3, r2
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009730:	4413      	add	r3, r2
}
 8009732:	4618      	mov	r0, r3
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr

0800973e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b086      	sub	sp, #24
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
 8009746:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d904      	bls.n	800975e <get_fat+0x20>
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	429a      	cmp	r2, r3
 800975c:	d302      	bcc.n	8009764 <get_fat+0x26>
		val = 1;	/* Internal error */
 800975e:	2301      	movs	r3, #1
 8009760:	617b      	str	r3, [r7, #20]
 8009762:	e0b7      	b.n	80098d4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009764:	f04f 33ff 	mov.w	r3, #4294967295
 8009768:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	2b02      	cmp	r3, #2
 8009770:	d05a      	beq.n	8009828 <get_fat+0xea>
 8009772:	2b03      	cmp	r3, #3
 8009774:	d07d      	beq.n	8009872 <get_fat+0x134>
 8009776:	2b01      	cmp	r3, #1
 8009778:	f040 80a2 	bne.w	80098c0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	60fb      	str	r3, [r7, #12]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	085b      	lsrs	r3, r3, #1
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	899b      	ldrh	r3, [r3, #12]
 8009792:	4619      	mov	r1, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	fbb3 f3f1 	udiv	r3, r3, r1
 800979a:	4413      	add	r3, r2
 800979c:	4619      	mov	r1, r3
 800979e:	6938      	ldr	r0, [r7, #16]
 80097a0:	f7ff ff10 	bl	80095c4 <move_window>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	f040 808d 	bne.w	80098c6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	1c5a      	adds	r2, r3, #1
 80097b0:	60fa      	str	r2, [r7, #12]
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	8992      	ldrh	r2, [r2, #12]
 80097b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80097ba:	fb02 f201 	mul.w	r2, r2, r1
 80097be:	1a9b      	subs	r3, r3, r2
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	4413      	add	r3, r2
 80097c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80097c8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80097ce:	693b      	ldr	r3, [r7, #16]
 80097d0:	899b      	ldrh	r3, [r3, #12]
 80097d2:	4619      	mov	r1, r3
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80097da:	4413      	add	r3, r2
 80097dc:	4619      	mov	r1, r3
 80097de:	6938      	ldr	r0, [r7, #16]
 80097e0:	f7ff fef0 	bl	80095c4 <move_window>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d16f      	bne.n	80098ca <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	899b      	ldrh	r3, [r3, #12]
 80097ee:	461a      	mov	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80097f6:	fb02 f201 	mul.w	r2, r2, r1
 80097fa:	1a9b      	subs	r3, r3, r2
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	4413      	add	r3, r2
 8009800:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009804:	021b      	lsls	r3, r3, #8
 8009806:	461a      	mov	r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	4313      	orrs	r3, r2
 800980c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d002      	beq.n	800981e <get_fat+0xe0>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	091b      	lsrs	r3, r3, #4
 800981c:	e002      	b.n	8009824 <get_fat+0xe6>
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009824:	617b      	str	r3, [r7, #20]
			break;
 8009826:	e055      	b.n	80098d4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	899b      	ldrh	r3, [r3, #12]
 8009830:	085b      	lsrs	r3, r3, #1
 8009832:	b29b      	uxth	r3, r3
 8009834:	4619      	mov	r1, r3
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	fbb3 f3f1 	udiv	r3, r3, r1
 800983c:	4413      	add	r3, r2
 800983e:	4619      	mov	r1, r3
 8009840:	6938      	ldr	r0, [r7, #16]
 8009842:	f7ff febf 	bl	80095c4 <move_window>
 8009846:	4603      	mov	r3, r0
 8009848:	2b00      	cmp	r3, #0
 800984a:	d140      	bne.n	80098ce <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	693a      	ldr	r2, [r7, #16]
 8009858:	8992      	ldrh	r2, [r2, #12]
 800985a:	fbb3 f0f2 	udiv	r0, r3, r2
 800985e:	fb02 f200 	mul.w	r2, r2, r0
 8009862:	1a9b      	subs	r3, r3, r2
 8009864:	440b      	add	r3, r1
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff fbfc 	bl	8009064 <ld_word>
 800986c:	4603      	mov	r3, r0
 800986e:	617b      	str	r3, [r7, #20]
			break;
 8009870:	e030      	b.n	80098d4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	899b      	ldrh	r3, [r3, #12]
 800987a:	089b      	lsrs	r3, r3, #2
 800987c:	b29b      	uxth	r3, r3
 800987e:	4619      	mov	r1, r3
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	fbb3 f3f1 	udiv	r3, r3, r1
 8009886:	4413      	add	r3, r2
 8009888:	4619      	mov	r1, r3
 800988a:	6938      	ldr	r0, [r7, #16]
 800988c:	f7ff fe9a 	bl	80095c4 <move_window>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d11d      	bne.n	80098d2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	693a      	ldr	r2, [r7, #16]
 80098a2:	8992      	ldrh	r2, [r2, #12]
 80098a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80098a8:	fb02 f200 	mul.w	r2, r2, r0
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	440b      	add	r3, r1
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7ff fbef 	bl	8009094 <ld_dword>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80098bc:	617b      	str	r3, [r7, #20]
			break;
 80098be:	e009      	b.n	80098d4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80098c0:	2301      	movs	r3, #1
 80098c2:	617b      	str	r3, [r7, #20]
 80098c4:	e006      	b.n	80098d4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098c6:	bf00      	nop
 80098c8:	e004      	b.n	80098d4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80098ca:	bf00      	nop
 80098cc:	e002      	b.n	80098d4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80098ce:	bf00      	nop
 80098d0:	e000      	b.n	80098d4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80098d2:	bf00      	nop
		}
	}

	return val;
 80098d4:	697b      	ldr	r3, [r7, #20]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80098de:	b590      	push	{r4, r7, lr}
 80098e0:	b089      	sub	sp, #36	; 0x24
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	60f8      	str	r0, [r7, #12]
 80098e6:	60b9      	str	r1, [r7, #8]
 80098e8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80098ea:	2302      	movs	r3, #2
 80098ec:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	f240 8106 	bls.w	8009b02 <put_fat+0x224>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	429a      	cmp	r2, r3
 80098fe:	f080 8100 	bcs.w	8009b02 <put_fat+0x224>
		switch (fs->fs_type) {
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b02      	cmp	r3, #2
 8009908:	f000 8088 	beq.w	8009a1c <put_fat+0x13e>
 800990c:	2b03      	cmp	r3, #3
 800990e:	f000 80b0 	beq.w	8009a72 <put_fat+0x194>
 8009912:	2b01      	cmp	r3, #1
 8009914:	f040 80f5 	bne.w	8009b02 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	61bb      	str	r3, [r7, #24]
 800991c:	69bb      	ldr	r3, [r7, #24]
 800991e:	085b      	lsrs	r3, r3, #1
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	4413      	add	r3, r2
 8009924:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	899b      	ldrh	r3, [r3, #12]
 800992e:	4619      	mov	r1, r3
 8009930:	69bb      	ldr	r3, [r7, #24]
 8009932:	fbb3 f3f1 	udiv	r3, r3, r1
 8009936:	4413      	add	r3, r2
 8009938:	4619      	mov	r1, r3
 800993a:	68f8      	ldr	r0, [r7, #12]
 800993c:	f7ff fe42 	bl	80095c4 <move_window>
 8009940:	4603      	mov	r3, r0
 8009942:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009944:	7ffb      	ldrb	r3, [r7, #31]
 8009946:	2b00      	cmp	r3, #0
 8009948:	f040 80d4 	bne.w	8009af4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	1c5a      	adds	r2, r3, #1
 8009956:	61ba      	str	r2, [r7, #24]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	8992      	ldrh	r2, [r2, #12]
 800995c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009960:	fb02 f200 	mul.w	r2, r2, r0
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	440b      	add	r3, r1
 8009968:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d00d      	beq.n	8009990 <put_fat+0xb2>
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	b25b      	sxtb	r3, r3
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	b25a      	sxtb	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	011b      	lsls	r3, r3, #4
 8009986:	b25b      	sxtb	r3, r3
 8009988:	4313      	orrs	r3, r2
 800998a:	b25b      	sxtb	r3, r3
 800998c:	b2db      	uxtb	r3, r3
 800998e:	e001      	b.n	8009994 <put_fat+0xb6>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	b2db      	uxtb	r3, r3
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2201      	movs	r2, #1
 800999c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	899b      	ldrh	r3, [r3, #12]
 80099a6:	4619      	mov	r1, r3
 80099a8:	69bb      	ldr	r3, [r7, #24]
 80099aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80099ae:	4413      	add	r3, r2
 80099b0:	4619      	mov	r1, r3
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f7ff fe06 	bl	80095c4 <move_window>
 80099b8:	4603      	mov	r3, r0
 80099ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80099bc:	7ffb      	ldrb	r3, [r7, #31]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f040 809a 	bne.w	8009af8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	899b      	ldrh	r3, [r3, #12]
 80099ce:	461a      	mov	r2, r3
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80099d6:	fb02 f200 	mul.w	r2, r2, r0
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	440b      	add	r3, r1
 80099de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f003 0301 	and.w	r3, r3, #1
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d003      	beq.n	80099f2 <put_fat+0x114>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	091b      	lsrs	r3, r3, #4
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	e00e      	b.n	8009a10 <put_fat+0x132>
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	b25b      	sxtb	r3, r3
 80099f8:	f023 030f 	bic.w	r3, r3, #15
 80099fc:	b25a      	sxtb	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	0a1b      	lsrs	r3, r3, #8
 8009a02:	b25b      	sxtb	r3, r3
 8009a04:	f003 030f 	and.w	r3, r3, #15
 8009a08:	b25b      	sxtb	r3, r3
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	b25b      	sxtb	r3, r3
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2201      	movs	r2, #1
 8009a18:	70da      	strb	r2, [r3, #3]
			break;
 8009a1a:	e072      	b.n	8009b02 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	899b      	ldrh	r3, [r3, #12]
 8009a24:	085b      	lsrs	r3, r3, #1
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	4619      	mov	r1, r3
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a30:	4413      	add	r3, r2
 8009a32:	4619      	mov	r1, r3
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f7ff fdc5 	bl	80095c4 <move_window>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a3e:	7ffb      	ldrb	r3, [r7, #31]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d15b      	bne.n	8009afc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	8992      	ldrh	r2, [r2, #12]
 8009a52:	fbb3 f0f2 	udiv	r0, r3, r2
 8009a56:	fb02 f200 	mul.w	r2, r2, r0
 8009a5a:	1a9b      	subs	r3, r3, r2
 8009a5c:	440b      	add	r3, r1
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	b292      	uxth	r2, r2
 8009a62:	4611      	mov	r1, r2
 8009a64:	4618      	mov	r0, r3
 8009a66:	f7ff fb38 	bl	80090da <st_word>
			fs->wflag = 1;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2201      	movs	r2, #1
 8009a6e:	70da      	strb	r2, [r3, #3]
			break;
 8009a70:	e047      	b.n	8009b02 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	899b      	ldrh	r3, [r3, #12]
 8009a7a:	089b      	lsrs	r3, r3, #2
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	4619      	mov	r1, r3
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a86:	4413      	add	r3, r2
 8009a88:	4619      	mov	r1, r3
 8009a8a:	68f8      	ldr	r0, [r7, #12]
 8009a8c:	f7ff fd9a 	bl	80095c4 <move_window>
 8009a90:	4603      	mov	r3, r0
 8009a92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a94:	7ffb      	ldrb	r3, [r7, #31]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d132      	bne.n	8009b00 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	8992      	ldrh	r2, [r2, #12]
 8009aae:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ab2:	fb02 f200 	mul.w	r2, r2, r0
 8009ab6:	1a9b      	subs	r3, r3, r2
 8009ab8:	440b      	add	r3, r1
 8009aba:	4618      	mov	r0, r3
 8009abc:	f7ff faea 	bl	8009094 <ld_dword>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009ac6:	4323      	orrs	r3, r4
 8009ac8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	8992      	ldrh	r2, [r2, #12]
 8009ad8:	fbb3 f0f2 	udiv	r0, r3, r2
 8009adc:	fb02 f200 	mul.w	r2, r2, r0
 8009ae0:	1a9b      	subs	r3, r3, r2
 8009ae2:	440b      	add	r3, r1
 8009ae4:	6879      	ldr	r1, [r7, #4]
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fb12 	bl	8009110 <st_dword>
			fs->wflag = 1;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2201      	movs	r2, #1
 8009af0:	70da      	strb	r2, [r3, #3]
			break;
 8009af2:	e006      	b.n	8009b02 <put_fat+0x224>
			if (res != FR_OK) break;
 8009af4:	bf00      	nop
 8009af6:	e004      	b.n	8009b02 <put_fat+0x224>
			if (res != FR_OK) break;
 8009af8:	bf00      	nop
 8009afa:	e002      	b.n	8009b02 <put_fat+0x224>
			if (res != FR_OK) break;
 8009afc:	bf00      	nop
 8009afe:	e000      	b.n	8009b02 <put_fat+0x224>
			if (res != FR_OK) break;
 8009b00:	bf00      	nop
		}
	}
	return res;
 8009b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3724      	adds	r7, #36	; 0x24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd90      	pop	{r4, r7, pc}

08009b0c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b088      	sub	sp, #32
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009b18:	2300      	movs	r3, #0
 8009b1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d904      	bls.n	8009b32 <remove_chain+0x26>
 8009b28:	69bb      	ldr	r3, [r7, #24]
 8009b2a:	699b      	ldr	r3, [r3, #24]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d301      	bcc.n	8009b36 <remove_chain+0x2a>
 8009b32:	2302      	movs	r3, #2
 8009b34:	e04b      	b.n	8009bce <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00c      	beq.n	8009b56 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009b40:	6879      	ldr	r1, [r7, #4]
 8009b42:	69b8      	ldr	r0, [r7, #24]
 8009b44:	f7ff fecb 	bl	80098de <put_fat>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009b4c:	7ffb      	ldrb	r3, [r7, #31]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d001      	beq.n	8009b56 <remove_chain+0x4a>
 8009b52:	7ffb      	ldrb	r3, [r7, #31]
 8009b54:	e03b      	b.n	8009bce <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009b56:	68b9      	ldr	r1, [r7, #8]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff fdf0 	bl	800973e <get_fat>
 8009b5e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009b60:	697b      	ldr	r3, [r7, #20]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d031      	beq.n	8009bca <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d101      	bne.n	8009b70 <remove_chain+0x64>
 8009b6c:	2302      	movs	r3, #2
 8009b6e:	e02e      	b.n	8009bce <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b76:	d101      	bne.n	8009b7c <remove_chain+0x70>
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e028      	b.n	8009bce <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	69b8      	ldr	r0, [r7, #24]
 8009b82:	f7ff feac 	bl	80098de <put_fat>
 8009b86:	4603      	mov	r3, r0
 8009b88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009b8a:	7ffb      	ldrb	r3, [r7, #31]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <remove_chain+0x88>
 8009b90:	7ffb      	ldrb	r3, [r7, #31]
 8009b92:	e01c      	b.n	8009bce <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	695a      	ldr	r2, [r3, #20]
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	3b02      	subs	r3, #2
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d20b      	bcs.n	8009bba <remove_chain+0xae>
			fs->free_clst++;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	1c5a      	adds	r2, r3, #1
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009bac:	69bb      	ldr	r3, [r7, #24]
 8009bae:	791b      	ldrb	r3, [r3, #4]
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	b2da      	uxtb	r2, r3
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	699b      	ldr	r3, [r3, #24]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d3c6      	bcc.n	8009b56 <remove_chain+0x4a>
 8009bc8:	e000      	b.n	8009bcc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009bca:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3720      	adds	r7, #32
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b088      	sub	sp, #32
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d10d      	bne.n	8009c08 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d004      	beq.n	8009c02 <create_chain+0x2c>
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	69ba      	ldr	r2, [r7, #24]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d31b      	bcc.n	8009c3a <create_chain+0x64>
 8009c02:	2301      	movs	r3, #1
 8009c04:	61bb      	str	r3, [r7, #24]
 8009c06:	e018      	b.n	8009c3a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009c08:	6839      	ldr	r1, [r7, #0]
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff fd97 	bl	800973e <get_fat>
 8009c10:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d801      	bhi.n	8009c1c <create_chain+0x46>
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e070      	b.n	8009cfe <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c22:	d101      	bne.n	8009c28 <create_chain+0x52>
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	e06a      	b.n	8009cfe <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	68fa      	ldr	r2, [r7, #12]
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d201      	bcs.n	8009c36 <create_chain+0x60>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	e063      	b.n	8009cfe <create_chain+0x128>
		scl = clst;
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009c3e:	69fb      	ldr	r3, [r7, #28]
 8009c40:	3301      	adds	r3, #1
 8009c42:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	69fa      	ldr	r2, [r7, #28]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d307      	bcc.n	8009c5e <create_chain+0x88>
				ncl = 2;
 8009c4e:	2302      	movs	r3, #2
 8009c50:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009c52:	69fa      	ldr	r2, [r7, #28]
 8009c54:	69bb      	ldr	r3, [r7, #24]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d901      	bls.n	8009c5e <create_chain+0x88>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	e04f      	b.n	8009cfe <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009c5e:	69f9      	ldr	r1, [r7, #28]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f7ff fd6c 	bl	800973e <get_fat>
 8009c66:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00e      	beq.n	8009c8c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d003      	beq.n	8009c7c <create_chain+0xa6>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7a:	d101      	bne.n	8009c80 <create_chain+0xaa>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	e03e      	b.n	8009cfe <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d1da      	bne.n	8009c3e <create_chain+0x68>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	e038      	b.n	8009cfe <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009c8c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8009c92:	69f9      	ldr	r1, [r7, #28]
 8009c94:	6938      	ldr	r0, [r7, #16]
 8009c96:	f7ff fe22 	bl	80098de <put_fat>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d109      	bne.n	8009cb8 <create_chain+0xe2>
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d006      	beq.n	8009cb8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009caa:	69fa      	ldr	r2, [r7, #28]
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6938      	ldr	r0, [r7, #16]
 8009cb0:	f7ff fe15 	bl	80098de <put_fat>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d116      	bne.n	8009cec <create_chain+0x116>
		fs->last_clst = ncl;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	69fa      	ldr	r2, [r7, #28]
 8009cc2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	695a      	ldr	r2, [r3, #20]
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	3b02      	subs	r3, #2
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d804      	bhi.n	8009cdc <create_chain+0x106>
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	695b      	ldr	r3, [r3, #20]
 8009cd6:	1e5a      	subs	r2, r3, #1
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	791b      	ldrb	r3, [r3, #4]
 8009ce0:	f043 0301 	orr.w	r3, r3, #1
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	711a      	strb	r2, [r3, #4]
 8009cea:	e007      	b.n	8009cfc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d102      	bne.n	8009cf8 <create_chain+0x122>
 8009cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8009cf6:	e000      	b.n	8009cfa <create_chain+0x124>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009cfc:	69fb      	ldr	r3, [r7, #28]
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3720      	adds	r7, #32
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b087      	sub	sp, #28
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	899b      	ldrh	r3, [r3, #12]
 8009d22:	461a      	mov	r2, r3
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	8952      	ldrh	r2, [r2, #10]
 8009d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d32:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	1d1a      	adds	r2, r3, #4
 8009d38:	613a      	str	r2, [r7, #16]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d101      	bne.n	8009d48 <clmt_clust+0x42>
 8009d44:	2300      	movs	r3, #0
 8009d46:	e010      	b.n	8009d6a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8009d48:	697a      	ldr	r2, [r7, #20]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d307      	bcc.n	8009d60 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009d5e:	e7e9      	b.n	8009d34 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009d60:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	4413      	add	r3, r2
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	371c      	adds	r7, #28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b086      	sub	sp, #24
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d8c:	d204      	bcs.n	8009d98 <dir_sdi+0x22>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	f003 031f 	and.w	r3, r3, #31
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <dir_sdi+0x26>
		return FR_INT_ERR;
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e071      	b.n	8009e80 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	683a      	ldr	r2, [r7, #0]
 8009da0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d106      	bne.n	8009dbc <dir_sdi+0x46>
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	781b      	ldrb	r3, [r3, #0]
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d902      	bls.n	8009dbc <dir_sdi+0x46>
		clst = fs->dirbase;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dba:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10c      	bne.n	8009ddc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	095b      	lsrs	r3, r3, #5
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	8912      	ldrh	r2, [r2, #8]
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d301      	bcc.n	8009dd2 <dir_sdi+0x5c>
 8009dce:	2302      	movs	r3, #2
 8009dd0:	e056      	b.n	8009e80 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	61da      	str	r2, [r3, #28]
 8009dda:	e02d      	b.n	8009e38 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	895b      	ldrh	r3, [r3, #10]
 8009de0:	461a      	mov	r2, r3
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	899b      	ldrh	r3, [r3, #12]
 8009de6:	fb03 f302 	mul.w	r3, r3, r2
 8009dea:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009dec:	e019      	b.n	8009e22 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6979      	ldr	r1, [r7, #20]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff fca3 	bl	800973e <get_fat>
 8009df8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e00:	d101      	bne.n	8009e06 <dir_sdi+0x90>
 8009e02:	2301      	movs	r3, #1
 8009e04:	e03c      	b.n	8009e80 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	d904      	bls.n	8009e16 <dir_sdi+0xa0>
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	699b      	ldr	r3, [r3, #24]
 8009e10:	697a      	ldr	r2, [r7, #20]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d301      	bcc.n	8009e1a <dir_sdi+0xa4>
 8009e16:	2302      	movs	r3, #2
 8009e18:	e032      	b.n	8009e80 <dir_sdi+0x10a>
			ofs -= csz;
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009e22:	683a      	ldr	r2, [r7, #0]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	429a      	cmp	r2, r3
 8009e28:	d2e1      	bcs.n	8009dee <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8009e2a:	6979      	ldr	r1, [r7, #20]
 8009e2c:	6938      	ldr	r0, [r7, #16]
 8009e2e:	f7ff fc67 	bl	8009700 <clust2sect>
 8009e32:	4602      	mov	r2, r0
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	69db      	ldr	r3, [r3, #28]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d101      	bne.n	8009e4a <dir_sdi+0xd4>
 8009e46:	2302      	movs	r3, #2
 8009e48:	e01a      	b.n	8009e80 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	69da      	ldr	r2, [r3, #28]
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	899b      	ldrh	r3, [r3, #12]
 8009e52:	4619      	mov	r1, r3
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8009e5a:	441a      	add	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	899b      	ldrh	r3, [r3, #12]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009e72:	fb02 f200 	mul.w	r2, r2, r0
 8009e76:	1a9b      	subs	r3, r3, r2
 8009e78:	18ca      	adds	r2, r1, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	3320      	adds	r3, #32
 8009e9e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	69db      	ldr	r3, [r3, #28]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <dir_next+0x28>
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009eae:	d301      	bcc.n	8009eb4 <dir_next+0x2c>
 8009eb0:	2304      	movs	r3, #4
 8009eb2:	e0bb      	b.n	800a02c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	899b      	ldrh	r3, [r3, #12]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	fbb3 f1f2 	udiv	r1, r3, r2
 8009ec0:	fb02 f201 	mul.w	r2, r2, r1
 8009ec4:	1a9b      	subs	r3, r3, r2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	f040 809d 	bne.w	800a006 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	699b      	ldr	r3, [r3, #24]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10b      	bne.n	8009ef6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	095b      	lsrs	r3, r3, #5
 8009ee2:	68fa      	ldr	r2, [r7, #12]
 8009ee4:	8912      	ldrh	r2, [r2, #8]
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	f0c0 808d 	bcc.w	800a006 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	61da      	str	r2, [r3, #28]
 8009ef2:	2304      	movs	r3, #4
 8009ef4:	e09a      	b.n	800a02c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	899b      	ldrh	r3, [r3, #12]
 8009efa:	461a      	mov	r2, r3
 8009efc:	68bb      	ldr	r3, [r7, #8]
 8009efe:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	8952      	ldrh	r2, [r2, #10]
 8009f06:	3a01      	subs	r2, #1
 8009f08:	4013      	ands	r3, r2
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d17b      	bne.n	800a006 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	699b      	ldr	r3, [r3, #24]
 8009f14:	4619      	mov	r1, r3
 8009f16:	4610      	mov	r0, r2
 8009f18:	f7ff fc11 	bl	800973e <get_fat>
 8009f1c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d801      	bhi.n	8009f28 <dir_next+0xa0>
 8009f24:	2302      	movs	r3, #2
 8009f26:	e081      	b.n	800a02c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009f28:	697b      	ldr	r3, [r7, #20]
 8009f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f2e:	d101      	bne.n	8009f34 <dir_next+0xac>
 8009f30:	2301      	movs	r3, #1
 8009f32:	e07b      	b.n	800a02c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	429a      	cmp	r2, r3
 8009f3c:	d359      	bcc.n	8009ff2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d104      	bne.n	8009f4e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	61da      	str	r2, [r3, #28]
 8009f4a:	2304      	movs	r3, #4
 8009f4c:	e06e      	b.n	800a02c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	4619      	mov	r1, r3
 8009f56:	4610      	mov	r0, r2
 8009f58:	f7ff fe3d 	bl	8009bd6 <create_chain>
 8009f5c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009f5e:	697b      	ldr	r3, [r7, #20]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d101      	bne.n	8009f68 <dir_next+0xe0>
 8009f64:	2307      	movs	r3, #7
 8009f66:	e061      	b.n	800a02c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d101      	bne.n	8009f72 <dir_next+0xea>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e05c      	b.n	800a02c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f78:	d101      	bne.n	8009f7e <dir_next+0xf6>
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e056      	b.n	800a02c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7ff fadc 	bl	800953c <sync_window>
 8009f84:	4603      	mov	r3, r0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <dir_next+0x106>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e04e      	b.n	800a02c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	899b      	ldrh	r3, [r3, #12]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	f7ff f905 	bl	80091aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	613b      	str	r3, [r7, #16]
 8009fa4:	6979      	ldr	r1, [r7, #20]
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f7ff fbaa 	bl	8009700 <clust2sect>
 8009fac:	4602      	mov	r2, r0
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8009fb2:	e012      	b.n	8009fda <dir_next+0x152>
						fs->wflag = 1;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff fabe 	bl	800953c <sync_window>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d001      	beq.n	8009fca <dir_next+0x142>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e030      	b.n	800a02c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	613b      	str	r3, [r7, #16]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	1c5a      	adds	r2, r3, #1
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	895b      	ldrh	r3, [r3, #10]
 8009fde:	461a      	mov	r2, r3
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d3e6      	bcc.n	8009fb4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	1ad2      	subs	r2, r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009ff8:	6979      	ldr	r1, [r7, #20]
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f7ff fb80 	bl	8009700 <clust2sect>
 800a000:	4602      	mov	r2, r0
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	899b      	ldrh	r3, [r3, #12]
 800a016:	461a      	mov	r2, r3
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	fbb3 f0f2 	udiv	r0, r3, r2
 800a01e:	fb02 f200 	mul.w	r2, r2, r0
 800a022:	1a9b      	subs	r3, r3, r2
 800a024:	18ca      	adds	r2, r1, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a044:	2100      	movs	r1, #0
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff fe95 	bl	8009d76 <dir_sdi>
 800a04c:	4603      	mov	r3, r0
 800a04e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a050:	7dfb      	ldrb	r3, [r7, #23]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d12b      	bne.n	800a0ae <dir_alloc+0x7a>
		n = 0;
 800a056:	2300      	movs	r3, #0
 800a058:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	69db      	ldr	r3, [r3, #28]
 800a05e:	4619      	mov	r1, r3
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7ff faaf 	bl	80095c4 <move_window>
 800a066:	4603      	mov	r3, r0
 800a068:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d11d      	bne.n	800a0ac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a1b      	ldr	r3, [r3, #32]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	2be5      	cmp	r3, #229	; 0xe5
 800a078:	d004      	beq.n	800a084 <dir_alloc+0x50>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a1b      	ldr	r3, [r3, #32]
 800a07e:	781b      	ldrb	r3, [r3, #0]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d107      	bne.n	800a094 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	3301      	adds	r3, #1
 800a088:	613b      	str	r3, [r7, #16]
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d102      	bne.n	800a098 <dir_alloc+0x64>
 800a092:	e00c      	b.n	800a0ae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a094:	2300      	movs	r3, #0
 800a096:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a098:	2101      	movs	r1, #1
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7ff fef4 	bl	8009e88 <dir_next>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a0a4:	7dfb      	ldrb	r3, [r7, #23]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d0d7      	beq.n	800a05a <dir_alloc+0x26>
 800a0aa:	e000      	b.n	800a0ae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a0ac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	2b04      	cmp	r3, #4
 800a0b2:	d101      	bne.n	800a0b8 <dir_alloc+0x84>
 800a0b4:	2307      	movs	r3, #7
 800a0b6:	75fb      	strb	r3, [r7, #23]
	return res;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3718      	adds	r7, #24
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b084      	sub	sp, #16
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
 800a0ca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	331a      	adds	r3, #26
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f7fe ffc7 	bl	8009064 <ld_word>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d109      	bne.n	800a0f6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	3314      	adds	r3, #20
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe ffbc 	bl	8009064 <ld_word>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	041b      	lsls	r3, r3, #16
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}

0800a100 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	331a      	adds	r3, #26
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	b292      	uxth	r2, r2
 800a114:	4611      	mov	r1, r2
 800a116:	4618      	mov	r0, r3
 800a118:	f7fe ffdf 	bl	80090da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	2b03      	cmp	r3, #3
 800a122:	d109      	bne.n	800a138 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	f103 0214 	add.w	r2, r3, #20
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	0c1b      	lsrs	r3, r3, #16
 800a12e:	b29b      	uxth	r3, r3
 800a130:	4619      	mov	r1, r3
 800a132:	4610      	mov	r0, r2
 800a134:	f7fe ffd1 	bl	80090da <st_word>
	}
}
 800a138:	bf00      	nop
 800a13a:	3710      	adds	r7, #16
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b086      	sub	sp, #24
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a14e:	2100      	movs	r1, #0
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f7ff fe10 	bl	8009d76 <dir_sdi>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a15a:	7dfb      	ldrb	r3, [r7, #23]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d001      	beq.n	800a164 <dir_find+0x24>
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	e03e      	b.n	800a1e2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	4619      	mov	r1, r3
 800a16a:	6938      	ldr	r0, [r7, #16]
 800a16c:	f7ff fa2a 	bl	80095c4 <move_window>
 800a170:	4603      	mov	r3, r0
 800a172:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a174:	7dfb      	ldrb	r3, [r7, #23]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d12f      	bne.n	800a1da <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	6a1b      	ldr	r3, [r3, #32]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a182:	7bfb      	ldrb	r3, [r7, #15]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d102      	bne.n	800a18e <dir_find+0x4e>
 800a188:	2304      	movs	r3, #4
 800a18a:	75fb      	strb	r3, [r7, #23]
 800a18c:	e028      	b.n	800a1e0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	330b      	adds	r3, #11
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6a1b      	ldr	r3, [r3, #32]
 800a1a4:	330b      	adds	r3, #11
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	f003 0308 	and.w	r3, r3, #8
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <dir_find+0x86>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a18      	ldr	r0, [r3, #32]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3324      	adds	r3, #36	; 0x24
 800a1b8:	220b      	movs	r2, #11
 800a1ba:	4619      	mov	r1, r3
 800a1bc:	f7ff f80f 	bl	80091de <mem_cmp>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00b      	beq.n	800a1de <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff fe5d 	bl	8009e88 <dir_next>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a1d2:	7dfb      	ldrb	r3, [r7, #23]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0c5      	beq.n	800a164 <dir_find+0x24>
 800a1d8:	e002      	b.n	800a1e0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a1da:	bf00      	nop
 800a1dc:	e000      	b.n	800a1e0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a1de:	bf00      	nop

	return res;
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b084      	sub	sp, #16
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a1f8:	2101      	movs	r1, #1
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7ff ff1a 	bl	800a034 <dir_alloc>
 800a200:	4603      	mov	r3, r0
 800a202:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a204:	7bfb      	ldrb	r3, [r7, #15]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d11c      	bne.n	800a244 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	4619      	mov	r1, r3
 800a210:	68b8      	ldr	r0, [r7, #8]
 800a212:	f7ff f9d7 	bl	80095c4 <move_window>
 800a216:	4603      	mov	r3, r0
 800a218:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d111      	bne.n	800a244 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	2220      	movs	r2, #32
 800a226:	2100      	movs	r1, #0
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fe ffbe 	bl	80091aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6a18      	ldr	r0, [r3, #32]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3324      	adds	r3, #36	; 0x24
 800a236:	220b      	movs	r2, #11
 800a238:	4619      	mov	r1, r3
 800a23a:	f7fe ff95 	bl	8009168 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	2201      	movs	r2, #1
 800a242:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a244:	7bfb      	ldrb	r3, [r7, #15]
}
 800a246:	4618      	mov	r0, r3
 800a248:	3710      	adds	r7, #16
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
	...

0800a250 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3324      	adds	r3, #36	; 0x24
 800a264:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a266:	220b      	movs	r2, #11
 800a268:	2120      	movs	r1, #32
 800a26a:	68b8      	ldr	r0, [r7, #8]
 800a26c:	f7fe ff9d 	bl	80091aa <mem_set>
	si = i = 0; ni = 8;
 800a270:	2300      	movs	r3, #0
 800a272:	613b      	str	r3, [r7, #16]
 800a274:	693b      	ldr	r3, [r7, #16]
 800a276:	617b      	str	r3, [r7, #20]
 800a278:	2308      	movs	r3, #8
 800a27a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	1c5a      	adds	r2, r3, #1
 800a280:	617a      	str	r2, [r7, #20]
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	4413      	add	r3, r2
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a28a:	7ffb      	ldrb	r3, [r7, #31]
 800a28c:	2b20      	cmp	r3, #32
 800a28e:	d94e      	bls.n	800a32e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a290:	7ffb      	ldrb	r3, [r7, #31]
 800a292:	2b2f      	cmp	r3, #47	; 0x2f
 800a294:	d006      	beq.n	800a2a4 <create_name+0x54>
 800a296:	7ffb      	ldrb	r3, [r7, #31]
 800a298:	2b5c      	cmp	r3, #92	; 0x5c
 800a29a:	d110      	bne.n	800a2be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a29c:	e002      	b.n	800a2a4 <create_name+0x54>
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	617b      	str	r3, [r7, #20]
 800a2a4:	68fa      	ldr	r2, [r7, #12]
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	2b2f      	cmp	r3, #47	; 0x2f
 800a2ae:	d0f6      	beq.n	800a29e <create_name+0x4e>
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	2b5c      	cmp	r3, #92	; 0x5c
 800a2ba:	d0f0      	beq.n	800a29e <create_name+0x4e>
			break;
 800a2bc:	e038      	b.n	800a330 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a2be:	7ffb      	ldrb	r3, [r7, #31]
 800a2c0:	2b2e      	cmp	r3, #46	; 0x2e
 800a2c2:	d003      	beq.n	800a2cc <create_name+0x7c>
 800a2c4:	693a      	ldr	r2, [r7, #16]
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d30c      	bcc.n	800a2e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	2b0b      	cmp	r3, #11
 800a2d0:	d002      	beq.n	800a2d8 <create_name+0x88>
 800a2d2:	7ffb      	ldrb	r3, [r7, #31]
 800a2d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2d6:	d001      	beq.n	800a2dc <create_name+0x8c>
 800a2d8:	2306      	movs	r3, #6
 800a2da:	e044      	b.n	800a366 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a2dc:	2308      	movs	r3, #8
 800a2de:	613b      	str	r3, [r7, #16]
 800a2e0:	230b      	movs	r3, #11
 800a2e2:	61bb      	str	r3, [r7, #24]
			continue;
 800a2e4:	e022      	b.n	800a32c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a2e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	da04      	bge.n	800a2f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a2ee:	7ffb      	ldrb	r3, [r7, #31]
 800a2f0:	3b80      	subs	r3, #128	; 0x80
 800a2f2:	4a1f      	ldr	r2, [pc, #124]	; (800a370 <create_name+0x120>)
 800a2f4:	5cd3      	ldrb	r3, [r2, r3]
 800a2f6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a2f8:	7ffb      	ldrb	r3, [r7, #31]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	481d      	ldr	r0, [pc, #116]	; (800a374 <create_name+0x124>)
 800a2fe:	f7fe ff95 	bl	800922c <chk_chr>
 800a302:	4603      	mov	r3, r0
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <create_name+0xbc>
 800a308:	2306      	movs	r3, #6
 800a30a:	e02c      	b.n	800a366 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a30c:	7ffb      	ldrb	r3, [r7, #31]
 800a30e:	2b60      	cmp	r3, #96	; 0x60
 800a310:	d905      	bls.n	800a31e <create_name+0xce>
 800a312:	7ffb      	ldrb	r3, [r7, #31]
 800a314:	2b7a      	cmp	r3, #122	; 0x7a
 800a316:	d802      	bhi.n	800a31e <create_name+0xce>
 800a318:	7ffb      	ldrb	r3, [r7, #31]
 800a31a:	3b20      	subs	r3, #32
 800a31c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	1c5a      	adds	r2, r3, #1
 800a322:	613a      	str	r2, [r7, #16]
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	4413      	add	r3, r2
 800a328:	7ffa      	ldrb	r2, [r7, #31]
 800a32a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a32c:	e7a6      	b.n	800a27c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a32e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a330:	68fa      	ldr	r2, [r7, #12]
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	441a      	add	r2, r3
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <create_name+0xf4>
 800a340:	2306      	movs	r3, #6
 800a342:	e010      	b.n	800a366 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	781b      	ldrb	r3, [r3, #0]
 800a348:	2be5      	cmp	r3, #229	; 0xe5
 800a34a:	d102      	bne.n	800a352 <create_name+0x102>
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	2205      	movs	r2, #5
 800a350:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a352:	7ffb      	ldrb	r3, [r7, #31]
 800a354:	2b20      	cmp	r3, #32
 800a356:	d801      	bhi.n	800a35c <create_name+0x10c>
 800a358:	2204      	movs	r2, #4
 800a35a:	e000      	b.n	800a35e <create_name+0x10e>
 800a35c:	2200      	movs	r2, #0
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	330b      	adds	r3, #11
 800a362:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a364:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a366:	4618      	mov	r0, r3
 800a368:	3720      	adds	r7, #32
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	0800c8b4 	.word	0x0800c8b4
 800a374:	0800c7f4 	.word	0x0800c7f4

0800a378 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b086      	sub	sp, #24
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a38c:	e002      	b.n	800a394 <follow_path+0x1c>
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	3301      	adds	r3, #1
 800a392:	603b      	str	r3, [r7, #0]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	781b      	ldrb	r3, [r3, #0]
 800a398:	2b2f      	cmp	r3, #47	; 0x2f
 800a39a:	d0f8      	beq.n	800a38e <follow_path+0x16>
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	781b      	ldrb	r3, [r3, #0]
 800a3a0:	2b5c      	cmp	r3, #92	; 0x5c
 800a3a2:	d0f4      	beq.n	800a38e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	2b1f      	cmp	r3, #31
 800a3b0:	d80a      	bhi.n	800a3c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2280      	movs	r2, #128	; 0x80
 800a3b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff fcda 	bl	8009d76 <dir_sdi>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	75fb      	strb	r3, [r7, #23]
 800a3c6:	e048      	b.n	800a45a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a3c8:	463b      	mov	r3, r7
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f7ff ff3f 	bl	800a250 <create_name>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a3d6:	7dfb      	ldrb	r3, [r7, #23]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d139      	bne.n	800a450 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff feaf 	bl	800a140 <dir_find>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a3ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d00a      	beq.n	800a40a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	2b04      	cmp	r3, #4
 800a3f8:	d12c      	bne.n	800a454 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a3fa:	7afb      	ldrb	r3, [r7, #11]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d127      	bne.n	800a454 <follow_path+0xdc>
 800a404:	2305      	movs	r3, #5
 800a406:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a408:	e024      	b.n	800a454 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a40a:	7afb      	ldrb	r3, [r7, #11]
 800a40c:	f003 0304 	and.w	r3, r3, #4
 800a410:	2b00      	cmp	r3, #0
 800a412:	d121      	bne.n	800a458 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	799b      	ldrb	r3, [r3, #6]
 800a418:	f003 0310 	and.w	r3, r3, #16
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a420:	2305      	movs	r3, #5
 800a422:	75fb      	strb	r3, [r7, #23]
 800a424:	e019      	b.n	800a45a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	695b      	ldr	r3, [r3, #20]
 800a430:	68fa      	ldr	r2, [r7, #12]
 800a432:	8992      	ldrh	r2, [r2, #12]
 800a434:	fbb3 f0f2 	udiv	r0, r3, r2
 800a438:	fb02 f200 	mul.w	r2, r2, r0
 800a43c:	1a9b      	subs	r3, r3, r2
 800a43e:	440b      	add	r3, r1
 800a440:	4619      	mov	r1, r3
 800a442:	68f8      	ldr	r0, [r7, #12]
 800a444:	f7ff fe3d 	bl	800a0c2 <ld_clust>
 800a448:	4602      	mov	r2, r0
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a44e:	e7bb      	b.n	800a3c8 <follow_path+0x50>
			if (res != FR_OK) break;
 800a450:	bf00      	nop
 800a452:	e002      	b.n	800a45a <follow_path+0xe2>
				break;
 800a454:	bf00      	nop
 800a456:	e000      	b.n	800a45a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a458:	bf00      	nop
			}
		}
	}

	return res;
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a464:	b480      	push	{r7}
 800a466:	b087      	sub	sp, #28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a46c:	f04f 33ff 	mov.w	r3, #4294967295
 800a470:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d031      	beq.n	800a4de <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	617b      	str	r3, [r7, #20]
 800a480:	e002      	b.n	800a488 <get_ldnumber+0x24>
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	3301      	adds	r3, #1
 800a486:	617b      	str	r3, [r7, #20]
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	781b      	ldrb	r3, [r3, #0]
 800a48c:	2b20      	cmp	r3, #32
 800a48e:	d903      	bls.n	800a498 <get_ldnumber+0x34>
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	781b      	ldrb	r3, [r3, #0]
 800a494:	2b3a      	cmp	r3, #58	; 0x3a
 800a496:	d1f4      	bne.n	800a482 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	2b3a      	cmp	r3, #58	; 0x3a
 800a49e:	d11c      	bne.n	800a4da <get_ldnumber+0x76>
			tp = *path;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	1c5a      	adds	r2, r3, #1
 800a4aa:	60fa      	str	r2, [r7, #12]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	3b30      	subs	r3, #48	; 0x30
 800a4b0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	2b09      	cmp	r3, #9
 800a4b6:	d80e      	bhi.n	800a4d6 <get_ldnumber+0x72>
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	697b      	ldr	r3, [r7, #20]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d10a      	bne.n	800a4d6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d107      	bne.n	800a4d6 <get_ldnumber+0x72>
					vol = (int)i;
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	697a      	ldr	r2, [r7, #20]
 800a4d4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	e002      	b.n	800a4e0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a4da:	2300      	movs	r3, #0
 800a4dc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a4de:	693b      	ldr	r3, [r7, #16]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	371c      	adds	r7, #28
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	70da      	strb	r2, [r3, #3]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a502:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a504:	6839      	ldr	r1, [r7, #0]
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff f85c 	bl	80095c4 <move_window>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d001      	beq.n	800a516 <check_fs+0x2a>
 800a512:	2304      	movs	r3, #4
 800a514:	e038      	b.n	800a588 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3334      	adds	r3, #52	; 0x34
 800a51a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a51e:	4618      	mov	r0, r3
 800a520:	f7fe fda0 	bl	8009064 <ld_word>
 800a524:	4603      	mov	r3, r0
 800a526:	461a      	mov	r2, r3
 800a528:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d001      	beq.n	800a534 <check_fs+0x48>
 800a530:	2303      	movs	r3, #3
 800a532:	e029      	b.n	800a588 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a53a:	2be9      	cmp	r3, #233	; 0xe9
 800a53c:	d009      	beq.n	800a552 <check_fs+0x66>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a544:	2beb      	cmp	r3, #235	; 0xeb
 800a546:	d11e      	bne.n	800a586 <check_fs+0x9a>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a54e:	2b90      	cmp	r3, #144	; 0x90
 800a550:	d119      	bne.n	800a586 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3334      	adds	r3, #52	; 0x34
 800a556:	3336      	adds	r3, #54	; 0x36
 800a558:	4618      	mov	r0, r3
 800a55a:	f7fe fd9b 	bl	8009094 <ld_dword>
 800a55e:	4603      	mov	r3, r0
 800a560:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a564:	4a0a      	ldr	r2, [pc, #40]	; (800a590 <check_fs+0xa4>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d101      	bne.n	800a56e <check_fs+0x82>
 800a56a:	2300      	movs	r3, #0
 800a56c:	e00c      	b.n	800a588 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	3334      	adds	r3, #52	; 0x34
 800a572:	3352      	adds	r3, #82	; 0x52
 800a574:	4618      	mov	r0, r3
 800a576:	f7fe fd8d 	bl	8009094 <ld_dword>
 800a57a:	4602      	mov	r2, r0
 800a57c:	4b05      	ldr	r3, [pc, #20]	; (800a594 <check_fs+0xa8>)
 800a57e:	429a      	cmp	r2, r3
 800a580:	d101      	bne.n	800a586 <check_fs+0x9a>
 800a582:	2300      	movs	r3, #0
 800a584:	e000      	b.n	800a588 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a586:	2302      	movs	r3, #2
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3708      	adds	r7, #8
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	00544146 	.word	0x00544146
 800a594:	33544146 	.word	0x33544146

0800a598 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b096      	sub	sp, #88	; 0x58
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	4613      	mov	r3, r2
 800a5a4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f7ff ff59 	bl	800a464 <get_ldnumber>
 800a5b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a5b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	da01      	bge.n	800a5be <find_volume+0x26>
 800a5ba:	230b      	movs	r3, #11
 800a5bc:	e265      	b.n	800aa8a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a5be:	4ab0      	ldr	r2, [pc, #704]	; (800a880 <find_volume+0x2e8>)
 800a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5c6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <find_volume+0x3a>
 800a5ce:	230c      	movs	r3, #12
 800a5d0:	e25b      	b.n	800aa8a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a5d8:	79fb      	ldrb	r3, [r7, #7]
 800a5da:	f023 0301 	bic.w	r3, r3, #1
 800a5de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01a      	beq.n	800a61e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	785b      	ldrb	r3, [r3, #1]
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	f7fe fc9b 	bl	8008f28 <disk_status>
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a5f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10c      	bne.n	800a61e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d007      	beq.n	800a61a <find_volume+0x82>
 800a60a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a60e:	f003 0304 	and.w	r3, r3, #4
 800a612:	2b00      	cmp	r3, #0
 800a614:	d001      	beq.n	800a61a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a616:	230a      	movs	r3, #10
 800a618:	e237      	b.n	800aa8a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a61a:	2300      	movs	r3, #0
 800a61c:	e235      	b.n	800aa8a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a620:	2200      	movs	r2, #0
 800a622:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a626:	b2da      	uxtb	r2, r3
 800a628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62e:	785b      	ldrb	r3, [r3, #1]
 800a630:	4618      	mov	r0, r3
 800a632:	f7fe fc93 	bl	8008f5c <disk_initialize>
 800a636:	4603      	mov	r3, r0
 800a638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a63c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a648:	2303      	movs	r3, #3
 800a64a:	e21e      	b.n	800aa8a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d007      	beq.n	800a662 <find_volume+0xca>
 800a652:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a656:	f003 0304 	and.w	r3, r3, #4
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d001      	beq.n	800a662 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a65e:	230a      	movs	r3, #10
 800a660:	e213      	b.n	800aa8a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	7858      	ldrb	r0, [r3, #1]
 800a666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a668:	330c      	adds	r3, #12
 800a66a:	461a      	mov	r2, r3
 800a66c:	2102      	movs	r1, #2
 800a66e:	f7fe fcdb 	bl	8009028 <disk_ioctl>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <find_volume+0xe4>
 800a678:	2301      	movs	r3, #1
 800a67a:	e206      	b.n	800aa8a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67e:	899b      	ldrh	r3, [r3, #12]
 800a680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a684:	d80d      	bhi.n	800a6a2 <find_volume+0x10a>
 800a686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a688:	899b      	ldrh	r3, [r3, #12]
 800a68a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a68e:	d308      	bcc.n	800a6a2 <find_volume+0x10a>
 800a690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a692:	899b      	ldrh	r3, [r3, #12]
 800a694:	461a      	mov	r2, r3
 800a696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a698:	899b      	ldrh	r3, [r3, #12]
 800a69a:	3b01      	subs	r3, #1
 800a69c:	4013      	ands	r3, r2
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d001      	beq.n	800a6a6 <find_volume+0x10e>
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e1f1      	b.n	800aa8a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a6aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a6ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6ae:	f7ff ff1d 	bl	800a4ec <check_fs>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a6b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d14b      	bne.n	800a758 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	643b      	str	r3, [r7, #64]	; 0x40
 800a6c4:	e01f      	b.n	800a706 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a6c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a6d4:	4413      	add	r3, r2
 800a6d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6da:	3304      	adds	r3, #4
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d006      	beq.n	800a6f0 <find_volume+0x158>
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fe fcd4 	bl	8009094 <ld_dword>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	e000      	b.n	800a6f2 <find_volume+0x15a>
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a6fa:	440b      	add	r3, r1
 800a6fc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a702:	3301      	adds	r3, #1
 800a704:	643b      	str	r3, [r7, #64]	; 0x40
 800a706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a708:	2b03      	cmp	r3, #3
 800a70a:	d9dc      	bls.n	800a6c6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a70c:	2300      	movs	r3, #0
 800a70e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <find_volume+0x184>
 800a716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a718:	3b01      	subs	r3, #1
 800a71a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a724:	4413      	add	r3, r2
 800a726:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a72a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a72c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d005      	beq.n	800a73e <find_volume+0x1a6>
 800a732:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a734:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a736:	f7ff fed9 	bl	800a4ec <check_fs>
 800a73a:	4603      	mov	r3, r0
 800a73c:	e000      	b.n	800a740 <find_volume+0x1a8>
 800a73e:	2303      	movs	r3, #3
 800a740:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d905      	bls.n	800a758 <find_volume+0x1c0>
 800a74c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a74e:	3301      	adds	r3, #1
 800a750:	643b      	str	r3, [r7, #64]	; 0x40
 800a752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a754:	2b03      	cmp	r3, #3
 800a756:	d9e1      	bls.n	800a71c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a75c:	2b04      	cmp	r3, #4
 800a75e:	d101      	bne.n	800a764 <find_volume+0x1cc>
 800a760:	2301      	movs	r3, #1
 800a762:	e192      	b.n	800aa8a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a764:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d901      	bls.n	800a770 <find_volume+0x1d8>
 800a76c:	230d      	movs	r3, #13
 800a76e:	e18c      	b.n	800aa8a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a772:	3334      	adds	r3, #52	; 0x34
 800a774:	330b      	adds	r3, #11
 800a776:	4618      	mov	r0, r3
 800a778:	f7fe fc74 	bl	8009064 <ld_word>
 800a77c:	4603      	mov	r3, r0
 800a77e:	461a      	mov	r2, r3
 800a780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a782:	899b      	ldrh	r3, [r3, #12]
 800a784:	429a      	cmp	r2, r3
 800a786:	d001      	beq.n	800a78c <find_volume+0x1f4>
 800a788:	230d      	movs	r3, #13
 800a78a:	e17e      	b.n	800aa8a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a78e:	3334      	adds	r3, #52	; 0x34
 800a790:	3316      	adds	r3, #22
 800a792:	4618      	mov	r0, r3
 800a794:	f7fe fc66 	bl	8009064 <ld_word>
 800a798:	4603      	mov	r3, r0
 800a79a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a79c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d106      	bne.n	800a7b0 <find_volume+0x218>
 800a7a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a4:	3334      	adds	r3, #52	; 0x34
 800a7a6:	3324      	adds	r3, #36	; 0x24
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe fc73 	bl	8009094 <ld_dword>
 800a7ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7b4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7b8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c2:	789b      	ldrb	r3, [r3, #2]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d005      	beq.n	800a7d4 <find_volume+0x23c>
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	789b      	ldrb	r3, [r3, #2]
 800a7cc:	2b02      	cmp	r3, #2
 800a7ce:	d001      	beq.n	800a7d4 <find_volume+0x23c>
 800a7d0:	230d      	movs	r3, #13
 800a7d2:	e15a      	b.n	800aa8a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	789b      	ldrb	r3, [r3, #2]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7dc:	fb02 f303 	mul.w	r3, r2, r3
 800a7e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a7e8:	b29a      	uxth	r2, r3
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f0:	895b      	ldrh	r3, [r3, #10]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d008      	beq.n	800a808 <find_volume+0x270>
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	895b      	ldrh	r3, [r3, #10]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	895b      	ldrh	r3, [r3, #10]
 800a800:	3b01      	subs	r3, #1
 800a802:	4013      	ands	r3, r2
 800a804:	2b00      	cmp	r3, #0
 800a806:	d001      	beq.n	800a80c <find_volume+0x274>
 800a808:	230d      	movs	r3, #13
 800a80a:	e13e      	b.n	800aa8a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	3334      	adds	r3, #52	; 0x34
 800a810:	3311      	adds	r3, #17
 800a812:	4618      	mov	r0, r3
 800a814:	f7fe fc26 	bl	8009064 <ld_word>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a822:	891b      	ldrh	r3, [r3, #8]
 800a824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a826:	8992      	ldrh	r2, [r2, #12]
 800a828:	0952      	lsrs	r2, r2, #5
 800a82a:	b292      	uxth	r2, r2
 800a82c:	fbb3 f1f2 	udiv	r1, r3, r2
 800a830:	fb02 f201 	mul.w	r2, r2, r1
 800a834:	1a9b      	subs	r3, r3, r2
 800a836:	b29b      	uxth	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <find_volume+0x2a8>
 800a83c:	230d      	movs	r3, #13
 800a83e:	e124      	b.n	800aa8a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a842:	3334      	adds	r3, #52	; 0x34
 800a844:	3313      	adds	r3, #19
 800a846:	4618      	mov	r0, r3
 800a848:	f7fe fc0c 	bl	8009064 <ld_word>
 800a84c:	4603      	mov	r3, r0
 800a84e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <find_volume+0x2cc>
 800a856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a858:	3334      	adds	r3, #52	; 0x34
 800a85a:	3320      	adds	r3, #32
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fe fc19 	bl	8009094 <ld_dword>
 800a862:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a866:	3334      	adds	r3, #52	; 0x34
 800a868:	330e      	adds	r3, #14
 800a86a:	4618      	mov	r0, r3
 800a86c:	f7fe fbfa 	bl	8009064 <ld_word>
 800a870:	4603      	mov	r3, r0
 800a872:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a874:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a876:	2b00      	cmp	r3, #0
 800a878:	d104      	bne.n	800a884 <find_volume+0x2ec>
 800a87a:	230d      	movs	r3, #13
 800a87c:	e105      	b.n	800aa8a <find_volume+0x4f2>
 800a87e:	bf00      	nop
 800a880:	20001644 	.word	0x20001644

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a884:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a888:	4413      	add	r3, r2
 800a88a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a88c:	8911      	ldrh	r1, [r2, #8]
 800a88e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a890:	8992      	ldrh	r2, [r2, #12]
 800a892:	0952      	lsrs	r2, r2, #5
 800a894:	b292      	uxth	r2, r2
 800a896:	fbb1 f2f2 	udiv	r2, r1, r2
 800a89a:	b292      	uxth	r2, r2
 800a89c:	4413      	add	r3, r2
 800a89e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a8a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d201      	bcs.n	800a8ac <find_volume+0x314>
 800a8a8:	230d      	movs	r3, #13
 800a8aa:	e0ee      	b.n	800aa8a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a8ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	1ad3      	subs	r3, r2, r3
 800a8b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8b4:	8952      	ldrh	r2, [r2, #10]
 800a8b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <find_volume+0x32e>
 800a8c2:	230d      	movs	r3, #13
 800a8c4:	e0e1      	b.n	800aa8a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a8c6:	2303      	movs	r3, #3
 800a8c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ce:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d802      	bhi.n	800a8dc <find_volume+0x344>
 800a8d6:	2302      	movs	r3, #2
 800a8d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8de:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d802      	bhi.n	800a8ec <find_volume+0x354>
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	1c9a      	adds	r2, r3, #2
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a8f8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a8fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8fe:	441a      	add	r2, r3
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a904:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	441a      	add	r2, r3
 800a90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a90c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a90e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a912:	2b03      	cmp	r3, #3
 800a914:	d11e      	bne.n	800a954 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a918:	3334      	adds	r3, #52	; 0x34
 800a91a:	332a      	adds	r3, #42	; 0x2a
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fe fba1 	bl	8009064 <ld_word>
 800a922:	4603      	mov	r3, r0
 800a924:	2b00      	cmp	r3, #0
 800a926:	d001      	beq.n	800a92c <find_volume+0x394>
 800a928:	230d      	movs	r3, #13
 800a92a:	e0ae      	b.n	800aa8a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	891b      	ldrh	r3, [r3, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <find_volume+0x3a0>
 800a934:	230d      	movs	r3, #13
 800a936:	e0a8      	b.n	800aa8a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93a:	3334      	adds	r3, #52	; 0x34
 800a93c:	332c      	adds	r3, #44	; 0x2c
 800a93e:	4618      	mov	r0, r3
 800a940:	f7fe fba8 	bl	8009094 <ld_dword>
 800a944:	4602      	mov	r2, r0
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	009b      	lsls	r3, r3, #2
 800a950:	647b      	str	r3, [r7, #68]	; 0x44
 800a952:	e01f      	b.n	800a994 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a956:	891b      	ldrh	r3, [r3, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <find_volume+0x3c8>
 800a95c:	230d      	movs	r3, #13
 800a95e:	e094      	b.n	800aa8a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a966:	441a      	add	r2, r3
 800a968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a96c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a970:	2b02      	cmp	r3, #2
 800a972:	d103      	bne.n	800a97c <find_volume+0x3e4>
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	699b      	ldr	r3, [r3, #24]
 800a978:	005b      	lsls	r3, r3, #1
 800a97a:	e00a      	b.n	800a992 <find_volume+0x3fa>
 800a97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97e:	699a      	ldr	r2, [r3, #24]
 800a980:	4613      	mov	r3, r2
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	4413      	add	r3, r2
 800a986:	085a      	lsrs	r2, r3, #1
 800a988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a992:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a996:	69da      	ldr	r2, [r3, #28]
 800a998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99a:	899b      	ldrh	r3, [r3, #12]
 800a99c:	4619      	mov	r1, r3
 800a99e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a0:	440b      	add	r3, r1
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9a6:	8989      	ldrh	r1, [r1, #12]
 800a9a8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9ac:	429a      	cmp	r2, r3
 800a9ae:	d201      	bcs.n	800a9b4 <find_volume+0x41c>
 800a9b0:	230d      	movs	r3, #13
 800a9b2:	e06a      	b.n	800aa8a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ba:	615a      	str	r2, [r3, #20]
 800a9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9be:	695a      	ldr	r2, [r3, #20]
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	2280      	movs	r2, #128	; 0x80
 800a9c8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a9ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d149      	bne.n	800aa66 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d4:	3334      	adds	r3, #52	; 0x34
 800a9d6:	3330      	adds	r3, #48	; 0x30
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7fe fb43 	bl	8009064 <ld_word>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d140      	bne.n	800aa66 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a9e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a9ec:	f7fe fdea 	bl	80095c4 <move_window>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d137      	bne.n	800aa66 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9fe:	3334      	adds	r3, #52	; 0x34
 800aa00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa04:	4618      	mov	r0, r3
 800aa06:	f7fe fb2d 	bl	8009064 <ld_word>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d127      	bne.n	800aa66 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa18:	3334      	adds	r3, #52	; 0x34
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fe fb3a 	bl	8009094 <ld_dword>
 800aa20:	4602      	mov	r2, r0
 800aa22:	4b1c      	ldr	r3, [pc, #112]	; (800aa94 <find_volume+0x4fc>)
 800aa24:	429a      	cmp	r2, r3
 800aa26:	d11e      	bne.n	800aa66 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aa28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2a:	3334      	adds	r3, #52	; 0x34
 800aa2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aa30:	4618      	mov	r0, r3
 800aa32:	f7fe fb2f 	bl	8009094 <ld_dword>
 800aa36:	4602      	mov	r2, r0
 800aa38:	4b17      	ldr	r3, [pc, #92]	; (800aa98 <find_volume+0x500>)
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d113      	bne.n	800aa66 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aa3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa40:	3334      	adds	r3, #52	; 0x34
 800aa42:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe fb24 	bl	8009094 <ld_dword>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa50:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa54:	3334      	adds	r3, #52	; 0x34
 800aa56:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fe fb1a 	bl	8009094 <ld_dword>
 800aa60:	4602      	mov	r2, r0
 800aa62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa64:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aa6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa6e:	4b0b      	ldr	r3, [pc, #44]	; (800aa9c <find_volume+0x504>)
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	3301      	adds	r3, #1
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	4b09      	ldr	r3, [pc, #36]	; (800aa9c <find_volume+0x504>)
 800aa78:	801a      	strh	r2, [r3, #0]
 800aa7a:	4b08      	ldr	r3, [pc, #32]	; (800aa9c <find_volume+0x504>)
 800aa7c:	881a      	ldrh	r2, [r3, #0]
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa80:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aa82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa84:	f7fe fd36 	bl	80094f4 <clear_lock>
#endif
	return FR_OK;
 800aa88:	2300      	movs	r3, #0
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3758      	adds	r7, #88	; 0x58
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	41615252 	.word	0x41615252
 800aa98:	61417272 	.word	0x61417272
 800aa9c:	20001648 	.word	0x20001648

0800aaa0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b084      	sub	sp, #16
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aaaa:	2309      	movs	r3, #9
 800aaac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d01c      	beq.n	800aaee <validate+0x4e>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d018      	beq.n	800aaee <validate+0x4e>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	781b      	ldrb	r3, [r3, #0]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d013      	beq.n	800aaee <validate+0x4e>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	889a      	ldrh	r2, [r3, #4]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	88db      	ldrh	r3, [r3, #6]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d10c      	bne.n	800aaee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	785b      	ldrb	r3, [r3, #1]
 800aada:	4618      	mov	r0, r3
 800aadc:	f7fe fa24 	bl	8008f28 <disk_status>
 800aae0:	4603      	mov	r3, r0
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <validate+0x4e>
			res = FR_OK;
 800aaea:	2300      	movs	r3, #0
 800aaec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d102      	bne.n	800aafa <validate+0x5a>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	e000      	b.n	800aafc <validate+0x5c>
 800aafa:	2300      	movs	r3, #0
 800aafc:	683a      	ldr	r2, [r7, #0]
 800aafe:	6013      	str	r3, [r2, #0]
	return res;
 800ab00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
	...

0800ab0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b088      	sub	sp, #32
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	4613      	mov	r3, r2
 800ab18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ab1e:	f107 0310 	add.w	r3, r7, #16
 800ab22:	4618      	mov	r0, r3
 800ab24:	f7ff fc9e 	bl	800a464 <get_ldnumber>
 800ab28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	da01      	bge.n	800ab34 <f_mount+0x28>
 800ab30:	230b      	movs	r3, #11
 800ab32:	e02b      	b.n	800ab8c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab34:	4a17      	ldr	r2, [pc, #92]	; (800ab94 <f_mount+0x88>)
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d005      	beq.n	800ab50 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ab44:	69b8      	ldr	r0, [r7, #24]
 800ab46:	f7fe fcd5 	bl	80094f4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ab4a:	69bb      	ldr	r3, [r7, #24]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d002      	beq.n	800ab5c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	490d      	ldr	r1, [pc, #52]	; (800ab94 <f_mount+0x88>)
 800ab60:	69fb      	ldr	r3, [r7, #28]
 800ab62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d002      	beq.n	800ab72 <f_mount+0x66>
 800ab6c:	79fb      	ldrb	r3, [r7, #7]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d001      	beq.n	800ab76 <f_mount+0x6a>
 800ab72:	2300      	movs	r3, #0
 800ab74:	e00a      	b.n	800ab8c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ab76:	f107 010c 	add.w	r1, r7, #12
 800ab7a:	f107 0308 	add.w	r3, r7, #8
 800ab7e:	2200      	movs	r2, #0
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff fd09 	bl	800a598 <find_volume>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ab8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3720      	adds	r7, #32
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}
 800ab94:	20001644 	.word	0x20001644

0800ab98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b098      	sub	sp, #96	; 0x60
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	4613      	mov	r3, r2
 800aba4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d101      	bne.n	800abb0 <f_open+0x18>
 800abac:	2309      	movs	r3, #9
 800abae:	e1bb      	b.n	800af28 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800abb0:	79fb      	ldrb	r3, [r7, #7]
 800abb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800abb8:	79fa      	ldrb	r2, [r7, #7]
 800abba:	f107 0110 	add.w	r1, r7, #16
 800abbe:	f107 0308 	add.w	r3, r7, #8
 800abc2:	4618      	mov	r0, r3
 800abc4:	f7ff fce8 	bl	800a598 <find_volume>
 800abc8:	4603      	mov	r3, r0
 800abca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800abce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f040 819f 	bne.w	800af16 <f_open+0x37e>
		dj.obj.fs = fs;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	f107 0314 	add.w	r3, r7, #20
 800abe2:	4611      	mov	r1, r2
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7ff fbc7 	bl	800a378 <follow_path>
 800abea:	4603      	mov	r3, r0
 800abec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800abf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d11a      	bne.n	800ac2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800abf8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800abfc:	b25b      	sxtb	r3, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	da03      	bge.n	800ac0a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ac02:	2306      	movs	r3, #6
 800ac04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac08:	e011      	b.n	800ac2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac0a:	79fb      	ldrb	r3, [r7, #7]
 800ac0c:	f023 0301 	bic.w	r3, r3, #1
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	bf14      	ite	ne
 800ac14:	2301      	movne	r3, #1
 800ac16:	2300      	moveq	r3, #0
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	461a      	mov	r2, r3
 800ac1c:	f107 0314 	add.w	r3, r7, #20
 800ac20:	4611      	mov	r1, r2
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7fe fb1e 	bl	8009264 <chk_lock>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	f003 031c 	and.w	r3, r3, #28
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d07f      	beq.n	800ad38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800ac38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d017      	beq.n	800ac70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800ac40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac44:	2b04      	cmp	r3, #4
 800ac46:	d10e      	bne.n	800ac66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800ac48:	f7fe fb68 	bl	800931c <enq_lock>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d006      	beq.n	800ac60 <f_open+0xc8>
 800ac52:	f107 0314 	add.w	r3, r7, #20
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff fac7 	bl	800a1ea <dir_register>
 800ac5c:	4603      	mov	r3, r0
 800ac5e:	e000      	b.n	800ac62 <f_open+0xca>
 800ac60:	2312      	movs	r3, #18
 800ac62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800ac66:	79fb      	ldrb	r3, [r7, #7]
 800ac68:	f043 0308 	orr.w	r3, r3, #8
 800ac6c:	71fb      	strb	r3, [r7, #7]
 800ac6e:	e010      	b.n	800ac92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ac70:	7ebb      	ldrb	r3, [r7, #26]
 800ac72:	f003 0311 	and.w	r3, r3, #17
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d003      	beq.n	800ac82 <f_open+0xea>
					res = FR_DENIED;
 800ac7a:	2307      	movs	r3, #7
 800ac7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac80:	e007      	b.n	800ac92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ac82:	79fb      	ldrb	r3, [r7, #7]
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <f_open+0xfa>
 800ac8c:	2308      	movs	r3, #8
 800ac8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ac92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d168      	bne.n	800ad6c <f_open+0x1d4>
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	f003 0308 	and.w	r3, r3, #8
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d063      	beq.n	800ad6c <f_open+0x1d4>
				dw = GET_FATTIME();
 800aca4:	f7fc fb5a 	bl	800735c <get_fattime>
 800aca8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800acaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acac:	330e      	adds	r3, #14
 800acae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acb0:	4618      	mov	r0, r3
 800acb2:	f7fe fa2d 	bl	8009110 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800acb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb8:	3316      	adds	r3, #22
 800acba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fe fa27 	bl	8009110 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800acc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc4:	330b      	adds	r3, #11
 800acc6:	2220      	movs	r2, #32
 800acc8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acce:	4611      	mov	r1, r2
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff f9f6 	bl	800a0c2 <ld_clust>
 800acd6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800acdc:	2200      	movs	r2, #0
 800acde:	4618      	mov	r0, r3
 800ace0:	f7ff fa0e 	bl	800a100 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ace4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace6:	331c      	adds	r3, #28
 800ace8:	2100      	movs	r1, #0
 800acea:	4618      	mov	r0, r3
 800acec:	f7fe fa10 	bl	8009110 <st_dword>
					fs->wflag = 1;
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	2201      	movs	r2, #1
 800acf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800acf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d037      	beq.n	800ad6c <f_open+0x1d4>
						dw = fs->winsect;
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad00:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ad02:	f107 0314 	add.w	r3, r7, #20
 800ad06:	2200      	movs	r2, #0
 800ad08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe fefe 	bl	8009b0c <remove_chain>
 800ad10:	4603      	mov	r3, r0
 800ad12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ad16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d126      	bne.n	800ad6c <f_open+0x1d4>
							res = move_window(fs, dw);
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad22:	4618      	mov	r0, r3
 800ad24:	f7fe fc4e 	bl	80095c4 <move_window>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ad2e:	693b      	ldr	r3, [r7, #16]
 800ad30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ad32:	3a01      	subs	r2, #1
 800ad34:	611a      	str	r2, [r3, #16]
 800ad36:	e019      	b.n	800ad6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ad38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d115      	bne.n	800ad6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ad40:	7ebb      	ldrb	r3, [r7, #26]
 800ad42:	f003 0310 	and.w	r3, r3, #16
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <f_open+0x1ba>
					res = FR_NO_FILE;
 800ad4a:	2304      	movs	r3, #4
 800ad4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad50:	e00c      	b.n	800ad6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ad52:	79fb      	ldrb	r3, [r7, #7]
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d007      	beq.n	800ad6c <f_open+0x1d4>
 800ad5c:	7ebb      	ldrb	r3, [r7, #26]
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d002      	beq.n	800ad6c <f_open+0x1d4>
						res = FR_DENIED;
 800ad66:	2307      	movs	r3, #7
 800ad68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800ad6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d128      	bne.n	800adc6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ad74:	79fb      	ldrb	r3, [r7, #7]
 800ad76:	f003 0308 	and.w	r3, r3, #8
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ad7e:	79fb      	ldrb	r3, [r7, #7]
 800ad80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ad8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	f023 0301 	bic.w	r3, r3, #1
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	bf14      	ite	ne
 800ad9e:	2301      	movne	r3, #1
 800ada0:	2300      	moveq	r3, #0
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	461a      	mov	r2, r3
 800ada6:	f107 0314 	add.w	r3, r7, #20
 800adaa:	4611      	mov	r1, r2
 800adac:	4618      	mov	r0, r3
 800adae:	f7fe fad7 	bl	8009360 <inc_lock>
 800adb2:	4602      	mov	r2, r0
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d102      	bne.n	800adc6 <f_open+0x22e>
 800adc0:	2302      	movs	r3, #2
 800adc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800adc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adca:	2b00      	cmp	r3, #0
 800adcc:	f040 80a3 	bne.w	800af16 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800add4:	4611      	mov	r1, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f7ff f973 	bl	800a0c2 <ld_clust>
 800addc:	4602      	mov	r2, r0
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ade2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ade4:	331c      	adds	r3, #28
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe f954 	bl	8009094 <ld_dword>
 800adec:	4602      	mov	r2, r0
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	88da      	ldrh	r2, [r3, #6]
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	79fa      	ldrb	r2, [r7, #7]
 800ae0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	3330      	adds	r3, #48	; 0x30
 800ae22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae26:	2100      	movs	r1, #0
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7fe f9be 	bl	80091aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	f003 0320 	and.w	r3, r3, #32
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d06e      	beq.n	800af16 <f_open+0x37e>
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d06a      	beq.n	800af16 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	68da      	ldr	r2, [r3, #12]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	895b      	ldrh	r3, [r3, #10]
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	899b      	ldrh	r3, [r3, #12]
 800ae52:	fb03 f302 	mul.w	r3, r3, r2
 800ae56:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	689b      	ldr	r3, [r3, #8]
 800ae5c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	68db      	ldr	r3, [r3, #12]
 800ae62:	657b      	str	r3, [r7, #84]	; 0x54
 800ae64:	e016      	b.n	800ae94 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	f7fe fc67 	bl	800973e <get_fat>
 800ae70:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ae72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d802      	bhi.n	800ae7e <f_open+0x2e6>
 800ae78:	2302      	movs	r3, #2
 800ae7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ae7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae84:	d102      	bne.n	800ae8c <f_open+0x2f4>
 800ae86:	2301      	movs	r3, #1
 800ae88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ae8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	657b      	str	r3, [r7, #84]	; 0x54
 800ae94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d103      	bne.n	800aea4 <f_open+0x30c>
 800ae9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d8e0      	bhi.n	800ae66 <f_open+0x2ce>
				}
				fp->clust = clst;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aea8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aeaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d131      	bne.n	800af16 <f_open+0x37e>
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	899b      	ldrh	r3, [r3, #12]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeba:	fbb3 f1f2 	udiv	r1, r3, r2
 800aebe:	fb02 f201 	mul.w	r2, r2, r1
 800aec2:	1a9b      	subs	r3, r3, r2
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d026      	beq.n	800af16 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aec8:	693b      	ldr	r3, [r7, #16]
 800aeca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aecc:	4618      	mov	r0, r3
 800aece:	f7fe fc17 	bl	8009700 <clust2sect>
 800aed2:	6478      	str	r0, [r7, #68]	; 0x44
 800aed4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d103      	bne.n	800aee2 <f_open+0x34a>
						res = FR_INT_ERR;
 800aeda:	2302      	movs	r3, #2
 800aedc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aee0:	e019      	b.n	800af16 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	899b      	ldrh	r3, [r3, #12]
 800aee6:	461a      	mov	r2, r3
 800aee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeea:	fbb3 f2f2 	udiv	r2, r3, r2
 800aeee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aef0:	441a      	add	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aef6:	693b      	ldr	r3, [r7, #16]
 800aef8:	7858      	ldrb	r0, [r3, #1]
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6a1a      	ldr	r2, [r3, #32]
 800af04:	2301      	movs	r3, #1
 800af06:	f7fe f84f 	bl	8008fa8 <disk_read>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d002      	beq.n	800af16 <f_open+0x37e>
 800af10:	2301      	movs	r3, #1
 800af12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800af16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <f_open+0x38c>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800af24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3760      	adds	r7, #96	; 0x60
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b08c      	sub	sp, #48	; 0x30
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
 800af3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2200      	movs	r2, #0
 800af46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f107 0210 	add.w	r2, r7, #16
 800af4e:	4611      	mov	r1, r2
 800af50:	4618      	mov	r0, r3
 800af52:	f7ff fda5 	bl	800aaa0 <validate>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800af5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af60:	2b00      	cmp	r3, #0
 800af62:	d107      	bne.n	800af74 <f_write+0x44>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	7d5b      	ldrb	r3, [r3, #21]
 800af68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800af6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <f_write+0x4a>
 800af74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af78:	e16a      	b.n	800b250 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	7d1b      	ldrb	r3, [r3, #20]
 800af7e:	f003 0302 	and.w	r3, r3, #2
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <f_write+0x5a>
 800af86:	2307      	movs	r3, #7
 800af88:	e162      	b.n	800b250 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	699a      	ldr	r2, [r3, #24]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	441a      	add	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	699b      	ldr	r3, [r3, #24]
 800af96:	429a      	cmp	r2, r3
 800af98:	f080 814c 	bcs.w	800b234 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	699b      	ldr	r3, [r3, #24]
 800afa0:	43db      	mvns	r3, r3
 800afa2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800afa4:	e146      	b.n	800b234 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	699b      	ldr	r3, [r3, #24]
 800afaa:	693a      	ldr	r2, [r7, #16]
 800afac:	8992      	ldrh	r2, [r2, #12]
 800afae:	fbb3 f1f2 	udiv	r1, r3, r2
 800afb2:	fb02 f201 	mul.w	r2, r2, r1
 800afb6:	1a9b      	subs	r3, r3, r2
 800afb8:	2b00      	cmp	r3, #0
 800afba:	f040 80f1 	bne.w	800b1a0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	699b      	ldr	r3, [r3, #24]
 800afc2:	693a      	ldr	r2, [r7, #16]
 800afc4:	8992      	ldrh	r2, [r2, #12]
 800afc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800afca:	693a      	ldr	r2, [r7, #16]
 800afcc:	8952      	ldrh	r2, [r2, #10]
 800afce:	3a01      	subs	r2, #1
 800afd0:	4013      	ands	r3, r2
 800afd2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800afd4:	69bb      	ldr	r3, [r7, #24]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d143      	bne.n	800b062 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	699b      	ldr	r3, [r3, #24]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d10c      	bne.n	800affc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	689b      	ldr	r3, [r3, #8]
 800afe6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800afe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afea:	2b00      	cmp	r3, #0
 800afec:	d11a      	bne.n	800b024 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2100      	movs	r1, #0
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7fe fdef 	bl	8009bd6 <create_chain>
 800aff8:	62b8      	str	r0, [r7, #40]	; 0x28
 800affa:	e013      	b.n	800b024 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b000:	2b00      	cmp	r3, #0
 800b002:	d007      	beq.n	800b014 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	4619      	mov	r1, r3
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f7fe fe7b 	bl	8009d06 <clmt_clust>
 800b010:	62b8      	str	r0, [r7, #40]	; 0x28
 800b012:	e007      	b.n	800b024 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b014:	68fa      	ldr	r2, [r7, #12]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	69db      	ldr	r3, [r3, #28]
 800b01a:	4619      	mov	r1, r3
 800b01c:	4610      	mov	r0, r2
 800b01e:	f7fe fdda 	bl	8009bd6 <create_chain>
 800b022:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 8109 	beq.w	800b23e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d104      	bne.n	800b03c <f_write+0x10c>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2202      	movs	r2, #2
 800b036:	755a      	strb	r2, [r3, #21]
 800b038:	2302      	movs	r3, #2
 800b03a:	e109      	b.n	800b250 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b042:	d104      	bne.n	800b04e <f_write+0x11e>
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2201      	movs	r2, #1
 800b048:	755a      	strb	r2, [r3, #21]
 800b04a:	2301      	movs	r3, #1
 800b04c:	e100      	b.n	800b250 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b052:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	689b      	ldr	r3, [r3, #8]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d102      	bne.n	800b062 <f_write+0x132>
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b060:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	7d1b      	ldrb	r3, [r3, #20]
 800b066:	b25b      	sxtb	r3, r3
 800b068:	2b00      	cmp	r3, #0
 800b06a:	da18      	bge.n	800b09e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	7858      	ldrb	r0, [r3, #1]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6a1a      	ldr	r2, [r3, #32]
 800b07a:	2301      	movs	r3, #1
 800b07c:	f7fd ffb4 	bl	8008fe8 <disk_write>
 800b080:	4603      	mov	r3, r0
 800b082:	2b00      	cmp	r3, #0
 800b084:	d004      	beq.n	800b090 <f_write+0x160>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2201      	movs	r2, #1
 800b08a:	755a      	strb	r2, [r3, #21]
 800b08c:	2301      	movs	r3, #1
 800b08e:	e0df      	b.n	800b250 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	7d1b      	ldrb	r3, [r3, #20]
 800b094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b098:	b2da      	uxtb	r2, r3
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	69db      	ldr	r3, [r3, #28]
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	4610      	mov	r0, r2
 800b0a8:	f7fe fb2a 	bl	8009700 <clust2sect>
 800b0ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d104      	bne.n	800b0be <f_write+0x18e>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2202      	movs	r2, #2
 800b0b8:	755a      	strb	r2, [r3, #21]
 800b0ba:	2302      	movs	r3, #2
 800b0bc:	e0c8      	b.n	800b250 <f_write+0x320>
			sect += csect;
 800b0be:	697a      	ldr	r2, [r7, #20]
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	899b      	ldrh	r3, [r3, #12]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0d2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d043      	beq.n	800b162 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b0da:	69ba      	ldr	r2, [r7, #24]
 800b0dc:	6a3b      	ldr	r3, [r7, #32]
 800b0de:	4413      	add	r3, r2
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	8952      	ldrh	r2, [r2, #10]
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d905      	bls.n	800b0f4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800b0e8:	693b      	ldr	r3, [r7, #16]
 800b0ea:	895b      	ldrh	r3, [r3, #10]
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	7858      	ldrb	r0, [r3, #1]
 800b0f8:	6a3b      	ldr	r3, [r7, #32]
 800b0fa:	697a      	ldr	r2, [r7, #20]
 800b0fc:	69f9      	ldr	r1, [r7, #28]
 800b0fe:	f7fd ff73 	bl	8008fe8 <disk_write>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d004      	beq.n	800b112 <f_write+0x1e2>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2201      	movs	r2, #1
 800b10c:	755a      	strb	r2, [r3, #21]
 800b10e:	2301      	movs	r3, #1
 800b110:	e09e      	b.n	800b250 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6a1a      	ldr	r2, [r3, #32]
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	1ad3      	subs	r3, r2, r3
 800b11a:	6a3a      	ldr	r2, [r7, #32]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d918      	bls.n	800b152 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	6a1a      	ldr	r2, [r3, #32]
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	693a      	ldr	r2, [r7, #16]
 800b130:	8992      	ldrh	r2, [r2, #12]
 800b132:	fb02 f303 	mul.w	r3, r2, r3
 800b136:	69fa      	ldr	r2, [r7, #28]
 800b138:	18d1      	adds	r1, r2, r3
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	899b      	ldrh	r3, [r3, #12]
 800b13e:	461a      	mov	r2, r3
 800b140:	f7fe f812 	bl	8009168 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	7d1b      	ldrb	r3, [r3, #20]
 800b148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	899b      	ldrh	r3, [r3, #12]
 800b156:	461a      	mov	r2, r3
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	fb02 f303 	mul.w	r3, r2, r3
 800b15e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800b160:	e04b      	b.n	800b1fa <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6a1b      	ldr	r3, [r3, #32]
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d016      	beq.n	800b19a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	699a      	ldr	r2, [r3, #24]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800b174:	429a      	cmp	r2, r3
 800b176:	d210      	bcs.n	800b19a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	7858      	ldrb	r0, [r3, #1]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b182:	2301      	movs	r3, #1
 800b184:	697a      	ldr	r2, [r7, #20]
 800b186:	f7fd ff0f 	bl	8008fa8 <disk_read>
 800b18a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d004      	beq.n	800b19a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2201      	movs	r2, #1
 800b194:	755a      	strb	r2, [r3, #21]
 800b196:	2301      	movs	r3, #1
 800b198:	e05a      	b.n	800b250 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	697a      	ldr	r2, [r7, #20]
 800b19e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	899b      	ldrh	r3, [r3, #12]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	699b      	ldr	r3, [r3, #24]
 800b1aa:	693a      	ldr	r2, [r7, #16]
 800b1ac:	8992      	ldrh	r2, [r2, #12]
 800b1ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800b1b2:	fb02 f201 	mul.w	r2, r2, r1
 800b1b6:	1a9b      	subs	r3, r3, r2
 800b1b8:	1ac3      	subs	r3, r0, r3
 800b1ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800b1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	429a      	cmp	r2, r3
 800b1c2:	d901      	bls.n	800b1c8 <f_write+0x298>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	8992      	ldrh	r2, [r2, #12]
 800b1d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800b1da:	fb02 f200 	mul.w	r2, r2, r0
 800b1de:	1a9b      	subs	r3, r3, r2
 800b1e0:	440b      	add	r3, r1
 800b1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e4:	69f9      	ldr	r1, [r7, #28]
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7fd ffbe 	bl	8009168 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	7d1b      	ldrb	r3, [r3, #20]
 800b1f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800b1fa:	69fa      	ldr	r2, [r7, #28]
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	4413      	add	r3, r2
 800b200:	61fb      	str	r3, [r7, #28]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	699a      	ldr	r2, [r3, #24]
 800b206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b208:	441a      	add	r2, r3
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	619a      	str	r2, [r3, #24]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	429a      	cmp	r2, r3
 800b218:	bf38      	it	cc
 800b21a:	461a      	movcc	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	60da      	str	r2, [r3, #12]
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	441a      	add	r2, r3
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	1ad3      	subs	r3, r2, r3
 800b232:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	f47f aeb5 	bne.w	800afa6 <f_write+0x76>
 800b23c:	e000      	b.n	800b240 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b23e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	7d1b      	ldrb	r3, [r3, #20]
 800b244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b248:	b2da      	uxtb	r2, r3
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	3730      	adds	r7, #48	; 0x30
 800b254:	46bd      	mov	sp, r7
 800b256:	bd80      	pop	{r7, pc}

0800b258 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b086      	sub	sp, #24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f107 0208 	add.w	r2, r7, #8
 800b266:	4611      	mov	r1, r2
 800b268:	4618      	mov	r0, r3
 800b26a:	f7ff fc19 	bl	800aaa0 <validate>
 800b26e:	4603      	mov	r3, r0
 800b270:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b272:	7dfb      	ldrb	r3, [r7, #23]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d168      	bne.n	800b34a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	7d1b      	ldrb	r3, [r3, #20]
 800b27c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b280:	2b00      	cmp	r3, #0
 800b282:	d062      	beq.n	800b34a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	7d1b      	ldrb	r3, [r3, #20]
 800b288:	b25b      	sxtb	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	da15      	bge.n	800b2ba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	7858      	ldrb	r0, [r3, #1]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6a1a      	ldr	r2, [r3, #32]
 800b29c:	2301      	movs	r3, #1
 800b29e:	f7fd fea3 	bl	8008fe8 <disk_write>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d001      	beq.n	800b2ac <f_sync+0x54>
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	e04f      	b.n	800b34c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	7d1b      	ldrb	r3, [r3, #20]
 800b2b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2b4:	b2da      	uxtb	r2, r3
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b2ba:	f7fc f84f 	bl	800735c <get_fattime>
 800b2be:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b2c0:	68ba      	ldr	r2, [r7, #8]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	4610      	mov	r0, r2
 800b2ca:	f7fe f97b 	bl	80095c4 <move_window>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b2d2:	7dfb      	ldrb	r3, [r7, #23]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d138      	bne.n	800b34a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2dc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	330b      	adds	r3, #11
 800b2e2:	781a      	ldrb	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	330b      	adds	r3, #11
 800b2e8:	f042 0220 	orr.w	r2, r2, #32
 800b2ec:	b2d2      	uxtb	r2, r2
 800b2ee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6818      	ldr	r0, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	f7fe ff00 	bl	800a100 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f103 021c 	add.w	r2, r3, #28
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	4619      	mov	r1, r3
 800b30c:	4610      	mov	r0, r2
 800b30e:	f7fd feff 	bl	8009110 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	3316      	adds	r3, #22
 800b316:	6939      	ldr	r1, [r7, #16]
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fd fef9 	bl	8009110 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	3312      	adds	r3, #18
 800b322:	2100      	movs	r1, #0
 800b324:	4618      	mov	r0, r3
 800b326:	f7fd fed8 	bl	80090da <st_word>
					fs->wflag = 1;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	2201      	movs	r2, #1
 800b32e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe f974 	bl	8009620 <sync_fs>
 800b338:	4603      	mov	r3, r0
 800b33a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	7d1b      	ldrb	r3, [r3, #20]
 800b340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b344:	b2da      	uxtb	r2, r3
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b35c:	6878      	ldr	r0, [r7, #4]
 800b35e:	f7ff ff7b 	bl	800b258 <f_sync>
 800b362:	4603      	mov	r3, r0
 800b364:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b366:	7bfb      	ldrb	r3, [r7, #15]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d118      	bne.n	800b39e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f107 0208 	add.w	r2, r7, #8
 800b372:	4611      	mov	r1, r2
 800b374:	4618      	mov	r0, r3
 800b376:	f7ff fb93 	bl	800aaa0 <validate>
 800b37a:	4603      	mov	r3, r0
 800b37c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b37e:	7bfb      	ldrb	r3, [r7, #15]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10c      	bne.n	800b39e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe f877 	bl	800947c <dec_lock>
 800b38e:	4603      	mov	r3, r0
 800b390:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d102      	bne.n	800b39e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b087      	sub	sp, #28
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b3be:	4b1f      	ldr	r3, [pc, #124]	; (800b43c <FATFS_LinkDriverEx+0x94>)
 800b3c0:	7a5b      	ldrb	r3, [r3, #9]
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d131      	bne.n	800b42c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b3c8:	4b1c      	ldr	r3, [pc, #112]	; (800b43c <FATFS_LinkDriverEx+0x94>)
 800b3ca:	7a5b      	ldrb	r3, [r3, #9]
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	4b1a      	ldr	r3, [pc, #104]	; (800b43c <FATFS_LinkDriverEx+0x94>)
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b3d6:	4b19      	ldr	r3, [pc, #100]	; (800b43c <FATFS_LinkDriverEx+0x94>)
 800b3d8:	7a5b      	ldrb	r3, [r3, #9]
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	4a17      	ldr	r2, [pc, #92]	; (800b43c <FATFS_LinkDriverEx+0x94>)
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b3e6:	4b15      	ldr	r3, [pc, #84]	; (800b43c <FATFS_LinkDriverEx+0x94>)
 800b3e8:	7a5b      	ldrb	r3, [r3, #9]
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	4b13      	ldr	r3, [pc, #76]	; (800b43c <FATFS_LinkDriverEx+0x94>)
 800b3f0:	4413      	add	r3, r2
 800b3f2:	79fa      	ldrb	r2, [r7, #7]
 800b3f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b3f6:	4b11      	ldr	r3, [pc, #68]	; (800b43c <FATFS_LinkDriverEx+0x94>)
 800b3f8:	7a5b      	ldrb	r3, [r3, #9]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	1c5a      	adds	r2, r3, #1
 800b3fe:	b2d1      	uxtb	r1, r2
 800b400:	4a0e      	ldr	r2, [pc, #56]	; (800b43c <FATFS_LinkDriverEx+0x94>)
 800b402:	7251      	strb	r1, [r2, #9]
 800b404:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b406:	7dbb      	ldrb	r3, [r7, #22]
 800b408:	3330      	adds	r3, #48	; 0x30
 800b40a:	b2da      	uxtb	r2, r3
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	3301      	adds	r3, #1
 800b414:	223a      	movs	r2, #58	; 0x3a
 800b416:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	3302      	adds	r3, #2
 800b41c:	222f      	movs	r2, #47	; 0x2f
 800b41e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	3303      	adds	r3, #3
 800b424:	2200      	movs	r2, #0
 800b426:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b42c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	2000166c 	.word	0x2000166c

0800b440 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b44a:	2200      	movs	r2, #0
 800b44c:	6839      	ldr	r1, [r7, #0]
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7ff ffaa 	bl	800b3a8 <FATFS_LinkDriverEx>
 800b454:	4603      	mov	r3, r0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b464:	2200      	movs	r2, #0
 800b466:	4912      	ldr	r1, [pc, #72]	; (800b4b0 <MX_USB_DEVICE_Init+0x50>)
 800b468:	4812      	ldr	r0, [pc, #72]	; (800b4b4 <MX_USB_DEVICE_Init+0x54>)
 800b46a:	f7fc fd03 	bl	8007e74 <USBD_Init>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d001      	beq.n	800b478 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b474:	f7f5 fbb8 	bl	8000be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b478:	490f      	ldr	r1, [pc, #60]	; (800b4b8 <MX_USB_DEVICE_Init+0x58>)
 800b47a:	480e      	ldr	r0, [pc, #56]	; (800b4b4 <MX_USB_DEVICE_Init+0x54>)
 800b47c:	f7fc fd25 	bl	8007eca <USBD_RegisterClass>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b486:	f7f5 fbaf 	bl	8000be8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b48a:	490c      	ldr	r1, [pc, #48]	; (800b4bc <MX_USB_DEVICE_Init+0x5c>)
 800b48c:	4809      	ldr	r0, [pc, #36]	; (800b4b4 <MX_USB_DEVICE_Init+0x54>)
 800b48e:	f7fc fc53 	bl	8007d38 <USBD_CDC_RegisterInterface>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d001      	beq.n	800b49c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b498:	f7f5 fba6 	bl	8000be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b49c:	4805      	ldr	r0, [pc, #20]	; (800b4b4 <MX_USB_DEVICE_Init+0x54>)
 800b49e:	f7fc fd2e 	bl	8007efe <USBD_Start>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d001      	beq.n	800b4ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b4a8:	f7f5 fb9e 	bl	8000be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b4ac:	bf00      	nop
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	2000012c 	.word	0x2000012c
 800b4b4:	20003888 	.word	0x20003888
 800b4b8:	20000018 	.word	0x20000018
 800b4bc:	2000011c 	.word	0x2000011c

0800b4c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4905      	ldr	r1, [pc, #20]	; (800b4dc <CDC_Init_FS+0x1c>)
 800b4c8:	4805      	ldr	r0, [pc, #20]	; (800b4e0 <CDC_Init_FS+0x20>)
 800b4ca:	f7fc fc4c 	bl	8007d66 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b4ce:	4905      	ldr	r1, [pc, #20]	; (800b4e4 <CDC_Init_FS+0x24>)
 800b4d0:	4803      	ldr	r0, [pc, #12]	; (800b4e0 <CDC_Init_FS+0x20>)
 800b4d2:	f7fc fc62 	bl	8007d9a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b4d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	bd80      	pop	{r7, pc}
 800b4dc:	20004324 	.word	0x20004324
 800b4e0:	20003888 	.word	0x20003888
 800b4e4:	20003b24 	.word	0x20003b24

0800b4e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b4ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	4603      	mov	r3, r0
 800b500:	6039      	str	r1, [r7, #0]
 800b502:	71fb      	strb	r3, [r7, #7]
 800b504:	4613      	mov	r3, r2
 800b506:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800b508:	f107 0308 	add.w	r3, r7, #8
 800b50c:	2200      	movs	r2, #0
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	2b23      	cmp	r3, #35	; 0x23
 800b518:	d87c      	bhi.n	800b614 <CDC_Control_FS+0x11c>
 800b51a:	a201      	add	r2, pc, #4	; (adr r2, 800b520 <CDC_Control_FS+0x28>)
 800b51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b520:	0800b615 	.word	0x0800b615
 800b524:	0800b615 	.word	0x0800b615
 800b528:	0800b615 	.word	0x0800b615
 800b52c:	0800b615 	.word	0x0800b615
 800b530:	0800b615 	.word	0x0800b615
 800b534:	0800b615 	.word	0x0800b615
 800b538:	0800b615 	.word	0x0800b615
 800b53c:	0800b615 	.word	0x0800b615
 800b540:	0800b615 	.word	0x0800b615
 800b544:	0800b615 	.word	0x0800b615
 800b548:	0800b615 	.word	0x0800b615
 800b54c:	0800b615 	.word	0x0800b615
 800b550:	0800b615 	.word	0x0800b615
 800b554:	0800b615 	.word	0x0800b615
 800b558:	0800b615 	.word	0x0800b615
 800b55c:	0800b615 	.word	0x0800b615
 800b560:	0800b615 	.word	0x0800b615
 800b564:	0800b615 	.word	0x0800b615
 800b568:	0800b615 	.word	0x0800b615
 800b56c:	0800b615 	.word	0x0800b615
 800b570:	0800b615 	.word	0x0800b615
 800b574:	0800b615 	.word	0x0800b615
 800b578:	0800b615 	.word	0x0800b615
 800b57c:	0800b615 	.word	0x0800b615
 800b580:	0800b615 	.word	0x0800b615
 800b584:	0800b615 	.word	0x0800b615
 800b588:	0800b615 	.word	0x0800b615
 800b58c:	0800b615 	.word	0x0800b615
 800b590:	0800b615 	.word	0x0800b615
 800b594:	0800b615 	.word	0x0800b615
 800b598:	0800b615 	.word	0x0800b615
 800b59c:	0800b615 	.word	0x0800b615
 800b5a0:	0800b5b1 	.word	0x0800b5b1
 800b5a4:	0800b5dd 	.word	0x0800b5dd
 800b5a8:	0800b615 	.word	0x0800b615
 800b5ac:	0800b615 	.word	0x0800b615
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	785b      	ldrb	r3, [r3, #1]
 800b5ba:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	789b      	ldrb	r3, [r3, #2]
 800b5c0:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	78db      	ldrb	r3, [r3, #3]
 800b5c6:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	791b      	ldrb	r3, [r3, #4]
 800b5cc:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	795b      	ldrb	r3, [r3, #5]
 800b5d2:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	799b      	ldrb	r3, [r3, #6]
 800b5d8:	73bb      	strb	r3, [r7, #14]
      	break;
 800b5da:	e01c      	b.n	800b616 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800b5dc:	7a3a      	ldrb	r2, [r7, #8]
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	7a7a      	ldrb	r2, [r7, #9]
 800b5e8:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	3302      	adds	r3, #2
 800b5ee:	7aba      	ldrb	r2, [r7, #10]
 800b5f0:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	3303      	adds	r3, #3
 800b5f6:	7afa      	ldrb	r2, [r7, #11]
 800b5f8:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	7b3a      	ldrb	r2, [r7, #12]
 800b600:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	3305      	adds	r3, #5
 800b606:	7b7a      	ldrb	r2, [r7, #13]
 800b608:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	3306      	adds	r3, #6
 800b60e:	7bba      	ldrb	r2, [r7, #14]
 800b610:	701a      	strb	r2, [r3, #0]
      	break;
 800b612:	e000      	b.n	800b616 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b614:	bf00      	nop
  }

  return (USBD_OK);
 800b616:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b082      	sub	sp, #8
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	4805      	ldr	r0, [pc, #20]	; (800b648 <CDC_Receive_FS+0x24>)
 800b632:	f7fc fbb2 	bl	8007d9a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b636:	4804      	ldr	r0, [pc, #16]	; (800b648 <CDC_Receive_FS+0x24>)
 800b638:	f7fc fbf2 	bl	8007e20 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b63c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3708      	adds	r7, #8
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	20003888 	.word	0x20003888

0800b64c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	460b      	mov	r3, r1
 800b656:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b658:	2300      	movs	r3, #0
 800b65a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b65c:	4b0d      	ldr	r3, [pc, #52]	; (800b694 <CDC_Transmit_FS+0x48>)
 800b65e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b662:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d001      	beq.n	800b672 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b66e:	2301      	movs	r3, #1
 800b670:	e00b      	b.n	800b68a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b672:	887b      	ldrh	r3, [r7, #2]
 800b674:	461a      	mov	r2, r3
 800b676:	6879      	ldr	r1, [r7, #4]
 800b678:	4806      	ldr	r0, [pc, #24]	; (800b694 <CDC_Transmit_FS+0x48>)
 800b67a:	f7fc fb74 	bl	8007d66 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b67e:	4805      	ldr	r0, [pc, #20]	; (800b694 <CDC_Transmit_FS+0x48>)
 800b680:	f7fc fb9f 	bl	8007dc2 <USBD_CDC_TransmitPacket>
 800b684:	4603      	mov	r3, r0
 800b686:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b688:	7bfb      	ldrb	r3, [r7, #15]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20003888 	.word	0x20003888

0800b698 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	4603      	mov	r3, r0
 800b6a0:	6039      	str	r1, [r7, #0]
 800b6a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2212      	movs	r2, #18
 800b6a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6aa:	4b03      	ldr	r3, [pc, #12]	; (800b6b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	20000148 	.word	0x20000148

0800b6bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b083      	sub	sp, #12
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	6039      	str	r1, [r7, #0]
 800b6c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	2204      	movs	r2, #4
 800b6cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6ce:	4b03      	ldr	r3, [pc, #12]	; (800b6dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr
 800b6dc:	2000015c 	.word	0x2000015c

0800b6e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	6039      	str	r1, [r7, #0]
 800b6ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6ec:	79fb      	ldrb	r3, [r7, #7]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d105      	bne.n	800b6fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	4907      	ldr	r1, [pc, #28]	; (800b714 <USBD_FS_ProductStrDescriptor+0x34>)
 800b6f6:	4808      	ldr	r0, [pc, #32]	; (800b718 <USBD_FS_ProductStrDescriptor+0x38>)
 800b6f8:	f7fd fb38 	bl	8008d6c <USBD_GetString>
 800b6fc:	e004      	b.n	800b708 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b6fe:	683a      	ldr	r2, [r7, #0]
 800b700:	4904      	ldr	r1, [pc, #16]	; (800b714 <USBD_FS_ProductStrDescriptor+0x34>)
 800b702:	4805      	ldr	r0, [pc, #20]	; (800b718 <USBD_FS_ProductStrDescriptor+0x38>)
 800b704:	f7fd fb32 	bl	8008d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b708:	4b02      	ldr	r3, [pc, #8]	; (800b714 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3708      	adds	r7, #8
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
 800b712:	bf00      	nop
 800b714:	20004b24 	.word	0x20004b24
 800b718:	0800c838 	.word	0x0800c838

0800b71c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b082      	sub	sp, #8
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	6039      	str	r1, [r7, #0]
 800b726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b728:	683a      	ldr	r2, [r7, #0]
 800b72a:	4904      	ldr	r1, [pc, #16]	; (800b73c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b72c:	4804      	ldr	r0, [pc, #16]	; (800b740 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b72e:	f7fd fb1d 	bl	8008d6c <USBD_GetString>
  return USBD_StrDesc;
 800b732:	4b02      	ldr	r3, [pc, #8]	; (800b73c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b734:	4618      	mov	r0, r3
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	20004b24 	.word	0x20004b24
 800b740:	0800c850 	.word	0x0800c850

0800b744 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	4603      	mov	r3, r0
 800b74c:	6039      	str	r1, [r7, #0]
 800b74e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	221a      	movs	r2, #26
 800b754:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b756:	f000 f843 	bl	800b7e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b75a:	4b02      	ldr	r3, [pc, #8]	; (800b764 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	20000160 	.word	0x20000160

0800b768 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	4603      	mov	r3, r0
 800b770:	6039      	str	r1, [r7, #0]
 800b772:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b774:	79fb      	ldrb	r3, [r7, #7]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d105      	bne.n	800b786 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	4907      	ldr	r1, [pc, #28]	; (800b79c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b77e:	4808      	ldr	r0, [pc, #32]	; (800b7a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b780:	f7fd faf4 	bl	8008d6c <USBD_GetString>
 800b784:	e004      	b.n	800b790 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	4904      	ldr	r1, [pc, #16]	; (800b79c <USBD_FS_ConfigStrDescriptor+0x34>)
 800b78a:	4805      	ldr	r0, [pc, #20]	; (800b7a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b78c:	f7fd faee 	bl	8008d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b790:	4b02      	ldr	r3, [pc, #8]	; (800b79c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b792:	4618      	mov	r0, r3
 800b794:	3708      	adds	r7, #8
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	20004b24 	.word	0x20004b24
 800b7a0:	0800c864 	.word	0x0800c864

0800b7a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	6039      	str	r1, [r7, #0]
 800b7ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d105      	bne.n	800b7c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7b6:	683a      	ldr	r2, [r7, #0]
 800b7b8:	4907      	ldr	r1, [pc, #28]	; (800b7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7ba:	4808      	ldr	r0, [pc, #32]	; (800b7dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7bc:	f7fd fad6 	bl	8008d6c <USBD_GetString>
 800b7c0:	e004      	b.n	800b7cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7c2:	683a      	ldr	r2, [r7, #0]
 800b7c4:	4904      	ldr	r1, [pc, #16]	; (800b7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7c6:	4805      	ldr	r0, [pc, #20]	; (800b7dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7c8:	f7fd fad0 	bl	8008d6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7cc:	4b02      	ldr	r3, [pc, #8]	; (800b7d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	20004b24 	.word	0x20004b24
 800b7dc:	0800c870 	.word	0x0800c870

0800b7e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7e6:	4b0f      	ldr	r3, [pc, #60]	; (800b824 <Get_SerialNum+0x44>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7ec:	4b0e      	ldr	r3, [pc, #56]	; (800b828 <Get_SerialNum+0x48>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b7f2:	4b0e      	ldr	r3, [pc, #56]	; (800b82c <Get_SerialNum+0x4c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b7f8:	68fa      	ldr	r2, [r7, #12]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d009      	beq.n	800b81a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b806:	2208      	movs	r2, #8
 800b808:	4909      	ldr	r1, [pc, #36]	; (800b830 <Get_SerialNum+0x50>)
 800b80a:	68f8      	ldr	r0, [r7, #12]
 800b80c:	f000 f814 	bl	800b838 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b810:	2204      	movs	r2, #4
 800b812:	4908      	ldr	r1, [pc, #32]	; (800b834 <Get_SerialNum+0x54>)
 800b814:	68b8      	ldr	r0, [r7, #8]
 800b816:	f000 f80f 	bl	800b838 <IntToUnicode>
  }
}
 800b81a:	bf00      	nop
 800b81c:	3710      	adds	r7, #16
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd80      	pop	{r7, pc}
 800b822:	bf00      	nop
 800b824:	1fff7a10 	.word	0x1fff7a10
 800b828:	1fff7a14 	.word	0x1fff7a14
 800b82c:	1fff7a18 	.word	0x1fff7a18
 800b830:	20000162 	.word	0x20000162
 800b834:	20000172 	.word	0x20000172

0800b838 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b838:	b480      	push	{r7}
 800b83a:	b087      	sub	sp, #28
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	4613      	mov	r3, r2
 800b844:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b84a:	2300      	movs	r3, #0
 800b84c:	75fb      	strb	r3, [r7, #23]
 800b84e:	e027      	b.n	800b8a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	0f1b      	lsrs	r3, r3, #28
 800b854:	2b09      	cmp	r3, #9
 800b856:	d80b      	bhi.n	800b870 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	0f1b      	lsrs	r3, r3, #28
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	7dfb      	ldrb	r3, [r7, #23]
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	4619      	mov	r1, r3
 800b864:	68bb      	ldr	r3, [r7, #8]
 800b866:	440b      	add	r3, r1
 800b868:	3230      	adds	r2, #48	; 0x30
 800b86a:	b2d2      	uxtb	r2, r2
 800b86c:	701a      	strb	r2, [r3, #0]
 800b86e:	e00a      	b.n	800b886 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	0f1b      	lsrs	r3, r3, #28
 800b874:	b2da      	uxtb	r2, r3
 800b876:	7dfb      	ldrb	r3, [r7, #23]
 800b878:	005b      	lsls	r3, r3, #1
 800b87a:	4619      	mov	r1, r3
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	440b      	add	r3, r1
 800b880:	3237      	adds	r2, #55	; 0x37
 800b882:	b2d2      	uxtb	r2, r2
 800b884:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	011b      	lsls	r3, r3, #4
 800b88a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b88c:	7dfb      	ldrb	r3, [r7, #23]
 800b88e:	005b      	lsls	r3, r3, #1
 800b890:	3301      	adds	r3, #1
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	4413      	add	r3, r2
 800b896:	2200      	movs	r2, #0
 800b898:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b89a:	7dfb      	ldrb	r3, [r7, #23]
 800b89c:	3301      	adds	r3, #1
 800b89e:	75fb      	strb	r3, [r7, #23]
 800b8a0:	7dfa      	ldrb	r2, [r7, #23]
 800b8a2:	79fb      	ldrb	r3, [r7, #7]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d3d3      	bcc.n	800b850 <IntToUnicode+0x18>
  }
}
 800b8a8:	bf00      	nop
 800b8aa:	371c      	adds	r7, #28
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr

0800b8b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b08a      	sub	sp, #40	; 0x28
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8bc:	f107 0314 	add.w	r3, r7, #20
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	601a      	str	r2, [r3, #0]
 800b8c4:	605a      	str	r2, [r3, #4]
 800b8c6:	609a      	str	r2, [r3, #8]
 800b8c8:	60da      	str	r2, [r3, #12]
 800b8ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8d4:	d147      	bne.n	800b966 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	613b      	str	r3, [r7, #16]
 800b8da:	4b25      	ldr	r3, [pc, #148]	; (800b970 <HAL_PCD_MspInit+0xbc>)
 800b8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8de:	4a24      	ldr	r2, [pc, #144]	; (800b970 <HAL_PCD_MspInit+0xbc>)
 800b8e0:	f043 0301 	orr.w	r3, r3, #1
 800b8e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b8e6:	4b22      	ldr	r3, [pc, #136]	; (800b970 <HAL_PCD_MspInit+0xbc>)
 800b8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	613b      	str	r3, [r7, #16]
 800b8f0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b8f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b900:	f107 0314 	add.w	r3, r7, #20
 800b904:	4619      	mov	r1, r3
 800b906:	481b      	ldr	r0, [pc, #108]	; (800b974 <HAL_PCD_MspInit+0xc0>)
 800b908:	f7f6 f8ea 	bl	8001ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b90c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b912:	2302      	movs	r3, #2
 800b914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b916:	2300      	movs	r3, #0
 800b918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b91a:	2303      	movs	r3, #3
 800b91c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b91e:	230a      	movs	r3, #10
 800b920:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b922:	f107 0314 	add.w	r3, r7, #20
 800b926:	4619      	mov	r1, r3
 800b928:	4812      	ldr	r0, [pc, #72]	; (800b974 <HAL_PCD_MspInit+0xc0>)
 800b92a:	f7f6 f8d9 	bl	8001ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b92e:	4b10      	ldr	r3, [pc, #64]	; (800b970 <HAL_PCD_MspInit+0xbc>)
 800b930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b932:	4a0f      	ldr	r2, [pc, #60]	; (800b970 <HAL_PCD_MspInit+0xbc>)
 800b934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b938:	6353      	str	r3, [r2, #52]	; 0x34
 800b93a:	2300      	movs	r3, #0
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	4b0c      	ldr	r3, [pc, #48]	; (800b970 <HAL_PCD_MspInit+0xbc>)
 800b940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b942:	4a0b      	ldr	r2, [pc, #44]	; (800b970 <HAL_PCD_MspInit+0xbc>)
 800b944:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b948:	6453      	str	r3, [r2, #68]	; 0x44
 800b94a:	4b09      	ldr	r3, [pc, #36]	; (800b970 <HAL_PCD_MspInit+0xbc>)
 800b94c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b94e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b952:	60fb      	str	r3, [r7, #12]
 800b954:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b956:	2200      	movs	r2, #0
 800b958:	2100      	movs	r1, #0
 800b95a:	2043      	movs	r0, #67	; 0x43
 800b95c:	f7f5 fced 	bl	800133a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b960:	2043      	movs	r0, #67	; 0x43
 800b962:	f7f5 fd06 	bl	8001372 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b966:	bf00      	nop
 800b968:	3728      	adds	r7, #40	; 0x28
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	40023800 	.word	0x40023800
 800b974:	40020000 	.word	0x40020000

0800b978 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b082      	sub	sp, #8
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b98c:	4619      	mov	r1, r3
 800b98e:	4610      	mov	r0, r2
 800b990:	f7fc fafe 	bl	8007f90 <USBD_LL_SetupStage>
}
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	460b      	mov	r3, r1
 800b9a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b9ae:	78fa      	ldrb	r2, [r7, #3]
 800b9b0:	6879      	ldr	r1, [r7, #4]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	00db      	lsls	r3, r3, #3
 800b9b6:	1a9b      	subs	r3, r3, r2
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	440b      	add	r3, r1
 800b9bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	78fb      	ldrb	r3, [r7, #3]
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	f7fc fb2e 	bl	8008026 <USBD_LL_DataOutStage>
}
 800b9ca:	bf00      	nop
 800b9cc:	3708      	adds	r7, #8
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b082      	sub	sp, #8
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
 800b9da:	460b      	mov	r3, r1
 800b9dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b9e4:	78fa      	ldrb	r2, [r7, #3]
 800b9e6:	6879      	ldr	r1, [r7, #4]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	1a9b      	subs	r3, r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	440b      	add	r3, r1
 800b9f2:	3348      	adds	r3, #72	; 0x48
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	78fb      	ldrb	r3, [r7, #3]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	f7fc fb85 	bl	8008108 <USBD_LL_DataInStage>
}
 800b9fe:	bf00      	nop
 800ba00:	3708      	adds	r7, #8
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b082      	sub	sp, #8
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fc fc93 	bl	8008340 <USBD_LL_SOF>
}
 800ba1a:	bf00      	nop
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	68db      	ldr	r3, [r3, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d102      	bne.n	800ba3c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ba36:	2300      	movs	r3, #0
 800ba38:	73fb      	strb	r3, [r7, #15]
 800ba3a:	e008      	b.n	800ba4e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	68db      	ldr	r3, [r3, #12]
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d102      	bne.n	800ba4a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ba44:	2301      	movs	r3, #1
 800ba46:	73fb      	strb	r3, [r7, #15]
 800ba48:	e001      	b.n	800ba4e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ba4a:	f7f5 f8cd 	bl	8000be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba54:	7bfa      	ldrb	r2, [r7, #15]
 800ba56:	4611      	mov	r1, r2
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fc fc3b 	bl	80082d4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7fc fbf4 	bl	8008252 <USBD_LL_Reset>
}
 800ba6a:	bf00      	nop
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
	...

0800ba74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7fc fc36 	bl	80082f4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	6812      	ldr	r2, [r2, #0]
 800ba96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba9a:	f043 0301 	orr.w	r3, r3, #1
 800ba9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6a1b      	ldr	r3, [r3, #32]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d005      	beq.n	800bab4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800baa8:	4b04      	ldr	r3, [pc, #16]	; (800babc <HAL_PCD_SuspendCallback+0x48>)
 800baaa:	691b      	ldr	r3, [r3, #16]
 800baac:	4a03      	ldr	r2, [pc, #12]	; (800babc <HAL_PCD_SuspendCallback+0x48>)
 800baae:	f043 0306 	orr.w	r3, r3, #6
 800bab2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bab4:	bf00      	nop
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	e000ed00 	.word	0xe000ed00

0800bac0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fc fc25 	bl	800831e <USBD_LL_Resume>
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	460b      	mov	r3, r1
 800bae6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800baee:	78fa      	ldrb	r2, [r7, #3]
 800baf0:	4611      	mov	r1, r2
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fc fc4b 	bl	800838e <USBD_LL_IsoOUTIncomplete>
}
 800baf8:	bf00      	nop
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b082      	sub	sp, #8
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb12:	78fa      	ldrb	r2, [r7, #3]
 800bb14:	4611      	mov	r1, r2
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fc fc2c 	bl	8008374 <USBD_LL_IsoINIncomplete>
}
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fc fc38 	bl	80083a8 <USBD_LL_DevConnected>
}
 800bb38:	bf00      	nop
 800bb3a:	3708      	adds	r7, #8
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f7fc fc35 	bl	80083be <USBD_LL_DevDisconnected>
}
 800bb54:	bf00      	nop
 800bb56:	3708      	adds	r7, #8
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d13c      	bne.n	800bbe6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bb6c:	4a20      	ldr	r2, [pc, #128]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a1e      	ldr	r2, [pc, #120]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bb78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bb7c:	4b1c      	ldr	r3, [pc, #112]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bb7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bb82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bb84:	4b1a      	ldr	r3, [pc, #104]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bb86:	2204      	movs	r2, #4
 800bb88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bb8a:	4b19      	ldr	r3, [pc, #100]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bb8c:	2202      	movs	r2, #2
 800bb8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bb90:	4b17      	ldr	r3, [pc, #92]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bb96:	4b16      	ldr	r3, [pc, #88]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bb98:	2202      	movs	r2, #2
 800bb9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bb9c:	4b14      	ldr	r3, [pc, #80]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bb9e:	2200      	movs	r2, #0
 800bba0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bba2:	4b13      	ldr	r3, [pc, #76]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bba8:	4b11      	ldr	r3, [pc, #68]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bbaa:	2200      	movs	r2, #0
 800bbac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800bbae:	4b10      	ldr	r3, [pc, #64]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bbb4:	4b0e      	ldr	r3, [pc, #56]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bbba:	480d      	ldr	r0, [pc, #52]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bbbc:	f7f6 faae 	bl	800211c <HAL_PCD_Init>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bbc6:	f7f5 f80f 	bl	8000be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bbca:	2180      	movs	r1, #128	; 0x80
 800bbcc:	4808      	ldr	r0, [pc, #32]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bbce:	f7f7 fc12 	bl	80033f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bbd2:	2240      	movs	r2, #64	; 0x40
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	4806      	ldr	r0, [pc, #24]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bbd8:	f7f7 fbc6 	bl	8003368 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bbdc:	2280      	movs	r2, #128	; 0x80
 800bbde:	2101      	movs	r1, #1
 800bbe0:	4803      	ldr	r0, [pc, #12]	; (800bbf0 <USBD_LL_Init+0x94>)
 800bbe2:	f7f7 fbc1 	bl	8003368 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bbe6:	2300      	movs	r3, #0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3708      	adds	r7, #8
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20004d24 	.word	0x20004d24

0800bbf4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc00:	2300      	movs	r3, #0
 800bc02:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f6 fba3 	bl	8002356 <HAL_PCD_Start>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 f92e 	bl	800be78 <USBD_Get_USB_Status>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bc20:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b084      	sub	sp, #16
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	4608      	mov	r0, r1
 800bc34:	4611      	mov	r1, r2
 800bc36:	461a      	mov	r2, r3
 800bc38:	4603      	mov	r3, r0
 800bc3a:	70fb      	strb	r3, [r7, #3]
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	70bb      	strb	r3, [r7, #2]
 800bc40:	4613      	mov	r3, r2
 800bc42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bc52:	78bb      	ldrb	r3, [r7, #2]
 800bc54:	883a      	ldrh	r2, [r7, #0]
 800bc56:	78f9      	ldrb	r1, [r7, #3]
 800bc58:	f7f6 ff78 	bl	8002b4c <HAL_PCD_EP_Open>
 800bc5c:	4603      	mov	r3, r0
 800bc5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc60:	7bfb      	ldrb	r3, [r7, #15]
 800bc62:	4618      	mov	r0, r3
 800bc64:	f000 f908 	bl	800be78 <USBD_Get_USB_Status>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bc6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3710      	adds	r7, #16
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}

0800bc76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc76:	b580      	push	{r7, lr}
 800bc78:	b084      	sub	sp, #16
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
 800bc7e:	460b      	mov	r3, r1
 800bc80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc86:	2300      	movs	r3, #0
 800bc88:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bc90:	78fa      	ldrb	r2, [r7, #3]
 800bc92:	4611      	mov	r1, r2
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7f6 ffc1 	bl	8002c1c <HAL_PCD_EP_Close>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	4618      	mov	r0, r3
 800bca2:	f000 f8e9 	bl	800be78 <USBD_Get_USB_Status>
 800bca6:	4603      	mov	r3, r0
 800bca8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800bcaa:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3710      	adds	r7, #16
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bcce:	78fa      	ldrb	r2, [r7, #3]
 800bcd0:	4611      	mov	r1, r2
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7f7 f899 	bl	8002e0a <HAL_PCD_EP_SetStall>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcdc:	7bfb      	ldrb	r3, [r7, #15]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 f8ca 	bl	800be78 <USBD_Get_USB_Status>
 800bce4:	4603      	mov	r3, r0
 800bce6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bce8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd02:	2300      	movs	r3, #0
 800bd04:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bd0c:	78fa      	ldrb	r2, [r7, #3]
 800bd0e:	4611      	mov	r1, r2
 800bd10:	4618      	mov	r0, r3
 800bd12:	f7f7 f8de 	bl	8002ed2 <HAL_PCD_EP_ClrStall>
 800bd16:	4603      	mov	r3, r0
 800bd18:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800bd1a:	7bfb      	ldrb	r3, [r7, #15]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f000 f8ab 	bl	800be78 <USBD_Get_USB_Status>
 800bd22:	4603      	mov	r3, r0
 800bd24:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800bd26:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b085      	sub	sp, #20
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bd42:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bd44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	da0b      	bge.n	800bd64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bd4c:	78fb      	ldrb	r3, [r7, #3]
 800bd4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd52:	68f9      	ldr	r1, [r7, #12]
 800bd54:	4613      	mov	r3, r2
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	1a9b      	subs	r3, r3, r2
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	440b      	add	r3, r1
 800bd5e:	333e      	adds	r3, #62	; 0x3e
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	e00b      	b.n	800bd7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bd64:	78fb      	ldrb	r3, [r7, #3]
 800bd66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd6a:	68f9      	ldr	r1, [r7, #12]
 800bd6c:	4613      	mov	r3, r2
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	1a9b      	subs	r3, r3, r2
 800bd72:	009b      	lsls	r3, r3, #2
 800bd74:	440b      	add	r3, r1
 800bd76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bd7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3714      	adds	r7, #20
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bda2:	78fa      	ldrb	r2, [r7, #3]
 800bda4:	4611      	mov	r1, r2
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7f6 feab 	bl	8002b02 <HAL_PCD_SetAddress>
 800bdac:	4603      	mov	r3, r0
 800bdae:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdb0:	7bfb      	ldrb	r3, [r7, #15]
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 f860 	bl	800be78 <USBD_Get_USB_Status>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bdbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	3710      	adds	r7, #16
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	bd80      	pop	{r7, pc}

0800bdc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b086      	sub	sp, #24
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	60f8      	str	r0, [r7, #12]
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	461a      	mov	r2, r3
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	72fb      	strb	r3, [r7, #11]
 800bdd6:	4613      	mov	r3, r2
 800bdd8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdde:	2300      	movs	r3, #0
 800bde0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bde8:	893b      	ldrh	r3, [r7, #8]
 800bdea:	7af9      	ldrb	r1, [r7, #11]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	f7f6 ffc2 	bl	8002d76 <HAL_PCD_EP_Transmit>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bdf6:	7dfb      	ldrb	r3, [r7, #23]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 f83d 	bl	800be78 <USBD_Get_USB_Status>
 800bdfe:	4603      	mov	r3, r0
 800be00:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800be02:	7dbb      	ldrb	r3, [r7, #22]
}
 800be04:	4618      	mov	r0, r3
 800be06:	3718      	adds	r7, #24
 800be08:	46bd      	mov	sp, r7
 800be0a:	bd80      	pop	{r7, pc}

0800be0c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b086      	sub	sp, #24
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	607a      	str	r2, [r7, #4]
 800be16:	461a      	mov	r2, r3
 800be18:	460b      	mov	r3, r1
 800be1a:	72fb      	strb	r3, [r7, #11]
 800be1c:	4613      	mov	r3, r2
 800be1e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be24:	2300      	movs	r3, #0
 800be26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800be2e:	893b      	ldrh	r3, [r7, #8]
 800be30:	7af9      	ldrb	r1, [r7, #11]
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	f7f6 ff3c 	bl	8002cb0 <HAL_PCD_EP_Receive>
 800be38:	4603      	mov	r3, r0
 800be3a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800be3c:	7dfb      	ldrb	r3, [r7, #23]
 800be3e:	4618      	mov	r0, r3
 800be40:	f000 f81a 	bl	800be78 <USBD_Get_USB_Status>
 800be44:	4603      	mov	r3, r0
 800be46:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800be48:	7dbb      	ldrb	r3, [r7, #22]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b082      	sub	sp, #8
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
 800be5a:	460b      	mov	r3, r1
 800be5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800be64:	78fa      	ldrb	r2, [r7, #3]
 800be66:	4611      	mov	r1, r2
 800be68:	4618      	mov	r0, r3
 800be6a:	f7f6 ff6c 	bl	8002d46 <HAL_PCD_EP_GetRxCount>
 800be6e:	4603      	mov	r3, r0
}
 800be70:	4618      	mov	r0, r3
 800be72:	3708      	adds	r7, #8
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be82:	2300      	movs	r3, #0
 800be84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be86:	79fb      	ldrb	r3, [r7, #7]
 800be88:	2b03      	cmp	r3, #3
 800be8a:	d817      	bhi.n	800bebc <USBD_Get_USB_Status+0x44>
 800be8c:	a201      	add	r2, pc, #4	; (adr r2, 800be94 <USBD_Get_USB_Status+0x1c>)
 800be8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be92:	bf00      	nop
 800be94:	0800bea5 	.word	0x0800bea5
 800be98:	0800beab 	.word	0x0800beab
 800be9c:	0800beb1 	.word	0x0800beb1
 800bea0:	0800beb7 	.word	0x0800beb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	73fb      	strb	r3, [r7, #15]
    break;
 800bea8:	e00b      	b.n	800bec2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800beaa:	2302      	movs	r3, #2
 800beac:	73fb      	strb	r3, [r7, #15]
    break;
 800beae:	e008      	b.n	800bec2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800beb0:	2301      	movs	r3, #1
 800beb2:	73fb      	strb	r3, [r7, #15]
    break;
 800beb4:	e005      	b.n	800bec2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800beb6:	2302      	movs	r3, #2
 800beb8:	73fb      	strb	r3, [r7, #15]
    break;
 800beba:	e002      	b.n	800bec2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bebc:	2302      	movs	r3, #2
 800bebe:	73fb      	strb	r3, [r7, #15]
    break;
 800bec0:	bf00      	nop
  }
  return usb_status;
 800bec2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <__errno>:
 800bed0:	4b01      	ldr	r3, [pc, #4]	; (800bed8 <__errno+0x8>)
 800bed2:	6818      	ldr	r0, [r3, #0]
 800bed4:	4770      	bx	lr
 800bed6:	bf00      	nop
 800bed8:	2000017c 	.word	0x2000017c

0800bedc <__libc_init_array>:
 800bedc:	b570      	push	{r4, r5, r6, lr}
 800bede:	4e0d      	ldr	r6, [pc, #52]	; (800bf14 <__libc_init_array+0x38>)
 800bee0:	4c0d      	ldr	r4, [pc, #52]	; (800bf18 <__libc_init_array+0x3c>)
 800bee2:	1ba4      	subs	r4, r4, r6
 800bee4:	10a4      	asrs	r4, r4, #2
 800bee6:	2500      	movs	r5, #0
 800bee8:	42a5      	cmp	r5, r4
 800beea:	d109      	bne.n	800bf00 <__libc_init_array+0x24>
 800beec:	4e0b      	ldr	r6, [pc, #44]	; (800bf1c <__libc_init_array+0x40>)
 800beee:	4c0c      	ldr	r4, [pc, #48]	; (800bf20 <__libc_init_array+0x44>)
 800bef0:	f000 fc38 	bl	800c764 <_init>
 800bef4:	1ba4      	subs	r4, r4, r6
 800bef6:	10a4      	asrs	r4, r4, #2
 800bef8:	2500      	movs	r5, #0
 800befa:	42a5      	cmp	r5, r4
 800befc:	d105      	bne.n	800bf0a <__libc_init_array+0x2e>
 800befe:	bd70      	pop	{r4, r5, r6, pc}
 800bf00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf04:	4798      	blx	r3
 800bf06:	3501      	adds	r5, #1
 800bf08:	e7ee      	b.n	800bee8 <__libc_init_array+0xc>
 800bf0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bf0e:	4798      	blx	r3
 800bf10:	3501      	adds	r5, #1
 800bf12:	e7f2      	b.n	800befa <__libc_init_array+0x1e>
 800bf14:	0800c970 	.word	0x0800c970
 800bf18:	0800c970 	.word	0x0800c970
 800bf1c:	0800c970 	.word	0x0800c970
 800bf20:	0800c974 	.word	0x0800c974

0800bf24 <malloc>:
 800bf24:	4b02      	ldr	r3, [pc, #8]	; (800bf30 <malloc+0xc>)
 800bf26:	4601      	mov	r1, r0
 800bf28:	6818      	ldr	r0, [r3, #0]
 800bf2a:	f000 b86d 	b.w	800c008 <_malloc_r>
 800bf2e:	bf00      	nop
 800bf30:	2000017c 	.word	0x2000017c

0800bf34 <free>:
 800bf34:	4b02      	ldr	r3, [pc, #8]	; (800bf40 <free+0xc>)
 800bf36:	4601      	mov	r1, r0
 800bf38:	6818      	ldr	r0, [r3, #0]
 800bf3a:	f000 b817 	b.w	800bf6c <_free_r>
 800bf3e:	bf00      	nop
 800bf40:	2000017c 	.word	0x2000017c

0800bf44 <memcpy>:
 800bf44:	b510      	push	{r4, lr}
 800bf46:	1e43      	subs	r3, r0, #1
 800bf48:	440a      	add	r2, r1
 800bf4a:	4291      	cmp	r1, r2
 800bf4c:	d100      	bne.n	800bf50 <memcpy+0xc>
 800bf4e:	bd10      	pop	{r4, pc}
 800bf50:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf54:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf58:	e7f7      	b.n	800bf4a <memcpy+0x6>

0800bf5a <memset>:
 800bf5a:	4402      	add	r2, r0
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	d100      	bne.n	800bf64 <memset+0xa>
 800bf62:	4770      	bx	lr
 800bf64:	f803 1b01 	strb.w	r1, [r3], #1
 800bf68:	e7f9      	b.n	800bf5e <memset+0x4>
	...

0800bf6c <_free_r>:
 800bf6c:	b538      	push	{r3, r4, r5, lr}
 800bf6e:	4605      	mov	r5, r0
 800bf70:	2900      	cmp	r1, #0
 800bf72:	d045      	beq.n	800c000 <_free_r+0x94>
 800bf74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf78:	1f0c      	subs	r4, r1, #4
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	bfb8      	it	lt
 800bf7e:	18e4      	addlt	r4, r4, r3
 800bf80:	f000 f8cc 	bl	800c11c <__malloc_lock>
 800bf84:	4a1f      	ldr	r2, [pc, #124]	; (800c004 <_free_r+0x98>)
 800bf86:	6813      	ldr	r3, [r2, #0]
 800bf88:	4610      	mov	r0, r2
 800bf8a:	b933      	cbnz	r3, 800bf9a <_free_r+0x2e>
 800bf8c:	6063      	str	r3, [r4, #4]
 800bf8e:	6014      	str	r4, [r2, #0]
 800bf90:	4628      	mov	r0, r5
 800bf92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf96:	f000 b8c2 	b.w	800c11e <__malloc_unlock>
 800bf9a:	42a3      	cmp	r3, r4
 800bf9c:	d90c      	bls.n	800bfb8 <_free_r+0x4c>
 800bf9e:	6821      	ldr	r1, [r4, #0]
 800bfa0:	1862      	adds	r2, r4, r1
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	bf04      	itt	eq
 800bfa6:	681a      	ldreq	r2, [r3, #0]
 800bfa8:	685b      	ldreq	r3, [r3, #4]
 800bfaa:	6063      	str	r3, [r4, #4]
 800bfac:	bf04      	itt	eq
 800bfae:	1852      	addeq	r2, r2, r1
 800bfb0:	6022      	streq	r2, [r4, #0]
 800bfb2:	6004      	str	r4, [r0, #0]
 800bfb4:	e7ec      	b.n	800bf90 <_free_r+0x24>
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	685a      	ldr	r2, [r3, #4]
 800bfba:	b10a      	cbz	r2, 800bfc0 <_free_r+0x54>
 800bfbc:	42a2      	cmp	r2, r4
 800bfbe:	d9fa      	bls.n	800bfb6 <_free_r+0x4a>
 800bfc0:	6819      	ldr	r1, [r3, #0]
 800bfc2:	1858      	adds	r0, r3, r1
 800bfc4:	42a0      	cmp	r0, r4
 800bfc6:	d10b      	bne.n	800bfe0 <_free_r+0x74>
 800bfc8:	6820      	ldr	r0, [r4, #0]
 800bfca:	4401      	add	r1, r0
 800bfcc:	1858      	adds	r0, r3, r1
 800bfce:	4282      	cmp	r2, r0
 800bfd0:	6019      	str	r1, [r3, #0]
 800bfd2:	d1dd      	bne.n	800bf90 <_free_r+0x24>
 800bfd4:	6810      	ldr	r0, [r2, #0]
 800bfd6:	6852      	ldr	r2, [r2, #4]
 800bfd8:	605a      	str	r2, [r3, #4]
 800bfda:	4401      	add	r1, r0
 800bfdc:	6019      	str	r1, [r3, #0]
 800bfde:	e7d7      	b.n	800bf90 <_free_r+0x24>
 800bfe0:	d902      	bls.n	800bfe8 <_free_r+0x7c>
 800bfe2:	230c      	movs	r3, #12
 800bfe4:	602b      	str	r3, [r5, #0]
 800bfe6:	e7d3      	b.n	800bf90 <_free_r+0x24>
 800bfe8:	6820      	ldr	r0, [r4, #0]
 800bfea:	1821      	adds	r1, r4, r0
 800bfec:	428a      	cmp	r2, r1
 800bfee:	bf04      	itt	eq
 800bff0:	6811      	ldreq	r1, [r2, #0]
 800bff2:	6852      	ldreq	r2, [r2, #4]
 800bff4:	6062      	str	r2, [r4, #4]
 800bff6:	bf04      	itt	eq
 800bff8:	1809      	addeq	r1, r1, r0
 800bffa:	6021      	streq	r1, [r4, #0]
 800bffc:	605c      	str	r4, [r3, #4]
 800bffe:	e7c7      	b.n	800bf90 <_free_r+0x24>
 800c000:	bd38      	pop	{r3, r4, r5, pc}
 800c002:	bf00      	nop
 800c004:	20001678 	.word	0x20001678

0800c008 <_malloc_r>:
 800c008:	b570      	push	{r4, r5, r6, lr}
 800c00a:	1ccd      	adds	r5, r1, #3
 800c00c:	f025 0503 	bic.w	r5, r5, #3
 800c010:	3508      	adds	r5, #8
 800c012:	2d0c      	cmp	r5, #12
 800c014:	bf38      	it	cc
 800c016:	250c      	movcc	r5, #12
 800c018:	2d00      	cmp	r5, #0
 800c01a:	4606      	mov	r6, r0
 800c01c:	db01      	blt.n	800c022 <_malloc_r+0x1a>
 800c01e:	42a9      	cmp	r1, r5
 800c020:	d903      	bls.n	800c02a <_malloc_r+0x22>
 800c022:	230c      	movs	r3, #12
 800c024:	6033      	str	r3, [r6, #0]
 800c026:	2000      	movs	r0, #0
 800c028:	bd70      	pop	{r4, r5, r6, pc}
 800c02a:	f000 f877 	bl	800c11c <__malloc_lock>
 800c02e:	4a21      	ldr	r2, [pc, #132]	; (800c0b4 <_malloc_r+0xac>)
 800c030:	6814      	ldr	r4, [r2, #0]
 800c032:	4621      	mov	r1, r4
 800c034:	b991      	cbnz	r1, 800c05c <_malloc_r+0x54>
 800c036:	4c20      	ldr	r4, [pc, #128]	; (800c0b8 <_malloc_r+0xb0>)
 800c038:	6823      	ldr	r3, [r4, #0]
 800c03a:	b91b      	cbnz	r3, 800c044 <_malloc_r+0x3c>
 800c03c:	4630      	mov	r0, r6
 800c03e:	f000 f83d 	bl	800c0bc <_sbrk_r>
 800c042:	6020      	str	r0, [r4, #0]
 800c044:	4629      	mov	r1, r5
 800c046:	4630      	mov	r0, r6
 800c048:	f000 f838 	bl	800c0bc <_sbrk_r>
 800c04c:	1c43      	adds	r3, r0, #1
 800c04e:	d124      	bne.n	800c09a <_malloc_r+0x92>
 800c050:	230c      	movs	r3, #12
 800c052:	6033      	str	r3, [r6, #0]
 800c054:	4630      	mov	r0, r6
 800c056:	f000 f862 	bl	800c11e <__malloc_unlock>
 800c05a:	e7e4      	b.n	800c026 <_malloc_r+0x1e>
 800c05c:	680b      	ldr	r3, [r1, #0]
 800c05e:	1b5b      	subs	r3, r3, r5
 800c060:	d418      	bmi.n	800c094 <_malloc_r+0x8c>
 800c062:	2b0b      	cmp	r3, #11
 800c064:	d90f      	bls.n	800c086 <_malloc_r+0x7e>
 800c066:	600b      	str	r3, [r1, #0]
 800c068:	50cd      	str	r5, [r1, r3]
 800c06a:	18cc      	adds	r4, r1, r3
 800c06c:	4630      	mov	r0, r6
 800c06e:	f000 f856 	bl	800c11e <__malloc_unlock>
 800c072:	f104 000b 	add.w	r0, r4, #11
 800c076:	1d23      	adds	r3, r4, #4
 800c078:	f020 0007 	bic.w	r0, r0, #7
 800c07c:	1ac3      	subs	r3, r0, r3
 800c07e:	d0d3      	beq.n	800c028 <_malloc_r+0x20>
 800c080:	425a      	negs	r2, r3
 800c082:	50e2      	str	r2, [r4, r3]
 800c084:	e7d0      	b.n	800c028 <_malloc_r+0x20>
 800c086:	428c      	cmp	r4, r1
 800c088:	684b      	ldr	r3, [r1, #4]
 800c08a:	bf16      	itet	ne
 800c08c:	6063      	strne	r3, [r4, #4]
 800c08e:	6013      	streq	r3, [r2, #0]
 800c090:	460c      	movne	r4, r1
 800c092:	e7eb      	b.n	800c06c <_malloc_r+0x64>
 800c094:	460c      	mov	r4, r1
 800c096:	6849      	ldr	r1, [r1, #4]
 800c098:	e7cc      	b.n	800c034 <_malloc_r+0x2c>
 800c09a:	1cc4      	adds	r4, r0, #3
 800c09c:	f024 0403 	bic.w	r4, r4, #3
 800c0a0:	42a0      	cmp	r0, r4
 800c0a2:	d005      	beq.n	800c0b0 <_malloc_r+0xa8>
 800c0a4:	1a21      	subs	r1, r4, r0
 800c0a6:	4630      	mov	r0, r6
 800c0a8:	f000 f808 	bl	800c0bc <_sbrk_r>
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	d0cf      	beq.n	800c050 <_malloc_r+0x48>
 800c0b0:	6025      	str	r5, [r4, #0]
 800c0b2:	e7db      	b.n	800c06c <_malloc_r+0x64>
 800c0b4:	20001678 	.word	0x20001678
 800c0b8:	2000167c 	.word	0x2000167c

0800c0bc <_sbrk_r>:
 800c0bc:	b538      	push	{r3, r4, r5, lr}
 800c0be:	4c06      	ldr	r4, [pc, #24]	; (800c0d8 <_sbrk_r+0x1c>)
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	4605      	mov	r5, r0
 800c0c4:	4608      	mov	r0, r1
 800c0c6:	6023      	str	r3, [r4, #0]
 800c0c8:	f7f4 ff5c 	bl	8000f84 <_sbrk>
 800c0cc:	1c43      	adds	r3, r0, #1
 800c0ce:	d102      	bne.n	800c0d6 <_sbrk_r+0x1a>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	b103      	cbz	r3, 800c0d6 <_sbrk_r+0x1a>
 800c0d4:	602b      	str	r3, [r5, #0]
 800c0d6:	bd38      	pop	{r3, r4, r5, pc}
 800c0d8:	2000512c 	.word	0x2000512c

0800c0dc <siprintf>:
 800c0dc:	b40e      	push	{r1, r2, r3}
 800c0de:	b500      	push	{lr}
 800c0e0:	b09c      	sub	sp, #112	; 0x70
 800c0e2:	ab1d      	add	r3, sp, #116	; 0x74
 800c0e4:	9002      	str	r0, [sp, #8]
 800c0e6:	9006      	str	r0, [sp, #24]
 800c0e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0ec:	4809      	ldr	r0, [pc, #36]	; (800c114 <siprintf+0x38>)
 800c0ee:	9107      	str	r1, [sp, #28]
 800c0f0:	9104      	str	r1, [sp, #16]
 800c0f2:	4909      	ldr	r1, [pc, #36]	; (800c118 <siprintf+0x3c>)
 800c0f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0f8:	9105      	str	r1, [sp, #20]
 800c0fa:	6800      	ldr	r0, [r0, #0]
 800c0fc:	9301      	str	r3, [sp, #4]
 800c0fe:	a902      	add	r1, sp, #8
 800c100:	f000 f868 	bl	800c1d4 <_svfiprintf_r>
 800c104:	9b02      	ldr	r3, [sp, #8]
 800c106:	2200      	movs	r2, #0
 800c108:	701a      	strb	r2, [r3, #0]
 800c10a:	b01c      	add	sp, #112	; 0x70
 800c10c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c110:	b003      	add	sp, #12
 800c112:	4770      	bx	lr
 800c114:	2000017c 	.word	0x2000017c
 800c118:	ffff0208 	.word	0xffff0208

0800c11c <__malloc_lock>:
 800c11c:	4770      	bx	lr

0800c11e <__malloc_unlock>:
 800c11e:	4770      	bx	lr

0800c120 <__ssputs_r>:
 800c120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c124:	688e      	ldr	r6, [r1, #8]
 800c126:	429e      	cmp	r6, r3
 800c128:	4682      	mov	sl, r0
 800c12a:	460c      	mov	r4, r1
 800c12c:	4690      	mov	r8, r2
 800c12e:	4699      	mov	r9, r3
 800c130:	d837      	bhi.n	800c1a2 <__ssputs_r+0x82>
 800c132:	898a      	ldrh	r2, [r1, #12]
 800c134:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c138:	d031      	beq.n	800c19e <__ssputs_r+0x7e>
 800c13a:	6825      	ldr	r5, [r4, #0]
 800c13c:	6909      	ldr	r1, [r1, #16]
 800c13e:	1a6f      	subs	r7, r5, r1
 800c140:	6965      	ldr	r5, [r4, #20]
 800c142:	2302      	movs	r3, #2
 800c144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c148:	fb95 f5f3 	sdiv	r5, r5, r3
 800c14c:	f109 0301 	add.w	r3, r9, #1
 800c150:	443b      	add	r3, r7
 800c152:	429d      	cmp	r5, r3
 800c154:	bf38      	it	cc
 800c156:	461d      	movcc	r5, r3
 800c158:	0553      	lsls	r3, r2, #21
 800c15a:	d530      	bpl.n	800c1be <__ssputs_r+0x9e>
 800c15c:	4629      	mov	r1, r5
 800c15e:	f7ff ff53 	bl	800c008 <_malloc_r>
 800c162:	4606      	mov	r6, r0
 800c164:	b950      	cbnz	r0, 800c17c <__ssputs_r+0x5c>
 800c166:	230c      	movs	r3, #12
 800c168:	f8ca 3000 	str.w	r3, [sl]
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c172:	81a3      	strh	r3, [r4, #12]
 800c174:	f04f 30ff 	mov.w	r0, #4294967295
 800c178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c17c:	463a      	mov	r2, r7
 800c17e:	6921      	ldr	r1, [r4, #16]
 800c180:	f7ff fee0 	bl	800bf44 <memcpy>
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c18a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c18e:	81a3      	strh	r3, [r4, #12]
 800c190:	6126      	str	r6, [r4, #16]
 800c192:	6165      	str	r5, [r4, #20]
 800c194:	443e      	add	r6, r7
 800c196:	1bed      	subs	r5, r5, r7
 800c198:	6026      	str	r6, [r4, #0]
 800c19a:	60a5      	str	r5, [r4, #8]
 800c19c:	464e      	mov	r6, r9
 800c19e:	454e      	cmp	r6, r9
 800c1a0:	d900      	bls.n	800c1a4 <__ssputs_r+0x84>
 800c1a2:	464e      	mov	r6, r9
 800c1a4:	4632      	mov	r2, r6
 800c1a6:	4641      	mov	r1, r8
 800c1a8:	6820      	ldr	r0, [r4, #0]
 800c1aa:	f000 fa93 	bl	800c6d4 <memmove>
 800c1ae:	68a3      	ldr	r3, [r4, #8]
 800c1b0:	1b9b      	subs	r3, r3, r6
 800c1b2:	60a3      	str	r3, [r4, #8]
 800c1b4:	6823      	ldr	r3, [r4, #0]
 800c1b6:	441e      	add	r6, r3
 800c1b8:	6026      	str	r6, [r4, #0]
 800c1ba:	2000      	movs	r0, #0
 800c1bc:	e7dc      	b.n	800c178 <__ssputs_r+0x58>
 800c1be:	462a      	mov	r2, r5
 800c1c0:	f000 faa1 	bl	800c706 <_realloc_r>
 800c1c4:	4606      	mov	r6, r0
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d1e2      	bne.n	800c190 <__ssputs_r+0x70>
 800c1ca:	6921      	ldr	r1, [r4, #16]
 800c1cc:	4650      	mov	r0, sl
 800c1ce:	f7ff fecd 	bl	800bf6c <_free_r>
 800c1d2:	e7c8      	b.n	800c166 <__ssputs_r+0x46>

0800c1d4 <_svfiprintf_r>:
 800c1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d8:	461d      	mov	r5, r3
 800c1da:	898b      	ldrh	r3, [r1, #12]
 800c1dc:	061f      	lsls	r7, r3, #24
 800c1de:	b09d      	sub	sp, #116	; 0x74
 800c1e0:	4680      	mov	r8, r0
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	4616      	mov	r6, r2
 800c1e6:	d50f      	bpl.n	800c208 <_svfiprintf_r+0x34>
 800c1e8:	690b      	ldr	r3, [r1, #16]
 800c1ea:	b96b      	cbnz	r3, 800c208 <_svfiprintf_r+0x34>
 800c1ec:	2140      	movs	r1, #64	; 0x40
 800c1ee:	f7ff ff0b 	bl	800c008 <_malloc_r>
 800c1f2:	6020      	str	r0, [r4, #0]
 800c1f4:	6120      	str	r0, [r4, #16]
 800c1f6:	b928      	cbnz	r0, 800c204 <_svfiprintf_r+0x30>
 800c1f8:	230c      	movs	r3, #12
 800c1fa:	f8c8 3000 	str.w	r3, [r8]
 800c1fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c202:	e0c8      	b.n	800c396 <_svfiprintf_r+0x1c2>
 800c204:	2340      	movs	r3, #64	; 0x40
 800c206:	6163      	str	r3, [r4, #20]
 800c208:	2300      	movs	r3, #0
 800c20a:	9309      	str	r3, [sp, #36]	; 0x24
 800c20c:	2320      	movs	r3, #32
 800c20e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c212:	2330      	movs	r3, #48	; 0x30
 800c214:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c218:	9503      	str	r5, [sp, #12]
 800c21a:	f04f 0b01 	mov.w	fp, #1
 800c21e:	4637      	mov	r7, r6
 800c220:	463d      	mov	r5, r7
 800c222:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c226:	b10b      	cbz	r3, 800c22c <_svfiprintf_r+0x58>
 800c228:	2b25      	cmp	r3, #37	; 0x25
 800c22a:	d13e      	bne.n	800c2aa <_svfiprintf_r+0xd6>
 800c22c:	ebb7 0a06 	subs.w	sl, r7, r6
 800c230:	d00b      	beq.n	800c24a <_svfiprintf_r+0x76>
 800c232:	4653      	mov	r3, sl
 800c234:	4632      	mov	r2, r6
 800c236:	4621      	mov	r1, r4
 800c238:	4640      	mov	r0, r8
 800c23a:	f7ff ff71 	bl	800c120 <__ssputs_r>
 800c23e:	3001      	adds	r0, #1
 800c240:	f000 80a4 	beq.w	800c38c <_svfiprintf_r+0x1b8>
 800c244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c246:	4453      	add	r3, sl
 800c248:	9309      	str	r3, [sp, #36]	; 0x24
 800c24a:	783b      	ldrb	r3, [r7, #0]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f000 809d 	beq.w	800c38c <_svfiprintf_r+0x1b8>
 800c252:	2300      	movs	r3, #0
 800c254:	f04f 32ff 	mov.w	r2, #4294967295
 800c258:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c25c:	9304      	str	r3, [sp, #16]
 800c25e:	9307      	str	r3, [sp, #28]
 800c260:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c264:	931a      	str	r3, [sp, #104]	; 0x68
 800c266:	462f      	mov	r7, r5
 800c268:	2205      	movs	r2, #5
 800c26a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c26e:	4850      	ldr	r0, [pc, #320]	; (800c3b0 <_svfiprintf_r+0x1dc>)
 800c270:	f7f3 ffb6 	bl	80001e0 <memchr>
 800c274:	9b04      	ldr	r3, [sp, #16]
 800c276:	b9d0      	cbnz	r0, 800c2ae <_svfiprintf_r+0xda>
 800c278:	06d9      	lsls	r1, r3, #27
 800c27a:	bf44      	itt	mi
 800c27c:	2220      	movmi	r2, #32
 800c27e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c282:	071a      	lsls	r2, r3, #28
 800c284:	bf44      	itt	mi
 800c286:	222b      	movmi	r2, #43	; 0x2b
 800c288:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c28c:	782a      	ldrb	r2, [r5, #0]
 800c28e:	2a2a      	cmp	r2, #42	; 0x2a
 800c290:	d015      	beq.n	800c2be <_svfiprintf_r+0xea>
 800c292:	9a07      	ldr	r2, [sp, #28]
 800c294:	462f      	mov	r7, r5
 800c296:	2000      	movs	r0, #0
 800c298:	250a      	movs	r5, #10
 800c29a:	4639      	mov	r1, r7
 800c29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2a0:	3b30      	subs	r3, #48	; 0x30
 800c2a2:	2b09      	cmp	r3, #9
 800c2a4:	d94d      	bls.n	800c342 <_svfiprintf_r+0x16e>
 800c2a6:	b1b8      	cbz	r0, 800c2d8 <_svfiprintf_r+0x104>
 800c2a8:	e00f      	b.n	800c2ca <_svfiprintf_r+0xf6>
 800c2aa:	462f      	mov	r7, r5
 800c2ac:	e7b8      	b.n	800c220 <_svfiprintf_r+0x4c>
 800c2ae:	4a40      	ldr	r2, [pc, #256]	; (800c3b0 <_svfiprintf_r+0x1dc>)
 800c2b0:	1a80      	subs	r0, r0, r2
 800c2b2:	fa0b f000 	lsl.w	r0, fp, r0
 800c2b6:	4318      	orrs	r0, r3
 800c2b8:	9004      	str	r0, [sp, #16]
 800c2ba:	463d      	mov	r5, r7
 800c2bc:	e7d3      	b.n	800c266 <_svfiprintf_r+0x92>
 800c2be:	9a03      	ldr	r2, [sp, #12]
 800c2c0:	1d11      	adds	r1, r2, #4
 800c2c2:	6812      	ldr	r2, [r2, #0]
 800c2c4:	9103      	str	r1, [sp, #12]
 800c2c6:	2a00      	cmp	r2, #0
 800c2c8:	db01      	blt.n	800c2ce <_svfiprintf_r+0xfa>
 800c2ca:	9207      	str	r2, [sp, #28]
 800c2cc:	e004      	b.n	800c2d8 <_svfiprintf_r+0x104>
 800c2ce:	4252      	negs	r2, r2
 800c2d0:	f043 0302 	orr.w	r3, r3, #2
 800c2d4:	9207      	str	r2, [sp, #28]
 800c2d6:	9304      	str	r3, [sp, #16]
 800c2d8:	783b      	ldrb	r3, [r7, #0]
 800c2da:	2b2e      	cmp	r3, #46	; 0x2e
 800c2dc:	d10c      	bne.n	800c2f8 <_svfiprintf_r+0x124>
 800c2de:	787b      	ldrb	r3, [r7, #1]
 800c2e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c2e2:	d133      	bne.n	800c34c <_svfiprintf_r+0x178>
 800c2e4:	9b03      	ldr	r3, [sp, #12]
 800c2e6:	1d1a      	adds	r2, r3, #4
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	9203      	str	r2, [sp, #12]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	bfb8      	it	lt
 800c2f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2f4:	3702      	adds	r7, #2
 800c2f6:	9305      	str	r3, [sp, #20]
 800c2f8:	4d2e      	ldr	r5, [pc, #184]	; (800c3b4 <_svfiprintf_r+0x1e0>)
 800c2fa:	7839      	ldrb	r1, [r7, #0]
 800c2fc:	2203      	movs	r2, #3
 800c2fe:	4628      	mov	r0, r5
 800c300:	f7f3 ff6e 	bl	80001e0 <memchr>
 800c304:	b138      	cbz	r0, 800c316 <_svfiprintf_r+0x142>
 800c306:	2340      	movs	r3, #64	; 0x40
 800c308:	1b40      	subs	r0, r0, r5
 800c30a:	fa03 f000 	lsl.w	r0, r3, r0
 800c30e:	9b04      	ldr	r3, [sp, #16]
 800c310:	4303      	orrs	r3, r0
 800c312:	3701      	adds	r7, #1
 800c314:	9304      	str	r3, [sp, #16]
 800c316:	7839      	ldrb	r1, [r7, #0]
 800c318:	4827      	ldr	r0, [pc, #156]	; (800c3b8 <_svfiprintf_r+0x1e4>)
 800c31a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c31e:	2206      	movs	r2, #6
 800c320:	1c7e      	adds	r6, r7, #1
 800c322:	f7f3 ff5d 	bl	80001e0 <memchr>
 800c326:	2800      	cmp	r0, #0
 800c328:	d038      	beq.n	800c39c <_svfiprintf_r+0x1c8>
 800c32a:	4b24      	ldr	r3, [pc, #144]	; (800c3bc <_svfiprintf_r+0x1e8>)
 800c32c:	bb13      	cbnz	r3, 800c374 <_svfiprintf_r+0x1a0>
 800c32e:	9b03      	ldr	r3, [sp, #12]
 800c330:	3307      	adds	r3, #7
 800c332:	f023 0307 	bic.w	r3, r3, #7
 800c336:	3308      	adds	r3, #8
 800c338:	9303      	str	r3, [sp, #12]
 800c33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c33c:	444b      	add	r3, r9
 800c33e:	9309      	str	r3, [sp, #36]	; 0x24
 800c340:	e76d      	b.n	800c21e <_svfiprintf_r+0x4a>
 800c342:	fb05 3202 	mla	r2, r5, r2, r3
 800c346:	2001      	movs	r0, #1
 800c348:	460f      	mov	r7, r1
 800c34a:	e7a6      	b.n	800c29a <_svfiprintf_r+0xc6>
 800c34c:	2300      	movs	r3, #0
 800c34e:	3701      	adds	r7, #1
 800c350:	9305      	str	r3, [sp, #20]
 800c352:	4619      	mov	r1, r3
 800c354:	250a      	movs	r5, #10
 800c356:	4638      	mov	r0, r7
 800c358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c35c:	3a30      	subs	r2, #48	; 0x30
 800c35e:	2a09      	cmp	r2, #9
 800c360:	d903      	bls.n	800c36a <_svfiprintf_r+0x196>
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0c8      	beq.n	800c2f8 <_svfiprintf_r+0x124>
 800c366:	9105      	str	r1, [sp, #20]
 800c368:	e7c6      	b.n	800c2f8 <_svfiprintf_r+0x124>
 800c36a:	fb05 2101 	mla	r1, r5, r1, r2
 800c36e:	2301      	movs	r3, #1
 800c370:	4607      	mov	r7, r0
 800c372:	e7f0      	b.n	800c356 <_svfiprintf_r+0x182>
 800c374:	ab03      	add	r3, sp, #12
 800c376:	9300      	str	r3, [sp, #0]
 800c378:	4622      	mov	r2, r4
 800c37a:	4b11      	ldr	r3, [pc, #68]	; (800c3c0 <_svfiprintf_r+0x1ec>)
 800c37c:	a904      	add	r1, sp, #16
 800c37e:	4640      	mov	r0, r8
 800c380:	f3af 8000 	nop.w
 800c384:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c388:	4681      	mov	r9, r0
 800c38a:	d1d6      	bne.n	800c33a <_svfiprintf_r+0x166>
 800c38c:	89a3      	ldrh	r3, [r4, #12]
 800c38e:	065b      	lsls	r3, r3, #25
 800c390:	f53f af35 	bmi.w	800c1fe <_svfiprintf_r+0x2a>
 800c394:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c396:	b01d      	add	sp, #116	; 0x74
 800c398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c39c:	ab03      	add	r3, sp, #12
 800c39e:	9300      	str	r3, [sp, #0]
 800c3a0:	4622      	mov	r2, r4
 800c3a2:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <_svfiprintf_r+0x1ec>)
 800c3a4:	a904      	add	r1, sp, #16
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	f000 f882 	bl	800c4b0 <_printf_i>
 800c3ac:	e7ea      	b.n	800c384 <_svfiprintf_r+0x1b0>
 800c3ae:	bf00      	nop
 800c3b0:	0800c934 	.word	0x0800c934
 800c3b4:	0800c93a 	.word	0x0800c93a
 800c3b8:	0800c93e 	.word	0x0800c93e
 800c3bc:	00000000 	.word	0x00000000
 800c3c0:	0800c121 	.word	0x0800c121

0800c3c4 <_printf_common>:
 800c3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c8:	4691      	mov	r9, r2
 800c3ca:	461f      	mov	r7, r3
 800c3cc:	688a      	ldr	r2, [r1, #8]
 800c3ce:	690b      	ldr	r3, [r1, #16]
 800c3d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	bfb8      	it	lt
 800c3d8:	4613      	movlt	r3, r2
 800c3da:	f8c9 3000 	str.w	r3, [r9]
 800c3de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3e2:	4606      	mov	r6, r0
 800c3e4:	460c      	mov	r4, r1
 800c3e6:	b112      	cbz	r2, 800c3ee <_printf_common+0x2a>
 800c3e8:	3301      	adds	r3, #1
 800c3ea:	f8c9 3000 	str.w	r3, [r9]
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	0699      	lsls	r1, r3, #26
 800c3f2:	bf42      	ittt	mi
 800c3f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c3f8:	3302      	addmi	r3, #2
 800c3fa:	f8c9 3000 	strmi.w	r3, [r9]
 800c3fe:	6825      	ldr	r5, [r4, #0]
 800c400:	f015 0506 	ands.w	r5, r5, #6
 800c404:	d107      	bne.n	800c416 <_printf_common+0x52>
 800c406:	f104 0a19 	add.w	sl, r4, #25
 800c40a:	68e3      	ldr	r3, [r4, #12]
 800c40c:	f8d9 2000 	ldr.w	r2, [r9]
 800c410:	1a9b      	subs	r3, r3, r2
 800c412:	42ab      	cmp	r3, r5
 800c414:	dc28      	bgt.n	800c468 <_printf_common+0xa4>
 800c416:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c41a:	6822      	ldr	r2, [r4, #0]
 800c41c:	3300      	adds	r3, #0
 800c41e:	bf18      	it	ne
 800c420:	2301      	movne	r3, #1
 800c422:	0692      	lsls	r2, r2, #26
 800c424:	d42d      	bmi.n	800c482 <_printf_common+0xbe>
 800c426:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c42a:	4639      	mov	r1, r7
 800c42c:	4630      	mov	r0, r6
 800c42e:	47c0      	blx	r8
 800c430:	3001      	adds	r0, #1
 800c432:	d020      	beq.n	800c476 <_printf_common+0xb2>
 800c434:	6823      	ldr	r3, [r4, #0]
 800c436:	68e5      	ldr	r5, [r4, #12]
 800c438:	f8d9 2000 	ldr.w	r2, [r9]
 800c43c:	f003 0306 	and.w	r3, r3, #6
 800c440:	2b04      	cmp	r3, #4
 800c442:	bf08      	it	eq
 800c444:	1aad      	subeq	r5, r5, r2
 800c446:	68a3      	ldr	r3, [r4, #8]
 800c448:	6922      	ldr	r2, [r4, #16]
 800c44a:	bf0c      	ite	eq
 800c44c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c450:	2500      	movne	r5, #0
 800c452:	4293      	cmp	r3, r2
 800c454:	bfc4      	itt	gt
 800c456:	1a9b      	subgt	r3, r3, r2
 800c458:	18ed      	addgt	r5, r5, r3
 800c45a:	f04f 0900 	mov.w	r9, #0
 800c45e:	341a      	adds	r4, #26
 800c460:	454d      	cmp	r5, r9
 800c462:	d11a      	bne.n	800c49a <_printf_common+0xd6>
 800c464:	2000      	movs	r0, #0
 800c466:	e008      	b.n	800c47a <_printf_common+0xb6>
 800c468:	2301      	movs	r3, #1
 800c46a:	4652      	mov	r2, sl
 800c46c:	4639      	mov	r1, r7
 800c46e:	4630      	mov	r0, r6
 800c470:	47c0      	blx	r8
 800c472:	3001      	adds	r0, #1
 800c474:	d103      	bne.n	800c47e <_printf_common+0xba>
 800c476:	f04f 30ff 	mov.w	r0, #4294967295
 800c47a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c47e:	3501      	adds	r5, #1
 800c480:	e7c3      	b.n	800c40a <_printf_common+0x46>
 800c482:	18e1      	adds	r1, r4, r3
 800c484:	1c5a      	adds	r2, r3, #1
 800c486:	2030      	movs	r0, #48	; 0x30
 800c488:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c48c:	4422      	add	r2, r4
 800c48e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c492:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c496:	3302      	adds	r3, #2
 800c498:	e7c5      	b.n	800c426 <_printf_common+0x62>
 800c49a:	2301      	movs	r3, #1
 800c49c:	4622      	mov	r2, r4
 800c49e:	4639      	mov	r1, r7
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	47c0      	blx	r8
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	d0e6      	beq.n	800c476 <_printf_common+0xb2>
 800c4a8:	f109 0901 	add.w	r9, r9, #1
 800c4ac:	e7d8      	b.n	800c460 <_printf_common+0x9c>
	...

0800c4b0 <_printf_i>:
 800c4b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c4b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c4b8:	460c      	mov	r4, r1
 800c4ba:	7e09      	ldrb	r1, [r1, #24]
 800c4bc:	b085      	sub	sp, #20
 800c4be:	296e      	cmp	r1, #110	; 0x6e
 800c4c0:	4617      	mov	r7, r2
 800c4c2:	4606      	mov	r6, r0
 800c4c4:	4698      	mov	r8, r3
 800c4c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c4c8:	f000 80b3 	beq.w	800c632 <_printf_i+0x182>
 800c4cc:	d822      	bhi.n	800c514 <_printf_i+0x64>
 800c4ce:	2963      	cmp	r1, #99	; 0x63
 800c4d0:	d036      	beq.n	800c540 <_printf_i+0x90>
 800c4d2:	d80a      	bhi.n	800c4ea <_printf_i+0x3a>
 800c4d4:	2900      	cmp	r1, #0
 800c4d6:	f000 80b9 	beq.w	800c64c <_printf_i+0x19c>
 800c4da:	2958      	cmp	r1, #88	; 0x58
 800c4dc:	f000 8083 	beq.w	800c5e6 <_printf_i+0x136>
 800c4e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c4e8:	e032      	b.n	800c550 <_printf_i+0xa0>
 800c4ea:	2964      	cmp	r1, #100	; 0x64
 800c4ec:	d001      	beq.n	800c4f2 <_printf_i+0x42>
 800c4ee:	2969      	cmp	r1, #105	; 0x69
 800c4f0:	d1f6      	bne.n	800c4e0 <_printf_i+0x30>
 800c4f2:	6820      	ldr	r0, [r4, #0]
 800c4f4:	6813      	ldr	r3, [r2, #0]
 800c4f6:	0605      	lsls	r5, r0, #24
 800c4f8:	f103 0104 	add.w	r1, r3, #4
 800c4fc:	d52a      	bpl.n	800c554 <_printf_i+0xa4>
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	6011      	str	r1, [r2, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	da03      	bge.n	800c50e <_printf_i+0x5e>
 800c506:	222d      	movs	r2, #45	; 0x2d
 800c508:	425b      	negs	r3, r3
 800c50a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c50e:	486f      	ldr	r0, [pc, #444]	; (800c6cc <_printf_i+0x21c>)
 800c510:	220a      	movs	r2, #10
 800c512:	e039      	b.n	800c588 <_printf_i+0xd8>
 800c514:	2973      	cmp	r1, #115	; 0x73
 800c516:	f000 809d 	beq.w	800c654 <_printf_i+0x1a4>
 800c51a:	d808      	bhi.n	800c52e <_printf_i+0x7e>
 800c51c:	296f      	cmp	r1, #111	; 0x6f
 800c51e:	d020      	beq.n	800c562 <_printf_i+0xb2>
 800c520:	2970      	cmp	r1, #112	; 0x70
 800c522:	d1dd      	bne.n	800c4e0 <_printf_i+0x30>
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	f043 0320 	orr.w	r3, r3, #32
 800c52a:	6023      	str	r3, [r4, #0]
 800c52c:	e003      	b.n	800c536 <_printf_i+0x86>
 800c52e:	2975      	cmp	r1, #117	; 0x75
 800c530:	d017      	beq.n	800c562 <_printf_i+0xb2>
 800c532:	2978      	cmp	r1, #120	; 0x78
 800c534:	d1d4      	bne.n	800c4e0 <_printf_i+0x30>
 800c536:	2378      	movs	r3, #120	; 0x78
 800c538:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c53c:	4864      	ldr	r0, [pc, #400]	; (800c6d0 <_printf_i+0x220>)
 800c53e:	e055      	b.n	800c5ec <_printf_i+0x13c>
 800c540:	6813      	ldr	r3, [r2, #0]
 800c542:	1d19      	adds	r1, r3, #4
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	6011      	str	r1, [r2, #0]
 800c548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c54c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c550:	2301      	movs	r3, #1
 800c552:	e08c      	b.n	800c66e <_printf_i+0x1be>
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	6011      	str	r1, [r2, #0]
 800c558:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c55c:	bf18      	it	ne
 800c55e:	b21b      	sxthne	r3, r3
 800c560:	e7cf      	b.n	800c502 <_printf_i+0x52>
 800c562:	6813      	ldr	r3, [r2, #0]
 800c564:	6825      	ldr	r5, [r4, #0]
 800c566:	1d18      	adds	r0, r3, #4
 800c568:	6010      	str	r0, [r2, #0]
 800c56a:	0628      	lsls	r0, r5, #24
 800c56c:	d501      	bpl.n	800c572 <_printf_i+0xc2>
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	e002      	b.n	800c578 <_printf_i+0xc8>
 800c572:	0668      	lsls	r0, r5, #25
 800c574:	d5fb      	bpl.n	800c56e <_printf_i+0xbe>
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	4854      	ldr	r0, [pc, #336]	; (800c6cc <_printf_i+0x21c>)
 800c57a:	296f      	cmp	r1, #111	; 0x6f
 800c57c:	bf14      	ite	ne
 800c57e:	220a      	movne	r2, #10
 800c580:	2208      	moveq	r2, #8
 800c582:	2100      	movs	r1, #0
 800c584:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c588:	6865      	ldr	r5, [r4, #4]
 800c58a:	60a5      	str	r5, [r4, #8]
 800c58c:	2d00      	cmp	r5, #0
 800c58e:	f2c0 8095 	blt.w	800c6bc <_printf_i+0x20c>
 800c592:	6821      	ldr	r1, [r4, #0]
 800c594:	f021 0104 	bic.w	r1, r1, #4
 800c598:	6021      	str	r1, [r4, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d13d      	bne.n	800c61a <_printf_i+0x16a>
 800c59e:	2d00      	cmp	r5, #0
 800c5a0:	f040 808e 	bne.w	800c6c0 <_printf_i+0x210>
 800c5a4:	4665      	mov	r5, ip
 800c5a6:	2a08      	cmp	r2, #8
 800c5a8:	d10b      	bne.n	800c5c2 <_printf_i+0x112>
 800c5aa:	6823      	ldr	r3, [r4, #0]
 800c5ac:	07db      	lsls	r3, r3, #31
 800c5ae:	d508      	bpl.n	800c5c2 <_printf_i+0x112>
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	6862      	ldr	r2, [r4, #4]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	bfde      	ittt	le
 800c5b8:	2330      	movle	r3, #48	; 0x30
 800c5ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5be:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5c2:	ebac 0305 	sub.w	r3, ip, r5
 800c5c6:	6123      	str	r3, [r4, #16]
 800c5c8:	f8cd 8000 	str.w	r8, [sp]
 800c5cc:	463b      	mov	r3, r7
 800c5ce:	aa03      	add	r2, sp, #12
 800c5d0:	4621      	mov	r1, r4
 800c5d2:	4630      	mov	r0, r6
 800c5d4:	f7ff fef6 	bl	800c3c4 <_printf_common>
 800c5d8:	3001      	adds	r0, #1
 800c5da:	d14d      	bne.n	800c678 <_printf_i+0x1c8>
 800c5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c5e0:	b005      	add	sp, #20
 800c5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5e6:	4839      	ldr	r0, [pc, #228]	; (800c6cc <_printf_i+0x21c>)
 800c5e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c5ec:	6813      	ldr	r3, [r2, #0]
 800c5ee:	6821      	ldr	r1, [r4, #0]
 800c5f0:	1d1d      	adds	r5, r3, #4
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6015      	str	r5, [r2, #0]
 800c5f6:	060a      	lsls	r2, r1, #24
 800c5f8:	d50b      	bpl.n	800c612 <_printf_i+0x162>
 800c5fa:	07ca      	lsls	r2, r1, #31
 800c5fc:	bf44      	itt	mi
 800c5fe:	f041 0120 	orrmi.w	r1, r1, #32
 800c602:	6021      	strmi	r1, [r4, #0]
 800c604:	b91b      	cbnz	r3, 800c60e <_printf_i+0x15e>
 800c606:	6822      	ldr	r2, [r4, #0]
 800c608:	f022 0220 	bic.w	r2, r2, #32
 800c60c:	6022      	str	r2, [r4, #0]
 800c60e:	2210      	movs	r2, #16
 800c610:	e7b7      	b.n	800c582 <_printf_i+0xd2>
 800c612:	064d      	lsls	r5, r1, #25
 800c614:	bf48      	it	mi
 800c616:	b29b      	uxthmi	r3, r3
 800c618:	e7ef      	b.n	800c5fa <_printf_i+0x14a>
 800c61a:	4665      	mov	r5, ip
 800c61c:	fbb3 f1f2 	udiv	r1, r3, r2
 800c620:	fb02 3311 	mls	r3, r2, r1, r3
 800c624:	5cc3      	ldrb	r3, [r0, r3]
 800c626:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c62a:	460b      	mov	r3, r1
 800c62c:	2900      	cmp	r1, #0
 800c62e:	d1f5      	bne.n	800c61c <_printf_i+0x16c>
 800c630:	e7b9      	b.n	800c5a6 <_printf_i+0xf6>
 800c632:	6813      	ldr	r3, [r2, #0]
 800c634:	6825      	ldr	r5, [r4, #0]
 800c636:	6961      	ldr	r1, [r4, #20]
 800c638:	1d18      	adds	r0, r3, #4
 800c63a:	6010      	str	r0, [r2, #0]
 800c63c:	0628      	lsls	r0, r5, #24
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	d501      	bpl.n	800c646 <_printf_i+0x196>
 800c642:	6019      	str	r1, [r3, #0]
 800c644:	e002      	b.n	800c64c <_printf_i+0x19c>
 800c646:	066a      	lsls	r2, r5, #25
 800c648:	d5fb      	bpl.n	800c642 <_printf_i+0x192>
 800c64a:	8019      	strh	r1, [r3, #0]
 800c64c:	2300      	movs	r3, #0
 800c64e:	6123      	str	r3, [r4, #16]
 800c650:	4665      	mov	r5, ip
 800c652:	e7b9      	b.n	800c5c8 <_printf_i+0x118>
 800c654:	6813      	ldr	r3, [r2, #0]
 800c656:	1d19      	adds	r1, r3, #4
 800c658:	6011      	str	r1, [r2, #0]
 800c65a:	681d      	ldr	r5, [r3, #0]
 800c65c:	6862      	ldr	r2, [r4, #4]
 800c65e:	2100      	movs	r1, #0
 800c660:	4628      	mov	r0, r5
 800c662:	f7f3 fdbd 	bl	80001e0 <memchr>
 800c666:	b108      	cbz	r0, 800c66c <_printf_i+0x1bc>
 800c668:	1b40      	subs	r0, r0, r5
 800c66a:	6060      	str	r0, [r4, #4]
 800c66c:	6863      	ldr	r3, [r4, #4]
 800c66e:	6123      	str	r3, [r4, #16]
 800c670:	2300      	movs	r3, #0
 800c672:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c676:	e7a7      	b.n	800c5c8 <_printf_i+0x118>
 800c678:	6923      	ldr	r3, [r4, #16]
 800c67a:	462a      	mov	r2, r5
 800c67c:	4639      	mov	r1, r7
 800c67e:	4630      	mov	r0, r6
 800c680:	47c0      	blx	r8
 800c682:	3001      	adds	r0, #1
 800c684:	d0aa      	beq.n	800c5dc <_printf_i+0x12c>
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	079b      	lsls	r3, r3, #30
 800c68a:	d413      	bmi.n	800c6b4 <_printf_i+0x204>
 800c68c:	68e0      	ldr	r0, [r4, #12]
 800c68e:	9b03      	ldr	r3, [sp, #12]
 800c690:	4298      	cmp	r0, r3
 800c692:	bfb8      	it	lt
 800c694:	4618      	movlt	r0, r3
 800c696:	e7a3      	b.n	800c5e0 <_printf_i+0x130>
 800c698:	2301      	movs	r3, #1
 800c69a:	464a      	mov	r2, r9
 800c69c:	4639      	mov	r1, r7
 800c69e:	4630      	mov	r0, r6
 800c6a0:	47c0      	blx	r8
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d09a      	beq.n	800c5dc <_printf_i+0x12c>
 800c6a6:	3501      	adds	r5, #1
 800c6a8:	68e3      	ldr	r3, [r4, #12]
 800c6aa:	9a03      	ldr	r2, [sp, #12]
 800c6ac:	1a9b      	subs	r3, r3, r2
 800c6ae:	42ab      	cmp	r3, r5
 800c6b0:	dcf2      	bgt.n	800c698 <_printf_i+0x1e8>
 800c6b2:	e7eb      	b.n	800c68c <_printf_i+0x1dc>
 800c6b4:	2500      	movs	r5, #0
 800c6b6:	f104 0919 	add.w	r9, r4, #25
 800c6ba:	e7f5      	b.n	800c6a8 <_printf_i+0x1f8>
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1ac      	bne.n	800c61a <_printf_i+0x16a>
 800c6c0:	7803      	ldrb	r3, [r0, #0]
 800c6c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c6c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6ca:	e76c      	b.n	800c5a6 <_printf_i+0xf6>
 800c6cc:	0800c945 	.word	0x0800c945
 800c6d0:	0800c956 	.word	0x0800c956

0800c6d4 <memmove>:
 800c6d4:	4288      	cmp	r0, r1
 800c6d6:	b510      	push	{r4, lr}
 800c6d8:	eb01 0302 	add.w	r3, r1, r2
 800c6dc:	d807      	bhi.n	800c6ee <memmove+0x1a>
 800c6de:	1e42      	subs	r2, r0, #1
 800c6e0:	4299      	cmp	r1, r3
 800c6e2:	d00a      	beq.n	800c6fa <memmove+0x26>
 800c6e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c6e8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c6ec:	e7f8      	b.n	800c6e0 <memmove+0xc>
 800c6ee:	4283      	cmp	r3, r0
 800c6f0:	d9f5      	bls.n	800c6de <memmove+0xa>
 800c6f2:	1881      	adds	r1, r0, r2
 800c6f4:	1ad2      	subs	r2, r2, r3
 800c6f6:	42d3      	cmn	r3, r2
 800c6f8:	d100      	bne.n	800c6fc <memmove+0x28>
 800c6fa:	bd10      	pop	{r4, pc}
 800c6fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c700:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c704:	e7f7      	b.n	800c6f6 <memmove+0x22>

0800c706 <_realloc_r>:
 800c706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c708:	4607      	mov	r7, r0
 800c70a:	4614      	mov	r4, r2
 800c70c:	460e      	mov	r6, r1
 800c70e:	b921      	cbnz	r1, 800c71a <_realloc_r+0x14>
 800c710:	4611      	mov	r1, r2
 800c712:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c716:	f7ff bc77 	b.w	800c008 <_malloc_r>
 800c71a:	b922      	cbnz	r2, 800c726 <_realloc_r+0x20>
 800c71c:	f7ff fc26 	bl	800bf6c <_free_r>
 800c720:	4625      	mov	r5, r4
 800c722:	4628      	mov	r0, r5
 800c724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c726:	f000 f814 	bl	800c752 <_malloc_usable_size_r>
 800c72a:	42a0      	cmp	r0, r4
 800c72c:	d20f      	bcs.n	800c74e <_realloc_r+0x48>
 800c72e:	4621      	mov	r1, r4
 800c730:	4638      	mov	r0, r7
 800c732:	f7ff fc69 	bl	800c008 <_malloc_r>
 800c736:	4605      	mov	r5, r0
 800c738:	2800      	cmp	r0, #0
 800c73a:	d0f2      	beq.n	800c722 <_realloc_r+0x1c>
 800c73c:	4631      	mov	r1, r6
 800c73e:	4622      	mov	r2, r4
 800c740:	f7ff fc00 	bl	800bf44 <memcpy>
 800c744:	4631      	mov	r1, r6
 800c746:	4638      	mov	r0, r7
 800c748:	f7ff fc10 	bl	800bf6c <_free_r>
 800c74c:	e7e9      	b.n	800c722 <_realloc_r+0x1c>
 800c74e:	4635      	mov	r5, r6
 800c750:	e7e7      	b.n	800c722 <_realloc_r+0x1c>

0800c752 <_malloc_usable_size_r>:
 800c752:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c756:	1f18      	subs	r0, r3, #4
 800c758:	2b00      	cmp	r3, #0
 800c75a:	bfbc      	itt	lt
 800c75c:	580b      	ldrlt	r3, [r1, r0]
 800c75e:	18c0      	addlt	r0, r0, r3
 800c760:	4770      	bx	lr
	...

0800c764 <_init>:
 800c764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c766:	bf00      	nop
 800c768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76a:	bc08      	pop	{r3}
 800c76c:	469e      	mov	lr, r3
 800c76e:	4770      	bx	lr

0800c770 <_fini>:
 800c770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c772:	bf00      	nop
 800c774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c776:	bc08      	pop	{r3}
 800c778:	469e      	mov	lr, r3
 800c77a:	4770      	bx	lr
