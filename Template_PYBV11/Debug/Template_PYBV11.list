
Template_PYBV11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08007d54  08007d54  00017d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e20  08007e20  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e28  08007e28  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e2c  08007e2c  00017e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007e30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002100  200001e0  08008010  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022e0  08008010  000222e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc5e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003dca  00000000  00000000  0003be6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012e8  00000000  00000000  0003fc38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001130  00000000  00000000  00040f20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00007ef3  00000000  00000000  00042050  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015052  00000000  00000000  00049f43  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1743  00000000  00000000  0005ef95  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001206d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000501c  00000000  00000000  00120754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007d3c 	.word	0x08007d3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007d3c 	.word	0x08007d3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <setup>:

static int counte = 0;
static char buf[20];

void setup()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	sprintf("Hello world!", 0);
 8000574:	2100      	movs	r1, #0
 8000576:	4803      	ldr	r0, [pc, #12]	; (8000584 <setup+0x14>)
 8000578:	f007 f89c 	bl	80076b4 <siprintf>
	LED_animation();
 800057c:	f000 f81e 	bl	80005bc <LED_animation>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	08007d54 	.word	0x08007d54

08000588 <loop>:

void loop()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_BLU_GPIO_Port, LED_BLU_Pin);
 800058c:	2110      	movs	r1, #16
 800058e:	4807      	ldr	r0, [pc, #28]	; (80005ac <loop+0x24>)
 8000590:	f001 fb33 	bl	8001bfa <HAL_GPIO_TogglePin>
	HAL_Delay(10);
 8000594:	200a      	movs	r0, #10
 8000596:	f000 fc95 	bl	8000ec4 <HAL_Delay>
	sprintf((char*)buf, "Counter: %d", counte);
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <loop+0x28>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	461a      	mov	r2, r3
 80005a0:	4904      	ldr	r1, [pc, #16]	; (80005b4 <loop+0x2c>)
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <loop+0x30>)
 80005a4:	f007 f886 	bl	80076b4 <siprintf>
}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40020400 	.word	0x40020400
 80005b0:	200001fc 	.word	0x200001fc
 80005b4:	08007d64 	.word	0x08007d64
 80005b8:	20000200 	.word	0x20000200

080005bc <LED_animation>:

void LED_animation()
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 80005c0:	2064      	movs	r0, #100	; 0x64
 80005c2:	f000 fc7f 	bl	8000ec4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005cc:	4820      	ldr	r0, [pc, #128]	; (8000650 <LED_animation+0x94>)
 80005ce:	f001 fafb 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005d2:	2064      	movs	r0, #100	; 0x64
 80005d4:	f000 fc76 	bl	8000ec4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GRN_GPIO_Port, LED_GRN_Pin, GPIO_PIN_SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005de:	481c      	ldr	r0, [pc, #112]	; (8000650 <LED_animation+0x94>)
 80005e0:	f001 faf2 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005e4:	2064      	movs	r0, #100	; 0x64
 80005e6:	f000 fc6d 	bl	8000ec4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_YEL_GPIO_Port, LED_YEL_Pin, GPIO_PIN_SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f0:	4817      	ldr	r0, [pc, #92]	; (8000650 <LED_animation+0x94>)
 80005f2:	f001 fae9 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80005f6:	2064      	movs	r0, #100	; 0x64
 80005f8:	f000 fc64 	bl	8000ec4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, GPIO_PIN_SET);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2110      	movs	r1, #16
 8000600:	4814      	ldr	r0, [pc, #80]	; (8000654 <LED_animation+0x98>)
 8000602:	f001 fae1 	bl	8001bc8 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8000606:	2064      	movs	r0, #100	; 0x64
 8000608:	f000 fc5c 	bl	8000ec4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_BLU_GPIO_Port, LED_BLU_Pin, GPIO_PIN_RESET);
 800060c:	2200      	movs	r2, #0
 800060e:	2110      	movs	r1, #16
 8000610:	4810      	ldr	r0, [pc, #64]	; (8000654 <LED_animation+0x98>)
 8000612:	f001 fad9 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000616:	2064      	movs	r0, #100	; 0x64
 8000618:	f000 fc54 	bl	8000ec4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_YEL_GPIO_Port, LED_YEL_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000622:	480b      	ldr	r0, [pc, #44]	; (8000650 <LED_animation+0x94>)
 8000624:	f001 fad0 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000628:	2064      	movs	r0, #100	; 0x64
 800062a:	f000 fc4b 	bl	8000ec4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_GRN_GPIO_Port, LED_GRN_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000634:	4806      	ldr	r0, [pc, #24]	; (8000650 <LED_animation+0x94>)
 8000636:	f001 fac7 	bl	8001bc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f000 fc42 	bl	8000ec4 <HAL_Delay>
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000646:	4802      	ldr	r0, [pc, #8]	; (8000650 <LED_animation+0x94>)
 8000648:	f001 fabe 	bl	8001bc8 <HAL_GPIO_WritePin>
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020000 	.word	0x40020000
 8000654:	40020400 	.word	0x40020400

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fbc0 	bl	8000de0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f812 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f000 f8f0 	bl	8000848 <MX_GPIO_Init>
  MX_DMA_Init();
 8000668:	f000 f8c6 	bl	80007f8 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800066c:	f000 f8a4 	bl	80007b8 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000670:	f005 fcb2 	bl	8005fd8 <MX_FATFS_Init>
  MX_I2C1_Init();
 8000674:	f000 f872 	bl	800075c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000678:	f006 fb68 	bl	8006d4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  setup();
 800067c:	f7ff ff78 	bl	8000570 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8000680:	f7ff ff82 	bl	8000588 <loop>
 8000684:	e7fc      	b.n	8000680 <main+0x28>
	...

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f006 ff4b 	bl	8007532 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a27      	ldr	r2, [pc, #156]	; (8000754 <SystemClock_Config+0xcc>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0xcc>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b22      	ldr	r3, [pc, #136]	; (8000758 <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a21      	ldr	r2, [pc, #132]	; (8000758 <SystemClock_Config+0xd0>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <SystemClock_Config+0xd0>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e4:	2301      	movs	r3, #1
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ee:	2302      	movs	r3, #2
 80006f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80006f8:	2306      	movs	r3, #6
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006fc:	23a8      	movs	r3, #168	; 0xa8
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000704:	2307      	movs	r3, #7
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f001 ff33 	bl	8002578 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f932 	bl	8000980 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000728:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000732:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000734:	f107 030c 	add.w	r3, r7, #12
 8000738:	2105      	movs	r1, #5
 800073a:	4618      	mov	r0, r3
 800073c:	f002 f98c 	bl	8002a58 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000746:	f000 f91b 	bl	8000980 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	; 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_I2C1_Init+0x50>)
 8000762:	4a13      	ldr	r2, [pc, #76]	; (80007b0 <MX_I2C1_Init+0x54>)
 8000764:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_I2C1_Init+0x50>)
 8000768:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_I2C1_Init+0x58>)
 800076a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_I2C1_Init+0x50>)
 800077a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800077e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_I2C1_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_I2C1_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000798:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_I2C1_Init+0x50>)
 800079a:	f001 fa49 	bl	8001c30 <HAL_I2C_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007a4:	f000 f8ec 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000494 	.word	0x20000494
 80007b0:	40005400 	.word	0x40005400
 80007b4:	000186a0 	.word	0x000186a0

080007b8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80007bc:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_SDIO_SD_Init+0x38>)
 80007be:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <MX_SDIO_SD_Init+0x3c>)
 80007c0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_SDIO_SD_Init+0x38>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80007c8:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_SDIO_SD_Init+0x38>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_SDIO_SD_Init+0x38>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_SDIO_SD_Init+0x38>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_SDIO_SD_Init+0x38>)
 80007dc:	2200      	movs	r2, #0
 80007de:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80007e0:	4b03      	ldr	r3, [pc, #12]	; (80007f0 <MX_SDIO_SD_Init+0x38>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	20000548 	.word	0x20000548
 80007f4:	40012c00 	.word	0x40012c00

080007f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MX_DMA_Init+0x4c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <MX_DMA_Init+0x4c>)
 8000808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <MX_DMA_Init+0x4c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	203b      	movs	r0, #59	; 0x3b
 8000820:	f000 fc4d 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000824:	203b      	movs	r0, #59	; 0x3b
 8000826:	f000 fc66 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2045      	movs	r0, #69	; 0x45
 8000830:	f000 fc45 	bl	80010be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000834:	2045      	movs	r0, #69	; 0x45
 8000836:	f000 fc5e 	bl	80010f6 <HAL_NVIC_EnableIRQ>

}
 800083a:	bf00      	nop
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b44      	ldr	r3, [pc, #272]	; (8000974 <MX_GPIO_Init+0x12c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a43      	ldr	r2, [pc, #268]	; (8000974 <MX_GPIO_Init+0x12c>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_GPIO_Init+0x12c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_GPIO_Init+0x12c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a3c      	ldr	r2, [pc, #240]	; (8000974 <MX_GPIO_Init+0x12c>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b3a      	ldr	r3, [pc, #232]	; (8000974 <MX_GPIO_Init+0x12c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b36      	ldr	r3, [pc, #216]	; (8000974 <MX_GPIO_Init+0x12c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a35      	ldr	r2, [pc, #212]	; (8000974 <MX_GPIO_Init+0x12c>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b33      	ldr	r3, [pc, #204]	; (8000974 <MX_GPIO_Init+0x12c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0302 	and.w	r3, r3, #2
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <MX_GPIO_Init+0x12c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a2e      	ldr	r2, [pc, #184]	; (8000974 <MX_GPIO_Init+0x12c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <MX_GPIO_Init+0x12c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	603b      	str	r3, [r7, #0]
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_GPIO_Init+0x12c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a27      	ldr	r2, [pc, #156]	; (8000974 <MX_GPIO_Init+0x12c>)
 80008d8:	f043 0308 	orr.w	r3, r3, #8
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_GPIO_Init+0x12c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0308 	and.w	r3, r3, #8
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GRN_Pin|LED_YEL_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80008f0:	4821      	ldr	r0, [pc, #132]	; (8000978 <MX_GPIO_Init+0x130>)
 80008f2:	f001 f969 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_BLU_Pin|MMA_AVDD_Pin, GPIO_PIN_RESET);
 80008f6:	2200      	movs	r2, #0
 80008f8:	2130      	movs	r1, #48	; 0x30
 80008fa:	4820      	ldr	r0, [pc, #128]	; (800097c <MX_GPIO_Init+0x134>)
 80008fc:	f001 f964 	bl	8001bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MMA_INT_Pin SW_USR_Pin */
  GPIO_InitStruct.Pin = MMA_INT_Pin|SW_USR_Pin;
 8000900:	230c      	movs	r3, #12
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	4619      	mov	r1, r3
 8000912:	481a      	ldr	r0, [pc, #104]	; (800097c <MX_GPIO_Init+0x134>)
 8000914:	f000 ffa6 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <MX_GPIO_Init+0x130>)
 800092e:	f000 ff99 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GRN_Pin LED_YEL_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GRN_Pin|LED_YEL_Pin;
 8000932:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000936:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000938:	2301      	movs	r3, #1
 800093a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	4619      	mov	r1, r3
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <MX_GPIO_Init+0x130>)
 800094c:	f000 ff8a 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLU_Pin MMA_AVDD_Pin */
  GPIO_InitStruct.Pin = LED_BLU_Pin|MMA_AVDD_Pin;
 8000950:	2330      	movs	r3, #48	; 0x30
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_GPIO_Init+0x134>)
 8000968:	f000 ff7c 	bl	8001864 <HAL_GPIO_Init>

}
 800096c:	bf00      	nop
 800096e:	3728      	adds	r7, #40	; 0x28
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000
 800097c:	40020400 	.word	0x40020400

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	607b      	str	r3, [r7, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <HAL_MspInit+0x4c>)
 800099c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099e:	4a0f      	ldr	r2, [pc, #60]	; (80009dc <HAL_MspInit+0x4c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a4:	6453      	str	r3, [r2, #68]	; 0x44
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	603b      	str	r3, [r7, #0]
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x4c>)
 80009b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ba:	4a08      	ldr	r2, [pc, #32]	; (80009dc <HAL_MspInit+0x4c>)
 80009bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009c0:	6413      	str	r3, [r2, #64]	; 0x40
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ca:	603b      	str	r3, [r7, #0]
 80009cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_I2C_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12b      	bne.n	8000a5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a1e:	23c0      	movs	r3, #192	; 0xc0
 8000a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a22:	2312      	movs	r3, #18
 8000a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a2e:	2304      	movs	r3, #4
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	480c      	ldr	r0, [pc, #48]	; (8000a6c <HAL_I2C_MspInit+0x8c>)
 8000a3a:	f000 ff13 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_I2C_MspInit+0x88>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40005400 	.word	0x40005400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020400 	.word	0x40020400

08000a70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a70      	ldr	r2, [pc, #448]	; (8000c50 <HAL_SD_MspInit+0x1e0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	f040 80da 	bne.w	8000c48 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	4b6e      	ldr	r3, [pc, #440]	; (8000c54 <HAL_SD_MspInit+0x1e4>)
 8000a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9c:	4a6d      	ldr	r2, [pc, #436]	; (8000c54 <HAL_SD_MspInit+0x1e4>)
 8000a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa2:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa4:	4b6b      	ldr	r3, [pc, #428]	; (8000c54 <HAL_SD_MspInit+0x1e4>)
 8000aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	4b67      	ldr	r3, [pc, #412]	; (8000c54 <HAL_SD_MspInit+0x1e4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a66      	ldr	r2, [pc, #408]	; (8000c54 <HAL_SD_MspInit+0x1e4>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b64      	ldr	r3, [pc, #400]	; (8000c54 <HAL_SD_MspInit+0x1e4>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000acc:	2300      	movs	r3, #0
 8000ace:	60bb      	str	r3, [r7, #8]
 8000ad0:	4b60      	ldr	r3, [pc, #384]	; (8000c54 <HAL_SD_MspInit+0x1e4>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	4a5f      	ldr	r2, [pc, #380]	; (8000c54 <HAL_SD_MspInit+0x1e4>)
 8000ad6:	f043 0308 	orr.w	r3, r3, #8
 8000ada:	6313      	str	r3, [r2, #48]	; 0x30
 8000adc:	4b5d      	ldr	r3, [pc, #372]	; (8000c54 <HAL_SD_MspInit+0x1e4>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	f003 0308 	and.w	r3, r3, #8
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000ae8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000afa:	230c      	movs	r3, #12
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4854      	ldr	r0, [pc, #336]	; (8000c58 <HAL_SD_MspInit+0x1e8>)
 8000b06:	f000 fead 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b0a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b1c:	230c      	movs	r3, #12
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4619      	mov	r1, r3
 8000b26:	484c      	ldr	r0, [pc, #304]	; (8000c58 <HAL_SD_MspInit+0x1e8>)
 8000b28:	f000 fe9c 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b30:	2302      	movs	r3, #2
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4845      	ldr	r0, [pc, #276]	; (8000c5c <HAL_SD_MspInit+0x1ec>)
 8000b48:	f000 fe8c 	bl	8001864 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000b4c:	4b44      	ldr	r3, [pc, #272]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b4e:	4a45      	ldr	r2, [pc, #276]	; (8000c64 <HAL_SD_MspInit+0x1f4>)
 8000b50:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000b52:	4b43      	ldr	r3, [pc, #268]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b58:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5a:	4b41      	ldr	r3, [pc, #260]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b60:	4b3f      	ldr	r3, [pc, #252]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b66:	4b3e      	ldr	r3, [pc, #248]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b6c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b6e:	4b3c      	ldr	r3, [pc, #240]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b74:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b76:	4b3a      	ldr	r3, [pc, #232]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b7c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b80:	2220      	movs	r2, #32
 8000b82:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b84:	4b36      	ldr	r3, [pc, #216]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b8a:	4b35      	ldr	r3, [pc, #212]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b90:	4b33      	ldr	r3, [pc, #204]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b92:	2203      	movs	r2, #3
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000b96:	4b32      	ldr	r3, [pc, #200]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000b98:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b9e:	4b30      	ldr	r3, [pc, #192]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000ba0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000ba4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000ba6:	482e      	ldr	r0, [pc, #184]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000ba8:	f000 fac0 	bl	800112c <HAL_DMA_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8000bb2:	f7ff fee5 	bl	8000980 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a29      	ldr	r2, [pc, #164]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000bba:	641a      	str	r2, [r3, #64]	; 0x40
 8000bbc:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <HAL_SD_MspInit+0x1f0>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000bc2:	4b29      	ldr	r3, [pc, #164]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000bc4:	4a29      	ldr	r2, [pc, #164]	; (8000c6c <HAL_SD_MspInit+0x1fc>)
 8000bc6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000bc8:	4b27      	ldr	r3, [pc, #156]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bce:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bd0:	4b25      	ldr	r3, [pc, #148]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000bd2:	2240      	movs	r2, #64	; 0x40
 8000bd4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bd6:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000bde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000be2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000be4:	4b20      	ldr	r3, [pc, #128]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000be6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000bea:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000bee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bf2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000bf6:	2220      	movs	r2, #32
 8000bf8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c00:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000c08:	2203      	movs	r2, #3
 8000c0a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000c0e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c12:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000c16:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c1a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000c1c:	4812      	ldr	r0, [pc, #72]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000c1e:	f000 fa85 	bl	800112c <HAL_DMA_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8000c28:	f7ff feaa 	bl	8000980 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000c30:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c32:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <HAL_SD_MspInit+0x1f8>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	2031      	movs	r0, #49	; 0x31
 8000c3e:	f000 fa3e 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000c42:	2031      	movs	r0, #49	; 0x31
 8000c44:	f000 fa57 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40012c00 	.word	0x40012c00
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020c00 	.word	0x40020c00
 8000c60:	20000434 	.word	0x20000434
 8000c64:	40026458 	.word	0x40026458
 8000c68:	200004e8 	.word	0x200004e8
 8000c6c:	400264a0 	.word	0x400264a0

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 f8de 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <SDIO_IRQHandler+0x10>)
 8000cd2:	f002 fae3 	bl	800329c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	20000548 	.word	0x20000548

08000ce0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000ce4:	4802      	ldr	r0, [pc, #8]	; (8000cf0 <DMA2_Stream3_IRQHandler+0x10>)
 8000ce6:	f000 fb49 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000434 	.word	0x20000434

08000cf4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <DMA2_Stream6_IRQHandler+0x10>)
 8000cfa:	f000 fb3f 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	200004e8 	.word	0x200004e8

08000d08 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <_sbrk+0x50>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d102      	bne.n	8000d1e <_sbrk+0x16>
		heap_end = &end;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <_sbrk+0x50>)
 8000d1a:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <_sbrk+0x54>)
 8000d1c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <_sbrk+0x50>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <_sbrk+0x50>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	466a      	mov	r2, sp
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d907      	bls.n	8000d42 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000d32:	f006 fbb9 	bl	80074a8 <__errno>
 8000d36:	4602      	mov	r2, r0
 8000d38:	230c      	movs	r3, #12
 8000d3a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d40:	e006      	b.n	8000d50 <_sbrk+0x48>
	}

	heap_end += incr;
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <_sbrk+0x50>)
 8000d44:	681a      	ldr	r2, [r3, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a03      	ldr	r2, [pc, #12]	; (8000d58 <_sbrk+0x50>)
 8000d4c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3710      	adds	r7, #16
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000214 	.word	0x20000214
 8000d5c:	200022e0 	.word	0x200022e0

08000d60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d64:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <SystemInit+0x28>)
 8000d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d6a:	4a07      	ldr	r2, [pc, #28]	; (8000d88 <SystemInit+0x28>)
 8000d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SystemInit+0x28>)
 8000d76:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d7a:	609a      	str	r2, [r3, #8]
#endif
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d90:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d92:	e003      	b.n	8000d9c <LoopCopyDataInit>

08000d94 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d96:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d98:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d9a:	3104      	adds	r1, #4

08000d9c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d9c:	480b      	ldr	r0, [pc, #44]	; (8000dcc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000da0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000da2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000da4:	d3f6      	bcc.n	8000d94 <CopyDataInit>
  ldr  r2, =_sbss
 8000da6:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000da8:	e002      	b.n	8000db0 <LoopFillZerobss>

08000daa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000daa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dac:	f842 3b04 	str.w	r3, [r2], #4

08000db0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000db2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000db4:	d3f9      	bcc.n	8000daa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000db6:	f7ff ffd3 	bl	8000d60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dba:	f006 fb7b 	bl	80074b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dbe:	f7ff fc4b 	bl	8000658 <main>
  bx  lr    
 8000dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dc8:	08007e30 	.word	0x08007e30
  ldr  r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dd0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8000dd4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8000dd8:	200022e0 	.word	0x200022e0

08000ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC_IRQHandler>
	...

08000de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de4:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_Init+0x40>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <HAL_Init+0x40>)
 8000dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <HAL_Init+0x40>)
 8000df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	; (8000e20 <HAL_Init+0x40>)
 8000e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f94d 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	2000      	movs	r0, #0
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fdbc 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023c00 	.word	0x40023c00

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f965 	bl	8001112 <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e60:	f000 f92d 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	200005cc 	.word	0x200005cc

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200005cc 	.word	0x200005cc

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff ffee 	bl	8000eac <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <HAL_Delay+0x40>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffde 	bl	8000eac <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000008 	.word	0x20000008

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff feb8 	bl	8000eac <HAL_GetTick>
 800113c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001144:	2301      	movs	r3, #1
 8001146:	e099      	b.n	800127c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2202      	movs	r2, #2
 8001154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f022 0201 	bic.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001168:	e00f      	b.n	800118a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800116a:	f7ff fe9f 	bl	8000eac <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b05      	cmp	r3, #5
 8001176:	d908      	bls.n	800118a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2220      	movs	r2, #32
 800117c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2203      	movs	r2, #3
 8001182:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e078      	b.n	800127c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	2b00      	cmp	r3, #0
 8001196:	d1e8      	bne.n	800116a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	4b38      	ldr	r3, [pc, #224]	; (8001284 <HAL_DMA_Init+0x158>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d107      	bne.n	80011f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4313      	orrs	r3, r2
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f023 0307 	bic.w	r3, r3, #7
 800120a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	4313      	orrs	r3, r2
 8001214:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121a:	2b04      	cmp	r3, #4
 800121c:	d117      	bne.n	800124e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00e      	beq.n	800124e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fa9d 	bl	8001770 <DMA_CheckFifoParam>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d008      	beq.n	800124e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2240      	movs	r2, #64	; 0x40
 8001240:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800124a:	2301      	movs	r3, #1
 800124c:	e016      	b.n	800127c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 fa54 	bl	8001704 <DMA_CalcBaseAndBitshift>
 800125c:	4603      	mov	r3, r0
 800125e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	223f      	movs	r2, #63	; 0x3f
 8001266:	409a      	lsls	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800127a:	2300      	movs	r3, #0
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	f010803f 	.word	0xf010803f

08001288 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
 8001294:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001296:	2300      	movs	r3, #0
 8001298:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800129e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d101      	bne.n	80012ae <HAL_DMA_Start_IT+0x26>
 80012aa:	2302      	movs	r3, #2
 80012ac:	e040      	b.n	8001330 <HAL_DMA_Start_IT+0xa8>
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2201      	movs	r2, #1
 80012b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d12f      	bne.n	8001322 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2202      	movs	r2, #2
 80012c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2200      	movs	r2, #0
 80012ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f9e6 	bl	80016a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	223f      	movs	r2, #63	; 0x3f
 80012e2:	409a      	lsls	r2, r3
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f042 0216 	orr.w	r2, r2, #22
 80012f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d007      	beq.n	8001310 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0208 	orr.w	r2, r2, #8
 800130e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	e005      	b.n	800132e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800132a:	2302      	movs	r3, #2
 800132c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800132e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d004      	beq.n	8001356 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2280      	movs	r2, #128	; 0x80
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e00c      	b.n	8001370 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2205      	movs	r2, #5
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f022 0201 	bic.w	r2, r2, #1
 800136c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001388:	4b92      	ldr	r3, [pc, #584]	; (80015d4 <HAL_DMA_IRQHandler+0x258>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a92      	ldr	r2, [pc, #584]	; (80015d8 <HAL_DMA_IRQHandler+0x25c>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0a9b      	lsrs	r3, r3, #10
 8001394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a6:	2208      	movs	r2, #8
 80013a8:	409a      	lsls	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01a      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0204 	bic.w	r2, r2, #4
 80013ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	2208      	movs	r2, #8
 80013d6:	409a      	lsls	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2201      	movs	r2, #1
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d012      	beq.n	800141e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	2201      	movs	r2, #1
 800140c:	409a      	lsls	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f043 0202 	orr.w	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2204      	movs	r2, #4
 8001424:	409a      	lsls	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	2204      	movs	r2, #4
 8001442:	409a      	lsls	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	f043 0204 	orr.w	r2, r3, #4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2210      	movs	r2, #16
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d043      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d03c      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2210      	movs	r2, #16
 8001478:	409a      	lsls	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d018      	beq.n	80014be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d108      	bne.n	80014ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d024      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
 80014aa:	e01f      	b.n	80014ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01b      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
 80014bc:	e016      	b.n	80014ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0208 	bic.w	r2, r2, #8
 80014da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2220      	movs	r2, #32
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 808e 	beq.w	800161a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8086 	beq.w	800161a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001512:	2220      	movs	r2, #32
 8001514:	409a      	lsls	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b05      	cmp	r3, #5
 8001524:	d136      	bne.n	8001594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0216 	bic.w	r2, r2, #22
 8001534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <HAL_DMA_IRQHandler+0x1da>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0208 	bic.w	r2, r2, #8
 8001564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	223f      	movs	r2, #63	; 0x3f
 800156c:	409a      	lsls	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001586:	2b00      	cmp	r3, #0
 8001588:	d07d      	beq.n	8001686 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
        }
        return;
 8001592:	e078      	b.n	8001686 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01c      	beq.n	80015dc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d108      	bne.n	80015c2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d030      	beq.n	800161a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
 80015c0:	e02b      	b.n	800161a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d027      	beq.n	800161a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
 80015d2:	e022      	b.n	800161a <HAL_DMA_IRQHandler+0x29e>
 80015d4:	20000000 	.word	0x20000000
 80015d8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10f      	bne.n	800160a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0210 	bic.w	r2, r2, #16
 80015f8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161e:	2b00      	cmp	r3, #0
 8001620:	d032      	beq.n	8001688 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d022      	beq.n	8001674 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2205      	movs	r2, #5
 8001632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f022 0201 	bic.w	r2, r2, #1
 8001644:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	3301      	adds	r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	429a      	cmp	r2, r3
 8001650:	d307      	bcc.n	8001662 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0301 	and.w	r3, r3, #1
 800165c:	2b00      	cmp	r3, #0
 800165e:	d1f2      	bne.n	8001646 <HAL_DMA_IRQHandler+0x2ca>
 8001660:	e000      	b.n	8001664 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001662:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	4798      	blx	r3
 8001684:	e000      	b.n	8001688 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001686:	bf00      	nop
    }
  }
}
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop

08001690 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80016c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	2b40      	cmp	r3, #64	; 0x40
 80016d4:	d108      	bne.n	80016e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68ba      	ldr	r2, [r7, #8]
 80016e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80016e6:	e007      	b.n	80016f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]
}
 80016f8:	bf00      	nop
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3b10      	subs	r3, #16
 8001714:	4a14      	ldr	r2, [pc, #80]	; (8001768 <DMA_CalcBaseAndBitshift+0x64>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800171e:	4a13      	ldr	r2, [pc, #76]	; (800176c <DMA_CalcBaseAndBitshift+0x68>)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d909      	bls.n	8001746 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800173a:	f023 0303 	bic.w	r3, r3, #3
 800173e:	1d1a      	adds	r2, r3, #4
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	659a      	str	r2, [r3, #88]	; 0x58
 8001744:	e007      	b.n	8001756 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800174e:	f023 0303 	bic.w	r3, r3, #3
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	aaaaaaab 	.word	0xaaaaaaab
 800176c:	08007dd0 	.word	0x08007dd0

08001770 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d11f      	bne.n	80017ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b03      	cmp	r3, #3
 800178e:	d855      	bhi.n	800183c <DMA_CheckFifoParam+0xcc>
 8001790:	a201      	add	r2, pc, #4	; (adr r2, 8001798 <DMA_CheckFifoParam+0x28>)
 8001792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001796:	bf00      	nop
 8001798:	080017a9 	.word	0x080017a9
 800179c:	080017bb 	.word	0x080017bb
 80017a0:	080017a9 	.word	0x080017a9
 80017a4:	0800183d 	.word	0x0800183d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d045      	beq.n	8001840 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b8:	e042      	b.n	8001840 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017c2:	d13f      	bne.n	8001844 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c8:	e03c      	b.n	8001844 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d2:	d121      	bne.n	8001818 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d836      	bhi.n	8001848 <DMA_CheckFifoParam+0xd8>
 80017da:	a201      	add	r2, pc, #4	; (adr r2, 80017e0 <DMA_CheckFifoParam+0x70>)
 80017dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e0:	080017f1 	.word	0x080017f1
 80017e4:	080017f7 	.word	0x080017f7
 80017e8:	080017f1 	.word	0x080017f1
 80017ec:	08001809 	.word	0x08001809
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	73fb      	strb	r3, [r7, #15]
      break;
 80017f4:	e02f      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d024      	beq.n	800184c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001806:	e021      	b.n	800184c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001810:	d11e      	bne.n	8001850 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001816:	e01b      	b.n	8001850 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d902      	bls.n	8001824 <DMA_CheckFifoParam+0xb4>
 800181e:	2b03      	cmp	r3, #3
 8001820:	d003      	beq.n	800182a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001822:	e018      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
      break;
 8001828:	e015      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00e      	beq.n	8001854 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	73fb      	strb	r3, [r7, #15]
      break;
 800183a:	e00b      	b.n	8001854 <DMA_CheckFifoParam+0xe4>
      break;
 800183c:	bf00      	nop
 800183e:	e00a      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      break;
 8001840:	bf00      	nop
 8001842:	e008      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      break;
 8001844:	bf00      	nop
 8001846:	e006      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      break;
 8001848:	bf00      	nop
 800184a:	e004      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      break;
 800184c:	bf00      	nop
 800184e:	e002      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      break;   
 8001850:	bf00      	nop
 8001852:	e000      	b.n	8001856 <DMA_CheckFifoParam+0xe6>
      break;
 8001854:	bf00      	nop
    }
  } 
  
  return status; 
 8001856:	7bfb      	ldrb	r3, [r7, #15]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e16b      	b.n	8001b58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 815a 	bne.w	8001b52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d00b      	beq.n	80018be <HAL_GPIO_Init+0x5a>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018b2:	2b11      	cmp	r3, #17
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b12      	cmp	r3, #18
 80018bc:	d130      	bne.n	8001920 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	2203      	movs	r2, #3
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f4:	2201      	movs	r2, #1
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 0201 	and.w	r2, r3, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4313      	orrs	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0xfc>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b12      	cmp	r3, #18
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80b4 	beq.w	8001b52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b5f      	ldr	r3, [pc, #380]	; (8001b6c <HAL_GPIO_Init+0x308>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a5e      	ldr	r2, [pc, #376]	; (8001b6c <HAL_GPIO_Init+0x308>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b5c      	ldr	r3, [pc, #368]	; (8001b6c <HAL_GPIO_Init+0x308>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a06:	4a5a      	ldr	r2, [pc, #360]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a51      	ldr	r2, [pc, #324]	; (8001b74 <HAL_GPIO_Init+0x310>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x226>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a50      	ldr	r2, [pc, #320]	; (8001b78 <HAL_GPIO_Init+0x314>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x222>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a4f      	ldr	r2, [pc, #316]	; (8001b7c <HAL_GPIO_Init+0x318>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x21e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4e      	ldr	r2, [pc, #312]	; (8001b80 <HAL_GPIO_Init+0x31c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x21a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4d      	ldr	r2, [pc, #308]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x216>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4c      	ldr	r2, [pc, #304]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4b      	ldr	r2, [pc, #300]	; (8001b8c <HAL_GPIO_Init+0x328>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x20e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4a      	ldr	r2, [pc, #296]	; (8001b90 <HAL_GPIO_Init+0x32c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x20a>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00e      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a6e:	2308      	movs	r3, #8
 8001a70:	e00c      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a72:	2306      	movs	r3, #6
 8001a74:	e00a      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a76:	2305      	movs	r3, #5
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9c:	4934      	ldr	r1, [pc, #208]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ace:	4a31      	ldr	r2, [pc, #196]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af8:	4a26      	ldr	r2, [pc, #152]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b1a      	ldr	r3, [pc, #104]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	f67f ae90 	bls.w	8001880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	3724      	adds	r7, #36	; 0x24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40013800 	.word	0x40013800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020400 	.word	0x40020400
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020c00 	.word	0x40020c00
 8001b84:	40021000 	.word	0x40021000
 8001b88:	40021400 	.word	0x40021400
 8001b8c:	40021800 	.word	0x40021800
 8001b90:	40021c00 	.word	0x40021c00
 8001b94:	40013c00 	.word	0x40013c00

08001b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691a      	ldr	r2, [r3, #16]
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	4013      	ands	r3, r2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bde:	887a      	ldrh	r2, [r7, #2]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001be4:	e003      	b.n	8001bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001be6:	887b      	ldrh	r3, [r7, #2]
 8001be8:	041a      	lsls	r2, r3, #16
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	619a      	str	r2, [r3, #24]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	460b      	mov	r3, r1
 8001c04:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	695a      	ldr	r2, [r3, #20]
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	401a      	ands	r2, r3
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d104      	bne.n	8001c1e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c14:	887b      	ldrh	r3, [r7, #2]
 8001c16:	041a      	lsls	r2, r3, #16
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001c1c:	e002      	b.n	8001c24 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	619a      	str	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e11f      	b.n	8001e82 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d106      	bne.n	8001c5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7fe fec2 	bl	80009e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2224      	movs	r2, #36	; 0x24
 8001c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f022 0201 	bic.w	r2, r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c94:	f001 f884 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8001c98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4a7b      	ldr	r2, [pc, #492]	; (8001e8c <HAL_I2C_Init+0x25c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d807      	bhi.n	8001cb4 <HAL_I2C_Init+0x84>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4a7a      	ldr	r2, [pc, #488]	; (8001e90 <HAL_I2C_Init+0x260>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	bf94      	ite	ls
 8001cac:	2301      	movls	r3, #1
 8001cae:	2300      	movhi	r3, #0
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	e006      	b.n	8001cc2 <HAL_I2C_Init+0x92>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4a77      	ldr	r2, [pc, #476]	; (8001e94 <HAL_I2C_Init+0x264>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	bf94      	ite	ls
 8001cbc:	2301      	movls	r3, #1
 8001cbe:	2300      	movhi	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e0db      	b.n	8001e82 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4a72      	ldr	r2, [pc, #456]	; (8001e98 <HAL_I2C_Init+0x268>)
 8001cce:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd2:	0c9b      	lsrs	r3, r3, #18
 8001cd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68ba      	ldr	r2, [r7, #8]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4a64      	ldr	r2, [pc, #400]	; (8001e8c <HAL_I2C_Init+0x25c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d802      	bhi.n	8001d04 <HAL_I2C_Init+0xd4>
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	3301      	adds	r3, #1
 8001d02:	e009      	b.n	8001d18 <HAL_I2C_Init+0xe8>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	4a63      	ldr	r2, [pc, #396]	; (8001e9c <HAL_I2C_Init+0x26c>)
 8001d10:	fba2 2303 	umull	r2, r3, r2, r3
 8001d14:	099b      	lsrs	r3, r3, #6
 8001d16:	3301      	adds	r3, #1
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	4956      	ldr	r1, [pc, #344]	; (8001e8c <HAL_I2C_Init+0x25c>)
 8001d34:	428b      	cmp	r3, r1
 8001d36:	d80d      	bhi.n	8001d54 <HAL_I2C_Init+0x124>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	1e59      	subs	r1, r3, #1
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d46:	3301      	adds	r3, #1
 8001d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	bf38      	it	cc
 8001d50:	2304      	movcc	r3, #4
 8001d52:	e04f      	b.n	8001df4 <HAL_I2C_Init+0x1c4>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d111      	bne.n	8001d80 <HAL_I2C_Init+0x150>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1e58      	subs	r0, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6859      	ldr	r1, [r3, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	440b      	add	r3, r1
 8001d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf0c      	ite	eq
 8001d78:	2301      	moveq	r3, #1
 8001d7a:	2300      	movne	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	e012      	b.n	8001da6 <HAL_I2C_Init+0x176>
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	1e58      	subs	r0, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6859      	ldr	r1, [r3, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	440b      	add	r3, r1
 8001d8e:	0099      	lsls	r1, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d96:	3301      	adds	r3, #1
 8001d98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	bf0c      	ite	eq
 8001da0:	2301      	moveq	r3, #1
 8001da2:	2300      	movne	r3, #0
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <HAL_I2C_Init+0x17e>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e022      	b.n	8001df4 <HAL_I2C_Init+0x1c4>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10e      	bne.n	8001dd4 <HAL_I2C_Init+0x1a4>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1e58      	subs	r0, r3, #1
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6859      	ldr	r1, [r3, #4]
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	440b      	add	r3, r1
 8001dc4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd2:	e00f      	b.n	8001df4 <HAL_I2C_Init+0x1c4>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1e58      	subs	r0, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6859      	ldr	r1, [r3, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	0099      	lsls	r1, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dea:	3301      	adds	r3, #1
 8001dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	6809      	ldr	r1, [r1, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69da      	ldr	r2, [r3, #28]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6911      	ldr	r1, [r2, #16]
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	68d2      	ldr	r2, [r2, #12]
 8001e2e:	4311      	orrs	r1, r2
 8001e30:	687a      	ldr	r2, [r7, #4]
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	430b      	orrs	r3, r1
 8001e36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	000186a0 	.word	0x000186a0
 8001e90:	001e847f 	.word	0x001e847f
 8001e94:	003d08ff 	.word	0x003d08ff
 8001e98:	431bde83 	.word	0x431bde83
 8001e9c:	10624dd3 	.word	0x10624dd3

08001ea0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea2:	b08f      	sub	sp, #60	; 0x3c
 8001ea4:	af0a      	add	r7, sp, #40	; 0x28
 8001ea6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e10f      	b.n	80020d2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d106      	bne.n	8001ed2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f005 f941 	bl	8007154 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 f85b 	bl	8004fac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	687e      	ldr	r6, [r7, #4]
 8001efe:	466d      	mov	r5, sp
 8001f00:	f106 0410 	add.w	r4, r6, #16
 8001f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f10:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f14:	1d33      	adds	r3, r6, #4
 8001f16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f18:	6838      	ldr	r0, [r7, #0]
 8001f1a:	f002 ffd5 	bl	8004ec8 <USB_CoreInit>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e0d0      	b.n	80020d2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 f849 	bl	8004fce <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e04a      	b.n	8001fd8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	4613      	mov	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	1a9b      	subs	r3, r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	440b      	add	r3, r1
 8001f50:	333d      	adds	r3, #61	; 0x3d
 8001f52:	2201      	movs	r2, #1
 8001f54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	1a9b      	subs	r3, r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	333c      	adds	r3, #60	; 0x3c
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	7bfb      	ldrb	r3, [r7, #15]
 8001f6e:	b298      	uxth	r0, r3
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3342      	adds	r3, #66	; 0x42
 8001f7e:	4602      	mov	r2, r0
 8001f80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	1a9b      	subs	r3, r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	333f      	adds	r3, #63	; 0x3f
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3344      	adds	r3, #68	; 0x44
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3348      	adds	r3, #72	; 0x48
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3350      	adds	r3, #80	; 0x50
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d3af      	bcc.n	8001f42 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e044      	b.n	8002072 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	1a9b      	subs	r3, r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206c:	7bfb      	ldrb	r3, [r7, #15]
 800206e:	3301      	adds	r3, #1
 8002070:	73fb      	strb	r3, [r7, #15]
 8002072:	7bfa      	ldrb	r2, [r7, #15]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	d3b5      	bcc.n	8001fe8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	687e      	ldr	r6, [r7, #4]
 8002084:	466d      	mov	r5, sp
 8002086:	f106 0410 	add.w	r4, r6, #16
 800208a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002092:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002096:	e885 0003 	stmia.w	r5, {r0, r1}
 800209a:	1d33      	adds	r3, r6, #4
 800209c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	f002 ffc0 	bl	8005024 <USB_DevInit>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00d      	b.n	80020d2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f003 feda 	bl	8005e84 <USB_DevDisconnect>

  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3714      	adds	r7, #20
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020da <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b084      	sub	sp, #16
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d101      	bne.n	80020f6 <HAL_PCD_Start+0x1c>
 80020f2:	2302      	movs	r3, #2
 80020f4:	e020      	b.n	8002138 <HAL_PCD_Start+0x5e>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002102:	2b01      	cmp	r3, #1
 8002104:	d109      	bne.n	800211a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800210a:	2b01      	cmp	r3, #1
 800210c:	d005      	beq.n	800211a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f003 fe98 	bl	8005e54 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f002 ff2e 	bl	8004f8a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	4608      	mov	r0, r1
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	4603      	mov	r3, r0
 8002150:	70fb      	strb	r3, [r7, #3]
 8002152:	460b      	mov	r3, r1
 8002154:	803b      	strh	r3, [r7, #0]
 8002156:	4613      	mov	r3, r2
 8002158:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800215e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002162:	2b00      	cmp	r3, #0
 8002164:	da0f      	bge.n	8002186 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	f003 020f 	and.w	r2, r3, #15
 800216c:	4613      	mov	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	3338      	adds	r3, #56	; 0x38
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2201      	movs	r2, #1
 8002182:	705a      	strb	r2, [r3, #1]
 8002184:	e00f      	b.n	80021a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002186:	78fb      	ldrb	r3, [r7, #3]
 8002188:	f003 020f 	and.w	r2, r3, #15
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021a6:	78fb      	ldrb	r3, [r7, #3]
 80021a8:	f003 030f 	and.w	r3, r3, #15
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021b2:	883a      	ldrh	r2, [r7, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	78ba      	ldrb	r2, [r7, #2]
 80021bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	785b      	ldrb	r3, [r3, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021d0:	78bb      	ldrb	r3, [r7, #2]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d102      	bne.n	80021dc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2200      	movs	r2, #0
 80021da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_EP_Open+0xaa>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e00e      	b.n	8002208 <HAL_PCD_EP_Open+0xc8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68f9      	ldr	r1, [r7, #12]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 f8e6 	bl	80053ca <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002206:	7afb      	ldrb	r3, [r7, #11]
}
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800221c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002220:	2b00      	cmp	r3, #0
 8002222:	da0f      	bge.n	8002244 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	f003 020f 	and.w	r2, r3, #15
 800222a:	4613      	mov	r3, r2
 800222c:	00db      	lsls	r3, r3, #3
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	3338      	adds	r3, #56	; 0x38
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2201      	movs	r2, #1
 8002240:	705a      	strb	r2, [r3, #1]
 8002242:	e00f      	b.n	8002264 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	f003 020f 	and.w	r2, r3, #15
 800224a:	4613      	mov	r3, r2
 800224c:	00db      	lsls	r3, r3, #3
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002264:	78fb      	ldrb	r3, [r7, #3]
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	b2da      	uxtb	r2, r3
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002276:	2b01      	cmp	r3, #1
 8002278:	d101      	bne.n	800227e <HAL_PCD_EP_Close+0x6e>
 800227a:	2302      	movs	r3, #2
 800227c:	e00e      	b.n	800229c <HAL_PCD_EP_Close+0x8c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68f9      	ldr	r1, [r7, #12]
 800228c:	4618      	mov	r0, r3
 800228e:	f003 f923 	bl	80054d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	603b      	str	r3, [r7, #0]
 80022b0:	460b      	mov	r3, r1
 80022b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022b4:	7afb      	ldrb	r3, [r7, #11]
 80022b6:	f003 020f 	and.w	r2, r3, #15
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	4413      	add	r3, r2
 80022ca:	3304      	adds	r3, #4
 80022cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2200      	movs	r2, #0
 80022e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022e6:	7afb      	ldrb	r3, [r7, #11]
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d102      	bne.n	8002300 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002300:	7afb      	ldrb	r3, [r7, #11]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	2b00      	cmp	r3, #0
 8002308:	d109      	bne.n	800231e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6979      	ldr	r1, [r7, #20]
 8002318:	f003 fba6 	bl	8005a68 <USB_EP0StartXfer>
 800231c:	e008      	b.n	8002330 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	6979      	ldr	r1, [r7, #20]
 800232c:	f003 f958 	bl	80055e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002346:	78fb      	ldrb	r3, [r7, #3]
 8002348:	f003 020f 	and.w	r2, r3, #15
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800235c:	681b      	ldr	r3, [r3, #0]
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	460b      	mov	r3, r1
 8002378:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800237a:	7afb      	ldrb	r3, [r7, #11]
 800237c:	f003 020f 	and.w	r2, r3, #15
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	3338      	adds	r3, #56	; 0x38
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4413      	add	r3, r2
 800238e:	3304      	adds	r3, #4
 8002390:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	2201      	movs	r2, #1
 80023a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023aa:	7afb      	ldrb	r3, [r7, #11]
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d102      	bne.n	80023c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023c4:	7afb      	ldrb	r3, [r7, #11]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d109      	bne.n	80023e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	6979      	ldr	r1, [r7, #20]
 80023dc:	f003 fb44 	bl	8005a68 <USB_EP0StartXfer>
 80023e0:	e008      	b.n	80023f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	6979      	ldr	r1, [r7, #20]
 80023f0:	f003 f8f6 	bl	80055e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	460b      	mov	r3, r1
 8002408:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800240a:	78fb      	ldrb	r3, [r7, #3]
 800240c:	f003 020f 	and.w	r2, r3, #15
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	429a      	cmp	r2, r3
 8002416:	d901      	bls.n	800241c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e050      	b.n	80024be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800241c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002420:	2b00      	cmp	r3, #0
 8002422:	da0f      	bge.n	8002444 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	f003 020f 	and.w	r2, r3, #15
 800242a:	4613      	mov	r3, r2
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	1a9b      	subs	r3, r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	3338      	adds	r3, #56	; 0x38
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	3304      	adds	r3, #4
 800243a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	705a      	strb	r2, [r3, #1]
 8002442:	e00d      	b.n	8002460 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	1a9b      	subs	r3, r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	3304      	adds	r3, #4
 8002458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002466:	78fb      	ldrb	r3, [r7, #3]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	b2da      	uxtb	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_PCD_EP_SetStall+0x82>
 800247c:	2302      	movs	r3, #2
 800247e:	e01e      	b.n	80024be <HAL_PCD_EP_SetStall+0xc0>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68f9      	ldr	r1, [r7, #12]
 800248e:	4618      	mov	r0, r3
 8002490:	f003 fc72 	bl	8005d78 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10a      	bne.n	80024b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	b2d9      	uxtb	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024ae:	461a      	mov	r2, r3
 80024b0:	f003 fd00 	bl	8005eb4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b085      	sub	sp, #20
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	70fb      	strb	r3, [r7, #3]
 80024d2:	4613      	mov	r3, r2
 80024d4:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d107      	bne.n	80024f4 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024e4:	883b      	ldrh	r3, [r7, #0]
 80024e6:	0419      	lsls	r1, r3, #16
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	629a      	str	r2, [r3, #40]	; 0x28
 80024f2:	e028      	b.n	8002546 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	0c1b      	lsrs	r3, r3, #16
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	4413      	add	r3, r2
 8002500:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e00d      	b.n	8002524 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	7bfb      	ldrb	r3, [r7, #15]
 800250e:	3340      	adds	r3, #64	; 0x40
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	0c1b      	lsrs	r3, r3, #16
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	4413      	add	r3, r2
 800251c:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	3301      	adds	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	78fb      	ldrb	r3, [r7, #3]
 8002528:	3b01      	subs	r3, #1
 800252a:	429a      	cmp	r2, r3
 800252c:	d3ec      	bcc.n	8002508 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800252e:	883b      	ldrh	r3, [r7, #0]
 8002530:	0418      	lsls	r0, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	3b01      	subs	r3, #1
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	4302      	orrs	r2, r0
 800253e:	3340      	adds	r3, #64	; 0x40
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	440b      	add	r3, r1
 8002544:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	887a      	ldrh	r2, [r7, #2]
 8002566:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
	...

08002578 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e25b      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0301 	and.w	r3, r3, #1
 8002592:	2b00      	cmp	r3, #0
 8002594:	d075      	beq.n	8002682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002596:	4ba3      	ldr	r3, [pc, #652]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d00c      	beq.n	80025bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a2:	4ba0      	ldr	r3, [pc, #640]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d112      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b9d      	ldr	r3, [pc, #628]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	4b99      	ldr	r3, [pc, #612]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05b      	beq.n	8002680 <HAL_RCC_OscConfig+0x108>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d157      	bne.n	8002680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e236      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x74>
 80025de:	4b91      	ldr	r3, [pc, #580]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a90      	ldr	r2, [pc, #576]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0x98>
 80025f6:	4b8b      	ldr	r3, [pc, #556]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a8a      	ldr	r2, [pc, #552]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b88      	ldr	r3, [pc, #544]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a87      	ldr	r2, [pc, #540]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xb0>
 8002610:	4b84      	ldr	r3, [pc, #528]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a83      	ldr	r2, [pc, #524]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b81      	ldr	r3, [pc, #516]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a80      	ldr	r2, [pc, #512]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002630:	f7fe fc3c 	bl	8000eac <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe fc38 	bl	8000eac <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1fb      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xc0>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002658:	f7fe fc28 	bl	8000eac <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe fc24 	bl	8000eac <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	; 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e1e7      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b6c      	ldr	r3, [pc, #432]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0xe8>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d063      	beq.n	8002756 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800268e:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800269a:	4b62      	ldr	r3, [pc, #392]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d11c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a6:	4b5f      	ldr	r3, [pc, #380]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d116      	bne.n	80026e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b2:	4b5c      	ldr	r3, [pc, #368]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d005      	beq.n	80026ca <HAL_RCC_OscConfig+0x152>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d001      	beq.n	80026ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e1bb      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	4b56      	ldr	r3, [pc, #344]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	00db      	lsls	r3, r3, #3
 80026d8:	4952      	ldr	r1, [pc, #328]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026de:	e03a      	b.n	8002756 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d020      	beq.n	800272a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026e8:	4b4f      	ldr	r3, [pc, #316]	; (8002828 <HAL_RCC_OscConfig+0x2b0>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7fe fbdd 	bl	8000eac <HAL_GetTick>
 80026f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f6:	f7fe fbd9 	bl	8000eac <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e19c      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002708:	4b46      	ldr	r3, [pc, #280]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f0      	beq.n	80026f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002714:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4940      	ldr	r1, [pc, #256]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
 8002728:	e015      	b.n	8002756 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272a:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_OscConfig+0x2b0>)
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fbbc 	bl	8000eac <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002738:	f7fe fbb8 	bl	8000eac <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e17b      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274a:	4b36      	ldr	r3, [pc, #216]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d030      	beq.n	80027c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d016      	beq.n	8002798 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <HAL_RCC_OscConfig+0x2b4>)
 800276c:	2201      	movs	r2, #1
 800276e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002770:	f7fe fb9c 	bl	8000eac <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002778:	f7fe fb98 	bl	8000eac <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e15b      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278a:	4b26      	ldr	r3, [pc, #152]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x200>
 8002796:	e015      	b.n	80027c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCC_OscConfig+0x2b4>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7fe fb85 	bl	8000eac <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a6:	f7fe fb81 	bl	8000eac <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e144      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f0      	bne.n	80027a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 80a0 	beq.w	8002912 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d2:	2300      	movs	r3, #0
 80027d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d10f      	bne.n	8002802 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	4b0f      	ldr	r3, [pc, #60]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f0:	6413      	str	r3, [r2, #64]	; 0x40
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_OscConfig+0x2b8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d121      	bne.n	8002852 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_RCC_OscConfig+0x2b8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_RCC_OscConfig+0x2b8>)
 8002814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281a:	f7fe fb47 	bl	8000eac <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	e011      	b.n	8002846 <HAL_RCC_OscConfig+0x2ce>
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	42470000 	.word	0x42470000
 800282c:	42470e80 	.word	0x42470e80
 8002830:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002834:	f7fe fb3a 	bl	8000eac <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0fd      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	4b81      	ldr	r3, [pc, #516]	; (8002a4c <HAL_RCC_OscConfig+0x4d4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d106      	bne.n	8002868 <HAL_RCC_OscConfig+0x2f0>
 800285a:	4b7d      	ldr	r3, [pc, #500]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 800285c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285e:	4a7c      	ldr	r2, [pc, #496]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6713      	str	r3, [r2, #112]	; 0x70
 8002866:	e01c      	b.n	80028a2 <HAL_RCC_OscConfig+0x32a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b05      	cmp	r3, #5
 800286e:	d10c      	bne.n	800288a <HAL_RCC_OscConfig+0x312>
 8002870:	4b77      	ldr	r3, [pc, #476]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a76      	ldr	r2, [pc, #472]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
 800287c:	4b74      	ldr	r3, [pc, #464]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	4a73      	ldr	r2, [pc, #460]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 8002882:	f043 0301 	orr.w	r3, r3, #1
 8002886:	6713      	str	r3, [r2, #112]	; 0x70
 8002888:	e00b      	b.n	80028a2 <HAL_RCC_OscConfig+0x32a>
 800288a:	4b71      	ldr	r3, [pc, #452]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a70      	ldr	r2, [pc, #448]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	4b6e      	ldr	r3, [pc, #440]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	4a6d      	ldr	r2, [pc, #436]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 800289c:	f023 0304 	bic.w	r3, r3, #4
 80028a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d015      	beq.n	80028d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028aa:	f7fe faff 	bl	8000eac <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b0:	e00a      	b.n	80028c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b2:	f7fe fafb 	bl	8000eac <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e0bc      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c8:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ee      	beq.n	80028b2 <HAL_RCC_OscConfig+0x33a>
 80028d4:	e014      	b.n	8002900 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d6:	f7fe fae9 	bl	8000eac <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028dc:	e00a      	b.n	80028f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fe fae5 	bl	8000eac <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e0a6      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f4:	4b56      	ldr	r3, [pc, #344]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1ee      	bne.n	80028de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002900:	7dfb      	ldrb	r3, [r7, #23]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d105      	bne.n	8002912 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002906:	4b52      	ldr	r3, [pc, #328]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290a:	4a51      	ldr	r2, [pc, #324]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 800290c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 8092 	beq.w	8002a40 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d05c      	beq.n	80029e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d141      	bne.n	80029b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002930:	4b48      	ldr	r3, [pc, #288]	; (8002a54 <HAL_RCC_OscConfig+0x4dc>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002936:	f7fe fab9 	bl	8000eac <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293e:	f7fe fab5 	bl	8000eac <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e078      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002950:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	019b      	lsls	r3, r3, #6
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	3b01      	subs	r3, #1
 8002976:	041b      	lsls	r3, r3, #16
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	061b      	lsls	r3, r3, #24
 8002980:	4933      	ldr	r1, [pc, #204]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002986:	4b33      	ldr	r3, [pc, #204]	; (8002a54 <HAL_RCC_OscConfig+0x4dc>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298c:	f7fe fa8e 	bl	8000eac <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002994:	f7fe fa8a 	bl	8000eac <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e04d      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x41c>
 80029b2:	e045      	b.n	8002a40 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b4:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <HAL_RCC_OscConfig+0x4dc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fa77 	bl	8000eac <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c2:	f7fe fa73 	bl	8000eac <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e036      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029d4:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x44a>
 80029e0:	e02e      	b.n	8002a40 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e029      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_RCC_OscConfig+0x4d8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d11c      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d115      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a16:	4013      	ands	r3, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d10d      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d001      	beq.n	8002a40 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40007000 	.word	0x40007000
 8002a50:	40023800 	.word	0x40023800
 8002a54:	42470060 	.word	0x42470060

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0cc      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d90c      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d044      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e067      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4934      	ldr	r1, [pc, #208]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7fe f9b0 	bl	8000eac <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe f9ac 	bl	8000eac <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e04f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d20c      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 f821 	bl	8002c24 <HAL_RCC_GetSysClockFreq>
 8002be2:	4601      	mov	r1, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fe f910 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08007db8 	.word	0x08007db8
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	2300      	movs	r3, #0
 8002c34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c3a:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x158>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d007      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x32>
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d008      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x38>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f040 808d 	bne.w	8002d6a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b4b      	ldr	r3, [pc, #300]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c52:	60bb      	str	r3, [r7, #8]
       break;
 8002c54:	e08c      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c56:	4b4b      	ldr	r3, [pc, #300]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c58:	60bb      	str	r3, [r7, #8]
      break;
 8002c5a:	e089      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5c:	4b47      	ldr	r3, [pc, #284]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x158>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c66:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x158>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d023      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b42      	ldr	r3, [pc, #264]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x158>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	f04f 0400 	mov.w	r4, #0
 8002c7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	ea03 0501 	and.w	r5, r3, r1
 8002c88:	ea04 0602 	and.w	r6, r4, r2
 8002c8c:	4a3d      	ldr	r2, [pc, #244]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c8e:	fb02 f106 	mul.w	r1, r2, r6
 8002c92:	2200      	movs	r2, #0
 8002c94:	fb02 f205 	mul.w	r2, r2, r5
 8002c98:	440a      	add	r2, r1
 8002c9a:	493a      	ldr	r1, [pc, #232]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x160>)
 8002c9c:	fba5 0101 	umull	r0, r1, r5, r1
 8002ca0:	1853      	adds	r3, r2, r1
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f04f 0400 	mov.w	r4, #0
 8002caa:	461a      	mov	r2, r3
 8002cac:	4623      	mov	r3, r4
 8002cae:	f7fd fadf 	bl	8000270 <__aeabi_uldivmod>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	e049      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cba:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x158>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	099b      	lsrs	r3, r3, #6
 8002cc0:	f04f 0400 	mov.w	r4, #0
 8002cc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	ea03 0501 	and.w	r5, r3, r1
 8002cd0:	ea04 0602 	and.w	r6, r4, r2
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	4632      	mov	r2, r6
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	f04f 0400 	mov.w	r4, #0
 8002ce0:	0154      	lsls	r4, r2, #5
 8002ce2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ce6:	014b      	lsls	r3, r1, #5
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4622      	mov	r2, r4
 8002cec:	1b49      	subs	r1, r1, r5
 8002cee:	eb62 0206 	sbc.w	r2, r2, r6
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	f04f 0400 	mov.w	r4, #0
 8002cfa:	0194      	lsls	r4, r2, #6
 8002cfc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d00:	018b      	lsls	r3, r1, #6
 8002d02:	1a5b      	subs	r3, r3, r1
 8002d04:	eb64 0402 	sbc.w	r4, r4, r2
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	00e2      	lsls	r2, r4, #3
 8002d12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d16:	00d9      	lsls	r1, r3, #3
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4614      	mov	r4, r2
 8002d1c:	195b      	adds	r3, r3, r5
 8002d1e:	eb44 0406 	adc.w	r4, r4, r6
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	02a2      	lsls	r2, r4, #10
 8002d2c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002d30:	0299      	lsls	r1, r3, #10
 8002d32:	460b      	mov	r3, r1
 8002d34:	4614      	mov	r4, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	4621      	mov	r1, r4
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f04f 0400 	mov.w	r4, #0
 8002d40:	461a      	mov	r2, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	f7fd fa94 	bl	8000270 <__aeabi_uldivmod>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d4e:	4b0b      	ldr	r3, [pc, #44]	; (8002d7c <HAL_RCC_GetSysClockFreq+0x158>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	3301      	adds	r3, #1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d66:	60bb      	str	r3, [r7, #8]
      break;
 8002d68:	e002      	b.n	8002d70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d6a:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002d6c:	60bb      	str	r3, [r7, #8]
      break;
 8002d6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d70:	68bb      	ldr	r3, [r7, #8]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	00b71b00 	.word	0x00b71b00

08002d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d8c:	4b03      	ldr	r3, [pc, #12]	; (8002d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	20000000 	.word	0x20000000

08002da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002da4:	f7ff fff0 	bl	8002d88 <HAL_RCC_GetHCLKFreq>
 8002da8:	4601      	mov	r1, r0
 8002daa:	4b05      	ldr	r3, [pc, #20]	; (8002dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	0a9b      	lsrs	r3, r3, #10
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	4a03      	ldr	r2, [pc, #12]	; (8002dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	08007dc8 	.word	0x08007dc8

08002dc8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e022      	b.n	8002e20 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f7fd fe3f 	bl	8000a70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2203      	movs	r2, #3
 8002df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f814 	bl	8002e28 <HAL_SD_InitCard>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e00a      	b.n	8002e20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002e28:	b5b0      	push	{r4, r5, r7, lr}
 8002e2a:	b08e      	sub	sp, #56	; 0x38
 8002e2c:	af04      	add	r7, sp, #16
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002e44:	2376      	movs	r3, #118	; 0x76
 8002e46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681d      	ldr	r5, [r3, #0]
 8002e4c:	466c      	mov	r4, sp
 8002e4e:	f107 0314 	add.w	r3, r7, #20
 8002e52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002e5a:	f107 0308 	add.w	r3, r7, #8
 8002e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e60:	4628      	mov	r0, r5
 8002e62:	f001 facd 	bl	8004400 <SDIO_Init>
 8002e66:	4603      	mov	r3, r0
 8002e68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e031      	b.n	8002edc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_SD_InitCard+0xbc>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 fb05 	bl	8004492 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002e88:	4b16      	ldr	r3, [pc, #88]	; (8002ee4 <HAL_SD_InitCard+0xbc>)
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 fffa 	bl	8003e88 <SD_PowerON>
 8002e94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00b      	beq.n	8002eb4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e013      	b.n	8002edc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 ff19 	bl	8003cec <SD_InitCard>
 8002eba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00b      	beq.n	8002eda <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee4:	422580a0 	.word	0x422580a0

08002ee8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08c      	sub	sp, #48	; 0x30
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d107      	bne.n	8002f10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e0c9      	b.n	80030a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	f040 80c2 	bne.w	80030a2 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	441a      	add	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d907      	bls.n	8002f42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0b0      	b.n	80030a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2203      	movs	r2, #3
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8002f60:	f043 0302 	orr.w	r3, r3, #2
 8002f64:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	4a50      	ldr	r2, [pc, #320]	; (80030ac <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8002f6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	4a4f      	ldr	r2, [pc, #316]	; (80030b0 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8002f74:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3380      	adds	r3, #128	; 0x80
 8002f88:	4619      	mov	r1, r3
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	025b      	lsls	r3, r3, #9
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	f7fe f979 	bl	8001288 <HAL_DMA_Start_IT>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d017      	beq.n	8002fcc <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002faa:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a40      	ldr	r2, [pc, #256]	; (80030b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e06b      	b.n	80030a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002fcc:	4b3a      	ldr	r3, [pc, #232]	; (80030b8 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d002      	beq.n	8002fe0 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	025b      	lsls	r3, r3, #9
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f001 fae5 	bl	80045b8 <SDMMC_CmdBlockLength>
 8002fee:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8002ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00f      	beq.n	8003016 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2e      	ldr	r2, [pc, #184]	; (80030b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e046      	b.n	80030a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003016:	f04f 33ff 	mov.w	r3, #4294967295
 800301a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	025b      	lsls	r3, r3, #9
 8003020:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003022:	2390      	movs	r3, #144	; 0x90
 8003024:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003026:	2302      	movs	r3, #2
 8003028:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800302a:	2300      	movs	r3, #0
 800302c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800302e:	2301      	movs	r3, #1
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f107 0210 	add.w	r2, r7, #16
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f001 fa8f 	bl	8004560 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d90a      	bls.n	800305e <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2282      	movs	r2, #130	; 0x82
 800304c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003054:	4618      	mov	r0, r3
 8003056:	f001 faf3 	bl	8004640 <SDMMC_CmdReadMultiBlock>
 800305a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800305c:	e009      	b.n	8003072 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2281      	movs	r2, #129	; 0x81
 8003062:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800306a:	4618      	mov	r0, r3
 800306c:	f001 fac6 	bl	80045fc <SDMMC_CmdReadSingleBlock>
 8003070:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	2b00      	cmp	r3, #0
 8003076:	d012      	beq.n	800309e <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a0d      	ldr	r2, [pc, #52]	; (80030b4 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003086:	431a      	orrs	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e002      	b.n	80030a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
  }
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3730      	adds	r7, #48	; 0x30
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	08003afb 	.word	0x08003afb
 80030b0:	08003b6d 	.word	0x08003b6d
 80030b4:	004005ff 	.word	0x004005ff
 80030b8:	4225858c 	.word	0x4225858c

080030bc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08c      	sub	sp, #48	; 0x30
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d107      	bne.n	80030e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0ce      	b.n	8003282 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 80c7 	bne.w	8003280 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80030f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	441a      	add	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	429a      	cmp	r2, r3
 8003104:	d907      	bls.n	8003116 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e0b5      	b.n	8003282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2203      	movs	r2, #3
 800311a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2200      	movs	r2, #0
 8003124:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003134:	f043 0302 	orr.w	r3, r3, #2
 8003138:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	4a53      	ldr	r2, [pc, #332]	; (800328c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8003140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003146:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8003148:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314e:	2200      	movs	r2, #0
 8003150:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	2b01      	cmp	r3, #1
 8003158:	d002      	beq.n	8003160 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	025b      	lsls	r3, r3, #9
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003168:	4618      	mov	r0, r3
 800316a:	f001 fa25 	bl	80045b8 <SDMMC_CmdBlockLength>
 800316e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00f      	beq.n	8003196 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a46      	ldr	r2, [pc, #280]	; (8003294 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	431a      	orrs	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e075      	b.n	8003282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d90a      	bls.n	80031b2 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	22a0      	movs	r2, #160	; 0xa0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031a8:	4618      	mov	r0, r3
 80031aa:	f001 fa8d 	bl	80046c8 <SDMMC_CmdWriteMultiBlock>
 80031ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 80031b0:	e009      	b.n	80031c6 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2290      	movs	r2, #144	; 0x90
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031be:	4618      	mov	r0, r3
 80031c0:	f001 fa60 	bl	8004684 <SDMMC_CmdWriteSingleBlock>
 80031c4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d012      	beq.n	80031f2 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a30      	ldr	r2, [pc, #192]	; (8003294 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	431a      	orrs	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e047      	b.n	8003282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80031f2:	4b29      	ldr	r3, [pc, #164]	; (8003298 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	3380      	adds	r3, #128	; 0x80
 8003204:	461a      	mov	r2, r3
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	025b      	lsls	r3, r3, #9
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	f7fe f83c 	bl	8001288 <HAL_DMA_Start_IT>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d01c      	beq.n	8003250 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003224:	f023 0302 	bic.w	r3, r3, #2
 8003228:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a19      	ldr	r2, [pc, #100]	; (8003294 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003236:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e018      	b.n	8003282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003250:	f04f 33ff 	mov.w	r3, #4294967295
 8003254:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	025b      	lsls	r3, r3, #9
 800325a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800325c:	2390      	movs	r3, #144	; 0x90
 800325e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003260:	2300      	movs	r3, #0
 8003262:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003264:	2300      	movs	r3, #0
 8003266:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003268:	2301      	movs	r3, #1
 800326a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f107 0210 	add.w	r2, r7, #16
 8003274:	4611      	mov	r1, r2
 8003276:	4618      	mov	r0, r3
 8003278:	f001 f972 	bl	8004560 <SDIO_ConfigData>

      return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3730      	adds	r7, #48	; 0x30
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	08003ad1 	.word	0x08003ad1
 8003290:	08003b6d 	.word	0x08003b6d
 8003294:	004005ff 	.word	0x004005ff
 8003298:	4225858c 	.word	0x4225858c

0800329c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d008      	beq.n	80032ca <HAL_SD_IRQHandler+0x2e>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0308 	and.w	r3, r3, #8
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fff6 	bl	80042b4 <SD_Read_IT>
 80032c8:	e165      	b.n	8003596 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 808f 	beq.w	80033f8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032e2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80032f2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80032f6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d039      	beq.n	8003386 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <HAL_SD_IRQHandler+0x8a>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f003 0320 	and.w	r3, r3, #32
 8003322:	2b00      	cmp	r3, #0
 8003324:	d011      	beq.n	800334a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f001 f9ee 	bl	800470c <SDMMC_CmdStopTransfer>
 8003330:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	431a      	orrs	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f943 	bl	80035d0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003352:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f003 0301 	and.w	r3, r3, #1
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <HAL_SD_IRQHandler+0xda>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f920 	bl	80035bc <HAL_SD_RxCpltCallback>
 800337c:	e10b      	b.n	8003596 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f912 	bl	80035a8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003384:	e107      	b.n	8003596 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8102 	beq.w	8003596 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f003 0320 	and.w	r3, r3, #32
 8003398:	2b00      	cmp	r3, #0
 800339a:	d011      	beq.n	80033c0 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 f9b3 	bl	800470c <SDMMC_CmdStopTransfer>
 80033a6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f908 	bl	80035d0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 80e5 	bne.w	8003596 <HAL_SD_IRQHandler+0x2fa>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 80df 	bne.w	8003596 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0208 	bic.w	r2, r2, #8
 80033e6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f8d9 	bl	80035a8 <HAL_SD_TxCpltCallback>
}
 80033f6:	e0ce      	b.n	8003596 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d008      	beq.n	8003418 <HAL_SD_IRQHandler+0x17c>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 ffa0 	bl	8004356 <SD_Write_IT>
 8003416:	e0be      	b.n	8003596 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800341e:	f240 233a 	movw	r3, #570	; 0x23a
 8003422:	4013      	ands	r3, r2
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80b6 	beq.w	8003596 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	f043 0202 	orr.w	r2, r3, #2
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d005      	beq.n	800345e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	f043 0208 	orr.w	r2, r3, #8
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003470:	f043 0220 	orr.w	r2, r3, #32
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	d005      	beq.n	8003492 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348a:	f043 0210 	orr.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a4:	f043 0208 	orr.w	r2, r3, #8
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f240 723a 	movw	r2, #1850	; 0x73a
 80034b4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6812      	ldr	r2, [r2, #0]
 80034c0:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80034c4:	f023 0302 	bic.w	r3, r3, #2
 80034c8:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 f91c 	bl	800470c <SDMMC_CmdStopTransfer>
 80034d4:	4602      	mov	r2, r0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f869 	bl	80035d0 <HAL_SD_ErrorCallback>
}
 80034fe:	e04a      	b.n	8003596 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003506:	2b00      	cmp	r3, #0
 8003508:	d045      	beq.n	8003596 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <HAL_SD_IRQHandler+0x282>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	2b00      	cmp	r3, #0
 800351c:	d011      	beq.n	8003542 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003522:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <HAL_SD_IRQHandler+0x304>)
 8003524:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd ff04 	bl	8001338 <HAL_DMA_Abort_IT>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d02f      	beq.n	8003596 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	4618      	mov	r0, r3
 800353c:	f000 fb68 	bl	8003c10 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003540:	e029      	b.n	8003596 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d104      	bne.n	8003556 <HAL_SD_IRQHandler+0x2ba>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d011      	beq.n	800357a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <HAL_SD_IRQHandler+0x308>)
 800355c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	4618      	mov	r0, r3
 8003564:	f7fd fee8 	bl	8001338 <HAL_DMA_Abort_IT>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d013      	beq.n	8003596 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fb83 	bl	8003c7e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003578:	e00d      	b.n	8003596 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f828 	bl	80035e4 <HAL_SD_AbortCallback>
}
 8003594:	e7ff      	b.n	8003596 <HAL_SD_IRQHandler+0x2fa>
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	08003c11 	.word	0x08003c11
 80035a4:	08003c7f 	.word	0x08003c7f

080035a8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003606:	0f9b      	lsrs	r3, r3, #30
 8003608:	b2da      	uxtb	r2, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003612:	0e9b      	lsrs	r3, r3, #26
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	b2da      	uxtb	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003624:	0e1b      	lsrs	r3, r3, #24
 8003626:	b2db      	uxtb	r3, r3
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	b2da      	uxtb	r2, r3
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003636:	0c1b      	lsrs	r3, r3, #16
 8003638:	b2da      	uxtb	r2, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	b2da      	uxtb	r2, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800364e:	b2da      	uxtb	r2, r3
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003658:	0d1b      	lsrs	r3, r3, #20
 800365a:	b29a      	uxth	r2, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003664:	0c1b      	lsrs	r3, r3, #16
 8003666:	b2db      	uxtb	r3, r3
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	b2da      	uxtb	r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003676:	0bdb      	lsrs	r3, r3, #15
 8003678:	b2db      	uxtb	r3, r3
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	b2da      	uxtb	r2, r3
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003688:	0b9b      	lsrs	r3, r3, #14
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	b2da      	uxtb	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369a:	0b5b      	lsrs	r3, r3, #13
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036ac:	0b1b      	lsrs	r3, r3, #12
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	b2da      	uxtb	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2200      	movs	r2, #0
 80036be:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d163      	bne.n	8003790 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036cc:	009a      	lsls	r2, r3, #2
 80036ce:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036d2:	4013      	ands	r3, r2
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80036d8:	0f92      	lsrs	r2, r2, #30
 80036da:	431a      	orrs	r2, r3
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036e4:	0edb      	lsrs	r3, r3, #27
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f6:	0e1b      	lsrs	r3, r3, #24
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003708:	0d5b      	lsrs	r3, r3, #21
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	b2da      	uxtb	r2, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800371a:	0c9b      	lsrs	r3, r3, #18
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	b2da      	uxtb	r2, r3
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800372c:	0bdb      	lsrs	r3, r3, #15
 800372e:	b2db      	uxtb	r3, r3
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	b2da      	uxtb	r2, r3
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	7e1b      	ldrb	r3, [r3, #24]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	3302      	adds	r3, #2
 8003750:	2201      	movs	r2, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800375a:	fb02 f203 	mul.w	r2, r2, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	7a1b      	ldrb	r3, [r3, #8]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800377c:	0a52      	lsrs	r2, r2, #9
 800377e:	fb02 f203 	mul.w	r2, r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378c:	661a      	str	r2, [r3, #96]	; 0x60
 800378e:	e031      	b.n	80037f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003794:	2b01      	cmp	r3, #1
 8003796:	d11d      	bne.n	80037d4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800379c:	041b      	lsls	r3, r3, #16
 800379e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037a6:	0c1b      	lsrs	r3, r3, #16
 80037a8:	431a      	orrs	r2, r3
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	3301      	adds	r3, #1
 80037b4:	029a      	lsls	r2, r3, #10
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037c8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	661a      	str	r2, [r3, #96]	; 0x60
 80037d2:	e00f      	b.n	80037f4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a58      	ldr	r2, [pc, #352]	; (800393c <HAL_SD_GetCardCSD+0x344>)
 80037da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e09d      	b.n	8003930 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037f8:	0b9b      	lsrs	r3, r3, #14
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	b2da      	uxtb	r2, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800380a:	09db      	lsrs	r3, r3, #7
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003812:	b2da      	uxtb	r2, r3
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003822:	b2da      	uxtb	r2, r3
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382c:	0fdb      	lsrs	r3, r3, #31
 800382e:	b2da      	uxtb	r2, r3
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	0f5b      	lsrs	r3, r3, #29
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	b2da      	uxtb	r2, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384a:	0e9b      	lsrs	r3, r3, #26
 800384c:	b2db      	uxtb	r3, r3
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	b2da      	uxtb	r2, r3
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	0d9b      	lsrs	r3, r3, #22
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f003 030f 	and.w	r3, r3, #15
 8003864:	b2da      	uxtb	r2, r3
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	0d5b      	lsrs	r3, r3, #21
 8003870:	b2db      	uxtb	r3, r3
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	b2da      	uxtb	r2, r3
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	0c1b      	lsrs	r3, r3, #16
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	b2da      	uxtb	r2, r3
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	0bdb      	lsrs	r3, r3, #15
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	0b9b      	lsrs	r3, r3, #14
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	0b5b      	lsrs	r3, r3, #13
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038da:	0b1b      	lsrs	r3, r3, #12
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 0303 	and.w	r3, r3, #3
 800390a:	b2da      	uxtb	r2, r3
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003916:	085b      	lsrs	r3, r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800391e:	b2da      	uxtb	r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	004005ff 	.word	0x004005ff

08003940 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08e      	sub	sp, #56	; 0x38
 800399c:	af04      	add	r7, sp, #16
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d02e      	beq.n	8003a10 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b8:	d106      	bne.n	80039c8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38
 80039c6:	e029      	b.n	8003a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ce:	d10a      	bne.n	80039e6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fb0f 	bl	8003ff4 <SD_WideBus_Enable>
 80039d6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
 80039e4:	e01a      	b.n	8003a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10a      	bne.n	8003a02 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fb4c 	bl	800408a <SD_WideBus_Disable>
 80039f2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38
 8003a00:	e00c      	b.n	8003a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a0e:	e005      	b.n	8003a1c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a18      	ldr	r2, [pc, #96]	; (8003a8c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e024      	b.n	8003a82 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681d      	ldr	r5, [r3, #0]
 8003a5e:	466c      	mov	r4, sp
 8003a60:	f107 0318 	add.w	r3, r7, #24
 8003a64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a72:	4628      	mov	r0, r5
 8003a74:	f000 fcc4 	bl	8004400 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3728      	adds	r7, #40	; 0x28
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	004005ff 	.word	0x004005ff

08003a90 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa7e 	bl	8003fa4 <SD_SendStatus>
 8003aa8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d005      	beq.n	8003abc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	0a5b      	lsrs	r3, r3, #9
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003ac6:	693b      	ldr	r3, [r7, #16]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aec:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b084      	sub	sp, #16
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	2b82      	cmp	r3, #130	; 0x82
 8003b0e:	d111      	bne.n	8003b34 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 fdf9 	bl	800470c <SDMMC_CmdStopTransfer>
 8003b1a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d008      	beq.n	8003b34 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff fd4e 	bl	80035d0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0208 	bic.w	r2, r2, #8
 8003b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b4c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f7ff fd2d 	bl	80035bc <HAL_SD_RxCpltCallback>
#endif
}
 8003b62:	bf00      	nop
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd fd88 	bl	8001690 <HAL_DMA_GetError>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d03e      	beq.n	8003c04 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d002      	beq.n	8003ba2 <SD_DMAError+0x36>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d12d      	bne.n	8003bfe <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a19      	ldr	r2, [pc, #100]	; (8003c0c <SD_DMAError+0xa0>)
 8003ba8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003bb8:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7ff ff62 	bl	8003a90 <HAL_SD_GetCardState>
 8003bcc:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	2b06      	cmp	r3, #6
 8003bd2:	d002      	beq.n	8003bda <SD_DMAError+0x6e>
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b05      	cmp	r3, #5
 8003bd8:	d10a      	bne.n	8003bf0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fd94 	bl	800470c <SDMMC_CmdStopTransfer>
 8003be4:	4602      	mov	r2, r0
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bea:	431a      	orrs	r2, r3
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003bfe:	6978      	ldr	r0, [r7, #20]
 8003c00:	f7ff fce6 	bl	80035d0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003c04:	bf00      	nop
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	004005ff 	.word	0x004005ff

08003c10 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7ff ff31 	bl	8003a90 <HAL_SD_GetCardState>
 8003c2e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d002      	beq.n	8003c4a <SD_DMATxAbort+0x3a>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b05      	cmp	r3, #5
 8003c48:	d10a      	bne.n	8003c60 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 fd5c 	bl	800470c <SDMMC_CmdStopTransfer>
 8003c54:	4602      	mov	r2, r0
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	431a      	orrs	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d103      	bne.n	8003c70 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff fcbb 	bl	80035e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003c6e:	e002      	b.n	8003c76 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f7ff fcad 	bl	80035d0 <HAL_SD_ErrorCallback>
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f7ff fefa 	bl	8003a90 <HAL_SD_GetCardState>
 8003c9c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d002      	beq.n	8003cb8 <SD_DMARxAbort+0x3a>
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	2b05      	cmp	r3, #5
 8003cb6:	d10a      	bne.n	8003cce <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 fd25 	bl	800470c <SDMMC_CmdStopTransfer>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff fc84 	bl	80035e4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003cdc:	e002      	b.n	8003ce4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f7ff fc76 	bl	80035d0 <HAL_SD_ErrorCallback>
}
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003cec:	b5b0      	push	{r4, r5, r7, lr}
 8003cee:	b094      	sub	sp, #80	; 0x50
 8003cf0:	af04      	add	r7, sp, #16
 8003cf2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 fbd7 	bl	80044b0 <SDIO_GetPowerState>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003d08:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d0c:	e0b7      	b.n	8003e7e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d02f      	beq.n	8003d76 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 fe00 	bl	8004920 <SDMMC_CmdSendCID>
 8003d20:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <SD_InitCard+0x40>
    {
      return errorstate;
 8003d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2a:	e0a8      	b.n	8003e7e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fc01 	bl	800453a <SDIO_GetResponse>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2104      	movs	r1, #4
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 fbf8 	bl	800453a <SDIO_GetResponse>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2108      	movs	r1, #8
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fbef 	bl	800453a <SDIO_GetResponse>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	210c      	movs	r1, #12
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fbe6 	bl	800453a <SDIO_GetResponse>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d00d      	beq.n	8003d9a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f107 020e 	add.w	r2, r7, #14
 8003d86:	4611      	mov	r1, r2
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 fe06 	bl	800499a <SDMMC_CmdSetRelAdd>
 8003d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <SD_InitCard+0xae>
    {
      return errorstate;
 8003d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d98:	e071      	b.n	8003e7e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	2b03      	cmp	r3, #3
 8003da0:	d036      	beq.n	8003e10 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003da2:	89fb      	ldrh	r3, [r7, #14]
 8003da4:	461a      	mov	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	041b      	lsls	r3, r3, #16
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 fdd0 	bl	800495c <SDMMC_CmdSendCSD>
 8003dbc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc6:	e05a      	b.n	8003e7e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 fbb3 	bl	800453a <SDIO_GetResponse>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2104      	movs	r1, #4
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fbaa 	bl	800453a <SDIO_GetResponse>
 8003de6:	4602      	mov	r2, r0
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2108      	movs	r1, #8
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fba1 	bl	800453a <SDIO_GetResponse>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	210c      	movs	r1, #12
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fb98 	bl	800453a <SDIO_GetResponse>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2104      	movs	r1, #4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fb8f 	bl	800453a <SDIO_GetResponse>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	0d1a      	lsrs	r2, r3, #20
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003e24:	f107 0310 	add.w	r3, r7, #16
 8003e28:	4619      	mov	r1, r3
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7ff fbe4 	bl	80035f8 <HAL_SD_GetCardCSD>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003e36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e3a:	e020      	b.n	8003e7e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6819      	ldr	r1, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e44:	041b      	lsls	r3, r3, #16
 8003e46:	f04f 0400 	mov.w	r4, #0
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4623      	mov	r3, r4
 8003e4e:	4608      	mov	r0, r1
 8003e50:	f000 fc7e 	bl	8004750 <SDMMC_CmdSelDesel>
 8003e54:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <SD_InitCard+0x174>
  {
    return errorstate;
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5e:	e00e      	b.n	8003e7e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681d      	ldr	r5, [r3, #0]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	466c      	mov	r4, sp
 8003e68:	f103 0210 	add.w	r2, r3, #16
 8003e6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e72:	3304      	adds	r3, #4
 8003e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e76:	4628      	mov	r0, r5
 8003e78:	f000 fac2 	bl	8004400 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3740      	adds	r7, #64	; 0x40
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e88 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 fc78 	bl	8004796 <SDMMC_CmdGoIdleState>
 8003ea6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d001      	beq.n	8003eb2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	e072      	b.n	8003f98 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fc8b 	bl	80047d2 <SDMMC_CmdOperCond>
 8003ebc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00d      	beq.n	8003ee0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fc61 	bl	8004796 <SDMMC_CmdGoIdleState>
 8003ed4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	e05b      	b.n	8003f98 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d137      	bne.n	8003f5e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fc8b 	bl	8004810 <SDMMC_CmdAppCommand>
 8003efa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d02d      	beq.n	8003f5e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f02:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f06:	e047      	b.n	8003f98 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f000 fc7e 	bl	8004810 <SDMMC_CmdAppCommand>
 8003f14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <SD_PowerON+0x98>
    {
      return errorstate;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	e03b      	b.n	8003f98 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	491e      	ldr	r1, [pc, #120]	; (8003fa0 <SD_PowerON+0x118>)
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fc94 	bl	8004854 <SDMMC_CmdAppOperCommand>
 8003f2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003f34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f38:	e02e      	b.n	8003f98 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f000 fafa 	bl	800453a <SDIO_GetResponse>
 8003f46:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	0fdb      	lsrs	r3, r3, #31
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <SD_PowerON+0xcc>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <SD_PowerON+0xce>
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]

    count++;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d802      	bhi.n	8003f6e <SD_PowerON+0xe6>
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0cc      	beq.n	8003f08 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d902      	bls.n	8003f7e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003f78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f7c:	e00c      	b.n	8003f98 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
 8003f8e:	e002      	b.n	8003f96 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	c1100000 	.word	0xc1100000

08003fa4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d102      	bne.n	8003fba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003fb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fb8:	e018      	b.n	8003fec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fd08 	bl	80049dc <SDMMC_CmdSendStatus>
 8003fcc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	e009      	b.n	8003fec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2100      	movs	r1, #0
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 faab 	bl	800453a <SDIO_GetResponse>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2100      	movs	r1, #0
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fa95 	bl	800453a <SDIO_GetResponse>
 8004010:	4603      	mov	r3, r0
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800401a:	d102      	bne.n	8004022 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800401c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004020:	e02f      	b.n	8004082 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004022:	f107 030c 	add.w	r3, r7, #12
 8004026:	4619      	mov	r1, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f879 	bl	8004120 <SD_FindSCR>
 800402e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	e023      	b.n	8004082 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01c      	beq.n	800407e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404c:	041b      	lsls	r3, r3, #16
 800404e:	4619      	mov	r1, r3
 8004050:	4610      	mov	r0, r2
 8004052:	f000 fbdd 	bl	8004810 <SDMMC_CmdAppCommand>
 8004056:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	e00f      	b.n	8004082 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f000 fc16 	bl	800489a <SDMMC_CmdBusWidth>
 800406e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	e003      	b.n	8004082 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800407a:	2300      	movs	r3, #0
 800407c:	e001      	b.n	8004082 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800407e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b086      	sub	sp, #24
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fa4a 	bl	800453a <SDIO_GetResponse>
 80040a6:	4603      	mov	r3, r0
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040b0:	d102      	bne.n	80040b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80040b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80040b6:	e02f      	b.n	8004118 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80040b8:	f107 030c 	add.w	r3, r7, #12
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f82e 	bl	8004120 <SD_FindSCR>
 80040c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	e023      	b.n	8004118 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d01c      	beq.n	8004114 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e2:	041b      	lsls	r3, r3, #16
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 fb92 	bl	8004810 <SDMMC_CmdAppCommand>
 80040ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	e00f      	b.n	8004118 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2100      	movs	r1, #0
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 fbcb 	bl	800489a <SDMMC_CmdBusWidth>
 8004104:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	e003      	b.n	8004118 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004110:	2300      	movs	r3, #0
 8004112:	e001      	b.n	8004118 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004114:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b08f      	sub	sp, #60	; 0x3c
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800412a:	f7fc febf 	bl	8000eac <HAL_GetTick>
 800412e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004134:	2300      	movs	r3, #0
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	2300      	movs	r3, #0
 800413a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2108      	movs	r1, #8
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fa36 	bl	80045b8 <SDMMC_CmdBlockLength>
 800414c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004156:	e0a9      	b.n	80042ac <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004160:	041b      	lsls	r3, r3, #16
 8004162:	4619      	mov	r1, r3
 8004164:	4610      	mov	r0, r2
 8004166:	f000 fb53 	bl	8004810 <SDMMC_CmdAppCommand>
 800416a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	e09a      	b.n	80042ac <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800417c:	2308      	movs	r3, #8
 800417e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004180:	2330      	movs	r3, #48	; 0x30
 8004182:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004184:	2302      	movs	r3, #2
 8004186:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004188:	2300      	movs	r3, #0
 800418a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800418c:	2301      	movs	r3, #1
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f107 0210 	add.w	r2, r7, #16
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 f9e0 	bl	8004560 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f000 fb9a 	bl	80048de <SDMMC_CmdSendSCR>
 80041aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d022      	beq.n	80041f8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80041b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041b4:	e07a      	b.n	80042ac <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6819      	ldr	r1, [r3, #0]
 80041c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	f107 0208 	add.w	r2, r7, #8
 80041d0:	18d4      	adds	r4, r2, r3
 80041d2:	4608      	mov	r0, r1
 80041d4:	f000 f93f 	bl	8004456 <SDIO_ReadFIFO>
 80041d8:	4603      	mov	r3, r0
 80041da:	6023      	str	r3, [r4, #0]
      index++;
 80041dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041de:	3301      	adds	r3, #1
 80041e0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80041e2:	f7fc fe63 	bl	8000eac <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041f0:	d102      	bne.n	80041f8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80041f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80041f6:	e059      	b.n	80042ac <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fe:	f240 432a 	movw	r3, #1066	; 0x42a
 8004202:	4013      	ands	r3, r2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0d6      	beq.n	80041b6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d005      	beq.n	8004222 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2208      	movs	r2, #8
 800421c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800421e:	2308      	movs	r3, #8
 8004220:	e044      	b.n	80042ac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	f003 0302 	and.w	r3, r3, #2
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2202      	movs	r2, #2
 8004236:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004238:	2302      	movs	r3, #2
 800423a:	e037      	b.n	80042ac <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2220      	movs	r2, #32
 8004250:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004252:	2320      	movs	r3, #32
 8004254:	e02a      	b.n	80042ac <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f240 523a 	movw	r2, #1338	; 0x53a
 800425e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	061a      	lsls	r2, r3, #24
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	021b      	lsls	r3, r3, #8
 8004268:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800426c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004276:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	0e1b      	lsrs	r3, r3, #24
 800427c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	601a      	str	r2, [r3, #0]
    scr++;
 8004282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004284:	3304      	adds	r3, #4
 8004286:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	061a      	lsls	r2, r3, #24
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004294:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800429e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	0e1b      	lsrs	r3, r3, #24
 80042a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	373c      	adds	r7, #60	; 0x3c
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd90      	pop	{r4, r7, pc}

080042b4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d03f      	beq.n	800434e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
 80042d2:	e033      	b.n	800433c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 f8bc 	bl	8004456 <SDIO_ReadFIFO>
 80042de:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3301      	adds	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	0a1b      	lsrs	r3, r3, #8
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	701a      	strb	r2, [r3, #0]
      tmp++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3301      	adds	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3b01      	subs	r3, #1
 8004308:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3301      	adds	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	3b01      	subs	r3, #1
 800431e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	0e1b      	lsrs	r3, r3, #24
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	701a      	strb	r2, [r3, #0]
      tmp++;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3301      	adds	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	3b01      	subs	r3, #1
 8004334:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3301      	adds	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b07      	cmp	r3, #7
 8004340:	d9c8      	bls.n	80042d4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800434e:	bf00      	nop
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b086      	sub	sp, #24
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d043      	beq.n	80043f8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e037      	b.n	80043e6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	3301      	adds	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3b01      	subs	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	021a      	lsls	r2, r3, #8
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4313      	orrs	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	3b01      	subs	r3, #1
 800439e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	041a      	lsls	r2, r3, #16
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	3301      	adds	r3, #1
 80043b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	061a      	lsls	r2, r3, #24
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	3301      	adds	r3, #1
 80043c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f107 0208 	add.w	r2, r7, #8
 80043d8:	4611      	mov	r1, r2
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 f848 	bl	8004470 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3301      	adds	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b07      	cmp	r3, #7
 80043ea:	d9c4      	bls.n	8004376 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80043f8:	bf00      	nop
 80043fa:	3718      	adds	r7, #24
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004400:	b084      	sub	sp, #16
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	f107 001c 	add.w	r0, r7, #28
 800440e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004416:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004418:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800441a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800441e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004422:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004426:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800442a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800443a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	431a      	orrs	r2, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	b004      	add	sp, #16
 8004454:	4770      	bx	lr

08004456 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004464:	4618      	mov	r0, r3
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004492:	b580      	push	{r7, lr}
 8004494:	b082      	sub	sp, #8
 8004496:	af00      	add	r7, sp, #0
 8004498:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2203      	movs	r2, #3
 800449e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80044a0:	2002      	movs	r0, #2
 80044a2:	f7fc fd0f 	bl	8000ec4 <HAL_Delay>
  
  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3708      	adds	r7, #8
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0303 	and.w	r3, r3, #3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b085      	sub	sp, #20
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80044ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80044f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80044f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004506:	f023 030f 	bic.w	r3, r3, #15
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	431a      	orrs	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	b2db      	uxtb	r3, r3
}
 800452e:	4618      	mov	r0, r3
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3314      	adds	r3, #20
 8004548:	461a      	mov	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	4413      	add	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
}  
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004586:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800458c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004592:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0

}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80045c6:	2310      	movs	r3, #16
 80045c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045ca:	2340      	movs	r3, #64	; 0x40
 80045cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045d8:	f107 0308 	add.w	r3, r7, #8
 80045dc:	4619      	mov	r1, r3
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7ff ff74 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80045e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e8:	2110      	movs	r1, #16
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fa40 	bl	8004a70 <SDMMC_GetCmdResp1>
 80045f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045f2:	69fb      	ldr	r3, [r7, #28]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3720      	adds	r7, #32
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b088      	sub	sp, #32
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800460a:	2311      	movs	r3, #17
 800460c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800460e:	2340      	movs	r3, #64	; 0x40
 8004610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800461a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800461c:	f107 0308 	add.w	r3, r7, #8
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ff52 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004628:	f241 3288 	movw	r2, #5000	; 0x1388
 800462c:	2111      	movs	r1, #17
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa1e 	bl	8004a70 <SDMMC_GetCmdResp1>
 8004634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004636:	69fb      	ldr	r3, [r7, #28]
}
 8004638:	4618      	mov	r0, r3
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b088      	sub	sp, #32
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800464e:	2312      	movs	r3, #18
 8004650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004652:	2340      	movs	r3, #64	; 0x40
 8004654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800465a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800465e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	4619      	mov	r1, r3
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff ff30 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800466c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004670:	2112      	movs	r1, #18
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f9fc 	bl	8004a70 <SDMMC_GetCmdResp1>
 8004678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800467a:	69fb      	ldr	r3, [r7, #28]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3720      	adds	r7, #32
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b088      	sub	sp, #32
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004692:	2318      	movs	r3, #24
 8004694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004696:	2340      	movs	r3, #64	; 0x40
 8004698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800469e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	4619      	mov	r1, r3
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ff0e 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80046b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b4:	2118      	movs	r1, #24
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f9da 	bl	8004a70 <SDMMC_GetCmdResp1>
 80046bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046be:	69fb      	ldr	r3, [r7, #28]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80046d6:	2319      	movs	r3, #25
 80046d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046da:	2340      	movs	r3, #64	; 0x40
 80046dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046e8:	f107 0308 	add.w	r3, r7, #8
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff feec 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80046f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f8:	2119      	movs	r1, #25
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f9b8 	bl	8004a70 <SDMMC_GetCmdResp1>
 8004700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004702:	69fb      	ldr	r3, [r7, #28]
}
 8004704:	4618      	mov	r0, r3
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004714:	2300      	movs	r3, #0
 8004716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004718:	230c      	movs	r3, #12
 800471a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800471c:	2340      	movs	r3, #64	; 0x40
 800471e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004728:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800472a:	f107 0308 	add.w	r3, r7, #8
 800472e:	4619      	mov	r1, r3
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fecb 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004736:	4a05      	ldr	r2, [pc, #20]	; (800474c <SDMMC_CmdStopTransfer+0x40>)
 8004738:	210c      	movs	r1, #12
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f998 	bl	8004a70 <SDMMC_GetCmdResp1>
 8004740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004742:	69fb      	ldr	r3, [r7, #28]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	05f5e100 	.word	0x05f5e100

08004750 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	; 0x28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004760:	2307      	movs	r3, #7
 8004762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004768:	2300      	movs	r3, #0
 800476a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800476c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004770:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004772:	f107 0310 	add.w	r3, r7, #16
 8004776:	4619      	mov	r1, r3
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f7ff fea7 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800477e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004782:	2107      	movs	r1, #7
 8004784:	68f8      	ldr	r0, [r7, #12]
 8004786:	f000 f973 	bl	8004a70 <SDMMC_GetCmdResp1>
 800478a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800478e:	4618      	mov	r0, r3
 8004790:	3728      	adds	r7, #40	; 0x28
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b088      	sub	sp, #32
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80047a6:	2300      	movs	r3, #0
 80047a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047b4:	f107 0308 	add.w	r3, r7, #8
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff fe86 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f92d 	bl	8004a20 <SDMMC_GetCmdError>
 80047c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047c8:	69fb      	ldr	r3, [r7, #28]
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b088      	sub	sp, #32
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80047da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80047de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80047e0:	2308      	movs	r3, #8
 80047e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047e4:	2340      	movs	r3, #64	; 0x40
 80047e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047e8:	2300      	movs	r3, #0
 80047ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fe67 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fb16 	bl	8004e30 <SDMMC_GetCmdResp7>
 8004804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004806:	69fb      	ldr	r3, [r7, #28]
}
 8004808:	4618      	mov	r0, r3
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800481e:	2337      	movs	r3, #55	; 0x37
 8004820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004822:	2340      	movs	r3, #64	; 0x40
 8004824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800482a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800482e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004830:	f107 0308 	add.w	r3, r7, #8
 8004834:	4619      	mov	r1, r3
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff fe48 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800483c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004840:	2137      	movs	r1, #55	; 0x37
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f914 	bl	8004a70 <SDMMC_GetCmdResp1>
 8004848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800484a:	69fb      	ldr	r3, [r7, #28]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b088      	sub	sp, #32
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800486a:	2329      	movs	r3, #41	; 0x29
 800486c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800486e:	2340      	movs	r3, #64	; 0x40
 8004870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800487a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800487c:	f107 0308 	add.w	r3, r7, #8
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff fe22 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 fa23 	bl	8004cd4 <SDMMC_GetCmdResp3>
 800488e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004890:	69fb      	ldr	r3, [r7, #28]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3720      	adds	r7, #32
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}

0800489a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800489a:	b580      	push	{r7, lr}
 800489c:	b088      	sub	sp, #32
 800489e:	af00      	add	r7, sp, #0
 80048a0:	6078      	str	r0, [r7, #4]
 80048a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80048a8:	2306      	movs	r3, #6
 80048aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048ac:	2340      	movs	r3, #64	; 0x40
 80048ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048ba:	f107 0308 	add.w	r3, r7, #8
 80048be:	4619      	mov	r1, r3
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f7ff fe03 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80048c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ca:	2106      	movs	r1, #6
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f8cf 	bl	8004a70 <SDMMC_GetCmdResp1>
 80048d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048d4:	69fb      	ldr	r3, [r7, #28]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b088      	sub	sp, #32
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80048ea:	2333      	movs	r3, #51	; 0x33
 80048ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048ee:	2340      	movs	r3, #64	; 0x40
 80048f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048f2:	2300      	movs	r3, #0
 80048f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048fc:	f107 0308 	add.w	r3, r7, #8
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fde2 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004908:	f241 3288 	movw	r2, #5000	; 0x1388
 800490c:	2133      	movs	r1, #51	; 0x33
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8ae 	bl	8004a70 <SDMMC_GetCmdResp1>
 8004914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004916:	69fb      	ldr	r3, [r7, #28]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3720      	adds	r7, #32
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004928:	2300      	movs	r3, #0
 800492a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800492c:	2302      	movs	r3, #2
 800492e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004930:	23c0      	movs	r3, #192	; 0xc0
 8004932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004934:	2300      	movs	r3, #0
 8004936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800493c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	4619      	mov	r1, r3
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff fdc1 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f97c 	bl	8004c48 <SDMMC_GetCmdResp2>
 8004950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004952:	69fb      	ldr	r3, [r7, #28]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3720      	adds	r7, #32
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800496a:	2309      	movs	r3, #9
 800496c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800496e:	23c0      	movs	r3, #192	; 0xc0
 8004970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004972:	2300      	movs	r3, #0
 8004974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800497a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800497c:	f107 0308 	add.w	r3, r7, #8
 8004980:	4619      	mov	r1, r3
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fda2 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 f95d 	bl	8004c48 <SDMMC_GetCmdResp2>
 800498e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004990:	69fb      	ldr	r3, [r7, #28]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b088      	sub	sp, #32
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80049a8:	2303      	movs	r3, #3
 80049aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049ac:	2340      	movs	r3, #64	; 0x40
 80049ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ba:	f107 0308 	add.w	r3, r7, #8
 80049be:	4619      	mov	r1, r3
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f7ff fd83 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80049c6:	683a      	ldr	r2, [r7, #0]
 80049c8:	2103      	movs	r1, #3
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f9bc 	bl	8004d48 <SDMMC_GetCmdResp6>
 80049d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049d2:	69fb      	ldr	r3, [r7, #28]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b088      	sub	sp, #32
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80049ea:	230d      	movs	r3, #13
 80049ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049ee:	2340      	movs	r3, #64	; 0x40
 80049f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	4619      	mov	r1, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7ff fd62 	bl	80044cc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a0c:	210d      	movs	r1, #13
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f82e 	bl	8004a70 <SDMMC_GetCmdResp1>
 8004a14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a16:	69fb      	ldr	r3, [r7, #28]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004a20:	b490      	push	{r4, r7}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004a28:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <SDMMC_GetCmdError+0x48>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a0f      	ldr	r2, [pc, #60]	; (8004a6c <SDMMC_GetCmdError+0x4c>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	0a5b      	lsrs	r3, r3, #9
 8004a34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004a3c:	4623      	mov	r3, r4
 8004a3e:	1e5c      	subs	r4, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a48:	e009      	b.n	8004a5e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f2      	beq.n	8004a3c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	22c5      	movs	r2, #197	; 0xc5
 8004a5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3708      	adds	r7, #8
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bc90      	pop	{r4, r7}
 8004a66:	4770      	bx	lr
 8004a68:	20000000 	.word	0x20000000
 8004a6c:	10624dd3 	.word	0x10624dd3

08004a70 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004a70:	b590      	push	{r4, r7, lr}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004a7e:	4b6f      	ldr	r3, [pc, #444]	; (8004c3c <SDMMC_GetCmdResp1+0x1cc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a6f      	ldr	r2, [pc, #444]	; (8004c40 <SDMMC_GetCmdResp1+0x1d0>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	0a5b      	lsrs	r3, r3, #9
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004a90:	4623      	mov	r3, r4
 8004a92:	1e5c      	subs	r4, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a9c:	e0c9      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d0f0      	beq.n	8004a90 <SDMMC_GetCmdResp1+0x20>
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1eb      	bne.n	8004a90 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004aca:	2304      	movs	r3, #4
 8004acc:	e0b1      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0a6      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	22c5      	movs	r2, #197	; 0xc5
 8004ae8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff fd18 	bl	8004520 <SDIO_GetCommandResponse>
 8004af0:	4603      	mov	r3, r0
 8004af2:	461a      	mov	r2, r3
 8004af4:	7afb      	ldrb	r3, [r7, #11]
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d001      	beq.n	8004afe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e099      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004afe:	2100      	movs	r1, #0
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff fd1a 	bl	800453a <SDIO_GetResponse>
 8004b06:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4b4e      	ldr	r3, [pc, #312]	; (8004c44 <SDMMC_GetCmdResp1+0x1d4>)
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e08d      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	da02      	bge.n	8004b22 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004b1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b20:	e087      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004b2c:	2340      	movs	r3, #64	; 0x40
 8004b2e:	e080      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d001      	beq.n	8004b3e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004b3a:	2380      	movs	r3, #128	; 0x80
 8004b3c:	e079      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004b48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b4c:	e071      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b5c:	e069      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6c:	e061      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004b78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b7c:	e059      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b8c:	e051      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b9c:	e049      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004ba8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004bac:	e041      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004bb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bbc:	e039      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004bcc:	e031      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004bd8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004bdc:	e029      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004be8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004bec:	e021      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004bf8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004bfc:	e019      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004c08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c0c:	e011      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004c18:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c1c:	e009      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004c28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004c2c:	e001      	b.n	8004c32 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd90      	pop	{r4, r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000000 	.word	0x20000000
 8004c40:	10624dd3 	.word	0x10624dd3
 8004c44:	fdffe008 	.word	0xfdffe008

08004c48 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004c48:	b490      	push	{r4, r7}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c50:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <SDMMC_GetCmdResp2+0x84>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1e      	ldr	r2, [pc, #120]	; (8004cd0 <SDMMC_GetCmdResp2+0x88>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	0a5b      	lsrs	r3, r3, #9
 8004c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c60:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c64:	4623      	mov	r3, r4
 8004c66:	1e5c      	subs	r4, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d102      	bne.n	8004c72 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c70:	e026      	b.n	8004cc0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c76:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <SDMMC_GetCmdResp2+0x1c>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1eb      	bne.n	8004c64 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d004      	beq.n	8004ca2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2204      	movs	r2, #4
 8004c9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c9e:	2304      	movs	r3, #4
 8004ca0:	e00e      	b.n	8004cc0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d004      	beq.n	8004cb8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e003      	b.n	8004cc0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	22c5      	movs	r2, #197	; 0xc5
 8004cbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bc90      	pop	{r4, r7}
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	20000000 	.word	0x20000000
 8004cd0:	10624dd3 	.word	0x10624dd3

08004cd4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004cd4:	b490      	push	{r4, r7}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cdc:	4b18      	ldr	r3, [pc, #96]	; (8004d40 <SDMMC_GetCmdResp3+0x6c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a18      	ldr	r2, [pc, #96]	; (8004d44 <SDMMC_GetCmdResp3+0x70>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	0a5b      	lsrs	r3, r3, #9
 8004ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004cf0:	4623      	mov	r3, r4
 8004cf2:	1e5c      	subs	r4, r3, #1
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d102      	bne.n	8004cfe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004cf8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004cfc:	e01b      	b.n	8004d36 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <SDMMC_GetCmdResp3+0x1c>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1eb      	bne.n	8004cf0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	f003 0304 	and.w	r3, r3, #4
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d004      	beq.n	8004d2e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2204      	movs	r2, #4
 8004d28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	e003      	b.n	8004d36 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	22c5      	movs	r2, #197	; 0xc5
 8004d32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc90      	pop	{r4, r7}
 8004d3e:	4770      	bx	lr
 8004d40:	20000000 	.word	0x20000000
 8004d44:	10624dd3 	.word	0x10624dd3

08004d48 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004d48:	b590      	push	{r4, r7, lr}
 8004d4a:	b087      	sub	sp, #28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	460b      	mov	r3, r1
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d56:	4b34      	ldr	r3, [pc, #208]	; (8004e28 <SDMMC_GetCmdResp6+0xe0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a34      	ldr	r2, [pc, #208]	; (8004e2c <SDMMC_GetCmdResp6+0xe4>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	0a5b      	lsrs	r3, r3, #9
 8004d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d66:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004d6a:	4623      	mov	r3, r4
 8004d6c:	1e5c      	subs	r4, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d76:	e052      	b.n	8004e1e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0f0      	beq.n	8004d6a <SDMMC_GetCmdResp6+0x22>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1eb      	bne.n	8004d6a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d004      	beq.n	8004da8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2204      	movs	r2, #4
 8004da2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004da4:	2304      	movs	r3, #4
 8004da6:	e03a      	b.n	8004e1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2201      	movs	r2, #1
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e02f      	b.n	8004e1e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f7ff fbae 	bl	8004520 <SDIO_GetCommandResponse>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	7afb      	ldrb	r3, [r7, #11]
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d001      	beq.n	8004dd2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e025      	b.n	8004e1e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	22c5      	movs	r2, #197	; 0xc5
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004dd8:	2100      	movs	r1, #0
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f7ff fbad 	bl	800453a <SDIO_GetResponse>
 8004de0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	0c1b      	lsrs	r3, r3, #16
 8004df0:	b29a      	uxth	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004df6:	2300      	movs	r3, #0
 8004df8:	e011      	b.n	8004e1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e08:	e009      	b.n	8004e1e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d002      	beq.n	8004e1a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e18:	e001      	b.n	8004e1e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd90      	pop	{r4, r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000000 	.word	0x20000000
 8004e2c:	10624dd3 	.word	0x10624dd3

08004e30 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004e30:	b490      	push	{r4, r7}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e38:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <SDMMC_GetCmdResp7+0x90>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a21      	ldr	r2, [pc, #132]	; (8004ec4 <SDMMC_GetCmdResp7+0x94>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	0a5b      	lsrs	r3, r3, #9
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	1e5c      	subs	r4, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e58:	e02c      	b.n	8004eb4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d0f0      	beq.n	8004e4c <SDMMC_GetCmdResp7+0x1c>
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1eb      	bne.n	8004e4c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d004      	beq.n	8004e8a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2204      	movs	r2, #4
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e86:	2304      	movs	r3, #4
 8004e88:	e014      	b.n	8004eb4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d004      	beq.n	8004ea0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e009      	b.n	8004eb4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2240      	movs	r2, #64	; 0x40
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004eb2:	2300      	movs	r3, #0
  
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc90      	pop	{r4, r7}
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	20000000 	.word	0x20000000
 8004ec4:	10624dd3 	.word	0x10624dd3

08004ec8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec8:	b084      	sub	sp, #16
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b084      	sub	sp, #16
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
 8004ed2:	f107 001c 	add.w	r0, r7, #28
 8004ed6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d122      	bne.n	8004f26 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004ef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d105      	bne.n	8004f1a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f001 f828 	bl	8005f70 <USB_CoreReset>
 8004f20:	4603      	mov	r3, r0
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	e01a      	b.n	8004f5c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f001 f81c 	bl	8005f70 <USB_CoreReset>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f4e:	e005      	b.n	8004f5c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d10b      	bne.n	8004f7a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f043 0206 	orr.w	r2, r3, #6
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f043 0220 	orr.w	r2, r3, #32
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f86:	b004      	add	sp, #16
 8004f88:	4770      	bx	lr

08004f8a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b083      	sub	sp, #12
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f043 0201 	orr.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f023 0201 	bic.w	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60da      	str	r2, [r3, #12]
 8004ff8:	e00b      	b.n	8005012 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]
 800500c:	e001      	b.n	8005012 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e003      	b.n	800501a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005012:	2032      	movs	r0, #50	; 0x32
 8005014:	f7fb ff56 	bl	8000ec4 <HAL_Delay>

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
	...

08005024 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005024:	b084      	sub	sp, #16
 8005026:	b580      	push	{r7, lr}
 8005028:	b086      	sub	sp, #24
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	e009      	b.n	8005058 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	3340      	adds	r3, #64	; 0x40
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	2200      	movs	r2, #0
 8005050:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	3301      	adds	r3, #1
 8005056:	613b      	str	r3, [r7, #16]
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	2b0e      	cmp	r3, #14
 800505c:	d9f2      	bls.n	8005044 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800505e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d112      	bne.n	800508a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
 8005088:	e00b      	b.n	80050a2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800509a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80050a8:	461a      	mov	r2, r3
 80050aa:	2300      	movs	r3, #0
 80050ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b4:	4619      	mov	r1, r3
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	461a      	mov	r2, r3
 80050be:	680b      	ldr	r3, [r1, #0]
 80050c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d10c      	bne.n	80050e2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80050ce:	2100      	movs	r1, #0
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f961 	bl	8005398 <USB_SetDevSpeed>
 80050d6:	e008      	b.n	80050ea <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80050d8:	2101      	movs	r1, #1
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f95c 	bl	8005398 <USB_SetDevSpeed>
 80050e0:	e003      	b.n	80050ea <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80050e2:	2103      	movs	r1, #3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f957 	bl	8005398 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80050ea:	2110      	movs	r1, #16
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f90b 	bl	8005308 <USB_FlushTxFifo>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f929 	bl	8005354 <USB_FlushRxFifo>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d001      	beq.n	800510c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	461a      	mov	r2, r3
 8005114:	2300      	movs	r3, #0
 8005116:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800511e:	461a      	mov	r2, r3
 8005120:	2300      	movs	r3, #0
 8005122:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512a:	461a      	mov	r2, r3
 800512c:	2300      	movs	r3, #0
 800512e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	e043      	b.n	80051be <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005148:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800514c:	d118      	bne.n	8005180 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005160:	461a      	mov	r2, r3
 8005162:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	e013      	b.n	8005192 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005176:	461a      	mov	r2, r3
 8005178:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800517c:	6013      	str	r3, [r2, #0]
 800517e:	e008      	b.n	8005192 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800518c:	461a      	mov	r2, r3
 800518e:	2300      	movs	r3, #0
 8005190:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519e:	461a      	mov	r2, r3
 80051a0:	2300      	movs	r3, #0
 80051a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b0:	461a      	mov	r2, r3
 80051b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	3301      	adds	r3, #1
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d3b7      	bcc.n	8005136 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	613b      	str	r3, [r7, #16]
 80051ca:	e043      	b.n	8005254 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e2:	d118      	bne.n	8005216 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10a      	bne.n	8005200 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	015a      	lsls	r2, r3, #5
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4413      	add	r3, r2
 80051f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f6:	461a      	mov	r2, r3
 80051f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80051fc:	6013      	str	r3, [r2, #0]
 80051fe:	e013      	b.n	8005228 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520c:	461a      	mov	r2, r3
 800520e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	e008      	b.n	8005228 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005222:	461a      	mov	r2, r3
 8005224:	2300      	movs	r3, #0
 8005226:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	461a      	mov	r2, r3
 8005236:	2300      	movs	r3, #0
 8005238:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	461a      	mov	r2, r3
 8005248:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800524c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	3301      	adds	r3, #1
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005256:	693a      	ldr	r2, [r7, #16]
 8005258:	429a      	cmp	r2, r3
 800525a:	d3b7      	bcc.n	80051cc <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800526a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800526e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	2b01      	cmp	r3, #1
 8005274:	d111      	bne.n	800529a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527c:	461a      	mov	r2, r3
 800527e:	4b20      	ldr	r3, [pc, #128]	; (8005300 <USB_DevInit+0x2dc>)
 8005280:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528a:	68fa      	ldr	r2, [r7, #12]
 800528c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005294:	f043 0303 	orr.w	r3, r3, #3
 8005298:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80052a6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d105      	bne.n	80052ba <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f043 0210 	orr.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	4b11      	ldr	r3, [pc, #68]	; (8005304 <USB_DevInit+0x2e0>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80052c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	699b      	ldr	r3, [r3, #24]
 80052d0:	f043 0208 	orr.w	r2, r3, #8
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80052d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d107      	bne.n	80052ee <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e6:	f043 0304 	orr.w	r3, r3, #4
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80052ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3718      	adds	r7, #24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052fa:	b004      	add	sp, #16
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	00800100 	.word	0x00800100
 8005304:	803c3800 	.word	0x803c3800

08005308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	019b      	lsls	r3, r3, #6
 800531a:	f043 0220 	orr.w	r2, r3, #32
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3301      	adds	r3, #1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4a09      	ldr	r2, [pc, #36]	; (8005350 <USB_FlushTxFifo+0x48>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d901      	bls.n	8005334 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e006      	b.n	8005342 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b20      	cmp	r3, #32
 800533e:	d0f0      	beq.n	8005322 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	00030d40 	.word	0x00030d40

08005354 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2210      	movs	r2, #16
 8005364:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	3301      	adds	r3, #1
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <USB_FlushRxFifo+0x40>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d901      	bls.n	8005378 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e006      	b.n	8005386 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b10      	cmp	r3, #16
 8005382:	d0f0      	beq.n	8005366 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3714      	adds	r7, #20
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	00030d40 	.word	0x00030d40

08005398 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	68f9      	ldr	r1, [r7, #12]
 80053b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053b8:	4313      	orrs	r3, r2
 80053ba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
 80053d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	785b      	ldrb	r3, [r3, #1]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d13a      	bne.n	800545c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ec:	69da      	ldr	r2, [r3, #28]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	2101      	movs	r1, #1
 80053f8:	fa01 f303 	lsl.w	r3, r1, r3
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	68f9      	ldr	r1, [r7, #12]
 8005400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005404:	4313      	orrs	r3, r2
 8005406:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d155      	bne.n	80054ca <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	78db      	ldrb	r3, [r3, #3]
 8005438:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800543a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	059b      	lsls	r3, r3, #22
 8005440:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005442:	4313      	orrs	r3, r2
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	0151      	lsls	r1, r2, #5
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	440a      	add	r2, r1
 800544c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005458:	6013      	str	r3, [r2, #0]
 800545a:	e036      	b.n	80054ca <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	2101      	movs	r1, #1
 800546e:	fa01 f303 	lsl.w	r3, r1, r3
 8005472:	041b      	lsls	r3, r3, #16
 8005474:	68f9      	ldr	r1, [r7, #12]
 8005476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800547a:	4313      	orrs	r3, r2
 800547c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d11a      	bne.n	80054ca <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	015a      	lsls	r2, r3, #5
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	78db      	ldrb	r3, [r3, #3]
 80054ae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80054b0:	430b      	orrs	r3, r1
 80054b2:	4313      	orrs	r3, r2
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054c8:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	785b      	ldrb	r3, [r3, #1]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d135      	bne.n	8005560 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	f003 030f 	and.w	r3, r3, #15
 8005504:	2101      	movs	r1, #1
 8005506:	fa01 f303 	lsl.w	r3, r1, r3
 800550a:	b29b      	uxth	r3, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	68f9      	ldr	r1, [r7, #12]
 8005510:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005514:	4013      	ands	r3, r2
 8005516:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	69da      	ldr	r2, [r3, #28]
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	2101      	movs	r1, #1
 800552a:	fa01 f303 	lsl.w	r3, r1, r3
 800552e:	b29b      	uxth	r3, r3
 8005530:	43db      	mvns	r3, r3
 8005532:	68f9      	ldr	r1, [r7, #12]
 8005534:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005538:	4013      	ands	r3, r2
 800553a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	0159      	lsls	r1, r3, #5
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	440b      	add	r3, r1
 8005552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005556:	4619      	mov	r1, r3
 8005558:	4b1f      	ldr	r3, [pc, #124]	; (80055d8 <USB_DeactivateEndpoint+0x100>)
 800555a:	4013      	ands	r3, r2
 800555c:	600b      	str	r3, [r1, #0]
 800555e:	e034      	b.n	80055ca <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	43db      	mvns	r3, r3
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005580:	4013      	ands	r3, r2
 8005582:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	f003 030f 	and.w	r3, r3, #15
 8005594:	2101      	movs	r1, #1
 8005596:	fa01 f303 	lsl.w	r3, r1, r3
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	43db      	mvns	r3, r3
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055a4:	4013      	ands	r3, r2
 80055a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	0159      	lsls	r1, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	440b      	add	r3, r1
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	4619      	mov	r1, r3
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <USB_DeactivateEndpoint+0x104>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	ec337800 	.word	0xec337800
 80055dc:	eff37800 	.word	0xeff37800

080055e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	; 0x28
 80055e4:	af02      	add	r7, sp, #8
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	4613      	mov	r3, r2
 80055ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	f040 815c 	bne.w	80058ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d132      	bne.n	8005670 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	69ba      	ldr	r2, [r7, #24]
 800561a:	0151      	lsls	r1, r2, #5
 800561c:	69fa      	ldr	r2, [r7, #28]
 800561e:	440a      	add	r2, r1
 8005620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800562c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	69ba      	ldr	r2, [r7, #24]
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800564c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	69ba      	ldr	r2, [r7, #24]
 800565e:	0151      	lsls	r1, r2, #5
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	440a      	add	r2, r1
 8005664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005668:	0cdb      	lsrs	r3, r3, #19
 800566a:	04db      	lsls	r3, r3, #19
 800566c:	6113      	str	r3, [r2, #16]
 800566e:	e074      	b.n	800575a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	0151      	lsls	r1, r2, #5
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	440a      	add	r2, r1
 8005686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800568a:	0cdb      	lsrs	r3, r3, #19
 800568c:	04db      	lsls	r3, r3, #19
 800568e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	0151      	lsls	r1, r2, #5
 80056a2:	69fa      	ldr	r2, [r7, #28]
 80056a4:	440a      	add	r2, r1
 80056a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	691a      	ldr	r2, [r3, #16]
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	6959      	ldr	r1, [r3, #20]
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	440b      	add	r3, r1
 80056cc:	1e59      	subs	r1, r3, #1
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80056d6:	04d9      	lsls	r1, r3, #19
 80056d8:	4b9d      	ldr	r3, [pc, #628]	; (8005950 <USB_EPStartXfer+0x370>)
 80056da:	400b      	ands	r3, r1
 80056dc:	69b9      	ldr	r1, [r7, #24]
 80056de:	0148      	lsls	r0, r1, #5
 80056e0:	69f9      	ldr	r1, [r7, #28]
 80056e2:	4401      	add	r1, r0
 80056e4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80056e8:	4313      	orrs	r3, r2
 80056ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	691a      	ldr	r2, [r3, #16]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005702:	69b9      	ldr	r1, [r7, #24]
 8005704:	0148      	lsls	r0, r1, #5
 8005706:	69f9      	ldr	r1, [r7, #28]
 8005708:	4401      	add	r1, r0
 800570a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800570e:	4313      	orrs	r3, r2
 8005710:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	78db      	ldrb	r3, [r3, #3]
 8005716:	2b01      	cmp	r3, #1
 8005718:	d11f      	bne.n	800575a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	015a      	lsls	r2, r3, #5
 800571e:	69fb      	ldr	r3, [r7, #28]
 8005720:	4413      	add	r3, r2
 8005722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	0151      	lsls	r1, r2, #5
 800572c:	69fa      	ldr	r2, [r7, #28]
 800572e:	440a      	add	r2, r1
 8005730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005734:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005738:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	0151      	lsls	r1, r2, #5
 800574c:	69fa      	ldr	r2, [r7, #28]
 800574e:	440a      	add	r2, r1
 8005750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005754:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005758:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d14b      	bne.n	80057f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d009      	beq.n	800577c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005774:	461a      	mov	r2, r3
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	78db      	ldrb	r3, [r3, #3]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d128      	bne.n	80057d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	d110      	bne.n	80057b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	69ba      	ldr	r2, [r7, #24]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e00f      	b.n	80057d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	0151      	lsls	r1, r2, #5
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	440a      	add	r2, r1
 80057cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	0151      	lsls	r1, r2, #5
 80057e8:	69fa      	ldr	r2, [r7, #28]
 80057ea:	440a      	add	r2, r1
 80057ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e12f      	b.n	8005a58 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	015a      	lsls	r2, r3, #5
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	4413      	add	r3, r2
 8005800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69ba      	ldr	r2, [r7, #24]
 8005808:	0151      	lsls	r1, r2, #5
 800580a:	69fa      	ldr	r2, [r7, #28]
 800580c:	440a      	add	r2, r1
 800580e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005812:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005816:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	78db      	ldrb	r3, [r3, #3]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d015      	beq.n	800584c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 8117 	beq.w	8005a58 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	f003 030f 	and.w	r3, r3, #15
 800583a:	2101      	movs	r1, #1
 800583c:	fa01 f303 	lsl.w	r3, r1, r3
 8005840:	69f9      	ldr	r1, [r7, #28]
 8005842:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005846:	4313      	orrs	r3, r2
 8005848:	634b      	str	r3, [r1, #52]	; 0x34
 800584a:	e105      	b.n	8005a58 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	2b00      	cmp	r3, #0
 800585a:	d110      	bne.n	800587e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	0151      	lsls	r1, r2, #5
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	440a      	add	r2, r1
 8005872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005876:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800587a:	6013      	str	r3, [r2, #0]
 800587c:	e00f      	b.n	800589e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69ba      	ldr	r2, [r7, #24]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	69fa      	ldr	r2, [r7, #28]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	68d9      	ldr	r1, [r3, #12]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	695b      	ldr	r3, [r3, #20]
 80058aa:	b298      	uxth	r0, r3
 80058ac:	79fb      	ldrb	r3, [r7, #7]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	4603      	mov	r3, r0
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 fa2b 	bl	8005d0e <USB_WritePacket>
 80058b8:	e0ce      	b.n	8005a58 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d4:	0cdb      	lsrs	r3, r3, #19
 80058d6:	04db      	lsls	r3, r3, #19
 80058d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	69ba      	ldr	r2, [r7, #24]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d126      	bne.n	8005954 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800591c:	69b9      	ldr	r1, [r7, #24]
 800591e:	0148      	lsls	r0, r1, #5
 8005920:	69f9      	ldr	r1, [r7, #28]
 8005922:	4401      	add	r1, r0
 8005924:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005928:	4313      	orrs	r3, r2
 800592a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	69ba      	ldr	r2, [r7, #24]
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800594a:	6113      	str	r3, [r2, #16]
 800594c:	e036      	b.n	80059bc <USB_EPStartXfer+0x3dc>
 800594e:	bf00      	nop
 8005950:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	4413      	add	r3, r2
 800595e:	1e5a      	subs	r2, r3, #1
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	fbb2 f3f3 	udiv	r3, r2, r3
 8005968:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	8afb      	ldrh	r3, [r7, #22]
 800597a:	04d9      	lsls	r1, r3, #19
 800597c:	4b39      	ldr	r3, [pc, #228]	; (8005a64 <USB_EPStartXfer+0x484>)
 800597e:	400b      	ands	r3, r1
 8005980:	69b9      	ldr	r1, [r7, #24]
 8005982:	0148      	lsls	r0, r1, #5
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	4401      	add	r1, r0
 8005988:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800598c:	4313      	orrs	r3, r2
 800598e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599c:	691a      	ldr	r2, [r3, #16]
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	8af9      	ldrh	r1, [r7, #22]
 80059a4:	fb01 f303 	mul.w	r3, r1, r3
 80059a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ac:	69b9      	ldr	r1, [r7, #24]
 80059ae:	0148      	lsls	r0, r1, #5
 80059b0:	69f9      	ldr	r1, [r7, #28]
 80059b2:	4401      	add	r1, r0
 80059b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80059b8:	4313      	orrs	r3, r2
 80059ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d10d      	bne.n	80059de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	68d9      	ldr	r1, [r3, #12]
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	015a      	lsls	r2, r3, #5
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059da:	460a      	mov	r2, r1
 80059dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	78db      	ldrb	r3, [r3, #3]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d128      	bne.n	8005a38 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d110      	bne.n	8005a18 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	015a      	lsls	r2, r3, #5
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	4413      	add	r3, r2
 80059fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	0151      	lsls	r1, r2, #5
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	e00f      	b.n	8005a38 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	0151      	lsls	r1, r2, #5
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a36:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a38:	69bb      	ldr	r3, [r7, #24]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	69ba      	ldr	r2, [r7, #24]
 8005a48:	0151      	lsls	r1, r2, #5
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	440a      	add	r2, r1
 8005a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	1ff80000 	.word	0x1ff80000

08005a68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	785b      	ldrb	r3, [r3, #1]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	f040 80cd 	bne.w	8005c24 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d132      	bne.n	8005af8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	0151      	lsls	r1, r2, #5
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	440a      	add	r2, r1
 8005aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005aac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ab0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ab4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	693a      	ldr	r2, [r7, #16]
 8005ac6:	0151      	lsls	r1, r2, #5
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	440a      	add	r2, r1
 8005acc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	0151      	lsls	r1, r2, #5
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	440a      	add	r2, r1
 8005aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005af0:	0cdb      	lsrs	r3, r3, #19
 8005af2:	04db      	lsls	r3, r3, #19
 8005af4:	6113      	str	r3, [r2, #16]
 8005af6:	e04e      	b.n	8005b96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	697a      	ldr	r2, [r7, #20]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	0cdb      	lsrs	r3, r3, #19
 8005b14:	04db      	lsls	r3, r3, #19
 8005b16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	0151      	lsls	r1, r2, #5
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b3a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	695a      	ldr	r2, [r3, #20]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d903      	bls.n	8005b50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	689a      	ldr	r2, [r3, #8]
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	0151      	lsls	r1, r2, #5
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	440a      	add	r2, r1
 8005b66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	691a      	ldr	r2, [r3, #16]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b86:	6939      	ldr	r1, [r7, #16]
 8005b88:	0148      	lsls	r0, r1, #5
 8005b8a:	6979      	ldr	r1, [r7, #20]
 8005b8c:	4401      	add	r1, r0
 8005b8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005b92:	4313      	orrs	r3, r2
 8005b94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d11e      	bne.n	8005bda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d009      	beq.n	8005bb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	693a      	ldr	r2, [r7, #16]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	e092      	b.n	8005d00 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	015a      	lsls	r2, r3, #5
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	4413      	add	r3, r2
 8005be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	693a      	ldr	r2, [r7, #16]
 8005bea:	0151      	lsls	r1, r2, #5
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	440a      	add	r2, r1
 8005bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005bf8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d07e      	beq.n	8005d00 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	f003 030f 	and.w	r3, r3, #15
 8005c12:	2101      	movs	r1, #1
 8005c14:	fa01 f303 	lsl.w	r3, r1, r3
 8005c18:	6979      	ldr	r1, [r7, #20]
 8005c1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	634b      	str	r3, [r1, #52]	; 0x34
 8005c22:	e06d      	b.n	8005d00 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3e:	0cdb      	lsrs	r3, r3, #19
 8005c40:	04db      	lsls	r3, r3, #19
 8005c42:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c50:	691b      	ldr	r3, [r3, #16]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	0151      	lsls	r1, r2, #5
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	440a      	add	r2, r1
 8005c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005c62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005c66:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	695b      	ldr	r3, [r3, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	015a      	lsls	r2, r3, #5
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cae:	6939      	ldr	r1, [r7, #16]
 8005cb0:	0148      	lsls	r0, r1, #5
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	4401      	add	r1, r0
 8005cb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d10d      	bne.n	8005ce0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d009      	beq.n	8005ce0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	68d9      	ldr	r1, [r3, #12]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cdc:	460a      	mov	r2, r1
 8005cde:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	693a      	ldr	r2, [r7, #16]
 8005cf0:	0151      	lsls	r1, r2, #5
 8005cf2:	697a      	ldr	r2, [r7, #20]
 8005cf4:	440a      	add	r2, r1
 8005cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b089      	sub	sp, #36	; 0x24
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	4611      	mov	r1, r2
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	71fb      	strb	r3, [r7, #7]
 8005d20:	4613      	mov	r3, r2
 8005d22:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d11a      	bne.n	8005d6a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005d34:	88bb      	ldrh	r3, [r7, #4]
 8005d36:	3303      	adds	r3, #3
 8005d38:	089b      	lsrs	r3, r3, #2
 8005d3a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	e00f      	b.n	8005d62 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	031a      	lsls	r2, r3, #12
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4e:	461a      	mov	r2, r3
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	3304      	adds	r3, #4
 8005d5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	61bb      	str	r3, [r7, #24]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d3eb      	bcc.n	8005d42 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3724      	adds	r7, #36	; 0x24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	785b      	ldrb	r3, [r3, #1]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d12c      	bne.n	8005dee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	db12      	blt.n	8005dcc <USB_EPSetStall+0x54>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00f      	beq.n	8005dcc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	015a      	lsls	r2, r3, #5
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4413      	add	r3, r2
 8005db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68ba      	ldr	r2, [r7, #8]
 8005dbc:	0151      	lsls	r1, r2, #5
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	440a      	add	r2, r1
 8005dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	0151      	lsls	r1, r2, #5
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	440a      	add	r2, r1
 8005de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005de6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	e02b      	b.n	8005e46 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	015a      	lsls	r2, r3, #5
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	db12      	blt.n	8005e26 <USB_EPSetStall+0xae>
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00f      	beq.n	8005e26 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68ba      	ldr	r2, [r7, #8]
 8005e16:	0151      	lsls	r1, r2, #5
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e20:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e24:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e44:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3714      	adds	r7, #20
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e6e:	f023 0302 	bic.w	r3, r3, #2
 8005e72:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005e74:	2003      	movs	r0, #3
 8005e76:	f7fb f825 	bl	8000ec4 <HAL_Delay>

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e9e:	f043 0302 	orr.w	r3, r3, #2
 8005ea2:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005ea4:	2003      	movs	r0, #3
 8005ea6:	f7fb f80d 	bl	8000ec4 <HAL_Delay>

  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b087      	sub	sp, #28
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	333c      	adds	r3, #60	; 0x3c
 8005eca:	3304      	adds	r3, #4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4a26      	ldr	r2, [pc, #152]	; (8005f6c <USB_EP0_OutStart+0xb8>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d90a      	bls.n	8005eee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee8:	d101      	bne.n	8005eee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	e037      	b.n	8005f5e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f0c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f1c:	f043 0318 	orr.w	r3, r3, #24
 8005f20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f30:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005f34:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10f      	bne.n	8005f5c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f42:	461a      	mov	r2, r3
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f56:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005f5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	371c      	adds	r7, #28
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	4f54300a 	.word	0x4f54300a

08005f70 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	4a13      	ldr	r2, [pc, #76]	; (8005fd4 <USB_CoreReset+0x64>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d901      	bls.n	8005f8e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e01b      	b.n	8005fc6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	daf2      	bge.n	8005f7c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	60fb      	str	r3, [r7, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4a09      	ldr	r2, [pc, #36]	; (8005fd4 <USB_CoreReset+0x64>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d901      	bls.n	8005fb8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fb4:	2303      	movs	r3, #3
 8005fb6:	e006      	b.n	8005fc6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d0f0      	beq.n	8005fa6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	00030d40 	.word	0x00030d40

08005fd8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005fdc:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <MX_FATFS_Init+0x18>)
 8005fde:	4805      	ldr	r0, [pc, #20]	; (8005ff4 <MX_FATFS_Init+0x1c>)
 8005fe0:	f000 fea4 	bl	8006d2c <FATFS_LinkDriver>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	4b03      	ldr	r3, [pc, #12]	; (8005ff8 <MX_FATFS_Init+0x20>)
 8005fea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005fec:	bf00      	nop
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	200005d4 	.word	0x200005d4
 8005ff4:	08007dd8 	.word	0x08007dd8
 8005ff8:	200005d0 	.word	0x200005d0

08005ffc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006006:	f000 f871 	bl	80060ec <BSP_SD_IsDetected>
 800600a:	4603      	mov	r3, r0
 800600c:	2b01      	cmp	r3, #1
 800600e:	d001      	beq.n	8006014 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e012      	b.n	800603a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006014:	480b      	ldr	r0, [pc, #44]	; (8006044 <BSP_SD_Init+0x48>)
 8006016:	f7fc fed7 	bl	8002dc8 <HAL_SD_Init>
 800601a:	4603      	mov	r3, r0
 800601c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800601e:	79fb      	ldrb	r3, [r7, #7]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006028:	4806      	ldr	r0, [pc, #24]	; (8006044 <BSP_SD_Init+0x48>)
 800602a:	f7fd fcb5 	bl	8003998 <HAL_SD_ConfigWideBusOperation>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006038:	79fb      	ldrb	r3, [r7, #7]
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20000548 	.word	0x20000548

08006048 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	68f9      	ldr	r1, [r7, #12]
 800605e:	4806      	ldr	r0, [pc, #24]	; (8006078 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006060:	f7fc ff42 	bl	8002ee8 <HAL_SD_ReadBlocks_DMA>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800606e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000548 	.word	0x20000548

0800607c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006088:	2300      	movs	r3, #0
 800608a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	68f9      	ldr	r1, [r7, #12]
 8006092:	4806      	ldr	r0, [pc, #24]	; (80060ac <BSP_SD_WriteBlocks_DMA+0x30>)
 8006094:	f7fd f812 	bl	80030bc <HAL_SD_WriteBlocks_DMA>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3718      	adds	r7, #24
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	20000548 	.word	0x20000548

080060b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80060b4:	4805      	ldr	r0, [pc, #20]	; (80060cc <BSP_SD_GetCardState+0x1c>)
 80060b6:	f7fd fceb 	bl	8003a90 <HAL_SD_GetCardState>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b04      	cmp	r3, #4
 80060be:	bf14      	ite	ne
 80060c0:	2301      	movne	r3, #1
 80060c2:	2300      	moveq	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000548 	.word	0x20000548

080060d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4803      	ldr	r0, [pc, #12]	; (80060e8 <BSP_SD_GetCardInfo+0x18>)
 80060dc:	f7fd fc30 	bl	8003940 <HAL_SD_GetCardInfo>
}
 80060e0:	bf00      	nop
 80060e2:	3708      	adds	r7, #8
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	20000548 	.word	0x20000548

080060ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80060f2:	2301      	movs	r3, #1
 80060f4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80060f6:	f000 f80b 	bl	8006110 <BSP_PlatformIsDetected>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d101      	bne.n	8006104 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006100:	2300      	movs	r3, #0
 8006102:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	b2db      	uxtb	r3, r3
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006116:	2301      	movs	r3, #1
 8006118:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800611a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800611e:	4806      	ldr	r0, [pc, #24]	; (8006138 <BSP_PlatformIsDetected+0x28>)
 8006120:	f7fb fd3a 	bl	8001b98 <HAL_GPIO_ReadPin>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d001      	beq.n	800612e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800612a:	2300      	movs	r3, #0
 800612c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800612e:	79fb      	ldrb	r3, [r7, #7]
}  
 8006130:	4618      	mov	r0, r3
 8006132:	3708      	adds	r7, #8
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	40020000 	.word	0x40020000

0800613c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8006144:	f7fa feb2 	bl	8000eac <HAL_GetTick>
 8006148:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800614a:	e006      	b.n	800615a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800614c:	f7ff ffb0 	bl	80060b0 <BSP_SD_GetCardState>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006156:	2300      	movs	r3, #0
 8006158:	e009      	b.n	800616e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800615a:	f7fa fea7 	bl	8000eac <HAL_GetTick>
 800615e:	4602      	mov	r2, r0
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	429a      	cmp	r2, r3
 8006168:	d8f0      	bhi.n	800614c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800616a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b082      	sub	sp, #8
 800617c:	af00      	add	r7, sp, #0
 800617e:	4603      	mov	r3, r0
 8006180:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006182:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <SD_CheckStatus+0x38>)
 8006184:	2201      	movs	r2, #1
 8006186:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006188:	f7ff ff92 	bl	80060b0 <BSP_SD_GetCardState>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d107      	bne.n	80061a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006192:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <SD_CheckStatus+0x38>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	f023 0301 	bic.w	r3, r3, #1
 800619c:	b2da      	uxtb	r2, r3
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <SD_CheckStatus+0x38>)
 80061a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80061a2:	4b03      	ldr	r3, [pc, #12]	; (80061b0 <SD_CheckStatus+0x38>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	b2db      	uxtb	r3, r3
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3708      	adds	r7, #8
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000009 	.word	0x20000009

080061b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	4603      	mov	r3, r0
 80061bc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80061be:	f7ff ff1d 	bl	8005ffc <BSP_SD_Init>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d107      	bne.n	80061d8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff ffd4 	bl	8006178 <SD_CheckStatus>
 80061d0:	4603      	mov	r3, r0
 80061d2:	461a      	mov	r2, r3
 80061d4:	4b04      	ldr	r3, [pc, #16]	; (80061e8 <SD_initialize+0x34>)
 80061d6:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 80061d8:	4b03      	ldr	r3, [pc, #12]	; (80061e8 <SD_initialize+0x34>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	b2db      	uxtb	r3, r3
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000009 	.word	0x20000009

080061ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	4603      	mov	r3, r0
 80061f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff ffbd 	bl	8006178 <SD_CheckStatus>
 80061fe:	4603      	mov	r3, r0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	607a      	str	r2, [r7, #4]
 8006212:	603b      	str	r3, [r7, #0]
 8006214:	4603      	mov	r3, r0
 8006216:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800621c:	f247 5030 	movw	r0, #30000	; 0x7530
 8006220:	f7ff ff8c 	bl	800613c <SD_CheckStatusWithTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	da01      	bge.n	800622e <SD_read+0x26>
  {
    return res;
 800622a:	7ffb      	ldrb	r3, [r7, #31]
 800622c:	e08b      	b.n	8006346 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f003 0303 	and.w	r3, r3, #3
 8006234:	2b00      	cmp	r3, #0
 8006236:	f040 8085 	bne.w	8006344 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	6879      	ldr	r1, [r7, #4]
 800623e:	68b8      	ldr	r0, [r7, #8]
 8006240:	f7ff ff02 	bl	8006048 <BSP_SD_ReadBlocks_DMA>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d133      	bne.n	80062b2 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800624a:	4b41      	ldr	r3, [pc, #260]	; (8006350 <SD_read+0x148>)
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8006250:	f7fa fe2c 	bl	8000eac <HAL_GetTick>
 8006254:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8006256:	bf00      	nop
 8006258:	4b3d      	ldr	r3, [pc, #244]	; (8006350 <SD_read+0x148>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d108      	bne.n	8006272 <SD_read+0x6a>
 8006260:	f7fa fe24 	bl	8000eac <HAL_GetTick>
 8006264:	4602      	mov	r2, r0
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	1ad3      	subs	r3, r2, r3
 800626a:	f247 522f 	movw	r2, #29999	; 0x752f
 800626e:	4293      	cmp	r3, r2
 8006270:	d9f2      	bls.n	8006258 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8006272:	4b37      	ldr	r3, [pc, #220]	; (8006350 <SD_read+0x148>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <SD_read+0x78>
      {
        res = RES_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	77fb      	strb	r3, [r7, #31]
 800627e:	e061      	b.n	8006344 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8006280:	4b33      	ldr	r3, [pc, #204]	; (8006350 <SD_read+0x148>)
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8006286:	f7fa fe11 	bl	8000eac <HAL_GetTick>
 800628a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800628c:	e007      	b.n	800629e <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800628e:	f7ff ff0f 	bl	80060b0 <BSP_SD_GetCardState>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <SD_read+0x96>
          {
            res = RES_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800629c:	e052      	b.n	8006344 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800629e:	f7fa fe05 	bl	8000eac <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	1ad3      	subs	r3, r2, r3
 80062a8:	f247 522f 	movw	r2, #29999	; 0x752f
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d9ee      	bls.n	800628e <SD_read+0x86>
 80062b0:	e048      	b.n	8006344 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 80062b2:	2300      	movs	r3, #0
 80062b4:	61bb      	str	r3, [r7, #24]
 80062b6:	e034      	b.n	8006322 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	4619      	mov	r1, r3
 80062c2:	4824      	ldr	r0, [pc, #144]	; (8006354 <SD_read+0x14c>)
 80062c4:	f7ff fec0 	bl	8006048 <BSP_SD_ReadBlocks_DMA>
 80062c8:	4603      	mov	r3, r0
 80062ca:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 80062cc:	7fbb      	ldrb	r3, [r7, #30]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d12c      	bne.n	800632c <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 80062d2:	4b1f      	ldr	r3, [pc, #124]	; (8006350 <SD_read+0x148>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 80062d8:	f7fa fde8 	bl	8000eac <HAL_GetTick>
 80062dc:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80062de:	bf00      	nop
 80062e0:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <SD_read+0x148>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d108      	bne.n	80062fa <SD_read+0xf2>
 80062e8:	f7fa fde0 	bl	8000eac <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f247 522f 	movw	r2, #29999	; 0x752f
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d9f2      	bls.n	80062e0 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 80062fa:	4b15      	ldr	r3, [pc, #84]	; (8006350 <SD_read+0x148>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	4a13      	ldr	r2, [pc, #76]	; (8006354 <SD_read+0x14c>)
 8006306:	4618      	mov	r0, r3
 8006308:	4611      	mov	r1, r2
 800630a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800630e:	461a      	mov	r2, r3
 8006310:	f001 f904 	bl	800751c <memcpy>
          buff += BLOCKSIZE;
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800631a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	3301      	adds	r3, #1
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d8c6      	bhi.n	80062b8 <SD_read+0xb0>
 800632a:	e002      	b.n	8006332 <SD_read+0x12a>
        }
        else
        {
          break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <SD_read+0x12a>
            break;
 8006330:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	683a      	ldr	r2, [r7, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d104      	bne.n	8006344 <SD_read+0x13c>
 800633a:	7fbb      	ldrb	r3, [r7, #30]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <SD_read+0x13c>
        res = RES_OK;
 8006340:	2300      	movs	r3, #0
 8006342:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8006344:	7ffb      	ldrb	r3, [r7, #31]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3720      	adds	r7, #32
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	2000041c 	.word	0x2000041c
 8006354:	20000218 	.word	0x20000218

08006358 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b088      	sub	sp, #32
 800635c:	af00      	add	r7, sp, #0
 800635e:	60b9      	str	r1, [r7, #8]
 8006360:	607a      	str	r2, [r7, #4]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4603      	mov	r3, r0
 8006366:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800636c:	4b4c      	ldr	r3, [pc, #304]	; (80064a0 <SD_write+0x148>)
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006372:	f247 5030 	movw	r0, #30000	; 0x7530
 8006376:	f7ff fee1 	bl	800613c <SD_CheckStatusWithTimeout>
 800637a:	4603      	mov	r3, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	da01      	bge.n	8006384 <SD_write+0x2c>
  {
    return res;
 8006380:	7ffb      	ldrb	r3, [r7, #31]
 8006382:	e088      	b.n	8006496 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b00      	cmp	r3, #0
 800638c:	f040 8082 	bne.w	8006494 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	68b8      	ldr	r0, [r7, #8]
 8006396:	f7ff fe71 	bl	800607c <BSP_SD_WriteBlocks_DMA>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d130      	bne.n	8006402 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80063a0:	f7fa fd84 	bl	8000eac <HAL_GetTick>
 80063a4:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80063a6:	bf00      	nop
 80063a8:	4b3d      	ldr	r3, [pc, #244]	; (80064a0 <SD_write+0x148>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d108      	bne.n	80063c2 <SD_write+0x6a>
 80063b0:	f7fa fd7c 	bl	8000eac <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	f247 522f 	movw	r2, #29999	; 0x752f
 80063be:	4293      	cmp	r3, r2
 80063c0:	d9f2      	bls.n	80063a8 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 80063c2:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <SD_write+0x148>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d102      	bne.n	80063d0 <SD_write+0x78>
      {
        res = RES_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	77fb      	strb	r3, [r7, #31]
 80063ce:	e061      	b.n	8006494 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 80063d0:	4b33      	ldr	r3, [pc, #204]	; (80064a0 <SD_write+0x148>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80063d6:	f7fa fd69 	bl	8000eac <HAL_GetTick>
 80063da:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063dc:	e007      	b.n	80063ee <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80063de:	f7ff fe67 	bl	80060b0 <BSP_SD_GetCardState>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <SD_write+0x96>
          {
            res = RES_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	77fb      	strb	r3, [r7, #31]
            break;
 80063ec:	e052      	b.n	8006494 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80063ee:	f7fa fd5d 	bl	8000eac <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f247 522f 	movw	r2, #29999	; 0x752f
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d9ee      	bls.n	80063de <SD_write+0x86>
 8006400:	e048      	b.n	8006494 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8006402:	2300      	movs	r3, #0
 8006404:	61bb      	str	r3, [r7, #24]
 8006406:	e034      	b.n	8006472 <SD_write+0x11a>
      {
        WriteStatus = 0;
 8006408:	4b25      	ldr	r3, [pc, #148]	; (80064a0 <SD_write+0x148>)
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	1c5a      	adds	r2, r3, #1
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	4619      	mov	r1, r3
 8006418:	4822      	ldr	r0, [pc, #136]	; (80064a4 <SD_write+0x14c>)
 800641a:	f7ff fe2f 	bl	800607c <BSP_SD_WriteBlocks_DMA>
 800641e:	4603      	mov	r3, r0
 8006420:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8006422:	7fbb      	ldrb	r3, [r7, #30]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d129      	bne.n	800647c <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8006428:	f7fa fd40 	bl	8000eac <HAL_GetTick>
 800642c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800642e:	bf00      	nop
 8006430:	4b1b      	ldr	r3, [pc, #108]	; (80064a0 <SD_write+0x148>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d108      	bne.n	800644a <SD_write+0xf2>
 8006438:	f7fa fd38 	bl	8000eac <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	f247 522f 	movw	r2, #29999	; 0x752f
 8006446:	4293      	cmp	r3, r2
 8006448:	d9f2      	bls.n	8006430 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800644a:	4b15      	ldr	r3, [pc, #84]	; (80064a0 <SD_write+0x148>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d016      	beq.n	8006480 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <SD_write+0x14c>)
 8006456:	4618      	mov	r0, r3
 8006458:	4611      	mov	r1, r2
 800645a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800645e:	461a      	mov	r2, r3
 8006460:	f001 f85c 	bl	800751c <memcpy>
          buff += BLOCKSIZE;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800646a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	3301      	adds	r3, #1
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	683a      	ldr	r2, [r7, #0]
 8006476:	429a      	cmp	r2, r3
 8006478:	d8c6      	bhi.n	8006408 <SD_write+0xb0>
 800647a:	e002      	b.n	8006482 <SD_write+0x12a>
        }
        else
        {
          break;
 800647c:	bf00      	nop
 800647e:	e000      	b.n	8006482 <SD_write+0x12a>
            break;
 8006480:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8006482:	69bb      	ldr	r3, [r7, #24]
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	429a      	cmp	r2, r3
 8006488:	d104      	bne.n	8006494 <SD_write+0x13c>
 800648a:	7fbb      	ldrb	r3, [r7, #30]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <SD_write+0x13c>
        res = RES_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8006494:	7ffb      	ldrb	r3, [r7, #31]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000418 	.word	0x20000418
 80064a4:	20000218 	.word	0x20000218

080064a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	603a      	str	r2, [r7, #0]
 80064b2:	71fb      	strb	r3, [r7, #7]
 80064b4:	460b      	mov	r3, r1
 80064b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80064be:	4b25      	ldr	r3, [pc, #148]	; (8006554 <SD_ioctl+0xac>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <SD_ioctl+0x28>
 80064cc:	2303      	movs	r3, #3
 80064ce:	e03c      	b.n	800654a <SD_ioctl+0xa2>

  switch (cmd)
 80064d0:	79bb      	ldrb	r3, [r7, #6]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d834      	bhi.n	8006540 <SD_ioctl+0x98>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <SD_ioctl+0x34>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	080064f5 	.word	0x080064f5
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006527 	.word	0x08006527
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80064ec:	2300      	movs	r3, #0
 80064ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80064f2:	e028      	b.n	8006546 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80064f4:	f107 030c 	add.w	r3, r7, #12
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7ff fde9 	bl	80060d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80064fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800650a:	e01c      	b.n	8006546 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800650c:	f107 030c 	add.w	r3, r7, #12
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff fddd 	bl	80060d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	b29a      	uxth	r2, r3
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800651e:	2300      	movs	r3, #0
 8006520:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006524:	e00f      	b.n	8006546 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006526:	f107 030c 	add.w	r3, r7, #12
 800652a:	4618      	mov	r0, r3
 800652c:	f7ff fdd0 	bl	80060d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	0a5a      	lsrs	r2, r3, #9
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800653e:	e002      	b.n	8006546 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006540:	2304      	movs	r3, #4
 8006542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800654a:	4618      	mov	r0, r3
 800654c:	3730      	adds	r7, #48	; 0x30
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20000009 	.word	0x20000009

08006558 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	7c1b      	ldrb	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d115      	bne.n	800659c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006574:	2202      	movs	r2, #2
 8006576:	2181      	movs	r1, #129	; 0x81
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 feac 	bl	80072d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006584:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006588:	2202      	movs	r2, #2
 800658a:	2101      	movs	r1, #1
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 fea2 	bl	80072d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800659a:	e012      	b.n	80065c2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800659c:	2340      	movs	r3, #64	; 0x40
 800659e:	2202      	movs	r2, #2
 80065a0:	2181      	movs	r1, #129	; 0x81
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fe97 	bl	80072d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065ae:	2340      	movs	r3, #64	; 0x40
 80065b0:	2202      	movs	r2, #2
 80065b2:	2101      	movs	r1, #1
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fe8e 	bl	80072d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065c2:	2308      	movs	r3, #8
 80065c4:	2203      	movs	r2, #3
 80065c6:	2182      	movs	r1, #130	; 0x82
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 fe84 	bl	80072d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80065d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065d8:	f000 ff90 	bl	80074fc <malloc>
 80065dc:	4603      	mov	r3, r0
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d102      	bne.n	80065f6 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80065f0:	2301      	movs	r3, #1
 80065f2:	73fb      	strb	r3, [r7, #15]
 80065f4:	e026      	b.n	8006644 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065fc:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2200      	movs	r2, #0
 8006614:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	7c1b      	ldrb	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d109      	bne.n	8006634 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006626:	f44f 7300 	mov.w	r3, #512	; 0x200
 800662a:	2101      	movs	r1, #1
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fed9 	bl	80073e4 <USBD_LL_PrepareReceive>
 8006632:	e007      	b.n	8006644 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800663a:	2340      	movs	r3, #64	; 0x40
 800663c:	2101      	movs	r1, #1
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fed0 	bl	80073e4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006644:	7bfb      	ldrb	r3, [r7, #15]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b084      	sub	sp, #16
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800665a:	2300      	movs	r3, #0
 800665c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800665e:	2181      	movs	r1, #129	; 0x81
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fe5e 	bl	8007322 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800666c:	2101      	movs	r1, #1
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fe57 	bl	8007322 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800667c:	2182      	movs	r1, #130	; 0x82
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fe4f 	bl	8007322 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00e      	beq.n	80066b2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 ff31 	bl	800750c <free>
    pdev->pClassData = NULL;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066cc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066d6:	2300      	movs	r3, #0
 80066d8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d039      	beq.n	800675a <USBD_CDC_Setup+0x9e>
 80066e6:	2b20      	cmp	r3, #32
 80066e8:	d17c      	bne.n	80067e4 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	88db      	ldrh	r3, [r3, #6]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d029      	beq.n	8006746 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	b25b      	sxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	da11      	bge.n	8006720 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8006708:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	88d2      	ldrh	r2, [r2, #6]
 800670e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006710:	6939      	ldr	r1, [r7, #16]
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	88db      	ldrh	r3, [r3, #6]
 8006716:	461a      	mov	r2, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fa80 	bl	8006c1e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800671e:	e068      	b.n	80067f2 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	785a      	ldrb	r2, [r3, #1]
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	88db      	ldrh	r3, [r3, #6]
 800672e:	b2da      	uxtb	r2, r3
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006736:	6939      	ldr	r1, [r7, #16]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	88db      	ldrh	r3, [r3, #6]
 800673c:	461a      	mov	r2, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fa89 	bl	8006c56 <USBD_CtlPrepareRx>
    break;
 8006744:	e055      	b.n	80067f2 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	7850      	ldrb	r0, [r2, #1]
 8006752:	2200      	movs	r2, #0
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	4798      	blx	r3
    break;
 8006758:	e04b      	b.n	80067f2 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	785b      	ldrb	r3, [r3, #1]
 800675e:	2b0a      	cmp	r3, #10
 8006760:	d017      	beq.n	8006792 <USBD_CDC_Setup+0xd6>
 8006762:	2b0b      	cmp	r3, #11
 8006764:	d029      	beq.n	80067ba <USBD_CDC_Setup+0xfe>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d133      	bne.n	80067d2 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006770:	2b03      	cmp	r3, #3
 8006772:	d107      	bne.n	8006784 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006774:	f107 030c 	add.w	r3, r7, #12
 8006778:	2202      	movs	r2, #2
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fa4e 	bl	8006c1e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006782:	e02e      	b.n	80067e2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006784:	6839      	ldr	r1, [r7, #0]
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f9de 	bl	8006b48 <USBD_CtlError>
			  ret = USBD_FAIL;
 800678c:	2302      	movs	r3, #2
 800678e:	75fb      	strb	r3, [r7, #23]
      break;
 8006790:	e027      	b.n	80067e2 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006798:	2b03      	cmp	r3, #3
 800679a:	d107      	bne.n	80067ac <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800679c:	f107 030f 	add.w	r3, r7, #15
 80067a0:	2201      	movs	r2, #1
 80067a2:	4619      	mov	r1, r3
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fa3a 	bl	8006c1e <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80067aa:	e01a      	b.n	80067e2 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80067ac:	6839      	ldr	r1, [r7, #0]
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f9ca 	bl	8006b48 <USBD_CtlError>
			  ret = USBD_FAIL;
 80067b4:	2302      	movs	r3, #2
 80067b6:	75fb      	strb	r3, [r7, #23]
      break;
 80067b8:	e013      	b.n	80067e2 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067c0:	2b03      	cmp	r3, #3
 80067c2:	d00d      	beq.n	80067e0 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80067c4:	6839      	ldr	r1, [r7, #0]
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f9be 	bl	8006b48 <USBD_CtlError>
			  ret = USBD_FAIL;
 80067cc:	2302      	movs	r3, #2
 80067ce:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80067d0:	e006      	b.n	80067e0 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80067d2:	6839      	ldr	r1, [r7, #0]
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f9b7 	bl	8006b48 <USBD_CtlError>
      ret = USBD_FAIL;
 80067da:	2302      	movs	r3, #2
 80067dc:	75fb      	strb	r3, [r7, #23]
      break;
 80067de:	e000      	b.n	80067e2 <USBD_CDC_Setup+0x126>
      break;
 80067e0:	bf00      	nop
    }
    break;
 80067e2:	e006      	b.n	80067f2 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f9ae 	bl	8006b48 <USBD_CtlError>
    ret = USBD_FAIL;
 80067ec:	2302      	movs	r3, #2
 80067ee:	75fb      	strb	r3, [r7, #23]
    break;
 80067f0:	bf00      	nop
  }

  return ret;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	460b      	mov	r3, r1
 8006806:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800680e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8006816:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800681e:	2b00      	cmp	r3, #0
 8006820:	d03a      	beq.n	8006898 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006822:	78fa      	ldrb	r2, [r7, #3]
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	4613      	mov	r3, r2
 8006828:	009b      	lsls	r3, r3, #2
 800682a:	4413      	add	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	440b      	add	r3, r1
 8006830:	331c      	adds	r3, #28
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d029      	beq.n	800688c <USBD_CDC_DataIn+0x90>
 8006838:	78fa      	ldrb	r2, [r7, #3]
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	4613      	mov	r3, r2
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	4413      	add	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	440b      	add	r3, r1
 8006846:	331c      	adds	r3, #28
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	78f9      	ldrb	r1, [r7, #3]
 800684c:	68b8      	ldr	r0, [r7, #8]
 800684e:	460b      	mov	r3, r1
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	1a5b      	subs	r3, r3, r1
 8006854:	009b      	lsls	r3, r3, #2
 8006856:	4403      	add	r3, r0
 8006858:	3344      	adds	r3, #68	; 0x44
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006860:	fb03 f301 	mul.w	r3, r3, r1
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b00      	cmp	r3, #0
 8006868:	d110      	bne.n	800688c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800686a:	78fa      	ldrb	r2, [r7, #3]
 800686c:	6879      	ldr	r1, [r7, #4]
 800686e:	4613      	mov	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	4413      	add	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	440b      	add	r3, r1
 8006878:	331c      	adds	r3, #28
 800687a:	2200      	movs	r2, #0
 800687c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800687e:	78f9      	ldrb	r1, [r7, #3]
 8006880:	2300      	movs	r3, #0
 8006882:	2200      	movs	r2, #0
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fd8a 	bl	800739e <USBD_LL_Transmit>
 800688a:	e003      	b.n	8006894 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006894:	2300      	movs	r3, #0
 8006896:	e000      	b.n	800689a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006898:	2302      	movs	r3, #2
  }
}
 800689a:	4618      	mov	r0, r3
 800689c:	3710      	adds	r7, #16
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}

080068a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068a2:	b580      	push	{r7, lr}
 80068a4:	b084      	sub	sp, #16
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
 80068aa:	460b      	mov	r3, r1
 80068ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	4619      	mov	r1, r3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fdb5 	bl	800742a <USBD_LL_GetRxDataSize>
 80068c0:	4602      	mov	r2, r0
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00d      	beq.n	80068ee <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068e6:	4611      	mov	r1, r2
 80068e8:	4798      	blx	r3

    return USBD_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	e000      	b.n	80068f0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80068ee:	2302      	movs	r3, #2
  }
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006906:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800690e:	2b00      	cmp	r3, #0
 8006910:	d015      	beq.n	800693e <USBD_CDC_EP0_RxReady+0x46>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006918:	2bff      	cmp	r3, #255	; 0xff
 800691a:	d010      	beq.n	800693e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800692a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006932:	b292      	uxth	r2, r2
 8006934:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	22ff      	movs	r2, #255	; 0xff
 800693a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2243      	movs	r2, #67	; 0x43
 8006954:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006956:	4b03      	ldr	r3, [pc, #12]	; (8006964 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006958:	4618      	mov	r0, r3
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr
 8006964:	20000094 	.word	0x20000094

08006968 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2243      	movs	r2, #67	; 0x43
 8006974:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006976:	4b03      	ldr	r3, [pc, #12]	; (8006984 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006978:	4618      	mov	r0, r3
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr
 8006984:	20000050 	.word	0x20000050

08006988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2243      	movs	r2, #67	; 0x43
 8006994:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006996:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	200000d8 	.word	0x200000d8

080069a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	220a      	movs	r2, #10
 80069b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069b6:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	370c      	adds	r7, #12
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	2000000c 	.word	0x2000000c

080069c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069d2:	2302      	movs	r3, #2
 80069d4:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d005      	beq.n	80069e8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b087      	sub	sp, #28
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	4613      	mov	r3, r2
 8006a02:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a0a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a1c:	2300      	movs	r3, #0
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b085      	sub	sp, #20
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a3a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	683a      	ldr	r2, [r7, #0]
 8006a40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b084      	sub	sp, #16
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d017      	beq.n	8006a9c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	7c1b      	ldrb	r3, [r3, #16]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d109      	bne.n	8006a88 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a7e:	2101      	movs	r1, #1
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 fcaf 	bl	80073e4 <USBD_LL_PrepareReceive>
 8006a86:	e007      	b.n	8006a98 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a8e:	2340      	movs	r3, #64	; 0x40
 8006a90:	2101      	movs	r1, #1
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 fca6 	bl	80073e4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e000      	b.n	8006a9e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006a9c:	2302      	movs	r3, #2
  }
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b084      	sub	sp, #16
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d101      	bne.n	8006abe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006aba:	2302      	movs	r3, #2
 8006abc:	e01a      	b.n	8006af4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d003      	beq.n	8006ad0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	79fa      	ldrb	r2, [r7, #7]
 8006aea:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 fb8b 	bl	8007208 <USBD_LL_Init>

  return USBD_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d006      	beq.n	8006b1e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
 8006b1c:	e001      	b.n	8006b22 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fbb1 	bl	80072a0 <USBD_LL_Start>

  return USBD_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8006b52:	2180      	movs	r1, #128	; 0x80
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fc03 	bl	8007360 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8006b5a:	2100      	movs	r1, #0
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fbff 	bl	8007360 <USBD_LL_StallEP>
}
 8006b62:	bf00      	nop
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b086      	sub	sp, #24
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	60f8      	str	r0, [r7, #12]
 8006b72:	60b9      	str	r1, [r7, #8]
 8006b74:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d032      	beq.n	8006be6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 f834 	bl	8006bee <USBD_GetLen>
 8006b86:	4603      	mov	r3, r0
 8006b88:	3301      	adds	r3, #1
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006b94:	7dfb      	ldrb	r3, [r7, #23]
 8006b96:	1c5a      	adds	r2, r3, #1
 8006b98:	75fa      	strb	r2, [r7, #23]
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4413      	add	r3, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	7812      	ldrb	r2, [r2, #0]
 8006ba4:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	75fa      	strb	r2, [r7, #23]
 8006bac:	461a      	mov	r2, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	2203      	movs	r2, #3
 8006bb4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006bb6:	e012      	b.n	8006bde <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	60fa      	str	r2, [r7, #12]
 8006bbe:	7dfa      	ldrb	r2, [r7, #23]
 8006bc0:	1c51      	adds	r1, r2, #1
 8006bc2:	75f9      	strb	r1, [r7, #23]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	440a      	add	r2, r1
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8006bce:	7dfb      	ldrb	r3, [r7, #23]
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	75fa      	strb	r2, [r7, #23]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	4413      	add	r3, r2
 8006bda:	2200      	movs	r2, #0
 8006bdc:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e8      	bne.n	8006bb8 <USBD_GetString+0x4e>
    }
  }
}
 8006be6:	bf00      	nop
 8006be8:	3718      	adds	r7, #24
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8006bfa:	e005      	b.n	8006c08 <USBD_GetLen+0x1a>
    {
        len++;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
        buf++;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3301      	adds	r3, #1
 8006c06:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1f5      	bne.n	8006bfc <USBD_GetLen+0xe>
    }

    return len;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr

08006c1e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2202      	movs	r2, #2
 8006c30:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8006c34:	88fa      	ldrh	r2, [r7, #6]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8006c3a:	88fa      	ldrh	r2, [r7, #6]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8006c40:	88fb      	ldrh	r3, [r7, #6]
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	2100      	movs	r1, #0
 8006c46:	68f8      	ldr	r0, [r7, #12]
 8006c48:	f000 fba9 	bl	800739e <USBD_LL_Transmit>

  return USBD_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60f8      	str	r0, [r7, #12]
 8006c5e:	60b9      	str	r1, [r7, #8]
 8006c60:	4613      	mov	r3, r2
 8006c62:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2203      	movs	r2, #3
 8006c68:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8006c6c:	88fa      	ldrh	r2, [r7, #6]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8006c74:	88fa      	ldrh	r2, [r7, #6]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8006c7c:	88fb      	ldrh	r3, [r7, #6]
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	2100      	movs	r1, #0
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 fbae 	bl	80073e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3710      	adds	r7, #16
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006caa:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <FATFS_LinkDriverEx+0x94>)
 8006cac:	7a5b      	ldrb	r3, [r3, #9]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d131      	bne.n	8006d18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006cb4:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <FATFS_LinkDriverEx+0x94>)
 8006cb6:	7a5b      	ldrb	r3, [r3, #9]
 8006cb8:	b2db      	uxtb	r3, r3
 8006cba:	461a      	mov	r2, r3
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <FATFS_LinkDriverEx+0x94>)
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006cc2:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <FATFS_LinkDriverEx+0x94>)
 8006cc4:	7a5b      	ldrb	r3, [r3, #9]
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	4a17      	ldr	r2, [pc, #92]	; (8006d28 <FATFS_LinkDriverEx+0x94>)
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	4413      	add	r3, r2
 8006cce:	68fa      	ldr	r2, [r7, #12]
 8006cd0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006cd2:	4b15      	ldr	r3, [pc, #84]	; (8006d28 <FATFS_LinkDriverEx+0x94>)
 8006cd4:	7a5b      	ldrb	r3, [r3, #9]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <FATFS_LinkDriverEx+0x94>)
 8006cdc:	4413      	add	r3, r2
 8006cde:	79fa      	ldrb	r2, [r7, #7]
 8006ce0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006ce2:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <FATFS_LinkDriverEx+0x94>)
 8006ce4:	7a5b      	ldrb	r3, [r3, #9]
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	b2d1      	uxtb	r1, r2
 8006cec:	4a0e      	ldr	r2, [pc, #56]	; (8006d28 <FATFS_LinkDriverEx+0x94>)
 8006cee:	7251      	strb	r1, [r2, #9]
 8006cf0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006cf2:	7dbb      	ldrb	r3, [r7, #22]
 8006cf4:	3330      	adds	r3, #48	; 0x30
 8006cf6:	b2da      	uxtb	r2, r3
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	223a      	movs	r2, #58	; 0x3a
 8006d02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	3302      	adds	r3, #2
 8006d08:	222f      	movs	r2, #47	; 0x2f
 8006d0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3303      	adds	r3, #3
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006d14:	2300      	movs	r3, #0
 8006d16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006d18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	20000420 	.word	0x20000420

08006d2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006d36:	2200      	movs	r2, #0
 8006d38:	6839      	ldr	r1, [r7, #0]
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7ff ffaa 	bl	8006c94 <FATFS_LinkDriverEx>
 8006d40:	4603      	mov	r3, r0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3708      	adds	r7, #8
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
	...

08006d4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d50:	2200      	movs	r2, #0
 8006d52:	4912      	ldr	r1, [pc, #72]	; (8006d9c <MX_USB_DEVICE_Init+0x50>)
 8006d54:	4812      	ldr	r0, [pc, #72]	; (8006da0 <MX_USB_DEVICE_Init+0x54>)
 8006d56:	f7ff fea6 	bl	8006aa6 <USBD_Init>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d001      	beq.n	8006d64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d60:	f7f9 fe0e 	bl	8000980 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006d64:	490f      	ldr	r1, [pc, #60]	; (8006da4 <MX_USB_DEVICE_Init+0x58>)
 8006d66:	480e      	ldr	r0, [pc, #56]	; (8006da0 <MX_USB_DEVICE_Init+0x54>)
 8006d68:	f7ff fec8 	bl	8006afc <USBD_RegisterClass>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d001      	beq.n	8006d76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006d72:	f7f9 fe05 	bl	8000980 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006d76:	490c      	ldr	r1, [pc, #48]	; (8006da8 <MX_USB_DEVICE_Init+0x5c>)
 8006d78:	4809      	ldr	r0, [pc, #36]	; (8006da0 <MX_USB_DEVICE_Init+0x54>)
 8006d7a:	f7ff fe25 	bl	80069c8 <USBD_CDC_RegisterInterface>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006d84:	f7f9 fdfc 	bl	8000980 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006d88:	4805      	ldr	r0, [pc, #20]	; (8006da0 <MX_USB_DEVICE_Init+0x54>)
 8006d8a:	f7ff fed1 	bl	8006b30 <USBD_Start>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d001      	beq.n	8006d98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006d94:	f7f9 fdf4 	bl	8000980 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006d98:	bf00      	nop
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	2000012c 	.word	0x2000012c
 8006da0:	20000a38 	.word	0x20000a38
 8006da4:	20000018 	.word	0x20000018
 8006da8:	2000011c 	.word	0x2000011c

08006dac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006db0:	2200      	movs	r2, #0
 8006db2:	4905      	ldr	r1, [pc, #20]	; (8006dc8 <CDC_Init_FS+0x1c>)
 8006db4:	4805      	ldr	r0, [pc, #20]	; (8006dcc <CDC_Init_FS+0x20>)
 8006db6:	f7ff fe1e 	bl	80069f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006dba:	4905      	ldr	r1, [pc, #20]	; (8006dd0 <CDC_Init_FS+0x24>)
 8006dbc:	4803      	ldr	r0, [pc, #12]	; (8006dcc <CDC_Init_FS+0x20>)
 8006dbe:	f7ff fe34 	bl	8006a2a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006dc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	200014d4 	.word	0x200014d4
 8006dcc:	20000a38 	.word	0x20000a38
 8006dd0:	20000cd4 	.word	0x20000cd4

08006dd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006dd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	4603      	mov	r3, r0
 8006dec:	6039      	str	r1, [r7, #0]
 8006dee:	71fb      	strb	r3, [r7, #7]
 8006df0:	4613      	mov	r3, r2
 8006df2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 8006df4:	f107 0308 	add.w	r3, r7, #8
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 8006e00:	79fb      	ldrb	r3, [r7, #7]
 8006e02:	2b23      	cmp	r3, #35	; 0x23
 8006e04:	d87c      	bhi.n	8006f00 <CDC_Control_FS+0x11c>
 8006e06:	a201      	add	r2, pc, #4	; (adr r2, 8006e0c <CDC_Control_FS+0x28>)
 8006e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0c:	08006f01 	.word	0x08006f01
 8006e10:	08006f01 	.word	0x08006f01
 8006e14:	08006f01 	.word	0x08006f01
 8006e18:	08006f01 	.word	0x08006f01
 8006e1c:	08006f01 	.word	0x08006f01
 8006e20:	08006f01 	.word	0x08006f01
 8006e24:	08006f01 	.word	0x08006f01
 8006e28:	08006f01 	.word	0x08006f01
 8006e2c:	08006f01 	.word	0x08006f01
 8006e30:	08006f01 	.word	0x08006f01
 8006e34:	08006f01 	.word	0x08006f01
 8006e38:	08006f01 	.word	0x08006f01
 8006e3c:	08006f01 	.word	0x08006f01
 8006e40:	08006f01 	.word	0x08006f01
 8006e44:	08006f01 	.word	0x08006f01
 8006e48:	08006f01 	.word	0x08006f01
 8006e4c:	08006f01 	.word	0x08006f01
 8006e50:	08006f01 	.word	0x08006f01
 8006e54:	08006f01 	.word	0x08006f01
 8006e58:	08006f01 	.word	0x08006f01
 8006e5c:	08006f01 	.word	0x08006f01
 8006e60:	08006f01 	.word	0x08006f01
 8006e64:	08006f01 	.word	0x08006f01
 8006e68:	08006f01 	.word	0x08006f01
 8006e6c:	08006f01 	.word	0x08006f01
 8006e70:	08006f01 	.word	0x08006f01
 8006e74:	08006f01 	.word	0x08006f01
 8006e78:	08006f01 	.word	0x08006f01
 8006e7c:	08006f01 	.word	0x08006f01
 8006e80:	08006f01 	.word	0x08006f01
 8006e84:	08006f01 	.word	0x08006f01
 8006e88:	08006f01 	.word	0x08006f01
 8006e8c:	08006e9d 	.word	0x08006e9d
 8006e90:	08006ec9 	.word	0x08006ec9
 8006e94:	08006f01 	.word	0x08006f01
 8006e98:	08006f01 	.word	0x08006f01
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	785b      	ldrb	r3, [r3, #1]
 8006ea6:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	789b      	ldrb	r3, [r3, #2]
 8006eac:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	78db      	ldrb	r3, [r3, #3]
 8006eb2:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	791b      	ldrb	r3, [r3, #4]
 8006eb8:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	795b      	ldrb	r3, [r3, #5]
 8006ebe:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	799b      	ldrb	r3, [r3, #6]
 8006ec4:	73bb      	strb	r3, [r7, #14]
      	break;
 8006ec6:	e01c      	b.n	8006f02 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 8006ec8:	7a3a      	ldrb	r2, [r7, #8]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	7a7a      	ldrb	r2, [r7, #9]
 8006ed4:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	3302      	adds	r3, #2
 8006eda:	7aba      	ldrb	r2, [r7, #10]
 8006edc:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	3303      	adds	r3, #3
 8006ee2:	7afa      	ldrb	r2, [r7, #11]
 8006ee4:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	3304      	adds	r3, #4
 8006eea:	7b3a      	ldrb	r2, [r7, #12]
 8006eec:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	3305      	adds	r3, #5
 8006ef2:	7b7a      	ldrb	r2, [r7, #13]
 8006ef4:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	3306      	adds	r3, #6
 8006efa:	7bba      	ldrb	r2, [r7, #14]
 8006efc:	701a      	strb	r2, [r3, #0]
      	break;
 8006efe:	e000      	b.n	8006f02 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006f00:	bf00      	nop
  }

  return (USBD_OK);
 8006f02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4805      	ldr	r0, [pc, #20]	; (8006f34 <CDC_Receive_FS+0x24>)
 8006f1e:	f7ff fd84 	bl	8006a2a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006f22:	4804      	ldr	r0, [pc, #16]	; (8006f34 <CDC_Receive_FS+0x24>)
 8006f24:	f7ff fd95 	bl	8006a52 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8006f28:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	20000a38 	.word	0x20000a38

08006f38 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	6039      	str	r1, [r7, #0]
 8006f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	2212      	movs	r2, #18
 8006f48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f4a:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr
 8006f58:	20000148 	.word	0x20000148

08006f5c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	6039      	str	r1, [r7, #0]
 8006f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2204      	movs	r2, #4
 8006f6c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f6e:	4b03      	ldr	r3, [pc, #12]	; (8006f7c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	2000015c 	.word	0x2000015c

08006f80 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	6039      	str	r1, [r7, #0]
 8006f8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f8c:	79fb      	ldrb	r3, [r7, #7]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d105      	bne.n	8006f9e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f92:	683a      	ldr	r2, [r7, #0]
 8006f94:	4907      	ldr	r1, [pc, #28]	; (8006fb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f96:	4808      	ldr	r0, [pc, #32]	; (8006fb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006f98:	f7ff fde7 	bl	8006b6a <USBD_GetString>
 8006f9c:	e004      	b.n	8006fa8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f9e:	683a      	ldr	r2, [r7, #0]
 8006fa0:	4904      	ldr	r1, [pc, #16]	; (8006fb4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006fa2:	4805      	ldr	r0, [pc, #20]	; (8006fb8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006fa4:	f7ff fde1 	bl	8006b6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006fa8:	4b02      	ldr	r3, [pc, #8]	; (8006fb4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20001cd4 	.word	0x20001cd4
 8006fb8:	08007d70 	.word	0x08007d70

08006fbc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	6039      	str	r1, [r7, #0]
 8006fc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fc8:	683a      	ldr	r2, [r7, #0]
 8006fca:	4904      	ldr	r1, [pc, #16]	; (8006fdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fcc:	4804      	ldr	r0, [pc, #16]	; (8006fe0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fce:	f7ff fdcc 	bl	8006b6a <USBD_GetString>
  return USBD_StrDesc;
 8006fd2:	4b02      	ldr	r3, [pc, #8]	; (8006fdc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20001cd4 	.word	0x20001cd4
 8006fe0:	08007d88 	.word	0x08007d88

08006fe4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	4603      	mov	r3, r0
 8006fec:	6039      	str	r1, [r7, #0]
 8006fee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	221a      	movs	r2, #26
 8006ff4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006ff6:	f000 f843 	bl	8007080 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006ffa:	4b02      	ldr	r3, [pc, #8]	; (8007004 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20000160 	.word	0x20000160

08007008 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d105      	bne.n	8007026 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	4907      	ldr	r1, [pc, #28]	; (800703c <USBD_FS_ConfigStrDescriptor+0x34>)
 800701e:	4808      	ldr	r0, [pc, #32]	; (8007040 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007020:	f7ff fda3 	bl	8006b6a <USBD_GetString>
 8007024:	e004      	b.n	8007030 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	4904      	ldr	r1, [pc, #16]	; (800703c <USBD_FS_ConfigStrDescriptor+0x34>)
 800702a:	4805      	ldr	r0, [pc, #20]	; (8007040 <USBD_FS_ConfigStrDescriptor+0x38>)
 800702c:	f7ff fd9d 	bl	8006b6a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007030:	4b02      	ldr	r3, [pc, #8]	; (800703c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20001cd4 	.word	0x20001cd4
 8007040:	08007d9c 	.word	0x08007d9c

08007044 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
 800704a:	4603      	mov	r3, r0
 800704c:	6039      	str	r1, [r7, #0]
 800704e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007050:	79fb      	ldrb	r3, [r7, #7]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d105      	bne.n	8007062 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	4907      	ldr	r1, [pc, #28]	; (8007078 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800705a:	4808      	ldr	r0, [pc, #32]	; (800707c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800705c:	f7ff fd85 	bl	8006b6a <USBD_GetString>
 8007060:	e004      	b.n	800706c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	4904      	ldr	r1, [pc, #16]	; (8007078 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007066:	4805      	ldr	r0, [pc, #20]	; (800707c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007068:	f7ff fd7f 	bl	8006b6a <USBD_GetString>
  }
  return USBD_StrDesc;
 800706c:	4b02      	ldr	r3, [pc, #8]	; (8007078 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20001cd4 	.word	0x20001cd4
 800707c:	08007da8 	.word	0x08007da8

08007080 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007086:	4b0f      	ldr	r3, [pc, #60]	; (80070c4 <Get_SerialNum+0x44>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800708c:	4b0e      	ldr	r3, [pc, #56]	; (80070c8 <Get_SerialNum+0x48>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007092:	4b0e      	ldr	r3, [pc, #56]	; (80070cc <Get_SerialNum+0x4c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4413      	add	r3, r2
 800709e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80070a6:	2208      	movs	r2, #8
 80070a8:	4909      	ldr	r1, [pc, #36]	; (80070d0 <Get_SerialNum+0x50>)
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f814 	bl	80070d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80070b0:	2204      	movs	r2, #4
 80070b2:	4908      	ldr	r1, [pc, #32]	; (80070d4 <Get_SerialNum+0x54>)
 80070b4:	68b8      	ldr	r0, [r7, #8]
 80070b6:	f000 f80f 	bl	80070d8 <IntToUnicode>
  }
}
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	1fff7a10 	.word	0x1fff7a10
 80070c8:	1fff7a14 	.word	0x1fff7a14
 80070cc:	1fff7a18 	.word	0x1fff7a18
 80070d0:	20000162 	.word	0x20000162
 80070d4:	20000172 	.word	0x20000172

080070d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	60f8      	str	r0, [r7, #12]
 80070e0:	60b9      	str	r1, [r7, #8]
 80070e2:	4613      	mov	r3, r2
 80070e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070ea:	2300      	movs	r3, #0
 80070ec:	75fb      	strb	r3, [r7, #23]
 80070ee:	e027      	b.n	8007140 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	0f1b      	lsrs	r3, r3, #28
 80070f4:	2b09      	cmp	r3, #9
 80070f6:	d80b      	bhi.n	8007110 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	0f1b      	lsrs	r3, r3, #28
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	7dfb      	ldrb	r3, [r7, #23]
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	4619      	mov	r1, r3
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	440b      	add	r3, r1
 8007108:	3230      	adds	r2, #48	; 0x30
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	e00a      	b.n	8007126 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	0f1b      	lsrs	r3, r3, #28
 8007114:	b2da      	uxtb	r2, r3
 8007116:	7dfb      	ldrb	r3, [r7, #23]
 8007118:	005b      	lsls	r3, r3, #1
 800711a:	4619      	mov	r1, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	440b      	add	r3, r1
 8007120:	3237      	adds	r2, #55	; 0x37
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	3301      	adds	r3, #1
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	4413      	add	r3, r2
 8007136:	2200      	movs	r2, #0
 8007138:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800713a:	7dfb      	ldrb	r3, [r7, #23]
 800713c:	3301      	adds	r3, #1
 800713e:	75fb      	strb	r3, [r7, #23]
 8007140:	7dfa      	ldrb	r2, [r7, #23]
 8007142:	79fb      	ldrb	r3, [r7, #7]
 8007144:	429a      	cmp	r2, r3
 8007146:	d3d3      	bcc.n	80070f0 <IntToUnicode+0x18>
  }
}
 8007148:	bf00      	nop
 800714a:	371c      	adds	r7, #28
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	; 0x28
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800715c:	f107 0314 	add.w	r3, r7, #20
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	605a      	str	r2, [r3, #4]
 8007166:	609a      	str	r2, [r3, #8]
 8007168:	60da      	str	r2, [r3, #12]
 800716a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007174:	d13f      	bne.n	80071f6 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007176:	2300      	movs	r3, #0
 8007178:	613b      	str	r3, [r7, #16]
 800717a:	4b21      	ldr	r3, [pc, #132]	; (8007200 <HAL_PCD_MspInit+0xac>)
 800717c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800717e:	4a20      	ldr	r2, [pc, #128]	; (8007200 <HAL_PCD_MspInit+0xac>)
 8007180:	f043 0301 	orr.w	r3, r3, #1
 8007184:	6313      	str	r3, [r2, #48]	; 0x30
 8007186:	4b1e      	ldr	r3, [pc, #120]	; (8007200 <HAL_PCD_MspInit+0xac>)
 8007188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	613b      	str	r3, [r7, #16]
 8007190:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007198:	2300      	movs	r3, #0
 800719a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719c:	2300      	movs	r3, #0
 800719e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071a0:	f107 0314 	add.w	r3, r7, #20
 80071a4:	4619      	mov	r1, r3
 80071a6:	4817      	ldr	r0, [pc, #92]	; (8007204 <HAL_PCD_MspInit+0xb0>)
 80071a8:	f7fa fb5c 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80071ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80071b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071b2:	2302      	movs	r3, #2
 80071b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b6:	2300      	movs	r3, #0
 80071b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ba:	2303      	movs	r3, #3
 80071bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80071be:	230a      	movs	r3, #10
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071c2:	f107 0314 	add.w	r3, r7, #20
 80071c6:	4619      	mov	r1, r3
 80071c8:	480e      	ldr	r0, [pc, #56]	; (8007204 <HAL_PCD_MspInit+0xb0>)
 80071ca:	f7fa fb4b 	bl	8001864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80071ce:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <HAL_PCD_MspInit+0xac>)
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	4a0b      	ldr	r2, [pc, #44]	; (8007200 <HAL_PCD_MspInit+0xac>)
 80071d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d8:	6353      	str	r3, [r2, #52]	; 0x34
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	4b08      	ldr	r3, [pc, #32]	; (8007200 <HAL_PCD_MspInit+0xac>)
 80071e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e2:	4a07      	ldr	r2, [pc, #28]	; (8007200 <HAL_PCD_MspInit+0xac>)
 80071e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071e8:	6453      	str	r3, [r2, #68]	; 0x44
 80071ea:	4b05      	ldr	r3, [pc, #20]	; (8007200 <HAL_PCD_MspInit+0xac>)
 80071ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f2:	60fb      	str	r3, [r7, #12]
 80071f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071f6:	bf00      	nop
 80071f8:	3728      	adds	r7, #40	; 0x28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	40023800 	.word	0x40023800
 8007204:	40020000 	.word	0x40020000

08007208 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d13c      	bne.n	8007292 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007218:	4a20      	ldr	r2, [pc, #128]	; (800729c <USBD_LL_Init+0x94>)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a1e      	ldr	r2, [pc, #120]	; (800729c <USBD_LL_Init+0x94>)
 8007224:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007228:	4b1c      	ldr	r3, [pc, #112]	; (800729c <USBD_LL_Init+0x94>)
 800722a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800722e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007230:	4b1a      	ldr	r3, [pc, #104]	; (800729c <USBD_LL_Init+0x94>)
 8007232:	2204      	movs	r2, #4
 8007234:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007236:	4b19      	ldr	r3, [pc, #100]	; (800729c <USBD_LL_Init+0x94>)
 8007238:	2202      	movs	r2, #2
 800723a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800723c:	4b17      	ldr	r3, [pc, #92]	; (800729c <USBD_LL_Init+0x94>)
 800723e:	2200      	movs	r2, #0
 8007240:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007242:	4b16      	ldr	r3, [pc, #88]	; (800729c <USBD_LL_Init+0x94>)
 8007244:	2202      	movs	r2, #2
 8007246:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007248:	4b14      	ldr	r3, [pc, #80]	; (800729c <USBD_LL_Init+0x94>)
 800724a:	2200      	movs	r2, #0
 800724c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800724e:	4b13      	ldr	r3, [pc, #76]	; (800729c <USBD_LL_Init+0x94>)
 8007250:	2200      	movs	r2, #0
 8007252:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007254:	4b11      	ldr	r3, [pc, #68]	; (800729c <USBD_LL_Init+0x94>)
 8007256:	2200      	movs	r2, #0
 8007258:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800725a:	4b10      	ldr	r3, [pc, #64]	; (800729c <USBD_LL_Init+0x94>)
 800725c:	2201      	movs	r2, #1
 800725e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007260:	4b0e      	ldr	r3, [pc, #56]	; (800729c <USBD_LL_Init+0x94>)
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007266:	480d      	ldr	r0, [pc, #52]	; (800729c <USBD_LL_Init+0x94>)
 8007268:	f7fa fe1a 	bl	8001ea0 <HAL_PCD_Init>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007272:	f7f9 fb85 	bl	8000980 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007276:	2180      	movs	r1, #128	; 0x80
 8007278:	4808      	ldr	r0, [pc, #32]	; (800729c <USBD_LL_Init+0x94>)
 800727a:	f7fb f96b 	bl	8002554 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800727e:	2240      	movs	r2, #64	; 0x40
 8007280:	2100      	movs	r1, #0
 8007282:	4806      	ldr	r0, [pc, #24]	; (800729c <USBD_LL_Init+0x94>)
 8007284:	f7fb f91f 	bl	80024c6 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007288:	2280      	movs	r2, #128	; 0x80
 800728a:	2101      	movs	r1, #1
 800728c:	4803      	ldr	r0, [pc, #12]	; (800729c <USBD_LL_Init+0x94>)
 800728e:	f7fb f91a 	bl	80024c6 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20001ed4 	.word	0x20001ed4

080072a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072ac:	2300      	movs	r3, #0
 80072ae:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80072b6:	4618      	mov	r0, r3
 80072b8:	f7fa ff0f 	bl	80020da <HAL_PCD_Start>
 80072bc:	4603      	mov	r3, r0
 80072be:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f000 f8c4 	bl	8007450 <USBD_Get_USB_Status>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	4608      	mov	r0, r1
 80072e0:	4611      	mov	r1, r2
 80072e2:	461a      	mov	r2, r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	70fb      	strb	r3, [r7, #3]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70bb      	strb	r3, [r7, #2]
 80072ec:	4613      	mov	r3, r2
 80072ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80072fe:	78bb      	ldrb	r3, [r7, #2]
 8007300:	883a      	ldrh	r2, [r7, #0]
 8007302:	78f9      	ldrb	r1, [r7, #3]
 8007304:	f7fa ff1c 	bl	8002140 <HAL_PCD_EP_Open>
 8007308:	4603      	mov	r3, r0
 800730a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800730c:	7bfb      	ldrb	r3, [r7, #15]
 800730e:	4618      	mov	r0, r3
 8007310:	f000 f89e 	bl	8007450 <USBD_Get_USB_Status>
 8007314:	4603      	mov	r3, r0
 8007316:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8007318:	7bbb      	ldrb	r3, [r7, #14]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b084      	sub	sp, #16
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007332:	2300      	movs	r3, #0
 8007334:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800733c:	78fa      	ldrb	r2, [r7, #3]
 800733e:	4611      	mov	r1, r2
 8007340:	4618      	mov	r0, r3
 8007342:	f7fa ff65 	bl	8002210 <HAL_PCD_EP_Close>
 8007346:	4603      	mov	r3, r0
 8007348:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800734a:	7bfb      	ldrb	r3, [r7, #15]
 800734c:	4618      	mov	r0, r3
 800734e:	f000 f87f 	bl	8007450 <USBD_Get_USB_Status>
 8007352:	4603      	mov	r3, r0
 8007354:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8007356:	7bbb      	ldrb	r3, [r7, #14]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b084      	sub	sp, #16
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	460b      	mov	r3, r1
 800736a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800737a:	78fa      	ldrb	r2, [r7, #3]
 800737c:	4611      	mov	r1, r2
 800737e:	4618      	mov	r0, r3
 8007380:	f7fb f83d 	bl	80023fe <HAL_PCD_EP_SetStall>
 8007384:	4603      	mov	r3, r0
 8007386:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 f860 	bl	8007450 <USBD_Get_USB_Status>
 8007390:	4603      	mov	r3, r0
 8007392:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8007394:	7bbb      	ldrb	r3, [r7, #14]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	607a      	str	r2, [r7, #4]
 80073a8:	461a      	mov	r2, r3
 80073aa:	460b      	mov	r3, r1
 80073ac:	72fb      	strb	r3, [r7, #11]
 80073ae:	4613      	mov	r3, r2
 80073b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073b6:	2300      	movs	r3, #0
 80073b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80073c0:	893b      	ldrh	r3, [r7, #8]
 80073c2:	7af9      	ldrb	r1, [r7, #11]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	f7fa ffd0 	bl	800236a <HAL_PCD_EP_Transmit>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80073ce:	7dfb      	ldrb	r3, [r7, #23]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f000 f83d 	bl	8007450 <USBD_Get_USB_Status>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80073da:	7dbb      	ldrb	r3, [r7, #22]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	60f8      	str	r0, [r7, #12]
 80073ec:	607a      	str	r2, [r7, #4]
 80073ee:	461a      	mov	r2, r3
 80073f0:	460b      	mov	r3, r1
 80073f2:	72fb      	strb	r3, [r7, #11]
 80073f4:	4613      	mov	r3, r2
 80073f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8007406:	893b      	ldrh	r3, [r7, #8]
 8007408:	7af9      	ldrb	r1, [r7, #11]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	f7fa ff4a 	bl	80022a4 <HAL_PCD_EP_Receive>
 8007410:	4603      	mov	r3, r0
 8007412:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	4618      	mov	r0, r3
 8007418:	f000 f81a 	bl	8007450 <USBD_Get_USB_Status>
 800741c:	4603      	mov	r3, r0
 800741e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8007420:	7dbb      	ldrb	r3, [r7, #22]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	460b      	mov	r3, r1
 8007434:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	4611      	mov	r1, r2
 8007440:	4618      	mov	r0, r3
 8007442:	f7fa ff7a 	bl	800233a <HAL_PCD_EP_GetRxCount>
 8007446:	4603      	mov	r3, r0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800745e:	79fb      	ldrb	r3, [r7, #7]
 8007460:	2b03      	cmp	r3, #3
 8007462:	d817      	bhi.n	8007494 <USBD_Get_USB_Status+0x44>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <USBD_Get_USB_Status+0x1c>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	0800747d 	.word	0x0800747d
 8007470:	08007483 	.word	0x08007483
 8007474:	08007489 	.word	0x08007489
 8007478:	0800748f 	.word	0x0800748f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	73fb      	strb	r3, [r7, #15]
    break;
 8007480:	e00b      	b.n	800749a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007482:	2302      	movs	r3, #2
 8007484:	73fb      	strb	r3, [r7, #15]
    break;
 8007486:	e008      	b.n	800749a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007488:	2301      	movs	r3, #1
 800748a:	73fb      	strb	r3, [r7, #15]
    break;
 800748c:	e005      	b.n	800749a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800748e:	2302      	movs	r3, #2
 8007490:	73fb      	strb	r3, [r7, #15]
    break;
 8007492:	e002      	b.n	800749a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007494:	2302      	movs	r3, #2
 8007496:	73fb      	strb	r3, [r7, #15]
    break;
 8007498:	bf00      	nop
  }
  return usb_status;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3714      	adds	r7, #20
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <__errno>:
 80074a8:	4b01      	ldr	r3, [pc, #4]	; (80074b0 <__errno+0x8>)
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	2000017c 	.word	0x2000017c

080074b4 <__libc_init_array>:
 80074b4:	b570      	push	{r4, r5, r6, lr}
 80074b6:	4e0d      	ldr	r6, [pc, #52]	; (80074ec <__libc_init_array+0x38>)
 80074b8:	4c0d      	ldr	r4, [pc, #52]	; (80074f0 <__libc_init_array+0x3c>)
 80074ba:	1ba4      	subs	r4, r4, r6
 80074bc:	10a4      	asrs	r4, r4, #2
 80074be:	2500      	movs	r5, #0
 80074c0:	42a5      	cmp	r5, r4
 80074c2:	d109      	bne.n	80074d8 <__libc_init_array+0x24>
 80074c4:	4e0b      	ldr	r6, [pc, #44]	; (80074f4 <__libc_init_array+0x40>)
 80074c6:	4c0c      	ldr	r4, [pc, #48]	; (80074f8 <__libc_init_array+0x44>)
 80074c8:	f000 fc38 	bl	8007d3c <_init>
 80074cc:	1ba4      	subs	r4, r4, r6
 80074ce:	10a4      	asrs	r4, r4, #2
 80074d0:	2500      	movs	r5, #0
 80074d2:	42a5      	cmp	r5, r4
 80074d4:	d105      	bne.n	80074e2 <__libc_init_array+0x2e>
 80074d6:	bd70      	pop	{r4, r5, r6, pc}
 80074d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074dc:	4798      	blx	r3
 80074de:	3501      	adds	r5, #1
 80074e0:	e7ee      	b.n	80074c0 <__libc_init_array+0xc>
 80074e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80074e6:	4798      	blx	r3
 80074e8:	3501      	adds	r5, #1
 80074ea:	e7f2      	b.n	80074d2 <__libc_init_array+0x1e>
 80074ec:	08007e28 	.word	0x08007e28
 80074f0:	08007e28 	.word	0x08007e28
 80074f4:	08007e28 	.word	0x08007e28
 80074f8:	08007e2c 	.word	0x08007e2c

080074fc <malloc>:
 80074fc:	4b02      	ldr	r3, [pc, #8]	; (8007508 <malloc+0xc>)
 80074fe:	4601      	mov	r1, r0
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	f000 b86d 	b.w	80075e0 <_malloc_r>
 8007506:	bf00      	nop
 8007508:	2000017c 	.word	0x2000017c

0800750c <free>:
 800750c:	4b02      	ldr	r3, [pc, #8]	; (8007518 <free+0xc>)
 800750e:	4601      	mov	r1, r0
 8007510:	6818      	ldr	r0, [r3, #0]
 8007512:	f000 b817 	b.w	8007544 <_free_r>
 8007516:	bf00      	nop
 8007518:	2000017c 	.word	0x2000017c

0800751c <memcpy>:
 800751c:	b510      	push	{r4, lr}
 800751e:	1e43      	subs	r3, r0, #1
 8007520:	440a      	add	r2, r1
 8007522:	4291      	cmp	r1, r2
 8007524:	d100      	bne.n	8007528 <memcpy+0xc>
 8007526:	bd10      	pop	{r4, pc}
 8007528:	f811 4b01 	ldrb.w	r4, [r1], #1
 800752c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007530:	e7f7      	b.n	8007522 <memcpy+0x6>

08007532 <memset>:
 8007532:	4402      	add	r2, r0
 8007534:	4603      	mov	r3, r0
 8007536:	4293      	cmp	r3, r2
 8007538:	d100      	bne.n	800753c <memset+0xa>
 800753a:	4770      	bx	lr
 800753c:	f803 1b01 	strb.w	r1, [r3], #1
 8007540:	e7f9      	b.n	8007536 <memset+0x4>
	...

08007544 <_free_r>:
 8007544:	b538      	push	{r3, r4, r5, lr}
 8007546:	4605      	mov	r5, r0
 8007548:	2900      	cmp	r1, #0
 800754a:	d045      	beq.n	80075d8 <_free_r+0x94>
 800754c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007550:	1f0c      	subs	r4, r1, #4
 8007552:	2b00      	cmp	r3, #0
 8007554:	bfb8      	it	lt
 8007556:	18e4      	addlt	r4, r4, r3
 8007558:	f000 f8cc 	bl	80076f4 <__malloc_lock>
 800755c:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <_free_r+0x98>)
 800755e:	6813      	ldr	r3, [r2, #0]
 8007560:	4610      	mov	r0, r2
 8007562:	b933      	cbnz	r3, 8007572 <_free_r+0x2e>
 8007564:	6063      	str	r3, [r4, #4]
 8007566:	6014      	str	r4, [r2, #0]
 8007568:	4628      	mov	r0, r5
 800756a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800756e:	f000 b8c2 	b.w	80076f6 <__malloc_unlock>
 8007572:	42a3      	cmp	r3, r4
 8007574:	d90c      	bls.n	8007590 <_free_r+0x4c>
 8007576:	6821      	ldr	r1, [r4, #0]
 8007578:	1862      	adds	r2, r4, r1
 800757a:	4293      	cmp	r3, r2
 800757c:	bf04      	itt	eq
 800757e:	681a      	ldreq	r2, [r3, #0]
 8007580:	685b      	ldreq	r3, [r3, #4]
 8007582:	6063      	str	r3, [r4, #4]
 8007584:	bf04      	itt	eq
 8007586:	1852      	addeq	r2, r2, r1
 8007588:	6022      	streq	r2, [r4, #0]
 800758a:	6004      	str	r4, [r0, #0]
 800758c:	e7ec      	b.n	8007568 <_free_r+0x24>
 800758e:	4613      	mov	r3, r2
 8007590:	685a      	ldr	r2, [r3, #4]
 8007592:	b10a      	cbz	r2, 8007598 <_free_r+0x54>
 8007594:	42a2      	cmp	r2, r4
 8007596:	d9fa      	bls.n	800758e <_free_r+0x4a>
 8007598:	6819      	ldr	r1, [r3, #0]
 800759a:	1858      	adds	r0, r3, r1
 800759c:	42a0      	cmp	r0, r4
 800759e:	d10b      	bne.n	80075b8 <_free_r+0x74>
 80075a0:	6820      	ldr	r0, [r4, #0]
 80075a2:	4401      	add	r1, r0
 80075a4:	1858      	adds	r0, r3, r1
 80075a6:	4282      	cmp	r2, r0
 80075a8:	6019      	str	r1, [r3, #0]
 80075aa:	d1dd      	bne.n	8007568 <_free_r+0x24>
 80075ac:	6810      	ldr	r0, [r2, #0]
 80075ae:	6852      	ldr	r2, [r2, #4]
 80075b0:	605a      	str	r2, [r3, #4]
 80075b2:	4401      	add	r1, r0
 80075b4:	6019      	str	r1, [r3, #0]
 80075b6:	e7d7      	b.n	8007568 <_free_r+0x24>
 80075b8:	d902      	bls.n	80075c0 <_free_r+0x7c>
 80075ba:	230c      	movs	r3, #12
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	e7d3      	b.n	8007568 <_free_r+0x24>
 80075c0:	6820      	ldr	r0, [r4, #0]
 80075c2:	1821      	adds	r1, r4, r0
 80075c4:	428a      	cmp	r2, r1
 80075c6:	bf04      	itt	eq
 80075c8:	6811      	ldreq	r1, [r2, #0]
 80075ca:	6852      	ldreq	r2, [r2, #4]
 80075cc:	6062      	str	r2, [r4, #4]
 80075ce:	bf04      	itt	eq
 80075d0:	1809      	addeq	r1, r1, r0
 80075d2:	6021      	streq	r1, [r4, #0]
 80075d4:	605c      	str	r4, [r3, #4]
 80075d6:	e7c7      	b.n	8007568 <_free_r+0x24>
 80075d8:	bd38      	pop	{r3, r4, r5, pc}
 80075da:	bf00      	nop
 80075dc:	2000042c 	.word	0x2000042c

080075e0 <_malloc_r>:
 80075e0:	b570      	push	{r4, r5, r6, lr}
 80075e2:	1ccd      	adds	r5, r1, #3
 80075e4:	f025 0503 	bic.w	r5, r5, #3
 80075e8:	3508      	adds	r5, #8
 80075ea:	2d0c      	cmp	r5, #12
 80075ec:	bf38      	it	cc
 80075ee:	250c      	movcc	r5, #12
 80075f0:	2d00      	cmp	r5, #0
 80075f2:	4606      	mov	r6, r0
 80075f4:	db01      	blt.n	80075fa <_malloc_r+0x1a>
 80075f6:	42a9      	cmp	r1, r5
 80075f8:	d903      	bls.n	8007602 <_malloc_r+0x22>
 80075fa:	230c      	movs	r3, #12
 80075fc:	6033      	str	r3, [r6, #0]
 80075fe:	2000      	movs	r0, #0
 8007600:	bd70      	pop	{r4, r5, r6, pc}
 8007602:	f000 f877 	bl	80076f4 <__malloc_lock>
 8007606:	4a21      	ldr	r2, [pc, #132]	; (800768c <_malloc_r+0xac>)
 8007608:	6814      	ldr	r4, [r2, #0]
 800760a:	4621      	mov	r1, r4
 800760c:	b991      	cbnz	r1, 8007634 <_malloc_r+0x54>
 800760e:	4c20      	ldr	r4, [pc, #128]	; (8007690 <_malloc_r+0xb0>)
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	b91b      	cbnz	r3, 800761c <_malloc_r+0x3c>
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f83d 	bl	8007694 <_sbrk_r>
 800761a:	6020      	str	r0, [r4, #0]
 800761c:	4629      	mov	r1, r5
 800761e:	4630      	mov	r0, r6
 8007620:	f000 f838 	bl	8007694 <_sbrk_r>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	d124      	bne.n	8007672 <_malloc_r+0x92>
 8007628:	230c      	movs	r3, #12
 800762a:	6033      	str	r3, [r6, #0]
 800762c:	4630      	mov	r0, r6
 800762e:	f000 f862 	bl	80076f6 <__malloc_unlock>
 8007632:	e7e4      	b.n	80075fe <_malloc_r+0x1e>
 8007634:	680b      	ldr	r3, [r1, #0]
 8007636:	1b5b      	subs	r3, r3, r5
 8007638:	d418      	bmi.n	800766c <_malloc_r+0x8c>
 800763a:	2b0b      	cmp	r3, #11
 800763c:	d90f      	bls.n	800765e <_malloc_r+0x7e>
 800763e:	600b      	str	r3, [r1, #0]
 8007640:	50cd      	str	r5, [r1, r3]
 8007642:	18cc      	adds	r4, r1, r3
 8007644:	4630      	mov	r0, r6
 8007646:	f000 f856 	bl	80076f6 <__malloc_unlock>
 800764a:	f104 000b 	add.w	r0, r4, #11
 800764e:	1d23      	adds	r3, r4, #4
 8007650:	f020 0007 	bic.w	r0, r0, #7
 8007654:	1ac3      	subs	r3, r0, r3
 8007656:	d0d3      	beq.n	8007600 <_malloc_r+0x20>
 8007658:	425a      	negs	r2, r3
 800765a:	50e2      	str	r2, [r4, r3]
 800765c:	e7d0      	b.n	8007600 <_malloc_r+0x20>
 800765e:	428c      	cmp	r4, r1
 8007660:	684b      	ldr	r3, [r1, #4]
 8007662:	bf16      	itet	ne
 8007664:	6063      	strne	r3, [r4, #4]
 8007666:	6013      	streq	r3, [r2, #0]
 8007668:	460c      	movne	r4, r1
 800766a:	e7eb      	b.n	8007644 <_malloc_r+0x64>
 800766c:	460c      	mov	r4, r1
 800766e:	6849      	ldr	r1, [r1, #4]
 8007670:	e7cc      	b.n	800760c <_malloc_r+0x2c>
 8007672:	1cc4      	adds	r4, r0, #3
 8007674:	f024 0403 	bic.w	r4, r4, #3
 8007678:	42a0      	cmp	r0, r4
 800767a:	d005      	beq.n	8007688 <_malloc_r+0xa8>
 800767c:	1a21      	subs	r1, r4, r0
 800767e:	4630      	mov	r0, r6
 8007680:	f000 f808 	bl	8007694 <_sbrk_r>
 8007684:	3001      	adds	r0, #1
 8007686:	d0cf      	beq.n	8007628 <_malloc_r+0x48>
 8007688:	6025      	str	r5, [r4, #0]
 800768a:	e7db      	b.n	8007644 <_malloc_r+0x64>
 800768c:	2000042c 	.word	0x2000042c
 8007690:	20000430 	.word	0x20000430

08007694 <_sbrk_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4c06      	ldr	r4, [pc, #24]	; (80076b0 <_sbrk_r+0x1c>)
 8007698:	2300      	movs	r3, #0
 800769a:	4605      	mov	r5, r0
 800769c:	4608      	mov	r0, r1
 800769e:	6023      	str	r3, [r4, #0]
 80076a0:	f7f9 fb32 	bl	8000d08 <_sbrk>
 80076a4:	1c43      	adds	r3, r0, #1
 80076a6:	d102      	bne.n	80076ae <_sbrk_r+0x1a>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	b103      	cbz	r3, 80076ae <_sbrk_r+0x1a>
 80076ac:	602b      	str	r3, [r5, #0]
 80076ae:	bd38      	pop	{r3, r4, r5, pc}
 80076b0:	200022dc 	.word	0x200022dc

080076b4 <siprintf>:
 80076b4:	b40e      	push	{r1, r2, r3}
 80076b6:	b500      	push	{lr}
 80076b8:	b09c      	sub	sp, #112	; 0x70
 80076ba:	ab1d      	add	r3, sp, #116	; 0x74
 80076bc:	9002      	str	r0, [sp, #8]
 80076be:	9006      	str	r0, [sp, #24]
 80076c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80076c4:	4809      	ldr	r0, [pc, #36]	; (80076ec <siprintf+0x38>)
 80076c6:	9107      	str	r1, [sp, #28]
 80076c8:	9104      	str	r1, [sp, #16]
 80076ca:	4909      	ldr	r1, [pc, #36]	; (80076f0 <siprintf+0x3c>)
 80076cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80076d0:	9105      	str	r1, [sp, #20]
 80076d2:	6800      	ldr	r0, [r0, #0]
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	a902      	add	r1, sp, #8
 80076d8:	f000 f868 	bl	80077ac <_svfiprintf_r>
 80076dc:	9b02      	ldr	r3, [sp, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	701a      	strb	r2, [r3, #0]
 80076e2:	b01c      	add	sp, #112	; 0x70
 80076e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80076e8:	b003      	add	sp, #12
 80076ea:	4770      	bx	lr
 80076ec:	2000017c 	.word	0x2000017c
 80076f0:	ffff0208 	.word	0xffff0208

080076f4 <__malloc_lock>:
 80076f4:	4770      	bx	lr

080076f6 <__malloc_unlock>:
 80076f6:	4770      	bx	lr

080076f8 <__ssputs_r>:
 80076f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fc:	688e      	ldr	r6, [r1, #8]
 80076fe:	429e      	cmp	r6, r3
 8007700:	4682      	mov	sl, r0
 8007702:	460c      	mov	r4, r1
 8007704:	4690      	mov	r8, r2
 8007706:	4699      	mov	r9, r3
 8007708:	d837      	bhi.n	800777a <__ssputs_r+0x82>
 800770a:	898a      	ldrh	r2, [r1, #12]
 800770c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007710:	d031      	beq.n	8007776 <__ssputs_r+0x7e>
 8007712:	6825      	ldr	r5, [r4, #0]
 8007714:	6909      	ldr	r1, [r1, #16]
 8007716:	1a6f      	subs	r7, r5, r1
 8007718:	6965      	ldr	r5, [r4, #20]
 800771a:	2302      	movs	r3, #2
 800771c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007720:	fb95 f5f3 	sdiv	r5, r5, r3
 8007724:	f109 0301 	add.w	r3, r9, #1
 8007728:	443b      	add	r3, r7
 800772a:	429d      	cmp	r5, r3
 800772c:	bf38      	it	cc
 800772e:	461d      	movcc	r5, r3
 8007730:	0553      	lsls	r3, r2, #21
 8007732:	d530      	bpl.n	8007796 <__ssputs_r+0x9e>
 8007734:	4629      	mov	r1, r5
 8007736:	f7ff ff53 	bl	80075e0 <_malloc_r>
 800773a:	4606      	mov	r6, r0
 800773c:	b950      	cbnz	r0, 8007754 <__ssputs_r+0x5c>
 800773e:	230c      	movs	r3, #12
 8007740:	f8ca 3000 	str.w	r3, [sl]
 8007744:	89a3      	ldrh	r3, [r4, #12]
 8007746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800774a:	81a3      	strh	r3, [r4, #12]
 800774c:	f04f 30ff 	mov.w	r0, #4294967295
 8007750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007754:	463a      	mov	r2, r7
 8007756:	6921      	ldr	r1, [r4, #16]
 8007758:	f7ff fee0 	bl	800751c <memcpy>
 800775c:	89a3      	ldrh	r3, [r4, #12]
 800775e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007766:	81a3      	strh	r3, [r4, #12]
 8007768:	6126      	str	r6, [r4, #16]
 800776a:	6165      	str	r5, [r4, #20]
 800776c:	443e      	add	r6, r7
 800776e:	1bed      	subs	r5, r5, r7
 8007770:	6026      	str	r6, [r4, #0]
 8007772:	60a5      	str	r5, [r4, #8]
 8007774:	464e      	mov	r6, r9
 8007776:	454e      	cmp	r6, r9
 8007778:	d900      	bls.n	800777c <__ssputs_r+0x84>
 800777a:	464e      	mov	r6, r9
 800777c:	4632      	mov	r2, r6
 800777e:	4641      	mov	r1, r8
 8007780:	6820      	ldr	r0, [r4, #0]
 8007782:	f000 fa93 	bl	8007cac <memmove>
 8007786:	68a3      	ldr	r3, [r4, #8]
 8007788:	1b9b      	subs	r3, r3, r6
 800778a:	60a3      	str	r3, [r4, #8]
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	441e      	add	r6, r3
 8007790:	6026      	str	r6, [r4, #0]
 8007792:	2000      	movs	r0, #0
 8007794:	e7dc      	b.n	8007750 <__ssputs_r+0x58>
 8007796:	462a      	mov	r2, r5
 8007798:	f000 faa1 	bl	8007cde <_realloc_r>
 800779c:	4606      	mov	r6, r0
 800779e:	2800      	cmp	r0, #0
 80077a0:	d1e2      	bne.n	8007768 <__ssputs_r+0x70>
 80077a2:	6921      	ldr	r1, [r4, #16]
 80077a4:	4650      	mov	r0, sl
 80077a6:	f7ff fecd 	bl	8007544 <_free_r>
 80077aa:	e7c8      	b.n	800773e <__ssputs_r+0x46>

080077ac <_svfiprintf_r>:
 80077ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b0:	461d      	mov	r5, r3
 80077b2:	898b      	ldrh	r3, [r1, #12]
 80077b4:	061f      	lsls	r7, r3, #24
 80077b6:	b09d      	sub	sp, #116	; 0x74
 80077b8:	4680      	mov	r8, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	4616      	mov	r6, r2
 80077be:	d50f      	bpl.n	80077e0 <_svfiprintf_r+0x34>
 80077c0:	690b      	ldr	r3, [r1, #16]
 80077c2:	b96b      	cbnz	r3, 80077e0 <_svfiprintf_r+0x34>
 80077c4:	2140      	movs	r1, #64	; 0x40
 80077c6:	f7ff ff0b 	bl	80075e0 <_malloc_r>
 80077ca:	6020      	str	r0, [r4, #0]
 80077cc:	6120      	str	r0, [r4, #16]
 80077ce:	b928      	cbnz	r0, 80077dc <_svfiprintf_r+0x30>
 80077d0:	230c      	movs	r3, #12
 80077d2:	f8c8 3000 	str.w	r3, [r8]
 80077d6:	f04f 30ff 	mov.w	r0, #4294967295
 80077da:	e0c8      	b.n	800796e <_svfiprintf_r+0x1c2>
 80077dc:	2340      	movs	r3, #64	; 0x40
 80077de:	6163      	str	r3, [r4, #20]
 80077e0:	2300      	movs	r3, #0
 80077e2:	9309      	str	r3, [sp, #36]	; 0x24
 80077e4:	2320      	movs	r3, #32
 80077e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077ea:	2330      	movs	r3, #48	; 0x30
 80077ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077f0:	9503      	str	r5, [sp, #12]
 80077f2:	f04f 0b01 	mov.w	fp, #1
 80077f6:	4637      	mov	r7, r6
 80077f8:	463d      	mov	r5, r7
 80077fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80077fe:	b10b      	cbz	r3, 8007804 <_svfiprintf_r+0x58>
 8007800:	2b25      	cmp	r3, #37	; 0x25
 8007802:	d13e      	bne.n	8007882 <_svfiprintf_r+0xd6>
 8007804:	ebb7 0a06 	subs.w	sl, r7, r6
 8007808:	d00b      	beq.n	8007822 <_svfiprintf_r+0x76>
 800780a:	4653      	mov	r3, sl
 800780c:	4632      	mov	r2, r6
 800780e:	4621      	mov	r1, r4
 8007810:	4640      	mov	r0, r8
 8007812:	f7ff ff71 	bl	80076f8 <__ssputs_r>
 8007816:	3001      	adds	r0, #1
 8007818:	f000 80a4 	beq.w	8007964 <_svfiprintf_r+0x1b8>
 800781c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800781e:	4453      	add	r3, sl
 8007820:	9309      	str	r3, [sp, #36]	; 0x24
 8007822:	783b      	ldrb	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 809d 	beq.w	8007964 <_svfiprintf_r+0x1b8>
 800782a:	2300      	movs	r3, #0
 800782c:	f04f 32ff 	mov.w	r2, #4294967295
 8007830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	9307      	str	r3, [sp, #28]
 8007838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800783c:	931a      	str	r3, [sp, #104]	; 0x68
 800783e:	462f      	mov	r7, r5
 8007840:	2205      	movs	r2, #5
 8007842:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007846:	4850      	ldr	r0, [pc, #320]	; (8007988 <_svfiprintf_r+0x1dc>)
 8007848:	f7f8 fcc2 	bl	80001d0 <memchr>
 800784c:	9b04      	ldr	r3, [sp, #16]
 800784e:	b9d0      	cbnz	r0, 8007886 <_svfiprintf_r+0xda>
 8007850:	06d9      	lsls	r1, r3, #27
 8007852:	bf44      	itt	mi
 8007854:	2220      	movmi	r2, #32
 8007856:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800785a:	071a      	lsls	r2, r3, #28
 800785c:	bf44      	itt	mi
 800785e:	222b      	movmi	r2, #43	; 0x2b
 8007860:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007864:	782a      	ldrb	r2, [r5, #0]
 8007866:	2a2a      	cmp	r2, #42	; 0x2a
 8007868:	d015      	beq.n	8007896 <_svfiprintf_r+0xea>
 800786a:	9a07      	ldr	r2, [sp, #28]
 800786c:	462f      	mov	r7, r5
 800786e:	2000      	movs	r0, #0
 8007870:	250a      	movs	r5, #10
 8007872:	4639      	mov	r1, r7
 8007874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007878:	3b30      	subs	r3, #48	; 0x30
 800787a:	2b09      	cmp	r3, #9
 800787c:	d94d      	bls.n	800791a <_svfiprintf_r+0x16e>
 800787e:	b1b8      	cbz	r0, 80078b0 <_svfiprintf_r+0x104>
 8007880:	e00f      	b.n	80078a2 <_svfiprintf_r+0xf6>
 8007882:	462f      	mov	r7, r5
 8007884:	e7b8      	b.n	80077f8 <_svfiprintf_r+0x4c>
 8007886:	4a40      	ldr	r2, [pc, #256]	; (8007988 <_svfiprintf_r+0x1dc>)
 8007888:	1a80      	subs	r0, r0, r2
 800788a:	fa0b f000 	lsl.w	r0, fp, r0
 800788e:	4318      	orrs	r0, r3
 8007890:	9004      	str	r0, [sp, #16]
 8007892:	463d      	mov	r5, r7
 8007894:	e7d3      	b.n	800783e <_svfiprintf_r+0x92>
 8007896:	9a03      	ldr	r2, [sp, #12]
 8007898:	1d11      	adds	r1, r2, #4
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	9103      	str	r1, [sp, #12]
 800789e:	2a00      	cmp	r2, #0
 80078a0:	db01      	blt.n	80078a6 <_svfiprintf_r+0xfa>
 80078a2:	9207      	str	r2, [sp, #28]
 80078a4:	e004      	b.n	80078b0 <_svfiprintf_r+0x104>
 80078a6:	4252      	negs	r2, r2
 80078a8:	f043 0302 	orr.w	r3, r3, #2
 80078ac:	9207      	str	r2, [sp, #28]
 80078ae:	9304      	str	r3, [sp, #16]
 80078b0:	783b      	ldrb	r3, [r7, #0]
 80078b2:	2b2e      	cmp	r3, #46	; 0x2e
 80078b4:	d10c      	bne.n	80078d0 <_svfiprintf_r+0x124>
 80078b6:	787b      	ldrb	r3, [r7, #1]
 80078b8:	2b2a      	cmp	r3, #42	; 0x2a
 80078ba:	d133      	bne.n	8007924 <_svfiprintf_r+0x178>
 80078bc:	9b03      	ldr	r3, [sp, #12]
 80078be:	1d1a      	adds	r2, r3, #4
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	9203      	str	r2, [sp, #12]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	bfb8      	it	lt
 80078c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80078cc:	3702      	adds	r7, #2
 80078ce:	9305      	str	r3, [sp, #20]
 80078d0:	4d2e      	ldr	r5, [pc, #184]	; (800798c <_svfiprintf_r+0x1e0>)
 80078d2:	7839      	ldrb	r1, [r7, #0]
 80078d4:	2203      	movs	r2, #3
 80078d6:	4628      	mov	r0, r5
 80078d8:	f7f8 fc7a 	bl	80001d0 <memchr>
 80078dc:	b138      	cbz	r0, 80078ee <_svfiprintf_r+0x142>
 80078de:	2340      	movs	r3, #64	; 0x40
 80078e0:	1b40      	subs	r0, r0, r5
 80078e2:	fa03 f000 	lsl.w	r0, r3, r0
 80078e6:	9b04      	ldr	r3, [sp, #16]
 80078e8:	4303      	orrs	r3, r0
 80078ea:	3701      	adds	r7, #1
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	7839      	ldrb	r1, [r7, #0]
 80078f0:	4827      	ldr	r0, [pc, #156]	; (8007990 <_svfiprintf_r+0x1e4>)
 80078f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f6:	2206      	movs	r2, #6
 80078f8:	1c7e      	adds	r6, r7, #1
 80078fa:	f7f8 fc69 	bl	80001d0 <memchr>
 80078fe:	2800      	cmp	r0, #0
 8007900:	d038      	beq.n	8007974 <_svfiprintf_r+0x1c8>
 8007902:	4b24      	ldr	r3, [pc, #144]	; (8007994 <_svfiprintf_r+0x1e8>)
 8007904:	bb13      	cbnz	r3, 800794c <_svfiprintf_r+0x1a0>
 8007906:	9b03      	ldr	r3, [sp, #12]
 8007908:	3307      	adds	r3, #7
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	3308      	adds	r3, #8
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007914:	444b      	add	r3, r9
 8007916:	9309      	str	r3, [sp, #36]	; 0x24
 8007918:	e76d      	b.n	80077f6 <_svfiprintf_r+0x4a>
 800791a:	fb05 3202 	mla	r2, r5, r2, r3
 800791e:	2001      	movs	r0, #1
 8007920:	460f      	mov	r7, r1
 8007922:	e7a6      	b.n	8007872 <_svfiprintf_r+0xc6>
 8007924:	2300      	movs	r3, #0
 8007926:	3701      	adds	r7, #1
 8007928:	9305      	str	r3, [sp, #20]
 800792a:	4619      	mov	r1, r3
 800792c:	250a      	movs	r5, #10
 800792e:	4638      	mov	r0, r7
 8007930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007934:	3a30      	subs	r2, #48	; 0x30
 8007936:	2a09      	cmp	r2, #9
 8007938:	d903      	bls.n	8007942 <_svfiprintf_r+0x196>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0c8      	beq.n	80078d0 <_svfiprintf_r+0x124>
 800793e:	9105      	str	r1, [sp, #20]
 8007940:	e7c6      	b.n	80078d0 <_svfiprintf_r+0x124>
 8007942:	fb05 2101 	mla	r1, r5, r1, r2
 8007946:	2301      	movs	r3, #1
 8007948:	4607      	mov	r7, r0
 800794a:	e7f0      	b.n	800792e <_svfiprintf_r+0x182>
 800794c:	ab03      	add	r3, sp, #12
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	4622      	mov	r2, r4
 8007952:	4b11      	ldr	r3, [pc, #68]	; (8007998 <_svfiprintf_r+0x1ec>)
 8007954:	a904      	add	r1, sp, #16
 8007956:	4640      	mov	r0, r8
 8007958:	f3af 8000 	nop.w
 800795c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007960:	4681      	mov	r9, r0
 8007962:	d1d6      	bne.n	8007912 <_svfiprintf_r+0x166>
 8007964:	89a3      	ldrh	r3, [r4, #12]
 8007966:	065b      	lsls	r3, r3, #25
 8007968:	f53f af35 	bmi.w	80077d6 <_svfiprintf_r+0x2a>
 800796c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800796e:	b01d      	add	sp, #116	; 0x74
 8007970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007974:	ab03      	add	r3, sp, #12
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	4622      	mov	r2, r4
 800797a:	4b07      	ldr	r3, [pc, #28]	; (8007998 <_svfiprintf_r+0x1ec>)
 800797c:	a904      	add	r1, sp, #16
 800797e:	4640      	mov	r0, r8
 8007980:	f000 f882 	bl	8007a88 <_printf_i>
 8007984:	e7ea      	b.n	800795c <_svfiprintf_r+0x1b0>
 8007986:	bf00      	nop
 8007988:	08007dec 	.word	0x08007dec
 800798c:	08007df2 	.word	0x08007df2
 8007990:	08007df6 	.word	0x08007df6
 8007994:	00000000 	.word	0x00000000
 8007998:	080076f9 	.word	0x080076f9

0800799c <_printf_common>:
 800799c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a0:	4691      	mov	r9, r2
 80079a2:	461f      	mov	r7, r3
 80079a4:	688a      	ldr	r2, [r1, #8]
 80079a6:	690b      	ldr	r3, [r1, #16]
 80079a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079ac:	4293      	cmp	r3, r2
 80079ae:	bfb8      	it	lt
 80079b0:	4613      	movlt	r3, r2
 80079b2:	f8c9 3000 	str.w	r3, [r9]
 80079b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ba:	4606      	mov	r6, r0
 80079bc:	460c      	mov	r4, r1
 80079be:	b112      	cbz	r2, 80079c6 <_printf_common+0x2a>
 80079c0:	3301      	adds	r3, #1
 80079c2:	f8c9 3000 	str.w	r3, [r9]
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	0699      	lsls	r1, r3, #26
 80079ca:	bf42      	ittt	mi
 80079cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80079d0:	3302      	addmi	r3, #2
 80079d2:	f8c9 3000 	strmi.w	r3, [r9]
 80079d6:	6825      	ldr	r5, [r4, #0]
 80079d8:	f015 0506 	ands.w	r5, r5, #6
 80079dc:	d107      	bne.n	80079ee <_printf_common+0x52>
 80079de:	f104 0a19 	add.w	sl, r4, #25
 80079e2:	68e3      	ldr	r3, [r4, #12]
 80079e4:	f8d9 2000 	ldr.w	r2, [r9]
 80079e8:	1a9b      	subs	r3, r3, r2
 80079ea:	42ab      	cmp	r3, r5
 80079ec:	dc28      	bgt.n	8007a40 <_printf_common+0xa4>
 80079ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80079f2:	6822      	ldr	r2, [r4, #0]
 80079f4:	3300      	adds	r3, #0
 80079f6:	bf18      	it	ne
 80079f8:	2301      	movne	r3, #1
 80079fa:	0692      	lsls	r2, r2, #26
 80079fc:	d42d      	bmi.n	8007a5a <_printf_common+0xbe>
 80079fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a02:	4639      	mov	r1, r7
 8007a04:	4630      	mov	r0, r6
 8007a06:	47c0      	blx	r8
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d020      	beq.n	8007a4e <_printf_common+0xb2>
 8007a0c:	6823      	ldr	r3, [r4, #0]
 8007a0e:	68e5      	ldr	r5, [r4, #12]
 8007a10:	f8d9 2000 	ldr.w	r2, [r9]
 8007a14:	f003 0306 	and.w	r3, r3, #6
 8007a18:	2b04      	cmp	r3, #4
 8007a1a:	bf08      	it	eq
 8007a1c:	1aad      	subeq	r5, r5, r2
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	6922      	ldr	r2, [r4, #16]
 8007a22:	bf0c      	ite	eq
 8007a24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a28:	2500      	movne	r5, #0
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	bfc4      	itt	gt
 8007a2e:	1a9b      	subgt	r3, r3, r2
 8007a30:	18ed      	addgt	r5, r5, r3
 8007a32:	f04f 0900 	mov.w	r9, #0
 8007a36:	341a      	adds	r4, #26
 8007a38:	454d      	cmp	r5, r9
 8007a3a:	d11a      	bne.n	8007a72 <_printf_common+0xd6>
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	e008      	b.n	8007a52 <_printf_common+0xb6>
 8007a40:	2301      	movs	r3, #1
 8007a42:	4652      	mov	r2, sl
 8007a44:	4639      	mov	r1, r7
 8007a46:	4630      	mov	r0, r6
 8007a48:	47c0      	blx	r8
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d103      	bne.n	8007a56 <_printf_common+0xba>
 8007a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a56:	3501      	adds	r5, #1
 8007a58:	e7c3      	b.n	80079e2 <_printf_common+0x46>
 8007a5a:	18e1      	adds	r1, r4, r3
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	2030      	movs	r0, #48	; 0x30
 8007a60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a64:	4422      	add	r2, r4
 8007a66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a6e:	3302      	adds	r3, #2
 8007a70:	e7c5      	b.n	80079fe <_printf_common+0x62>
 8007a72:	2301      	movs	r3, #1
 8007a74:	4622      	mov	r2, r4
 8007a76:	4639      	mov	r1, r7
 8007a78:	4630      	mov	r0, r6
 8007a7a:	47c0      	blx	r8
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d0e6      	beq.n	8007a4e <_printf_common+0xb2>
 8007a80:	f109 0901 	add.w	r9, r9, #1
 8007a84:	e7d8      	b.n	8007a38 <_printf_common+0x9c>
	...

08007a88 <_printf_i>:
 8007a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007a90:	460c      	mov	r4, r1
 8007a92:	7e09      	ldrb	r1, [r1, #24]
 8007a94:	b085      	sub	sp, #20
 8007a96:	296e      	cmp	r1, #110	; 0x6e
 8007a98:	4617      	mov	r7, r2
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	4698      	mov	r8, r3
 8007a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007aa0:	f000 80b3 	beq.w	8007c0a <_printf_i+0x182>
 8007aa4:	d822      	bhi.n	8007aec <_printf_i+0x64>
 8007aa6:	2963      	cmp	r1, #99	; 0x63
 8007aa8:	d036      	beq.n	8007b18 <_printf_i+0x90>
 8007aaa:	d80a      	bhi.n	8007ac2 <_printf_i+0x3a>
 8007aac:	2900      	cmp	r1, #0
 8007aae:	f000 80b9 	beq.w	8007c24 <_printf_i+0x19c>
 8007ab2:	2958      	cmp	r1, #88	; 0x58
 8007ab4:	f000 8083 	beq.w	8007bbe <_printf_i+0x136>
 8007ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007abc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ac0:	e032      	b.n	8007b28 <_printf_i+0xa0>
 8007ac2:	2964      	cmp	r1, #100	; 0x64
 8007ac4:	d001      	beq.n	8007aca <_printf_i+0x42>
 8007ac6:	2969      	cmp	r1, #105	; 0x69
 8007ac8:	d1f6      	bne.n	8007ab8 <_printf_i+0x30>
 8007aca:	6820      	ldr	r0, [r4, #0]
 8007acc:	6813      	ldr	r3, [r2, #0]
 8007ace:	0605      	lsls	r5, r0, #24
 8007ad0:	f103 0104 	add.w	r1, r3, #4
 8007ad4:	d52a      	bpl.n	8007b2c <_printf_i+0xa4>
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6011      	str	r1, [r2, #0]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	da03      	bge.n	8007ae6 <_printf_i+0x5e>
 8007ade:	222d      	movs	r2, #45	; 0x2d
 8007ae0:	425b      	negs	r3, r3
 8007ae2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007ae6:	486f      	ldr	r0, [pc, #444]	; (8007ca4 <_printf_i+0x21c>)
 8007ae8:	220a      	movs	r2, #10
 8007aea:	e039      	b.n	8007b60 <_printf_i+0xd8>
 8007aec:	2973      	cmp	r1, #115	; 0x73
 8007aee:	f000 809d 	beq.w	8007c2c <_printf_i+0x1a4>
 8007af2:	d808      	bhi.n	8007b06 <_printf_i+0x7e>
 8007af4:	296f      	cmp	r1, #111	; 0x6f
 8007af6:	d020      	beq.n	8007b3a <_printf_i+0xb2>
 8007af8:	2970      	cmp	r1, #112	; 0x70
 8007afa:	d1dd      	bne.n	8007ab8 <_printf_i+0x30>
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	f043 0320 	orr.w	r3, r3, #32
 8007b02:	6023      	str	r3, [r4, #0]
 8007b04:	e003      	b.n	8007b0e <_printf_i+0x86>
 8007b06:	2975      	cmp	r1, #117	; 0x75
 8007b08:	d017      	beq.n	8007b3a <_printf_i+0xb2>
 8007b0a:	2978      	cmp	r1, #120	; 0x78
 8007b0c:	d1d4      	bne.n	8007ab8 <_printf_i+0x30>
 8007b0e:	2378      	movs	r3, #120	; 0x78
 8007b10:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b14:	4864      	ldr	r0, [pc, #400]	; (8007ca8 <_printf_i+0x220>)
 8007b16:	e055      	b.n	8007bc4 <_printf_i+0x13c>
 8007b18:	6813      	ldr	r3, [r2, #0]
 8007b1a:	1d19      	adds	r1, r3, #4
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	6011      	str	r1, [r2, #0]
 8007b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b28:	2301      	movs	r3, #1
 8007b2a:	e08c      	b.n	8007c46 <_printf_i+0x1be>
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6011      	str	r1, [r2, #0]
 8007b30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b34:	bf18      	it	ne
 8007b36:	b21b      	sxthne	r3, r3
 8007b38:	e7cf      	b.n	8007ada <_printf_i+0x52>
 8007b3a:	6813      	ldr	r3, [r2, #0]
 8007b3c:	6825      	ldr	r5, [r4, #0]
 8007b3e:	1d18      	adds	r0, r3, #4
 8007b40:	6010      	str	r0, [r2, #0]
 8007b42:	0628      	lsls	r0, r5, #24
 8007b44:	d501      	bpl.n	8007b4a <_printf_i+0xc2>
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	e002      	b.n	8007b50 <_printf_i+0xc8>
 8007b4a:	0668      	lsls	r0, r5, #25
 8007b4c:	d5fb      	bpl.n	8007b46 <_printf_i+0xbe>
 8007b4e:	881b      	ldrh	r3, [r3, #0]
 8007b50:	4854      	ldr	r0, [pc, #336]	; (8007ca4 <_printf_i+0x21c>)
 8007b52:	296f      	cmp	r1, #111	; 0x6f
 8007b54:	bf14      	ite	ne
 8007b56:	220a      	movne	r2, #10
 8007b58:	2208      	moveq	r2, #8
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b60:	6865      	ldr	r5, [r4, #4]
 8007b62:	60a5      	str	r5, [r4, #8]
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	f2c0 8095 	blt.w	8007c94 <_printf_i+0x20c>
 8007b6a:	6821      	ldr	r1, [r4, #0]
 8007b6c:	f021 0104 	bic.w	r1, r1, #4
 8007b70:	6021      	str	r1, [r4, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d13d      	bne.n	8007bf2 <_printf_i+0x16a>
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	f040 808e 	bne.w	8007c98 <_printf_i+0x210>
 8007b7c:	4665      	mov	r5, ip
 8007b7e:	2a08      	cmp	r2, #8
 8007b80:	d10b      	bne.n	8007b9a <_printf_i+0x112>
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	07db      	lsls	r3, r3, #31
 8007b86:	d508      	bpl.n	8007b9a <_printf_i+0x112>
 8007b88:	6923      	ldr	r3, [r4, #16]
 8007b8a:	6862      	ldr	r2, [r4, #4]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	bfde      	ittt	le
 8007b90:	2330      	movle	r3, #48	; 0x30
 8007b92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b9a:	ebac 0305 	sub.w	r3, ip, r5
 8007b9e:	6123      	str	r3, [r4, #16]
 8007ba0:	f8cd 8000 	str.w	r8, [sp]
 8007ba4:	463b      	mov	r3, r7
 8007ba6:	aa03      	add	r2, sp, #12
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff fef6 	bl	800799c <_printf_common>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d14d      	bne.n	8007c50 <_printf_i+0x1c8>
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	b005      	add	sp, #20
 8007bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bbe:	4839      	ldr	r0, [pc, #228]	; (8007ca4 <_printf_i+0x21c>)
 8007bc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bc4:	6813      	ldr	r3, [r2, #0]
 8007bc6:	6821      	ldr	r1, [r4, #0]
 8007bc8:	1d1d      	adds	r5, r3, #4
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6015      	str	r5, [r2, #0]
 8007bce:	060a      	lsls	r2, r1, #24
 8007bd0:	d50b      	bpl.n	8007bea <_printf_i+0x162>
 8007bd2:	07ca      	lsls	r2, r1, #31
 8007bd4:	bf44      	itt	mi
 8007bd6:	f041 0120 	orrmi.w	r1, r1, #32
 8007bda:	6021      	strmi	r1, [r4, #0]
 8007bdc:	b91b      	cbnz	r3, 8007be6 <_printf_i+0x15e>
 8007bde:	6822      	ldr	r2, [r4, #0]
 8007be0:	f022 0220 	bic.w	r2, r2, #32
 8007be4:	6022      	str	r2, [r4, #0]
 8007be6:	2210      	movs	r2, #16
 8007be8:	e7b7      	b.n	8007b5a <_printf_i+0xd2>
 8007bea:	064d      	lsls	r5, r1, #25
 8007bec:	bf48      	it	mi
 8007bee:	b29b      	uxthmi	r3, r3
 8007bf0:	e7ef      	b.n	8007bd2 <_printf_i+0x14a>
 8007bf2:	4665      	mov	r5, ip
 8007bf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bf8:	fb02 3311 	mls	r3, r2, r1, r3
 8007bfc:	5cc3      	ldrb	r3, [r0, r3]
 8007bfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c02:	460b      	mov	r3, r1
 8007c04:	2900      	cmp	r1, #0
 8007c06:	d1f5      	bne.n	8007bf4 <_printf_i+0x16c>
 8007c08:	e7b9      	b.n	8007b7e <_printf_i+0xf6>
 8007c0a:	6813      	ldr	r3, [r2, #0]
 8007c0c:	6825      	ldr	r5, [r4, #0]
 8007c0e:	6961      	ldr	r1, [r4, #20]
 8007c10:	1d18      	adds	r0, r3, #4
 8007c12:	6010      	str	r0, [r2, #0]
 8007c14:	0628      	lsls	r0, r5, #24
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	d501      	bpl.n	8007c1e <_printf_i+0x196>
 8007c1a:	6019      	str	r1, [r3, #0]
 8007c1c:	e002      	b.n	8007c24 <_printf_i+0x19c>
 8007c1e:	066a      	lsls	r2, r5, #25
 8007c20:	d5fb      	bpl.n	8007c1a <_printf_i+0x192>
 8007c22:	8019      	strh	r1, [r3, #0]
 8007c24:	2300      	movs	r3, #0
 8007c26:	6123      	str	r3, [r4, #16]
 8007c28:	4665      	mov	r5, ip
 8007c2a:	e7b9      	b.n	8007ba0 <_printf_i+0x118>
 8007c2c:	6813      	ldr	r3, [r2, #0]
 8007c2e:	1d19      	adds	r1, r3, #4
 8007c30:	6011      	str	r1, [r2, #0]
 8007c32:	681d      	ldr	r5, [r3, #0]
 8007c34:	6862      	ldr	r2, [r4, #4]
 8007c36:	2100      	movs	r1, #0
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f7f8 fac9 	bl	80001d0 <memchr>
 8007c3e:	b108      	cbz	r0, 8007c44 <_printf_i+0x1bc>
 8007c40:	1b40      	subs	r0, r0, r5
 8007c42:	6060      	str	r0, [r4, #4]
 8007c44:	6863      	ldr	r3, [r4, #4]
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c4e:	e7a7      	b.n	8007ba0 <_printf_i+0x118>
 8007c50:	6923      	ldr	r3, [r4, #16]
 8007c52:	462a      	mov	r2, r5
 8007c54:	4639      	mov	r1, r7
 8007c56:	4630      	mov	r0, r6
 8007c58:	47c0      	blx	r8
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	d0aa      	beq.n	8007bb4 <_printf_i+0x12c>
 8007c5e:	6823      	ldr	r3, [r4, #0]
 8007c60:	079b      	lsls	r3, r3, #30
 8007c62:	d413      	bmi.n	8007c8c <_printf_i+0x204>
 8007c64:	68e0      	ldr	r0, [r4, #12]
 8007c66:	9b03      	ldr	r3, [sp, #12]
 8007c68:	4298      	cmp	r0, r3
 8007c6a:	bfb8      	it	lt
 8007c6c:	4618      	movlt	r0, r3
 8007c6e:	e7a3      	b.n	8007bb8 <_printf_i+0x130>
 8007c70:	2301      	movs	r3, #1
 8007c72:	464a      	mov	r2, r9
 8007c74:	4639      	mov	r1, r7
 8007c76:	4630      	mov	r0, r6
 8007c78:	47c0      	blx	r8
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	d09a      	beq.n	8007bb4 <_printf_i+0x12c>
 8007c7e:	3501      	adds	r5, #1
 8007c80:	68e3      	ldr	r3, [r4, #12]
 8007c82:	9a03      	ldr	r2, [sp, #12]
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	42ab      	cmp	r3, r5
 8007c88:	dcf2      	bgt.n	8007c70 <_printf_i+0x1e8>
 8007c8a:	e7eb      	b.n	8007c64 <_printf_i+0x1dc>
 8007c8c:	2500      	movs	r5, #0
 8007c8e:	f104 0919 	add.w	r9, r4, #25
 8007c92:	e7f5      	b.n	8007c80 <_printf_i+0x1f8>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1ac      	bne.n	8007bf2 <_printf_i+0x16a>
 8007c98:	7803      	ldrb	r3, [r0, #0]
 8007c9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ca2:	e76c      	b.n	8007b7e <_printf_i+0xf6>
 8007ca4:	08007dfd 	.word	0x08007dfd
 8007ca8:	08007e0e 	.word	0x08007e0e

08007cac <memmove>:
 8007cac:	4288      	cmp	r0, r1
 8007cae:	b510      	push	{r4, lr}
 8007cb0:	eb01 0302 	add.w	r3, r1, r2
 8007cb4:	d807      	bhi.n	8007cc6 <memmove+0x1a>
 8007cb6:	1e42      	subs	r2, r0, #1
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	d00a      	beq.n	8007cd2 <memmove+0x26>
 8007cbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007cc4:	e7f8      	b.n	8007cb8 <memmove+0xc>
 8007cc6:	4283      	cmp	r3, r0
 8007cc8:	d9f5      	bls.n	8007cb6 <memmove+0xa>
 8007cca:	1881      	adds	r1, r0, r2
 8007ccc:	1ad2      	subs	r2, r2, r3
 8007cce:	42d3      	cmn	r3, r2
 8007cd0:	d100      	bne.n	8007cd4 <memmove+0x28>
 8007cd2:	bd10      	pop	{r4, pc}
 8007cd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007cd8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007cdc:	e7f7      	b.n	8007cce <memmove+0x22>

08007cde <_realloc_r>:
 8007cde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce0:	4607      	mov	r7, r0
 8007ce2:	4614      	mov	r4, r2
 8007ce4:	460e      	mov	r6, r1
 8007ce6:	b921      	cbnz	r1, 8007cf2 <_realloc_r+0x14>
 8007ce8:	4611      	mov	r1, r2
 8007cea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007cee:	f7ff bc77 	b.w	80075e0 <_malloc_r>
 8007cf2:	b922      	cbnz	r2, 8007cfe <_realloc_r+0x20>
 8007cf4:	f7ff fc26 	bl	8007544 <_free_r>
 8007cf8:	4625      	mov	r5, r4
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007cfe:	f000 f814 	bl	8007d2a <_malloc_usable_size_r>
 8007d02:	42a0      	cmp	r0, r4
 8007d04:	d20f      	bcs.n	8007d26 <_realloc_r+0x48>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7ff fc69 	bl	80075e0 <_malloc_r>
 8007d0e:	4605      	mov	r5, r0
 8007d10:	2800      	cmp	r0, #0
 8007d12:	d0f2      	beq.n	8007cfa <_realloc_r+0x1c>
 8007d14:	4631      	mov	r1, r6
 8007d16:	4622      	mov	r2, r4
 8007d18:	f7ff fc00 	bl	800751c <memcpy>
 8007d1c:	4631      	mov	r1, r6
 8007d1e:	4638      	mov	r0, r7
 8007d20:	f7ff fc10 	bl	8007544 <_free_r>
 8007d24:	e7e9      	b.n	8007cfa <_realloc_r+0x1c>
 8007d26:	4635      	mov	r5, r6
 8007d28:	e7e7      	b.n	8007cfa <_realloc_r+0x1c>

08007d2a <_malloc_usable_size_r>:
 8007d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d2e:	1f18      	subs	r0, r3, #4
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	bfbc      	itt	lt
 8007d34:	580b      	ldrlt	r3, [r1, r0]
 8007d36:	18c0      	addlt	r0, r0, r3
 8007d38:	4770      	bx	lr
	...

08007d3c <_init>:
 8007d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3e:	bf00      	nop
 8007d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d42:	bc08      	pop	{r3}
 8007d44:	469e      	mov	lr, r3
 8007d46:	4770      	bx	lr

08007d48 <_fini>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr
