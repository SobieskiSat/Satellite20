
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012e9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  08013030  08013030  00023030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a28  08013a28  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08013a28  08013a28  00023a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013a30  08013a30  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013a30  08013a30  00023a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013a34  08013a34  00023a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08013a38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a98  20000350  08013d88  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002de8  08013d88  00032de8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027bda  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d8d  00000000  00000000  00057f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ec8  00000000  00000000  0005cce8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001cb0  00000000  00000000  0005ebb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000727c  00000000  00000000  00060860  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d454  00000000  00000000  00067adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5b14  00000000  00000000  00084f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015aa44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009114  00000000  00000000  0015aac0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013014 	.word	0x08013014

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	08013014 	.word	0x08013014

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MPU_writeByte>:
//===================================================================================================================
//====== Set of useful function to access acceleratio, gyroscope, and temperature data
//===================================================================================================================

void MPU_writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
 8000f92:	460b      	mov	r3, r1
 8000f94:	71bb      	strb	r3, [r7, #6]
 8000f96:	4613      	mov	r3, r2
 8000f98:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(Get_I2C1_Instance(), address, subAddress, 1, &data, 1, 5000);
 8000f9a:	f001 ffd9 	bl	8002f50 <Get_I2C1_Instance>
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2301      	movs	r3, #1
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	1d7b      	adds	r3, r7, #5
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f003 fc5f 	bl	8004878 <HAL_I2C_Mem_Write>
	/*print("Write:");
	print_int(data);
	println("");*/
	while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
 8000fba:	bf00      	nop
 8000fbc:	f001 ffc8 	bl	8002f50 <Get_I2C1_Instance>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 ff78 	bl	8004eb8 <HAL_I2C_GetState>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b20      	cmp	r3, #32
 8000fcc:	d1f6      	bne.n	8000fbc <MPU_writeByte+0x34>
	//i2c.write(address, data_write, 2, 0);
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <MPU_readByte>:

char MPU_readByte(uint8_t address, uint8_t subAddress)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b088      	sub	sp, #32
 8000fda:	af04      	add	r7, sp, #16
 8000fdc:	4603      	mov	r3, r0
 8000fde:	460a      	mov	r2, r1
 8000fe0:	71fb      	strb	r3, [r7, #7]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	71bb      	strb	r3, [r7, #6]
	uint8_t data[1]; // `data` will store the register data


	//i2c.write(address, data_write, 1, 1); // no stop
	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, 1, 5000);
 8000fe6:	f001 ffb3 	bl	8002f50 <Get_I2C1_Instance>
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	b299      	uxth	r1, r3
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2301      	movs	r3, #1
 8001004:	f003 fd32 	bl	8004a6c <HAL_I2C_Mem_Read>
	/*print("Read:");
	print_int(data[0]);
	println("");*/
	while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
 8001008:	bf00      	nop
 800100a:	f001 ffa1 	bl	8002f50 <Get_I2C1_Instance>
 800100e:	4603      	mov	r3, r0
 8001010:	4618      	mov	r0, r3
 8001012:	f003 ff51 	bl	8004eb8 <HAL_I2C_GetState>
 8001016:	4603      	mov	r3, r0
 8001018:	2b20      	cmp	r3, #32
 800101a:	d1f6      	bne.n	800100a <MPU_readByte+0x34>
	//i2c.read(address, data, 1, 0);

	return (char)data[0];
 800101c:	7b3b      	ldrb	r3, [r7, #12]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <MPU_readBytes>:

void MPU_readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t* dest)
{     
 8001026:	b590      	push	{r4, r7, lr}
 8001028:	b08d      	sub	sp, #52	; 0x34
 800102a:	af04      	add	r7, sp, #16
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	460b      	mov	r3, r1
 8001034:	71bb      	strb	r3, [r7, #6]
 8001036:	4613      	mov	r3, r2
 8001038:	717b      	strb	r3, [r7, #5]
	uint8_t data[14];

	HAL_I2C_Mem_Read(Get_I2C1_Instance(), address, subAddress, 1, data, count, 5000);
 800103a:	f001 ff89 	bl	8002f50 <Get_I2C1_Instance>
 800103e:	4604      	mov	r4, r0
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	b299      	uxth	r1, r3
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	b298      	uxth	r0, r3
 8001048:	797b      	ldrb	r3, [r7, #5]
 800104a:	b29b      	uxth	r3, r3
 800104c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001050:	9202      	str	r2, [sp, #8]
 8001052:	9301      	str	r3, [sp, #4]
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2301      	movs	r3, #1
 800105c:	4602      	mov	r2, r0
 800105e:	4620      	mov	r0, r4
 8001060:	f003 fd04 	bl	8004a6c <HAL_I2C_Mem_Read>
	{
		print_int(data[bo]);
		print(" ");
	}
	println("");*/
	while(HAL_I2C_GetState(Get_I2C1_Instance()) != HAL_I2C_STATE_READY);
 8001064:	bf00      	nop
 8001066:	f001 ff73 	bl	8002f50 <Get_I2C1_Instance>
 800106a:	4603      	mov	r3, r0
 800106c:	4618      	mov	r0, r3
 800106e:	f003 ff23 	bl	8004eb8 <HAL_I2C_GetState>
 8001072:	4603      	mov	r3, r0
 8001074:	2b20      	cmp	r3, #32
 8001076:	d1f6      	bne.n	8001066 <MPU_readBytes+0x40>

	/*
	i2c.write(address, data_write, 1, 1); // no stop
	i2c.read(address, data, count, 0);
	*/
	int ii = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
	for(ii = 0; ii < count; ii++)
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	e00b      	b.n	800109a <MPU_readBytes+0x74>
	{
		dest[ii] = data[ii];
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	f107 010c 	add.w	r1, r7, #12
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	440a      	add	r2, r1
 8001090:	7812      	ldrb	r2, [r2, #0]
 8001092:	701a      	strb	r2, [r3, #0]
	for(ii = 0; ii < count; ii++)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	3301      	adds	r3, #1
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	429a      	cmp	r2, r3
 80010a0:	dbef      	blt.n	8001082 <MPU_readBytes+0x5c>
	}
} 
 80010a2:	bf00      	nop
 80010a4:	3724      	adds	r7, #36	; 0x24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd90      	pop	{r4, r7, pc}
	...

080010ac <MPU_getMres>:
 

void MPU_getMres()
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
	switch (MMscale)
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MPU_getMres+0x2c>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d002      	beq.n	80010be <MPU_getMres+0x12>
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d004      	beq.n	80010c6 <MPU_getMres+0x1a>
			break;
		case MFS_16BITS:
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
			break;
	}
}
 80010bc:	e007      	b.n	80010ce <MPU_getMres+0x22>
			mRes = 10.0*4912.0/8190.0; // Proper scale to return milliGauss
 80010be:	4b07      	ldr	r3, [pc, #28]	; (80010dc <MPU_getMres+0x30>)
 80010c0:	4a07      	ldr	r2, [pc, #28]	; (80010e0 <MPU_getMres+0x34>)
 80010c2:	601a      	str	r2, [r3, #0]
			break;
 80010c4:	e003      	b.n	80010ce <MPU_getMres+0x22>
			mRes = 10.0*4912.0/32760.0; // Proper scale to return milliGauss
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <MPU_getMres+0x30>)
 80010c8:	4a06      	ldr	r2, [pc, #24]	; (80010e4 <MPU_getMres+0x38>)
 80010ca:	601a      	str	r2, [r3, #0]
			break;
 80010cc:	bf00      	nop
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20000810 	.word	0x20000810
 80010dc:	20000844 	.word	0x20000844
 80010e0:	40bfebff 	.word	0x40bfebff
 80010e4:	3fbfebff 	.word	0x3fbfebff

080010e8 <MPU_getGres>:


void MPU_getGres()
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
	switch (GGscale)
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MPU_getGres+0x50>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d81b      	bhi.n	800112c <MPU_getGres+0x44>
 80010f4:	a201      	add	r2, pc, #4	; (adr r2, 80010fc <MPU_getGres+0x14>)
 80010f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010fa:	bf00      	nop
 80010fc:	0800110d 	.word	0x0800110d
 8001100:	08001115 	.word	0x08001115
 8001104:	0800111d 	.word	0x0800111d
 8001108:	08001125 	.word	0x08001125
	{
		// Possible gyro scales (and their register bit settings) are:
		// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case GFS_250DPS:
			gRes = 250.0/32768.0;
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MPU_getGres+0x54>)
 800110e:	4a0c      	ldr	r2, [pc, #48]	; (8001140 <MPU_getGres+0x58>)
 8001110:	601a      	str	r2, [r3, #0]
			break;
 8001112:	e00b      	b.n	800112c <MPU_getGres+0x44>
		case GFS_500DPS:
			gRes = 500.0/32768.0;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MPU_getGres+0x54>)
 8001116:	4a0b      	ldr	r2, [pc, #44]	; (8001144 <MPU_getGres+0x5c>)
 8001118:	601a      	str	r2, [r3, #0]
			break;
 800111a:	e007      	b.n	800112c <MPU_getGres+0x44>
		case GFS_1000DPS:
			gRes = 1000.0/32768.0;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MPU_getGres+0x54>)
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <MPU_getGres+0x60>)
 8001120:	601a      	str	r2, [r3, #0]
			break;
 8001122:	e003      	b.n	800112c <MPU_getGres+0x44>
		case GFS_2000DPS:
			gRes = 2000.0/32768.0;
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <MPU_getGres+0x54>)
 8001126:	4a09      	ldr	r2, [pc, #36]	; (800114c <MPU_getGres+0x64>)
 8001128:	601a      	str	r2, [r3, #0]
			break;
 800112a:	bf00      	nop
	}
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	2000079a 	.word	0x2000079a
 800113c:	20000824 	.word	0x20000824
 8001140:	3bfa0000 	.word	0x3bfa0000
 8001144:	3c7a0000 	.word	0x3c7a0000
 8001148:	3cfa0000 	.word	0x3cfa0000
 800114c:	3d7a0000 	.word	0x3d7a0000

08001150 <MPU_getAres>:


void MPU_getAres()
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
	switch (AAscale)
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MPU_getAres+0x58>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d81f      	bhi.n	800119c <MPU_getAres+0x4c>
 800115c:	a201      	add	r2, pc, #4	; (adr r2, 8001164 <MPU_getAres+0x14>)
 800115e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001162:	bf00      	nop
 8001164:	08001175 	.word	0x08001175
 8001168:	0800117f 	.word	0x0800117f
 800116c:	08001189 	.word	0x08001189
 8001170:	08001193 	.word	0x08001193
	{
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11). 
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
			aRes = 2.0/32768.0;
 8001174:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <MPU_getAres+0x5c>)
 8001176:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 800117a:	601a      	str	r2, [r3, #0]
			break;
 800117c:	e00e      	b.n	800119c <MPU_getAres+0x4c>
		case AFS_4G:
			aRes = 4.0/32768.0;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MPU_getAres+0x5c>)
 8001180:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8001184:	601a      	str	r2, [r3, #0]
			break;
 8001186:	e009      	b.n	800119c <MPU_getAres+0x4c>
		case AFS_8G:
			aRes = 8.0/32768.0;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MPU_getAres+0x5c>)
 800118a:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 800118e:	601a      	str	r2, [r3, #0]
			break;
 8001190:	e004      	b.n	800119c <MPU_getAres+0x4c>
		case AFS_16G:
			aRes = 16.0/32768.0;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MPU_getAres+0x5c>)
 8001194:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001198:	601a      	str	r2, [r3, #0]
			break;
 800119a:	bf00      	nop
	}
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	200007c4 	.word	0x200007c4
 80011ac:	20000808 	.word	0x20000808

080011b0 <MPU_init>:
	HAL_Delay(10);
}


void MPU_init()
{
 80011b0:	b590      	push	{r4, r7, lr}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
	GyroMeasError = PI * (60.0f / 180.0f);
 80011b6:	4b7a      	ldr	r3, [pc, #488]	; (80013a0 <MPU_init+0x1f0>)
 80011b8:	4a7a      	ldr	r2, [pc, #488]	; (80013a4 <MPU_init+0x1f4>)
 80011ba:	601a      	str	r2, [r3, #0]
	beta = sqrt(3.0f / 4.0f) * GyroMeasError;
 80011bc:	4b78      	ldr	r3, [pc, #480]	; (80013a0 <MPU_init+0x1f0>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9c1 	bl	8000548 <__aeabi_f2d>
 80011c6:	a374      	add	r3, pc, #464	; (adr r3, 8001398 <MPU_init+0x1e8>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa14 	bl	80005f8 <__aeabi_dmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	4618      	mov	r0, r3
 80011d6:	4621      	mov	r1, r4
 80011d8:	f7ff fd06 	bl	8000be8 <__aeabi_d2f>
 80011dc:	4602      	mov	r2, r0
 80011de:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <MPU_init+0x1f8>)
 80011e0:	601a      	str	r2, [r3, #0]
	GyroMeasDrift = PI * (1.0f / 180.0f);
 80011e2:	4b72      	ldr	r3, [pc, #456]	; (80013ac <MPU_init+0x1fc>)
 80011e4:	4a72      	ldr	r2, [pc, #456]	; (80013b0 <MPU_init+0x200>)
 80011e6:	601a      	str	r2, [r3, #0]
	zeta = sqrt(3.0f / 4.0f) * GyroMeasDrift;
 80011e8:	4b70      	ldr	r3, [pc, #448]	; (80013ac <MPU_init+0x1fc>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9ab 	bl	8000548 <__aeabi_f2d>
 80011f2:	a369      	add	r3, pc, #420	; (adr r3, 8001398 <MPU_init+0x1e8>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff f9fe 	bl	80005f8 <__aeabi_dmul>
 80011fc:	4603      	mov	r3, r0
 80011fe:	460c      	mov	r4, r1
 8001200:	4618      	mov	r0, r3
 8001202:	4621      	mov	r1, r4
 8001204:	f7ff fcf0 	bl	8000be8 <__aeabi_d2f>
 8001208:	4602      	mov	r2, r0
 800120a:	4b6a      	ldr	r3, [pc, #424]	; (80013b4 <MPU_init+0x204>)
 800120c:	601a      	str	r2, [r3, #0]

	AAscale = AFS_2G;
 800120e:	4b6a      	ldr	r3, [pc, #424]	; (80013b8 <MPU_init+0x208>)
 8001210:	2200      	movs	r2, #0
 8001212:	701a      	strb	r2, [r3, #0]
	GGscale = GFS_250DPS;
 8001214:	4b69      	ldr	r3, [pc, #420]	; (80013bc <MPU_init+0x20c>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]
	MMscale = MFS_16BITS;
 800121a:	4b69      	ldr	r3, [pc, #420]	; (80013c0 <MPU_init+0x210>)
 800121c:	2201      	movs	r2, #1
 800121e:	701a      	strb	r2, [r3, #0]
	Mmode = 0x06;
 8001220:	4b68      	ldr	r3, [pc, #416]	; (80013c4 <MPU_init+0x214>)
 8001222:	2206      	movs	r2, #6
 8001224:	701a      	strb	r2, [r3, #0]
	magCalibration[0] = 0;
 8001226:	4b68      	ldr	r3, [pc, #416]	; (80013c8 <MPU_init+0x218>)
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
	magCalibration[1] = 0;
 800122e:	4b66      	ldr	r3, [pc, #408]	; (80013c8 <MPU_init+0x218>)
 8001230:	f04f 0200 	mov.w	r2, #0
 8001234:	605a      	str	r2, [r3, #4]
	magCalibration[2] = 0;
 8001236:	4b64      	ldr	r3, [pc, #400]	; (80013c8 <MPU_init+0x218>)
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
	magbias[0] = 0;
 800123e:	4b63      	ldr	r3, [pc, #396]	; (80013cc <MPU_init+0x21c>)
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
	magbias[1] = 0;
 8001246:	4b61      	ldr	r3, [pc, #388]	; (80013cc <MPU_init+0x21c>)
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
	magbias[2] = 0;
 800124e:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <MPU_init+0x21c>)
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
	delt_t = 0;
 8001256:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <MPU_init+0x220>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
	count = 0;
 800125c:	4b5d      	ldr	r3, [pc, #372]	; (80013d4 <MPU_init+0x224>)
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
	deltat = 0.0f;
 8001262:	4b5d      	ldr	r3, [pc, #372]	; (80013d8 <MPU_init+0x228>)
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
	lastUpdate = 0;
 800126a:	4b5c      	ldr	r3, [pc, #368]	; (80013dc <MPU_init+0x22c>)
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
	firstUpdate = 0;
 8001270:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <MPU_init+0x230>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
	Now = 0;
 8001276:	4b5b      	ldr	r3, [pc, #364]	; (80013e4 <MPU_init+0x234>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
	q[0] = 1.0f;
 800127c:	4b5a      	ldr	r3, [pc, #360]	; (80013e8 <MPU_init+0x238>)
 800127e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001282:	601a      	str	r2, [r3, #0]
	q[1] = 0.0f;
 8001284:	4b58      	ldr	r3, [pc, #352]	; (80013e8 <MPU_init+0x238>)
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
	q[2] = 0.0f;
 800128c:	4b56      	ldr	r3, [pc, #344]	; (80013e8 <MPU_init+0x238>)
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
	q[3] = 0.0f;
 8001294:	4b54      	ldr	r3, [pc, #336]	; (80013e8 <MPU_init+0x238>)
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	60da      	str	r2, [r3, #12]
	eInt[0] = 0.0f;
 800129c:	4b53      	ldr	r3, [pc, #332]	; (80013ec <MPU_init+0x23c>)
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
	eInt[1] = 0.0f;
 80012a4:	4b51      	ldr	r3, [pc, #324]	; (80013ec <MPU_init+0x23c>)
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
	eInt[2] = 0.0f;
 80012ac:	4b4f      	ldr	r3, [pc, #316]	; (80013ec <MPU_init+0x23c>)
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]

	// Initialize MPU9250 device
	// wake up device
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors 
 80012b4:	2200      	movs	r2, #0
 80012b6:	216b      	movs	r1, #107	; 0x6b
 80012b8:	20d2      	movs	r0, #210	; 0xd2
 80012ba:	f7ff fe65 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(100); // Delay 100 ms for PLL to get established on x-axis gyro; should check for PLL ready interrupt  
 80012be:	2064      	movs	r0, #100	; 0x64
 80012c0:	f002 fae2 	bl	8003888 <HAL_Delay>

	// get stable time source
	MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Set clock source to be PLL with x-axis gyroscope reference, bits 2:0 = 001
 80012c4:	2201      	movs	r2, #1
 80012c6:	216b      	movs	r1, #107	; 0x6b
 80012c8:	20d2      	movs	r0, #210	; 0xd2
 80012ca:	f7ff fe5d 	bl	8000f88 <MPU_writeByte>

	// Configure Gyro and Accelerometer
	// Disable FSYNC and set accelerometer and gyro bandwidth to 44 and 42 Hz, respectively; 
	// DLPF_CFG = bits 2:0 = 010; this sets the sample rate at 1 kHz for both
	// Maximum delay is 4.9 ms which is just over a 200 Hz maximum rate
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x03);  
 80012ce:	2203      	movs	r2, #3
 80012d0:	211a      	movs	r1, #26
 80012d2:	20d2      	movs	r0, #210	; 0xd2
 80012d4:	f7ff fe58 	bl	8000f88 <MPU_writeByte>

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  // Use a 200 Hz rate; the same rate set in CONFIG above
 80012d8:	2204      	movs	r2, #4
 80012da:	2119      	movs	r1, #25
 80012dc:	20d2      	movs	r0, #210	; 0xd2
 80012de:	f7ff fe53 	bl	8000f88 <MPU_writeByte>

	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = MPU_readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
 80012e2:	211b      	movs	r1, #27
 80012e4:	20d2      	movs	r0, #210	; 0xd2
 80012e6:	f7ff fe76 	bl	8000fd6 <MPU_readByte>
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x02; // Clear Fchoice bits [1:0] 
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f023 0302 	bic.w	r3, r3, #2
 80012f4:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x18; // Clear AFS bits [4:3]
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f023 0318 	bic.w	r3, r3, #24
 80012fc:	71fb      	strb	r3, [r7, #7]
	c = c | GGscale << 3; // Set full scale range for the gyro
 80012fe:	4b2f      	ldr	r3, [pc, #188]	; (80013bc <MPU_init+0x20c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	b25a      	sxtb	r2, r3
 8001306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130a:	4313      	orrs	r3, r2
 800130c:	b25b      	sxtb	r3, r3
 800130e:	71fb      	strb	r3, [r7, #7]
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	461a      	mov	r2, r3
 8001314:	211b      	movs	r1, #27
 8001316:	20d2      	movs	r0, #210	; 0xd2
 8001318:	f7ff fe36 	bl	8000f88 <MPU_writeByte>

	// Set accelerometer full-scale range configuration
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
 800131c:	211c      	movs	r1, #28
 800131e:	20d2      	movs	r0, #210	; 0xd2
 8001320:	f7ff fe59 	bl	8000fd6 <MPU_readByte>
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
	// c = c & ~0xE0; // Clear self-test bits [7:5] 
	c = c & ~0x18;  // Clear AFS bits [4:3]
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	f023 0318 	bic.w	r3, r3, #24
 800132e:	71fb      	strb	r3, [r7, #7]
	c = c | AAscale << 3; // Set full scale range for the accelerometer
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MPU_init+0x208>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	b25a      	sxtb	r2, r3
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4313      	orrs	r3, r2
 800133e:	b25b      	sxtb	r3, r3
 8001340:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	461a      	mov	r2, r3
 8001346:	211c      	movs	r1, #28
 8001348:	20d2      	movs	r0, #210	; 0xd2
 800134a:	f7ff fe1d 	bl	8000f88 <MPU_writeByte>

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = MPU_readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
 800134e:	211d      	movs	r1, #29
 8001350:	20d2      	movs	r0, #210	; 0xd2
 8001352:	f7ff fe40 	bl	8000fd6 <MPU_readByte>
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])  
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f023 030f 	bic.w	r3, r3, #15
 8001360:	71fb      	strb	r3, [r7, #7]
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f043 0303 	orr.w	r3, r3, #3
 8001368:	71fb      	strb	r3, [r7, #7]
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	461a      	mov	r2, r3
 800136e:	211d      	movs	r1, #29
 8001370:	20d2      	movs	r0, #210	; 0xd2
 8001372:	f7ff fe09 	bl	8000f88 <MPU_writeByte>
	// but all these rates are further reduced by a factor of 5 to 200 Hz because of the SMPLRT_DIV setting

	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, and clear on read of INT_STATUS, enable I2C_BYPASS_EN so additional chips 
	// can join the I2C bus and all can be controlled by the Arduino as master
	MPU_writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);    
 8001376:	2222      	movs	r2, #34	; 0x22
 8001378:	2137      	movs	r1, #55	; 0x37
 800137a:	20d2      	movs	r0, #210	; 0xd2
 800137c:	f7ff fe04 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
 8001380:	2201      	movs	r2, #1
 8001382:	2138      	movs	r1, #56	; 0x38
 8001384:	20d2      	movs	r0, #210	; 0xd2
 8001386:	f7ff fdff 	bl	8000f88 <MPU_writeByte>
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	bf00      	nop
 8001394:	f3af 8000 	nop.w
 8001398:	e8584caa 	.word	0xe8584caa
 800139c:	3febb67a 	.word	0x3febb67a
 80013a0:	2000080c 	.word	0x2000080c
 80013a4:	3f860a92 	.word	0x3f860a92
 80013a8:	20000820 	.word	0x20000820
 80013ac:	2000079c 	.word	0x2000079c
 80013b0:	3c8efa36 	.word	0x3c8efa36
 80013b4:	20000880 	.word	0x20000880
 80013b8:	200007c4 	.word	0x200007c4
 80013bc:	2000079a 	.word	0x2000079a
 80013c0:	20000810 	.word	0x20000810
 80013c4:	200007f0 	.word	0x200007f0
 80013c8:	2000086c 	.word	0x2000086c
 80013cc:	200007f4 	.word	0x200007f4
 80013d0:	2000081c 	.word	0x2000081c
 80013d4:	20000814 	.word	0x20000814
 80013d8:	20000840 	.word	0x20000840
 80013dc:	200007d0 	.word	0x200007d0
 80013e0:	20000848 	.word	0x20000848
 80013e4:	20000800 	.word	0x20000800
 80013e8:	20000858 	.word	0x20000858
 80013ec:	200007e4 	.word	0x200007e4

080013f0 <MPU_SelfTest>:
}


// Accelerometer and gyroscope self test; check calibration wrt factory settings
void MPU_SelfTest(float* destination) // Should return percent deviation from factory trim values, +/- 14 or less deviation is a pass
{
 80013f0:	b5b0      	push	{r4, r5, r7, lr}
 80013f2:	b09e      	sub	sp, #120	; 0x78
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	uint8_t rawData[6] = {0, 0, 0, 0, 0, 0};
 80013f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	809a      	strh	r2, [r3, #4]
	uint8_t selfTest[6];
	int32_t gAvg[3] = {0}, aAvg[3] = {0}, aSTAvg[3] = {0}, gSTAvg[3] = {0};
 8001402:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
	float factoryTrim[6];
	uint8_t FS = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00); // Set gyro sample rate to 1 kHz
 8001438:	2200      	movs	r2, #0
 800143a:	2119      	movs	r1, #25
 800143c:	20d2      	movs	r0, #210	; 0xd2
 800143e:	f7ff fda3 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x02); // Set gyro sample rate to 1 kHz and DLPF to 92 Hz
 8001442:	2202      	movs	r2, #2
 8001444:	211a      	movs	r1, #26
 8001446:	20d2      	movs	r0, #210	; 0xd2
 8001448:	f7ff fd9e 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, FS<<3); // Set full scale range for the gyro to 250 dps
 800144c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	461a      	mov	r2, r3
 8001456:	211b      	movs	r1, #27
 8001458:	20d2      	movs	r0, #210	; 0xd2
 800145a:	f7ff fd95 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02); // Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
 800145e:	2202      	movs	r2, #2
 8001460:	211d      	movs	r1, #29
 8001462:	20d2      	movs	r0, #210	; 0xd2
 8001464:	f7ff fd90 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, FS<<3); // Set full scale range for the accelerometer to 2 g
 8001468:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	211c      	movs	r1, #28
 8001474:	20d2      	movs	r0, #210	; 0xd2
 8001476:	f7ff fd87 	bl	8000f88 <MPU_writeByte>

	for( int ii = 0; ii < 200; ii++)
 800147a:	2300      	movs	r3, #0
 800147c:	677b      	str	r3, [r7, #116]	; 0x74
 800147e:	e058      	b.n	8001532 <MPU_SelfTest+0x142>
	{ // get average current values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 8001480:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001484:	2206      	movs	r2, #6
 8001486:	213b      	movs	r1, #59	; 0x3b
 8001488:	20d2      	movs	r0, #210	; 0xd2
 800148a:	f7ff fdcc 	bl	8001026 <MPU_readBytes>
		aAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800148e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001490:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001494:	0212      	lsls	r2, r2, #8
 8001496:	b211      	sxth	r1, r2
 8001498:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800149c:	b212      	sxth	r2, r2
 800149e:	430a      	orrs	r2, r1
 80014a0:	b212      	sxth	r2, r2
 80014a2:	4413      	add	r3, r2
 80014a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		aAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80014a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014a8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80014ac:	0212      	lsls	r2, r2, #8
 80014ae:	b211      	sxth	r1, r2
 80014b0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80014b4:	b212      	sxth	r2, r2
 80014b6:	430a      	orrs	r2, r1
 80014b8:	b212      	sxth	r2, r2
 80014ba:	4413      	add	r3, r2
 80014bc:	643b      	str	r3, [r7, #64]	; 0x40
		aAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80014be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014c0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80014c4:	0212      	lsls	r2, r2, #8
 80014c6:	b211      	sxth	r1, r2
 80014c8:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80014cc:	b212      	sxth	r2, r2
 80014ce:	430a      	orrs	r2, r1
 80014d0:	b212      	sxth	r2, r2
 80014d2:	4413      	add	r3, r2
 80014d4:	647b      	str	r3, [r7, #68]	; 0x44

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 80014d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80014da:	2206      	movs	r2, #6
 80014dc:	2143      	movs	r1, #67	; 0x43
 80014de:	20d2      	movs	r0, #210	; 0xd2
 80014e0:	f7ff fda1 	bl	8001026 <MPU_readBytes>
		gAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80014e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80014e6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80014ea:	0212      	lsls	r2, r2, #8
 80014ec:	b211      	sxth	r1, r2
 80014ee:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80014f2:	b212      	sxth	r2, r2
 80014f4:	430a      	orrs	r2, r1
 80014f6:	b212      	sxth	r2, r2
 80014f8:	4413      	add	r3, r2
 80014fa:	64bb      	str	r3, [r7, #72]	; 0x48
		gAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80014fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014fe:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8001502:	0212      	lsls	r2, r2, #8
 8001504:	b211      	sxth	r1, r2
 8001506:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800150a:	b212      	sxth	r2, r2
 800150c:	430a      	orrs	r2, r1
 800150e:	b212      	sxth	r2, r2
 8001510:	4413      	add	r3, r2
 8001512:	64fb      	str	r3, [r7, #76]	; 0x4c
		gAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 8001514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001516:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 800151a:	0212      	lsls	r2, r2, #8
 800151c:	b211      	sxth	r1, r2
 800151e:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001522:	b212      	sxth	r2, r2
 8001524:	430a      	orrs	r2, r1
 8001526:	b212      	sxth	r2, r2
 8001528:	4413      	add	r3, r2
 800152a:	653b      	str	r3, [r7, #80]	; 0x50
	for( int ii = 0; ii < 200; ii++)
 800152c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800152e:	3301      	adds	r3, #1
 8001530:	677b      	str	r3, [r7, #116]	; 0x74
 8001532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001534:	2bc7      	cmp	r3, #199	; 0xc7
 8001536:	dda3      	ble.n	8001480 <MPU_SelfTest+0x90>
	}

	for (int ii =0; ii < 3; ii++)
 8001538:	2300      	movs	r3, #0
 800153a:	673b      	str	r3, [r7, #112]	; 0x70
 800153c:	e02a      	b.n	8001594 <MPU_SelfTest+0x1a4>
	{ // Get average of 200 values and store as average current readings
		aAvg[ii] /= 200;
 800153e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001546:	4413      	add	r3, r2
 8001548:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800154c:	4a4a      	ldr	r2, [pc, #296]	; (8001678 <MPU_SelfTest+0x288>)
 800154e:	fb82 1203 	smull	r1, r2, r2, r3
 8001552:	1192      	asrs	r2, r2, #6
 8001554:	17db      	asrs	r3, r3, #31
 8001556:	1ad2      	subs	r2, r2, r3
 8001558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001560:	440b      	add	r3, r1
 8001562:	f843 2c3c 	str.w	r2, [r3, #-60]
		gAvg[ii] /= 200;
 8001566:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800156e:	4413      	add	r3, r2
 8001570:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001574:	4a40      	ldr	r2, [pc, #256]	; (8001678 <MPU_SelfTest+0x288>)
 8001576:	fb82 1203 	smull	r1, r2, r2, r3
 800157a:	1192      	asrs	r2, r2, #6
 800157c:	17db      	asrs	r3, r3, #31
 800157e:	1ad2      	subs	r2, r2, r3
 8001580:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001588:	440b      	add	r3, r1
 800158a:	f843 2c30 	str.w	r2, [r3, #-48]
	for (int ii =0; ii < 3; ii++)
 800158e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001590:	3301      	adds	r3, #1
 8001592:	673b      	str	r3, [r7, #112]	; 0x70
 8001594:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001596:	2b02      	cmp	r3, #2
 8001598:	ddd1      	ble.n	800153e <MPU_SelfTest+0x14e>
	}

	// Configure the accelerometer for self-test
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
 800159a:	22e0      	movs	r2, #224	; 0xe0
 800159c:	211c      	movs	r1, #28
 800159e:	20d2      	movs	r0, #210	; 0xd2
 80015a0:	f7ff fcf2 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
 80015a4:	22e0      	movs	r2, #224	; 0xe0
 80015a6:	211b      	movs	r1, #27
 80015a8:	20d2      	movs	r0, #210	; 0xd2
 80015aa:	f7ff fced 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80015ae:	2019      	movs	r0, #25
 80015b0:	f002 f96a 	bl	8003888 <HAL_Delay>

	for( int ii = 0; ii < 200; ii++)
 80015b4:	2300      	movs	r3, #0
 80015b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015b8:	e058      	b.n	800166c <MPU_SelfTest+0x27c>
	{ // get average self-test values of gyro and acclerometer

		MPU_readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]); // Read the six raw data registers into data array
 80015ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80015be:	2206      	movs	r2, #6
 80015c0:	213b      	movs	r1, #59	; 0x3b
 80015c2:	20d2      	movs	r0, #210	; 0xd2
 80015c4:	f7ff fd2f 	bl	8001026 <MPU_readBytes>
		aSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 80015c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ca:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80015ce:	0212      	lsls	r2, r2, #8
 80015d0:	b211      	sxth	r1, r2
 80015d2:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80015d6:	b212      	sxth	r2, r2
 80015d8:	430a      	orrs	r2, r1
 80015da:	b212      	sxth	r2, r2
 80015dc:	4413      	add	r3, r2
 80015de:	633b      	str	r3, [r7, #48]	; 0x30
		aSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 80015e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e2:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80015e6:	0212      	lsls	r2, r2, #8
 80015e8:	b211      	sxth	r1, r2
 80015ea:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80015ee:	b212      	sxth	r2, r2
 80015f0:	430a      	orrs	r2, r1
 80015f2:	b212      	sxth	r2, r2
 80015f4:	4413      	add	r3, r2
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
		aSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 80015f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015fa:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80015fe:	0212      	lsls	r2, r2, #8
 8001600:	b211      	sxth	r1, r2
 8001602:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 8001606:	b212      	sxth	r2, r2
 8001608:	430a      	orrs	r2, r1
 800160a:	b212      	sxth	r2, r2
 800160c:	4413      	add	r3, r2
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38

		MPU_readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]); // Read the six raw data registers sequentially into data array
 8001610:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001614:	2206      	movs	r2, #6
 8001616:	2143      	movs	r1, #67	; 0x43
 8001618:	20d2      	movs	r0, #210	; 0xd2
 800161a:	f7ff fd04 	bl	8001026 <MPU_readBytes>
		gSTAvg[0] += (int16_t)(((int16_t)rawData[0] << 8) | rawData[1]) ; // Turn the MSB and LSB into a signed 16-bit value
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8001624:	0212      	lsls	r2, r2, #8
 8001626:	b211      	sxth	r1, r2
 8001628:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800162c:	b212      	sxth	r2, r2
 800162e:	430a      	orrs	r2, r1
 8001630:	b212      	sxth	r2, r2
 8001632:	4413      	add	r3, r2
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
		gSTAvg[1] += (int16_t)(((int16_t)rawData[2] << 8) | rawData[3]) ;
 8001636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001638:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800163c:	0212      	lsls	r2, r2, #8
 800163e:	b211      	sxth	r1, r2
 8001640:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8001644:	b212      	sxth	r2, r2
 8001646:	430a      	orrs	r2, r1
 8001648:	b212      	sxth	r2, r2
 800164a:	4413      	add	r3, r2
 800164c:	62bb      	str	r3, [r7, #40]	; 0x28
		gSTAvg[2] += (int16_t)(((int16_t)rawData[4] << 8) | rawData[5]) ;
 800164e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001650:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8001654:	0212      	lsls	r2, r2, #8
 8001656:	b211      	sxth	r1, r2
 8001658:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 800165c:	b212      	sxth	r2, r2
 800165e:	430a      	orrs	r2, r1
 8001660:	b212      	sxth	r2, r2
 8001662:	4413      	add	r3, r2
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
	for( int ii = 0; ii < 200; ii++)
 8001666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001668:	3301      	adds	r3, #1
 800166a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800166c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800166e:	2bc7      	cmp	r3, #199	; 0xc7
 8001670:	dda3      	ble.n	80015ba <MPU_SelfTest+0x1ca>
	}

	for (int ii =0; ii < 3; ii++)
 8001672:	2300      	movs	r3, #0
 8001674:	66bb      	str	r3, [r7, #104]	; 0x68
 8001676:	e02c      	b.n	80016d2 <MPU_SelfTest+0x2e2>
 8001678:	51eb851f 	.word	0x51eb851f
	{ // Get average of 200 values and store as average self-test readings
		aSTAvg[ii] /= 200;
 800167c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001684:	4413      	add	r3, r2
 8001686:	f853 3c48 	ldr.w	r3, [r3, #-72]
 800168a:	4add      	ldr	r2, [pc, #884]	; (8001a00 <MPU_SelfTest+0x610>)
 800168c:	fb82 1203 	smull	r1, r2, r2, r3
 8001690:	1192      	asrs	r2, r2, #6
 8001692:	17db      	asrs	r3, r3, #31
 8001694:	1ad2      	subs	r2, r2, r3
 8001696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800169e:	440b      	add	r3, r1
 80016a0:	f843 2c48 	str.w	r2, [r3, #-72]
		gSTAvg[ii] /= 200;
 80016a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80016ac:	4413      	add	r3, r2
 80016ae:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80016b2:	4ad3      	ldr	r2, [pc, #844]	; (8001a00 <MPU_SelfTest+0x610>)
 80016b4:	fb82 1203 	smull	r1, r2, r2, r3
 80016b8:	1192      	asrs	r2, r2, #6
 80016ba:	17db      	asrs	r3, r3, #31
 80016bc:	1ad2      	subs	r2, r2, r3
 80016be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80016c6:	440b      	add	r3, r1
 80016c8:	f843 2c54 	str.w	r2, [r3, #-84]
	for (int ii =0; ii < 3; ii++)
 80016cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016ce:	3301      	adds	r3, #1
 80016d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80016d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	ddd1      	ble.n	800167c <MPU_SelfTest+0x28c>
	}

	// Configure the gyro and accelerometer for normal operation
	MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
 80016d8:	2200      	movs	r2, #0
 80016da:	211c      	movs	r1, #28
 80016dc:	20d2      	movs	r0, #210	; 0xd2
 80016de:	f7ff fc53 	bl	8000f88 <MPU_writeByte>
	MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);
 80016e2:	2200      	movs	r2, #0
 80016e4:	211b      	movs	r1, #27
 80016e6:	20d2      	movs	r0, #210	; 0xd2
 80016e8:	f7ff fc4e 	bl	8000f88 <MPU_writeByte>
	HAL_Delay(25); // Delay a while to let the device stabilize
 80016ec:	2019      	movs	r0, #25
 80016ee:	f002 f8cb 	bl	8003888 <HAL_Delay>

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	selfTest[0] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
 80016f2:	210d      	movs	r1, #13
 80016f4:	20d2      	movs	r0, #210	; 0xd2
 80016f6:	f7ff fc6e 	bl	8000fd6 <MPU_readByte>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	selfTest[1] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
 8001700:	210e      	movs	r1, #14
 8001702:	20d2      	movs	r0, #210	; 0xd2
 8001704:	f7ff fc67 	bl	8000fd6 <MPU_readByte>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	selfTest[2] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
 800170e:	210f      	movs	r1, #15
 8001710:	20d2      	movs	r0, #210	; 0xd2
 8001712:	f7ff fc60 	bl	8000fd6 <MPU_readByte>
 8001716:	4603      	mov	r3, r0
 8001718:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	selfTest[3] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO); // X-axis gyro self-test results
 800171c:	2100      	movs	r1, #0
 800171e:	20d2      	movs	r0, #210	; 0xd2
 8001720:	f7ff fc59 	bl	8000fd6 <MPU_readByte>
 8001724:	4603      	mov	r3, r0
 8001726:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	selfTest[4] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO); // Y-axis gyro self-test results
 800172a:	2101      	movs	r1, #1
 800172c:	20d2      	movs	r0, #210	; 0xd2
 800172e:	f7ff fc52 	bl	8000fd6 <MPU_readByte>
 8001732:	4603      	mov	r3, r0
 8001734:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	selfTest[5] = MPU_readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO); // Z-axis gyro self-test results
 8001738:	2102      	movs	r1, #2
 800173a:	20d2      	movs	r0, #210	; 0xd2
 800173c:	f7ff fc4b 	bl	8000fd6 <MPU_readByte>
 8001740:	4603      	mov	r3, r0
 8001742:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	// Retrieve factory self-test value from self-test code reads
	factoryTrim[0] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[0] - 1.0) )); // FT[Xa] factory trim calculation
 8001746:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800174a:	f640 223c 	movw	r2, #2620	; 0xa3c
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	ee07 3a90 	vmov	s15, r3
 8001756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800175a:	ee17 0a90 	vmov	r0, s15
 800175e:	f7fe fef3 	bl	8000548 <__aeabi_f2d>
 8001762:	4604      	mov	r4, r0
 8001764:	460d      	mov	r5, r1
 8001766:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800176a:	ee07 3a90 	vmov	s15, r3
 800176e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4ba1      	ldr	r3, [pc, #644]	; (8001a04 <MPU_SelfTest+0x614>)
 8001780:	f7fe fd82 	bl	8000288 <__aeabi_dsub>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	ec43 2b17 	vmov	d7, r2, r3
 800178c:	eeb0 1a47 	vmov.f32	s2, s14
 8001790:	eef0 1a67 	vmov.f32	s3, s15
 8001794:	ed9f 0b98 	vldr	d0, [pc, #608]	; 80019f8 <MPU_SelfTest+0x608>
 8001798:	f010 fbd0 	bl	8011f3c <pow>
 800179c:	ec53 2b10 	vmov	r2, r3, d0
 80017a0:	4620      	mov	r0, r4
 80017a2:	4629      	mov	r1, r5
 80017a4:	f7fe ff28 	bl	80005f8 <__aeabi_dmul>
 80017a8:	4603      	mov	r3, r0
 80017aa:	460c      	mov	r4, r1
 80017ac:	4618      	mov	r0, r3
 80017ae:	4621      	mov	r1, r4
 80017b0:	f7ff fa1a 	bl	8000be8 <__aeabi_d2f>
 80017b4:	4603      	mov	r3, r0
 80017b6:	60fb      	str	r3, [r7, #12]
	factoryTrim[1] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[1] - 1.0) )); // FT[Ya] factory trim calculation
 80017b8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80017bc:	f640 223c 	movw	r2, #2620	; 0xa3c
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	ee07 3a90 	vmov	s15, r3
 80017c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017cc:	ee17 0a90 	vmov	r0, s15
 80017d0:	f7fe feba 	bl	8000548 <__aeabi_f2d>
 80017d4:	4604      	mov	r4, r0
 80017d6:	460d      	mov	r5, r1
 80017d8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80017dc:	ee07 3a90 	vmov	s15, r3
 80017e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e4:	ee17 0a90 	vmov	r0, s15
 80017e8:	f7fe feae 	bl	8000548 <__aeabi_f2d>
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b84      	ldr	r3, [pc, #528]	; (8001a04 <MPU_SelfTest+0x614>)
 80017f2:	f7fe fd49 	bl	8000288 <__aeabi_dsub>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	ec43 2b17 	vmov	d7, r2, r3
 80017fe:	eeb0 1a47 	vmov.f32	s2, s14
 8001802:	eef0 1a67 	vmov.f32	s3, s15
 8001806:	ed9f 0b7c 	vldr	d0, [pc, #496]	; 80019f8 <MPU_SelfTest+0x608>
 800180a:	f010 fb97 	bl	8011f3c <pow>
 800180e:	ec53 2b10 	vmov	r2, r3, d0
 8001812:	4620      	mov	r0, r4
 8001814:	4629      	mov	r1, r5
 8001816:	f7fe feef 	bl	80005f8 <__aeabi_dmul>
 800181a:	4603      	mov	r3, r0
 800181c:	460c      	mov	r4, r1
 800181e:	4618      	mov	r0, r3
 8001820:	4621      	mov	r1, r4
 8001822:	f7ff f9e1 	bl	8000be8 <__aeabi_d2f>
 8001826:	4603      	mov	r3, r0
 8001828:	613b      	str	r3, [r7, #16]
	factoryTrim[2] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[2] - 1.0) )); // FT[Za] factory trim calculation
 800182a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800182e:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	ee07 3a90 	vmov	s15, r3
 800183a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183e:	ee17 0a90 	vmov	r0, s15
 8001842:	f7fe fe81 	bl	8000548 <__aeabi_f2d>
 8001846:	4604      	mov	r4, r0
 8001848:	460d      	mov	r5, r1
 800184a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800184e:	ee07 3a90 	vmov	s15, r3
 8001852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001856:	ee17 0a90 	vmov	r0, s15
 800185a:	f7fe fe75 	bl	8000548 <__aeabi_f2d>
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b68      	ldr	r3, [pc, #416]	; (8001a04 <MPU_SelfTest+0x614>)
 8001864:	f7fe fd10 	bl	8000288 <__aeabi_dsub>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	ec43 2b17 	vmov	d7, r2, r3
 8001870:	eeb0 1a47 	vmov.f32	s2, s14
 8001874:	eef0 1a67 	vmov.f32	s3, s15
 8001878:	ed9f 0b5f 	vldr	d0, [pc, #380]	; 80019f8 <MPU_SelfTest+0x608>
 800187c:	f010 fb5e 	bl	8011f3c <pow>
 8001880:	ec53 2b10 	vmov	r2, r3, d0
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f7fe feb6 	bl	80005f8 <__aeabi_dmul>
 800188c:	4603      	mov	r3, r0
 800188e:	460c      	mov	r4, r1
 8001890:	4618      	mov	r0, r3
 8001892:	4621      	mov	r1, r4
 8001894:	f7ff f9a8 	bl	8000be8 <__aeabi_d2f>
 8001898:	4603      	mov	r3, r0
 800189a:	617b      	str	r3, [r7, #20]
	factoryTrim[3] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[3] - 1.0) )); // FT[Xg] factory trim calculation
 800189c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80018a0:	f640 223c 	movw	r2, #2620	; 0xa3c
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b0:	ee17 0a90 	vmov	r0, s15
 80018b4:	f7fe fe48 	bl	8000548 <__aeabi_f2d>
 80018b8:	4604      	mov	r4, r0
 80018ba:	460d      	mov	r5, r1
 80018bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c8:	ee17 0a90 	vmov	r0, s15
 80018cc:	f7fe fe3c 	bl	8000548 <__aeabi_f2d>
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <MPU_SelfTest+0x614>)
 80018d6:	f7fe fcd7 	bl	8000288 <__aeabi_dsub>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	ec43 2b17 	vmov	d7, r2, r3
 80018e2:	eeb0 1a47 	vmov.f32	s2, s14
 80018e6:	eef0 1a67 	vmov.f32	s3, s15
 80018ea:	ed9f 0b43 	vldr	d0, [pc, #268]	; 80019f8 <MPU_SelfTest+0x608>
 80018ee:	f010 fb25 	bl	8011f3c <pow>
 80018f2:	ec53 2b10 	vmov	r2, r3, d0
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f7fe fe7d 	bl	80005f8 <__aeabi_dmul>
 80018fe:	4603      	mov	r3, r0
 8001900:	460c      	mov	r4, r1
 8001902:	4618      	mov	r0, r3
 8001904:	4621      	mov	r1, r4
 8001906:	f7ff f96f 	bl	8000be8 <__aeabi_d2f>
 800190a:	4603      	mov	r3, r0
 800190c:	61bb      	str	r3, [r7, #24]
	factoryTrim[4] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[4] - 1.0) )); // FT[Yg] factory trim calculation
 800190e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001912:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001922:	ee17 0a90 	vmov	r0, s15
 8001926:	f7fe fe0f 	bl	8000548 <__aeabi_f2d>
 800192a:	4604      	mov	r4, r0
 800192c:	460d      	mov	r5, r1
 800192e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800193a:	ee17 0a90 	vmov	r0, s15
 800193e:	f7fe fe03 	bl	8000548 <__aeabi_f2d>
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b2f      	ldr	r3, [pc, #188]	; (8001a04 <MPU_SelfTest+0x614>)
 8001948:	f7fe fc9e 	bl	8000288 <__aeabi_dsub>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	ec43 2b17 	vmov	d7, r2, r3
 8001954:	eeb0 1a47 	vmov.f32	s2, s14
 8001958:	eef0 1a67 	vmov.f32	s3, s15
 800195c:	ed9f 0b26 	vldr	d0, [pc, #152]	; 80019f8 <MPU_SelfTest+0x608>
 8001960:	f010 faec 	bl	8011f3c <pow>
 8001964:	ec53 2b10 	vmov	r2, r3, d0
 8001968:	4620      	mov	r0, r4
 800196a:	4629      	mov	r1, r5
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4603      	mov	r3, r0
 8001972:	460c      	mov	r4, r1
 8001974:	4618      	mov	r0, r3
 8001976:	4621      	mov	r1, r4
 8001978:	f7ff f936 	bl	8000be8 <__aeabi_d2f>
 800197c:	4603      	mov	r3, r0
 800197e:	61fb      	str	r3, [r7, #28]
	factoryTrim[5] = (float)(2620/1<<FS)*(pow( 1.01 , ((float)selfTest[5] - 1.0) )); // FT[Zg] factory trim calculation
 8001980:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001984:	f640 223c 	movw	r2, #2620	; 0xa3c
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001994:	ee17 0a90 	vmov	r0, s15
 8001998:	f7fe fdd6 	bl	8000548 <__aeabi_f2d>
 800199c:	4604      	mov	r4, r0
 800199e:	460d      	mov	r5, r1
 80019a0:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80019a4:	ee07 3a90 	vmov	s15, r3
 80019a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ac:	ee17 0a90 	vmov	r0, s15
 80019b0:	f7fe fdca 	bl	8000548 <__aeabi_f2d>
 80019b4:	f04f 0200 	mov.w	r2, #0
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <MPU_SelfTest+0x614>)
 80019ba:	f7fe fc65 	bl	8000288 <__aeabi_dsub>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	ec43 2b17 	vmov	d7, r2, r3
 80019c6:	eeb0 1a47 	vmov.f32	s2, s14
 80019ca:	eef0 1a67 	vmov.f32	s3, s15
 80019ce:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 80019f8 <MPU_SelfTest+0x608>
 80019d2:	f010 fab3 	bl	8011f3c <pow>
 80019d6:	ec53 2b10 	vmov	r2, r3, d0
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fe0b 	bl	80005f8 <__aeabi_dmul>
 80019e2:	4603      	mov	r3, r0
 80019e4:	460c      	mov	r4, r1
 80019e6:	4618      	mov	r0, r3
 80019e8:	4621      	mov	r1, r4
 80019ea:	f7ff f8fd 	bl	8000be8 <__aeabi_d2f>
 80019ee:	4603      	mov	r3, r0
 80019f0:	623b      	str	r3, [r7, #32]

	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	667b      	str	r3, [r7, #100]	; 0x64
 80019f6:	e096      	b.n	8001b26 <MPU_SelfTest+0x736>
 80019f8:	c28f5c29 	.word	0xc28f5c29
 80019fc:	3ff028f5 	.word	0x3ff028f5
 8001a00:	51eb851f 	.word	0x51eb851f
 8001a04:	3ff00000 	.word	0x3ff00000
	{
		destination[i] = 100.0*((float)(aSTAvg[i] - aAvg[i]))/factoryTrim[i] - 100.; // Report percent differences
 8001a08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001a10:	4413      	add	r3, r2
 8001a12:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8001a16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001a1e:	440b      	add	r3, r1
 8001a20:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2e:	ee17 0a90 	vmov	r0, s15
 8001a32:	f7fe fd89 	bl	8000548 <__aeabi_f2d>
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <MPU_SelfTest+0x748>)
 8001a3c:	f7fe fddc 	bl	80005f8 <__aeabi_dmul>
 8001a40:	4603      	mov	r3, r0
 8001a42:	460c      	mov	r4, r1
 8001a44:	4625      	mov	r5, r4
 8001a46:	461c      	mov	r4, r3
 8001a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001a50:	4413      	add	r3, r2
 8001a52:	3b6c      	subs	r3, #108	; 0x6c
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd76 	bl	8000548 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4620      	mov	r0, r4
 8001a62:	4629      	mov	r1, r5
 8001a64:	f7fe fef2 	bl	800084c <__aeabi_ddiv>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	460c      	mov	r4, r1
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	4621      	mov	r1, r4
 8001a70:	f04f 0200 	mov.w	r2, #0
 8001a74:	4b30      	ldr	r3, [pc, #192]	; (8001b38 <MPU_SelfTest+0x748>)
 8001a76:	f7fe fc07 	bl	8000288 <__aeabi_dsub>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	460c      	mov	r4, r1
 8001a7e:	4618      	mov	r0, r3
 8001a80:	4621      	mov	r1, r4
 8001a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	18d4      	adds	r4, r2, r3
 8001a8a:	f7ff f8ad 	bl	8000be8 <__aeabi_d2f>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6023      	str	r3, [r4, #0]
		destination[i+3] = 100.0*((float)(gSTAvg[i] - gAvg[i]))/factoryTrim[i+3] - 100.; // Report percent differences
 8001a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8001aa8:	440b      	add	r3, r1
 8001aaa:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	ee07 3a90 	vmov	s15, r3
 8001ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab8:	ee17 0a90 	vmov	r0, s15
 8001abc:	f7fe fd44 	bl	8000548 <__aeabi_f2d>
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <MPU_SelfTest+0x748>)
 8001ac6:	f7fe fd97 	bl	80005f8 <__aeabi_dmul>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	4625      	mov	r5, r4
 8001ad0:	461c      	mov	r4, r3
 8001ad2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001ad4:	3303      	adds	r3, #3
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001adc:	4413      	add	r3, r2
 8001ade:	3b6c      	subs	r3, #108	; 0x6c
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd30 	bl	8000548 <__aeabi_f2d>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4620      	mov	r0, r4
 8001aee:	4629      	mov	r1, r5
 8001af0:	f7fe feac 	bl	800084c <__aeabi_ddiv>
 8001af4:	4603      	mov	r3, r0
 8001af6:	460c      	mov	r4, r1
 8001af8:	4618      	mov	r0, r3
 8001afa:	4621      	mov	r1, r4
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <MPU_SelfTest+0x748>)
 8001b02:	f7fe fbc1 	bl	8000288 <__aeabi_dsub>
 8001b06:	4603      	mov	r3, r0
 8001b08:	460c      	mov	r4, r1
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b10:	3303      	adds	r3, #3
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	18d4      	adds	r4, r2, r3
 8001b18:	f7ff f866 	bl	8000be8 <__aeabi_d2f>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 3; i++)
 8001b20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b22:	3301      	adds	r3, #1
 8001b24:	667b      	str	r3, [r7, #100]	; 0x64
 8001b26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	f77f af6d 	ble.w	8001a08 <MPU_SelfTest+0x618>
	}
}
 8001b2e:	bf00      	nop
 8001b30:	3778      	adds	r7, #120	; 0x78
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bdb0      	pop	{r4, r5, r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40590000 	.word	0x40590000

08001b3c <print>:
static void loop(void);

static uint32_t printLen = 0;
static char printBuffer[512];
static inline void print(char* str)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001b44:	2201      	movs	r2, #1
 8001b46:	2140      	movs	r1, #64	; 0x40
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <print+0x40>)
 8001b4a:	f002 fd1f 	bl	800458c <HAL_GPIO_WritePin>

	while (CDC_Transmit_FS((uint8_t*) str, strlen(str)) == USBD_BUSY);
 8001b4e:	bf00      	nop
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7fe fb3d 	bl	80001d0 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f00c f84d 	bl	800dbfc <CDC_Transmit_FS>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d0f3      	beq.n	8001b50 <print+0x14>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2140      	movs	r1, #64	; 0x40
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <print+0x40>)
 8001b6e:	f002 fd0d 	bl	800458c <HAL_GPIO_WritePin>
	#endif
};
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40020800 	.word	0x40020800

08001b80 <println>:
static inline void println(char* str)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001b88:	2201      	movs	r2, #1
 8001b8a:	2140      	movs	r1, #64	; 0x40
 8001b8c:	4820      	ldr	r0, [pc, #128]	; (8001c10 <println+0x90>)
 8001b8e:	f002 fcfd 	bl	800458c <HAL_GPIO_WritePin>

	printLen = strlen(str);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fb1c 	bl	80001d0 <strlen>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b1e      	ldr	r3, [pc, #120]	; (8001c14 <println+0x94>)
 8001b9c:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	73fb      	strb	r3, [r7, #15]
 8001ba2:	e009      	b.n	8001bb8 <println+0x38>
	{
		printBuffer[i] = str[i];
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	441a      	add	r2, r3
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	7811      	ldrb	r1, [r2, #0]
 8001bae:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <println+0x98>)
 8001bb0:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	7bfa      	ldrb	r2, [r7, #15]
 8001bba:	4b16      	ldr	r3, [pc, #88]	; (8001c14 <println+0x94>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3f0      	bcc.n	8001ba4 <println+0x24>
	}
	printBuffer[printLen] = '\n';
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <println+0x94>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a14      	ldr	r2, [pc, #80]	; (8001c18 <println+0x98>)
 8001bc8:	210a      	movs	r1, #10
 8001bca:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 1] = '\r';
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <println+0x94>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4a11      	ldr	r2, [pc, #68]	; (8001c18 <println+0x98>)
 8001bd4:	210d      	movs	r1, #13
 8001bd6:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen + 2] = '\0';
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <println+0x94>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	3302      	adds	r3, #2
 8001bde:	4a0e      	ldr	r2, [pc, #56]	; (8001c18 <println+0x98>)
 8001be0:	2100      	movs	r1, #0
 8001be2:	54d1      	strb	r1, [r2, r3]
 	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 3) == USBD_BUSY);
 8001be4:	bf00      	nop
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <println+0x94>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3303      	adds	r3, #3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4809      	ldr	r0, [pc, #36]	; (8001c18 <println+0x98>)
 8001bf4:	f00c f802 	bl	800dbfc <CDC_Transmit_FS>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d0f3      	beq.n	8001be6 <println+0x66>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2140      	movs	r1, #64	; 0x40
 8001c02:	4803      	ldr	r0, [pc, #12]	; (8001c10 <println+0x90>)
 8001c04:	f002 fcc2 	bl	800458c <HAL_GPIO_WritePin>
	#endif
};
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020800 	.word	0x40020800
 8001c14:	2000036c 	.word	0x2000036c
 8001c18:	20000370 	.word	0x20000370

08001c1c <printv>:
static inline void printv(char* str, uint32_t len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	2140      	movs	r1, #64	; 0x40
 8001c2a:	480b      	ldr	r0, [pc, #44]	; (8001c58 <printv+0x3c>)
 8001c2c:	f002 fcae 	bl	800458c <HAL_GPIO_WritePin>

	while (CDC_Transmit_FS((uint8_t*) str, len) == USBD_BUSY);
 8001c30:	bf00      	nop
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	4619      	mov	r1, r3
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f00b ffdf 	bl	800dbfc <CDC_Transmit_FS>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d0f6      	beq.n	8001c32 <printv+0x16>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	2140      	movs	r1, #64	; 0x40
 8001c48:	4803      	ldr	r0, [pc, #12]	; (8001c58 <printv+0x3c>)
 8001c4a:	f002 fc9f 	bl	800458c <HAL_GPIO_WritePin>
	#endif
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40020800 	.word	0x40020800

08001c5c <print_int>:
static inline void print_int(int number)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2140      	movs	r1, #64	; 0x40
 8001c68:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <print_int+0x4c>)
 8001c6a:	f002 fc8f 	bl	800458c <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%d", number);
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <print_int+0x50>)
 8001c72:	480f      	ldr	r0, [pc, #60]	; (8001cb0 <print_int+0x54>)
 8001c74:	f00d fb3a 	bl	800f2ec <siprintf>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <print_int+0x58>)
 8001c7e:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 8001c80:	bf00      	nop
 8001c82:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <print_int+0x58>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4809      	ldr	r0, [pc, #36]	; (8001cb0 <print_int+0x54>)
 8001c8c:	f00b ffb6 	bl	800dbfc <CDC_Transmit_FS>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d0f5      	beq.n	8001c82 <print_int+0x26>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2140      	movs	r1, #64	; 0x40
 8001c9a:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <print_int+0x4c>)
 8001c9c:	f002 fc76 	bl	800458c <HAL_GPIO_WritePin>
	#endif
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40020800 	.word	0x40020800
 8001cac:	08013030 	.word	0x08013030
 8001cb0:	20000370 	.word	0x20000370
 8001cb4:	2000036c 	.word	0x2000036c

08001cb8 <print_float>:
static inline void print_float(float number)
{
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	ed87 0a01 	vstr	s0, [r7, #4]
	#if PRINT_OUT
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2140      	movs	r1, #64	; 0x40
 8001cc6:	4813      	ldr	r0, [pc, #76]	; (8001d14 <print_float+0x5c>)
 8001cc8:	f002 fc60 	bl	800458c <HAL_GPIO_WritePin>

	printLen = sprintf(printBuffer, "%f", number);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7fe fc3b 	bl	8000548 <__aeabi_f2d>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	460c      	mov	r4, r1
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4623      	mov	r3, r4
 8001cda:	490f      	ldr	r1, [pc, #60]	; (8001d18 <print_float+0x60>)
 8001cdc:	480f      	ldr	r0, [pc, #60]	; (8001d1c <print_float+0x64>)
 8001cde:	f00d fb05 	bl	800f2ec <siprintf>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <print_float+0x68>)
 8001ce8:	601a      	str	r2, [r3, #0]
	while (CDC_Transmit_FS((uint8_t*) printBuffer, printLen) == USBD_BUSY);
 8001cea:	bf00      	nop
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <print_float+0x68>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4809      	ldr	r0, [pc, #36]	; (8001d1c <print_float+0x64>)
 8001cf6:	f00b ff81 	bl	800dbfc <CDC_Transmit_FS>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d0f5      	beq.n	8001cec <print_float+0x34>

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2140      	movs	r1, #64	; 0x40
 8001d04:	4803      	ldr	r0, [pc, #12]	; (8001d14 <print_float+0x5c>)
 8001d06:	f002 fc41 	bl	800458c <HAL_GPIO_WritePin>
	#endif
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd90      	pop	{r4, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40020800 	.word	0x40020800
 8001d18:	08013034 	.word	0x08013034
 8001d1c:	20000370 	.word	0x20000370
 8001d20:	2000036c 	.word	0x2000036c

08001d24 <millis>:
#include "main.h"
#include "run.h"

// TIM5 has 32-bit counter -> takes longer to overflow
//static inline uint32_t micros(void) { return (uint32_t)TIM1->CNT; }
static inline uint32_t millis(void) { return (uint32_t)(TIM1->CNT) / 10; }
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <millis+0x1c>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <millis+0x20>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	08db      	lsrs	r3, r3, #3
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40010000 	.word	0x40010000
 8001d44:	cccccccd 	.word	0xcccccccd

08001d48 <setup>:
uint32_t timenow;

Servo ser1;

static void setup(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	setupPins();
 8001d4c:	f000 f85c 	bl	8001e08 <setupPins>

	//while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET);

	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8001d50:	2201      	movs	r2, #1
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	481f      	ldr	r0, [pc, #124]	; (8001dd4 <setup+0x8c>)
 8001d56:	f002 fc19 	bl	800458c <HAL_GPIO_WritePin>
	println("Hello world!!");	HAL_Delay(500);
 8001d5a:	481f      	ldr	r0, [pc, #124]	; (8001dd8 <setup+0x90>)
 8001d5c:	f7ff ff10 	bl	8001b80 <println>
 8001d60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d64:	f001 fd90 	bl	8003888 <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2140      	movs	r1, #64	; 0x40
 8001d6c:	4819      	ldr	r0, [pc, #100]	; (8001dd4 <setup+0x8c>)
 8001d6e:	f002 fc0d 	bl	800458c <HAL_GPIO_WritePin>

	//if (bmp280_begin()) println("[BMP] joined the server!");
	//if (sd_begin()) println("[SD] joined the server!");
	//if (radio_begin()) println("[LoRa] joined the server!");
	//enableMotors(); println("[MOT] joined the server!");
	if (mpu_begin()) println("[MPU] joined the server!");
 8001d72:	f000 fb3d 	bl	80023f0 <mpu_begin>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <setup+0x3a>
 8001d7c:	4817      	ldr	r0, [pc, #92]	; (8001ddc <setup+0x94>)
 8001d7e:	f7ff feff 	bl	8001b80 <println>

	printLen = sprintf(printBuffer, "Time: %lu ms\r\n", millis());
 8001d82:	f7ff ffcf 	bl	8001d24 <millis>
 8001d86:	4603      	mov	r3, r0
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4915      	ldr	r1, [pc, #84]	; (8001de0 <setup+0x98>)
 8001d8c:	4815      	ldr	r0, [pc, #84]	; (8001de4 <setup+0x9c>)
 8001d8e:	f00d faad 	bl	800f2ec <siprintf>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <setup+0xa0>)
 8001d98:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 8001d9a:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <setup+0xa0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4810      	ldr	r0, [pc, #64]	; (8001de4 <setup+0x9c>)
 8001da2:	f7ff ff3b 	bl	8001c1c <printv>
	HAL_Delay(100);
 8001da6:	2064      	movs	r0, #100	; 0x64
 8001da8:	f001 fd6e 	bl	8003888 <HAL_Delay>
	printLen = sprintf(printBuffer, "Time: %lu ms\r\n", millis());
 8001dac:	f7ff ffba 	bl	8001d24 <millis>
 8001db0:	4603      	mov	r3, r0
 8001db2:	461a      	mov	r2, r3
 8001db4:	490a      	ldr	r1, [pc, #40]	; (8001de0 <setup+0x98>)
 8001db6:	480b      	ldr	r0, [pc, #44]	; (8001de4 <setup+0x9c>)
 8001db8:	f00d fa98 	bl	800f2ec <siprintf>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <setup+0xa0>)
 8001dc2:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <setup+0xa0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <setup+0x9c>)
 8001dcc:	f7ff ff26 	bl	8001c1c <printv>

	//gps_begin();

	//ser1.ccr = &(TIM3->CCR3);
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40020800 	.word	0x40020800
 8001dd8:	08013038 	.word	0x08013038
 8001ddc:	08013048 	.word	0x08013048
 8001de0:	08013064 	.word	0x08013064
 8001de4:	20000370 	.word	0x20000370
 8001de8:	2000036c 	.word	0x2000036c

08001dec <loop>:

static void loop(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	mpu_printData();
 8001df0:	f000 f802 	bl	8001df8 <mpu_printData>
	HAL_Delay(1000);
	TIM3->CCR3 = 1000;
	println("1000");
	HAL_Delay(1000);
*/
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <mpu_printData>:
			print("\r\nSatellites: "); print_int((int)gps.satellites);
		}
	}
}
static void mpu_printData(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <setupPins>:
	GPS_sendCommand(&gps, PMTK_Q_RELEASE);
}


static void setupPins(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2180      	movs	r1, #128	; 0x80
 8001e10:	481c      	ldr	r0, [pc, #112]	; (8001e84 <setupPins+0x7c>)
 8001e12:	f002 fbbb 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2140      	movs	r1, #64	; 0x40
 8001e1a:	481a      	ldr	r0, [pc, #104]	; (8001e84 <setupPins+0x7c>)
 8001e1c:	f002 fbb6 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8001e20:	2200      	movs	r2, #0
 8001e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e26:	4818      	ldr	r0, [pc, #96]	; (8001e88 <setupPins+0x80>)
 8001e28:	f002 fbb0 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e32:	4815      	ldr	r0, [pc, #84]	; (8001e88 <setupPins+0x80>)
 8001e34:	f002 fbaa 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_RESET);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	4813      	ldr	r0, [pc, #76]	; (8001e8c <setupPins+0x84>)
 8001e3e:	f002 fba5 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_RESET);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2104      	movs	r1, #4
 8001e46:	4811      	ldr	r0, [pc, #68]	; (8001e8c <setupPins+0x84>)
 8001e48:	f002 fba0 	bl	800458c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P1_GPIO_Port, P1_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2101      	movs	r1, #1
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <setupPins+0x7c>)
 8001e52:	f002 fb9b 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P2_GPIO_Port, P2_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2104      	movs	r1, #4
 8001e5a:	480a      	ldr	r0, [pc, #40]	; (8001e84 <setupPins+0x7c>)
 8001e5c:	f002 fb96 	bl	800458c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P3_GPIO_Port, P3_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P4_GPIO_Port, P4_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2102      	movs	r1, #2
 8001e64:	4807      	ldr	r0, [pc, #28]	; (8001e84 <setupPins+0x7c>)
 8001e66:	f002 fb91 	bl	800458c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(P5_GPIO_Port, P5_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2108      	movs	r1, #8
 8001e6e:	4805      	ldr	r0, [pc, #20]	; (8001e84 <setupPins+0x7c>)
 8001e70:	f002 fb8c 	bl	800458c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(P6_GPIO_Port, P6_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8001e74:	2200      	movs	r2, #0
 8001e76:	2110      	movs	r1, #16
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <setupPins+0x84>)
 8001e7a:	f002 fb87 	bl	800458c <HAL_GPIO_WritePin>
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020800 	.word	0x40020800
 8001e88:	40020400 	.word	0x40020400
 8001e8c:	40020000 	.word	0x40020000

08001e90 <accelgyrocalMPU9250>:

static void accelgyrocalMPU9250(float * dest1, float * dest2)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b098      	sub	sp, #96	; 0x60
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
  uint16_t ii, packet_count, fifo_count;
  int32_t gyro_bias[3]  = {0, 0, 0}, accel_bias[3] = {0, 0, 0};
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eaa:	2300      	movs	r3, #0
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
 8001eae:	2300      	movs	r3, #0
 8001eb0:	637b      	str	r3, [r7, #52]	; 0x34

 // reset device
  MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	216b      	movs	r1, #107	; 0x6b
 8001eb6:	20d2      	movs	r0, #210	; 0xd2
 8001eb8:	f7ff f866 	bl	8000f88 <MPU_writeByte>
  HAL_Delay(100);
 8001ebc:	2064      	movs	r0, #100	; 0x64
 8001ebe:	f001 fce3 	bl	8003888 <HAL_Delay>

 // get stable time source; Auto select clock source to be PLL gyroscope reference if ready
 // else use the internal oscillator, bits 2:0 = 001
  MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	216b      	movs	r1, #107	; 0x6b
 8001ec6:	20d2      	movs	r0, #210	; 0xd2
 8001ec8:	f7ff f85e 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	216c      	movs	r1, #108	; 0x6c
 8001ed0:	20d2      	movs	r0, #210	; 0xd2
 8001ed2:	f7ff f859 	bl	8000f88 <MPU_writeByte>
  HAL_Delay(200);
 8001ed6:	20c8      	movs	r0, #200	; 0xc8
 8001ed8:	f001 fcd6 	bl	8003888 <HAL_Delay>

// Configure device for bias calculation
  MPU_writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
 8001edc:	2200      	movs	r2, #0
 8001ede:	2138      	movs	r1, #56	; 0x38
 8001ee0:	20d2      	movs	r0, #210	; 0xd2
 8001ee2:	f7ff f851 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2123      	movs	r1, #35	; 0x23
 8001eea:	20d2      	movs	r0, #210	; 0xd2
 8001eec:	f7ff f84c 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	216b      	movs	r1, #107	; 0x6b
 8001ef4:	20d2      	movs	r0, #210	; 0xd2
 8001ef6:	f7ff f847 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
 8001efa:	2200      	movs	r2, #0
 8001efc:	2124      	movs	r1, #36	; 0x24
 8001efe:	20d2      	movs	r0, #210	; 0xd2
 8001f00:	f7ff f842 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
 8001f04:	2200      	movs	r2, #0
 8001f06:	216a      	movs	r1, #106	; 0x6a
 8001f08:	20d2      	movs	r0, #210	; 0xd2
 8001f0a:	f7ff f83d 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
 8001f0e:	220c      	movs	r2, #12
 8001f10:	216a      	movs	r1, #106	; 0x6a
 8001f12:	20d2      	movs	r0, #210	; 0xd2
 8001f14:	f7ff f838 	bl	8000f88 <MPU_writeByte>
  HAL_Delay(15);
 8001f18:	200f      	movs	r0, #15
 8001f1a:	f001 fcb5 	bl	8003888 <HAL_Delay>

// Configure MPU6050 gyro and accelerometer for bias calculation
  MPU_writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
 8001f1e:	2201      	movs	r2, #1
 8001f20:	211a      	movs	r1, #26
 8001f22:	20d2      	movs	r0, #210	; 0xd2
 8001f24:	f7ff f830 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2119      	movs	r1, #25
 8001f2c:	20d2      	movs	r0, #210	; 0xd2
 8001f2e:	f7ff f82b 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
 8001f32:	2200      	movs	r2, #0
 8001f34:	211b      	movs	r1, #27
 8001f36:	20d2      	movs	r0, #210	; 0xd2
 8001f38:	f7ff f826 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	211c      	movs	r1, #28
 8001f40:	20d2      	movs	r0, #210	; 0xd2
 8001f42:	f7ff f821 	bl	8000f88 <MPU_writeByte>

  uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
 8001f46:	2383      	movs	r3, #131	; 0x83
 8001f48:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
  uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g
 8001f4c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f50:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

// Configure FIFO to capture accelerometer and gyro data for bias calculation
  MPU_writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	216a      	movs	r1, #106	; 0x6a
 8001f58:	20d2      	movs	r0, #210	; 0xd2
 8001f5a:	f7ff f815 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
 8001f5e:	2278      	movs	r2, #120	; 0x78
 8001f60:	2123      	movs	r1, #35	; 0x23
 8001f62:	20d2      	movs	r0, #210	; 0xd2
 8001f64:	f7ff f810 	bl	8000f88 <MPU_writeByte>
  HAL_Delay(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
 8001f68:	2028      	movs	r0, #40	; 0x28
 8001f6a:	f001 fc8d 	bl	8003888 <HAL_Delay>

// At end of sample accumulation, turn off FIFO sensor read
  MPU_writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2123      	movs	r1, #35	; 0x23
 8001f72:	20d2      	movs	r0, #210	; 0xd2
 8001f74:	f7ff f808 	bl	8000f88 <MPU_writeByte>
  MPU_readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data[0]); // read FIFO sample count
 8001f78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	2172      	movs	r1, #114	; 0x72
 8001f80:	20d2      	movs	r0, #210	; 0xd2
 8001f82:	f7ff f850 	bl	8001026 <MPU_readBytes>
  fifo_count = ((uint16_t)data[0] << 8) | data[1];
 8001f86:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001f8a:	021b      	lsls	r3, r3, #8
 8001f8c:	b21a      	sxth	r2, r3
 8001f8e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001f92:	b21b      	sxth	r3, r3
 8001f94:	4313      	orrs	r3, r2
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
 8001f9c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001fa0:	4ac2      	ldr	r2, [pc, #776]	; (80022ac <accelgyrocalMPU9250+0x41c>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	08db      	lsrs	r3, r3, #3
 8001fa8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

  for (ii = 0; ii < packet_count; ii++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001fb2:	e071      	b.n	8002098 <accelgyrocalMPU9250+0x208>
    int16_t accel_temp[3] = {0, 0, 0}, gyro_temp[3] = {0, 0, 0};
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	82bb      	strh	r3, [r7, #20]
 8001fb8:	2300      	movs	r3, #0
 8001fba:	82fb      	strh	r3, [r7, #22]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	833b      	strh	r3, [r7, #24]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	81bb      	strh	r3, [r7, #12]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	81fb      	strh	r3, [r7, #14]
 8001fc8:	2300      	movs	r3, #0
 8001fca:	823b      	strh	r3, [r7, #16]
    MPU_readBytes(MPU9250_ADDRESS, FIFO_R_W, 12, &data[0]); // read data for averaging
 8001fcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fd0:	220c      	movs	r2, #12
 8001fd2:	2174      	movs	r1, #116	; 0x74
 8001fd4:	20d2      	movs	r0, #210	; 0xd2
 8001fd6:	f7ff f826 	bl	8001026 <MPU_readBytes>
    accel_temp[0] = (int16_t) (((int16_t)data[0] << 8) | data[1]  ) ;  // Form signed 16-bit integer for each sample in FIFO
 8001fda:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	b21b      	sxth	r3, r3
 8001fec:	82bb      	strh	r3, [r7, #20]
    accel_temp[1] = (int16_t) (((int16_t)data[2] << 8) | data[3]  ) ;
 8001fee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001ff2:	021b      	lsls	r3, r3, #8
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	b21b      	sxth	r3, r3
 8002000:	82fb      	strh	r3, [r7, #22]
    accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
 8002002:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	b21a      	sxth	r2, r3
 800200a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800200e:	b21b      	sxth	r3, r3
 8002010:	4313      	orrs	r3, r2
 8002012:	b21b      	sxth	r3, r3
 8002014:	833b      	strh	r3, [r7, #24]
    gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
 8002016:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	b21a      	sxth	r2, r3
 800201e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002022:	b21b      	sxth	r3, r3
 8002024:	4313      	orrs	r3, r2
 8002026:	b21b      	sxth	r3, r3
 8002028:	81bb      	strh	r3, [r7, #12]
    gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
 800202a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21a      	sxth	r2, r3
 8002032:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002036:	b21b      	sxth	r3, r3
 8002038:	4313      	orrs	r3, r2
 800203a:	b21b      	sxth	r3, r3
 800203c:	81fb      	strh	r3, [r7, #14]
    gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
 800203e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	b21a      	sxth	r2, r3
 8002046:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800204a:	b21b      	sxth	r3, r3
 800204c:	4313      	orrs	r3, r2
 800204e:	b21b      	sxth	r3, r3
 8002050:	823b      	strh	r3, [r7, #16]

    accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
 8002052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002054:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002058:	4413      	add	r3, r2
 800205a:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] += (int32_t) accel_temp[1];
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002062:	4413      	add	r3, r2
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] += (int32_t) accel_temp[2];
 8002066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002068:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800206c:	4413      	add	r3, r2
 800206e:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  += (int32_t) gyro_temp[0];
 8002070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002072:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  += (int32_t) gyro_temp[1];
 800207a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002080:	4413      	add	r3, r2
 8002082:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  += (int32_t) gyro_temp[2];
 8002084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002086:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800208a:	4413      	add	r3, r2
 800208c:	643b      	str	r3, [r7, #64]	; 0x40
  for (ii = 0; ii < packet_count; ii++) {
 800208e:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002092:	3301      	adds	r3, #1
 8002094:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002098:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800209c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d387      	bcc.n	8001fb4 <accelgyrocalMPU9250+0x124>

}
    accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
 80020a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80020ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    accel_bias[1] /= (int32_t) packet_count;
 80020b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020b6:	fb92 f3f3 	sdiv	r3, r2, r3
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
    accel_bias[2] /= (int32_t) packet_count;
 80020bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80020c6:	637b      	str	r3, [r7, #52]	; 0x34
    gyro_bias[0]  /= (int32_t) packet_count;
 80020c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020ca:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
    gyro_bias[1]  /= (int32_t) packet_count;
 80020d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020da:	fb92 f3f3 	sdiv	r3, r2, r3
 80020de:	63fb      	str	r3, [r7, #60]	; 0x3c
    gyro_bias[2]  /= (int32_t) packet_count;
 80020e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80020e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80020e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80020ea:	643b      	str	r3, [r7, #64]	; 0x40

  if(accel_bias[2] > 0L) {accel_bias[2] -= (int32_t) accelsensitivity;}  // Remove gravity from the z-axis accelerometer bias calculation
 80020ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	dd05      	ble.n	80020fe <accelgyrocalMPU9250+0x26e>
 80020f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020f4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	e004      	b.n	8002108 <accelgyrocalMPU9250+0x278>
  else {accel_bias[2] += (int32_t) accelsensitivity;}
 80020fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002100:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002104:	4413      	add	r3, r2
 8002106:	637b      	str	r3, [r7, #52]	; 0x34

// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
  data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
 8002108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210a:	425b      	negs	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	da00      	bge.n	8002112 <accelgyrocalMPU9250+0x282>
 8002110:	3303      	adds	r3, #3
 8002112:	109b      	asrs	r3, r3, #2
 8002114:	121b      	asrs	r3, r3, #8
 8002116:	b2db      	uxtb	r3, r3
 8002118:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
 800211c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800211e:	425b      	negs	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	da00      	bge.n	8002126 <accelgyrocalMPU9250+0x296>
 8002124:	3303      	adds	r3, #3
 8002126:	109b      	asrs	r3, r3, #2
 8002128:	b2db      	uxtb	r3, r3
 800212a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
 800212e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002130:	425b      	negs	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	da00      	bge.n	8002138 <accelgyrocalMPU9250+0x2a8>
 8002136:	3303      	adds	r3, #3
 8002138:	109b      	asrs	r3, r3, #2
 800213a:	121b      	asrs	r3, r3, #8
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (-gyro_bias[1]/4)       & 0xFF;
 8002142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002144:	425b      	negs	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	da00      	bge.n	800214c <accelgyrocalMPU9250+0x2bc>
 800214a:	3303      	adds	r3, #3
 800214c:	109b      	asrs	r3, r3, #2
 800214e:	b2db      	uxtb	r3, r3
 8002150:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
 8002154:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002156:	425b      	negs	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	da00      	bge.n	800215e <accelgyrocalMPU9250+0x2ce>
 800215c:	3303      	adds	r3, #3
 800215e:	109b      	asrs	r3, r3, #2
 8002160:	121b      	asrs	r3, r3, #8
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (-gyro_bias[2]/4)       & 0xFF;
 8002168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800216a:	425b      	negs	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	da00      	bge.n	8002172 <accelgyrocalMPU9250+0x2e2>
 8002170:	3303      	adds	r3, #3
 8002172:	109b      	asrs	r3, r3, #2
 8002174:	b2db      	uxtb	r3, r3
 8002176:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

// Push gyro biases to hardware registers
  MPU_writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
 800217a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800217e:	461a      	mov	r2, r3
 8002180:	2113      	movs	r1, #19
 8002182:	20d2      	movs	r0, #210	; 0xd2
 8002184:	f7fe ff00 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
 8002188:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800218c:	461a      	mov	r2, r3
 800218e:	2114      	movs	r1, #20
 8002190:	20d2      	movs	r0, #210	; 0xd2
 8002192:	f7fe fef9 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
 8002196:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800219a:	461a      	mov	r2, r3
 800219c:	2115      	movs	r1, #21
 800219e:	20d2      	movs	r0, #210	; 0xd2
 80021a0:	f7fe fef2 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
 80021a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021a8:	461a      	mov	r2, r3
 80021aa:	2116      	movs	r1, #22
 80021ac:	20d2      	movs	r0, #210	; 0xd2
 80021ae:	f7fe feeb 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
 80021b2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80021b6:	461a      	mov	r2, r3
 80021b8:	2117      	movs	r1, #23
 80021ba:	20d2      	movs	r0, #210	; 0xd2
 80021bc:	f7fe fee4 	bl	8000f88 <MPU_writeByte>
  MPU_writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
 80021c0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80021c4:	461a      	mov	r2, r3
 80021c6:	2118      	movs	r1, #24
 80021c8:	20d2      	movs	r0, #210	; 0xd2
 80021ca:	f7fe fedd 	bl	8000f88 <MPU_writeByte>

// Output scaled gyro biases for display in the main program
  dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
 80021ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d0:	ee07 3a90 	vmov	s15, r3
 80021d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021d8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80021dc:	ee07 3a90 	vmov	s15, r3
 80021e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	edc3 7a00 	vstr	s15, [r3]
  dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
 80021ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021f0:	ee07 3a90 	vmov	s15, r3
 80021f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3304      	adds	r3, #4
 8002208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800220c:	edc3 7a00 	vstr	s15, [r3]
  dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
 8002210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800221a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3308      	adds	r3, #8
 800222a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222e:	edc3 7a00 	vstr	s15, [r3]
// factory trim values which must be added to the calculated accelerometer biases; on boot up these registers will hold
// non-zero values. In addition, bit 0 of the lower byte must be preserved since it is used for temperature
// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
// the accelerometer biases calculated above must be divided by 8.

  int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	; 0x24
 800223a:	2300      	movs	r3, #0
 800223c:	62bb      	str	r3, [r7, #40]	; 0x28
  MPU_readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data[0]); // Read factory accelerometer trim values
 800223e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002242:	2202      	movs	r2, #2
 8002244:	2177      	movs	r1, #119	; 0x77
 8002246:	20d2      	movs	r0, #210	; 0xd2
 8002248:	f7fe feed 	bl	8001026 <MPU_readBytes>
  accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 800224c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002256:	4313      	orrs	r3, r2
 8002258:	623b      	str	r3, [r7, #32]
  MPU_readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data[0]);
 800225a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800225e:	2202      	movs	r2, #2
 8002260:	217a      	movs	r1, #122	; 0x7a
 8002262:	20d2      	movs	r0, #210	; 0xd2
 8002264:	f7fe fedf 	bl	8001026 <MPU_readBytes>
  accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8002268:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002272:	4313      	orrs	r3, r2
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
  MPU_readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data[0]);
 8002276:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800227a:	2202      	movs	r2, #2
 800227c:	217d      	movs	r1, #125	; 0x7d
 800227e:	20d2      	movs	r0, #210	; 0xd2
 8002280:	f7fe fed1 	bl	8001026 <MPU_readBytes>
  accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
 8002284:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800228e:	4313      	orrs	r3, r2
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
 8002292:	2301      	movs	r3, #1
 8002294:	653b      	str	r3, [r7, #80]	; 0x50
  uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
 8002296:	2300      	movs	r3, #0
 8002298:	773b      	strb	r3, [r7, #28]
 800229a:	2300      	movs	r3, #0
 800229c:	777b      	strb	r3, [r7, #29]
 800229e:	2300      	movs	r3, #0
 80022a0:	77bb      	strb	r3, [r7, #30]

  for(ii = 0; ii < 3; ii++) {
 80022a2:	2300      	movs	r3, #0
 80022a4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80022a8:	e01c      	b.n	80022e4 <accelgyrocalMPU9250+0x454>
 80022aa:	bf00      	nop
 80022ac:	aaaaaaab 	.word	0xaaaaaaab
    if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
 80022b0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022ba:	4413      	add	r3, r2
 80022bc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 80022c0:	461a      	mov	r2, r3
 80022c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022c4:	4013      	ands	r3, r2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <accelgyrocalMPU9250+0x44a>
 80022ca:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80022ce:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80022d2:	4413      	add	r3, r2
 80022d4:	2201      	movs	r2, #1
 80022d6:	f803 2c44 	strb.w	r2, [r3, #-68]
  for(ii = 0; ii < 3; ii++) {
 80022da:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80022de:	3301      	adds	r3, #1
 80022e0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80022e4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d9e1      	bls.n	80022b0 <accelgyrocalMPU9250+0x420>
  }

  // Construct total accelerometer bias, including calculated average accelerometer bias from above
  accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
 80022ec:	6a3a      	ldr	r2, [r7, #32]
 80022ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	da00      	bge.n	80022f6 <accelgyrocalMPU9250+0x466>
 80022f4:	3307      	adds	r3, #7
 80022f6:	10db      	asrs	r3, r3, #3
 80022f8:	425b      	negs	r3, r3
 80022fa:	4413      	add	r3, r2
 80022fc:	623b      	str	r3, [r7, #32]
  accel_bias_reg[1] -= (accel_bias[1]/8);
 80022fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	2b00      	cmp	r3, #0
 8002304:	da00      	bge.n	8002308 <accelgyrocalMPU9250+0x478>
 8002306:	3307      	adds	r3, #7
 8002308:	10db      	asrs	r3, r3, #3
 800230a:	425b      	negs	r3, r3
 800230c:	4413      	add	r3, r2
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
  accel_bias_reg[2] -= (accel_bias[2]/8);
 8002310:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002314:	2b00      	cmp	r3, #0
 8002316:	da00      	bge.n	800231a <accelgyrocalMPU9250+0x48a>
 8002318:	3307      	adds	r3, #7
 800231a:	10db      	asrs	r3, r3, #3
 800231c:	425b      	negs	r3, r3
 800231e:	4413      	add	r3, r2
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28

  data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	121b      	asrs	r3, r3, #8
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  data[1] = (accel_bias_reg[0])      & 0xFF;
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002334:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002338:	7f3b      	ldrb	r3, [r7, #28]
 800233a:	4313      	orrs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	121b      	asrs	r3, r3, #8
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data[3] = (accel_bias_reg[1])      & 0xFF;
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	b2db      	uxtb	r3, r3
 8002350:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002354:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8002358:	7f7b      	ldrb	r3, [r7, #29]
 800235a:	4313      	orrs	r3, r2
 800235c:	b2db      	uxtb	r3, r3
 800235e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 8002362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002364:	121b      	asrs	r3, r3, #8
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  data[5] = (accel_bias_reg[2])      & 0xFF;
 800236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236e:	b2db      	uxtb	r3, r3
 8002370:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
 8002374:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
 8002378:	7fbb      	ldrb	r3, [r7, #30]
 800237a:	4313      	orrs	r3, r2
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  MPU_writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
  MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
  MPU_writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
*/
// Output scaled accelerometer biases for display in the main program
   dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
 8002382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800238c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	edc3 7a00 	vstr	s15, [r3]
   dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	ee07 3a90 	vmov	s15, r3
 80023a8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023ac:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80023b0:	ee07 3a90 	vmov	s15, r3
 80023b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	3304      	adds	r3, #4
 80023bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023c0:	edc3 7a00 	vstr	s15, [r3]
   dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
 80023c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80023ce:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	3308      	adds	r3, #8
 80023de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e2:	edc3 7a00 	vstr	s15, [r3]
}
 80023e6:	bf00      	nop
 80023e8:	3760      	adds	r7, #96	; 0x60
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop

080023f0 <mpu_begin>:


static bool mpu_begin(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b090      	sub	sp, #64	; 0x40
 80023f4:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 80023f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023fa:	f001 fa45 	bl	8003888 <HAL_Delay>
	char c = MPU_readByte(MPU9250_ADDRESS, MPU9250_WHO_AM_I);  // Read WHO_AM_I register for MPU-9250
 80023fe:	2175      	movs	r1, #117	; 0x75
 8002400:	20d2      	movs	r0, #210	; 0xd2
 8002402:	f7fe fde8 	bl	8000fd6 <MPU_readByte>
 8002406:	4603      	mov	r3, r0
 8002408:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	print_int((int)c);
 800240c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fc23 	bl	8001c5c <print_int>
	println(" <- should be 0x71");
 8002416:	4870      	ldr	r0, [pc, #448]	; (80025d8 <mpu_begin+0x1e8>)
 8002418:	f7ff fbb2 	bl	8001b80 <println>


	float SelfTest[6];
	float MPU9250gyroBias[3] = {0, 0, 0};
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
	float MPU9250accelBias[3] = {0, 0, 0};
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	f04f 0300 	mov.w	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
	float MPU9250magBias[3] = {0, 0, 0};      // Bias corrections for gyro and accelerometer
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	60bb      	str	r3, [r7, #8]

	if (c == 0x71)
 8002452:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002456:	2b71      	cmp	r3, #113	; 0x71
 8002458:	f040 80b9 	bne.w	80025ce <mpu_begin+0x1de>
	{
		println("MPU9250 is online...");
 800245c:	485f      	ldr	r0, [pc, #380]	; (80025dc <mpu_begin+0x1ec>)
 800245e:	f7ff fb8f 	bl	8001b80 <println>

		MPU_SelfTest(SelfTest); // Start by performing self test and reporting values
 8002462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe ffc2 	bl	80013f0 <MPU_SelfTest>
		println("MPU9250 Self Test:");
 800246c:	485c      	ldr	r0, [pc, #368]	; (80025e0 <mpu_begin+0x1f0>)
 800246e:	f7ff fb87 	bl	8001b80 <println>
		print("x-axis self test: acceleration trim within : "); print_float(SelfTest[0]); println("% of factory value");
 8002472:	485c      	ldr	r0, [pc, #368]	; (80025e4 <mpu_begin+0x1f4>)
 8002474:	f7ff fb62 	bl	8001b3c <print>
 8002478:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800247c:	eeb0 0a67 	vmov.f32	s0, s15
 8002480:	f7ff fc1a 	bl	8001cb8 <print_float>
 8002484:	4858      	ldr	r0, [pc, #352]	; (80025e8 <mpu_begin+0x1f8>)
 8002486:	f7ff fb7b 	bl	8001b80 <println>
		print("y-axis self test: acceleration trim within : "); print_float(SelfTest[1]); println("% of factory value");
 800248a:	4858      	ldr	r0, [pc, #352]	; (80025ec <mpu_begin+0x1fc>)
 800248c:	f7ff fb56 	bl	8001b3c <print>
 8002490:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002494:	eeb0 0a67 	vmov.f32	s0, s15
 8002498:	f7ff fc0e 	bl	8001cb8 <print_float>
 800249c:	4852      	ldr	r0, [pc, #328]	; (80025e8 <mpu_begin+0x1f8>)
 800249e:	f7ff fb6f 	bl	8001b80 <println>
		print("z-axis self test: acceleration trim within : "); print_float(SelfTest[2]); println("% of factory value");
 80024a2:	4853      	ldr	r0, [pc, #332]	; (80025f0 <mpu_begin+0x200>)
 80024a4:	f7ff fb4a 	bl	8001b3c <print>
 80024a8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024ac:	eeb0 0a67 	vmov.f32	s0, s15
 80024b0:	f7ff fc02 	bl	8001cb8 <print_float>
 80024b4:	484c      	ldr	r0, [pc, #304]	; (80025e8 <mpu_begin+0x1f8>)
 80024b6:	f7ff fb63 	bl	8001b80 <println>
		print("x-axis self test: gyration trim within : "); print_float(SelfTest[3]); println("% of factory value");
 80024ba:	484e      	ldr	r0, [pc, #312]	; (80025f4 <mpu_begin+0x204>)
 80024bc:	f7ff fb3e 	bl	8001b3c <print>
 80024c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024c4:	eeb0 0a67 	vmov.f32	s0, s15
 80024c8:	f7ff fbf6 	bl	8001cb8 <print_float>
 80024cc:	4846      	ldr	r0, [pc, #280]	; (80025e8 <mpu_begin+0x1f8>)
 80024ce:	f7ff fb57 	bl	8001b80 <println>
		print("y-axis self test: gyration trim within : "); print_float(SelfTest[4]); println("% of factory value");
 80024d2:	4849      	ldr	r0, [pc, #292]	; (80025f8 <mpu_begin+0x208>)
 80024d4:	f7ff fb32 	bl	8001b3c <print>
 80024d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80024dc:	eeb0 0a67 	vmov.f32	s0, s15
 80024e0:	f7ff fbea 	bl	8001cb8 <print_float>
 80024e4:	4840      	ldr	r0, [pc, #256]	; (80025e8 <mpu_begin+0x1f8>)
 80024e6:	f7ff fb4b 	bl	8001b80 <println>
		print("z-axis self test: gyration trim within : "); print_float(SelfTest[5]); println("% of factory value");
 80024ea:	4844      	ldr	r0, [pc, #272]	; (80025fc <mpu_begin+0x20c>)
 80024ec:	f7ff fb26 	bl	8001b3c <print>
 80024f0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80024f4:	eeb0 0a67 	vmov.f32	s0, s15
 80024f8:	f7ff fbde 	bl	8001cb8 <print_float>
 80024fc:	483a      	ldr	r0, [pc, #232]	; (80025e8 <mpu_begin+0x1f8>)
 80024fe:	f7ff fb3f 	bl	8001b80 <println>
		HAL_Delay(1000);
 8002502:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002506:	f001 f9bf 	bl	8003888 <HAL_Delay>

		// get sensor resolutions, only need to do this once
		MPU_getAres();
 800250a:	f7fe fe21 	bl	8001150 <MPU_getAres>
		MPU_getGres();
 800250e:	f7fe fdeb 	bl	80010e8 <MPU_getGres>
		MPU_getMres();
 8002512:	f7fe fdcb 	bl	80010ac <MPU_getMres>

		println(" Calibrate MPU9250 gyro and accel");
 8002516:	483a      	ldr	r0, [pc, #232]	; (8002600 <mpu_begin+0x210>)
 8002518:	f7ff fb32 	bl	8001b80 <println>
		accelgyrocalMPU9250(MPU9250gyroBias, MPU9250accelBias); // Calibrate gyro and accelerometers, load biases in bias registers
 800251c:	f107 020c 	add.w	r2, r7, #12
 8002520:	f107 0318 	add.w	r3, r7, #24
 8002524:	4611      	mov	r1, r2
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fcb2 	bl	8001e90 <accelgyrocalMPU9250>
		println("accel biases (mg)");
 800252c:	4835      	ldr	r0, [pc, #212]	; (8002604 <mpu_begin+0x214>)
 800252e:	f7ff fb27 	bl	8001b80 <println>
		print_float(1000.*MPU9250accelBias[0]); println("");
 8002532:	edd7 7a03 	vldr	s15, [r7, #12]
 8002536:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002608 <mpu_begin+0x218>
 800253a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800253e:	eeb0 0a67 	vmov.f32	s0, s15
 8002542:	f7ff fbb9 	bl	8001cb8 <print_float>
 8002546:	4831      	ldr	r0, [pc, #196]	; (800260c <mpu_begin+0x21c>)
 8002548:	f7ff fb1a 	bl	8001b80 <println>
		print_float(1000.*MPU9250accelBias[1]); println("");
 800254c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002550:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002608 <mpu_begin+0x218>
 8002554:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002558:	eeb0 0a67 	vmov.f32	s0, s15
 800255c:	f7ff fbac 	bl	8001cb8 <print_float>
 8002560:	482a      	ldr	r0, [pc, #168]	; (800260c <mpu_begin+0x21c>)
 8002562:	f7ff fb0d 	bl	8001b80 <println>
		print_float(1000.*MPU9250accelBias[2]); println("");
 8002566:	edd7 7a05 	vldr	s15, [r7, #20]
 800256a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002608 <mpu_begin+0x218>
 800256e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002572:	eeb0 0a67 	vmov.f32	s0, s15
 8002576:	f7ff fb9f 	bl	8001cb8 <print_float>
 800257a:	4824      	ldr	r0, [pc, #144]	; (800260c <mpu_begin+0x21c>)
 800257c:	f7ff fb00 	bl	8001b80 <println>
		println("gyro biases (dps)");
 8002580:	4823      	ldr	r0, [pc, #140]	; (8002610 <mpu_begin+0x220>)
 8002582:	f7ff fafd 	bl	8001b80 <println>
		print_float(MPU9250gyroBias[0]); println("");
 8002586:	edd7 7a06 	vldr	s15, [r7, #24]
 800258a:	eeb0 0a67 	vmov.f32	s0, s15
 800258e:	f7ff fb93 	bl	8001cb8 <print_float>
 8002592:	481e      	ldr	r0, [pc, #120]	; (800260c <mpu_begin+0x21c>)
 8002594:	f7ff faf4 	bl	8001b80 <println>
		print_float(MPU9250gyroBias[1]); println("");
 8002598:	edd7 7a07 	vldr	s15, [r7, #28]
 800259c:	eeb0 0a67 	vmov.f32	s0, s15
 80025a0:	f7ff fb8a 	bl	8001cb8 <print_float>
 80025a4:	4819      	ldr	r0, [pc, #100]	; (800260c <mpu_begin+0x21c>)
 80025a6:	f7ff faeb 	bl	8001b80 <println>
		print_float(MPU9250gyroBias[2]); println("");
 80025aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80025ae:	eeb0 0a67 	vmov.f32	s0, s15
 80025b2:	f7ff fb81 	bl	8001cb8 <print_float>
 80025b6:	4815      	ldr	r0, [pc, #84]	; (800260c <mpu_begin+0x21c>)
 80025b8:	f7ff fae2 	bl	8001b80 <println>

		HAL_Delay(1000);
 80025bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025c0:	f001 f962 	bl	8003888 <HAL_Delay>

		MPU_init();
 80025c4:	f7fe fdf4 	bl	80011b0 <MPU_init>
		println("MPU9250 initialized for active data mode...."); // Initialize device for active mode read of acclerometer, gyroscope, and temperature
 80025c8:	4812      	ldr	r0, [pc, #72]	; (8002614 <mpu_begin+0x224>)
 80025ca:	f7ff fad9 	bl	8001b80 <println>
	}
}
 80025ce:	bf00      	nop
 80025d0:	4618      	mov	r0, r3
 80025d2:	3740      	adds	r7, #64	; 0x40
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	08013418 	.word	0x08013418
 80025dc:	0801342c 	.word	0x0801342c
 80025e0:	08013444 	.word	0x08013444
 80025e4:	08013458 	.word	0x08013458
 80025e8:	08013488 	.word	0x08013488
 80025ec:	0801349c 	.word	0x0801349c
 80025f0:	080134cc 	.word	0x080134cc
 80025f4:	080134fc 	.word	0x080134fc
 80025f8:	08013528 	.word	0x08013528
 80025fc:	08013554 	.word	0x08013554
 8002600:	08013580 	.word	0x08013580
 8002604:	080135a4 	.word	0x080135a4
 8002608:	447a0000 	.word	0x447a0000
 800260c:	080130c8 	.word	0x080130c8
 8002610:	080135b8 	.word	0x080135b8
 8002614:	080135cc 	.word	0x080135cc

08002618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800261c:	f001 f8c2 	bl	80037a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002620:	f000 f832 	bl	8002688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002624:	f000 fbae 	bl	8002d84 <MX_GPIO_Init>
  MX_DMA_Init();
 8002628:	f000 fb74 	bl	8002d14 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800262c:	f000 f902 	bl	8002834 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002630:	f009 fbb0 	bl	800bd94 <MX_FATFS_Init>
  MX_I2C1_Init();
 8002634:	f000 f8aa 	bl	800278c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8002638:	f00b f9ea 	bl	800da10 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800263c:	f000 f91a 	bl	8002874 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8002640:	f000 fb3e 	bl	8002cc0 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8002644:	f000 f8d0 	bl	80027e8 <MX_RTC_Init>
  MX_TIM2_Init();
 8002648:	f000 f99c 	bl	8002984 <MX_TIM2_Init>
  MX_TIM5_Init();
 800264c:	f000 fab6 	bl	8002bbc <MX_TIM5_Init>
  MX_TIM4_Init();
 8002650:	f000 fa66 	bl	8002b20 <MX_TIM4_Init>
  MX_TIM1_Init();
 8002654:	f000 f944 	bl	80028e0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002658:	f000 f9e0 	bl	8002a1c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start millisecond timer
  HAL_TIM_Base_Start(&htim1);
 800265c:	4807      	ldr	r0, [pc, #28]	; (800267c <main+0x64>)
 800265e:	f006 fa0c 	bl	8008a7a <HAL_TIM_Base_Start>

  // Start servo1 timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002662:	2108      	movs	r1, #8
 8002664:	4806      	ldr	r0, [pc, #24]	; (8002680 <main+0x68>)
 8002666:	f006 fa85 	bl	8008b74 <HAL_TIM_PWM_Start>

  // Execute code
  setup();
 800266a:	f7ff fb6d 	bl	8001d48 <setup>


  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start_IT(&htim4);
 800266e:	4805      	ldr	r0, [pc, #20]	; (8002684 <main+0x6c>)
 8002670:	f006 fa27 	bl	8008ac2 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	// Execute code
	loop();
 8002674:	f7ff fbba 	bl	8001dec <loop>
 8002678:	e7fc      	b.n	8002674 <main+0x5c>
 800267a:	bf00      	nop
 800267c:	20000ab8 	.word	0x20000ab8
 8002680:	200009f8 	.word	0x200009f8
 8002684:	200008e4 	.word	0x200008e4

08002688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b098      	sub	sp, #96	; 0x60
 800268c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800268e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002692:	2230      	movs	r2, #48	; 0x30
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f00b ff23 	bl	800e4e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026ac:	f107 030c 	add.w	r3, r7, #12
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	605a      	str	r2, [r3, #4]
 80026b6:	609a      	str	r2, [r3, #8]
 80026b8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	60bb      	str	r3, [r7, #8]
 80026be:	4b31      	ldr	r3, [pc, #196]	; (8002784 <SystemClock_Config+0xfc>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4a30      	ldr	r2, [pc, #192]	; (8002784 <SystemClock_Config+0xfc>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ca:	4b2e      	ldr	r3, [pc, #184]	; (8002784 <SystemClock_Config+0xfc>)
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <SystemClock_Config+0x100>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <SystemClock_Config+0x100>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	4b28      	ldr	r3, [pc, #160]	; (8002788 <SystemClock_Config+0x100>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80026f2:	2305      	movs	r3, #5
 80026f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80026fc:	2301      	movs	r3, #1
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002700:	2302      	movs	r3, #2
 8002702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002704:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002708:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800270a:	2306      	movs	r3, #6
 800270c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800270e:	23a8      	movs	r3, #168	; 0xa8
 8002710:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002712:	2302      	movs	r3, #2
 8002714:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002716:	2307      	movs	r3, #7
 8002718:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800271e:	4618      	mov	r0, r3
 8002720:	f004 f8ba 	bl	8006898 <HAL_RCC_OscConfig>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800272a:	f000 fc1b 	bl	8002f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800272e:	230f      	movs	r3, #15
 8002730:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002732:	2302      	movs	r3, #2
 8002734:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002736:	2300      	movs	r3, #0
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800273a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800273e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002744:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002746:	f107 031c 	add.w	r3, r7, #28
 800274a:	2105      	movs	r1, #5
 800274c:	4618      	mov	r0, r3
 800274e:	f004 fb13 	bl	8006d78 <HAL_RCC_ClockConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8002758:	f000 fc04 	bl	8002f64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800275c:	2302      	movs	r3, #2
 800275e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002760:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002764:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002766:	f107 030c 	add.w	r3, r7, #12
 800276a:	4618      	mov	r0, r3
 800276c:	f004 fcd0 	bl	8007110 <HAL_RCCEx_PeriphCLKConfig>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002776:	f000 fbf5 	bl	8002f64 <Error_Handler>
  }
}
 800277a:	bf00      	nop
 800277c:	3760      	adds	r7, #96	; 0x60
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800
 8002788:	40007000 	.word	0x40007000

0800278c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002790:	4b12      	ldr	r3, [pc, #72]	; (80027dc <MX_I2C1_Init+0x50>)
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <MX_I2C1_Init+0x54>)
 8002794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <MX_I2C1_Init+0x50>)
 8002798:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <MX_I2C1_Init+0x58>)
 800279a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <MX_I2C1_Init+0x50>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <MX_I2C1_Init+0x50>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027a8:	4b0c      	ldr	r3, [pc, #48]	; (80027dc <MX_I2C1_Init+0x50>)
 80027aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027b0:	4b0a      	ldr	r3, [pc, #40]	; (80027dc <MX_I2C1_Init+0x50>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <MX_I2C1_Init+0x50>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027bc:	4b07      	ldr	r3, [pc, #28]	; (80027dc <MX_I2C1_Init+0x50>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <MX_I2C1_Init+0x50>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80027c8:	4804      	ldr	r0, [pc, #16]	; (80027dc <MX_I2C1_Init+0x50>)
 80027ca:	f001 ff1d 	bl	8004608 <HAL_I2C_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80027d4:	f000 fbc6 	bl	8002f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000964 	.word	0x20000964
 80027e0:	40005400 	.word	0x40005400
 80027e4:	00061a80 	.word	0x00061a80

080027e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <MX_RTC_Init+0x44>)
 80027ee:	4a10      	ldr	r2, [pc, #64]	; (8002830 <MX_RTC_Init+0x48>)
 80027f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <MX_RTC_Init+0x44>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <MX_RTC_Init+0x44>)
 80027fa:	227f      	movs	r2, #127	; 0x7f
 80027fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <MX_RTC_Init+0x44>)
 8002800:	22ff      	movs	r2, #255	; 0xff
 8002802:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002804:	4b09      	ldr	r3, [pc, #36]	; (800282c <MX_RTC_Init+0x44>)
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <MX_RTC_Init+0x44>)
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <MX_RTC_Init+0x44>)
 8002812:	2200      	movs	r2, #0
 8002814:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002816:	4805      	ldr	r0, [pc, #20]	; (800282c <MX_RTC_Init+0x44>)
 8002818:	f004 fd5c 	bl	80072d4 <HAL_RTC_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002822:	f000 fb9f 	bl	8002f64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20000a38 	.word	0x20000a38
 8002830:	40002800 	.word	0x40002800

08002834 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <MX_SDIO_SD_Init+0x38>)
 800283a:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <MX_SDIO_SD_Init+0x3c>)
 800283c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <MX_SDIO_SD_Init+0x38>)
 8002840:	2200      	movs	r2, #0
 8002842:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <MX_SDIO_SD_Init+0x38>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800284a:	4b08      	ldr	r3, [pc, #32]	; (800286c <MX_SDIO_SD_Init+0x38>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <MX_SDIO_SD_Init+0x38>)
 8002852:	2200      	movs	r2, #0
 8002854:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <MX_SDIO_SD_Init+0x38>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <MX_SDIO_SD_Init+0x38>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002862:	bf00      	nop
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	20000af8 	.word	0x20000af8
 8002870:	40012c00 	.word	0x40012c00

08002874 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002878:	4b17      	ldr	r3, [pc, #92]	; (80028d8 <MX_SPI1_Init+0x64>)
 800287a:	4a18      	ldr	r2, [pc, #96]	; (80028dc <MX_SPI1_Init+0x68>)
 800287c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <MX_SPI1_Init+0x64>)
 8002880:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002884:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002886:	4b14      	ldr	r3, [pc, #80]	; (80028d8 <MX_SPI1_Init+0x64>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <MX_SPI1_Init+0x64>)
 800288e:	2200      	movs	r2, #0
 8002890:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <MX_SPI1_Init+0x64>)
 8002894:	2200      	movs	r2, #0
 8002896:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <MX_SPI1_Init+0x64>)
 800289a:	2200      	movs	r2, #0
 800289c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <MX_SPI1_Init+0x64>)
 80028a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80028a6:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <MX_SPI1_Init+0x64>)
 80028a8:	2228      	movs	r2, #40	; 0x28
 80028aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <MX_SPI1_Init+0x64>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <MX_SPI1_Init+0x64>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <MX_SPI1_Init+0x64>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <MX_SPI1_Init+0x64>)
 80028c0:	220a      	movs	r2, #10
 80028c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028c4:	4804      	ldr	r0, [pc, #16]	; (80028d8 <MX_SPI1_Init+0x64>)
 80028c6:	f005 ff2b 	bl	8008720 <HAL_SPI_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028d0:	f000 fb48 	bl	8002f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000b7c 	.word	0x20000b7c
 80028dc:	40013000 	.word	0x40013000

080028e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028e6:	f107 0308 	add.w	r3, r7, #8
 80028ea:	2200      	movs	r2, #0
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	605a      	str	r2, [r3, #4]
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f4:	463b      	mov	r3, r7
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80028fc:	4b1f      	ldr	r3, [pc, #124]	; (800297c <MX_TIM1_Init+0x9c>)
 80028fe:	4a20      	ldr	r2, [pc, #128]	; (8002980 <MX_TIM1_Init+0xa0>)
 8002900:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16799;
 8002902:	4b1e      	ldr	r3, [pc, #120]	; (800297c <MX_TIM1_Init+0x9c>)
 8002904:	f244 129f 	movw	r2, #16799	; 0x419f
 8002908:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <MX_TIM1_Init+0x9c>)
 800290c:	2200      	movs	r2, #0
 800290e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002910:	4b1a      	ldr	r3, [pc, #104]	; (800297c <MX_TIM1_Init+0x9c>)
 8002912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002916:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <MX_TIM1_Init+0x9c>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800291e:	4b17      	ldr	r3, [pc, #92]	; (800297c <MX_TIM1_Init+0x9c>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <MX_TIM1_Init+0x9c>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800292a:	4814      	ldr	r0, [pc, #80]	; (800297c <MX_TIM1_Init+0x9c>)
 800292c:	f006 f87a 	bl	8008a24 <HAL_TIM_Base_Init>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8002936:	f000 fb15 	bl	8002f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800293a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800293e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002940:	f107 0308 	add.w	r3, r7, #8
 8002944:	4619      	mov	r1, r3
 8002946:	480d      	ldr	r0, [pc, #52]	; (800297c <MX_TIM1_Init+0x9c>)
 8002948:	f006 fa18 	bl	8008d7c <HAL_TIM_ConfigClockSource>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8002952:	f000 fb07 	bl	8002f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800295e:	463b      	mov	r3, r7
 8002960:	4619      	mov	r1, r3
 8002962:	4806      	ldr	r0, [pc, #24]	; (800297c <MX_TIM1_Init+0x9c>)
 8002964:	f006 fdd2 	bl	800950c <HAL_TIMEx_MasterConfigSynchronization>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800296e:	f000 faf9 	bl	8002f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20000ab8 	.word	0x20000ab8
 8002980:	40010000 	.word	0x40010000

08002984 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b086      	sub	sp, #24
 8002988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800298a:	f107 0308 	add.w	r3, r7, #8
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002998:	463b      	mov	r3, r7
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80029a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 167;
 80029a8:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029aa:	22a7      	movs	r2, #167	; 0xa7
 80029ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80029ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029bc:	4b16      	ldr	r3, [pc, #88]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029c8:	4813      	ldr	r0, [pc, #76]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029ca:	f006 f82b 	bl	8008a24 <HAL_TIM_Base_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029d4:	f000 fac6 	bl	8002f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029de:	f107 0308 	add.w	r3, r7, #8
 80029e2:	4619      	mov	r1, r3
 80029e4:	480c      	ldr	r0, [pc, #48]	; (8002a18 <MX_TIM2_Init+0x94>)
 80029e6:	f006 f9c9 	bl	8008d7c <HAL_TIM_ConfigClockSource>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029f0:	f000 fab8 	bl	8002f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029fc:	463b      	mov	r3, r7
 80029fe:	4619      	mov	r1, r3
 8002a00:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_TIM2_Init+0x94>)
 8002a02:	f006 fd83 	bl	800950c <HAL_TIMEx_MasterConfigSynchronization>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a0c:	f000 faaa 	bl	8002f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a10:	bf00      	nop
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000bd4 	.word	0x20000bd4

08002a1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b08e      	sub	sp, #56	; 0x38
 8002a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a30:	f107 0320 	add.w	r3, r7, #32
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	605a      	str	r2, [r3, #4]
 8002a42:	609a      	str	r2, [r3, #8]
 8002a44:	60da      	str	r2, [r3, #12]
 8002a46:	611a      	str	r2, [r3, #16]
 8002a48:	615a      	str	r2, [r3, #20]
 8002a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a4c:	4b32      	ldr	r3, [pc, #200]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002a4e:	4a33      	ldr	r2, [pc, #204]	; (8002b1c <MX_TIM3_Init+0x100>)
 8002a50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 167;
 8002a52:	4b31      	ldr	r3, [pc, #196]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002a54:	22a7      	movs	r2, #167	; 0xa7
 8002a56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a58:	4b2f      	ldr	r3, [pc, #188]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8002a5e:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002a60:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a66:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a72:	4829      	ldr	r0, [pc, #164]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002a74:	f005 ffd6 	bl	8008a24 <HAL_TIM_Base_Init>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002a7e:	f000 fa71 	bl	8002f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a86:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4822      	ldr	r0, [pc, #136]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002a90:	f006 f974 	bl	8008d7c <HAL_TIM_ConfigClockSource>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002a9a:	f000 fa63 	bl	8002f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a9e:	481e      	ldr	r0, [pc, #120]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002aa0:	f006 f833 	bl	8008b0a <HAL_TIM_PWM_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002aaa:	f000 fa5b 	bl	8002f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ab6:	f107 0320 	add.w	r3, r7, #32
 8002aba:	4619      	mov	r1, r3
 8002abc:	4816      	ldr	r0, [pc, #88]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002abe:	f006 fd25 	bl	800950c <HAL_TIMEx_MasterConfigSynchronization>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002ac8:	f000 fa4c 	bl	8002f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002acc:	2360      	movs	r3, #96	; 0x60
 8002ace:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	2208      	movs	r2, #8
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	480d      	ldr	r0, [pc, #52]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002ae4:	f006 f884 	bl	8008bf0 <HAL_TIM_PWM_ConfigChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8002aee:	f000 fa39 	bl	8002f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002af2:	1d3b      	adds	r3, r7, #4
 8002af4:	220c      	movs	r2, #12
 8002af6:	4619      	mov	r1, r3
 8002af8:	4807      	ldr	r0, [pc, #28]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002afa:	f006 f879 	bl	8008bf0 <HAL_TIM_PWM_ConfigChannel>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8002b04:	f000 fa2e 	bl	8002f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b08:	4803      	ldr	r0, [pc, #12]	; (8002b18 <MX_TIM3_Init+0xfc>)
 8002b0a:	f000 fce5 	bl	80034d8 <HAL_TIM_MspPostInit>

}
 8002b0e:	bf00      	nop
 8002b10:	3738      	adds	r7, #56	; 0x38
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	200009f8 	.word	0x200009f8
 8002b1c:	40000400 	.word	0x40000400

08002b20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b26:	f107 0308 	add.w	r3, r7, #8
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b34:	463b      	mov	r3, r7
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <MX_TIM4_Init+0x94>)
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <MX_TIM4_Init+0x98>)
 8002b40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002b42:	4b1c      	ldr	r3, [pc, #112]	; (8002bb4 <MX_TIM4_Init+0x94>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b48:	4b1a      	ldr	r3, [pc, #104]	; (8002bb4 <MX_TIM4_Init+0x94>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1024;
 8002b4e:	4b19      	ldr	r3, [pc, #100]	; (8002bb4 <MX_TIM4_Init+0x94>)
 8002b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <MX_TIM4_Init+0x94>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5c:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <MX_TIM4_Init+0x94>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b62:	4814      	ldr	r0, [pc, #80]	; (8002bb4 <MX_TIM4_Init+0x94>)
 8002b64:	f005 ff5e 	bl	8008a24 <HAL_TIM_Base_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002b6e:	f000 f9f9 	bl	8002f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b78:	f107 0308 	add.w	r3, r7, #8
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	480d      	ldr	r0, [pc, #52]	; (8002bb4 <MX_TIM4_Init+0x94>)
 8002b80:	f006 f8fc 	bl	8008d7c <HAL_TIM_ConfigClockSource>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002b8a:	f000 f9eb 	bl	8002f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b96:	463b      	mov	r3, r7
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <MX_TIM4_Init+0x94>)
 8002b9c:	f006 fcb6 	bl	800950c <HAL_TIMEx_MasterConfigSynchronization>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002ba6:	f000 f9dd 	bl	8002f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002baa:	bf00      	nop
 8002bac:	3718      	adds	r7, #24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200008e4 	.word	0x200008e4
 8002bb8:	40000800 	.word	0x40000800

08002bbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08e      	sub	sp, #56	; 0x38
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd0:	f107 0320 	add.w	r3, r7, #32
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bda:	1d3b      	adds	r3, r7, #4
 8002bdc:	2200      	movs	r2, #0
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	609a      	str	r2, [r3, #8]
 8002be4:	60da      	str	r2, [r3, #12]
 8002be6:	611a      	str	r2, [r3, #16]
 8002be8:	615a      	str	r2, [r3, #20]
 8002bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002bee:	4a33      	ldr	r2, [pc, #204]	; (8002cbc <MX_TIM5_Init+0x100>)
 8002bf0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002bf2:	4b31      	ldr	r3, [pc, #196]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002bfa:	2240      	movs	r2, #64	; 0x40
 8002bfc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002c00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c04:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c06:	4b2c      	ldr	r3, [pc, #176]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0c:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002c12:	4829      	ldr	r0, [pc, #164]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002c14:	f005 ff06 	bl	8008a24 <HAL_TIM_Base_Init>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8002c1e:	f000 f9a1 	bl	8002f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4822      	ldr	r0, [pc, #136]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002c30:	f006 f8a4 	bl	8008d7c <HAL_TIM_ConfigClockSource>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8002c3a:	f000 f993 	bl	8002f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002c3e:	481e      	ldr	r0, [pc, #120]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002c40:	f005 ff63 	bl	8008b0a <HAL_TIM_PWM_Init>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8002c4a:	f000 f98b 	bl	8002f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002c56:	f107 0320 	add.w	r3, r7, #32
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4816      	ldr	r0, [pc, #88]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002c5e:	f006 fc55 	bl	800950c <HAL_TIMEx_MasterConfigSynchronization>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002c68:	f000 f97c 	bl	8002f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002c6c:	2370      	movs	r3, #112	; 0x70
 8002c6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4619      	mov	r1, r3
 8002c82:	480d      	ldr	r0, [pc, #52]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002c84:	f005 ffb4 	bl	8008bf0 <HAL_TIM_PWM_ConfigChannel>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8002c8e:	f000 f969 	bl	8002f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	220c      	movs	r2, #12
 8002c96:	4619      	mov	r1, r3
 8002c98:	4807      	ldr	r0, [pc, #28]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002c9a:	f005 ffa9 	bl	8008bf0 <HAL_TIM_PWM_ConfigChannel>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_TIM5_Init+0xec>
  {
    Error_Handler();
 8002ca4:	f000 f95e 	bl	8002f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002ca8:	4803      	ldr	r0, [pc, #12]	; (8002cb8 <MX_TIM5_Init+0xfc>)
 8002caa:	f000 fc15 	bl	80034d8 <HAL_TIM_MspPostInit>

}
 8002cae:	bf00      	nop
 8002cb0:	3738      	adds	r7, #56	; 0x38
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200009b8 	.word	0x200009b8
 8002cbc:	40000c00 	.word	0x40000c00

08002cc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cc4:	4b11      	ldr	r3, [pc, #68]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <MX_USART3_UART_Init+0x50>)
 8002cc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 4800;
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002ccc:	f44f 5296 	mov.w	r2, #4800	; 0x12c0
 8002cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cd2:	4b0e      	ldr	r3, [pc, #56]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cea:	4b08      	ldr	r3, [pc, #32]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cf0:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cf6:	4805      	ldr	r0, [pc, #20]	; (8002d0c <MX_USART3_UART_Init+0x4c>)
 8002cf8:	f006 fc84 	bl	8009604 <HAL_UART_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002d02:	f000 f92f 	bl	8002f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000924 	.word	0x20000924
 8002d10:	40004800 	.word	0x40004800

08002d14 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <MX_DMA_Init+0x6c>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d22:	4a17      	ldr	r2, [pc, #92]	; (8002d80 <MX_DMA_Init+0x6c>)
 8002d24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002d28:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2a:	4b15      	ldr	r3, [pc, #84]	; (8002d80 <MX_DMA_Init+0x6c>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2038      	movs	r0, #56	; 0x38
 8002d3c:	f000 fea1 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002d40:	2038      	movs	r0, #56	; 0x38
 8002d42:	f000 feba 	bl	8003aba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	203b      	movs	r0, #59	; 0x3b
 8002d4c:	f000 fe99 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002d50:	203b      	movs	r0, #59	; 0x3b
 8002d52:	f000 feb2 	bl	8003aba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2044      	movs	r0, #68	; 0x44
 8002d5c:	f000 fe91 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8002d60:	2044      	movs	r0, #68	; 0x44
 8002d62:	f000 feaa 	bl	8003aba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	2045      	movs	r0, #69	; 0x45
 8002d6c:	f000 fe89 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002d70:	2045      	movs	r0, #69	; 0x45
 8002d72:	f000 fea2 	bl	8003aba <HAL_NVIC_EnableIRQ>

}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800

08002d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	; 0x28
 8002d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]
 8002d96:	60da      	str	r2, [r3, #12]
 8002d98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	4a66      	ldr	r2, [pc, #408]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002da4:	f043 0304 	orr.w	r3, r3, #4
 8002da8:	6313      	str	r3, [r2, #48]	; 0x30
 8002daa:	4b64      	ldr	r3, [pc, #400]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	4b60      	ldr	r3, [pc, #384]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	4a5f      	ldr	r2, [pc, #380]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc6:	4b5d      	ldr	r3, [pc, #372]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a58      	ldr	r2, [pc, #352]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b56      	ldr	r3, [pc, #344]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
 8002df2:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	4a51      	ldr	r2, [pc, #324]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfe:	4b4f      	ldr	r3, [pc, #316]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	603b      	str	r3, [r7, #0]
 8002e0e:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	4a4a      	ldr	r2, [pc, #296]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002e14:	f043 0308 	orr.w	r3, r3, #8
 8002e18:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1a:	4b48      	ldr	r3, [pc, #288]	; (8002f3c <MX_GPIO_Init+0x1b8>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002e26:	2200      	movs	r2, #0
 8002e28:	21ef      	movs	r1, #239	; 0xef
 8002e2a:	4845      	ldr	r0, [pc, #276]	; (8002f40 <MX_GPIO_Init+0x1bc>)
 8002e2c:	f001 fbae 	bl	800458c <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2115      	movs	r1, #21
 8002e34:	4843      	ldr	r0, [pc, #268]	; (8002f44 <MX_GPIO_Init+0x1c0>)
 8002e36:	f001 fba9 	bl	800458c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8002e40:	4841      	ldr	r0, [pc, #260]	; (8002f48 <MX_GPIO_Init+0x1c4>)
 8002e42:	f001 fba3 	bl	800458c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002e46:	23af      	movs	r3, #175	; 0xaf
 8002e48:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin|LEDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e56:	f107 0314 	add.w	r3, r7, #20
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4838      	ldr	r0, [pc, #224]	; (8002f40 <MX_GPIO_Init+0x1bc>)
 8002e5e:	f001 f9e3 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin PH_R_Pin P7_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|PH_R_Pin|P7_Pin;
 8002e62:	2315      	movs	r3, #21
 8002e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f107 0314 	add.w	r3, r7, #20
 8002e76:	4619      	mov	r1, r3
 8002e78:	4832      	ldr	r0, [pc, #200]	; (8002f44 <MX_GPIO_Init+0x1c0>)
 8002e7a:	f001 f9d5 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 8002e7e:	2340      	movs	r3, #64	; 0x40
 8002e80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e82:	4b32      	ldr	r3, [pc, #200]	; (8002f4c <MX_GPIO_Init+0x1c8>)
 8002e84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002e86:	2302      	movs	r3, #2
 8002e88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	4619      	mov	r1, r3
 8002e90:	482c      	ldr	r0, [pc, #176]	; (8002f44 <MX_GPIO_Init+0x1c0>)
 8002e92:	f001 f9c9 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_TIM_Pin SDIO_SW_Pin */
  GPIO_InitStruct.Pin = LR_TIM_Pin|SDIO_SW_Pin;
 8002e96:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4826      	ldr	r0, [pc, #152]	; (8002f44 <MX_GPIO_Init+0x1c0>)
 8002eac:	f001 f9bc 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8002eb0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	481f      	ldr	r0, [pc, #124]	; (8002f48 <MX_GPIO_Init+0x1c4>)
 8002eca:	f001 f9ad 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LEDB_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin;
 8002ece:	2340      	movs	r3, #64	; 0x40
 8002ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LEDB_GPIO_Port, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4816      	ldr	r0, [pc, #88]	; (8002f40 <MX_GPIO_Init+0x1bc>)
 8002ee6:	f001 f99f 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 8002eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 8002ef8:	f107 0314 	add.w	r3, r7, #20
 8002efc:	4619      	mov	r1, r3
 8002efe:	4811      	ldr	r0, [pc, #68]	; (8002f44 <MX_GPIO_Init+0x1c0>)
 8002f00:	f001 f992 	bl	8004228 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_NSS_Pin */
  GPIO_InitStruct.Pin = LR_NSS_Pin;
 8002f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f12:	2300      	movs	r3, #0
 8002f14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LR_NSS_GPIO_Port, &GPIO_InitStruct);
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	480a      	ldr	r0, [pc, #40]	; (8002f48 <MX_GPIO_Init+0x1c4>)
 8002f1e:	f001 f983 	bl	8004228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2100      	movs	r1, #0
 8002f26:	2017      	movs	r0, #23
 8002f28:	f000 fdab 	bl	8003a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f2c:	2017      	movs	r0, #23
 8002f2e:	f000 fdc4 	bl	8003aba <HAL_NVIC_EnableIRQ>

}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020000 	.word	0x40020000
 8002f48:	40020400 	.word	0x40020400
 8002f4c:	10110000 	.word	0x10110000

08002f50 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance(void) { return &hi2c1; }
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <Get_I2C1_Instance+0x10>)
 8002f56:	4618      	mov	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	20000964 	.word	0x20000964

08002f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	607b      	str	r3, [r7, #4]
 8002f7e:	4b10      	ldr	r3, [pc, #64]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f82:	4a0f      	ldr	r2, [pc, #60]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f88:	6453      	str	r3, [r2, #68]	; 0x44
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	4a08      	ldr	r2, [pc, #32]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fa6:	4b06      	ldr	r3, [pc, #24]	; (8002fc0 <HAL_MspInit+0x4c>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	603b      	str	r3, [r7, #0]
 8002fb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b08a      	sub	sp, #40	; 0x28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a19      	ldr	r2, [pc, #100]	; (8003048 <HAL_I2C_MspInit+0x84>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d12b      	bne.n	800303e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	4b18      	ldr	r3, [pc, #96]	; (800304c <HAL_I2C_MspInit+0x88>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	4a17      	ldr	r2, [pc, #92]	; (800304c <HAL_I2C_MspInit+0x88>)
 8002ff0:	f043 0302 	orr.w	r3, r3, #2
 8002ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff6:	4b15      	ldr	r3, [pc, #84]	; (800304c <HAL_I2C_MspInit+0x88>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8003002:	23c0      	movs	r3, #192	; 0xc0
 8003004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003006:	2312      	movs	r3, #18
 8003008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003012:	2304      	movs	r3, #4
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4619      	mov	r1, r3
 800301c:	480c      	ldr	r0, [pc, #48]	; (8003050 <HAL_I2C_MspInit+0x8c>)
 800301e:	f001 f903 	bl	8004228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_I2C_MspInit+0x88>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	4a08      	ldr	r2, [pc, #32]	; (800304c <HAL_I2C_MspInit+0x88>)
 800302c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003030:	6413      	str	r3, [r2, #64]	; 0x40
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <HAL_I2C_MspInit+0x88>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800303a:	60fb      	str	r3, [r7, #12]
 800303c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800303e:	bf00      	nop
 8003040:	3728      	adds	r7, #40	; 0x28
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40005400 	.word	0x40005400
 800304c:	40023800 	.word	0x40023800
 8003050:	40020400 	.word	0x40020400

08003054 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a05      	ldr	r2, [pc, #20]	; (8003078 <HAL_RTC_MspInit+0x24>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d102      	bne.n	800306c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <HAL_RTC_MspInit+0x28>)
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	40002800 	.word	0x40002800
 800307c:	42470e3c 	.word	0x42470e3c

08003080 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a70      	ldr	r2, [pc, #448]	; (8003260 <HAL_SD_MspInit+0x1e0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	f040 80da 	bne.w	8003258 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80030a4:	2300      	movs	r3, #0
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	4b6e      	ldr	r3, [pc, #440]	; (8003264 <HAL_SD_MspInit+0x1e4>)
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	4a6d      	ldr	r2, [pc, #436]	; (8003264 <HAL_SD_MspInit+0x1e4>)
 80030ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030b2:	6453      	str	r3, [r2, #68]	; 0x44
 80030b4:	4b6b      	ldr	r3, [pc, #428]	; (8003264 <HAL_SD_MspInit+0x1e4>)
 80030b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_SD_MspInit+0x1e4>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	4a66      	ldr	r2, [pc, #408]	; (8003264 <HAL_SD_MspInit+0x1e4>)
 80030ca:	f043 0304 	orr.w	r3, r3, #4
 80030ce:	6313      	str	r3, [r2, #48]	; 0x30
 80030d0:	4b64      	ldr	r3, [pc, #400]	; (8003264 <HAL_SD_MspInit+0x1e4>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	4b60      	ldr	r3, [pc, #384]	; (8003264 <HAL_SD_MspInit+0x1e4>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	4a5f      	ldr	r2, [pc, #380]	; (8003264 <HAL_SD_MspInit+0x1e4>)
 80030e6:	f043 0308 	orr.w	r3, r3, #8
 80030ea:	6313      	str	r3, [r2, #48]	; 0x30
 80030ec:	4b5d      	ldr	r3, [pc, #372]	; (8003264 <HAL_SD_MspInit+0x1e4>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration    
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80030f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003102:	2301      	movs	r3, #1
 8003104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003106:	2303      	movs	r3, #3
 8003108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800310a:	230c      	movs	r3, #12
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	4854      	ldr	r0, [pc, #336]	; (8003268 <HAL_SD_MspInit+0x1e8>)
 8003116:	f001 f887 	bl	8004228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800311a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800311e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003120:	2302      	movs	r3, #2
 8003122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003128:	2303      	movs	r3, #3
 800312a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800312c:	230c      	movs	r3, #12
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003130:	f107 0314 	add.w	r3, r7, #20
 8003134:	4619      	mov	r1, r3
 8003136:	484c      	ldr	r0, [pc, #304]	; (8003268 <HAL_SD_MspInit+0x1e8>)
 8003138:	f001 f876 	bl	8004228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800313c:	2304      	movs	r3, #4
 800313e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003144:	2301      	movs	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003148:	2303      	movs	r3, #3
 800314a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800314c:	230c      	movs	r3, #12
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003150:	f107 0314 	add.w	r3, r7, #20
 8003154:	4619      	mov	r1, r3
 8003156:	4845      	ldr	r0, [pc, #276]	; (800326c <HAL_SD_MspInit+0x1ec>)
 8003158:	f001 f866 	bl	8004228 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800315c:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 800315e:	4a45      	ldr	r2, [pc, #276]	; (8003274 <HAL_SD_MspInit+0x1f4>)
 8003160:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003162:	4b43      	ldr	r3, [pc, #268]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 8003164:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003168:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800316a:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003170:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 8003172:	2200      	movs	r2, #0
 8003174:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003176:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 8003178:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800317c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800317e:	4b3c      	ldr	r3, [pc, #240]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 8003180:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003184:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003186:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 8003188:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800318c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800318e:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 8003190:	2220      	movs	r2, #32
 8003192:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003194:	4b36      	ldr	r3, [pc, #216]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 8003196:	2200      	movs	r2, #0
 8003198:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800319a:	4b35      	ldr	r3, [pc, #212]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 800319c:	2204      	movs	r2, #4
 800319e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80031a0:	4b33      	ldr	r3, [pc, #204]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 80031a2:	2203      	movs	r2, #3
 80031a4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80031a6:	4b32      	ldr	r3, [pc, #200]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 80031a8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80031ae:	4b30      	ldr	r3, [pc, #192]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 80031b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80031b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80031b6:	482e      	ldr	r0, [pc, #184]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 80031b8:	f000 fc9a 	bl	8003af0 <HAL_DMA_Init>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 80031c2:	f7ff fecf 	bl	8002f64 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a29      	ldr	r2, [pc, #164]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
 80031cc:	4a28      	ldr	r2, [pc, #160]	; (8003270 <HAL_SD_MspInit+0x1f0>)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80031d2:	4b29      	ldr	r3, [pc, #164]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 80031d4:	4a29      	ldr	r2, [pc, #164]	; (800327c <HAL_SD_MspInit+0x1fc>)
 80031d6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 80031da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031de:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 80031e2:	2240      	movs	r2, #64	; 0x40
 80031e4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031ec:	4b22      	ldr	r3, [pc, #136]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 80031ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031f4:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 80031f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031fa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031fc:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 80031fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003202:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003204:	4b1c      	ldr	r3, [pc, #112]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 8003206:	2220      	movs	r2, #32
 8003208:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800320a:	4b1b      	ldr	r3, [pc, #108]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 800320c:	2200      	movs	r2, #0
 800320e:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003210:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 8003212:	2204      	movs	r2, #4
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003216:	4b18      	ldr	r3, [pc, #96]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 8003218:	2203      	movs	r2, #3
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800321c:	4b16      	ldr	r3, [pc, #88]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 800321e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003224:	4b14      	ldr	r3, [pc, #80]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 8003226:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800322c:	4812      	ldr	r0, [pc, #72]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 800322e:	f000 fc5f 	bl	8003af0 <HAL_DMA_Init>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8003238:	f7ff fe94 	bl	8002f64 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a0e      	ldr	r2, [pc, #56]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 8003240:	63da      	str	r2, [r3, #60]	; 0x3c
 8003242:	4a0d      	ldr	r2, [pc, #52]	; (8003278 <HAL_SD_MspInit+0x1f8>)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2100      	movs	r1, #0
 800324c:	2031      	movs	r0, #49	; 0x31
 800324e:	f000 fc18 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003252:	2031      	movs	r0, #49	; 0x31
 8003254:	f000 fc31 	bl	8003aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003258:	bf00      	nop
 800325a:	3728      	adds	r7, #40	; 0x28
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40023800 	.word	0x40023800
 8003268:	40020800 	.word	0x40020800
 800326c:	40020c00 	.word	0x40020c00
 8003270:	20000884 	.word	0x20000884
 8003274:	40026458 	.word	0x40026458
 8003278:	20000a58 	.word	0x20000a58
 800327c:	400264a0 	.word	0x400264a0

08003280 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b08a      	sub	sp, #40	; 0x28
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003288:	f107 0314 	add.w	r3, r7, #20
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	60da      	str	r2, [r3, #12]
 8003296:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a4b      	ldr	r2, [pc, #300]	; (80033cc <HAL_SPI_MspInit+0x14c>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	f040 8090 	bne.w	80033c4 <HAL_SPI_MspInit+0x144>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80032a4:	2300      	movs	r3, #0
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <HAL_SPI_MspInit+0x150>)
 80032aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ac:	4a48      	ldr	r2, [pc, #288]	; (80033d0 <HAL_SPI_MspInit+0x150>)
 80032ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032b2:	6453      	str	r3, [r2, #68]	; 0x44
 80032b4:	4b46      	ldr	r3, [pc, #280]	; (80033d0 <HAL_SPI_MspInit+0x150>)
 80032b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	4b42      	ldr	r3, [pc, #264]	; (80033d0 <HAL_SPI_MspInit+0x150>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a41      	ldr	r2, [pc, #260]	; (80033d0 <HAL_SPI_MspInit+0x150>)
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	6313      	str	r3, [r2, #48]	; 0x30
 80032d0:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_SPI_MspInit+0x150>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 80032dc:	2338      	movs	r3, #56	; 0x38
 80032de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e8:	2303      	movs	r3, #3
 80032ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032ec:	2305      	movs	r3, #5
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4619      	mov	r1, r3
 80032f6:	4837      	ldr	r0, [pc, #220]	; (80033d4 <HAL_SPI_MspInit+0x154>)
 80032f8:	f000 ff96 	bl	8004228 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80032fc:	4b36      	ldr	r3, [pc, #216]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 80032fe:	4a37      	ldr	r2, [pc, #220]	; (80033dc <HAL_SPI_MspInit+0x15c>)
 8003300:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8003302:	4b35      	ldr	r3, [pc, #212]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 8003304:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003308:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800330a:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003310:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 8003312:	2200      	movs	r2, #0
 8003314:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003316:	4b30      	ldr	r3, [pc, #192]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 8003318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800331e:	4b2e      	ldr	r3, [pc, #184]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 8003320:	2200      	movs	r2, #0
 8003322:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003324:	4b2c      	ldr	r3, [pc, #176]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 8003326:	2200      	movs	r2, #0
 8003328:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800332a:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 800332c:	2200      	movs	r2, #0
 800332e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003330:	4b29      	ldr	r3, [pc, #164]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 8003332:	2200      	movs	r2, #0
 8003334:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003336:	4b28      	ldr	r3, [pc, #160]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 8003338:	2200      	movs	r2, #0
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800333c:	4826      	ldr	r0, [pc, #152]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 800333e:	f000 fbd7 	bl	8003af0 <HAL_DMA_Init>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003348:	f7ff fe0c 	bl	8002f64 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a22      	ldr	r2, [pc, #136]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 8003350:	64da      	str	r2, [r3, #76]	; 0x4c
 8003352:	4a21      	ldr	r2, [pc, #132]	; (80033d8 <HAL_SPI_MspInit+0x158>)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream5;
 8003358:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 800335a:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_SPI_MspInit+0x164>)
 800335c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 8003360:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003364:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003366:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 8003368:	2240      	movs	r2, #64	; 0x40
 800336a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800336c:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003372:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 8003374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003378:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800337a:	4b19      	ldr	r3, [pc, #100]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 800337c:	2200      	movs	r2, #0
 800337e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 8003382:	2200      	movs	r2, #0
 8003384:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8003386:	4b16      	ldr	r3, [pc, #88]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 8003388:	2200      	movs	r2, #0
 800338a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 800338e:	2200      	movs	r2, #0
 8003390:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 8003394:	2200      	movs	r2, #0
 8003396:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8003398:	4811      	ldr	r0, [pc, #68]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 800339a:	f000 fba9 	bl	8003af0 <HAL_DMA_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80033a4:	f7ff fdde 	bl	8002f64 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 80033ac:	649a      	str	r2, [r3, #72]	; 0x48
 80033ae:	4a0c      	ldr	r2, [pc, #48]	; (80033e0 <HAL_SPI_MspInit+0x160>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80033b4:	2200      	movs	r2, #0
 80033b6:	2100      	movs	r1, #0
 80033b8:	2023      	movs	r0, #35	; 0x23
 80033ba:	f000 fb62 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80033be:	2023      	movs	r0, #35	; 0x23
 80033c0:	f000 fb7b 	bl	8003aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80033c4:	bf00      	nop
 80033c6:	3728      	adds	r7, #40	; 0x28
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40013000 	.word	0x40013000
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40020400 	.word	0x40020400
 80033d8:	20000c14 	.word	0x20000c14
 80033dc:	40026410 	.word	0x40026410
 80033e0:	20000c74 	.word	0x20000c74
 80033e4:	40026488 	.word	0x40026488

080033e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a33      	ldr	r2, [pc, #204]	; (80034c4 <HAL_TIM_Base_MspInit+0xdc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10e      	bne.n	8003418 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	4b32      	ldr	r3, [pc, #200]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	4a31      	ldr	r2, [pc, #196]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6453      	str	r3, [r2, #68]	; 0x44
 800340a:	4b2f      	ldr	r3, [pc, #188]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003416:	e04e      	b.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003420:	d10e      	bne.n	8003440 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
 8003426:	4b28      	ldr	r3, [pc, #160]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	4a27      	ldr	r2, [pc, #156]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 800342c:	f043 0301 	orr.w	r3, r3, #1
 8003430:	6413      	str	r3, [r2, #64]	; 0x40
 8003432:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	69bb      	ldr	r3, [r7, #24]
}
 800343e:	e03a      	b.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a21      	ldr	r2, [pc, #132]	; (80034cc <HAL_TIM_Base_MspInit+0xe4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d10e      	bne.n	8003468 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 8003454:	f043 0302 	orr.w	r3, r3, #2
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	617b      	str	r3, [r7, #20]
 8003464:	697b      	ldr	r3, [r7, #20]
}
 8003466:	e026      	b.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a18      	ldr	r2, [pc, #96]	; (80034d0 <HAL_TIM_Base_MspInit+0xe8>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d10e      	bne.n	8003490 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b14      	ldr	r3, [pc, #80]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	4a13      	ldr	r2, [pc, #76]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 800347c:	f043 0304 	orr.w	r3, r3, #4
 8003480:	6413      	str	r3, [r2, #64]	; 0x40
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
}
 800348e:	e012      	b.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_TIM_Base_MspInit+0xec>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d10d      	bne.n	80034b6 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	4a09      	ldr	r2, [pc, #36]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 80034a4:	f043 0308 	orr.w	r3, r3, #8
 80034a8:	6413      	str	r3, [r2, #64]	; 0x40
 80034aa:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <HAL_TIM_Base_MspInit+0xe0>)
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	68fb      	ldr	r3, [r7, #12]
}
 80034b6:	bf00      	nop
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40000c00 	.word	0x40000c00

080034d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08a      	sub	sp, #40	; 0x28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e0:	f107 0314 	add.w	r3, r7, #20
 80034e4:	2200      	movs	r2, #0
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a24      	ldr	r2, [pc, #144]	; (8003588 <HAL_TIM_MspPostInit+0xb0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d11e      	bne.n	8003538 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <HAL_TIM_MspPostInit+0xb4>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003502:	4a22      	ldr	r2, [pc, #136]	; (800358c <HAL_TIM_MspPostInit+0xb4>)
 8003504:	f043 0302 	orr.w	r3, r3, #2
 8003508:	6313      	str	r3, [r2, #48]	; 0x30
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <HAL_TIM_MspPostInit+0xb4>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration    
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003516:	2303      	movs	r3, #3
 8003518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003526:	2302      	movs	r3, #2
 8003528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800352a:	f107 0314 	add.w	r3, r7, #20
 800352e:	4619      	mov	r1, r3
 8003530:	4817      	ldr	r0, [pc, #92]	; (8003590 <HAL_TIM_MspPostInit+0xb8>)
 8003532:	f000 fe79 	bl	8004228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8003536:	e022      	b.n	800357e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM5)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a15      	ldr	r2, [pc, #84]	; (8003594 <HAL_TIM_MspPostInit+0xbc>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d11d      	bne.n	800357e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <HAL_TIM_MspPostInit+0xb4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	4a10      	ldr	r2, [pc, #64]	; (800358c <HAL_TIM_MspPostInit+0xb4>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6313      	str	r3, [r2, #48]	; 0x30
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <HAL_TIM_MspPostInit+0xb4>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800355e:	230a      	movs	r3, #10
 8003560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800356e:	2302      	movs	r3, #2
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	4619      	mov	r1, r3
 8003578:	4807      	ldr	r0, [pc, #28]	; (8003598 <HAL_TIM_MspPostInit+0xc0>)
 800357a:	f000 fe55 	bl	8004228 <HAL_GPIO_Init>
}
 800357e:	bf00      	nop
 8003580:	3728      	adds	r7, #40	; 0x28
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40000400 	.word	0x40000400
 800358c:	40023800 	.word	0x40023800
 8003590:	40020400 	.word	0x40020400
 8003594:	40000c00 	.word	0x40000c00
 8003598:	40020000 	.word	0x40020000

0800359c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08a      	sub	sp, #40	; 0x28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 0314 	add.w	r3, r7, #20
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a19      	ldr	r2, [pc, #100]	; (8003620 <HAL_UART_MspInit+0x84>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d12c      	bne.n	8003618 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <HAL_UART_MspInit+0x88>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	4a17      	ldr	r2, [pc, #92]	; (8003624 <HAL_UART_MspInit+0x88>)
 80035c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035cc:	6413      	str	r3, [r2, #64]	; 0x40
 80035ce:	4b15      	ldr	r3, [pc, #84]	; (8003624 <HAL_UART_MspInit+0x88>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035d6:	613b      	str	r3, [r7, #16]
 80035d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_UART_MspInit+0x88>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	4a10      	ldr	r2, [pc, #64]	; (8003624 <HAL_UART_MspInit+0x88>)
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ea:	4b0e      	ldr	r3, [pc, #56]	; (8003624 <HAL_UART_MspInit+0x88>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	60fb      	str	r3, [r7, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80035f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035fc:	2302      	movs	r3, #2
 80035fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003604:	2303      	movs	r3, #3
 8003606:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003608:	2307      	movs	r3, #7
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360c:	f107 0314 	add.w	r3, r7, #20
 8003610:	4619      	mov	r1, r3
 8003612:	4805      	ldr	r0, [pc, #20]	; (8003628 <HAL_UART_MspInit+0x8c>)
 8003614:	f000 fe08 	bl	8004228 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003618:	bf00      	nop
 800361a:	3728      	adds	r7, #40	; 0x28
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40004800 	.word	0x40004800
 8003624:	40023800 	.word	0x40023800
 8003628:	40020400 	.word	0x40020400

0800362c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800363e:	e7fe      	b.n	800363e <HardFault_Handler+0x4>

08003640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003644:	e7fe      	b.n	8003644 <MemManage_Handler+0x4>

08003646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003646:	b480      	push	{r7}
 8003648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800364a:	e7fe      	b.n	800364a <BusFault_Handler+0x4>

0800364c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800364c:	b480      	push	{r7}
 800364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003650:	e7fe      	b.n	8003650 <UsageFault_Handler+0x4>

08003652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003652:	b480      	push	{r7}
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003656:	bf00      	nop
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800366e:	b480      	push	{r7}
 8003670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003672:	bf00      	nop
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003680:	f000 f8e2 	bl	8003848 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003684:	bf00      	nop
 8003686:	bd80      	pop	{r7, pc}

08003688 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800368c:	2040      	movs	r0, #64	; 0x40
 800368e:	f000 ff97 	bl	80045c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003692:	bf00      	nop
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <SPI1_IRQHandler+0x10>)
 800369e:	f005 f8a3 	bl	80087e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	20000b7c 	.word	0x20000b7c

080036ac <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80036b0:	4802      	ldr	r0, [pc, #8]	; (80036bc <SDIO_IRQHandler+0x10>)
 80036b2:	f004 f95f 	bl	8007974 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80036b6:	bf00      	nop
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	20000af8 	.word	0x20000af8

080036c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80036c4:	4802      	ldr	r0, [pc, #8]	; (80036d0 <DMA2_Stream0_IRQHandler+0x10>)
 80036c6:	f000 fb3b 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80036ca:	bf00      	nop
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000c14 	.word	0x20000c14

080036d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80036d8:	4802      	ldr	r0, [pc, #8]	; (80036e4 <DMA2_Stream3_IRQHandler+0x10>)
 80036da:	f000 fb31 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000884 	.word	0x20000884

080036e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80036ec:	4802      	ldr	r0, [pc, #8]	; (80036f8 <OTG_FS_IRQHandler+0x10>)
 80036ee:	f002 f898 	bl	8005822 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80036f2:	bf00      	nop
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	200029dc 	.word	0x200029dc

080036fc <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8003700:	4802      	ldr	r0, [pc, #8]	; (800370c <DMA2_Stream5_IRQHandler+0x10>)
 8003702:	f000 fb1d 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000c74 	.word	0x20000c74

08003710 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003714:	4802      	ldr	r0, [pc, #8]	; (8003720 <DMA2_Stream6_IRQHandler+0x10>)
 8003716:	f000 fb13 	bl	8003d40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000a58 	.word	0x20000a58

08003724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003728:	4b08      	ldr	r3, [pc, #32]	; (800374c <SystemInit+0x28>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	4a07      	ldr	r2, [pc, #28]	; (800374c <SystemInit+0x28>)
 8003730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <SystemInit+0x28>)
 800373a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800373e:	609a      	str	r2, [r3, #8]
#endif
}
 8003740:	bf00      	nop
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003788 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003754:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003756:	e003      	b.n	8003760 <LoopCopyDataInit>

08003758 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800375a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800375c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800375e:	3104      	adds	r1, #4

08003760 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003760:	480b      	ldr	r0, [pc, #44]	; (8003790 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003762:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003764:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003766:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003768:	d3f6      	bcc.n	8003758 <CopyDataInit>
  ldr  r2, =_sbss
 800376a:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800376c:	e002      	b.n	8003774 <LoopFillZerobss>

0800376e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800376e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003770:	f842 3b04 	str.w	r3, [r2], #4

08003774 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003774:	4b09      	ldr	r3, [pc, #36]	; (800379c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003776:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003778:	d3f9      	bcc.n	800376e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800377a:	f7ff ffd3 	bl	8003724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800377e:	f00a fe71 	bl	800e464 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003782:	f7fe ff49 	bl	8002618 <main>
  bx  lr    
 8003786:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003788:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800378c:	08013a38 	.word	0x08013a38
  ldr  r0, =_sdata
 8003790:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003794:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8003798:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 800379c:	20002de8 	.word	0x20002de8

080037a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a0:	e7fe      	b.n	80037a0 <ADC_IRQHandler>
	...

080037a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037a8:	4b0e      	ldr	r3, [pc, #56]	; (80037e4 <HAL_Init+0x40>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0d      	ldr	r2, [pc, #52]	; (80037e4 <HAL_Init+0x40>)
 80037ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037b4:	4b0b      	ldr	r3, [pc, #44]	; (80037e4 <HAL_Init+0x40>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a0a      	ldr	r2, [pc, #40]	; (80037e4 <HAL_Init+0x40>)
 80037ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <HAL_Init+0x40>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a07      	ldr	r2, [pc, #28]	; (80037e4 <HAL_Init+0x40>)
 80037c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037cc:	2003      	movs	r0, #3
 80037ce:	f000 f94d 	bl	8003a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f000 f808 	bl	80037e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037d8:	f7ff fbcc 	bl	8002f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037f0:	4b12      	ldr	r3, [pc, #72]	; (800383c <HAL_InitTick+0x54>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_InitTick+0x58>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4619      	mov	r1, r3
 80037fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	4618      	mov	r0, r3
 8003808:	f000 f965 	bl	8003ad6 <HAL_SYSTICK_Config>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e00e      	b.n	8003834 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b0f      	cmp	r3, #15
 800381a:	d80a      	bhi.n	8003832 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800381c:	2200      	movs	r2, #0
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	f04f 30ff 	mov.w	r0, #4294967295
 8003824:	f000 f92d 	bl	8003a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003828:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_InitTick+0x5c>)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	e000      	b.n	8003834 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000000 	.word	0x20000000
 8003840:	20000008 	.word	0x20000008
 8003844:	20000004 	.word	0x20000004

08003848 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <HAL_IncTick+0x20>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	4b06      	ldr	r3, [pc, #24]	; (800386c <HAL_IncTick+0x24>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4413      	add	r3, r2
 8003858:	4a04      	ldr	r2, [pc, #16]	; (800386c <HAL_IncTick+0x24>)
 800385a:	6013      	str	r3, [r2, #0]
}
 800385c:	bf00      	nop
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	20000008 	.word	0x20000008
 800386c:	20000cd4 	.word	0x20000cd4

08003870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return uwTick;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_GetTick+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000cd4 	.word	0x20000cd4

08003888 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003890:	f7ff ffee 	bl	8003870 <HAL_GetTick>
 8003894:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a0:	d005      	beq.n	80038ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038a2:	4b09      	ldr	r3, [pc, #36]	; (80038c8 <HAL_Delay+0x40>)
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038ae:	bf00      	nop
 80038b0:	f7ff ffde 	bl	8003870 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d8f7      	bhi.n	80038b0 <HAL_Delay+0x28>
  {
  }
}
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000008 	.word	0x20000008

080038cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038e8:	4013      	ands	r3, r2
 80038ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fe:	4a04      	ldr	r2, [pc, #16]	; (8003910 <__NVIC_SetPriorityGrouping+0x44>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	60d3      	str	r3, [r2, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003918:	4b04      	ldr	r3, [pc, #16]	; (800392c <__NVIC_GetPriorityGrouping+0x18>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	0a1b      	lsrs	r3, r3, #8
 800391e:	f003 0307 	and.w	r3, r3, #7
}
 8003922:	4618      	mov	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	2b00      	cmp	r3, #0
 8003940:	db0b      	blt.n	800395a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003942:	79fb      	ldrb	r3, [r7, #7]
 8003944:	f003 021f 	and.w	r2, r3, #31
 8003948:	4907      	ldr	r1, [pc, #28]	; (8003968 <__NVIC_EnableIRQ+0x38>)
 800394a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	2001      	movs	r0, #1
 8003952:	fa00 f202 	lsl.w	r2, r0, r2
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800395a:	bf00      	nop
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000e100 	.word	0xe000e100

0800396c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	6039      	str	r1, [r7, #0]
 8003976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	db0a      	blt.n	8003996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	b2da      	uxtb	r2, r3
 8003984:	490c      	ldr	r1, [pc, #48]	; (80039b8 <__NVIC_SetPriority+0x4c>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	0112      	lsls	r2, r2, #4
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	440b      	add	r3, r1
 8003990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003994:	e00a      	b.n	80039ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	4908      	ldr	r1, [pc, #32]	; (80039bc <__NVIC_SetPriority+0x50>)
 800399c:	79fb      	ldrb	r3, [r7, #7]
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	3b04      	subs	r3, #4
 80039a4:	0112      	lsls	r2, r2, #4
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	440b      	add	r3, r1
 80039aa:	761a      	strb	r2, [r3, #24]
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000e100 	.word	0xe000e100
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b089      	sub	sp, #36	; 0x24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f1c3 0307 	rsb	r3, r3, #7
 80039da:	2b04      	cmp	r3, #4
 80039dc:	bf28      	it	cs
 80039de:	2304      	movcs	r3, #4
 80039e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3304      	adds	r3, #4
 80039e6:	2b06      	cmp	r3, #6
 80039e8:	d902      	bls.n	80039f0 <NVIC_EncodePriority+0x30>
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	3b03      	subs	r3, #3
 80039ee:	e000      	b.n	80039f2 <NVIC_EncodePriority+0x32>
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f4:	f04f 32ff 	mov.w	r2, #4294967295
 80039f8:	69bb      	ldr	r3, [r7, #24]
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	401a      	ands	r2, r3
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a08:	f04f 31ff 	mov.w	r1, #4294967295
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a12:	43d9      	mvns	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	4313      	orrs	r3, r2
         );
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	; 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
	...

08003a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a38:	d301      	bcc.n	8003a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00f      	b.n	8003a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a3e:	4a0a      	ldr	r2, [pc, #40]	; (8003a68 <SysTick_Config+0x40>)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a46:	210f      	movs	r1, #15
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295
 8003a4c:	f7ff ff8e 	bl	800396c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a50:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <SysTick_Config+0x40>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a56:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <SysTick_Config+0x40>)
 8003a58:	2207      	movs	r2, #7
 8003a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	e000e010 	.word	0xe000e010

08003a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff ff29 	bl	80038cc <__NVIC_SetPriorityGrouping>
}
 8003a7a:	bf00      	nop
 8003a7c:	3708      	adds	r7, #8
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	4603      	mov	r3, r0
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a94:	f7ff ff3e 	bl	8003914 <__NVIC_GetPriorityGrouping>
 8003a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	68b9      	ldr	r1, [r7, #8]
 8003a9e:	6978      	ldr	r0, [r7, #20]
 8003aa0:	f7ff ff8e 	bl	80039c0 <NVIC_EncodePriority>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aaa:	4611      	mov	r1, r2
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff ff5d 	bl	800396c <__NVIC_SetPriority>
}
 8003ab2:	bf00      	nop
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff ff31 	bl	8003930 <__NVIC_EnableIRQ>
}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7ff ffa2 	bl	8003a28 <SysTick_Config>
 8003ae4:	4603      	mov	r3, r0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
	...

08003af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003afc:	f7ff feb8 	bl	8003870 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e099      	b.n	8003c40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 0201 	bic.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b2c:	e00f      	b.n	8003b4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b2e:	f7ff fe9f 	bl	8003870 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b05      	cmp	r3, #5
 8003b3a:	d908      	bls.n	8003b4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2203      	movs	r2, #3
 8003b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e078      	b.n	8003c40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e8      	bne.n	8003b2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b64:	697a      	ldr	r2, [r7, #20]
 8003b66:	4b38      	ldr	r3, [pc, #224]	; (8003c48 <HAL_DMA_Init+0x158>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d107      	bne.n	8003bb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0307 	bic.w	r3, r3, #7
 8003bce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d117      	bne.n	8003c12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fa9d 	bl	8004134 <DMA_CheckFifoParam>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2240      	movs	r2, #64	; 0x40
 8003c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e016      	b.n	8003c40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa54 	bl	80040c8 <DMA_CalcBaseAndBitshift>
 8003c20:	4603      	mov	r3, r0
 8003c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c28:	223f      	movs	r2, #63	; 0x3f
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	f010803f 	.word	0xf010803f

08003c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_DMA_Start_IT+0x26>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e040      	b.n	8003cf4 <HAL_DMA_Start_IT+0xa8>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d12f      	bne.n	8003ce6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2202      	movs	r2, #2
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68b9      	ldr	r1, [r7, #8]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f9e6 	bl	800406c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	223f      	movs	r2, #63	; 0x3f
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f042 0216 	orr.w	r2, r2, #22
 8003cba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d007      	beq.n	8003cd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f042 0208 	orr.w	r2, r2, #8
 8003cd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e005      	b.n	8003cf2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d004      	beq.n	8003d1a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2280      	movs	r2, #128	; 0x80
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e00c      	b.n	8003d34 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 0201 	bic.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d4c:	4b92      	ldr	r3, [pc, #584]	; (8003f98 <HAL_DMA_IRQHandler+0x258>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a92      	ldr	r2, [pc, #584]	; (8003f9c <HAL_DMA_IRQHandler+0x25c>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	0a9b      	lsrs	r3, r3, #10
 8003d58:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	2208      	movs	r2, #8
 8003d6c:	409a      	lsls	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d01a      	beq.n	8003dac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d013      	beq.n	8003dac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0204 	bic.w	r2, r2, #4
 8003d92:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	2208      	movs	r2, #8
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	2201      	movs	r2, #1
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d012      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dce:	2201      	movs	r2, #1
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f043 0202 	orr.w	r2, r3, #2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de6:	2204      	movs	r2, #4
 8003de8:	409a      	lsls	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4013      	ands	r3, r2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d012      	beq.n	8003e18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00b      	beq.n	8003e18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e04:	2204      	movs	r2, #4
 8003e06:	409a      	lsls	r2, r3
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e10:	f043 0204 	orr.w	r2, r3, #4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	2210      	movs	r2, #16
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d043      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0308 	and.w	r3, r3, #8
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d03c      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	409a      	lsls	r2, r3
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d018      	beq.n	8003e82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d108      	bne.n	8003e70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d024      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
 8003e6e:	e01f      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01b      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
 8003e80:	e016      	b.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d107      	bne.n	8003ea0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0208 	bic.w	r2, r2, #8
 8003e9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 808e 	beq.w	8003fde <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 8086 	beq.w	8003fde <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d136      	bne.n	8003f58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0216 	bic.w	r2, r2, #22
 8003ef8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	695a      	ldr	r2, [r3, #20]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d103      	bne.n	8003f1a <HAL_DMA_IRQHandler+0x1da>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f022 0208 	bic.w	r2, r2, #8
 8003f28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	223f      	movs	r2, #63	; 0x3f
 8003f30:	409a      	lsls	r2, r3
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d07d      	beq.n	800404a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	4798      	blx	r3
        }
        return;
 8003f56:	e078      	b.n	800404a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d01c      	beq.n	8003fa0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d108      	bne.n	8003f86 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d030      	beq.n	8003fde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
 8003f84:	e02b      	b.n	8003fde <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d027      	beq.n	8003fde <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	6878      	ldr	r0, [r7, #4]
 8003f94:	4798      	blx	r3
 8003f96:	e022      	b.n	8003fde <HAL_DMA_IRQHandler+0x29e>
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10f      	bne.n	8003fce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0210 	bic.w	r2, r2, #16
 8003fbc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d003      	beq.n	8003fde <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d032      	beq.n	800404c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d022      	beq.n	8004038 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2205      	movs	r2, #5
 8003ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	3301      	adds	r3, #1
 800400e:	60bb      	str	r3, [r7, #8]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	429a      	cmp	r2, r3
 8004014:	d307      	bcc.n	8004026 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1f2      	bne.n	800400a <HAL_DMA_IRQHandler+0x2ca>
 8004024:	e000      	b.n	8004028 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004026:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
 8004048:	e000      	b.n	800404c <HAL_DMA_IRQHandler+0x30c>
        return;
 800404a:	bf00      	nop
    }
  }
}
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop

08004054 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004060:	4618      	mov	r0, r3
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
 8004078:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004088:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b40      	cmp	r3, #64	; 0x40
 8004098:	d108      	bne.n	80040ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80040aa:	e007      	b.n	80040bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	60da      	str	r2, [r3, #12]
}
 80040bc:	bf00      	nop
 80040be:	3714      	adds	r7, #20
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b085      	sub	sp, #20
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	3b10      	subs	r3, #16
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <DMA_CalcBaseAndBitshift+0x64>)
 80040da:	fba2 2303 	umull	r2, r3, r2, r3
 80040de:	091b      	lsrs	r3, r3, #4
 80040e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040e2:	4a13      	ldr	r2, [pc, #76]	; (8004130 <DMA_CalcBaseAndBitshift+0x68>)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	461a      	mov	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d909      	bls.n	800410a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040fe:	f023 0303 	bic.w	r3, r3, #3
 8004102:	1d1a      	adds	r2, r3, #4
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	659a      	str	r2, [r3, #88]	; 0x58
 8004108:	e007      	b.n	800411a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	aaaaaaab 	.word	0xaaaaaaab
 8004130:	08013710 	.word	0x08013710

08004134 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004144:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d11f      	bne.n	800418e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b03      	cmp	r3, #3
 8004152:	d855      	bhi.n	8004200 <DMA_CheckFifoParam+0xcc>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <DMA_CheckFifoParam+0x28>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	0800416d 	.word	0x0800416d
 8004160:	0800417f 	.word	0x0800417f
 8004164:	0800416d 	.word	0x0800416d
 8004168:	08004201 	.word	0x08004201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d045      	beq.n	8004204 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417c:	e042      	b.n	8004204 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004186:	d13f      	bne.n	8004208 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800418c:	e03c      	b.n	8004208 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004196:	d121      	bne.n	80041dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b03      	cmp	r3, #3
 800419c:	d836      	bhi.n	800420c <DMA_CheckFifoParam+0xd8>
 800419e:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <DMA_CheckFifoParam+0x70>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041b5 	.word	0x080041b5
 80041a8:	080041bb 	.word	0x080041bb
 80041ac:	080041b5 	.word	0x080041b5
 80041b0:	080041cd 	.word	0x080041cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	73fb      	strb	r3, [r7, #15]
      break;
 80041b8:	e02f      	b.n	800421a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d024      	beq.n	8004210 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ca:	e021      	b.n	8004210 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041d4:	d11e      	bne.n	8004214 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041da:	e01b      	b.n	8004214 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d902      	bls.n	80041e8 <DMA_CheckFifoParam+0xb4>
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d003      	beq.n	80041ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041e6:	e018      	b.n	800421a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      break;
 80041ec:	e015      	b.n	800421a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00e      	beq.n	8004218 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
      break;
 80041fe:	e00b      	b.n	8004218 <DMA_CheckFifoParam+0xe4>
      break;
 8004200:	bf00      	nop
 8004202:	e00a      	b.n	800421a <DMA_CheckFifoParam+0xe6>
      break;
 8004204:	bf00      	nop
 8004206:	e008      	b.n	800421a <DMA_CheckFifoParam+0xe6>
      break;
 8004208:	bf00      	nop
 800420a:	e006      	b.n	800421a <DMA_CheckFifoParam+0xe6>
      break;
 800420c:	bf00      	nop
 800420e:	e004      	b.n	800421a <DMA_CheckFifoParam+0xe6>
      break;
 8004210:	bf00      	nop
 8004212:	e002      	b.n	800421a <DMA_CheckFifoParam+0xe6>
      break;   
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <DMA_CheckFifoParam+0xe6>
      break;
 8004218:	bf00      	nop
    }
  } 
  
  return status; 
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800423a:	2300      	movs	r3, #0
 800423c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	e16b      	b.n	800451c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004244:	2201      	movs	r2, #1
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	4013      	ands	r3, r2
 8004256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	429a      	cmp	r2, r3
 800425e:	f040 815a 	bne.w	8004516 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d00b      	beq.n	8004282 <HAL_GPIO_Init+0x5a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d007      	beq.n	8004282 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004276:	2b11      	cmp	r3, #17
 8004278:	d003      	beq.n	8004282 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b12      	cmp	r3, #18
 8004280:	d130      	bne.n	80042e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	2203      	movs	r2, #3
 800428e:	fa02 f303 	lsl.w	r3, r2, r3
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042b8:	2201      	movs	r2, #1
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	091b      	lsrs	r3, r3, #4
 80042ce:	f003 0201 	and.w	r2, r3, #1
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	2203      	movs	r2, #3
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	fa02 f303 	lsl.w	r3, r2, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4313      	orrs	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d003      	beq.n	8004324 <HAL_GPIO_Init+0xfc>
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	2b12      	cmp	r3, #18
 8004322:	d123      	bne.n	800436c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	08da      	lsrs	r2, r3, #3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3208      	adds	r2, #8
 800432c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	220f      	movs	r2, #15
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	69ba      	ldr	r2, [r7, #24]
 800435a:	4313      	orrs	r3, r2
 800435c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	08da      	lsrs	r2, r3, #3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3208      	adds	r2, #8
 8004366:	69b9      	ldr	r1, [r7, #24]
 8004368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	2203      	movs	r2, #3
 8004378:	fa02 f303 	lsl.w	r3, r2, r3
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 0203 	and.w	r2, r3, #3
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	005b      	lsls	r3, r3, #1
 8004390:	fa02 f303 	lsl.w	r3, r2, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80b4 	beq.w	8004516 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	60fb      	str	r3, [r7, #12]
 80043b2:	4b5f      	ldr	r3, [pc, #380]	; (8004530 <HAL_GPIO_Init+0x308>)
 80043b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b6:	4a5e      	ldr	r2, [pc, #376]	; (8004530 <HAL_GPIO_Init+0x308>)
 80043b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043bc:	6453      	str	r3, [r2, #68]	; 0x44
 80043be:	4b5c      	ldr	r3, [pc, #368]	; (8004530 <HAL_GPIO_Init+0x308>)
 80043c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ca:	4a5a      	ldr	r2, [pc, #360]	; (8004534 <HAL_GPIO_Init+0x30c>)
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	089b      	lsrs	r3, r3, #2
 80043d0:	3302      	adds	r3, #2
 80043d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	220f      	movs	r2, #15
 80043e2:	fa02 f303 	lsl.w	r3, r2, r3
 80043e6:	43db      	mvns	r3, r3
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4013      	ands	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_GPIO_Init+0x310>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d02b      	beq.n	800444e <HAL_GPIO_Init+0x226>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a50      	ldr	r2, [pc, #320]	; (800453c <HAL_GPIO_Init+0x314>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d025      	beq.n	800444a <HAL_GPIO_Init+0x222>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a4f      	ldr	r2, [pc, #316]	; (8004540 <HAL_GPIO_Init+0x318>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01f      	beq.n	8004446 <HAL_GPIO_Init+0x21e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4e      	ldr	r2, [pc, #312]	; (8004544 <HAL_GPIO_Init+0x31c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d019      	beq.n	8004442 <HAL_GPIO_Init+0x21a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a4d      	ldr	r2, [pc, #308]	; (8004548 <HAL_GPIO_Init+0x320>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <HAL_GPIO_Init+0x216>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4c      	ldr	r2, [pc, #304]	; (800454c <HAL_GPIO_Init+0x324>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00d      	beq.n	800443a <HAL_GPIO_Init+0x212>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4b      	ldr	r2, [pc, #300]	; (8004550 <HAL_GPIO_Init+0x328>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d007      	beq.n	8004436 <HAL_GPIO_Init+0x20e>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a4a      	ldr	r2, [pc, #296]	; (8004554 <HAL_GPIO_Init+0x32c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_GPIO_Init+0x20a>
 800442e:	2307      	movs	r3, #7
 8004430:	e00e      	b.n	8004450 <HAL_GPIO_Init+0x228>
 8004432:	2308      	movs	r3, #8
 8004434:	e00c      	b.n	8004450 <HAL_GPIO_Init+0x228>
 8004436:	2306      	movs	r3, #6
 8004438:	e00a      	b.n	8004450 <HAL_GPIO_Init+0x228>
 800443a:	2305      	movs	r3, #5
 800443c:	e008      	b.n	8004450 <HAL_GPIO_Init+0x228>
 800443e:	2304      	movs	r3, #4
 8004440:	e006      	b.n	8004450 <HAL_GPIO_Init+0x228>
 8004442:	2303      	movs	r3, #3
 8004444:	e004      	b.n	8004450 <HAL_GPIO_Init+0x228>
 8004446:	2302      	movs	r3, #2
 8004448:	e002      	b.n	8004450 <HAL_GPIO_Init+0x228>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_GPIO_Init+0x228>
 800444e:	2300      	movs	r3, #0
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	f002 0203 	and.w	r2, r2, #3
 8004456:	0092      	lsls	r2, r2, #2
 8004458:	4093      	lsls	r3, r2
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004460:	4934      	ldr	r1, [pc, #208]	; (8004534 <HAL_GPIO_Init+0x30c>)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	089b      	lsrs	r3, r3, #2
 8004466:	3302      	adds	r3, #2
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800446e:	4b3a      	ldr	r3, [pc, #232]	; (8004558 <HAL_GPIO_Init+0x330>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	43db      	mvns	r3, r3
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4013      	ands	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004492:	4a31      	ldr	r2, [pc, #196]	; (8004558 <HAL_GPIO_Init+0x330>)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004498:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <HAL_GPIO_Init+0x330>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	4013      	ands	r3, r2
 80044a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d003      	beq.n	80044bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044bc:	4a26      	ldr	r2, [pc, #152]	; (8004558 <HAL_GPIO_Init+0x330>)
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044c2:	4b25      	ldr	r3, [pc, #148]	; (8004558 <HAL_GPIO_Init+0x330>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	43db      	mvns	r3, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4013      	ands	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044e6:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <HAL_GPIO_Init+0x330>)
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044ec:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <HAL_GPIO_Init+0x330>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004510:	4a11      	ldr	r2, [pc, #68]	; (8004558 <HAL_GPIO_Init+0x330>)
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	3301      	adds	r3, #1
 800451a:	61fb      	str	r3, [r7, #28]
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	2b0f      	cmp	r3, #15
 8004520:	f67f ae90 	bls.w	8004244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004524:	bf00      	nop
 8004526:	3724      	adds	r7, #36	; 0x24
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	40023800 	.word	0x40023800
 8004534:	40013800 	.word	0x40013800
 8004538:	40020000 	.word	0x40020000
 800453c:	40020400 	.word	0x40020400
 8004540:	40020800 	.word	0x40020800
 8004544:	40020c00 	.word	0x40020c00
 8004548:	40021000 	.word	0x40021000
 800454c:	40021400 	.word	0x40021400
 8004550:	40021800 	.word	0x40021800
 8004554:	40021c00 	.word	0x40021c00
 8004558:	40013c00 	.word	0x40013c00

0800455c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	460b      	mov	r3, r1
 8004566:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	887b      	ldrh	r3, [r7, #2]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	e001      	b.n	800457e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800457e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	460b      	mov	r3, r1
 8004596:	807b      	strh	r3, [r7, #2]
 8004598:	4613      	mov	r3, r2
 800459a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800459c:	787b      	ldrb	r3, [r7, #1]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045a2:	887a      	ldrh	r2, [r7, #2]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045a8:	e003      	b.n	80045b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045aa:	887b      	ldrh	r3, [r7, #2]
 80045ac:	041a      	lsls	r2, r3, #16
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	619a      	str	r2, [r3, #24]
}
 80045b2:	bf00      	nop
 80045b4:	370c      	adds	r7, #12
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
	...

080045c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045ca:	4b08      	ldr	r3, [pc, #32]	; (80045ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045cc:	695a      	ldr	r2, [r3, #20]
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d006      	beq.n	80045e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045d6:	4a05      	ldr	r2, [pc, #20]	; (80045ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045dc:	88fb      	ldrh	r3, [r7, #6]
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 f806 	bl	80045f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80045e4:	bf00      	nop
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	40013c00 	.word	0x40013c00

080045f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	4603      	mov	r3, r0
 80045f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045fa:	bf00      	nop
 80045fc:	370c      	adds	r7, #12
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr
	...

08004608 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e11f      	b.n	800485a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fe fcc8 	bl	8002fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800465a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800466a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800466c:	f002 fd28 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 8004670:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4a7b      	ldr	r2, [pc, #492]	; (8004864 <HAL_I2C_Init+0x25c>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d807      	bhi.n	800468c <HAL_I2C_Init+0x84>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	4a7a      	ldr	r2, [pc, #488]	; (8004868 <HAL_I2C_Init+0x260>)
 8004680:	4293      	cmp	r3, r2
 8004682:	bf94      	ite	ls
 8004684:	2301      	movls	r3, #1
 8004686:	2300      	movhi	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e006      	b.n	800469a <HAL_I2C_Init+0x92>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a77      	ldr	r2, [pc, #476]	; (800486c <HAL_I2C_Init+0x264>)
 8004690:	4293      	cmp	r3, r2
 8004692:	bf94      	ite	ls
 8004694:	2301      	movls	r3, #1
 8004696:	2300      	movhi	r3, #0
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d001      	beq.n	80046a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e0db      	b.n	800485a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a72      	ldr	r2, [pc, #456]	; (8004870 <HAL_I2C_Init+0x268>)
 80046a6:	fba2 2303 	umull	r2, r3, r2, r3
 80046aa:	0c9b      	lsrs	r3, r3, #18
 80046ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	68ba      	ldr	r2, [r7, #8]
 80046be:	430a      	orrs	r2, r1
 80046c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a64      	ldr	r2, [pc, #400]	; (8004864 <HAL_I2C_Init+0x25c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d802      	bhi.n	80046dc <HAL_I2C_Init+0xd4>
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	3301      	adds	r3, #1
 80046da:	e009      	b.n	80046f0 <HAL_I2C_Init+0xe8>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80046e2:	fb02 f303 	mul.w	r3, r2, r3
 80046e6:	4a63      	ldr	r2, [pc, #396]	; (8004874 <HAL_I2C_Init+0x26c>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	3301      	adds	r3, #1
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004702:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4956      	ldr	r1, [pc, #344]	; (8004864 <HAL_I2C_Init+0x25c>)
 800470c:	428b      	cmp	r3, r1
 800470e:	d80d      	bhi.n	800472c <HAL_I2C_Init+0x124>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1e59      	subs	r1, r3, #1
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fbb1 f3f3 	udiv	r3, r1, r3
 800471e:	3301      	adds	r3, #1
 8004720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004724:	2b04      	cmp	r3, #4
 8004726:	bf38      	it	cc
 8004728:	2304      	movcc	r3, #4
 800472a:	e04f      	b.n	80047cc <HAL_I2C_Init+0x1c4>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d111      	bne.n	8004758 <HAL_I2C_Init+0x150>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	1e58      	subs	r0, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	005b      	lsls	r3, r3, #1
 8004740:	440b      	add	r3, r1
 8004742:	fbb0 f3f3 	udiv	r3, r0, r3
 8004746:	3301      	adds	r3, #1
 8004748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e012      	b.n	800477e <HAL_I2C_Init+0x176>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	1e58      	subs	r0, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6859      	ldr	r1, [r3, #4]
 8004760:	460b      	mov	r3, r1
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	0099      	lsls	r1, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	fbb0 f3f3 	udiv	r3, r0, r3
 800476e:	3301      	adds	r3, #1
 8004770:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf0c      	ite	eq
 8004778:	2301      	moveq	r3, #1
 800477a:	2300      	movne	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <HAL_I2C_Init+0x17e>
 8004782:	2301      	movs	r3, #1
 8004784:	e022      	b.n	80047cc <HAL_I2C_Init+0x1c4>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10e      	bne.n	80047ac <HAL_I2C_Init+0x1a4>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1e58      	subs	r0, r3, #1
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6859      	ldr	r1, [r3, #4]
 8004796:	460b      	mov	r3, r1
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	440b      	add	r3, r1
 800479c:	fbb0 f3f3 	udiv	r3, r0, r3
 80047a0:	3301      	adds	r3, #1
 80047a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047aa:	e00f      	b.n	80047cc <HAL_I2C_Init+0x1c4>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	1e58      	subs	r0, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6859      	ldr	r1, [r3, #4]
 80047b4:	460b      	mov	r3, r1
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	0099      	lsls	r1, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	fbb0 f3f3 	udiv	r3, r0, r3
 80047c2:	3301      	adds	r3, #1
 80047c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80047cc:	6879      	ldr	r1, [r7, #4]
 80047ce:	6809      	ldr	r1, [r1, #0]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047fe:	687a      	ldr	r2, [r7, #4]
 8004800:	6911      	ldr	r1, [r2, #16]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68d2      	ldr	r2, [r2, #12]
 8004806:	4311      	orrs	r1, r2
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	430b      	orrs	r3, r1
 800480e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	431a      	orrs	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	000186a0 	.word	0x000186a0
 8004868:	001e847f 	.word	0x001e847f
 800486c:	003d08ff 	.word	0x003d08ff
 8004870:	431bde83 	.word	0x431bde83
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af02      	add	r7, sp, #8
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	4608      	mov	r0, r1
 8004882:	4611      	mov	r1, r2
 8004884:	461a      	mov	r2, r3
 8004886:	4603      	mov	r3, r0
 8004888:	817b      	strh	r3, [r7, #10]
 800488a:	460b      	mov	r3, r1
 800488c:	813b      	strh	r3, [r7, #8]
 800488e:	4613      	mov	r3, r2
 8004890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004892:	f7fe ffed 	bl	8003870 <HAL_GetTick>
 8004896:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	f040 80d9 	bne.w	8004a58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	2319      	movs	r3, #25
 80048ac:	2201      	movs	r2, #1
 80048ae:	496d      	ldr	r1, [pc, #436]	; (8004a64 <HAL_I2C_Mem_Write+0x1ec>)
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f000 fc89 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80048bc:	2302      	movs	r3, #2
 80048be:	e0cc      	b.n	8004a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d101      	bne.n	80048ce <HAL_I2C_Mem_Write+0x56>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e0c5      	b.n	8004a5a <HAL_I2C_Mem_Write+0x1e2>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d007      	beq.n	80048f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2221      	movs	r2, #33	; 0x21
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2240      	movs	r2, #64	; 0x40
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2200      	movs	r2, #0
 8004918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a3a      	ldr	r2, [r7, #32]
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a4d      	ldr	r2, [pc, #308]	; (8004a68 <HAL_I2C_Mem_Write+0x1f0>)
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004936:	88f8      	ldrh	r0, [r7, #6]
 8004938:	893a      	ldrh	r2, [r7, #8]
 800493a:	8979      	ldrh	r1, [r7, #10]
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	9301      	str	r3, [sp, #4]
 8004940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	4603      	mov	r3, r0
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fac4 	bl	8004ed4 <I2C_RequestMemoryWrite>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d052      	beq.n	80049f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e081      	b.n	8004a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 fd0a 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00d      	beq.n	8004982 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	2b04      	cmp	r3, #4
 800496c:	d107      	bne.n	800497e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800497c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e06b      	b.n	8004a5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	781a      	ldrb	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d11b      	bne.n	80049f8 <HAL_I2C_Mem_Write+0x180>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d017      	beq.n	80049f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049cc:	781a      	ldrb	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049e2:	3b01      	subs	r3, #1
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	3b01      	subs	r3, #1
 80049f2:	b29a      	uxth	r2, r3
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1aa      	bne.n	8004956 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 fcf6 	bl	80053f6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00d      	beq.n	8004a2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d107      	bne.n	8004a28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e016      	b.n	8004a5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3718      	adds	r7, #24
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	00100002 	.word	0x00100002
 8004a68:	ffff0000 	.word	0xffff0000

08004a6c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08c      	sub	sp, #48	; 0x30
 8004a70:	af02      	add	r7, sp, #8
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	4608      	mov	r0, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	817b      	strh	r3, [r7, #10]
 8004a7e:	460b      	mov	r3, r1
 8004a80:	813b      	strh	r3, [r7, #8]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a86:	f7fe fef3 	bl	8003870 <HAL_GetTick>
 8004a8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b20      	cmp	r3, #32
 8004a96:	f040 8208 	bne.w	8004eaa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	2319      	movs	r3, #25
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	497b      	ldr	r1, [pc, #492]	; (8004c90 <HAL_I2C_Mem_Read+0x224>)
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fb8f 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e1fb      	b.n	8004eac <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_I2C_Mem_Read+0x56>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e1f4      	b.n	8004eac <HAL_I2C_Mem_Read+0x440>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d007      	beq.n	8004ae8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0201 	orr.w	r2, r2, #1
 8004ae6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004af6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2222      	movs	r2, #34	; 0x22
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2240      	movs	r2, #64	; 0x40
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a5b      	ldr	r2, [pc, #364]	; (8004c94 <HAL_I2C_Mem_Read+0x228>)
 8004b28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004b2a:	88f8      	ldrh	r0, [r7, #6]
 8004b2c:	893a      	ldrh	r2, [r7, #8]
 8004b2e:	8979      	ldrh	r1, [r7, #10]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	9301      	str	r3, [sp, #4]
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	9300      	str	r3, [sp, #0]
 8004b38:	4603      	mov	r3, r0
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fa5e 	bl	8004ffc <I2C_RequestMemoryRead>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e1b0      	b.n	8004eac <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d113      	bne.n	8004b7a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b52:	2300      	movs	r3, #0
 8004b54:	623b      	str	r3, [r7, #32]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	623b      	str	r3, [r7, #32]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	623b      	str	r3, [r7, #32]
 8004b66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e184      	b.n	8004e84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d11b      	bne.n	8004bba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e164      	b.n	8004e84 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d11b      	bne.n	8004bfa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004be0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004be2:	2300      	movs	r3, #0
 8004be4:	61bb      	str	r3, [r7, #24]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	695b      	ldr	r3, [r3, #20]
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	e144      	b.n	8004e84 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	617b      	str	r3, [r7, #20]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004c10:	e138      	b.n	8004e84 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c16:	2b03      	cmp	r3, #3
 8004c18:	f200 80f1 	bhi.w	8004dfe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d123      	bne.n	8004c6c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 fc25 	bl	8005478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e139      	b.n	8004eac <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	1c5a      	adds	r2, r3, #1
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	3b01      	subs	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c6a:	e10b      	b.n	8004e84 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d14e      	bne.n	8004d12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	9300      	str	r3, [sp, #0]
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	4906      	ldr	r1, [pc, #24]	; (8004c98 <HAL_I2C_Mem_Read+0x22c>)
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f000 faa2 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d008      	beq.n	8004c9c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e10e      	b.n	8004eac <HAL_I2C_Mem_Read+0x440>
 8004c8e:	bf00      	nop
 8004c90:	00100002 	.word	0x00100002
 8004c94:	ffff0000 	.word	0xffff0000
 8004c98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691a      	ldr	r2, [r3, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb6:	b2d2      	uxtb	r2, r2
 8004cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbe:	1c5a      	adds	r2, r3, #1
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	b2d2      	uxtb	r2, r2
 8004cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf0:	1c5a      	adds	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	b29a      	uxth	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d10:	e0b8      	b.n	8004e84 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4966      	ldr	r1, [pc, #408]	; (8004eb4 <HAL_I2C_Mem_Read+0x448>)
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fa53 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e0bf      	b.n	8004eac <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d70:	9300      	str	r3, [sp, #0]
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	2200      	movs	r2, #0
 8004d76:	494f      	ldr	r1, [pc, #316]	; (8004eb4 <HAL_I2C_Mem_Read+0x448>)
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 fa25 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e091      	b.n	8004eac <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	691a      	ldr	r2, [r3, #16]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691a      	ldr	r2, [r3, #16]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dfc:	e042      	b.n	8004e84 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 fb38 	bl	8005478 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e04c      	b.n	8004eac <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	b2d2      	uxtb	r2, r2
 8004e1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d118      	bne.n	8004e84 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	691a      	ldr	r2, [r3, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	1c5a      	adds	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	b29a      	uxth	r2, r3
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	f47f aec2 	bne.w	8004c12 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2220      	movs	r2, #32
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
  }
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3728      	adds	r7, #40	; 0x28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	00010004 	.word	0x00010004

08004eb8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	4608      	mov	r0, r1
 8004ede:	4611      	mov	r1, r2
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	817b      	strh	r3, [r7, #10]
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	813b      	strh	r3, [r7, #8]
 8004eea:	4613      	mov	r3, r2
 8004eec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004efc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f95c 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00c      	beq.n	8004f30 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d003      	beq.n	8004f2c <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e05f      	b.n	8004ff0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f30:	897b      	ldrh	r3, [r7, #10]
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	461a      	mov	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f3e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	6a3a      	ldr	r2, [r7, #32]
 8004f44:	492c      	ldr	r1, [pc, #176]	; (8004ff8 <I2C_RequestMemoryWrite+0x124>)
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f995 	bl	8005276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e04c      	b.n	8004ff0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f56:	2300      	movs	r3, #0
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f6e:	6a39      	ldr	r1, [r7, #32]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 f9ff 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00d      	beq.n	8004f98 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d107      	bne.n	8004f94 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e02b      	b.n	8004ff0 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f98:	88fb      	ldrh	r3, [r7, #6]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d105      	bne.n	8004faa <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f9e:	893b      	ldrh	r3, [r7, #8]
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	611a      	str	r2, [r3, #16]
 8004fa8:	e021      	b.n	8004fee <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004faa:	893b      	ldrh	r3, [r7, #8]
 8004fac:	0a1b      	lsrs	r3, r3, #8
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fba:	6a39      	ldr	r1, [r7, #32]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 f9d9 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00d      	beq.n	8004fe4 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d107      	bne.n	8004fe0 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fde:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e005      	b.n	8004ff0 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004fe4:	893b      	ldrh	r3, [r7, #8]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004fee:	2300      	movs	r3, #0
}
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	00010002 	.word	0x00010002

08004ffc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	4608      	mov	r0, r1
 8005006:	4611      	mov	r1, r2
 8005008:	461a      	mov	r2, r3
 800500a:	4603      	mov	r3, r0
 800500c:	817b      	strh	r3, [r7, #10]
 800500e:	460b      	mov	r3, r1
 8005010:	813b      	strh	r3, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005024:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005034:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	9300      	str	r3, [sp, #0]
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	2200      	movs	r2, #0
 800503e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f000 f8c0 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e0a9      	b.n	80051bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005068:	897b      	ldrh	r3, [r7, #10]
 800506a:	b2db      	uxtb	r3, r3
 800506c:	461a      	mov	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005076:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	6a3a      	ldr	r2, [r7, #32]
 800507c:	4951      	ldr	r1, [pc, #324]	; (80051c4 <I2C_RequestMemoryRead+0x1c8>)
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f8f9 	bl	8005276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e096      	b.n	80051bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a6:	6a39      	ldr	r1, [r7, #32]
 80050a8:	68f8      	ldr	r0, [r7, #12]
 80050aa:	f000 f963 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00d      	beq.n	80050d0 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	2b04      	cmp	r3, #4
 80050ba:	d107      	bne.n	80050cc <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050ca:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e075      	b.n	80051bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80050d0:	88fb      	ldrh	r3, [r7, #6]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d105      	bne.n	80050e2 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050d6:	893b      	ldrh	r3, [r7, #8]
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	611a      	str	r2, [r3, #16]
 80050e0:	e021      	b.n	8005126 <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80050e2:	893b      	ldrh	r3, [r7, #8]
 80050e4:	0a1b      	lsrs	r3, r3, #8
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f2:	6a39      	ldr	r1, [r7, #32]
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f000 f93d 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00d      	beq.n	800511c <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	2b04      	cmp	r3, #4
 8005106:	d107      	bne.n	8005118 <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005116:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e04f      	b.n	80051bc <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800511c:	893b      	ldrh	r3, [r7, #8]
 800511e:	b2da      	uxtb	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005128:	6a39      	ldr	r1, [r7, #32]
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f922 	bl	8005374 <I2C_WaitOnTXEFlagUntilTimeout>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	2b04      	cmp	r3, #4
 800513c:	d107      	bne.n	800514e <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800514c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e034      	b.n	80051bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005160:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	2200      	movs	r2, #0
 800516a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f82a 	bl	80051c8 <I2C_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00c      	beq.n	8005194 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e013      	b.n	80051bc <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005194:	897b      	ldrh	r3, [r7, #10]
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f043 0301 	orr.w	r3, r3, #1
 800519c:	b2da      	uxtb	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	6a3a      	ldr	r2, [r7, #32]
 80051a8:	4906      	ldr	r1, [pc, #24]	; (80051c4 <I2C_RequestMemoryRead+0x1c8>)
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f863 	bl	8005276 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e000      	b.n	80051bc <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3718      	adds	r7, #24
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	00010002 	.word	0x00010002

080051c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	603b      	str	r3, [r7, #0]
 80051d4:	4613      	mov	r3, r2
 80051d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051d8:	e025      	b.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e0:	d021      	beq.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fe fb45 	bl	8003870 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d116      	bne.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f043 0220 	orr.w	r2, r3, #32
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e023      	b.n	800526e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	0c1b      	lsrs	r3, r3, #16
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	d10d      	bne.n	800524c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	43da      	mvns	r2, r3
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	4013      	ands	r3, r2
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	461a      	mov	r2, r3
 800524a:	e00c      	b.n	8005266 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	43da      	mvns	r2, r3
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4013      	ands	r3, r2
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	bf0c      	ite	eq
 800525e:	2301      	moveq	r3, #1
 8005260:	2300      	movne	r3, #0
 8005262:	b2db      	uxtb	r3, r3
 8005264:	461a      	mov	r2, r3
 8005266:	79fb      	ldrb	r3, [r7, #7]
 8005268:	429a      	cmp	r2, r3
 800526a:	d0b6      	beq.n	80051da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005284:	e051      	b.n	800532a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005294:	d123      	bne.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80052ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f043 0204 	orr.w	r2, r3, #4
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e046      	b.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d021      	beq.n	800532a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e6:	f7fe fac3 	bl	8003870 <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d302      	bcc.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d116      	bne.n	800532a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2220      	movs	r2, #32
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f043 0220 	orr.w	r2, r3, #32
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e020      	b.n	800536c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d10c      	bne.n	800534e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	43da      	mvns	r2, r3
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	4013      	ands	r3, r2
 8005340:	b29b      	uxth	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	bf14      	ite	ne
 8005346:	2301      	movne	r3, #1
 8005348:	2300      	moveq	r3, #0
 800534a:	b2db      	uxtb	r3, r3
 800534c:	e00b      	b.n	8005366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	43da      	mvns	r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	4013      	ands	r3, r2
 800535a:	b29b      	uxth	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d18d      	bne.n	8005286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}

08005374 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005380:	e02d      	b.n	80053de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f8ce 	bl	8005524 <I2C_IsAcknowledgeFailed>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e02d      	b.n	80053ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d021      	beq.n	80053de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800539a:	f7fe fa69 	bl	8003870 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	68ba      	ldr	r2, [r7, #8]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d302      	bcc.n	80053b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d116      	bne.n	80053de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	f043 0220 	orr.w	r2, r3, #32
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e007      	b.n	80053ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695b      	ldr	r3, [r3, #20]
 80053e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	d1ca      	bne.n	8005382 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053ec:	2300      	movs	r3, #0
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005402:	e02d      	b.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f88d 	bl	8005524 <I2C_IsAcknowledgeFailed>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e02d      	b.n	8005470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d021      	beq.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541c:	f7fe fa28 	bl	8003870 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d116      	bne.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e007      	b.n	8005470 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b04      	cmp	r3, #4
 800546c:	d1ca      	bne.n	8005404 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005484:	e042      	b.n	800550c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	f003 0310 	and.w	r3, r3, #16
 8005490:	2b10      	cmp	r3, #16
 8005492:	d119      	bne.n	80054c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0210 	mvn.w	r2, #16
 800549c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e029      	b.n	800551c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fe f9d2 	bl	8003870 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d116      	bne.n	800550c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f8:	f043 0220 	orr.w	r2, r3, #32
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e007      	b.n	800551c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d1b5      	bne.n	8005486 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3710      	adds	r7, #16
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553a:	d11b      	bne.n	8005574 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005544:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	f043 0204 	orr.w	r2, r3, #4
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e000      	b.n	8005576 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005582:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005584:	b08f      	sub	sp, #60	; 0x3c
 8005586:	af0a      	add	r7, sp, #40	; 0x28
 8005588:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e10f      	b.n	80057b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d106      	bne.n	80055b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f008 fc58 	bl	800de64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2203      	movs	r2, #3
 80055b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f005 fa17 	bl	800aa06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	687e      	ldr	r6, [r7, #4]
 80055e0:	466d      	mov	r5, sp
 80055e2:	f106 0410 	add.w	r4, r6, #16
 80055e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80055f6:	1d33      	adds	r3, r6, #4
 80055f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055fa:	6838      	ldr	r0, [r7, #0]
 80055fc:	f005 f8ee 	bl	800a7dc <USB_CoreInit>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d005      	beq.n	8005612 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e0d0      	b.n	80057b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2100      	movs	r1, #0
 8005618:	4618      	mov	r0, r3
 800561a:	f005 fa05 	bl	800aa28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800561e:	2300      	movs	r3, #0
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	e04a      	b.n	80056ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005624:	7bfa      	ldrb	r2, [r7, #15]
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	4613      	mov	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	333d      	adds	r3, #61	; 0x3d
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005638:	7bfa      	ldrb	r2, [r7, #15]
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	333c      	adds	r3, #60	; 0x3c
 8005648:	7bfa      	ldrb	r2, [r7, #15]
 800564a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800564c:	7bfa      	ldrb	r2, [r7, #15]
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	b298      	uxth	r0, r3
 8005652:	6879      	ldr	r1, [r7, #4]
 8005654:	4613      	mov	r3, r2
 8005656:	00db      	lsls	r3, r3, #3
 8005658:	1a9b      	subs	r3, r3, r2
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	440b      	add	r3, r1
 800565e:	3342      	adds	r3, #66	; 0x42
 8005660:	4602      	mov	r2, r0
 8005662:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005664:	7bfa      	ldrb	r2, [r7, #15]
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	333f      	adds	r3, #63	; 0x3f
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005678:	7bfa      	ldrb	r2, [r7, #15]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	1a9b      	subs	r3, r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	3344      	adds	r3, #68	; 0x44
 8005688:	2200      	movs	r2, #0
 800568a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800568c:	7bfa      	ldrb	r2, [r7, #15]
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	1a9b      	subs	r3, r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	3348      	adds	r3, #72	; 0x48
 800569c:	2200      	movs	r2, #0
 800569e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056a0:	7bfa      	ldrb	r2, [r7, #15]
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	3350      	adds	r3, #80	; 0x50
 80056b0:	2200      	movs	r2, #0
 80056b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056b4:	7bfb      	ldrb	r3, [r7, #15]
 80056b6:	3301      	adds	r3, #1
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	7bfa      	ldrb	r2, [r7, #15]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d3af      	bcc.n	8005624 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056c4:	2300      	movs	r3, #0
 80056c6:	73fb      	strb	r3, [r7, #15]
 80056c8:	e044      	b.n	8005754 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056ca:	7bfa      	ldrb	r2, [r7, #15]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	00db      	lsls	r3, r3, #3
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80056dc:	2200      	movs	r2, #0
 80056de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	1a9b      	subs	r3, r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80056f2:	7bfa      	ldrb	r2, [r7, #15]
 80056f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056f6:	7bfa      	ldrb	r2, [r7, #15]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800570c:	7bfa      	ldrb	r2, [r7, #15]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800571e:	2200      	movs	r2, #0
 8005720:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005738:	7bfa      	ldrb	r2, [r7, #15]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800574a:	2200      	movs	r2, #0
 800574c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	3301      	adds	r3, #1
 8005752:	73fb      	strb	r3, [r7, #15]
 8005754:	7bfa      	ldrb	r2, [r7, #15]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	429a      	cmp	r2, r3
 800575c:	d3b5      	bcc.n	80056ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	687e      	ldr	r6, [r7, #4]
 8005766:	466d      	mov	r5, sp
 8005768:	f106 0410 	add.w	r4, r6, #16
 800576c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800576e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005772:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005774:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005778:	e885 0003 	stmia.w	r5, {r0, r1}
 800577c:	1d33      	adds	r3, r6, #4
 800577e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005780:	6838      	ldr	r0, [r7, #0]
 8005782:	f005 f97b 	bl	800aa7c <USB_DevInit>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d005      	beq.n	8005798 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e00d      	b.n	80057b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f006 f970 	bl	800ba92 <USB_DevDisconnect>

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d101      	bne.n	80057d8 <HAL_PCD_Start+0x1c>
 80057d4:	2302      	movs	r3, #2
 80057d6:	e020      	b.n	800581a <HAL_PCD_Start+0x5e>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d109      	bne.n	80057fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d005      	beq.n	80057fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f006 f92e 	bl	800ba62 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4618      	mov	r0, r3
 800580c:	f005 f8ea 	bl	800a9e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005822:	b590      	push	{r4, r7, lr}
 8005824:	b08d      	sub	sp, #52	; 0x34
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f006 f9d5 	bl	800bbe8 <USB_GetMode>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	f040 838e 	bne.w	8005f62 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f006 f939 	bl	800bac2 <USB_ReadInterrupts>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8384 	beq.w	8005f60 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f006 f930 	bl	800bac2 <USB_ReadInterrupts>
 8005862:	4603      	mov	r3, r0
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b02      	cmp	r3, #2
 800586a:	d107      	bne.n	800587c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695a      	ldr	r2, [r3, #20]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f002 0202 	and.w	r2, r2, #2
 800587a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4618      	mov	r0, r3
 8005882:	f006 f91e 	bl	800bac2 <USB_ReadInterrupts>
 8005886:	4603      	mov	r3, r0
 8005888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800588c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005890:	d17b      	bne.n	800598a <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f006 f924 	bl	800bae8 <USB_ReadDevAllOutEpInterrupt>
 80058a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80058a2:	e06f      	b.n	8005984 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d064      	beq.n	8005978 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	4611      	mov	r1, r2
 80058b8:	4618      	mov	r0, r3
 80058ba:	f006 f949 	bl	800bb50 <USB_ReadDevOutEPInterrupt>
 80058be:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00c      	beq.n	80058e4 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	461a      	mov	r2, r3
 80058d8:	2301      	movs	r3, #1
 80058da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80058dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 fe0e 	bl	8006500 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00c      	beq.n	8005908 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 ff0d 	bl	8006710 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005902:	461a      	mov	r2, r3
 8005904:	2308      	movs	r3, #8
 8005906:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	f003 0310 	and.w	r3, r3, #16
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	461a      	mov	r2, r3
 8005920:	2310      	movs	r3, #16
 8005922:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005924:	69bb      	ldr	r3, [r7, #24]
 8005926:	f003 0320 	and.w	r3, r3, #32
 800592a:	2b00      	cmp	r3, #0
 800592c:	d015      	beq.n	800595a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d108      	bne.n	8005948 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6818      	ldr	r0, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005940:	461a      	mov	r2, r3
 8005942:	2101      	movs	r1, #1
 8005944:	f006 f994 	bl	800bc70 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005954:	461a      	mov	r2, r3
 8005956:	2320      	movs	r3, #32
 8005958:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d009      	beq.n	8005978 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	015a      	lsls	r2, r3, #5
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	4413      	add	r3, r2
 800596c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005970:	461a      	mov	r2, r3
 8005972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005976:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	3301      	adds	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	085b      	lsrs	r3, r3, #1
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	2b00      	cmp	r3, #0
 8005988:	d18c      	bne.n	80058a4 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4618      	mov	r0, r3
 8005990:	f006 f897 	bl	800bac2 <USB_ReadInterrupts>
 8005994:	4603      	mov	r3, r0
 8005996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800599a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800599e:	f040 80c4 	bne.w	8005b2a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f006 f8b8 	bl	800bb1c <USB_ReadDevAllInEpInterrupt>
 80059ac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059b2:	e0b6      	b.n	8005b22 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	f000 80ab 	beq.w	8005b16 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f006 f8de 	bl	800bb8c <USB_ReadDevInEPInterrupt>
 80059d0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d05b      	beq.n	8005a94 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059de:	f003 030f 	and.w	r3, r3, #15
 80059e2:	2201      	movs	r2, #1
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	69f9      	ldr	r1, [r7, #28]
 80059f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059fc:	4013      	ands	r3, r2
 80059fe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2301      	movs	r3, #1
 8005a10:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d11b      	bne.n	8005a52 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a1a:	6879      	ldr	r1, [r7, #4]
 8005a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a1e:	4613      	mov	r3, r2
 8005a20:	00db      	lsls	r3, r3, #3
 8005a22:	1a9b      	subs	r3, r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	440b      	add	r3, r1
 8005a28:	3348      	adds	r3, #72	; 0x48
 8005a2a:	6819      	ldr	r1, [r3, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a30:	4613      	mov	r3, r2
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	1a9b      	subs	r3, r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4403      	add	r3, r0
 8005a3a:	3344      	adds	r3, #68	; 0x44
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4419      	add	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4403      	add	r3, r0
 8005a4e:	3348      	adds	r3, #72	; 0x48
 8005a50:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f008 fa84 	bl	800df66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d116      	bne.n	8005a94 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d113      	bne.n	8005a94 <HAL_PCD_IRQHandler+0x272>
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	3350      	adds	r3, #80	; 0x50
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d108      	bne.n	8005a94 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2101      	movs	r1, #1
 8005a90:	f006 f8ee 	bl	800bc70 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	015a      	lsls	r2, r3, #5
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aaa:	461a      	mov	r2, r3
 8005aac:	2308      	movs	r3, #8
 8005aae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f003 0310 	and.w	r3, r3, #16
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d008      	beq.n	8005acc <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abc:	015a      	lsls	r2, r3, #5
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	2310      	movs	r3, #16
 8005aca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d008      	beq.n	8005ae8 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	2340      	movs	r3, #64	; 0x40
 8005ae6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d008      	beq.n	8005b04 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	461a      	mov	r2, r3
 8005b00:	2302      	movs	r3, #2
 8005b02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fc67 	bl	80063e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	3301      	adds	r3, #1
 8005b1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	085b      	lsrs	r3, r3, #1
 8005b20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f47f af45 	bne.w	80059b4 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f005 ffc7 	bl	800bac2 <USB_ReadInterrupts>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3e:	d122      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	69fa      	ldr	r2, [r7, #28]
 8005b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	d108      	bne.n	8005b70 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b66:	2100      	movs	r1, #0
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 fe89 	bl	8006880 <HAL_PCDEx_LPM_Callback>
 8005b6e:	e002      	b.n	8005b76 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f008 fa6f 	bl	800e054 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f005 ff99 	bl	800bac2 <USB_ReadInterrupts>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9a:	d112      	bne.n	8005bc2 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d102      	bne.n	8005bb2 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f008 fa2b 	bl	800e008 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695a      	ldr	r2, [r3, #20]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bc0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f005 ff7b 	bl	800bac2 <USB_ReadInterrupts>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd6:	f040 80a7 	bne.w	8005d28 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2110      	movs	r1, #16
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f005 f8b3 	bl	800ad60 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bfe:	e036      	b.n	8005c6e <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	69fa      	ldr	r2, [r7, #28]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	461a      	mov	r2, r3
 8005c42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c66:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d3c3      	bcc.n	8005c00 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c86:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005c8a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d016      	beq.n	8005cc2 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c9e:	69fa      	ldr	r2, [r7, #28]
 8005ca0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca4:	f043 030b 	orr.w	r3, r3, #11
 8005ca8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb4:	69fa      	ldr	r2, [r7, #28]
 8005cb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cba:	f043 030b 	orr.w	r3, r3, #11
 8005cbe:	6453      	str	r3, [r2, #68]	; 0x44
 8005cc0:	e015      	b.n	8005cee <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	69fa      	ldr	r2, [r7, #28]
 8005ccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005cd4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005cd8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	69fa      	ldr	r2, [r7, #28]
 8005ce4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce8:	f043 030b 	orr.w	r3, r3, #11
 8005cec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69fa      	ldr	r2, [r7, #28]
 8005cf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6818      	ldr	r0, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005d12:	461a      	mov	r2, r3
 8005d14:	f005 ffac 	bl	800bc70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	695a      	ldr	r2, [r3, #20]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005d26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f005 fec8 	bl	800bac2 <USB_ReadInterrupts>
 8005d32:	4603      	mov	r3, r0
 8005d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3c:	d124      	bne.n	8005d88 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f005 ff5e 	bl	800bc04 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f005 f868 	bl	800ae22 <USB_GetDevSpeed>
 8005d52:	4603      	mov	r3, r0
 8005d54:	461a      	mov	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681c      	ldr	r4, [r3, #0]
 8005d5e:	f001 f9a3 	bl	80070a8 <HAL_RCC_GetHCLKFreq>
 8005d62:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f004 fd97 	bl	800a8a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f008 f91f 	bl	800dfb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f005 fe98 	bl	800bac2 <USB_ReadInterrupts>
 8005d92:	4603      	mov	r3, r0
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b10      	cmp	r3, #16
 8005d9a:	d161      	bne.n	8005e60 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0210 	bic.w	r2, r2, #16
 8005daa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	6a1b      	ldr	r3, [r3, #32]
 8005db0:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f003 020f 	and.w	r2, r3, #15
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	1a9b      	subs	r3, r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3304      	adds	r3, #4
 8005dca:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	0c5b      	lsrs	r3, r3, #17
 8005dd0:	f003 030f 	and.w	r3, r3, #15
 8005dd4:	2b02      	cmp	r3, #2
 8005dd6:	d124      	bne.n	8005e22 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d035      	beq.n	8005e50 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	091b      	lsrs	r3, r3, #4
 8005dec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	6a38      	ldr	r0, [r7, #32]
 8005df8:	f005 fd10 	bl	800b81c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68da      	ldr	r2, [r3, #12]
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	091b      	lsrs	r3, r3, #4
 8005e04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e08:	441a      	add	r2, r3
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	699a      	ldr	r2, [r3, #24]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	091b      	lsrs	r3, r3, #4
 8005e16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e1a:	441a      	add	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	619a      	str	r2, [r3, #24]
 8005e20:	e016      	b.n	8005e50 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	0c5b      	lsrs	r3, r3, #17
 8005e26:	f003 030f 	and.w	r3, r3, #15
 8005e2a:	2b06      	cmp	r3, #6
 8005e2c:	d110      	bne.n	8005e50 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e34:	2208      	movs	r2, #8
 8005e36:	4619      	mov	r1, r3
 8005e38:	6a38      	ldr	r0, [r7, #32]
 8005e3a:	f005 fcef 	bl	800b81c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	699a      	ldr	r2, [r3, #24]
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	091b      	lsrs	r3, r3, #4
 8005e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0210 	orr.w	r2, r2, #16
 8005e5e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f005 fe2c 	bl	800bac2 <USB_ReadInterrupts>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f003 0308 	and.w	r3, r3, #8
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d10a      	bne.n	8005e8a <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f008 f890 	bl	800df9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	695a      	ldr	r2, [r3, #20]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f002 0208 	and.w	r2, r2, #8
 8005e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f005 fe17 	bl	800bac2 <USB_ReadInterrupts>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e9e:	d10f      	bne.n	8005ec0 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f008 f8f2 	bl	800e094 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695a      	ldr	r2, [r3, #20]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005ebe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f005 fdfc 	bl	800bac2 <USB_ReadInterrupts>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ed4:	d10f      	bne.n	8005ef6 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f008 f8c5 	bl	800e070 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	695a      	ldr	r2, [r3, #20]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f005 fde1 	bl	800bac2 <USB_ReadInterrupts>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0a:	d10a      	bne.n	8005f22 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f008 f8d3 	bl	800e0b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695a      	ldr	r2, [r3, #20]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f005 fdcb 	bl	800bac2 <USB_ReadInterrupts>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f003 0304 	and.w	r3, r3, #4
 8005f32:	2b04      	cmp	r3, #4
 8005f34:	d115      	bne.n	8005f62 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d002      	beq.n	8005f4e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f008 f8c3 	bl	800e0d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	6859      	ldr	r1, [r3, #4]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	e000      	b.n	8005f62 <HAL_PCD_IRQHandler+0x740>
      return;
 8005f60:	bf00      	nop
    }
  }
}
 8005f62:	3734      	adds	r7, #52	; 0x34
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd90      	pop	{r4, r7, pc}

08005f68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	460b      	mov	r3, r1
 8005f72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d101      	bne.n	8005f82 <HAL_PCD_SetAddress+0x1a>
 8005f7e:	2302      	movs	r3, #2
 8005f80:	e013      	b.n	8005faa <HAL_PCD_SetAddress+0x42>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	78fa      	ldrb	r2, [r7, #3]
 8005f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	78fa      	ldrb	r2, [r7, #3]
 8005f98:	4611      	mov	r1, r2
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f005 fd3b 	bl	800ba16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b084      	sub	sp, #16
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
 8005fba:	4608      	mov	r0, r1
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	70fb      	strb	r3, [r7, #3]
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	803b      	strh	r3, [r7, #0]
 8005fc8:	4613      	mov	r3, r2
 8005fca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	da0f      	bge.n	8005ff8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	f003 020f 	and.w	r2, r3, #15
 8005fde:	4613      	mov	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	1a9b      	subs	r3, r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	3338      	adds	r3, #56	; 0x38
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	4413      	add	r3, r2
 8005fec:	3304      	adds	r3, #4
 8005fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	705a      	strb	r2, [r3, #1]
 8005ff6:	e00f      	b.n	8006018 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ff8:	78fb      	ldrb	r3, [r7, #3]
 8005ffa:	f003 020f 	and.w	r2, r3, #15
 8005ffe:	4613      	mov	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	1a9b      	subs	r3, r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	4413      	add	r3, r2
 800600e:	3304      	adds	r3, #4
 8006010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006018:	78fb      	ldrb	r3, [r7, #3]
 800601a:	f003 030f 	and.w	r3, r3, #15
 800601e:	b2da      	uxtb	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006024:	883a      	ldrh	r2, [r7, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	78ba      	ldrb	r2, [r7, #2]
 800602e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d004      	beq.n	8006042 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006042:	78bb      	ldrb	r3, [r7, #2]
 8006044:	2b02      	cmp	r3, #2
 8006046:	d102      	bne.n	800604e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006054:	2b01      	cmp	r3, #1
 8006056:	d101      	bne.n	800605c <HAL_PCD_EP_Open+0xaa>
 8006058:	2302      	movs	r3, #2
 800605a:	e00e      	b.n	800607a <HAL_PCD_EP_Open+0xc8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	4618      	mov	r0, r3
 800606c:	f004 fefe 	bl	800ae6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006078:	7afb      	ldrb	r3, [r7, #11]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b084      	sub	sp, #16
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800608e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006092:	2b00      	cmp	r3, #0
 8006094:	da0f      	bge.n	80060b6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006096:	78fb      	ldrb	r3, [r7, #3]
 8006098:	f003 020f 	and.w	r2, r3, #15
 800609c:	4613      	mov	r3, r2
 800609e:	00db      	lsls	r3, r3, #3
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	3338      	adds	r3, #56	; 0x38
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	4413      	add	r3, r2
 80060aa:	3304      	adds	r3, #4
 80060ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	705a      	strb	r2, [r3, #1]
 80060b4:	e00f      	b.n	80060d6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	f003 020f 	and.w	r2, r3, #15
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	3304      	adds	r3, #4
 80060ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_PCD_EP_Close+0x6e>
 80060ec:	2302      	movs	r3, #2
 80060ee:	e00e      	b.n	800610e <HAL_PCD_EP_Close+0x8c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68f9      	ldr	r1, [r7, #12]
 80060fe:	4618      	mov	r0, r3
 8006100:	f004 ff3c 	bl	800af7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	460b      	mov	r3, r1
 8006124:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	4613      	mov	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4413      	add	r3, r2
 800613c:	3304      	adds	r3, #4
 800613e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2200      	movs	r2, #0
 8006150:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2200      	movs	r2, #0
 8006156:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006158:	7afb      	ldrb	r3, [r7, #11]
 800615a:	f003 030f 	and.w	r3, r3, #15
 800615e:	b2da      	uxtb	r2, r3
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d102      	bne.n	8006172 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006172:	7afb      	ldrb	r3, [r7, #11]
 8006174:	f003 030f 	and.w	r3, r3, #15
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6818      	ldr	r0, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	6979      	ldr	r1, [r7, #20]
 800618a:	f005 f9bf 	bl	800b50c <USB_EP0StartXfer>
 800618e:	e008      	b.n	80061a2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6818      	ldr	r0, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	461a      	mov	r2, r3
 800619c:	6979      	ldr	r1, [r7, #20]
 800619e:	f004 ff71 	bl	800b084 <USB_EPStartXfer>
  }

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	460b      	mov	r3, r1
 80061b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80061ce:	681b      	ldr	r3, [r3, #0]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	607a      	str	r2, [r7, #4]
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	460b      	mov	r3, r1
 80061ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ec:	7afb      	ldrb	r3, [r7, #11]
 80061ee:	f003 020f 	and.w	r2, r3, #15
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	1a9b      	subs	r3, r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	3338      	adds	r3, #56	; 0x38
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	3304      	adds	r3, #4
 8006202:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2200      	movs	r2, #0
 8006214:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2201      	movs	r2, #1
 800621a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800621c:	7afb      	ldrb	r3, [r7, #11]
 800621e:	f003 030f 	and.w	r3, r3, #15
 8006222:	b2da      	uxtb	r2, r3
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d102      	bne.n	8006236 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6818      	ldr	r0, [r3, #0]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	b2db      	uxtb	r3, r3
 800624a:	461a      	mov	r2, r3
 800624c:	6979      	ldr	r1, [r7, #20]
 800624e:	f005 f95d 	bl	800b50c <USB_EP0StartXfer>
 8006252:	e008      	b.n	8006266 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	b2db      	uxtb	r3, r3
 800625e:	461a      	mov	r2, r3
 8006260:	6979      	ldr	r1, [r7, #20]
 8006262:	f004 ff0f 	bl	800b084 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	f003 020f 	and.w	r2, r3, #15
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d901      	bls.n	800628e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e050      	b.n	8006330 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800628e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006292:	2b00      	cmp	r3, #0
 8006294:	da0f      	bge.n	80062b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006296:	78fb      	ldrb	r3, [r7, #3]
 8006298:	f003 020f 	and.w	r2, r3, #15
 800629c:	4613      	mov	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	1a9b      	subs	r3, r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	3338      	adds	r3, #56	; 0x38
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	4413      	add	r3, r2
 80062aa:	3304      	adds	r3, #4
 80062ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2201      	movs	r2, #1
 80062b2:	705a      	strb	r2, [r3, #1]
 80062b4:	e00d      	b.n	80062d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062b6:	78fa      	ldrb	r2, [r7, #3]
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	4413      	add	r3, r2
 80062c8:	3304      	adds	r3, #4
 80062ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062d8:	78fb      	ldrb	r3, [r7, #3]
 80062da:	f003 030f 	and.w	r3, r3, #15
 80062de:	b2da      	uxtb	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d101      	bne.n	80062f2 <HAL_PCD_EP_SetStall+0x82>
 80062ee:	2302      	movs	r3, #2
 80062f0:	e01e      	b.n	8006330 <HAL_PCD_EP_SetStall+0xc0>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	4618      	mov	r0, r3
 8006302:	f005 fab4 	bl	800b86e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006306:	78fb      	ldrb	r3, [r7, #3]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10a      	bne.n	8006326 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	b2d9      	uxtb	r1, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006320:	461a      	mov	r2, r3
 8006322:	f005 fca5 	bl	800bc70 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006344:	78fb      	ldrb	r3, [r7, #3]
 8006346:	f003 020f 	and.w	r2, r3, #15
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	429a      	cmp	r2, r3
 8006350:	d901      	bls.n	8006356 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e042      	b.n	80063dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800635a:	2b00      	cmp	r3, #0
 800635c:	da0f      	bge.n	800637e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 020f 	and.w	r2, r3, #15
 8006364:	4613      	mov	r3, r2
 8006366:	00db      	lsls	r3, r3, #3
 8006368:	1a9b      	subs	r3, r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	3338      	adds	r3, #56	; 0x38
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	4413      	add	r3, r2
 8006372:	3304      	adds	r3, #4
 8006374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	705a      	strb	r2, [r3, #1]
 800637c:	e00f      	b.n	800639e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	f003 020f 	and.w	r2, r3, #15
 8006384:	4613      	mov	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	1a9b      	subs	r3, r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	4413      	add	r3, r2
 8006394:	3304      	adds	r3, #4
 8006396:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063a4:	78fb      	ldrb	r3, [r7, #3]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d101      	bne.n	80063be <HAL_PCD_EP_ClrStall+0x86>
 80063ba:	2302      	movs	r3, #2
 80063bc:	e00e      	b.n	80063dc <HAL_PCD_EP_ClrStall+0xa4>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68f9      	ldr	r1, [r7, #12]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f005 fabc 	bl	800b94a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08a      	sub	sp, #40	; 0x28
 80063e8:	af02      	add	r7, sp, #8
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80063f8:	683a      	ldr	r2, [r7, #0]
 80063fa:	4613      	mov	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	1a9b      	subs	r3, r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	3338      	adds	r3, #56	; 0x38
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	3304      	adds	r3, #4
 800640a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	699a      	ldr	r2, [r3, #24]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	429a      	cmp	r2, r3
 8006416:	d901      	bls.n	800641c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e06c      	b.n	80064f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	695a      	ldr	r2, [r3, #20]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	429a      	cmp	r2, r3
 8006430:	d902      	bls.n	8006438 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	3303      	adds	r3, #3
 800643c:	089b      	lsrs	r3, r3, #2
 800643e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006440:	e02b      	b.n	800649a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	695a      	ldr	r2, [r3, #20]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	429a      	cmp	r2, r3
 8006456:	d902      	bls.n	800645e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	3303      	adds	r3, #3
 8006462:	089b      	lsrs	r3, r3, #2
 8006464:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	68d9      	ldr	r1, [r3, #12]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	b2da      	uxtb	r2, r3
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006476:	b2db      	uxtb	r3, r3
 8006478:	9300      	str	r3, [sp, #0]
 800647a:	4603      	mov	r3, r0
 800647c:	6978      	ldr	r0, [r7, #20]
 800647e:	f005 f998 	bl	800b7b2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	441a      	add	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	441a      	add	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d809      	bhi.n	80064c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d203      	bcs.n	80064c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1be      	bne.n	8006442 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	695a      	ldr	r2, [r3, #20]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d811      	bhi.n	80064f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	2201      	movs	r2, #1
 80064d8:	fa02 f303 	lsl.w	r3, r2, r3
 80064dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	43db      	mvns	r3, r3
 80064ea:	6939      	ldr	r1, [r7, #16]
 80064ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f0:	4013      	ands	r3, r2
 80064f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	333c      	adds	r3, #60	; 0x3c
 8006518:	3304      	adds	r3, #4
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b01      	cmp	r3, #1
 8006534:	f040 80b3 	bne.w	800669e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	f003 0308 	and.w	r3, r3, #8
 800653e:	2b00      	cmp	r3, #0
 8006540:	d028      	beq.n	8006594 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a70      	ldr	r2, [pc, #448]	; (8006708 <PCD_EP_OutXfrComplete_int+0x208>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d90e      	bls.n	8006568 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006550:	2b00      	cmp	r3, #0
 8006552:	d009      	beq.n	8006568 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	461a      	mov	r2, r3
 8006562:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006566:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f007 fccf 	bl	800df0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006578:	461a      	mov	r2, r3
 800657a:	2101      	movs	r1, #1
 800657c:	f005 fb78 	bl	800bc70 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658c:	461a      	mov	r2, r3
 800658e:	2308      	movs	r3, #8
 8006590:	6093      	str	r3, [r2, #8]
 8006592:	e0b3      	b.n	80066fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 0320 	and.w	r3, r3, #32
 800659a:	2b00      	cmp	r3, #0
 800659c:	d009      	beq.n	80065b2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065aa:	461a      	mov	r2, r3
 80065ac:	2320      	movs	r3, #32
 80065ae:	6093      	str	r3, [r2, #8]
 80065b0:	e0a4      	b.n	80066fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f040 809f 	bne.w	80066fc <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a51      	ldr	r2, [pc, #324]	; (8006708 <PCD_EP_OutXfrComplete_int+0x208>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d90f      	bls.n	80065e6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d00a      	beq.n	80065e6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	461a      	mov	r2, r3
 80065de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e2:	6093      	str	r3, [r2, #8]
 80065e4:	e08a      	b.n	80066fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80065e6:	6879      	ldr	r1, [r7, #4]
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	4613      	mov	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	1a9b      	subs	r3, r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	440b      	add	r3, r1
 80065f4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80065f8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	0159      	lsls	r1, r3, #5
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	440b      	add	r3, r1
 8006602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800660c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	683a      	ldr	r2, [r7, #0]
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	1a9b      	subs	r3, r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4403      	add	r3, r0
 800661c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006620:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	4613      	mov	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006634:	6819      	ldr	r1, [r3, #0]
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	4613      	mov	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	4403      	add	r3, r0
 8006644:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4419      	add	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	683a      	ldr	r2, [r7, #0]
 8006650:	4613      	mov	r3, r2
 8006652:	00db      	lsls	r3, r3, #3
 8006654:	1a9b      	subs	r3, r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4403      	add	r3, r0
 800665a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800665e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	b2db      	uxtb	r3, r3
 8006664:	4619      	mov	r1, r3
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f007 fc62 	bl	800df30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d144      	bne.n	80066fc <PCD_EP_OutXfrComplete_int+0x1fc>
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	4613      	mov	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	1a9b      	subs	r3, r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d138      	bne.n	80066fc <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006694:	461a      	mov	r2, r3
 8006696:	2101      	movs	r1, #1
 8006698:	f005 faea 	bl	800bc70 <USB_EP0_OutStart>
 800669c:	e02e      	b.n	80066fc <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a1a      	ldr	r2, [pc, #104]	; (800670c <PCD_EP_OutXfrComplete_int+0x20c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d124      	bne.n	80066f0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066bc:	461a      	mov	r2, r3
 80066be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066c2:	6093      	str	r3, [r2, #8]
 80066c4:	e01a      	b.n	80066fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d008      	beq.n	80066e2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066dc:	461a      	mov	r2, r3
 80066de:	2320      	movs	r3, #32
 80066e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f007 fc21 	bl	800df30 <HAL_PCD_DataOutStageCallback>
 80066ee:	e005      	b.n	80066fc <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f007 fc1a 	bl	800df30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	4f54300a 	.word	0x4f54300a
 800670c:	4f54310a 	.word	0x4f54310a

08006710 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	333c      	adds	r3, #60	; 0x3c
 8006728:	3304      	adds	r3, #4
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d113      	bne.n	800676e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	4a1f      	ldr	r2, [pc, #124]	; (80067c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d922      	bls.n	8006794 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01d      	beq.n	8006794 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	461a      	mov	r2, r3
 8006766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676a:	6093      	str	r3, [r2, #8]
 800676c:	e012      	b.n	8006794 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4a16      	ldr	r2, [pc, #88]	; (80067cc <PCD_EP_OutSetupPacket_int+0xbc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d10e      	bne.n	8006794 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800677c:	2b00      	cmp	r3, #0
 800677e:	d009      	beq.n	8006794 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678c:	461a      	mov	r2, r3
 800678e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006792:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f007 fbb9 	bl	800df0c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	4a0a      	ldr	r2, [pc, #40]	; (80067c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d90c      	bls.n	80067bc <PCD_EP_OutSetupPacket_int+0xac>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d108      	bne.n	80067bc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067b4:	461a      	mov	r2, r3
 80067b6:	2101      	movs	r1, #1
 80067b8:	f005 fa5a 	bl	800bc70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	4f54300a 	.word	0x4f54300a
 80067cc:	4f54310a 	.word	0x4f54310a

080067d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
 80067dc:	4613      	mov	r3, r2
 80067de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d107      	bne.n	80067fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80067ee:	883b      	ldrh	r3, [r7, #0]
 80067f0:	0419      	lsls	r1, r3, #16
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68ba      	ldr	r2, [r7, #8]
 80067f8:	430a      	orrs	r2, r1
 80067fa:	629a      	str	r2, [r3, #40]	; 0x28
 80067fc:	e028      	b.n	8006850 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	0c1b      	lsrs	r3, r3, #16
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	4413      	add	r3, r2
 800680a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800680c:	2300      	movs	r3, #0
 800680e:	73fb      	strb	r3, [r7, #15]
 8006810:	e00d      	b.n	800682e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	3340      	adds	r3, #64	; 0x40
 800681a:	009b      	lsls	r3, r3, #2
 800681c:	4413      	add	r3, r2
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	0c1b      	lsrs	r3, r3, #16
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	4413      	add	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006828:	7bfb      	ldrb	r3, [r7, #15]
 800682a:	3301      	adds	r3, #1
 800682c:	73fb      	strb	r3, [r7, #15]
 800682e:	7bfa      	ldrb	r2, [r7, #15]
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	3b01      	subs	r3, #1
 8006834:	429a      	cmp	r2, r3
 8006836:	d3ec      	bcc.n	8006812 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006838:	883b      	ldrh	r3, [r7, #0]
 800683a:	0418      	lsls	r0, r3, #16
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6819      	ldr	r1, [r3, #0]
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	3b01      	subs	r3, #1
 8006844:	68ba      	ldr	r2, [r7, #8]
 8006846:	4302      	orrs	r2, r0
 8006848:	3340      	adds	r3, #64	; 0x40
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800685e:	b480      	push	{r7}
 8006860:	b083      	sub	sp, #12
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
 8006866:	460b      	mov	r3, r1
 8006868:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	887a      	ldrh	r2, [r7, #2]
 8006870:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	460b      	mov	r3, r1
 800688a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e25b      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d075      	beq.n	80069a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068b6:	4ba3      	ldr	r3, [pc, #652]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d00c      	beq.n	80068dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068c2:	4ba0      	ldr	r3, [pc, #640]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	d112      	bne.n	80068f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ce:	4b9d      	ldr	r3, [pc, #628]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068da:	d10b      	bne.n	80068f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068dc:	4b99      	ldr	r3, [pc, #612]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d05b      	beq.n	80069a0 <HAL_RCC_OscConfig+0x108>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d157      	bne.n	80069a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e236      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fc:	d106      	bne.n	800690c <HAL_RCC_OscConfig+0x74>
 80068fe:	4b91      	ldr	r3, [pc, #580]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a90      	ldr	r2, [pc, #576]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	e01d      	b.n	8006948 <HAL_RCC_OscConfig+0xb0>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006914:	d10c      	bne.n	8006930 <HAL_RCC_OscConfig+0x98>
 8006916:	4b8b      	ldr	r3, [pc, #556]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a8a      	ldr	r2, [pc, #552]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 800691c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006920:	6013      	str	r3, [r2, #0]
 8006922:	4b88      	ldr	r3, [pc, #544]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a87      	ldr	r2, [pc, #540]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	e00b      	b.n	8006948 <HAL_RCC_OscConfig+0xb0>
 8006930:	4b84      	ldr	r3, [pc, #528]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a83      	ldr	r2, [pc, #524]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006936:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693a:	6013      	str	r3, [r2, #0]
 800693c:	4b81      	ldr	r3, [pc, #516]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a80      	ldr	r2, [pc, #512]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006942:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d013      	beq.n	8006978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006950:	f7fc ff8e 	bl	8003870 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006958:	f7fc ff8a 	bl	8003870 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b64      	cmp	r3, #100	; 0x64
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e1fb      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800696a:	4b76      	ldr	r3, [pc, #472]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f0      	beq.n	8006958 <HAL_RCC_OscConfig+0xc0>
 8006976:	e014      	b.n	80069a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006978:	f7fc ff7a 	bl	8003870 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006980:	f7fc ff76 	bl	8003870 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b64      	cmp	r3, #100	; 0x64
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e1e7      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006992:	4b6c      	ldr	r3, [pc, #432]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0xe8>
 800699e:	e000      	b.n	80069a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d063      	beq.n	8006a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069ae:	4b65      	ldr	r3, [pc, #404]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f003 030c 	and.w	r3, r3, #12
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00b      	beq.n	80069d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ba:	4b62      	ldr	r3, [pc, #392]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069c2:	2b08      	cmp	r3, #8
 80069c4:	d11c      	bne.n	8006a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069c6:	4b5f      	ldr	r3, [pc, #380]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d116      	bne.n	8006a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069d2:	4b5c      	ldr	r3, [pc, #368]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <HAL_RCC_OscConfig+0x152>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d001      	beq.n	80069ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e1bb      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ea:	4b56      	ldr	r3, [pc, #344]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4952      	ldr	r1, [pc, #328]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069fe:	e03a      	b.n	8006a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d020      	beq.n	8006a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a08:	4b4f      	ldr	r3, [pc, #316]	; (8006b48 <HAL_RCC_OscConfig+0x2b0>)
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0e:	f7fc ff2f 	bl	8003870 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a16:	f7fc ff2b 	bl	8003870 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e19c      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a28:	4b46      	ldr	r3, [pc, #280]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f0      	beq.n	8006a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a34:	4b43      	ldr	r3, [pc, #268]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	00db      	lsls	r3, r3, #3
 8006a42:	4940      	ldr	r1, [pc, #256]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	600b      	str	r3, [r1, #0]
 8006a48:	e015      	b.n	8006a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a4a:	4b3f      	ldr	r3, [pc, #252]	; (8006b48 <HAL_RCC_OscConfig+0x2b0>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a50:	f7fc ff0e 	bl	8003870 <HAL_GetTick>
 8006a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a56:	e008      	b.n	8006a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a58:	f7fc ff0a 	bl	8003870 <HAL_GetTick>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	1ad3      	subs	r3, r2, r3
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d901      	bls.n	8006a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a66:	2303      	movs	r3, #3
 8006a68:	e17b      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a6a:	4b36      	ldr	r3, [pc, #216]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d1f0      	bne.n	8006a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f003 0308 	and.w	r3, r3, #8
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d030      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d016      	beq.n	8006ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a8a:	4b30      	ldr	r3, [pc, #192]	; (8006b4c <HAL_RCC_OscConfig+0x2b4>)
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a90:	f7fc feee 	bl	8003870 <HAL_GetTick>
 8006a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a96:	e008      	b.n	8006aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a98:	f7fc feea 	bl	8003870 <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e15b      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006aaa:	4b26      	ldr	r3, [pc, #152]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d0f0      	beq.n	8006a98 <HAL_RCC_OscConfig+0x200>
 8006ab6:	e015      	b.n	8006ae4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ab8:	4b24      	ldr	r3, [pc, #144]	; (8006b4c <HAL_RCC_OscConfig+0x2b4>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006abe:	f7fc fed7 	bl	8003870 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ac6:	f7fc fed3 	bl	8003870 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e144      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ad8:	4b1a      	ldr	r3, [pc, #104]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006ada:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006adc:	f003 0302 	and.w	r3, r3, #2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1f0      	bne.n	8006ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	f000 80a0 	beq.w	8006c32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006af2:	2300      	movs	r3, #0
 8006af4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006af6:	4b13      	ldr	r3, [pc, #76]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10f      	bne.n	8006b22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]
 8006b06:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b0a:	4a0e      	ldr	r2, [pc, #56]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b10:	6413      	str	r3, [r2, #64]	; 0x40
 8006b12:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <HAL_RCC_OscConfig+0x2ac>)
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	60bb      	str	r3, [r7, #8]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b22:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <HAL_RCC_OscConfig+0x2b8>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d121      	bne.n	8006b72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b2e:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <HAL_RCC_OscConfig+0x2b8>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a07      	ldr	r2, [pc, #28]	; (8006b50 <HAL_RCC_OscConfig+0x2b8>)
 8006b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3a:	f7fc fe99 	bl	8003870 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b40:	e011      	b.n	8006b66 <HAL_RCC_OscConfig+0x2ce>
 8006b42:	bf00      	nop
 8006b44:	40023800 	.word	0x40023800
 8006b48:	42470000 	.word	0x42470000
 8006b4c:	42470e80 	.word	0x42470e80
 8006b50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b54:	f7fc fe8c 	bl	8003870 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e0fd      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b66:	4b81      	ldr	r3, [pc, #516]	; (8006d6c <HAL_RCC_OscConfig+0x4d4>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d106      	bne.n	8006b88 <HAL_RCC_OscConfig+0x2f0>
 8006b7a:	4b7d      	ldr	r3, [pc, #500]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7e:	4a7c      	ldr	r2, [pc, #496]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006b80:	f043 0301 	orr.w	r3, r3, #1
 8006b84:	6713      	str	r3, [r2, #112]	; 0x70
 8006b86:	e01c      	b.n	8006bc2 <HAL_RCC_OscConfig+0x32a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	2b05      	cmp	r3, #5
 8006b8e:	d10c      	bne.n	8006baa <HAL_RCC_OscConfig+0x312>
 8006b90:	4b77      	ldr	r3, [pc, #476]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b94:	4a76      	ldr	r2, [pc, #472]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006b96:	f043 0304 	orr.w	r3, r3, #4
 8006b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006b9c:	4b74      	ldr	r3, [pc, #464]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba0:	4a73      	ldr	r2, [pc, #460]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006ba2:	f043 0301 	orr.w	r3, r3, #1
 8006ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ba8:	e00b      	b.n	8006bc2 <HAL_RCC_OscConfig+0x32a>
 8006baa:	4b71      	ldr	r3, [pc, #452]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bae:	4a70      	ldr	r2, [pc, #448]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006bb0:	f023 0301 	bic.w	r3, r3, #1
 8006bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8006bb6:	4b6e      	ldr	r3, [pc, #440]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	4a6d      	ldr	r2, [pc, #436]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006bbc:	f023 0304 	bic.w	r3, r3, #4
 8006bc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d015      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bca:	f7fc fe51 	bl	8003870 <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bd0:	e00a      	b.n	8006be8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd2:	f7fc fe4d 	bl	8003870 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e0bc      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006be8:	4b61      	ldr	r3, [pc, #388]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0ee      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x33a>
 8006bf4:	e014      	b.n	8006c20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bf6:	f7fc fe3b 	bl	8003870 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bfc:	e00a      	b.n	8006c14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bfe:	f7fc fe37 	bl	8003870 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d901      	bls.n	8006c14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e0a6      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c14:	4b56      	ldr	r3, [pc, #344]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c18:	f003 0302 	and.w	r3, r3, #2
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1ee      	bne.n	8006bfe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c20:	7dfb      	ldrb	r3, [r7, #23]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d105      	bne.n	8006c32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c26:	4b52      	ldr	r3, [pc, #328]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	4a51      	ldr	r2, [pc, #324]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f000 8092 	beq.w	8006d60 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c3c:	4b4c      	ldr	r3, [pc, #304]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f003 030c 	and.w	r3, r3, #12
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d05c      	beq.n	8006d02 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d141      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c50:	4b48      	ldr	r3, [pc, #288]	; (8006d74 <HAL_RCC_OscConfig+0x4dc>)
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c56:	f7fc fe0b 	bl	8003870 <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c5c:	e008      	b.n	8006c70 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c5e:	f7fc fe07 	bl	8003870 <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d901      	bls.n	8006c70 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e078      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c70:	4b3f      	ldr	r3, [pc, #252]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1f0      	bne.n	8006c5e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	431a      	orrs	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	019b      	lsls	r3, r3, #6
 8006c8c:	431a      	orrs	r2, r3
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	3b01      	subs	r3, #1
 8006c96:	041b      	lsls	r3, r3, #16
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9e:	061b      	lsls	r3, r3, #24
 8006ca0:	4933      	ldr	r1, [pc, #204]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ca6:	4b33      	ldr	r3, [pc, #204]	; (8006d74 <HAL_RCC_OscConfig+0x4dc>)
 8006ca8:	2201      	movs	r2, #1
 8006caa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cac:	f7fc fde0 	bl	8003870 <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cb4:	f7fc fddc 	bl	8003870 <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e04d      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cc6:	4b2a      	ldr	r3, [pc, #168]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0f0      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x41c>
 8006cd2:	e045      	b.n	8006d60 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <HAL_RCC_OscConfig+0x4dc>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cda:	f7fc fdc9 	bl	8003870 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ce2:	f7fc fdc5 	bl	8003870 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e036      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cf4:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f0      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x44a>
 8006d00:	e02e      	b.n	8006d60 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d101      	bne.n	8006d0e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e029      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006d0e:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <HAL_RCC_OscConfig+0x4d8>)
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d11c      	bne.n	8006d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d115      	bne.n	8006d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d36:	4013      	ands	r3, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d10d      	bne.n	8006d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d106      	bne.n	8006d5c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d001      	beq.n	8006d60 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3718      	adds	r7, #24
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	40007000 	.word	0x40007000
 8006d70:	40023800 	.word	0x40023800
 8006d74:	42470060 	.word	0x42470060

08006d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0cc      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d8c:	4b68      	ldr	r3, [pc, #416]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 030f 	and.w	r3, r3, #15
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d90c      	bls.n	8006db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d9a:	4b65      	ldr	r3, [pc, #404]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	b2d2      	uxtb	r2, r2
 8006da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006da2:	4b63      	ldr	r3, [pc, #396]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d001      	beq.n	8006db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006db0:	2301      	movs	r3, #1
 8006db2:	e0b8      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d020      	beq.n	8006e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0304 	and.w	r3, r3, #4
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d005      	beq.n	8006dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006dcc:	4b59      	ldr	r3, [pc, #356]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	4a58      	ldr	r2, [pc, #352]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0308 	and.w	r3, r3, #8
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006de4:	4b53      	ldr	r3, [pc, #332]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	4a52      	ldr	r2, [pc, #328]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006df0:	4b50      	ldr	r3, [pc, #320]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	494d      	ldr	r1, [pc, #308]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0301 	and.w	r3, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d044      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d107      	bne.n	8006e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e16:	4b47      	ldr	r3, [pc, #284]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d119      	bne.n	8006e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e07f      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d003      	beq.n	8006e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e32:	2b03      	cmp	r3, #3
 8006e34:	d107      	bne.n	8006e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e36:	4b3f      	ldr	r3, [pc, #252]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d109      	bne.n	8006e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	e06f      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e46:	4b3b      	ldr	r3, [pc, #236]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e067      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e56:	4b37      	ldr	r3, [pc, #220]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	f023 0203 	bic.w	r2, r3, #3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	4934      	ldr	r1, [pc, #208]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e68:	f7fc fd02 	bl	8003870 <HAL_GetTick>
 8006e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e6e:	e00a      	b.n	8006e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e70:	f7fc fcfe 	bl	8003870 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d901      	bls.n	8006e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e04f      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e86:	4b2b      	ldr	r3, [pc, #172]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 020c 	and.w	r2, r3, #12
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d1eb      	bne.n	8006e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e98:	4b25      	ldr	r3, [pc, #148]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d20c      	bcs.n	8006ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea6:	4b22      	ldr	r3, [pc, #136]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	b2d2      	uxtb	r2, r2
 8006eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eae:	4b20      	ldr	r3, [pc, #128]	; (8006f30 <HAL_RCC_ClockConfig+0x1b8>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 030f 	and.w	r3, r3, #15
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e032      	b.n	8006f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d008      	beq.n	8006ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ecc:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	4916      	ldr	r1, [pc, #88]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006eda:	4313      	orrs	r3, r2
 8006edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0308 	and.w	r3, r3, #8
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006eea:	4b12      	ldr	r3, [pc, #72]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	00db      	lsls	r3, r3, #3
 8006ef8:	490e      	ldr	r1, [pc, #56]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006efa:	4313      	orrs	r3, r2
 8006efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006efe:	f000 f821 	bl	8006f44 <HAL_RCC_GetSysClockFreq>
 8006f02:	4601      	mov	r1, r0
 8006f04:	4b0b      	ldr	r3, [pc, #44]	; (8006f34 <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	091b      	lsrs	r3, r3, #4
 8006f0a:	f003 030f 	and.w	r3, r3, #15
 8006f0e:	4a0a      	ldr	r2, [pc, #40]	; (8006f38 <HAL_RCC_ClockConfig+0x1c0>)
 8006f10:	5cd3      	ldrb	r3, [r2, r3]
 8006f12:	fa21 f303 	lsr.w	r3, r1, r3
 8006f16:	4a09      	ldr	r2, [pc, #36]	; (8006f3c <HAL_RCC_ClockConfig+0x1c4>)
 8006f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <HAL_RCC_ClockConfig+0x1c8>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fc fc62 	bl	80037e8 <HAL_InitTick>

  return HAL_OK;
 8006f24:	2300      	movs	r3, #0
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023c00 	.word	0x40023c00
 8006f34:	40023800 	.word	0x40023800
 8006f38:	080136f8 	.word	0x080136f8
 8006f3c:	20000000 	.word	0x20000000
 8006f40:	20000004 	.word	0x20000004

08006f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	607b      	str	r3, [r7, #4]
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]
 8006f52:	2300      	movs	r3, #0
 8006f54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f5a:	4b50      	ldr	r3, [pc, #320]	; (800709c <HAL_RCC_GetSysClockFreq+0x158>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f003 030c 	and.w	r3, r3, #12
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d007      	beq.n	8006f76 <HAL_RCC_GetSysClockFreq+0x32>
 8006f66:	2b08      	cmp	r3, #8
 8006f68:	d008      	beq.n	8006f7c <HAL_RCC_GetSysClockFreq+0x38>
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 808d 	bne.w	800708a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f70:	4b4b      	ldr	r3, [pc, #300]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006f72:	60bb      	str	r3, [r7, #8]
       break;
 8006f74:	e08c      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f76:	4b4b      	ldr	r3, [pc, #300]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006f78:	60bb      	str	r3, [r7, #8]
      break;
 8006f7a:	e089      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f7c:	4b47      	ldr	r3, [pc, #284]	; (800709c <HAL_RCC_GetSysClockFreq+0x158>)
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f86:	4b45      	ldr	r3, [pc, #276]	; (800709c <HAL_RCC_GetSysClockFreq+0x158>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d023      	beq.n	8006fda <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f92:	4b42      	ldr	r3, [pc, #264]	; (800709c <HAL_RCC_GetSysClockFreq+0x158>)
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	099b      	lsrs	r3, r3, #6
 8006f98:	f04f 0400 	mov.w	r4, #0
 8006f9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	ea03 0501 	and.w	r5, r3, r1
 8006fa8:	ea04 0602 	and.w	r6, r4, r2
 8006fac:	4a3d      	ldr	r2, [pc, #244]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fae:	fb02 f106 	mul.w	r1, r2, r6
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	fb02 f205 	mul.w	r2, r2, r5
 8006fb8:	440a      	add	r2, r1
 8006fba:	493a      	ldr	r1, [pc, #232]	; (80070a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8006fbc:	fba5 0101 	umull	r0, r1, r5, r1
 8006fc0:	1853      	adds	r3, r2, r1
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f04f 0400 	mov.w	r4, #0
 8006fca:	461a      	mov	r2, r3
 8006fcc:	4623      	mov	r3, r4
 8006fce:	f7f9 fe5b 	bl	8000c88 <__aeabi_uldivmod>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	e049      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fda:	4b30      	ldr	r3, [pc, #192]	; (800709c <HAL_RCC_GetSysClockFreq+0x158>)
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	099b      	lsrs	r3, r3, #6
 8006fe0:	f04f 0400 	mov.w	r4, #0
 8006fe4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	ea03 0501 	and.w	r5, r3, r1
 8006ff0:	ea04 0602 	and.w	r6, r4, r2
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	f04f 0400 	mov.w	r4, #0
 8007000:	0154      	lsls	r4, r2, #5
 8007002:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007006:	014b      	lsls	r3, r1, #5
 8007008:	4619      	mov	r1, r3
 800700a:	4622      	mov	r2, r4
 800700c:	1b49      	subs	r1, r1, r5
 800700e:	eb62 0206 	sbc.w	r2, r2, r6
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	f04f 0400 	mov.w	r4, #0
 800701a:	0194      	lsls	r4, r2, #6
 800701c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007020:	018b      	lsls	r3, r1, #6
 8007022:	1a5b      	subs	r3, r3, r1
 8007024:	eb64 0402 	sbc.w	r4, r4, r2
 8007028:	f04f 0100 	mov.w	r1, #0
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	00e2      	lsls	r2, r4, #3
 8007032:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007036:	00d9      	lsls	r1, r3, #3
 8007038:	460b      	mov	r3, r1
 800703a:	4614      	mov	r4, r2
 800703c:	195b      	adds	r3, r3, r5
 800703e:	eb44 0406 	adc.w	r4, r4, r6
 8007042:	f04f 0100 	mov.w	r1, #0
 8007046:	f04f 0200 	mov.w	r2, #0
 800704a:	02a2      	lsls	r2, r4, #10
 800704c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007050:	0299      	lsls	r1, r3, #10
 8007052:	460b      	mov	r3, r1
 8007054:	4614      	mov	r4, r2
 8007056:	4618      	mov	r0, r3
 8007058:	4621      	mov	r1, r4
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f04f 0400 	mov.w	r4, #0
 8007060:	461a      	mov	r2, r3
 8007062:	4623      	mov	r3, r4
 8007064:	f7f9 fe10 	bl	8000c88 <__aeabi_uldivmod>
 8007068:	4603      	mov	r3, r0
 800706a:	460c      	mov	r4, r1
 800706c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800706e:	4b0b      	ldr	r3, [pc, #44]	; (800709c <HAL_RCC_GetSysClockFreq+0x158>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	0c1b      	lsrs	r3, r3, #16
 8007074:	f003 0303 	and.w	r3, r3, #3
 8007078:	3301      	adds	r3, #1
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	fbb2 f3f3 	udiv	r3, r2, r3
 8007086:	60bb      	str	r3, [r7, #8]
      break;
 8007088:	e002      	b.n	8007090 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <HAL_RCC_GetSysClockFreq+0x15c>)
 800708c:	60bb      	str	r3, [r7, #8]
      break;
 800708e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007090:	68bb      	ldr	r3, [r7, #8]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3714      	adds	r7, #20
 8007096:	46bd      	mov	sp, r7
 8007098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800709a:	bf00      	nop
 800709c:	40023800 	.word	0x40023800
 80070a0:	00f42400 	.word	0x00f42400
 80070a4:	00b71b00 	.word	0x00b71b00

080070a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070a8:	b480      	push	{r7}
 80070aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070ac:	4b03      	ldr	r3, [pc, #12]	; (80070bc <HAL_RCC_GetHCLKFreq+0x14>)
 80070ae:	681b      	ldr	r3, [r3, #0]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000000 	.word	0x20000000

080070c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070c4:	f7ff fff0 	bl	80070a8 <HAL_RCC_GetHCLKFreq>
 80070c8:	4601      	mov	r1, r0
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	0a9b      	lsrs	r3, r3, #10
 80070d0:	f003 0307 	and.w	r3, r3, #7
 80070d4:	4a03      	ldr	r2, [pc, #12]	; (80070e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070d6:	5cd3      	ldrb	r3, [r2, r3]
 80070d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070dc:	4618      	mov	r0, r3
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	40023800 	.word	0x40023800
 80070e4:	08013708 	.word	0x08013708

080070e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070ec:	f7ff ffdc 	bl	80070a8 <HAL_RCC_GetHCLKFreq>
 80070f0:	4601      	mov	r1, r0
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	0b5b      	lsrs	r3, r3, #13
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	4a03      	ldr	r2, [pc, #12]	; (800710c <HAL_RCC_GetPCLK2Freq+0x24>)
 80070fe:	5cd3      	ldrb	r3, [r2, r3]
 8007100:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007104:	4618      	mov	r0, r3
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40023800 	.word	0x40023800
 800710c:	08013708 	.word	0x08013708

08007110 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	d105      	bne.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007134:	2b00      	cmp	r3, #0
 8007136:	d035      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007138:	4b62      	ldr	r3, [pc, #392]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800713e:	f7fc fb97 	bl	8003870 <HAL_GetTick>
 8007142:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007144:	e008      	b.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007146:	f7fc fb93 	bl	8003870 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d901      	bls.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e0b0      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007158:	4b5b      	ldr	r3, [pc, #364]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1f0      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	019a      	lsls	r2, r3, #6
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	071b      	lsls	r3, r3, #28
 8007170:	4955      	ldr	r1, [pc, #340]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007172:	4313      	orrs	r3, r2
 8007174:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007178:	4b52      	ldr	r3, [pc, #328]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800717e:	f7fc fb77 	bl	8003870 <HAL_GetTick>
 8007182:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007184:	e008      	b.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007186:	f7fc fb73 	bl	8003870 <HAL_GetTick>
 800718a:	4602      	mov	r2, r0
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	1ad3      	subs	r3, r2, r3
 8007190:	2b02      	cmp	r3, #2
 8007192:	d901      	bls.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e090      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007198:	4b4b      	ldr	r3, [pc, #300]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d0f0      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 8083 	beq.w	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	4b44      	ldr	r3, [pc, #272]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ba:	4a43      	ldr	r2, [pc, #268]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c0:	6413      	str	r3, [r2, #64]	; 0x40
 80071c2:	4b41      	ldr	r3, [pc, #260]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071ce:	4b3f      	ldr	r3, [pc, #252]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a3e      	ldr	r2, [pc, #248]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071da:	f7fc fb49 	bl	8003870 <HAL_GetTick>
 80071de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071e0:	e008      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071e2:	f7fc fb45 	bl	8003870 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d901      	bls.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e062      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071f4:	4b35      	ldr	r3, [pc, #212]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0f0      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007200:	4b31      	ldr	r3, [pc, #196]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007208:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d02f      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	429a      	cmp	r2, r3
 800721c:	d028      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800721e:	4b2a      	ldr	r3, [pc, #168]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007226:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007228:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800722a:	2201      	movs	r2, #1
 800722c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800722e:	4b28      	ldr	r3, [pc, #160]	; (80072d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007230:	2200      	movs	r2, #0
 8007232:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007234:	4a24      	ldr	r2, [pc, #144]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800723a:	4b23      	ldr	r3, [pc, #140]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b01      	cmp	r3, #1
 8007244:	d114      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007246:	f7fc fb13 	bl	8003870 <HAL_GetTick>
 800724a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800724c:	e00a      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800724e:	f7fc fb0f 	bl	8003870 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	f241 3288 	movw	r2, #5000	; 0x1388
 800725c:	4293      	cmp	r3, r2
 800725e:	d901      	bls.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007260:	2303      	movs	r3, #3
 8007262:	e02a      	b.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007264:	4b18      	ldr	r3, [pc, #96]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007268:	f003 0302 	and.w	r3, r3, #2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d0ee      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800727c:	d10d      	bne.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800727e:	4b12      	ldr	r3, [pc, #72]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800728e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007292:	490d      	ldr	r1, [pc, #52]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007294:	4313      	orrs	r3, r2
 8007296:	608b      	str	r3, [r1, #8]
 8007298:	e005      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800729a:	4b0b      	ldr	r3, [pc, #44]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	4a0a      	ldr	r2, [pc, #40]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80072a4:	6093      	str	r3, [r2, #8]
 80072a6:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072b2:	4905      	ldr	r1, [pc, #20]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	42470068 	.word	0x42470068
 80072c8:	40023800 	.word	0x40023800
 80072cc:	40007000 	.word	0x40007000
 80072d0:	42470e40 	.word	0x42470e40

080072d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d101      	bne.n	80072e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e083      	b.n	80073ee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	7f5b      	ldrb	r3, [r3, #29]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d105      	bne.n	80072fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fb feac 	bl	8003054 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2202      	movs	r2, #2
 8007300:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	22ca      	movs	r2, #202	; 0xca
 8007308:	625a      	str	r2, [r3, #36]	; 0x24
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2253      	movs	r2, #83	; 0x53
 8007310:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f897 	bl	8007446 <RTC_EnterInitMode>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d008      	beq.n	8007330 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	22ff      	movs	r2, #255	; 0xff
 8007324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2204      	movs	r2, #4
 800732a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e05e      	b.n	80073ee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689b      	ldr	r3, [r3, #8]
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	6812      	ldr	r2, [r2, #0]
 800733a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800733e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007342:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6899      	ldr	r1, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	431a      	orrs	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	68d2      	ldr	r2, [r2, #12]
 800736a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6919      	ldr	r1, [r3, #16]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	041a      	lsls	r2, r3, #16
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	430a      	orrs	r2, r1
 800737e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	68da      	ldr	r2, [r3, #12]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800738e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10e      	bne.n	80073bc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f829 	bl	80073f6 <HAL_RTC_WaitForSynchro>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	22ff      	movs	r2, #255	; 0xff
 80073b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2204      	movs	r2, #4
 80073b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	e018      	b.n	80073ee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	22ff      	movs	r2, #255	; 0xff
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80073ec:	2300      	movs	r3, #0
  }
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80073fe:	2300      	movs	r3, #0
 8007400:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007410:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007412:	f7fc fa2d 	bl	8003870 <HAL_GetTick>
 8007416:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007418:	e009      	b.n	800742e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800741a:	f7fc fa29 	bl	8003870 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007428:	d901      	bls.n	800742e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e007      	b.n	800743e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0320 	and.w	r3, r3, #32
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0ee      	beq.n	800741a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800744e:	2300      	movs	r3, #0
 8007450:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	68db      	ldr	r3, [r3, #12]
 8007458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745c:	2b00      	cmp	r3, #0
 800745e:	d119      	bne.n	8007494 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f04f 32ff 	mov.w	r2, #4294967295
 8007468:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800746a:	f7fc fa01 	bl	8003870 <HAL_GetTick>
 800746e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007470:	e009      	b.n	8007486 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007472:	f7fc f9fd 	bl	8003870 <HAL_GetTick>
 8007476:	4602      	mov	r2, r0
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	1ad3      	subs	r3, r2, r3
 800747c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007480:	d901      	bls.n	8007486 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e007      	b.n	8007496 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0ee      	beq.n	8007472 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d101      	bne.n	80074b0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e022      	b.n	80074f6 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f7fb fddc 	bl	8003080 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2203      	movs	r2, #3
 80074cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f815 	bl	8007500 <HAL_SD_InitCard>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e00a      	b.n	80074f6 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007500:	b5b0      	push	{r4, r5, r7, lr}
 8007502:	b08e      	sub	sp, #56	; 0x38
 8007504:	af04      	add	r7, sp, #16
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007508:	2300      	movs	r3, #0
 800750a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800750c:	2300      	movs	r3, #0
 800750e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007510:	2300      	movs	r3, #0
 8007512:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007514:	2300      	movs	r3, #0
 8007516:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007518:	2300      	movs	r3, #0
 800751a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800751c:	2376      	movs	r3, #118	; 0x76
 800751e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681d      	ldr	r5, [r3, #0]
 8007524:	466c      	mov	r4, sp
 8007526:	f107 0314 	add.w	r3, r7, #20
 800752a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800752e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007532:	f107 0308 	add.w	r3, r7, #8
 8007536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007538:	4628      	mov	r0, r5
 800753a:	f002 fc2d 	bl	8009d98 <SDIO_Init>
 800753e:	4603      	mov	r3, r0
 8007540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e031      	b.n	80075b4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007550:	4b1a      	ldr	r3, [pc, #104]	; (80075bc <HAL_SD_InitCard+0xbc>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f002 fc65 	bl	8009e2a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007560:	4b16      	ldr	r3, [pc, #88]	; (80075bc <HAL_SD_InitCard+0xbc>)
 8007562:	2201      	movs	r2, #1
 8007564:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 ff7e 	bl	8008468 <SD_PowerON>
 800756c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e013      	b.n	80075b4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fe9d 	bl	80082cc <SD_InitCard>
 8007592:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075a6:	6a3b      	ldr	r3, [r7, #32]
 80075a8:	431a      	orrs	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e000      	b.n	80075b4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3728      	adds	r7, #40	; 0x28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bdb0      	pop	{r4, r5, r7, pc}
 80075bc:	422580a0 	.word	0x422580a0

080075c0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08c      	sub	sp, #48	; 0x30
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d107      	bne.n	80075e8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0c9      	b.n	800777c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	f040 80c2 	bne.w	800777a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80075fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007606:	429a      	cmp	r2, r3
 8007608:	d907      	bls.n	800761a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e0b0      	b.n	800777c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2203      	movs	r2, #3
 800761e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007638:	f043 0302 	orr.w	r3, r3, #2
 800763c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	4a50      	ldr	r2, [pc, #320]	; (8007784 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8007644:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764a:	4a4f      	ldr	r2, [pc, #316]	; (8007788 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800764c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	2200      	movs	r2, #0
 8007654:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	3380      	adds	r3, #128	; 0x80
 8007660:	4619      	mov	r1, r3
 8007662:	68ba      	ldr	r2, [r7, #8]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	025b      	lsls	r3, r3, #9
 8007668:	089b      	lsrs	r3, r3, #2
 800766a:	f7fc faef 	bl	8003c4c <HAL_DMA_Start_IT>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d017      	beq.n	80076a4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8007682:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a40      	ldr	r2, [pc, #256]	; (800778c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800768a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e06b      	b.n	800777c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80076a4:	4b3a      	ldr	r3, [pc, #232]	; (8007790 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80076a6:	2201      	movs	r2, #1
 80076a8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d002      	beq.n	80076b8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	025b      	lsls	r3, r3, #9
 80076b6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076c0:	4618      	mov	r0, r3
 80076c2:	f002 fc45 	bl	8009f50 <SDMMC_CmdBlockLength>
 80076c6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00f      	beq.n	80076ee <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a2e      	ldr	r2, [pc, #184]	; (800778c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	431a      	orrs	r2, r3
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e046      	b.n	800777c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80076ee:	f04f 33ff 	mov.w	r3, #4294967295
 80076f2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	025b      	lsls	r3, r3, #9
 80076f8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80076fa:	2390      	movs	r3, #144	; 0x90
 80076fc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80076fe:	2302      	movs	r3, #2
 8007700:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007702:	2300      	movs	r3, #0
 8007704:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007706:	2301      	movs	r3, #1
 8007708:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f107 0210 	add.w	r2, r7, #16
 8007712:	4611      	mov	r1, r2
 8007714:	4618      	mov	r0, r3
 8007716:	f002 fbef 	bl	8009ef8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d90a      	bls.n	8007736 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2282      	movs	r2, #130	; 0x82
 8007724:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800772c:	4618      	mov	r0, r3
 800772e:	f002 fc53 	bl	8009fd8 <SDMMC_CmdReadMultiBlock>
 8007732:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007734:	e009      	b.n	800774a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2281      	movs	r2, #129	; 0x81
 800773a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007742:	4618      	mov	r0, r3
 8007744:	f002 fc26 	bl	8009f94 <SDMMC_CmdReadSingleBlock>
 8007748:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800774a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774c:	2b00      	cmp	r3, #0
 800774e:	d012      	beq.n	8007776 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a0d      	ldr	r2, [pc, #52]	; (800778c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	431a      	orrs	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e002      	b.n	800777c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8007776:	2300      	movs	r3, #0
 8007778:	e000      	b.n	800777c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800777a:	2302      	movs	r3, #2
  }
}
 800777c:	4618      	mov	r0, r3
 800777e:	3730      	adds	r7, #48	; 0x30
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	080080db 	.word	0x080080db
 8007788:	0800814d 	.word	0x0800814d
 800778c:	004005ff 	.word	0x004005ff
 8007790:	4225858c 	.word	0x4225858c

08007794 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b08c      	sub	sp, #48	; 0x30
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
 80077a0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d107      	bne.n	80077bc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e0ce      	b.n	800795a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	f040 80c7 	bne.w	8007958 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80077d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	441a      	add	r2, r3
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077da:	429a      	cmp	r2, r3
 80077dc:	d907      	bls.n	80077ee <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	e0b5      	b.n	800795a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2203      	movs	r2, #3
 80077f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2200      	movs	r2, #0
 80077fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	6812      	ldr	r2, [r2, #0]
 8007808:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800780c:	f043 0302 	orr.w	r3, r3, #2
 8007810:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007816:	4a53      	ldr	r2, [pc, #332]	; (8007964 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007818:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781e:	4a52      	ldr	r2, [pc, #328]	; (8007968 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007820:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007826:	2200      	movs	r2, #0
 8007828:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782e:	2b01      	cmp	r3, #1
 8007830:	d002      	beq.n	8007838 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007834:	025b      	lsls	r3, r3, #9
 8007836:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007840:	4618      	mov	r0, r3
 8007842:	f002 fb85 	bl	8009f50 <SDMMC_CmdBlockLength>
 8007846:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00f      	beq.n	800786e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a46      	ldr	r2, [pc, #280]	; (800796c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007854:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800785a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785c:	431a      	orrs	r2, r3
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e075      	b.n	800795a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b01      	cmp	r3, #1
 8007872:	d90a      	bls.n	800788a <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	22a0      	movs	r2, #160	; 0xa0
 8007878:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007880:	4618      	mov	r0, r3
 8007882:	f002 fbed 	bl	800a060 <SDMMC_CmdWriteMultiBlock>
 8007886:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007888:	e009      	b.n	800789e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2290      	movs	r2, #144	; 0x90
 800788e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007896:	4618      	mov	r0, r3
 8007898:	f002 fbc0 	bl	800a01c <SDMMC_CmdWriteSingleBlock>
 800789c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d012      	beq.n	80078ca <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a30      	ldr	r2, [pc, #192]	; (800796c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80078aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	431a      	orrs	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e047      	b.n	800795a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80078ca:	4b29      	ldr	r3, [pc, #164]	; (8007970 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80078cc:	2201      	movs	r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3380      	adds	r3, #128	; 0x80
 80078dc:	461a      	mov	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	025b      	lsls	r3, r3, #9
 80078e2:	089b      	lsrs	r3, r3, #2
 80078e4:	f7fc f9b2 	bl	8003c4c <HAL_DMA_Start_IT>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d01c      	beq.n	8007928 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	6812      	ldr	r2, [r2, #0]
 80078f8:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80078fc:	f023 0302 	bic.w	r3, r3, #2
 8007900:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a19      	ldr	r2, [pc, #100]	; (800796c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007908:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e018      	b.n	800795a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007928:	f04f 33ff 	mov.w	r3, #4294967295
 800792c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	025b      	lsls	r3, r3, #9
 8007932:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007934:	2390      	movs	r3, #144	; 0x90
 8007936:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007938:	2300      	movs	r3, #0
 800793a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800793c:	2300      	movs	r3, #0
 800793e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007940:	2301      	movs	r3, #1
 8007942:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f107 0210 	add.w	r2, r7, #16
 800794c:	4611      	mov	r1, r2
 800794e:	4618      	mov	r0, r3
 8007950:	f002 fad2 	bl	8009ef8 <SDIO_ConfigData>

      return HAL_OK;
 8007954:	2300      	movs	r3, #0
 8007956:	e000      	b.n	800795a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007958:	2302      	movs	r3, #2
  }
}
 800795a:	4618      	mov	r0, r3
 800795c:	3730      	adds	r7, #48	; 0x30
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	080080b1 	.word	0x080080b1
 8007968:	0800814d 	.word	0x0800814d
 800796c:	004005ff 	.word	0x004005ff
 8007970:	4225858c 	.word	0x4225858c

08007974 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007980:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d008      	beq.n	80079a2 <HAL_SD_IRQHandler+0x2e>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f003 0308 	and.w	r3, r3, #8
 8007996:	2b00      	cmp	r3, #0
 8007998:	d003      	beq.n	80079a2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fe1a 	bl	80085d4 <SD_Read_IT>
 80079a0:	e165      	b.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 808f 	beq.w	8007ad0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079ba:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6812      	ldr	r2, [r2, #0]
 80079c6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80079ca:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80079ce:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f022 0201 	bic.w	r2, r2, #1
 80079de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d039      	beq.n	8007a5e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d104      	bne.n	80079fe <HAL_SD_IRQHandler+0x8a>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d011      	beq.n	8007a22 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f002 fb4e 	bl	800a0a4 <SDMMC_CmdStopTransfer>
 8007a08:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d008      	beq.n	8007a22 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	431a      	orrs	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f943 	bl	8007ca8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f003 0301 	and.w	r3, r3, #1
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d104      	bne.n	8007a4e <HAL_SD_IRQHandler+0xda>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f920 	bl	8007c94 <HAL_SD_RxCpltCallback>
 8007a54:	e10b      	b.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f912 	bl	8007c80 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007a5c:	e107      	b.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8102 	beq.w	8007c6e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f003 0320 	and.w	r3, r3, #32
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d011      	beq.n	8007a98 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f002 fb13 	bl	800a0a4 <SDMMC_CmdStopTransfer>
 8007a7e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d008      	beq.n	8007a98 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	431a      	orrs	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f908 	bl	8007ca8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f040 80e5 	bne.w	8007c6e <HAL_SD_IRQHandler+0x2fa>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f040 80df 	bne.w	8007c6e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f022 0208 	bic.w	r2, r2, #8
 8007abe:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f8d9 	bl	8007c80 <HAL_SD_TxCpltCallback>
}
 8007ace:	e0ce      	b.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d008      	beq.n	8007af0 <HAL_SD_IRQHandler+0x17c>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f003 0308 	and.w	r3, r3, #8
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d003      	beq.n	8007af0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fdc4 	bl	8008676 <SD_Write_IT>
 8007aee:	e0be      	b.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af6:	f240 233a 	movw	r3, #570	; 0x23a
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80b6 	beq.w	8007c6e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	f043 0202 	orr.w	r2, r3, #2
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b22:	f003 0308 	and.w	r3, r3, #8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d005      	beq.n	8007b36 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	f043 0208 	orr.w	r2, r3, #8
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3c:	f003 0320 	and.w	r3, r3, #32
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	f043 0220 	orr.w	r2, r3, #32
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b56:	f003 0310 	and.w	r3, r3, #16
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	f043 0210 	orr.w	r2, r3, #16
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d005      	beq.n	8007b84 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7c:	f043 0208 	orr.w	r2, r3, #8
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f240 723a 	movw	r2, #1850	; 0x73a
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6812      	ldr	r2, [r2, #0]
 8007b98:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8007b9c:	f023 0302 	bic.w	r3, r3, #2
 8007ba0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f002 fa7c 	bl	800a0a4 <SDMMC_CmdStopTransfer>
 8007bac:	4602      	mov	r2, r0
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f869 	bl	8007ca8 <HAL_SD_ErrorCallback>
}
 8007bd6:	e04a      	b.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d045      	beq.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	f003 0310 	and.w	r3, r3, #16
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <HAL_SD_IRQHandler+0x282>
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f003 0320 	and.w	r3, r3, #32
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d011      	beq.n	8007c1a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfa:	4a1f      	ldr	r2, [pc, #124]	; (8007c78 <HAL_SD_IRQHandler+0x304>)
 8007bfc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fc f87a 	bl	8003cfc <HAL_DMA_Abort_IT>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d02f      	beq.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 faec 	bl	80081f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007c18:	e029      	b.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d104      	bne.n	8007c2e <HAL_SD_IRQHandler+0x2ba>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d011      	beq.n	8007c52 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	4a12      	ldr	r2, [pc, #72]	; (8007c7c <HAL_SD_IRQHandler+0x308>)
 8007c34:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fc f85e 	bl	8003cfc <HAL_DMA_Abort_IT>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d013      	beq.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fb07 	bl	800825e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007c50:	e00d      	b.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f828 	bl	8007cbc <HAL_SD_AbortCallback>
}
 8007c6c:	e7ff      	b.n	8007c6e <HAL_SD_IRQHandler+0x2fa>
 8007c6e:	bf00      	nop
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	080081f1 	.word	0x080081f1
 8007c7c:	0800825f 	.word	0x0800825f

08007c80 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cde:	0f9b      	lsrs	r3, r3, #30
 8007ce0:	b2da      	uxtb	r2, r3
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cea:	0e9b      	lsrs	r3, r3, #26
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	f003 030f 	and.w	r3, r3, #15
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cfc:	0e1b      	lsrs	r3, r3, #24
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f003 0303 	and.w	r3, r3, #3
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d0e:	0c1b      	lsrs	r3, r3, #16
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d1a:	0a1b      	lsrs	r3, r3, #8
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d30:	0d1b      	lsrs	r3, r3, #20
 8007d32:	b29a      	uxth	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d3c:	0c1b      	lsrs	r3, r3, #16
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 030f 	and.w	r3, r3, #15
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d4e:	0bdb      	lsrs	r3, r3, #15
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	b2da      	uxtb	r2, r3
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d60:	0b9b      	lsrs	r3, r3, #14
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d72:	0b5b      	lsrs	r3, r3, #13
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f003 0301 	and.w	r3, r3, #1
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d84:	0b1b      	lsrs	r3, r3, #12
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	f003 0301 	and.w	r3, r3, #1
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2200      	movs	r2, #0
 8007d96:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d163      	bne.n	8007e68 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007da4:	009a      	lsls	r2, r3, #2
 8007da6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007daa:	4013      	ands	r3, r2
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007db0:	0f92      	lsrs	r2, r2, #30
 8007db2:	431a      	orrs	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dbc:	0edb      	lsrs	r3, r3, #27
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	f003 0307 	and.w	r3, r3, #7
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dce:	0e1b      	lsrs	r3, r3, #24
 8007dd0:	b2db      	uxtb	r3, r3
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de0:	0d5b      	lsrs	r3, r3, #21
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df2:	0c9b      	lsrs	r3, r3, #18
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	f003 0307 	and.w	r3, r3, #7
 8007dfa:	b2da      	uxtb	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e04:	0bdb      	lsrs	r3, r3, #15
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	b2da      	uxtb	r2, r3
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	7e1b      	ldrb	r3, [r3, #24]
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	3302      	adds	r3, #2
 8007e28:	2201      	movs	r2, #1
 8007e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007e32:	fb02 f203 	mul.w	r2, r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	7a1b      	ldrb	r3, [r3, #8]
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	f003 030f 	and.w	r3, r3, #15
 8007e44:	2201      	movs	r2, #1
 8007e46:	409a      	lsls	r2, r3
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007e54:	0a52      	lsrs	r2, r2, #9
 8007e56:	fb02 f203 	mul.w	r2, r2, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e64:	661a      	str	r2, [r3, #96]	; 0x60
 8007e66:	e031      	b.n	8007ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d11d      	bne.n	8007eac <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e7e:	0c1b      	lsrs	r3, r3, #16
 8007e80:	431a      	orrs	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	029a      	lsls	r2, r3, #10
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ea0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	661a      	str	r2, [r3, #96]	; 0x60
 8007eaa:	e00f      	b.n	8007ecc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a58      	ldr	r2, [pc, #352]	; (8008014 <HAL_SD_GetCardCSD+0x344>)
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e09d      	b.n	8008008 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ed0:	0b9b      	lsrs	r3, r3, #14
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee2:	09db      	lsrs	r3, r3, #7
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f04:	0fdb      	lsrs	r3, r3, #31
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f10:	0f5b      	lsrs	r3, r3, #29
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 0303 	and.w	r3, r3, #3
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	0e9b      	lsrs	r3, r3, #26
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f34:	0d9b      	lsrs	r3, r3, #22
 8007f36:	b2db      	uxtb	r3, r3
 8007f38:	f003 030f 	and.w	r3, r3, #15
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f46:	0d5b      	lsrs	r3, r3, #21
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f62:	0c1b      	lsrs	r3, r3, #16
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f76:	0bdb      	lsrs	r3, r3, #15
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	b2da      	uxtb	r2, r3
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	0b9b      	lsrs	r3, r3, #14
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	b2da      	uxtb	r2, r3
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f9e:	0b5b      	lsrs	r3, r3, #13
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	b2da      	uxtb	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fb2:	0b1b      	lsrs	r3, r3, #12
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fc6:	0a9b      	lsrs	r3, r3, #10
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0303 	and.w	r3, r3, #3
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fda:	0a1b      	lsrs	r3, r3, #8
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fee:	085b      	lsrs	r3, r3, #1
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	004005ff 	.word	0x004005ff

08008018 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b086      	sub	sp, #24
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800807c:	f107 030c 	add.w	r3, r7, #12
 8008080:	4619      	mov	r1, r3
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fa7e 	bl	8008584 <SD_SendStatus>
 8008088:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	0a5b      	lsrs	r3, r3, #9
 80080a0:	f003 030f 	and.w	r3, r3, #15
 80080a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80080a6:	693b      	ldr	r3, [r7, #16]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3718      	adds	r7, #24
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80080ce:	bf00      	nop
 80080d0:	3714      	adds	r7, #20
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	2b82      	cmp	r3, #130	; 0x82
 80080ee:	d111      	bne.n	8008114 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f001 ffd5 	bl	800a0a4 <SDMMC_CmdStopTransfer>
 80080fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d008      	beq.n	8008114 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	431a      	orrs	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800810e:	68f8      	ldr	r0, [r7, #12]
 8008110:	f7ff fdca 	bl	8007ca8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0208 	bic.w	r2, r2, #8
 8008122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f240 523a 	movw	r2, #1338	; 0x53a
 800812c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7ff fda9 	bl	8007c94 <HAL_SD_RxCpltCallback>
#endif
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008158:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fb ff7a 	bl	8004054 <HAL_DMA_GetError>
 8008160:	4603      	mov	r3, r0
 8008162:	2b02      	cmp	r3, #2
 8008164:	d03e      	beq.n	80081e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008174:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d002      	beq.n	8008182 <SD_DMAError+0x36>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d12d      	bne.n	80081de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a19      	ldr	r2, [pc, #100]	; (80081ec <SD_DMAError+0xa0>)
 8008188:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008190:	697b      	ldr	r3, [r7, #20]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008198:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80081a6:	6978      	ldr	r0, [r7, #20]
 80081a8:	f7ff ff62 	bl	8008070 <HAL_SD_GetCardState>
 80081ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b06      	cmp	r3, #6
 80081b2:	d002      	beq.n	80081ba <SD_DMAError+0x6e>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b05      	cmp	r3, #5
 80081b8:	d10a      	bne.n	80081d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4618      	mov	r0, r3
 80081c0:	f001 ff70 	bl	800a0a4 <SDMMC_CmdStopTransfer>
 80081c4:	4602      	mov	r2, r0
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ca:	431a      	orrs	r2, r3
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2200      	movs	r2, #0
 80081dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80081de:	6978      	ldr	r0, [r7, #20]
 80081e0:	f7ff fd62 	bl	8007ca8 <HAL_SD_ErrorCallback>
#endif
  }
}
 80081e4:	bf00      	nop
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	004005ff 	.word	0x004005ff

080081f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f240 523a 	movw	r2, #1338	; 0x53a
 8008206:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7ff ff31 	bl	8008070 <HAL_SD_GetCardState>
 800820e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2201      	movs	r2, #1
 8008214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b06      	cmp	r3, #6
 8008222:	d002      	beq.n	800822a <SD_DMATxAbort+0x3a>
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	2b05      	cmp	r3, #5
 8008228:	d10a      	bne.n	8008240 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4618      	mov	r0, r3
 8008230:	f001 ff38 	bl	800a0a4 <SDMMC_CmdStopTransfer>
 8008234:	4602      	mov	r2, r0
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823a:	431a      	orrs	r2, r3
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	2b00      	cmp	r3, #0
 8008246:	d103      	bne.n	8008250 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008248:	68f8      	ldr	r0, [r7, #12]
 800824a:	f7ff fd37 	bl	8007cbc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800824e:	e002      	b.n	8008256 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f7ff fd29 	bl	8007ca8 <HAL_SD_ErrorCallback>
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f240 523a 	movw	r2, #1338	; 0x53a
 8008274:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7ff fefa 	bl	8008070 <HAL_SD_GetCardState>
 800827c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	2200      	movs	r2, #0
 800828a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	2b06      	cmp	r3, #6
 8008290:	d002      	beq.n	8008298 <SD_DMARxAbort+0x3a>
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	2b05      	cmp	r3, #5
 8008296:	d10a      	bne.n	80082ae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f001 ff01 	bl	800a0a4 <SDMMC_CmdStopTransfer>
 80082a2:	4602      	mov	r2, r0
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	431a      	orrs	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d103      	bne.n	80082be <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80082b6:	68f8      	ldr	r0, [r7, #12]
 80082b8:	f7ff fd00 	bl	8007cbc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80082bc:	e002      	b.n	80082c4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80082be:	68f8      	ldr	r0, [r7, #12]
 80082c0:	f7ff fcf2 	bl	8007ca8 <HAL_SD_ErrorCallback>
}
 80082c4:	bf00      	nop
 80082c6:	3710      	adds	r7, #16
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082cc:	b5b0      	push	{r4, r5, r7, lr}
 80082ce:	b094      	sub	sp, #80	; 0x50
 80082d0:	af04      	add	r7, sp, #16
 80082d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80082d4:	2301      	movs	r3, #1
 80082d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4618      	mov	r0, r3
 80082de:	f001 fdb3 	bl	8009e48 <SDIO_GetPowerState>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d102      	bne.n	80082ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80082ec:	e0b7      	b.n	800845e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d02f      	beq.n	8008356 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4618      	mov	r0, r3
 80082fc:	f001 ff99 	bl	800a232 <SDMMC_CmdSendCID>
 8008300:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008304:	2b00      	cmp	r3, #0
 8008306:	d001      	beq.n	800830c <SD_InitCard+0x40>
    {
      return errorstate;
 8008308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800830a:	e0a8      	b.n	800845e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2100      	movs	r1, #0
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fddd 	bl	8009ed2 <SDIO_GetResponse>
 8008318:	4602      	mov	r2, r0
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2104      	movs	r1, #4
 8008324:	4618      	mov	r0, r3
 8008326:	f001 fdd4 	bl	8009ed2 <SDIO_GetResponse>
 800832a:	4602      	mov	r2, r0
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2108      	movs	r1, #8
 8008336:	4618      	mov	r0, r3
 8008338:	f001 fdcb 	bl	8009ed2 <SDIO_GetResponse>
 800833c:	4602      	mov	r2, r0
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	210c      	movs	r1, #12
 8008348:	4618      	mov	r0, r3
 800834a:	f001 fdc2 	bl	8009ed2 <SDIO_GetResponse>
 800834e:	4602      	mov	r2, r0
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835a:	2b03      	cmp	r3, #3
 800835c:	d00d      	beq.n	800837a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f107 020e 	add.w	r2, r7, #14
 8008366:	4611      	mov	r1, r2
 8008368:	4618      	mov	r0, r3
 800836a:	f001 ff9f 	bl	800a2ac <SDMMC_CmdSetRelAdd>
 800836e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008372:	2b00      	cmp	r3, #0
 8008374:	d001      	beq.n	800837a <SD_InitCard+0xae>
    {
      return errorstate;
 8008376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008378:	e071      	b.n	800845e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837e:	2b03      	cmp	r3, #3
 8008380:	d036      	beq.n	80083f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008382:	89fb      	ldrh	r3, [r7, #14]
 8008384:	461a      	mov	r2, r3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008392:	041b      	lsls	r3, r3, #16
 8008394:	4619      	mov	r1, r3
 8008396:	4610      	mov	r0, r2
 8008398:	f001 ff69 	bl	800a26e <SDMMC_CmdSendCSD>
 800839c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800839e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 80083a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a6:	e05a      	b.n	800845e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2100      	movs	r1, #0
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 fd8f 	bl	8009ed2 <SDIO_GetResponse>
 80083b4:	4602      	mov	r2, r0
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2104      	movs	r1, #4
 80083c0:	4618      	mov	r0, r3
 80083c2:	f001 fd86 	bl	8009ed2 <SDIO_GetResponse>
 80083c6:	4602      	mov	r2, r0
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2108      	movs	r1, #8
 80083d2:	4618      	mov	r0, r3
 80083d4:	f001 fd7d 	bl	8009ed2 <SDIO_GetResponse>
 80083d8:	4602      	mov	r2, r0
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	210c      	movs	r1, #12
 80083e4:	4618      	mov	r0, r3
 80083e6:	f001 fd74 	bl	8009ed2 <SDIO_GetResponse>
 80083ea:	4602      	mov	r2, r0
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	2104      	movs	r1, #4
 80083f6:	4618      	mov	r0, r3
 80083f8:	f001 fd6b 	bl	8009ed2 <SDIO_GetResponse>
 80083fc:	4603      	mov	r3, r0
 80083fe:	0d1a      	lsrs	r2, r3, #20
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008404:	f107 0310 	add.w	r3, r7, #16
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f7ff fc60 	bl	8007cd0 <HAL_SD_GetCardCSD>
 8008410:	4603      	mov	r3, r0
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008416:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800841a:	e020      	b.n	800845e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6819      	ldr	r1, [r3, #0]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008424:	041b      	lsls	r3, r3, #16
 8008426:	f04f 0400 	mov.w	r4, #0
 800842a:	461a      	mov	r2, r3
 800842c:	4623      	mov	r3, r4
 800842e:	4608      	mov	r0, r1
 8008430:	f001 fe5a 	bl	800a0e8 <SDMMC_CmdSelDesel>
 8008434:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008436:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <SD_InitCard+0x174>
  {
    return errorstate;
 800843c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800843e:	e00e      	b.n	800845e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681d      	ldr	r5, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	466c      	mov	r4, sp
 8008448:	f103 0210 	add.w	r2, r3, #16
 800844c:	ca07      	ldmia	r2, {r0, r1, r2}
 800844e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008452:	3304      	adds	r3, #4
 8008454:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008456:	4628      	mov	r0, r5
 8008458:	f001 fc9e 	bl	8009d98 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800845c:	2300      	movs	r3, #0
}
 800845e:	4618      	mov	r0, r3
 8008460:	3740      	adds	r7, #64	; 0x40
 8008462:	46bd      	mov	sp, r7
 8008464:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008468 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	2300      	movs	r3, #0
 800847a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4618      	mov	r0, r3
 8008482:	f001 fe54 	bl	800a12e <SDMMC_CmdGoIdleState>
 8008486:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <SD_PowerON+0x2a>
  {
    return errorstate;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	e072      	b.n	8008578 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f001 fe67 	bl	800a16a <SDMMC_CmdOperCond>
 800849c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00d      	beq.n	80084c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4618      	mov	r0, r3
 80084b0:	f001 fe3d 	bl	800a12e <SDMMC_CmdGoIdleState>
 80084b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	e05b      	b.n	8008578 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d137      	bne.n	800853e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2100      	movs	r1, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f001 fe67 	bl	800a1a8 <SDMMC_CmdAppCommand>
 80084da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d02d      	beq.n	800853e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084e6:	e047      	b.n	8008578 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2100      	movs	r1, #0
 80084ee:	4618      	mov	r0, r3
 80084f0:	f001 fe5a 	bl	800a1a8 <SDMMC_CmdAppCommand>
 80084f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d001      	beq.n	8008500 <SD_PowerON+0x98>
    {
      return errorstate;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	e03b      	b.n	8008578 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	491e      	ldr	r1, [pc, #120]	; (8008580 <SD_PowerON+0x118>)
 8008506:	4618      	mov	r0, r3
 8008508:	f001 fe70 	bl	800a1ec <SDMMC_CmdAppOperCommand>
 800850c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d002      	beq.n	800851a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008514:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008518:	e02e      	b.n	8008578 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2100      	movs	r1, #0
 8008520:	4618      	mov	r0, r3
 8008522:	f001 fcd6 	bl	8009ed2 <SDIO_GetResponse>
 8008526:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	0fdb      	lsrs	r3, r3, #31
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <SD_PowerON+0xcc>
 8008530:	2301      	movs	r3, #1
 8008532:	e000      	b.n	8008536 <SD_PowerON+0xce>
 8008534:	2300      	movs	r3, #0
 8008536:	613b      	str	r3, [r7, #16]

    count++;
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	3301      	adds	r3, #1
 800853c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008544:	4293      	cmp	r3, r2
 8008546:	d802      	bhi.n	800854e <SD_PowerON+0xe6>
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d0cc      	beq.n	80084e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008554:	4293      	cmp	r3, r2
 8008556:	d902      	bls.n	800855e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008558:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800855c:	e00c      	b.n	8008578 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	645a      	str	r2, [r3, #68]	; 0x44
 800856e:	e002      	b.n	8008576 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2200      	movs	r2, #0
 8008574:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	c1100000 	.word	0xc1100000

08008584 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d102      	bne.n	800859a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008594:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008598:	e018      	b.n	80085cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a2:	041b      	lsls	r3, r3, #16
 80085a4:	4619      	mov	r1, r3
 80085a6:	4610      	mov	r0, r2
 80085a8:	f001 fea1 	bl	800a2ee <SDMMC_CmdSendStatus>
 80085ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d001      	beq.n	80085b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	e009      	b.n	80085cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	2100      	movs	r1, #0
 80085be:	4618      	mov	r0, r3
 80085c0:	f001 fc87 	bl	8009ed2 <SDIO_GetResponse>
 80085c4:	4602      	mov	r2, r0
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085e0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d03f      	beq.n	800866e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80085ee:	2300      	movs	r3, #0
 80085f0:	617b      	str	r3, [r7, #20]
 80085f2:	e033      	b.n	800865c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f001 fbf8 	bl	8009dee <SDIO_ReadFIFO>
 80085fe:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	b2da      	uxtb	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3301      	adds	r3, #1
 800860c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	3b01      	subs	r3, #1
 8008612:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	0a1b      	lsrs	r3, r3, #8
 8008618:	b2da      	uxtb	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	3301      	adds	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	3b01      	subs	r3, #1
 8008628:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	0c1b      	lsrs	r3, r3, #16
 800862e:	b2da      	uxtb	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	3301      	adds	r3, #1
 8008638:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800863a:	693b      	ldr	r3, [r7, #16]
 800863c:	3b01      	subs	r3, #1
 800863e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	0e1b      	lsrs	r3, r3, #24
 8008644:	b2da      	uxtb	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	701a      	strb	r2, [r3, #0]
      tmp++;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3301      	adds	r3, #1
 800864e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	3b01      	subs	r3, #1
 8008654:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	3301      	adds	r3, #1
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	2b07      	cmp	r3, #7
 8008660:	d9c8      	bls.n	80085f4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800866e:	bf00      	nop
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b086      	sub	sp, #24
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6a1b      	ldr	r3, [r3, #32]
 8008682:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d043      	beq.n	8008718 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008690:	2300      	movs	r3, #0
 8008692:	617b      	str	r3, [r7, #20]
 8008694:	e037      	b.n	8008706 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	3b01      	subs	r3, #1
 80086a6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	021a      	lsls	r2, r3, #8
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	4313      	orrs	r3, r2
 80086b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	3301      	adds	r3, #1
 80086b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	3b01      	subs	r3, #1
 80086be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	781b      	ldrb	r3, [r3, #0]
 80086c4:	041a      	lsls	r2, r3, #16
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	3301      	adds	r3, #1
 80086d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	061a      	lsls	r2, r3, #24
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	3301      	adds	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f107 0208 	add.w	r2, r7, #8
 80086f8:	4611      	mov	r1, r2
 80086fa:	4618      	mov	r0, r3
 80086fc:	f001 fb84 	bl	8009e08 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	3301      	adds	r3, #1
 8008704:	617b      	str	r3, [r7, #20]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	2b07      	cmp	r3, #7
 800870a:	d9c4      	bls.n	8008696 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008718:	bf00      	nop
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}

08008720 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d101      	bne.n	8008732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e056      	b.n	80087e0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f7fa fd97 	bl	8003280 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2202      	movs	r2, #2
 8008756:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008768:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	431a      	orrs	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	431a      	orrs	r2, r3
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	695b      	ldr	r3, [r3, #20]
 8008784:	431a      	orrs	r2, r3
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800878e:	431a      	orrs	r2, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	69db      	ldr	r3, [r3, #28]
 8008794:	431a      	orrs	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a1b      	ldr	r3, [r3, #32]
 800879a:	ea42 0103 	orr.w	r1, r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	0c1b      	lsrs	r3, r3, #16
 80087b0:	f003 0104 	and.w	r1, r3, #4
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	430a      	orrs	r2, r1
 80087be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	69da      	ldr	r2, [r3, #28]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	099b      	lsrs	r3, r3, #6
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d10f      	bne.n	800882c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	099b      	lsrs	r3, r3, #6
 800881a:	f003 0301 	and.w	r3, r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	d004      	beq.n	800882c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	4798      	blx	r3
    return;
 800882a:	e0d8      	b.n	80089de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	085b      	lsrs	r3, r3, #1
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00a      	beq.n	800884e <HAL_SPI_IRQHandler+0x66>
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	09db      	lsrs	r3, r3, #7
 800883c:	f003 0301 	and.w	r3, r3, #1
 8008840:	2b00      	cmp	r3, #0
 8008842:	d004      	beq.n	800884e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
    return;
 800884c:	e0c7      	b.n	80089de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	095b      	lsrs	r3, r3, #5
 8008852:	f003 0301 	and.w	r3, r3, #1
 8008856:	2b00      	cmp	r3, #0
 8008858:	d10c      	bne.n	8008874 <HAL_SPI_IRQHandler+0x8c>
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	099b      	lsrs	r3, r3, #6
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d106      	bne.n	8008874 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008866:	69bb      	ldr	r3, [r7, #24]
 8008868:	0a1b      	lsrs	r3, r3, #8
 800886a:	f003 0301 	and.w	r3, r3, #1
 800886e:	2b00      	cmp	r3, #0
 8008870:	f000 80b5 	beq.w	80089de <HAL_SPI_IRQHandler+0x1f6>
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	095b      	lsrs	r3, r3, #5
 8008878:	f003 0301 	and.w	r3, r3, #1
 800887c:	2b00      	cmp	r3, #0
 800887e:	f000 80ae 	beq.w	80089de <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	099b      	lsrs	r3, r3, #6
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	2b00      	cmp	r3, #0
 800888c:	d023      	beq.n	80088d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b03      	cmp	r3, #3
 8008898:	d011      	beq.n	80088be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889e:	f043 0204 	orr.w	r2, r3, #4
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088a6:	2300      	movs	r3, #0
 80088a8:	617b      	str	r3, [r7, #20]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	617b      	str	r3, [r7, #20]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	689b      	ldr	r3, [r3, #8]
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	e00b      	b.n	80088d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	613b      	str	r3, [r7, #16]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	613b      	str	r3, [r7, #16]
 80088d2:	693b      	ldr	r3, [r7, #16]
        return;
 80088d4:	e083      	b.n	80089de <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	095b      	lsrs	r3, r3, #5
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d014      	beq.n	800890c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e6:	f043 0201 	orr.w	r2, r3, #1
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80088ee:	2300      	movs	r3, #0
 80088f0:	60fb      	str	r3, [r7, #12]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	60fb      	str	r3, [r7, #12]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	0a1b      	lsrs	r3, r3, #8
 8008910:	f003 0301 	and.w	r3, r3, #1
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00c      	beq.n	8008932 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800891c:	f043 0208 	orr.w	r2, r3, #8
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008924:	2300      	movs	r3, #0
 8008926:	60bb      	str	r3, [r7, #8]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	60bb      	str	r3, [r7, #8]
 8008930:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008936:	2b00      	cmp	r3, #0
 8008938:	d050      	beq.n	80089dc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008948:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d104      	bne.n	8008966 <HAL_SPI_IRQHandler+0x17e>
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d034      	beq.n	80089d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f022 0203 	bic.w	r2, r2, #3
 8008974:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d011      	beq.n	80089a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008982:	4a18      	ldr	r2, [pc, #96]	; (80089e4 <HAL_SPI_IRQHandler+0x1fc>)
 8008984:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800898a:	4618      	mov	r0, r3
 800898c:	f7fb f9b6 	bl	8003cfc <HAL_DMA_Abort_IT>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d005      	beq.n	80089a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800899a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d016      	beq.n	80089d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ae:	4a0d      	ldr	r2, [pc, #52]	; (80089e4 <HAL_SPI_IRQHandler+0x1fc>)
 80089b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fb f9a0 	bl	8003cfc <HAL_DMA_Abort_IT>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80089ce:	e003      	b.n	80089d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f809 	bl	80089e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80089d6:	e000      	b.n	80089da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80089d8:	bf00      	nop
    return;
 80089da:	bf00      	nop
 80089dc:	bf00      	nop
  }
}
 80089de:	3720      	adds	r7, #32
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}
 80089e4:	080089fd 	.word	0x080089fd

080089e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80089f0:	bf00      	nop
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a08:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008a16:	68f8      	ldr	r0, [r7, #12]
 8008a18:	f7ff ffe6 	bl	80089e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}

08008a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b082      	sub	sp, #8
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d101      	bne.n	8008a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e01d      	b.n	8008a72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d106      	bne.n	8008a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7fa fccc 	bl	80033e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2202      	movs	r2, #2
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681a      	ldr	r2, [r3, #0]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	3304      	adds	r3, #4
 8008a60:	4619      	mov	r1, r3
 8008a62:	4610      	mov	r0, r2
 8008a64:	f000 fa42 	bl	8008eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2202      	movs	r2, #2
 8008a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2b06      	cmp	r3, #6
 8008a9a:	d007      	beq.n	8008aac <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f042 0201 	orr.w	r2, r2, #1
 8008aaa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2201      	movs	r2, #1
 8008ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68da      	ldr	r2, [r3, #12]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f042 0201 	orr.w	r2, r2, #1
 8008ad8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f003 0307 	and.w	r3, r3, #7
 8008ae4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2b06      	cmp	r3, #6
 8008aea:	d007      	beq.n	8008afc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f042 0201 	orr.w	r2, r2, #1
 8008afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3714      	adds	r7, #20
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr

08008b0a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e01d      	b.n	8008b58 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d106      	bne.n	8008b36 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 f815 	bl	8008b60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2202      	movs	r2, #2
 8008b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4619      	mov	r1, r3
 8008b48:	4610      	mov	r0, r2
 8008b4a:	f000 f9cf 	bl	8008eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b083      	sub	sp, #12
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2201      	movs	r2, #1
 8008b84:	6839      	ldr	r1, [r7, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f000 fc9a 	bl	80094c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a15      	ldr	r2, [pc, #84]	; (8008be8 <HAL_TIM_PWM_Start+0x74>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d004      	beq.n	8008ba0 <HAL_TIM_PWM_Start+0x2c>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a14      	ldr	r2, [pc, #80]	; (8008bec <HAL_TIM_PWM_Start+0x78>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d101      	bne.n	8008ba4 <HAL_TIM_PWM_Start+0x30>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e000      	b.n	8008ba6 <HAL_TIM_PWM_Start+0x32>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bb8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f003 0307 	and.w	r3, r3, #7
 8008bc4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2b06      	cmp	r3, #6
 8008bca:	d007      	beq.n	8008bdc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f042 0201 	orr.w	r2, r2, #1
 8008bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	40010000 	.word	0x40010000
 8008bec:	40010400 	.word	0x40010400

08008bf0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d101      	bne.n	8008c0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008c06:	2302      	movs	r3, #2
 8008c08:	e0b4      	b.n	8008d74 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2202      	movs	r2, #2
 8008c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b0c      	cmp	r3, #12
 8008c1e:	f200 809f 	bhi.w	8008d60 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008c22:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c28:	08008c5d 	.word	0x08008c5d
 8008c2c:	08008d61 	.word	0x08008d61
 8008c30:	08008d61 	.word	0x08008d61
 8008c34:	08008d61 	.word	0x08008d61
 8008c38:	08008c9d 	.word	0x08008c9d
 8008c3c:	08008d61 	.word	0x08008d61
 8008c40:	08008d61 	.word	0x08008d61
 8008c44:	08008d61 	.word	0x08008d61
 8008c48:	08008cdf 	.word	0x08008cdf
 8008c4c:	08008d61 	.word	0x08008d61
 8008c50:	08008d61 	.word	0x08008d61
 8008c54:	08008d61 	.word	0x08008d61
 8008c58:	08008d1f 	.word	0x08008d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	68b9      	ldr	r1, [r7, #8]
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f9e2 	bl	800902c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	699a      	ldr	r2, [r3, #24]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f042 0208 	orr.w	r2, r2, #8
 8008c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	699a      	ldr	r2, [r3, #24]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0204 	bic.w	r2, r2, #4
 8008c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6999      	ldr	r1, [r3, #24]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	691a      	ldr	r2, [r3, #16]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	430a      	orrs	r2, r1
 8008c98:	619a      	str	r2, [r3, #24]
      break;
 8008c9a:	e062      	b.n	8008d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f000 fa32 	bl	800910c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	699a      	ldr	r2, [r3, #24]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6999      	ldr	r1, [r3, #24]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	021a      	lsls	r2, r3, #8
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	619a      	str	r2, [r3, #24]
      break;
 8008cdc:	e041      	b.n	8008d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	68b9      	ldr	r1, [r7, #8]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fa87 	bl	80091f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f042 0208 	orr.w	r2, r2, #8
 8008cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69da      	ldr	r2, [r3, #28]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 0204 	bic.w	r2, r2, #4
 8008d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	69d9      	ldr	r1, [r3, #28]
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	691a      	ldr	r2, [r3, #16]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	61da      	str	r2, [r3, #28]
      break;
 8008d1c:	e021      	b.n	8008d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	68b9      	ldr	r1, [r7, #8]
 8008d24:	4618      	mov	r0, r3
 8008d26:	f000 fadb 	bl	80092e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	69da      	ldr	r2, [r3, #28]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69da      	ldr	r2, [r3, #28]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	69d9      	ldr	r1, [r3, #28]
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	021a      	lsls	r2, r3, #8
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	430a      	orrs	r2, r1
 8008d5c:	61da      	str	r2, [r3, #28]
      break;
 8008d5e:	e000      	b.n	8008d62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008d60:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d101      	bne.n	8008d94 <HAL_TIM_ConfigClockSource+0x18>
 8008d90:	2302      	movs	r3, #2
 8008d92:	e0a6      	b.n	8008ee2 <HAL_TIM_ConfigClockSource+0x166>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b40      	cmp	r3, #64	; 0x40
 8008dca:	d067      	beq.n	8008e9c <HAL_TIM_ConfigClockSource+0x120>
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d80b      	bhi.n	8008de8 <HAL_TIM_ConfigClockSource+0x6c>
 8008dd0:	2b10      	cmp	r3, #16
 8008dd2:	d073      	beq.n	8008ebc <HAL_TIM_ConfigClockSource+0x140>
 8008dd4:	2b10      	cmp	r3, #16
 8008dd6:	d802      	bhi.n	8008dde <HAL_TIM_ConfigClockSource+0x62>
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d06f      	beq.n	8008ebc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008ddc:	e078      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008dde:	2b20      	cmp	r3, #32
 8008de0:	d06c      	beq.n	8008ebc <HAL_TIM_ConfigClockSource+0x140>
 8008de2:	2b30      	cmp	r3, #48	; 0x30
 8008de4:	d06a      	beq.n	8008ebc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008de6:	e073      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008de8:	2b70      	cmp	r3, #112	; 0x70
 8008dea:	d00d      	beq.n	8008e08 <HAL_TIM_ConfigClockSource+0x8c>
 8008dec:	2b70      	cmp	r3, #112	; 0x70
 8008dee:	d804      	bhi.n	8008dfa <HAL_TIM_ConfigClockSource+0x7e>
 8008df0:	2b50      	cmp	r3, #80	; 0x50
 8008df2:	d033      	beq.n	8008e5c <HAL_TIM_ConfigClockSource+0xe0>
 8008df4:	2b60      	cmp	r3, #96	; 0x60
 8008df6:	d041      	beq.n	8008e7c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008df8:	e06a      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dfe:	d066      	beq.n	8008ece <HAL_TIM_ConfigClockSource+0x152>
 8008e00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e04:	d017      	beq.n	8008e36 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008e06:	e063      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6818      	ldr	r0, [r3, #0]
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	6899      	ldr	r1, [r3, #8]
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	685a      	ldr	r2, [r3, #4]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	f000 fb32 	bl	8009480 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e2a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	609a      	str	r2, [r3, #8]
      break;
 8008e34:	e04c      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6818      	ldr	r0, [r3, #0]
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	6899      	ldr	r1, [r3, #8]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	685a      	ldr	r2, [r3, #4]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	f000 fb1b 	bl	8009480 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	689a      	ldr	r2, [r3, #8]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e58:	609a      	str	r2, [r3, #8]
      break;
 8008e5a:	e039      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	6859      	ldr	r1, [r3, #4]
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	461a      	mov	r2, r3
 8008e6a:	f000 fa8f 	bl	800938c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2150      	movs	r1, #80	; 0x50
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fae8 	bl	800944a <TIM_ITRx_SetConfig>
      break;
 8008e7a:	e029      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	6859      	ldr	r1, [r3, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
 8008e88:	461a      	mov	r2, r3
 8008e8a:	f000 faae 	bl	80093ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2160      	movs	r1, #96	; 0x60
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fad8 	bl	800944a <TIM_ITRx_SetConfig>
      break;
 8008e9a:	e019      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6818      	ldr	r0, [r3, #0]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	6859      	ldr	r1, [r3, #4]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	f000 fa6f 	bl	800938c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2140      	movs	r1, #64	; 0x40
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fac8 	bl	800944a <TIM_ITRx_SetConfig>
      break;
 8008eba:	e009      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	f000 fabf 	bl	800944a <TIM_ITRx_SetConfig>
      break;
 8008ecc:	e000      	b.n	8008ed0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008ece:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
}
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
	...

08008eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a40      	ldr	r2, [pc, #256]	; (8009000 <TIM_Base_SetConfig+0x114>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d013      	beq.n	8008f2c <TIM_Base_SetConfig+0x40>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0a:	d00f      	beq.n	8008f2c <TIM_Base_SetConfig+0x40>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a3d      	ldr	r2, [pc, #244]	; (8009004 <TIM_Base_SetConfig+0x118>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d00b      	beq.n	8008f2c <TIM_Base_SetConfig+0x40>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a3c      	ldr	r2, [pc, #240]	; (8009008 <TIM_Base_SetConfig+0x11c>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d007      	beq.n	8008f2c <TIM_Base_SetConfig+0x40>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a3b      	ldr	r2, [pc, #236]	; (800900c <TIM_Base_SetConfig+0x120>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d003      	beq.n	8008f2c <TIM_Base_SetConfig+0x40>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a3a      	ldr	r2, [pc, #232]	; (8009010 <TIM_Base_SetConfig+0x124>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d108      	bne.n	8008f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	68fa      	ldr	r2, [r7, #12]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a2f      	ldr	r2, [pc, #188]	; (8009000 <TIM_Base_SetConfig+0x114>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d02b      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f4c:	d027      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	4a2c      	ldr	r2, [pc, #176]	; (8009004 <TIM_Base_SetConfig+0x118>)
 8008f52:	4293      	cmp	r3, r2
 8008f54:	d023      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	4a2b      	ldr	r2, [pc, #172]	; (8009008 <TIM_Base_SetConfig+0x11c>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d01f      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a2a      	ldr	r2, [pc, #168]	; (800900c <TIM_Base_SetConfig+0x120>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d01b      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4a29      	ldr	r2, [pc, #164]	; (8009010 <TIM_Base_SetConfig+0x124>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d017      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a28      	ldr	r2, [pc, #160]	; (8009014 <TIM_Base_SetConfig+0x128>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d013      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a27      	ldr	r2, [pc, #156]	; (8009018 <TIM_Base_SetConfig+0x12c>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d00f      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a26      	ldr	r2, [pc, #152]	; (800901c <TIM_Base_SetConfig+0x130>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00b      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a25      	ldr	r2, [pc, #148]	; (8009020 <TIM_Base_SetConfig+0x134>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d007      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a24      	ldr	r2, [pc, #144]	; (8009024 <TIM_Base_SetConfig+0x138>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d003      	beq.n	8008f9e <TIM_Base_SetConfig+0xb2>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a23      	ldr	r2, [pc, #140]	; (8009028 <TIM_Base_SetConfig+0x13c>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d108      	bne.n	8008fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	68fa      	ldr	r2, [r7, #12]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	68fa      	ldr	r2, [r7, #12]
 8008fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	689a      	ldr	r2, [r3, #8]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	681a      	ldr	r2, [r3, #0]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a0a      	ldr	r2, [pc, #40]	; (8009000 <TIM_Base_SetConfig+0x114>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d003      	beq.n	8008fe4 <TIM_Base_SetConfig+0xf8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a0c      	ldr	r2, [pc, #48]	; (8009010 <TIM_Base_SetConfig+0x124>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d103      	bne.n	8008fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	691a      	ldr	r2, [r3, #16]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	615a      	str	r2, [r3, #20]
}
 8008ff2:	bf00      	nop
 8008ff4:	3714      	adds	r7, #20
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	40010000 	.word	0x40010000
 8009004:	40000400 	.word	0x40000400
 8009008:	40000800 	.word	0x40000800
 800900c:	40000c00 	.word	0x40000c00
 8009010:	40010400 	.word	0x40010400
 8009014:	40014000 	.word	0x40014000
 8009018:	40014400 	.word	0x40014400
 800901c:	40014800 	.word	0x40014800
 8009020:	40001800 	.word	0x40001800
 8009024:	40001c00 	.word	0x40001c00
 8009028:	40002000 	.word	0x40002000

0800902c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	f023 0201 	bic.w	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6a1b      	ldr	r3, [r3, #32]
 8009046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0303 	bic.w	r3, r3, #3
 8009062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	f023 0302 	bic.w	r3, r3, #2
 8009074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	4313      	orrs	r3, r2
 800907e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a20      	ldr	r2, [pc, #128]	; (8009104 <TIM_OC1_SetConfig+0xd8>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d003      	beq.n	8009090 <TIM_OC1_SetConfig+0x64>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a1f      	ldr	r2, [pc, #124]	; (8009108 <TIM_OC1_SetConfig+0xdc>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d10c      	bne.n	80090aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f023 0308 	bic.w	r3, r3, #8
 8009096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f023 0304 	bic.w	r3, r3, #4
 80090a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a15      	ldr	r2, [pc, #84]	; (8009104 <TIM_OC1_SetConfig+0xd8>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d003      	beq.n	80090ba <TIM_OC1_SetConfig+0x8e>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a14      	ldr	r2, [pc, #80]	; (8009108 <TIM_OC1_SetConfig+0xdc>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d111      	bne.n	80090de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	693a      	ldr	r2, [r7, #16]
 80090d0:	4313      	orrs	r3, r2
 80090d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	699b      	ldr	r3, [r3, #24]
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	4313      	orrs	r3, r2
 80090dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	693a      	ldr	r2, [r7, #16]
 80090e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	697a      	ldr	r2, [r7, #20]
 80090f6:	621a      	str	r2, [r3, #32]
}
 80090f8:	bf00      	nop
 80090fa:	371c      	adds	r7, #28
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr
 8009104:	40010000 	.word	0x40010000
 8009108:	40010400 	.word	0x40010400

0800910c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800910c:	b480      	push	{r7}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	f023 0210 	bic.w	r2, r3, #16
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	699b      	ldr	r3, [r3, #24]
 8009132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800913a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	021b      	lsls	r3, r3, #8
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	4313      	orrs	r3, r2
 800914e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	f023 0320 	bic.w	r3, r3, #32
 8009156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	011b      	lsls	r3, r3, #4
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	4313      	orrs	r3, r2
 8009162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4a22      	ldr	r2, [pc, #136]	; (80091f0 <TIM_OC2_SetConfig+0xe4>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d003      	beq.n	8009174 <TIM_OC2_SetConfig+0x68>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a21      	ldr	r2, [pc, #132]	; (80091f4 <TIM_OC2_SetConfig+0xe8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d10d      	bne.n	8009190 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800917a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	011b      	lsls	r3, r3, #4
 8009182:	697a      	ldr	r2, [r7, #20]
 8009184:	4313      	orrs	r3, r2
 8009186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800918e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a17      	ldr	r2, [pc, #92]	; (80091f0 <TIM_OC2_SetConfig+0xe4>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d003      	beq.n	80091a0 <TIM_OC2_SetConfig+0x94>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a16      	ldr	r2, [pc, #88]	; (80091f4 <TIM_OC2_SetConfig+0xe8>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d113      	bne.n	80091c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80091a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	621a      	str	r2, [r3, #32]
}
 80091e2:	bf00      	nop
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	40010000 	.word	0x40010000
 80091f4:	40010400 	.word	0x40010400

080091f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b087      	sub	sp, #28
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	69db      	ldr	r3, [r3, #28]
 800921e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 0303 	bic.w	r3, r3, #3
 800922e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	4313      	orrs	r3, r2
 8009238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	021b      	lsls	r3, r3, #8
 8009248:	697a      	ldr	r2, [r7, #20]
 800924a:	4313      	orrs	r3, r2
 800924c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a21      	ldr	r2, [pc, #132]	; (80092d8 <TIM_OC3_SetConfig+0xe0>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d003      	beq.n	800925e <TIM_OC3_SetConfig+0x66>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a20      	ldr	r2, [pc, #128]	; (80092dc <TIM_OC3_SetConfig+0xe4>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d10d      	bne.n	800927a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	4313      	orrs	r3, r2
 8009270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a16      	ldr	r2, [pc, #88]	; (80092d8 <TIM_OC3_SetConfig+0xe0>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d003      	beq.n	800928a <TIM_OC3_SetConfig+0x92>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a15      	ldr	r2, [pc, #84]	; (80092dc <TIM_OC3_SetConfig+0xe4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d113      	bne.n	80092b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	695b      	ldr	r3, [r3, #20]
 800929e:	011b      	lsls	r3, r3, #4
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	011b      	lsls	r3, r3, #4
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	4313      	orrs	r3, r2
 80092b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	685a      	ldr	r2, [r3, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	621a      	str	r2, [r3, #32]
}
 80092cc:	bf00      	nop
 80092ce:	371c      	adds	r7, #28
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	40010000 	.word	0x40010000
 80092dc:	40010400 	.word	0x40010400

080092e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6a1b      	ldr	r3, [r3, #32]
 80092ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a1b      	ldr	r3, [r3, #32]
 80092fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	69db      	ldr	r3, [r3, #28]
 8009306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800930e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	4313      	orrs	r3, r2
 8009322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800932a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	031b      	lsls	r3, r3, #12
 8009332:	693a      	ldr	r2, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	4a12      	ldr	r2, [pc, #72]	; (8009384 <TIM_OC4_SetConfig+0xa4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d003      	beq.n	8009348 <TIM_OC4_SetConfig+0x68>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a11      	ldr	r2, [pc, #68]	; (8009388 <TIM_OC4_SetConfig+0xa8>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d109      	bne.n	800935c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800934e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	019b      	lsls	r3, r3, #6
 8009356:	697a      	ldr	r2, [r7, #20]
 8009358:	4313      	orrs	r3, r2
 800935a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	685a      	ldr	r2, [r3, #4]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	693a      	ldr	r2, [r7, #16]
 8009374:	621a      	str	r2, [r3, #32]
}
 8009376:	bf00      	nop
 8009378:	371c      	adds	r7, #28
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	40010000 	.word	0x40010000
 8009388:	40010400 	.word	0x40010400

0800938c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800938c:	b480      	push	{r7}
 800938e:	b087      	sub	sp, #28
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6a1b      	ldr	r3, [r3, #32]
 800939c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	f023 0201 	bic.w	r2, r3, #1
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80093b0:	693b      	ldr	r3, [r7, #16]
 80093b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	011b      	lsls	r3, r3, #4
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	4313      	orrs	r3, r2
 80093c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	f023 030a 	bic.w	r3, r3, #10
 80093c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	621a      	str	r2, [r3, #32]
}
 80093de:	bf00      	nop
 80093e0:	371c      	adds	r7, #28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr

080093ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b087      	sub	sp, #28
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	f023 0210 	bic.w	r2, r3, #16
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009414:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	031b      	lsls	r3, r3, #12
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009426:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	011b      	lsls	r3, r3, #4
 800942c:	693a      	ldr	r2, [r7, #16]
 800942e:	4313      	orrs	r3, r2
 8009430:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	621a      	str	r2, [r3, #32]
}
 800943e:	bf00      	nop
 8009440:	371c      	adds	r7, #28
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800944a:	b480      	push	{r7}
 800944c:	b085      	sub	sp, #20
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009460:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009462:	683a      	ldr	r2, [r7, #0]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4313      	orrs	r3, r2
 8009468:	f043 0307 	orr.w	r3, r3, #7
 800946c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	609a      	str	r2, [r3, #8]
}
 8009474:	bf00      	nop
 8009476:	3714      	adds	r7, #20
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
 800948c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800949a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	021a      	lsls	r2, r3, #8
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	431a      	orrs	r2, r3
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	4313      	orrs	r3, r2
 80094a8:	697a      	ldr	r2, [r7, #20]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	609a      	str	r2, [r3, #8]
}
 80094b4:	bf00      	nop
 80094b6:	371c      	adds	r7, #28
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	f003 031f 	and.w	r3, r3, #31
 80094d2:	2201      	movs	r2, #1
 80094d4:	fa02 f303 	lsl.w	r3, r2, r3
 80094d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6a1a      	ldr	r2, [r3, #32]
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	43db      	mvns	r3, r3
 80094e2:	401a      	ands	r2, r3
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a1a      	ldr	r2, [r3, #32]
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f003 031f 	and.w	r3, r3, #31
 80094f2:	6879      	ldr	r1, [r7, #4]
 80094f4:	fa01 f303 	lsl.w	r3, r1, r3
 80094f8:	431a      	orrs	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	621a      	str	r2, [r3, #32]
}
 80094fe:	bf00      	nop
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
	...

0800950c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800950c:	b480      	push	{r7}
 800950e:	b085      	sub	sp, #20
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800951c:	2b01      	cmp	r3, #1
 800951e:	d101      	bne.n	8009524 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009520:	2302      	movs	r3, #2
 8009522:	e05a      	b.n	80095da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2202      	movs	r2, #2
 8009530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	689b      	ldr	r3, [r3, #8]
 8009542:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800954a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	4313      	orrs	r3, r2
 8009554:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68fa      	ldr	r2, [r7, #12]
 800955c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a21      	ldr	r2, [pc, #132]	; (80095e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d022      	beq.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009570:	d01d      	beq.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a1d      	ldr	r2, [pc, #116]	; (80095ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d018      	beq.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a1b      	ldr	r2, [pc, #108]	; (80095f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d013      	beq.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a1a      	ldr	r2, [pc, #104]	; (80095f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d00e      	beq.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a18      	ldr	r2, [pc, #96]	; (80095f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d009      	beq.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a17      	ldr	r2, [pc, #92]	; (80095fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d004      	beq.n	80095ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a15      	ldr	r2, [pc, #84]	; (8009600 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d10c      	bne.n	80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80095b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	68ba      	ldr	r2, [r7, #8]
 80095bc:	4313      	orrs	r3, r2
 80095be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2200      	movs	r2, #0
 80095d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3714      	adds	r7, #20
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	40010000 	.word	0x40010000
 80095ec:	40000400 	.word	0x40000400
 80095f0:	40000800 	.word	0x40000800
 80095f4:	40000c00 	.word	0x40000c00
 80095f8:	40010400 	.word	0x40010400
 80095fc:	40014000 	.word	0x40014000
 8009600:	40001800 	.word	0x40001800

08009604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b082      	sub	sp, #8
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d101      	bne.n	8009616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e03f      	b.n	8009696 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b00      	cmp	r3, #0
 8009620:	d106      	bne.n	8009630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7f9 ffb6 	bl	800359c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2224      	movs	r2, #36	; 0x24
 8009634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	68da      	ldr	r2, [r3, #12]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f829 	bl	80096a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	691a      	ldr	r2, [r3, #16]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800965c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	695a      	ldr	r2, [r3, #20]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800966c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68da      	ldr	r2, [r3, #12]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800967c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2220      	movs	r2, #32
 8009688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2220      	movs	r2, #32
 8009690:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3708      	adds	r7, #8
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
	...

080096a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	b085      	sub	sp, #20
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	691b      	ldr	r3, [r3, #16]
 80096b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68da      	ldr	r2, [r3, #12]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	689a      	ldr	r2, [r3, #8]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	431a      	orrs	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	695b      	ldr	r3, [r3, #20]
 80096ce:	431a      	orrs	r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	4313      	orrs	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	68db      	ldr	r3, [r3, #12]
 80096de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80096e2:	f023 030c 	bic.w	r3, r3, #12
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	6812      	ldr	r2, [r2, #0]
 80096ea:	68f9      	ldr	r1, [r7, #12]
 80096ec:	430b      	orrs	r3, r1
 80096ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	695b      	ldr	r3, [r3, #20]
 80096f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	699a      	ldr	r2, [r3, #24]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800970e:	f040 818b 	bne.w	8009a28 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4ac1      	ldr	r2, [pc, #772]	; (8009a1c <UART_SetConfig+0x37c>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d005      	beq.n	8009728 <UART_SetConfig+0x88>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4abf      	ldr	r2, [pc, #764]	; (8009a20 <UART_SetConfig+0x380>)
 8009722:	4293      	cmp	r3, r2
 8009724:	f040 80bd 	bne.w	80098a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009728:	f7fd fcde 	bl	80070e8 <HAL_RCC_GetPCLK2Freq>
 800972c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	461d      	mov	r5, r3
 8009732:	f04f 0600 	mov.w	r6, #0
 8009736:	46a8      	mov	r8, r5
 8009738:	46b1      	mov	r9, r6
 800973a:	eb18 0308 	adds.w	r3, r8, r8
 800973e:	eb49 0409 	adc.w	r4, r9, r9
 8009742:	4698      	mov	r8, r3
 8009744:	46a1      	mov	r9, r4
 8009746:	eb18 0805 	adds.w	r8, r8, r5
 800974a:	eb49 0906 	adc.w	r9, r9, r6
 800974e:	f04f 0100 	mov.w	r1, #0
 8009752:	f04f 0200 	mov.w	r2, #0
 8009756:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800975a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800975e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009762:	4688      	mov	r8, r1
 8009764:	4691      	mov	r9, r2
 8009766:	eb18 0005 	adds.w	r0, r8, r5
 800976a:	eb49 0106 	adc.w	r1, r9, r6
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	461d      	mov	r5, r3
 8009774:	f04f 0600 	mov.w	r6, #0
 8009778:	196b      	adds	r3, r5, r5
 800977a:	eb46 0406 	adc.w	r4, r6, r6
 800977e:	461a      	mov	r2, r3
 8009780:	4623      	mov	r3, r4
 8009782:	f7f7 fa81 	bl	8000c88 <__aeabi_uldivmod>
 8009786:	4603      	mov	r3, r0
 8009788:	460c      	mov	r4, r1
 800978a:	461a      	mov	r2, r3
 800978c:	4ba5      	ldr	r3, [pc, #660]	; (8009a24 <UART_SetConfig+0x384>)
 800978e:	fba3 2302 	umull	r2, r3, r3, r2
 8009792:	095b      	lsrs	r3, r3, #5
 8009794:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	461d      	mov	r5, r3
 800979c:	f04f 0600 	mov.w	r6, #0
 80097a0:	46a9      	mov	r9, r5
 80097a2:	46b2      	mov	sl, r6
 80097a4:	eb19 0309 	adds.w	r3, r9, r9
 80097a8:	eb4a 040a 	adc.w	r4, sl, sl
 80097ac:	4699      	mov	r9, r3
 80097ae:	46a2      	mov	sl, r4
 80097b0:	eb19 0905 	adds.w	r9, r9, r5
 80097b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80097b8:	f04f 0100 	mov.w	r1, #0
 80097bc:	f04f 0200 	mov.w	r2, #0
 80097c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097cc:	4689      	mov	r9, r1
 80097ce:	4692      	mov	sl, r2
 80097d0:	eb19 0005 	adds.w	r0, r9, r5
 80097d4:	eb4a 0106 	adc.w	r1, sl, r6
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	461d      	mov	r5, r3
 80097de:	f04f 0600 	mov.w	r6, #0
 80097e2:	196b      	adds	r3, r5, r5
 80097e4:	eb46 0406 	adc.w	r4, r6, r6
 80097e8:	461a      	mov	r2, r3
 80097ea:	4623      	mov	r3, r4
 80097ec:	f7f7 fa4c 	bl	8000c88 <__aeabi_uldivmod>
 80097f0:	4603      	mov	r3, r0
 80097f2:	460c      	mov	r4, r1
 80097f4:	461a      	mov	r2, r3
 80097f6:	4b8b      	ldr	r3, [pc, #556]	; (8009a24 <UART_SetConfig+0x384>)
 80097f8:	fba3 1302 	umull	r1, r3, r3, r2
 80097fc:	095b      	lsrs	r3, r3, #5
 80097fe:	2164      	movs	r1, #100	; 0x64
 8009800:	fb01 f303 	mul.w	r3, r1, r3
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	3332      	adds	r3, #50	; 0x32
 800980a:	4a86      	ldr	r2, [pc, #536]	; (8009a24 <UART_SetConfig+0x384>)
 800980c:	fba2 2303 	umull	r2, r3, r2, r3
 8009810:	095b      	lsrs	r3, r3, #5
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009818:	4498      	add	r8, r3
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	461d      	mov	r5, r3
 800981e:	f04f 0600 	mov.w	r6, #0
 8009822:	46a9      	mov	r9, r5
 8009824:	46b2      	mov	sl, r6
 8009826:	eb19 0309 	adds.w	r3, r9, r9
 800982a:	eb4a 040a 	adc.w	r4, sl, sl
 800982e:	4699      	mov	r9, r3
 8009830:	46a2      	mov	sl, r4
 8009832:	eb19 0905 	adds.w	r9, r9, r5
 8009836:	eb4a 0a06 	adc.w	sl, sl, r6
 800983a:	f04f 0100 	mov.w	r1, #0
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009846:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800984a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800984e:	4689      	mov	r9, r1
 8009850:	4692      	mov	sl, r2
 8009852:	eb19 0005 	adds.w	r0, r9, r5
 8009856:	eb4a 0106 	adc.w	r1, sl, r6
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	461d      	mov	r5, r3
 8009860:	f04f 0600 	mov.w	r6, #0
 8009864:	196b      	adds	r3, r5, r5
 8009866:	eb46 0406 	adc.w	r4, r6, r6
 800986a:	461a      	mov	r2, r3
 800986c:	4623      	mov	r3, r4
 800986e:	f7f7 fa0b 	bl	8000c88 <__aeabi_uldivmod>
 8009872:	4603      	mov	r3, r0
 8009874:	460c      	mov	r4, r1
 8009876:	461a      	mov	r2, r3
 8009878:	4b6a      	ldr	r3, [pc, #424]	; (8009a24 <UART_SetConfig+0x384>)
 800987a:	fba3 1302 	umull	r1, r3, r3, r2
 800987e:	095b      	lsrs	r3, r3, #5
 8009880:	2164      	movs	r1, #100	; 0x64
 8009882:	fb01 f303 	mul.w	r3, r1, r3
 8009886:	1ad3      	subs	r3, r2, r3
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	3332      	adds	r3, #50	; 0x32
 800988c:	4a65      	ldr	r2, [pc, #404]	; (8009a24 <UART_SetConfig+0x384>)
 800988e:	fba2 2303 	umull	r2, r3, r2, r3
 8009892:	095b      	lsrs	r3, r3, #5
 8009894:	f003 0207 	and.w	r2, r3, #7
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4442      	add	r2, r8
 800989e:	609a      	str	r2, [r3, #8]
 80098a0:	e26f      	b.n	8009d82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098a2:	f7fd fc0d 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 80098a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	461d      	mov	r5, r3
 80098ac:	f04f 0600 	mov.w	r6, #0
 80098b0:	46a8      	mov	r8, r5
 80098b2:	46b1      	mov	r9, r6
 80098b4:	eb18 0308 	adds.w	r3, r8, r8
 80098b8:	eb49 0409 	adc.w	r4, r9, r9
 80098bc:	4698      	mov	r8, r3
 80098be:	46a1      	mov	r9, r4
 80098c0:	eb18 0805 	adds.w	r8, r8, r5
 80098c4:	eb49 0906 	adc.w	r9, r9, r6
 80098c8:	f04f 0100 	mov.w	r1, #0
 80098cc:	f04f 0200 	mov.w	r2, #0
 80098d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80098d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80098d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80098dc:	4688      	mov	r8, r1
 80098de:	4691      	mov	r9, r2
 80098e0:	eb18 0005 	adds.w	r0, r8, r5
 80098e4:	eb49 0106 	adc.w	r1, r9, r6
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	461d      	mov	r5, r3
 80098ee:	f04f 0600 	mov.w	r6, #0
 80098f2:	196b      	adds	r3, r5, r5
 80098f4:	eb46 0406 	adc.w	r4, r6, r6
 80098f8:	461a      	mov	r2, r3
 80098fa:	4623      	mov	r3, r4
 80098fc:	f7f7 f9c4 	bl	8000c88 <__aeabi_uldivmod>
 8009900:	4603      	mov	r3, r0
 8009902:	460c      	mov	r4, r1
 8009904:	461a      	mov	r2, r3
 8009906:	4b47      	ldr	r3, [pc, #284]	; (8009a24 <UART_SetConfig+0x384>)
 8009908:	fba3 2302 	umull	r2, r3, r3, r2
 800990c:	095b      	lsrs	r3, r3, #5
 800990e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	461d      	mov	r5, r3
 8009916:	f04f 0600 	mov.w	r6, #0
 800991a:	46a9      	mov	r9, r5
 800991c:	46b2      	mov	sl, r6
 800991e:	eb19 0309 	adds.w	r3, r9, r9
 8009922:	eb4a 040a 	adc.w	r4, sl, sl
 8009926:	4699      	mov	r9, r3
 8009928:	46a2      	mov	sl, r4
 800992a:	eb19 0905 	adds.w	r9, r9, r5
 800992e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009932:	f04f 0100 	mov.w	r1, #0
 8009936:	f04f 0200 	mov.w	r2, #0
 800993a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800993e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009942:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009946:	4689      	mov	r9, r1
 8009948:	4692      	mov	sl, r2
 800994a:	eb19 0005 	adds.w	r0, r9, r5
 800994e:	eb4a 0106 	adc.w	r1, sl, r6
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	461d      	mov	r5, r3
 8009958:	f04f 0600 	mov.w	r6, #0
 800995c:	196b      	adds	r3, r5, r5
 800995e:	eb46 0406 	adc.w	r4, r6, r6
 8009962:	461a      	mov	r2, r3
 8009964:	4623      	mov	r3, r4
 8009966:	f7f7 f98f 	bl	8000c88 <__aeabi_uldivmod>
 800996a:	4603      	mov	r3, r0
 800996c:	460c      	mov	r4, r1
 800996e:	461a      	mov	r2, r3
 8009970:	4b2c      	ldr	r3, [pc, #176]	; (8009a24 <UART_SetConfig+0x384>)
 8009972:	fba3 1302 	umull	r1, r3, r3, r2
 8009976:	095b      	lsrs	r3, r3, #5
 8009978:	2164      	movs	r1, #100	; 0x64
 800997a:	fb01 f303 	mul.w	r3, r1, r3
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	00db      	lsls	r3, r3, #3
 8009982:	3332      	adds	r3, #50	; 0x32
 8009984:	4a27      	ldr	r2, [pc, #156]	; (8009a24 <UART_SetConfig+0x384>)
 8009986:	fba2 2303 	umull	r2, r3, r2, r3
 800998a:	095b      	lsrs	r3, r3, #5
 800998c:	005b      	lsls	r3, r3, #1
 800998e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009992:	4498      	add	r8, r3
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	461d      	mov	r5, r3
 8009998:	f04f 0600 	mov.w	r6, #0
 800999c:	46a9      	mov	r9, r5
 800999e:	46b2      	mov	sl, r6
 80099a0:	eb19 0309 	adds.w	r3, r9, r9
 80099a4:	eb4a 040a 	adc.w	r4, sl, sl
 80099a8:	4699      	mov	r9, r3
 80099aa:	46a2      	mov	sl, r4
 80099ac:	eb19 0905 	adds.w	r9, r9, r5
 80099b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80099b4:	f04f 0100 	mov.w	r1, #0
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80099c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80099c8:	4689      	mov	r9, r1
 80099ca:	4692      	mov	sl, r2
 80099cc:	eb19 0005 	adds.w	r0, r9, r5
 80099d0:	eb4a 0106 	adc.w	r1, sl, r6
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	461d      	mov	r5, r3
 80099da:	f04f 0600 	mov.w	r6, #0
 80099de:	196b      	adds	r3, r5, r5
 80099e0:	eb46 0406 	adc.w	r4, r6, r6
 80099e4:	461a      	mov	r2, r3
 80099e6:	4623      	mov	r3, r4
 80099e8:	f7f7 f94e 	bl	8000c88 <__aeabi_uldivmod>
 80099ec:	4603      	mov	r3, r0
 80099ee:	460c      	mov	r4, r1
 80099f0:	461a      	mov	r2, r3
 80099f2:	4b0c      	ldr	r3, [pc, #48]	; (8009a24 <UART_SetConfig+0x384>)
 80099f4:	fba3 1302 	umull	r1, r3, r3, r2
 80099f8:	095b      	lsrs	r3, r3, #5
 80099fa:	2164      	movs	r1, #100	; 0x64
 80099fc:	fb01 f303 	mul.w	r3, r1, r3
 8009a00:	1ad3      	subs	r3, r2, r3
 8009a02:	00db      	lsls	r3, r3, #3
 8009a04:	3332      	adds	r3, #50	; 0x32
 8009a06:	4a07      	ldr	r2, [pc, #28]	; (8009a24 <UART_SetConfig+0x384>)
 8009a08:	fba2 2303 	umull	r2, r3, r2, r3
 8009a0c:	095b      	lsrs	r3, r3, #5
 8009a0e:	f003 0207 	and.w	r2, r3, #7
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4442      	add	r2, r8
 8009a18:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009a1a:	e1b2      	b.n	8009d82 <UART_SetConfig+0x6e2>
 8009a1c:	40011000 	.word	0x40011000
 8009a20:	40011400 	.word	0x40011400
 8009a24:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4ad7      	ldr	r2, [pc, #860]	; (8009d8c <UART_SetConfig+0x6ec>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d005      	beq.n	8009a3e <UART_SetConfig+0x39e>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4ad6      	ldr	r2, [pc, #856]	; (8009d90 <UART_SetConfig+0x6f0>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	f040 80d1 	bne.w	8009be0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a3e:	f7fd fb53 	bl	80070e8 <HAL_RCC_GetPCLK2Freq>
 8009a42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	469a      	mov	sl, r3
 8009a48:	f04f 0b00 	mov.w	fp, #0
 8009a4c:	46d0      	mov	r8, sl
 8009a4e:	46d9      	mov	r9, fp
 8009a50:	eb18 0308 	adds.w	r3, r8, r8
 8009a54:	eb49 0409 	adc.w	r4, r9, r9
 8009a58:	4698      	mov	r8, r3
 8009a5a:	46a1      	mov	r9, r4
 8009a5c:	eb18 080a 	adds.w	r8, r8, sl
 8009a60:	eb49 090b 	adc.w	r9, r9, fp
 8009a64:	f04f 0100 	mov.w	r1, #0
 8009a68:	f04f 0200 	mov.w	r2, #0
 8009a6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009a74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009a78:	4688      	mov	r8, r1
 8009a7a:	4691      	mov	r9, r2
 8009a7c:	eb1a 0508 	adds.w	r5, sl, r8
 8009a80:	eb4b 0609 	adc.w	r6, fp, r9
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	4619      	mov	r1, r3
 8009a8a:	f04f 0200 	mov.w	r2, #0
 8009a8e:	f04f 0300 	mov.w	r3, #0
 8009a92:	f04f 0400 	mov.w	r4, #0
 8009a96:	0094      	lsls	r4, r2, #2
 8009a98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009a9c:	008b      	lsls	r3, r1, #2
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4623      	mov	r3, r4
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	f7f7 f8ef 	bl	8000c88 <__aeabi_uldivmod>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	460c      	mov	r4, r1
 8009aae:	461a      	mov	r2, r3
 8009ab0:	4bb8      	ldr	r3, [pc, #736]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8009ab6:	095b      	lsrs	r3, r3, #5
 8009ab8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	469b      	mov	fp, r3
 8009ac0:	f04f 0c00 	mov.w	ip, #0
 8009ac4:	46d9      	mov	r9, fp
 8009ac6:	46e2      	mov	sl, ip
 8009ac8:	eb19 0309 	adds.w	r3, r9, r9
 8009acc:	eb4a 040a 	adc.w	r4, sl, sl
 8009ad0:	4699      	mov	r9, r3
 8009ad2:	46a2      	mov	sl, r4
 8009ad4:	eb19 090b 	adds.w	r9, r9, fp
 8009ad8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009adc:	f04f 0100 	mov.w	r1, #0
 8009ae0:	f04f 0200 	mov.w	r2, #0
 8009ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ae8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009aec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009af0:	4689      	mov	r9, r1
 8009af2:	4692      	mov	sl, r2
 8009af4:	eb1b 0509 	adds.w	r5, fp, r9
 8009af8:	eb4c 060a 	adc.w	r6, ip, sl
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	4619      	mov	r1, r3
 8009b02:	f04f 0200 	mov.w	r2, #0
 8009b06:	f04f 0300 	mov.w	r3, #0
 8009b0a:	f04f 0400 	mov.w	r4, #0
 8009b0e:	0094      	lsls	r4, r2, #2
 8009b10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009b14:	008b      	lsls	r3, r1, #2
 8009b16:	461a      	mov	r2, r3
 8009b18:	4623      	mov	r3, r4
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	f7f7 f8b3 	bl	8000c88 <__aeabi_uldivmod>
 8009b22:	4603      	mov	r3, r0
 8009b24:	460c      	mov	r4, r1
 8009b26:	461a      	mov	r2, r3
 8009b28:	4b9a      	ldr	r3, [pc, #616]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8009b2e:	095b      	lsrs	r3, r3, #5
 8009b30:	2164      	movs	r1, #100	; 0x64
 8009b32:	fb01 f303 	mul.w	r3, r1, r3
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	011b      	lsls	r3, r3, #4
 8009b3a:	3332      	adds	r3, #50	; 0x32
 8009b3c:	4a95      	ldr	r2, [pc, #596]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b42:	095b      	lsrs	r3, r3, #5
 8009b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b48:	4498      	add	r8, r3
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	469b      	mov	fp, r3
 8009b4e:	f04f 0c00 	mov.w	ip, #0
 8009b52:	46d9      	mov	r9, fp
 8009b54:	46e2      	mov	sl, ip
 8009b56:	eb19 0309 	adds.w	r3, r9, r9
 8009b5a:	eb4a 040a 	adc.w	r4, sl, sl
 8009b5e:	4699      	mov	r9, r3
 8009b60:	46a2      	mov	sl, r4
 8009b62:	eb19 090b 	adds.w	r9, r9, fp
 8009b66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009b6a:	f04f 0100 	mov.w	r1, #0
 8009b6e:	f04f 0200 	mov.w	r2, #0
 8009b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b7e:	4689      	mov	r9, r1
 8009b80:	4692      	mov	sl, r2
 8009b82:	eb1b 0509 	adds.w	r5, fp, r9
 8009b86:	eb4c 060a 	adc.w	r6, ip, sl
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	4619      	mov	r1, r3
 8009b90:	f04f 0200 	mov.w	r2, #0
 8009b94:	f04f 0300 	mov.w	r3, #0
 8009b98:	f04f 0400 	mov.w	r4, #0
 8009b9c:	0094      	lsls	r4, r2, #2
 8009b9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009ba2:	008b      	lsls	r3, r1, #2
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	4623      	mov	r3, r4
 8009ba8:	4628      	mov	r0, r5
 8009baa:	4631      	mov	r1, r6
 8009bac:	f7f7 f86c 	bl	8000c88 <__aeabi_uldivmod>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	460c      	mov	r4, r1
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	4b77      	ldr	r3, [pc, #476]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bbc:	095b      	lsrs	r3, r3, #5
 8009bbe:	2164      	movs	r1, #100	; 0x64
 8009bc0:	fb01 f303 	mul.w	r3, r1, r3
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	011b      	lsls	r3, r3, #4
 8009bc8:	3332      	adds	r3, #50	; 0x32
 8009bca:	4a72      	ldr	r2, [pc, #456]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd0:	095b      	lsrs	r3, r3, #5
 8009bd2:	f003 020f 	and.w	r2, r3, #15
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4442      	add	r2, r8
 8009bdc:	609a      	str	r2, [r3, #8]
 8009bde:	e0d0      	b.n	8009d82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009be0:	f7fd fa6e 	bl	80070c0 <HAL_RCC_GetPCLK1Freq>
 8009be4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	469a      	mov	sl, r3
 8009bea:	f04f 0b00 	mov.w	fp, #0
 8009bee:	46d0      	mov	r8, sl
 8009bf0:	46d9      	mov	r9, fp
 8009bf2:	eb18 0308 	adds.w	r3, r8, r8
 8009bf6:	eb49 0409 	adc.w	r4, r9, r9
 8009bfa:	4698      	mov	r8, r3
 8009bfc:	46a1      	mov	r9, r4
 8009bfe:	eb18 080a 	adds.w	r8, r8, sl
 8009c02:	eb49 090b 	adc.w	r9, r9, fp
 8009c06:	f04f 0100 	mov.w	r1, #0
 8009c0a:	f04f 0200 	mov.w	r2, #0
 8009c0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c1a:	4688      	mov	r8, r1
 8009c1c:	4691      	mov	r9, r2
 8009c1e:	eb1a 0508 	adds.w	r5, sl, r8
 8009c22:	eb4b 0609 	adc.w	r6, fp, r9
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	f04f 0300 	mov.w	r3, #0
 8009c34:	f04f 0400 	mov.w	r4, #0
 8009c38:	0094      	lsls	r4, r2, #2
 8009c3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009c3e:	008b      	lsls	r3, r1, #2
 8009c40:	461a      	mov	r2, r3
 8009c42:	4623      	mov	r3, r4
 8009c44:	4628      	mov	r0, r5
 8009c46:	4631      	mov	r1, r6
 8009c48:	f7f7 f81e 	bl	8000c88 <__aeabi_uldivmod>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	460c      	mov	r4, r1
 8009c50:	461a      	mov	r2, r3
 8009c52:	4b50      	ldr	r3, [pc, #320]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009c54:	fba3 2302 	umull	r2, r3, r3, r2
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	469b      	mov	fp, r3
 8009c62:	f04f 0c00 	mov.w	ip, #0
 8009c66:	46d9      	mov	r9, fp
 8009c68:	46e2      	mov	sl, ip
 8009c6a:	eb19 0309 	adds.w	r3, r9, r9
 8009c6e:	eb4a 040a 	adc.w	r4, sl, sl
 8009c72:	4699      	mov	r9, r3
 8009c74:	46a2      	mov	sl, r4
 8009c76:	eb19 090b 	adds.w	r9, r9, fp
 8009c7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009c7e:	f04f 0100 	mov.w	r1, #0
 8009c82:	f04f 0200 	mov.w	r2, #0
 8009c86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c92:	4689      	mov	r9, r1
 8009c94:	4692      	mov	sl, r2
 8009c96:	eb1b 0509 	adds.w	r5, fp, r9
 8009c9a:	eb4c 060a 	adc.w	r6, ip, sl
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	f04f 0200 	mov.w	r2, #0
 8009ca8:	f04f 0300 	mov.w	r3, #0
 8009cac:	f04f 0400 	mov.w	r4, #0
 8009cb0:	0094      	lsls	r4, r2, #2
 8009cb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009cb6:	008b      	lsls	r3, r1, #2
 8009cb8:	461a      	mov	r2, r3
 8009cba:	4623      	mov	r3, r4
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	f7f6 ffe2 	bl	8000c88 <__aeabi_uldivmod>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4b32      	ldr	r3, [pc, #200]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8009cd0:	095b      	lsrs	r3, r3, #5
 8009cd2:	2164      	movs	r1, #100	; 0x64
 8009cd4:	fb01 f303 	mul.w	r3, r1, r3
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	3332      	adds	r3, #50	; 0x32
 8009cde:	4a2d      	ldr	r2, [pc, #180]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce4:	095b      	lsrs	r3, r3, #5
 8009ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cea:	4498      	add	r8, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	469b      	mov	fp, r3
 8009cf0:	f04f 0c00 	mov.w	ip, #0
 8009cf4:	46d9      	mov	r9, fp
 8009cf6:	46e2      	mov	sl, ip
 8009cf8:	eb19 0309 	adds.w	r3, r9, r9
 8009cfc:	eb4a 040a 	adc.w	r4, sl, sl
 8009d00:	4699      	mov	r9, r3
 8009d02:	46a2      	mov	sl, r4
 8009d04:	eb19 090b 	adds.w	r9, r9, fp
 8009d08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009d0c:	f04f 0100 	mov.w	r1, #0
 8009d10:	f04f 0200 	mov.w	r2, #0
 8009d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d20:	4689      	mov	r9, r1
 8009d22:	4692      	mov	sl, r2
 8009d24:	eb1b 0509 	adds.w	r5, fp, r9
 8009d28:	eb4c 060a 	adc.w	r6, ip, sl
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	4619      	mov	r1, r3
 8009d32:	f04f 0200 	mov.w	r2, #0
 8009d36:	f04f 0300 	mov.w	r3, #0
 8009d3a:	f04f 0400 	mov.w	r4, #0
 8009d3e:	0094      	lsls	r4, r2, #2
 8009d40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d44:	008b      	lsls	r3, r1, #2
 8009d46:	461a      	mov	r2, r3
 8009d48:	4623      	mov	r3, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	f7f6 ff9b 	bl	8000c88 <__aeabi_uldivmod>
 8009d52:	4603      	mov	r3, r0
 8009d54:	460c      	mov	r4, r1
 8009d56:	461a      	mov	r2, r3
 8009d58:	4b0e      	ldr	r3, [pc, #56]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8009d5e:	095b      	lsrs	r3, r3, #5
 8009d60:	2164      	movs	r1, #100	; 0x64
 8009d62:	fb01 f303 	mul.w	r3, r1, r3
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	011b      	lsls	r3, r3, #4
 8009d6a:	3332      	adds	r3, #50	; 0x32
 8009d6c:	4a09      	ldr	r2, [pc, #36]	; (8009d94 <UART_SetConfig+0x6f4>)
 8009d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d72:	095b      	lsrs	r3, r3, #5
 8009d74:	f003 020f 	and.w	r2, r3, #15
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4442      	add	r2, r8
 8009d7e:	609a      	str	r2, [r3, #8]
}
 8009d80:	e7ff      	b.n	8009d82 <UART_SetConfig+0x6e2>
 8009d82:	bf00      	nop
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	40011000 	.word	0x40011000
 8009d90:	40011400 	.word	0x40011400
 8009d94:	51eb851f 	.word	0x51eb851f

08009d98 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009d98:	b084      	sub	sp, #16
 8009d9a:	b480      	push	{r7}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	f107 001c 	add.w	r0, r7, #28
 8009da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009daa:	2300      	movs	r3, #0
 8009dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009dae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009db0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009db2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009db6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009dba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009dbe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009dc2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009dc4:	68fa      	ldr	r2, [r7, #12]
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009dd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3714      	adds	r7, #20
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	b004      	add	sp, #16
 8009dec:	4770      	bx	lr

08009dee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	370c      	adds	r7, #12
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr

08009e08 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	370c      	adds	r7, #12
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr

08009e2a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b082      	sub	sp, #8
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2203      	movs	r2, #3
 8009e36:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009e38:	2002      	movs	r0, #2
 8009e3a:	f7f9 fd25 	bl	8003888 <HAL_Delay>
  
  return HAL_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f003 0303 	and.w	r3, r3, #3
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009e88:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009e8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009e90:	68fa      	ldr	r2, [r7, #12]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009e9e:	f023 030f 	bic.w	r3, r3, #15
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3714      	adds	r7, #20
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	b2db      	uxtb	r3, r3
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b085      	sub	sp, #20
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	3314      	adds	r3, #20
 8009ee0:	461a      	mov	r2, r3
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
}  
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f02:	2300      	movs	r3, #0
 8009f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	681a      	ldr	r2, [r3, #0]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	685a      	ldr	r2, [r3, #4]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f1e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009f24:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009f2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	431a      	orrs	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009f42:	2300      	movs	r3, #0

}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b088      	sub	sp, #32
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009f5e:	2310      	movs	r3, #16
 8009f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f62:	2340      	movs	r3, #64	; 0x40
 8009f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f70:	f107 0308 	add.w	r3, r7, #8
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff ff74 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f80:	2110      	movs	r1, #16
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f9fe 	bl	800a384 <SDMMC_GetCmdResp1>
 8009f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f8a:	69fb      	ldr	r3, [r7, #28]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3720      	adds	r7, #32
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b088      	sub	sp, #32
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009fa2:	2311      	movs	r3, #17
 8009fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fa6:	2340      	movs	r3, #64	; 0x40
 8009fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009faa:	2300      	movs	r3, #0
 8009fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fb4:	f107 0308 	add.w	r3, r7, #8
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f7ff ff52 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc4:	2111      	movs	r1, #17
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f9dc 	bl	800a384 <SDMMC_GetCmdResp1>
 8009fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fce:	69fb      	ldr	r3, [r7, #28]
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3720      	adds	r7, #32
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b088      	sub	sp, #32
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009fe6:	2312      	movs	r3, #18
 8009fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009fea:	2340      	movs	r3, #64	; 0x40
 8009fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ff6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ff8:	f107 0308 	add.w	r3, r7, #8
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff ff30 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a004:	f241 3288 	movw	r2, #5000	; 0x1388
 800a008:	2112      	movs	r1, #18
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f9ba 	bl	800a384 <SDMMC_GetCmdResp1>
 800a010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a012:	69fb      	ldr	r3, [r7, #28]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3720      	adds	r7, #32
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a02a:	2318      	movs	r3, #24
 800a02c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a02e:	2340      	movs	r3, #64	; 0x40
 800a030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a032:	2300      	movs	r3, #0
 800a034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a03a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a03c:	f107 0308 	add.w	r3, r7, #8
 800a040:	4619      	mov	r1, r3
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7ff ff0e 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a048:	f241 3288 	movw	r2, #5000	; 0x1388
 800a04c:	2118      	movs	r1, #24
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f998 	bl	800a384 <SDMMC_GetCmdResp1>
 800a054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a056:	69fb      	ldr	r3, [r7, #28]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3720      	adds	r7, #32
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b088      	sub	sp, #32
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a06e:	2319      	movs	r3, #25
 800a070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a072:	2340      	movs	r3, #64	; 0x40
 800a074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a076:	2300      	movs	r3, #0
 800a078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a07a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a07e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a080:	f107 0308 	add.w	r3, r7, #8
 800a084:	4619      	mov	r1, r3
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f7ff feec 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a08c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a090:	2119      	movs	r1, #25
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f976 	bl	800a384 <SDMMC_GetCmdResp1>
 800a098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a09a:	69fb      	ldr	r3, [r7, #28]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a0b0:	230c      	movs	r3, #12
 800a0b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0b4:	2340      	movs	r3, #64	; 0x40
 800a0b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0c2:	f107 0308 	add.w	r3, r7, #8
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff fecb 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a0ce:	4a05      	ldr	r2, [pc, #20]	; (800a0e4 <SDMMC_CmdStopTransfer+0x40>)
 800a0d0:	210c      	movs	r1, #12
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f000 f956 	bl	800a384 <SDMMC_GetCmdResp1>
 800a0d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0da:	69fb      	ldr	r3, [r7, #28]
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3720      	adds	r7, #32
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}
 800a0e4:	05f5e100 	.word	0x05f5e100

0800a0e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08a      	sub	sp, #40	; 0x28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a0f8:	2307      	movs	r3, #7
 800a0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0fc:	2340      	movs	r3, #64	; 0x40
 800a0fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a100:	2300      	movs	r3, #0
 800a102:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a108:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a10a:	f107 0310 	add.w	r3, r7, #16
 800a10e:	4619      	mov	r1, r3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff fea7 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a116:	f241 3288 	movw	r2, #5000	; 0x1388
 800a11a:	2107      	movs	r1, #7
 800a11c:	68f8      	ldr	r0, [r7, #12]
 800a11e:	f000 f931 	bl	800a384 <SDMMC_GetCmdResp1>
 800a122:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a126:	4618      	mov	r0, r3
 800a128:	3728      	adds	r7, #40	; 0x28
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b088      	sub	sp, #32
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a136:	2300      	movs	r3, #0
 800a138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a13a:	2300      	movs	r3, #0
 800a13c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a13e:	2300      	movs	r3, #0
 800a140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a142:	2300      	movs	r3, #0
 800a144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a14a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a14c:	f107 0308 	add.w	r3, r7, #8
 800a150:	4619      	mov	r1, r3
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff fe86 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 f8eb 	bl	800a334 <SDMMC_GetCmdError>
 800a15e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a160:	69fb      	ldr	r3, [r7, #28]
}
 800a162:	4618      	mov	r0, r3
 800a164:	3720      	adds	r7, #32
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b088      	sub	sp, #32
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a172:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a178:	2308      	movs	r3, #8
 800a17a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a17c:	2340      	movs	r3, #64	; 0x40
 800a17e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a180:	2300      	movs	r3, #0
 800a182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a188:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a18a:	f107 0308 	add.w	r3, r7, #8
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7ff fe67 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fad4 	bl	800a744 <SDMMC_GetCmdResp7>
 800a19c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a19e:	69fb      	ldr	r3, [r7, #28]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3720      	adds	r7, #32
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}

0800a1a8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b088      	sub	sp, #32
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a1b6:	2337      	movs	r3, #55	; 0x37
 800a1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1ba:	2340      	movs	r3, #64	; 0x40
 800a1bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1c8:	f107 0308 	add.w	r3, r7, #8
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f7ff fe48 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1d8:	2137      	movs	r1, #55	; 0x37
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 f8d2 	bl	800a384 <SDMMC_GetCmdResp1>
 800a1e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1e2:	69fb      	ldr	r3, [r7, #28]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3720      	adds	r7, #32
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b088      	sub	sp, #32
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
 800a1f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a1fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a202:	2329      	movs	r3, #41	; 0x29
 800a204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a206:	2340      	movs	r3, #64	; 0x40
 800a208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a20a:	2300      	movs	r3, #0
 800a20c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a20e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a214:	f107 0308 	add.w	r3, r7, #8
 800a218:	4619      	mov	r1, r3
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7ff fe22 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f9e1 	bl	800a5e8 <SDMMC_GetCmdResp3>
 800a226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a228:	69fb      	ldr	r3, [r7, #28]
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3720      	adds	r7, #32
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}

0800a232 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a232:	b580      	push	{r7, lr}
 800a234:	b088      	sub	sp, #32
 800a236:	af00      	add	r7, sp, #0
 800a238:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a23e:	2302      	movs	r3, #2
 800a240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a242:	23c0      	movs	r3, #192	; 0xc0
 800a244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a246:	2300      	movs	r3, #0
 800a248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a24a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a24e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a250:	f107 0308 	add.w	r3, r7, #8
 800a254:	4619      	mov	r1, r3
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f7ff fe04 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f97d 	bl	800a55c <SDMMC_GetCmdResp2>
 800a262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a264:	69fb      	ldr	r3, [r7, #28]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3720      	adds	r7, #32
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a26e:	b580      	push	{r7, lr}
 800a270:	b088      	sub	sp, #32
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a27c:	2309      	movs	r3, #9
 800a27e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a280:	23c0      	movs	r3, #192	; 0xc0
 800a282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a28c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a28e:	f107 0308 	add.w	r3, r7, #8
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff fde5 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f95e 	bl	800a55c <SDMMC_GetCmdResp2>
 800a2a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2a2:	69fb      	ldr	r3, [r7, #28]
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3720      	adds	r7, #32
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a2ba:	2303      	movs	r3, #3
 800a2bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2be:	2340      	movs	r3, #64	; 0x40
 800a2c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2cc:	f107 0308 	add.w	r3, r7, #8
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f7ff fdc6 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	2103      	movs	r1, #3
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 f9bd 	bl	800a65c <SDMMC_GetCmdResp6>
 800a2e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3720      	adds	r7, #32
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b088      	sub	sp, #32
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a2fc:	230d      	movs	r3, #13
 800a2fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a300:	2340      	movs	r3, #64	; 0x40
 800a302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a304:	2300      	movs	r3, #0
 800a306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a30c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a30e:	f107 0308 	add.w	r3, r7, #8
 800a312:	4619      	mov	r1, r3
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f7ff fda5 	bl	8009e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a31a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a31e:	210d      	movs	r1, #13
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f82f 	bl	800a384 <SDMMC_GetCmdResp1>
 800a326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a328:	69fb      	ldr	r3, [r7, #28]
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3720      	adds	r7, #32
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
	...

0800a334 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a334:	b490      	push	{r4, r7}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a33c:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <SDMMC_GetCmdError+0x48>)
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a0f      	ldr	r2, [pc, #60]	; (800a380 <SDMMC_GetCmdError+0x4c>)
 800a342:	fba2 2303 	umull	r2, r3, r2, r3
 800a346:	0a5b      	lsrs	r3, r3, #9
 800a348:	f241 3288 	movw	r2, #5000	; 0x1388
 800a34c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a350:	4623      	mov	r3, r4
 800a352:	1e5c      	subs	r4, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d102      	bne.n	800a35e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a358:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a35c:	e009      	b.n	800a372 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0f2      	beq.n	800a350 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	22c5      	movs	r2, #197	; 0xc5
 800a36e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3708      	adds	r7, #8
 800a376:	46bd      	mov	sp, r7
 800a378:	bc90      	pop	{r4, r7}
 800a37a:	4770      	bx	lr
 800a37c:	20000000 	.word	0x20000000
 800a380:	10624dd3 	.word	0x10624dd3

0800a384 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a384:	b590      	push	{r4, r7, lr}
 800a386:	b087      	sub	sp, #28
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	460b      	mov	r3, r1
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a392:	4b6f      	ldr	r3, [pc, #444]	; (800a550 <SDMMC_GetCmdResp1+0x1cc>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	4a6f      	ldr	r2, [pc, #444]	; (800a554 <SDMMC_GetCmdResp1+0x1d0>)
 800a398:	fba2 2303 	umull	r2, r3, r2, r3
 800a39c:	0a5b      	lsrs	r3, r3, #9
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	1e5c      	subs	r4, r3, #1
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d102      	bne.n	800a3b2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3b0:	e0c9      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3b6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d0f0      	beq.n	800a3a4 <SDMMC_GetCmdResp1+0x20>
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1eb      	bne.n	800a3a4 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d0:	f003 0304 	and.w	r3, r3, #4
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d004      	beq.n	800a3e2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2204      	movs	r2, #4
 800a3dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3de:	2304      	movs	r3, #4
 800a3e0:	e0b1      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3e6:	f003 0301 	and.w	r3, r3, #1
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d004      	beq.n	800a3f8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e0a6      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	22c5      	movs	r2, #197	; 0xc5
 800a3fc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a3fe:	68f8      	ldr	r0, [r7, #12]
 800a400:	f7ff fd5a 	bl	8009eb8 <SDIO_GetCommandResponse>
 800a404:	4603      	mov	r3, r0
 800a406:	461a      	mov	r2, r3
 800a408:	7afb      	ldrb	r3, [r7, #11]
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d001      	beq.n	800a412 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a40e:	2301      	movs	r3, #1
 800a410:	e099      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a412:	2100      	movs	r1, #0
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f7ff fd5c 	bl	8009ed2 <SDIO_GetResponse>
 800a41a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a41c:	693a      	ldr	r2, [r7, #16]
 800a41e:	4b4e      	ldr	r3, [pc, #312]	; (800a558 <SDMMC_GetCmdResp1+0x1d4>)
 800a420:	4013      	ands	r3, r2
 800a422:	2b00      	cmp	r3, #0
 800a424:	d101      	bne.n	800a42a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a426:	2300      	movs	r3, #0
 800a428:	e08d      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	da02      	bge.n	800a436 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a430:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a434:	e087      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a440:	2340      	movs	r3, #64	; 0x40
 800a442:	e080      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d001      	beq.n	800a452 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a44e:	2380      	movs	r3, #128	; 0x80
 800a450:	e079      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a45c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a460:	e071      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d002      	beq.n	800a472 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a46c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a470:	e069      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a47c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a480:	e061      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a482:	693b      	ldr	r3, [r7, #16]
 800a484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a48c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a490:	e059      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d002      	beq.n	800a4a2 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4a0:	e051      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4b0:	e049      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d002      	beq.n	800a4c2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a4bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a4c0:	e041      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d002      	beq.n	800a4d2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a4cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4d0:	e039      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d002      	beq.n	800a4e2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a4dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a4e0:	e031      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d002      	beq.n	800a4f2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a4ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a4f0:	e029      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d002      	beq.n	800a502 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a4fc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a500:	e021      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d002      	beq.n	800a512 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a50c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a510:	e019      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d002      	beq.n	800a522 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a51c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a520:	e011      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a52c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a530:	e009      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	f003 0308 	and.w	r3, r3, #8
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a53c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a540:	e001      	b.n	800a546 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a542:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a546:	4618      	mov	r0, r3
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd90      	pop	{r4, r7, pc}
 800a54e:	bf00      	nop
 800a550:	20000000 	.word	0x20000000
 800a554:	10624dd3 	.word	0x10624dd3
 800a558:	fdffe008 	.word	0xfdffe008

0800a55c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a55c:	b490      	push	{r4, r7}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a564:	4b1e      	ldr	r3, [pc, #120]	; (800a5e0 <SDMMC_GetCmdResp2+0x84>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	4a1e      	ldr	r2, [pc, #120]	; (800a5e4 <SDMMC_GetCmdResp2+0x88>)
 800a56a:	fba2 2303 	umull	r2, r3, r2, r3
 800a56e:	0a5b      	lsrs	r3, r3, #9
 800a570:	f241 3288 	movw	r2, #5000	; 0x1388
 800a574:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a578:	4623      	mov	r3, r4
 800a57a:	1e5c      	subs	r4, r3, #1
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d102      	bne.n	800a586 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a584:	e026      	b.n	800a5d4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a58a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a592:	2b00      	cmp	r3, #0
 800a594:	d0f0      	beq.n	800a578 <SDMMC_GetCmdResp2+0x1c>
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d1eb      	bne.n	800a578 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5a4:	f003 0304 	and.w	r3, r3, #4
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d004      	beq.n	800a5b6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2204      	movs	r2, #4
 800a5b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a5b2:	2304      	movs	r3, #4
 800a5b4:	e00e      	b.n	800a5d4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d004      	beq.n	800a5cc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e003      	b.n	800a5d4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	22c5      	movs	r2, #197	; 0xc5
 800a5d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a5d2:	2300      	movs	r3, #0
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bc90      	pop	{r4, r7}
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	20000000 	.word	0x20000000
 800a5e4:	10624dd3 	.word	0x10624dd3

0800a5e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a5e8:	b490      	push	{r4, r7}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5f0:	4b18      	ldr	r3, [pc, #96]	; (800a654 <SDMMC_GetCmdResp3+0x6c>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a18      	ldr	r2, [pc, #96]	; (800a658 <SDMMC_GetCmdResp3+0x70>)
 800a5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fa:	0a5b      	lsrs	r3, r3, #9
 800a5fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a600:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a604:	4623      	mov	r3, r4
 800a606:	1e5c      	subs	r4, r3, #1
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d102      	bne.n	800a612 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a60c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a610:	e01b      	b.n	800a64a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a616:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d0f0      	beq.n	800a604 <SDMMC_GetCmdResp3+0x1c>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d1eb      	bne.n	800a604 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b00      	cmp	r3, #0
 800a636:	d004      	beq.n	800a642 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2204      	movs	r2, #4
 800a63c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a63e:	2304      	movs	r3, #4
 800a640:	e003      	b.n	800a64a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	22c5      	movs	r2, #197	; 0xc5
 800a646:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bc90      	pop	{r4, r7}
 800a652:	4770      	bx	lr
 800a654:	20000000 	.word	0x20000000
 800a658:	10624dd3 	.word	0x10624dd3

0800a65c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a65c:	b590      	push	{r4, r7, lr}
 800a65e:	b087      	sub	sp, #28
 800a660:	af00      	add	r7, sp, #0
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	460b      	mov	r3, r1
 800a666:	607a      	str	r2, [r7, #4]
 800a668:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a66a:	4b34      	ldr	r3, [pc, #208]	; (800a73c <SDMMC_GetCmdResp6+0xe0>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a34      	ldr	r2, [pc, #208]	; (800a740 <SDMMC_GetCmdResp6+0xe4>)
 800a670:	fba2 2303 	umull	r2, r3, r2, r3
 800a674:	0a5b      	lsrs	r3, r3, #9
 800a676:	f241 3288 	movw	r2, #5000	; 0x1388
 800a67a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a67e:	4623      	mov	r3, r4
 800a680:	1e5c      	subs	r4, r3, #1
 800a682:	2b00      	cmp	r3, #0
 800a684:	d102      	bne.n	800a68c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a686:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a68a:	e052      	b.n	800a732 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a690:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d0f0      	beq.n	800a67e <SDMMC_GetCmdResp6+0x22>
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1eb      	bne.n	800a67e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6aa:	f003 0304 	and.w	r3, r3, #4
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d004      	beq.n	800a6bc <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2204      	movs	r2, #4
 800a6b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6b8:	2304      	movs	r3, #4
 800a6ba:	e03a      	b.n	800a732 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e02f      	b.n	800a732 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f7ff fbf0 	bl	8009eb8 <SDIO_GetCommandResponse>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	461a      	mov	r2, r3
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d001      	beq.n	800a6e6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e025      	b.n	800a732 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	22c5      	movs	r2, #197	; 0xc5
 800a6ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a6ec:	2100      	movs	r1, #0
 800a6ee:	68f8      	ldr	r0, [r7, #12]
 800a6f0:	f7ff fbef 	bl	8009ed2 <SDIO_GetResponse>
 800a6f4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	0c1b      	lsrs	r3, r3, #16
 800a704:	b29a      	uxth	r2, r3
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a70a:	2300      	movs	r3, #0
 800a70c:	e011      	b.n	800a732 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a71c:	e009      	b.n	800a732 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d002      	beq.n	800a72e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a72c:	e001      	b.n	800a732 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a72e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a732:	4618      	mov	r0, r3
 800a734:	371c      	adds	r7, #28
 800a736:	46bd      	mov	sp, r7
 800a738:	bd90      	pop	{r4, r7, pc}
 800a73a:	bf00      	nop
 800a73c:	20000000 	.word	0x20000000
 800a740:	10624dd3 	.word	0x10624dd3

0800a744 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a744:	b490      	push	{r4, r7}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a74c:	4b21      	ldr	r3, [pc, #132]	; (800a7d4 <SDMMC_GetCmdResp7+0x90>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a21      	ldr	r2, [pc, #132]	; (800a7d8 <SDMMC_GetCmdResp7+0x94>)
 800a752:	fba2 2303 	umull	r2, r3, r2, r3
 800a756:	0a5b      	lsrs	r3, r3, #9
 800a758:	f241 3288 	movw	r2, #5000	; 0x1388
 800a75c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a760:	4623      	mov	r3, r4
 800a762:	1e5c      	subs	r4, r3, #1
 800a764:	2b00      	cmp	r3, #0
 800a766:	d102      	bne.n	800a76e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a76c:	e02c      	b.n	800a7c8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a772:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d0f0      	beq.n	800a760 <SDMMC_GetCmdResp7+0x1c>
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a784:	2b00      	cmp	r3, #0
 800a786:	d1eb      	bne.n	800a760 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d004      	beq.n	800a79e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2204      	movs	r2, #4
 800a798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a79a:	2304      	movs	r3, #4
 800a79c:	e014      	b.n	800a7c8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d004      	beq.n	800a7b4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e009      	b.n	800a7c8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2240      	movs	r2, #64	; 0x40
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a7c6:	2300      	movs	r3, #0
  
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3710      	adds	r7, #16
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bc90      	pop	{r4, r7}
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	20000000 	.word	0x20000000
 800a7d8:	10624dd3 	.word	0x10624dd3

0800a7dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7dc:	b084      	sub	sp, #16
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	f107 001c 	add.w	r0, r7, #28
 800a7ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f0:	2b01      	cmp	r3, #1
 800a7f2:	d122      	bne.n	800a83a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a80c:	687a      	ldr	r2, [r7, #4]
 800a80e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a81c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a81e:	2b01      	cmp	r3, #1
 800a820:	d105      	bne.n	800a82e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f001 fa7c 	bl	800bd2c <USB_CoreReset>
 800a834:	4603      	mov	r3, r0
 800a836:	73fb      	strb	r3, [r7, #15]
 800a838:	e01a      	b.n	800a870 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f001 fa70 	bl	800bd2c <USB_CoreReset>
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a85a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	639a      	str	r2, [r3, #56]	; 0x38
 800a862:	e005      	b.n	800a870 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a868:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	2b01      	cmp	r3, #1
 800a874:	d10b      	bne.n	800a88e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	f043 0206 	orr.w	r2, r3, #6
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	f043 0220 	orr.w	r2, r3, #32
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a89a:	b004      	add	sp, #16
 800a89c:	4770      	bx	lr
	...

0800a8a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b087      	sub	sp, #28
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a8ae:	79fb      	ldrb	r3, [r7, #7]
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d165      	bne.n	800a980 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	4a41      	ldr	r2, [pc, #260]	; (800a9bc <USB_SetTurnaroundTime+0x11c>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d906      	bls.n	800a8ca <USB_SetTurnaroundTime+0x2a>
 800a8bc:	68bb      	ldr	r3, [r7, #8]
 800a8be:	4a40      	ldr	r2, [pc, #256]	; (800a9c0 <USB_SetTurnaroundTime+0x120>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d802      	bhi.n	800a8ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a8c4:	230f      	movs	r3, #15
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	e062      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a8ca:	68bb      	ldr	r3, [r7, #8]
 800a8cc:	4a3c      	ldr	r2, [pc, #240]	; (800a9c0 <USB_SetTurnaroundTime+0x120>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d906      	bls.n	800a8e0 <USB_SetTurnaroundTime+0x40>
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	4a3b      	ldr	r2, [pc, #236]	; (800a9c4 <USB_SetTurnaroundTime+0x124>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d802      	bhi.n	800a8e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a8da:	230e      	movs	r3, #14
 800a8dc:	617b      	str	r3, [r7, #20]
 800a8de:	e057      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	4a38      	ldr	r2, [pc, #224]	; (800a9c4 <USB_SetTurnaroundTime+0x124>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d906      	bls.n	800a8f6 <USB_SetTurnaroundTime+0x56>
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	4a37      	ldr	r2, [pc, #220]	; (800a9c8 <USB_SetTurnaroundTime+0x128>)
 800a8ec:	4293      	cmp	r3, r2
 800a8ee:	d802      	bhi.n	800a8f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a8f0:	230d      	movs	r3, #13
 800a8f2:	617b      	str	r3, [r7, #20]
 800a8f4:	e04c      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	4a33      	ldr	r2, [pc, #204]	; (800a9c8 <USB_SetTurnaroundTime+0x128>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d906      	bls.n	800a90c <USB_SetTurnaroundTime+0x6c>
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	4a32      	ldr	r2, [pc, #200]	; (800a9cc <USB_SetTurnaroundTime+0x12c>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d802      	bhi.n	800a90c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a906:	230c      	movs	r3, #12
 800a908:	617b      	str	r3, [r7, #20]
 800a90a:	e041      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4a2f      	ldr	r2, [pc, #188]	; (800a9cc <USB_SetTurnaroundTime+0x12c>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d906      	bls.n	800a922 <USB_SetTurnaroundTime+0x82>
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	4a2e      	ldr	r2, [pc, #184]	; (800a9d0 <USB_SetTurnaroundTime+0x130>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d802      	bhi.n	800a922 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a91c:	230b      	movs	r3, #11
 800a91e:	617b      	str	r3, [r7, #20]
 800a920:	e036      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	4a2a      	ldr	r2, [pc, #168]	; (800a9d0 <USB_SetTurnaroundTime+0x130>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d906      	bls.n	800a938 <USB_SetTurnaroundTime+0x98>
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	4a29      	ldr	r2, [pc, #164]	; (800a9d4 <USB_SetTurnaroundTime+0x134>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d802      	bhi.n	800a938 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a932:	230a      	movs	r3, #10
 800a934:	617b      	str	r3, [r7, #20]
 800a936:	e02b      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	4a26      	ldr	r2, [pc, #152]	; (800a9d4 <USB_SetTurnaroundTime+0x134>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d906      	bls.n	800a94e <USB_SetTurnaroundTime+0xae>
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	4a25      	ldr	r2, [pc, #148]	; (800a9d8 <USB_SetTurnaroundTime+0x138>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d802      	bhi.n	800a94e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a948:	2309      	movs	r3, #9
 800a94a:	617b      	str	r3, [r7, #20]
 800a94c:	e020      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	4a21      	ldr	r2, [pc, #132]	; (800a9d8 <USB_SetTurnaroundTime+0x138>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d906      	bls.n	800a964 <USB_SetTurnaroundTime+0xc4>
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	4a20      	ldr	r2, [pc, #128]	; (800a9dc <USB_SetTurnaroundTime+0x13c>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d802      	bhi.n	800a964 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a95e:	2308      	movs	r3, #8
 800a960:	617b      	str	r3, [r7, #20]
 800a962:	e015      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4a1d      	ldr	r2, [pc, #116]	; (800a9dc <USB_SetTurnaroundTime+0x13c>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d906      	bls.n	800a97a <USB_SetTurnaroundTime+0xda>
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	4a1c      	ldr	r2, [pc, #112]	; (800a9e0 <USB_SetTurnaroundTime+0x140>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d802      	bhi.n	800a97a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a974:	2307      	movs	r3, #7
 800a976:	617b      	str	r3, [r7, #20]
 800a978:	e00a      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a97a:	2306      	movs	r3, #6
 800a97c:	617b      	str	r3, [r7, #20]
 800a97e:	e007      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a980:	79fb      	ldrb	r3, [r7, #7]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d102      	bne.n	800a98c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a986:	2309      	movs	r3, #9
 800a988:	617b      	str	r3, [r7, #20]
 800a98a:	e001      	b.n	800a990 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a98c:	2309      	movs	r3, #9
 800a98e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	68db      	ldr	r3, [r3, #12]
 800a994:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	68da      	ldr	r2, [r3, #12]
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	029b      	lsls	r3, r3, #10
 800a9a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a9a8:	431a      	orrs	r2, r3
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	371c      	adds	r7, #28
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr
 800a9bc:	00d8acbf 	.word	0x00d8acbf
 800a9c0:	00e4e1bf 	.word	0x00e4e1bf
 800a9c4:	00f423ff 	.word	0x00f423ff
 800a9c8:	0106737f 	.word	0x0106737f
 800a9cc:	011a499f 	.word	0x011a499f
 800a9d0:	01312cff 	.word	0x01312cff
 800a9d4:	014ca43f 	.word	0x014ca43f
 800a9d8:	016e35ff 	.word	0x016e35ff
 800a9dc:	01a6ab1f 	.word	0x01a6ab1f
 800a9e0:	01e847ff 	.word	0x01e847ff

0800a9e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	689b      	ldr	r3, [r3, #8]
 800a9f0:	f043 0201 	orr.w	r2, r3, #1
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a9f8:	2300      	movs	r3, #0
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	370c      	adds	r7, #12
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa06:	b480      	push	{r7}
 800aa08:	b083      	sub	sp, #12
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	f023 0201 	bic.w	r2, r3, #1
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	2b01      	cmp	r3, #1
 800aa44:	d106      	bne.n	800aa54 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	68db      	ldr	r3, [r3, #12]
 800aa4a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60da      	str	r2, [r3, #12]
 800aa52:	e00b      	b.n	800aa6c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800aa54:	78fb      	ldrb	r3, [r7, #3]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d106      	bne.n	800aa68 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	68db      	ldr	r3, [r3, #12]
 800aa5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	60da      	str	r2, [r3, #12]
 800aa66:	e001      	b.n	800aa6c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e003      	b.n	800aa74 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800aa6c:	2032      	movs	r0, #50	; 0x32
 800aa6e:	f7f8 ff0b 	bl	8003888 <HAL_Delay>

  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa7c:	b084      	sub	sp, #16
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b086      	sub	sp, #24
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
 800aa86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa96:	2300      	movs	r3, #0
 800aa98:	613b      	str	r3, [r7, #16]
 800aa9a:	e009      	b.n	800aab0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	3340      	adds	r3, #64	; 0x40
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	3301      	adds	r3, #1
 800aaae:	613b      	str	r3, [r7, #16]
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	2b0e      	cmp	r3, #14
 800aab4:	d9f2      	bls.n	800aa9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d112      	bne.n	800aae2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aacc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aad8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	639a      	str	r2, [r3, #56]	; 0x38
 800aae0:	e00b      	b.n	800aafa <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab00:	461a      	mov	r2, r3
 800ab02:	2300      	movs	r3, #0
 800ab04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0c:	4619      	mov	r1, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab14:	461a      	mov	r2, r3
 800ab16:	680b      	ldr	r3, [r1, #0]
 800ab18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d10c      	bne.n	800ab3a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d104      	bne.n	800ab30 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ab26:	2100      	movs	r1, #0
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f961 	bl	800adf0 <USB_SetDevSpeed>
 800ab2e:	e008      	b.n	800ab42 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ab30:	2101      	movs	r1, #1
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f95c 	bl	800adf0 <USB_SetDevSpeed>
 800ab38:	e003      	b.n	800ab42 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ab3a:	2103      	movs	r1, #3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f957 	bl	800adf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ab42:	2110      	movs	r1, #16
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 f90b 	bl	800ad60 <USB_FlushTxFifo>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d001      	beq.n	800ab54 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800ab50:	2301      	movs	r3, #1
 800ab52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f000 f929 	bl	800adac <USB_FlushRxFifo>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab76:	461a      	mov	r2, r3
 800ab78:	2300      	movs	r3, #0
 800ab7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab82:	461a      	mov	r2, r3
 800ab84:	2300      	movs	r3, #0
 800ab86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab88:	2300      	movs	r3, #0
 800ab8a:	613b      	str	r3, [r7, #16]
 800ab8c:	e043      	b.n	800ac16 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	015a      	lsls	r2, r3, #5
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	4413      	add	r3, r2
 800ab96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aba0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aba4:	d118      	bne.n	800abd8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10a      	bne.n	800abc2 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abb8:	461a      	mov	r2, r3
 800abba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abbe:	6013      	str	r3, [r2, #0]
 800abc0:	e013      	b.n	800abea <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abce:	461a      	mov	r2, r3
 800abd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abd4:	6013      	str	r3, [r2, #0]
 800abd6:	e008      	b.n	800abea <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe4:	461a      	mov	r2, r3
 800abe6:	2300      	movs	r3, #0
 800abe8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abf6:	461a      	mov	r2, r3
 800abf8:	2300      	movs	r3, #0
 800abfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac08:	461a      	mov	r2, r3
 800ac0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	3301      	adds	r3, #1
 800ac14:	613b      	str	r3, [r7, #16]
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d3b7      	bcc.n	800ab8e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac1e:	2300      	movs	r3, #0
 800ac20:	613b      	str	r3, [r7, #16]
 800ac22:	e043      	b.n	800acac <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac3a:	d118      	bne.n	800ac6e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10a      	bne.n	800ac58 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	015a      	lsls	r2, r3, #5
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	4413      	add	r3, r2
 800ac4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac4e:	461a      	mov	r2, r3
 800ac50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ac54:	6013      	str	r3, [r2, #0]
 800ac56:	e013      	b.n	800ac80 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac64:	461a      	mov	r2, r3
 800ac66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ac6a:	6013      	str	r3, [r2, #0]
 800ac6c:	e008      	b.n	800ac80 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac6e:	693b      	ldr	r3, [r7, #16]
 800ac70:	015a      	lsls	r2, r3, #5
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	4413      	add	r3, r2
 800ac76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	015a      	lsls	r2, r3, #5
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	4413      	add	r3, r2
 800ac88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	2300      	movs	r3, #0
 800ac90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	015a      	lsls	r2, r3, #5
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	4413      	add	r3, r2
 800ac9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac9e:	461a      	mov	r2, r3
 800aca0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aca4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	3301      	adds	r3, #1
 800acaa:	613b      	str	r3, [r7, #16]
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	429a      	cmp	r2, r3
 800acb2:	d3b7      	bcc.n	800ac24 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acc6:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	2b01      	cmp	r3, #1
 800accc:	d111      	bne.n	800acf2 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd4:	461a      	mov	r2, r3
 800acd6:	4b20      	ldr	r3, [pc, #128]	; (800ad58 <USB_DevInit+0x2dc>)
 800acd8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ace8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acec:	f043 0303 	orr.w	r3, r3, #3
 800acf0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800acfe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d105      	bne.n	800ad12 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	699b      	ldr	r3, [r3, #24]
 800ad0a:	f043 0210 	orr.w	r2, r3, #16
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	699a      	ldr	r2, [r3, #24]
 800ad16:	4b11      	ldr	r3, [pc, #68]	; (800ad5c <USB_DevInit+0x2e0>)
 800ad18:	4313      	orrs	r3, r2
 800ad1a:	687a      	ldr	r2, [r7, #4]
 800ad1c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ad1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d005      	beq.n	800ad30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	699b      	ldr	r3, [r3, #24]
 800ad28:	f043 0208 	orr.w	r2, r3, #8
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ad30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d107      	bne.n	800ad46 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	699b      	ldr	r3, [r3, #24]
 800ad3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad3e:	f043 0304 	orr.w	r3, r3, #4
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ad46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad52:	b004      	add	sp, #16
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	00800100 	.word	0x00800100
 800ad5c:	803c3800 	.word	0x803c3800

0800ad60 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	019b      	lsls	r3, r3, #6
 800ad72:	f043 0220 	orr.w	r2, r3, #32
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	4a09      	ldr	r2, [pc, #36]	; (800ada8 <USB_FlushTxFifo+0x48>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d901      	bls.n	800ad8c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	e006      	b.n	800ad9a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	691b      	ldr	r3, [r3, #16]
 800ad90:	f003 0320 	and.w	r3, r3, #32
 800ad94:	2b20      	cmp	r3, #32
 800ad96:	d0f0      	beq.n	800ad7a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ad98:	2300      	movs	r3, #0
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3714      	adds	r7, #20
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	00030d40 	.word	0x00030d40

0800adac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800adac:	b480      	push	{r7}
 800adae:	b085      	sub	sp, #20
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2210      	movs	r2, #16
 800adbc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3301      	adds	r3, #1
 800adc2:	60fb      	str	r3, [r7, #12]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	4a09      	ldr	r2, [pc, #36]	; (800adec <USB_FlushRxFifo+0x40>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d901      	bls.n	800add0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800adcc:	2303      	movs	r3, #3
 800adce:	e006      	b.n	800adde <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	691b      	ldr	r3, [r3, #16]
 800add4:	f003 0310 	and.w	r3, r3, #16
 800add8:	2b10      	cmp	r3, #16
 800adda:	d0f0      	beq.n	800adbe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800addc:	2300      	movs	r3, #0
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	00030d40 	.word	0x00030d40

0800adf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	460b      	mov	r3, r1
 800adfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	68f9      	ldr	r1, [r7, #12]
 800ae0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae10:	4313      	orrs	r3, r2
 800ae12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3714      	adds	r7, #20
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b087      	sub	sp, #28
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f003 0306 	and.w	r3, r3, #6
 800ae3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d102      	bne.n	800ae48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ae42:	2300      	movs	r3, #0
 800ae44:	75fb      	strb	r3, [r7, #23]
 800ae46:	e00a      	b.n	800ae5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b02      	cmp	r3, #2
 800ae4c:	d002      	beq.n	800ae54 <USB_GetDevSpeed+0x32>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b06      	cmp	r3, #6
 800ae52:	d102      	bne.n	800ae5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ae54:	2302      	movs	r3, #2
 800ae56:	75fb      	strb	r3, [r7, #23]
 800ae58:	e001      	b.n	800ae5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ae5a:	230f      	movs	r3, #15
 800ae5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ae5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	371c      	adds	r7, #28
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	785b      	ldrb	r3, [r3, #1]
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d13a      	bne.n	800aefe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8e:	69da      	ldr	r2, [r3, #28]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	f003 030f 	and.w	r3, r3, #15
 800ae98:	2101      	movs	r1, #1
 800ae9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	68f9      	ldr	r1, [r7, #12]
 800aea2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aea6:	4313      	orrs	r3, r2
 800aea8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d155      	bne.n	800af6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aecc:	681a      	ldr	r2, [r3, #0]
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	689b      	ldr	r3, [r3, #8]
 800aed2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	78db      	ldrb	r3, [r3, #3]
 800aeda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aedc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	059b      	lsls	r3, r3, #22
 800aee2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aee4:	4313      	orrs	r3, r2
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	0151      	lsls	r1, r2, #5
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	440a      	add	r2, r1
 800aeee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aefa:	6013      	str	r3, [r2, #0]
 800aefc:	e036      	b.n	800af6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af04:	69da      	ldr	r2, [r3, #28]
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	2101      	movs	r1, #1
 800af10:	fa01 f303 	lsl.w	r3, r1, r3
 800af14:	041b      	lsls	r3, r3, #16
 800af16:	68f9      	ldr	r1, [r7, #12]
 800af18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af1c:	4313      	orrs	r3, r2
 800af1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	015a      	lsls	r2, r3, #5
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	4413      	add	r3, r2
 800af28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800af32:	2b00      	cmp	r3, #0
 800af34:	d11a      	bne.n	800af6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	015a      	lsls	r2, r3, #5
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	4413      	add	r3, r2
 800af3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	78db      	ldrb	r3, [r3, #3]
 800af50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800af52:	430b      	orrs	r3, r1
 800af54:	4313      	orrs	r3, r2
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	0151      	lsls	r1, r2, #5
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	440a      	add	r2, r1
 800af5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr
	...

0800af7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	785b      	ldrb	r3, [r3, #1]
 800af94:	2b01      	cmp	r3, #1
 800af96:	d135      	bne.n	800b004 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	f003 030f 	and.w	r3, r3, #15
 800afa8:	2101      	movs	r1, #1
 800afaa:	fa01 f303 	lsl.w	r3, r1, r3
 800afae:	b29b      	uxth	r3, r3
 800afb0:	43db      	mvns	r3, r3
 800afb2:	68f9      	ldr	r1, [r7, #12]
 800afb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afb8:	4013      	ands	r3, r2
 800afba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afc2:	69da      	ldr	r2, [r3, #28]
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	f003 030f 	and.w	r3, r3, #15
 800afcc:	2101      	movs	r1, #1
 800afce:	fa01 f303 	lsl.w	r3, r1, r3
 800afd2:	b29b      	uxth	r3, r3
 800afd4:	43db      	mvns	r3, r3
 800afd6:	68f9      	ldr	r1, [r7, #12]
 800afd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afdc:	4013      	ands	r3, r2
 800afde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	0159      	lsls	r1, r3, #5
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	440b      	add	r3, r1
 800aff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800affa:	4619      	mov	r1, r3
 800affc:	4b1f      	ldr	r3, [pc, #124]	; (800b07c <USB_DeactivateEndpoint+0x100>)
 800affe:	4013      	ands	r3, r2
 800b000:	600b      	str	r3, [r1, #0]
 800b002:	e034      	b.n	800b06e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b00a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	f003 030f 	and.w	r3, r3, #15
 800b014:	2101      	movs	r1, #1
 800b016:	fa01 f303 	lsl.w	r3, r1, r3
 800b01a:	041b      	lsls	r3, r3, #16
 800b01c:	43db      	mvns	r3, r3
 800b01e:	68f9      	ldr	r1, [r7, #12]
 800b020:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b024:	4013      	ands	r3, r2
 800b026:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b02e:	69da      	ldr	r2, [r3, #28]
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	781b      	ldrb	r3, [r3, #0]
 800b034:	f003 030f 	and.w	r3, r3, #15
 800b038:	2101      	movs	r1, #1
 800b03a:	fa01 f303 	lsl.w	r3, r1, r3
 800b03e:	041b      	lsls	r3, r3, #16
 800b040:	43db      	mvns	r3, r3
 800b042:	68f9      	ldr	r1, [r7, #12]
 800b044:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b048:	4013      	ands	r3, r2
 800b04a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	015a      	lsls	r2, r3, #5
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	4413      	add	r3, r2
 800b054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b058:	681a      	ldr	r2, [r3, #0]
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	0159      	lsls	r1, r3, #5
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	440b      	add	r3, r1
 800b062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b066:	4619      	mov	r1, r3
 800b068:	4b05      	ldr	r3, [pc, #20]	; (800b080 <USB_DeactivateEndpoint+0x104>)
 800b06a:	4013      	ands	r3, r2
 800b06c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	ec337800 	.word	0xec337800
 800b080:	eff37800 	.word	0xeff37800

0800b084 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b08a      	sub	sp, #40	; 0x28
 800b088:	af02      	add	r7, sp, #8
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	4613      	mov	r3, r2
 800b090:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	785b      	ldrb	r3, [r3, #1]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	f040 815c 	bne.w	800b35e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d132      	bne.n	800b114 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b0ae:	69bb      	ldr	r3, [r7, #24]
 800b0b0:	015a      	lsls	r2, r3, #5
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	69ba      	ldr	r2, [r7, #24]
 800b0be:	0151      	lsls	r1, r2, #5
 800b0c0:	69fa      	ldr	r2, [r7, #28]
 800b0c2:	440a      	add	r2, r1
 800b0c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	0151      	lsls	r1, r2, #5
 800b0e4:	69fa      	ldr	r2, [r7, #28]
 800b0e6:	440a      	add	r2, r1
 800b0e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	015a      	lsls	r2, r3, #5
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	0151      	lsls	r1, r2, #5
 800b104:	69fa      	ldr	r2, [r7, #28]
 800b106:	440a      	add	r2, r1
 800b108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b10c:	0cdb      	lsrs	r3, r3, #19
 800b10e:	04db      	lsls	r3, r3, #19
 800b110:	6113      	str	r3, [r2, #16]
 800b112:	e074      	b.n	800b1fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	0151      	lsls	r1, r2, #5
 800b126:	69fa      	ldr	r2, [r7, #28]
 800b128:	440a      	add	r2, r1
 800b12a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b12e:	0cdb      	lsrs	r3, r3, #19
 800b130:	04db      	lsls	r3, r3, #19
 800b132:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b134:	69bb      	ldr	r3, [r7, #24]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	69fb      	ldr	r3, [r7, #28]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b140:	691b      	ldr	r3, [r3, #16]
 800b142:	69ba      	ldr	r2, [r7, #24]
 800b144:	0151      	lsls	r1, r2, #5
 800b146:	69fa      	ldr	r2, [r7, #28]
 800b148:	440a      	add	r2, r1
 800b14a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b14e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b152:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b156:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b158:	69bb      	ldr	r3, [r7, #24]
 800b15a:	015a      	lsls	r2, r3, #5
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	4413      	add	r3, r2
 800b160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b164:	691a      	ldr	r2, [r3, #16]
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	6959      	ldr	r1, [r3, #20]
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	689b      	ldr	r3, [r3, #8]
 800b16e:	440b      	add	r3, r1
 800b170:	1e59      	subs	r1, r3, #1
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	fbb1 f3f3 	udiv	r3, r1, r3
 800b17a:	04d9      	lsls	r1, r3, #19
 800b17c:	4b9d      	ldr	r3, [pc, #628]	; (800b3f4 <USB_EPStartXfer+0x370>)
 800b17e:	400b      	ands	r3, r1
 800b180:	69b9      	ldr	r1, [r7, #24]
 800b182:	0148      	lsls	r0, r1, #5
 800b184:	69f9      	ldr	r1, [r7, #28]
 800b186:	4401      	add	r1, r0
 800b188:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b18c:	4313      	orrs	r3, r2
 800b18e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	4413      	add	r3, r2
 800b198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19c:	691a      	ldr	r2, [r3, #16]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1a6:	69b9      	ldr	r1, [r7, #24]
 800b1a8:	0148      	lsls	r0, r1, #5
 800b1aa:	69f9      	ldr	r1, [r7, #28]
 800b1ac:	4401      	add	r1, r0
 800b1ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	78db      	ldrb	r3, [r3, #3]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d11f      	bne.n	800b1fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b1dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	015a      	lsls	r2, r3, #5
 800b1e2:	69fb      	ldr	r3, [r7, #28]
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ea:	691b      	ldr	r3, [r3, #16]
 800b1ec:	69ba      	ldr	r2, [r7, #24]
 800b1ee:	0151      	lsls	r1, r2, #5
 800b1f0:	69fa      	ldr	r2, [r7, #28]
 800b1f2:	440a      	add	r2, r1
 800b1f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b1fe:	79fb      	ldrb	r3, [r7, #7]
 800b200:	2b01      	cmp	r3, #1
 800b202:	d14b      	bne.n	800b29c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	691b      	ldr	r3, [r3, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d009      	beq.n	800b220 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b20c:	69bb      	ldr	r3, [r7, #24]
 800b20e:	015a      	lsls	r2, r3, #5
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	4413      	add	r3, r2
 800b214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b218:	461a      	mov	r2, r3
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	78db      	ldrb	r3, [r3, #3]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d128      	bne.n	800b27a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b22e:	689b      	ldr	r3, [r3, #8]
 800b230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b234:	2b00      	cmp	r3, #0
 800b236:	d110      	bne.n	800b25a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	0151      	lsls	r1, r2, #5
 800b24a:	69fa      	ldr	r2, [r7, #28]
 800b24c:	440a      	add	r2, r1
 800b24e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b252:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b256:	6013      	str	r3, [r2, #0]
 800b258:	e00f      	b.n	800b27a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	4413      	add	r3, r2
 800b262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	0151      	lsls	r1, r2, #5
 800b26c:	69fa      	ldr	r2, [r7, #28]
 800b26e:	440a      	add	r2, r1
 800b270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b278:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	015a      	lsls	r2, r3, #5
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	4413      	add	r3, r2
 800b282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	69ba      	ldr	r2, [r7, #24]
 800b28a:	0151      	lsls	r1, r2, #5
 800b28c:	69fa      	ldr	r2, [r7, #28]
 800b28e:	440a      	add	r2, r1
 800b290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b294:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	e12f      	b.n	800b4fc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	015a      	lsls	r2, r3, #5
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	69ba      	ldr	r2, [r7, #24]
 800b2ac:	0151      	lsls	r1, r2, #5
 800b2ae:	69fa      	ldr	r2, [r7, #28]
 800b2b0:	440a      	add	r2, r1
 800b2b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	78db      	ldrb	r3, [r3, #3]
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d015      	beq.n	800b2f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	695b      	ldr	r3, [r3, #20]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	f000 8117 	beq.w	800b4fc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2ce:	69fb      	ldr	r3, [r7, #28]
 800b2d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	f003 030f 	and.w	r3, r3, #15
 800b2de:	2101      	movs	r1, #1
 800b2e0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e4:	69f9      	ldr	r1, [r7, #28]
 800b2e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	634b      	str	r3, [r1, #52]	; 0x34
 800b2ee:	e105      	b.n	800b4fc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d110      	bne.n	800b322 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b300:	69bb      	ldr	r3, [r7, #24]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	4413      	add	r3, r2
 800b308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	69ba      	ldr	r2, [r7, #24]
 800b310:	0151      	lsls	r1, r2, #5
 800b312:	69fa      	ldr	r2, [r7, #28]
 800b314:	440a      	add	r2, r1
 800b316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b31a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	e00f      	b.n	800b342 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	0151      	lsls	r1, r2, #5
 800b334:	69fa      	ldr	r2, [r7, #28]
 800b336:	440a      	add	r2, r1
 800b338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b33c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b340:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	68d9      	ldr	r1, [r3, #12]
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	781a      	ldrb	r2, [r3, #0]
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	b298      	uxth	r0, r3
 800b350:	79fb      	ldrb	r3, [r7, #7]
 800b352:	9300      	str	r3, [sp, #0]
 800b354:	4603      	mov	r3, r0
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 fa2b 	bl	800b7b2 <USB_WritePacket>
 800b35c:	e0ce      	b.n	800b4fc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	015a      	lsls	r2, r3, #5
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	4413      	add	r3, r2
 800b366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	0151      	lsls	r1, r2, #5
 800b370:	69fa      	ldr	r2, [r7, #28]
 800b372:	440a      	add	r2, r1
 800b374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b378:	0cdb      	lsrs	r3, r3, #19
 800b37a:	04db      	lsls	r3, r3, #19
 800b37c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b37e:	69bb      	ldr	r3, [r7, #24]
 800b380:	015a      	lsls	r2, r3, #5
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	4413      	add	r3, r2
 800b386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	69ba      	ldr	r2, [r7, #24]
 800b38e:	0151      	lsls	r1, r2, #5
 800b390:	69fa      	ldr	r2, [r7, #28]
 800b392:	440a      	add	r2, r1
 800b394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b398:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b39c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d126      	bne.n	800b3f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b6:	691a      	ldr	r2, [r3, #16]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3c0:	69b9      	ldr	r1, [r7, #24]
 800b3c2:	0148      	lsls	r0, r1, #5
 800b3c4:	69f9      	ldr	r1, [r7, #28]
 800b3c6:	4401      	add	r1, r0
 800b3c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	015a      	lsls	r2, r3, #5
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3dc:	691b      	ldr	r3, [r3, #16]
 800b3de:	69ba      	ldr	r2, [r7, #24]
 800b3e0:	0151      	lsls	r1, r2, #5
 800b3e2:	69fa      	ldr	r2, [r7, #28]
 800b3e4:	440a      	add	r2, r1
 800b3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3ee:	6113      	str	r3, [r2, #16]
 800b3f0:	e036      	b.n	800b460 <USB_EPStartXfer+0x3dc>
 800b3f2:	bf00      	nop
 800b3f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	695a      	ldr	r2, [r3, #20]
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	4413      	add	r3, r2
 800b402:	1e5a      	subs	r2, r3, #1
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	fbb2 f3f3 	udiv	r3, r2, r3
 800b40c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b40e:	69bb      	ldr	r3, [r7, #24]
 800b410:	015a      	lsls	r2, r3, #5
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	4413      	add	r3, r2
 800b416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41a:	691a      	ldr	r2, [r3, #16]
 800b41c:	8afb      	ldrh	r3, [r7, #22]
 800b41e:	04d9      	lsls	r1, r3, #19
 800b420:	4b39      	ldr	r3, [pc, #228]	; (800b508 <USB_EPStartXfer+0x484>)
 800b422:	400b      	ands	r3, r1
 800b424:	69b9      	ldr	r1, [r7, #24]
 800b426:	0148      	lsls	r0, r1, #5
 800b428:	69f9      	ldr	r1, [r7, #28]
 800b42a:	4401      	add	r1, r0
 800b42c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b430:	4313      	orrs	r3, r2
 800b432:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	015a      	lsls	r2, r3, #5
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	4413      	add	r3, r2
 800b43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b440:	691a      	ldr	r2, [r3, #16]
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	8af9      	ldrh	r1, [r7, #22]
 800b448:	fb01 f303 	mul.w	r3, r1, r3
 800b44c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b450:	69b9      	ldr	r1, [r7, #24]
 800b452:	0148      	lsls	r0, r1, #5
 800b454:	69f9      	ldr	r1, [r7, #28]
 800b456:	4401      	add	r1, r0
 800b458:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b45c:	4313      	orrs	r3, r2
 800b45e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b460:	79fb      	ldrb	r3, [r7, #7]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d10d      	bne.n	800b482 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	68db      	ldr	r3, [r3, #12]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d009      	beq.n	800b482 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	68d9      	ldr	r1, [r3, #12]
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	4413      	add	r3, r2
 800b47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47e:	460a      	mov	r2, r1
 800b480:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	78db      	ldrb	r3, [r3, #3]
 800b486:	2b01      	cmp	r3, #1
 800b488:	d128      	bne.n	800b4dc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b490:	689b      	ldr	r3, [r3, #8]
 800b492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b496:	2b00      	cmp	r3, #0
 800b498:	d110      	bne.n	800b4bc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	015a      	lsls	r2, r3, #5
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	0151      	lsls	r1, r2, #5
 800b4ac:	69fa      	ldr	r2, [r7, #28]
 800b4ae:	440a      	add	r2, r1
 800b4b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4b8:	6013      	str	r3, [r2, #0]
 800b4ba:	e00f      	b.n	800b4dc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	015a      	lsls	r2, r3, #5
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	69ba      	ldr	r2, [r7, #24]
 800b4cc:	0151      	lsls	r1, r2, #5
 800b4ce:	69fa      	ldr	r2, [r7, #28]
 800b4d0:	440a      	add	r2, r1
 800b4d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	015a      	lsls	r2, r3, #5
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	0151      	lsls	r1, r2, #5
 800b4ee:	69fa      	ldr	r2, [r7, #28]
 800b4f0:	440a      	add	r2, r1
 800b4f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4fc:	2300      	movs	r3, #0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3720      	adds	r7, #32
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	1ff80000 	.word	0x1ff80000

0800b50c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b087      	sub	sp, #28
 800b510:	af00      	add	r7, sp, #0
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	60b9      	str	r1, [r7, #8]
 800b516:	4613      	mov	r3, r2
 800b518:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	781b      	ldrb	r3, [r3, #0]
 800b522:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	785b      	ldrb	r3, [r3, #1]
 800b528:	2b01      	cmp	r3, #1
 800b52a:	f040 80cd 	bne.w	800b6c8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	695b      	ldr	r3, [r3, #20]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d132      	bne.n	800b59c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	0151      	lsls	r1, r2, #5
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	440a      	add	r2, r1
 800b54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b550:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b554:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b558:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	015a      	lsls	r2, r3, #5
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	4413      	add	r3, r2
 800b562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b566:	691b      	ldr	r3, [r3, #16]
 800b568:	693a      	ldr	r2, [r7, #16]
 800b56a:	0151      	lsls	r1, r2, #5
 800b56c:	697a      	ldr	r2, [r7, #20]
 800b56e:	440a      	add	r2, r1
 800b570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b578:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	015a      	lsls	r2, r3, #5
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	4413      	add	r3, r2
 800b582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	0151      	lsls	r1, r2, #5
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	440a      	add	r2, r1
 800b590:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b594:	0cdb      	lsrs	r3, r3, #19
 800b596:	04db      	lsls	r3, r3, #19
 800b598:	6113      	str	r3, [r2, #16]
 800b59a:	e04e      	b.n	800b63a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	693a      	ldr	r2, [r7, #16]
 800b5ac:	0151      	lsls	r1, r2, #5
 800b5ae:	697a      	ldr	r2, [r7, #20]
 800b5b0:	440a      	add	r2, r1
 800b5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5b6:	0cdb      	lsrs	r3, r3, #19
 800b5b8:	04db      	lsls	r3, r3, #19
 800b5ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	015a      	lsls	r2, r3, #5
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	0151      	lsls	r1, r2, #5
 800b5ce:	697a      	ldr	r2, [r7, #20]
 800b5d0:	440a      	add	r2, r1
 800b5d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	695a      	ldr	r2, [r3, #20]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d903      	bls.n	800b5f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	689a      	ldr	r2, [r3, #8]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	693a      	ldr	r2, [r7, #16]
 800b604:	0151      	lsls	r1, r2, #5
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	440a      	add	r2, r1
 800b60a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b60e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b612:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	697b      	ldr	r3, [r7, #20]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b620:	691a      	ldr	r2, [r3, #16]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	695b      	ldr	r3, [r3, #20]
 800b626:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b62a:	6939      	ldr	r1, [r7, #16]
 800b62c:	0148      	lsls	r0, r1, #5
 800b62e:	6979      	ldr	r1, [r7, #20]
 800b630:	4401      	add	r1, r0
 800b632:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b636:	4313      	orrs	r3, r2
 800b638:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b63a:	79fb      	ldrb	r3, [r7, #7]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d11e      	bne.n	800b67e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d009      	beq.n	800b65c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b654:	461a      	mov	r2, r3
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	015a      	lsls	r2, r3, #5
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	4413      	add	r3, r2
 800b664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	0151      	lsls	r1, r2, #5
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	440a      	add	r2, r1
 800b672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b676:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b67a:	6013      	str	r3, [r2, #0]
 800b67c:	e092      	b.n	800b7a4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	015a      	lsls	r2, r3, #5
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	4413      	add	r3, r2
 800b686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	0151      	lsls	r1, r2, #5
 800b690:	697a      	ldr	r2, [r7, #20]
 800b692:	440a      	add	r2, r1
 800b694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b698:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b69c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d07e      	beq.n	800b7a4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	f003 030f 	and.w	r3, r3, #15
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	fa01 f303 	lsl.w	r3, r1, r3
 800b6bc:	6979      	ldr	r1, [r7, #20]
 800b6be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	634b      	str	r3, [r1, #52]	; 0x34
 800b6c6:	e06d      	b.n	800b7a4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	0151      	lsls	r1, r2, #5
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	440a      	add	r2, r1
 800b6de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6e2:	0cdb      	lsrs	r3, r3, #19
 800b6e4:	04db      	lsls	r3, r3, #19
 800b6e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	0151      	lsls	r1, r2, #5
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	440a      	add	r2, r1
 800b6fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b702:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b706:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b70a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	695b      	ldr	r3, [r3, #20]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d003      	beq.n	800b71c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	689a      	ldr	r2, [r3, #8]
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	015a      	lsls	r2, r3, #5
 800b720:	697b      	ldr	r3, [r7, #20]
 800b722:	4413      	add	r3, r2
 800b724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b728:	691b      	ldr	r3, [r3, #16]
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	0151      	lsls	r1, r2, #5
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	440a      	add	r2, r1
 800b732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b736:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b73a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	015a      	lsls	r2, r3, #5
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	4413      	add	r3, r2
 800b744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b748:	691a      	ldr	r2, [r3, #16]
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b752:	6939      	ldr	r1, [r7, #16]
 800b754:	0148      	lsls	r0, r1, #5
 800b756:	6979      	ldr	r1, [r7, #20]
 800b758:	4401      	add	r1, r0
 800b75a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b75e:	4313      	orrs	r3, r2
 800b760:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b762:	79fb      	ldrb	r3, [r7, #7]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d10d      	bne.n	800b784 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d009      	beq.n	800b784 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	68d9      	ldr	r1, [r3, #12]
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	015a      	lsls	r2, r3, #5
 800b778:	697b      	ldr	r3, [r7, #20]
 800b77a:	4413      	add	r3, r2
 800b77c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b780:	460a      	mov	r2, r1
 800b782:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	015a      	lsls	r2, r3, #5
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	0151      	lsls	r1, r2, #5
 800b796:	697a      	ldr	r2, [r7, #20]
 800b798:	440a      	add	r2, r1
 800b79a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b79e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	371c      	adds	r7, #28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b0:	4770      	bx	lr

0800b7b2 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b089      	sub	sp, #36	; 0x24
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	4611      	mov	r1, r2
 800b7be:	461a      	mov	r2, r3
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	71fb      	strb	r3, [r7, #7]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b7d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d11a      	bne.n	800b80e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b7d8:	88bb      	ldrh	r3, [r7, #4]
 800b7da:	3303      	adds	r3, #3
 800b7dc:	089b      	lsrs	r3, r3, #2
 800b7de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	61bb      	str	r3, [r7, #24]
 800b7e4:	e00f      	b.n	800b806 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b7e6:	79fb      	ldrb	r3, [r7, #7]
 800b7e8:	031a      	lsls	r2, r3, #12
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	69fb      	ldr	r3, [r7, #28]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	3304      	adds	r3, #4
 800b7fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b800:	69bb      	ldr	r3, [r7, #24]
 800b802:	3301      	adds	r3, #1
 800b804:	61bb      	str	r3, [r7, #24]
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d3eb      	bcc.n	800b7e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3724      	adds	r7, #36	; 0x24
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b089      	sub	sp, #36	; 0x24
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	4613      	mov	r3, r2
 800b828:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b832:	88fb      	ldrh	r3, [r7, #6]
 800b834:	3303      	adds	r3, #3
 800b836:	089b      	lsrs	r3, r3, #2
 800b838:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b83a:	2300      	movs	r3, #0
 800b83c:	61bb      	str	r3, [r7, #24]
 800b83e:	e00b      	b.n	800b858 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	69fb      	ldr	r3, [r7, #28]
 800b84a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	3304      	adds	r3, #4
 800b850:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	3301      	adds	r3, #1
 800b856:	61bb      	str	r3, [r7, #24]
 800b858:	69ba      	ldr	r2, [r7, #24]
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d3ef      	bcc.n	800b840 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b860:	69fb      	ldr	r3, [r7, #28]
}
 800b862:	4618      	mov	r0, r3
 800b864:	3724      	adds	r7, #36	; 0x24
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr

0800b86e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b86e:	b480      	push	{r7}
 800b870:	b085      	sub	sp, #20
 800b872:	af00      	add	r7, sp, #0
 800b874:	6078      	str	r0, [r7, #4]
 800b876:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	785b      	ldrb	r3, [r3, #1]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d12c      	bne.n	800b8e4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	015a      	lsls	r2, r3, #5
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4413      	add	r3, r2
 800b892:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	db12      	blt.n	800b8c2 <USB_EPSetStall+0x54>
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00f      	beq.n	800b8c2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	015a      	lsls	r2, r3, #5
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	0151      	lsls	r1, r2, #5
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	440a      	add	r2, r1
 800b8b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8bc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b8c0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	015a      	lsls	r2, r3, #5
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	0151      	lsls	r1, r2, #5
 800b8d4:	68fa      	ldr	r2, [r7, #12]
 800b8d6:	440a      	add	r2, r1
 800b8d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8e0:	6013      	str	r3, [r2, #0]
 800b8e2:	e02b      	b.n	800b93c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	015a      	lsls	r2, r3, #5
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	db12      	blt.n	800b91c <USB_EPSetStall+0xae>
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00f      	beq.n	800b91c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	015a      	lsls	r2, r3, #5
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	4413      	add	r3, r2
 800b904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	0151      	lsls	r1, r2, #5
 800b90e:	68fa      	ldr	r2, [r7, #12]
 800b910:	440a      	add	r2, r1
 800b912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b916:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b91a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	015a      	lsls	r2, r3, #5
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4413      	add	r3, r2
 800b924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	68ba      	ldr	r2, [r7, #8]
 800b92c:	0151      	lsls	r1, r2, #5
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	440a      	add	r2, r1
 800b932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b936:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b93a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3714      	adds	r7, #20
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b94a:	b480      	push	{r7}
 800b94c:	b085      	sub	sp, #20
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	785b      	ldrb	r3, [r3, #1]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d128      	bne.n	800b9b8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	015a      	lsls	r2, r3, #5
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	4413      	add	r3, r2
 800b96e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	0151      	lsls	r1, r2, #5
 800b978:	68fa      	ldr	r2, [r7, #12]
 800b97a:	440a      	add	r2, r1
 800b97c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b980:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b984:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	78db      	ldrb	r3, [r3, #3]
 800b98a:	2b03      	cmp	r3, #3
 800b98c:	d003      	beq.n	800b996 <USB_EPClearStall+0x4c>
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	78db      	ldrb	r3, [r3, #3]
 800b992:	2b02      	cmp	r3, #2
 800b994:	d138      	bne.n	800ba08 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	015a      	lsls	r2, r3, #5
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	4413      	add	r3, r2
 800b99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	0151      	lsls	r1, r2, #5
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	440a      	add	r2, r1
 800b9ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	e027      	b.n	800ba08 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	015a      	lsls	r2, r3, #5
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	4413      	add	r3, r2
 800b9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68ba      	ldr	r2, [r7, #8]
 800b9c8:	0151      	lsls	r1, r2, #5
 800b9ca:	68fa      	ldr	r2, [r7, #12]
 800b9cc:	440a      	add	r2, r1
 800b9ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	78db      	ldrb	r3, [r3, #3]
 800b9dc:	2b03      	cmp	r3, #3
 800b9de:	d003      	beq.n	800b9e8 <USB_EPClearStall+0x9e>
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	78db      	ldrb	r3, [r3, #3]
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d10f      	bne.n	800ba08 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	015a      	lsls	r2, r3, #5
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4413      	add	r3, r2
 800b9f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	68ba      	ldr	r2, [r7, #8]
 800b9f8:	0151      	lsls	r1, r2, #5
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	440a      	add	r2, r1
 800b9fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba06:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ba08:	2300      	movs	r3, #0
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr

0800ba16 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ba16:	b480      	push	{r7}
 800ba18:	b085      	sub	sp, #20
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6078      	str	r0, [r7, #4]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ba38:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	78fb      	ldrb	r3, [r7, #3]
 800ba44:	011b      	lsls	r3, r3, #4
 800ba46:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ba4a:	68f9      	ldr	r1, [r7, #12]
 800ba4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba50:	4313      	orrs	r3, r2
 800ba52:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr

0800ba62 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ba62:	b580      	push	{r7, lr}
 800ba64:	b084      	sub	sp, #16
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba74:	685b      	ldr	r3, [r3, #4]
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba7c:	f023 0302 	bic.w	r3, r3, #2
 800ba80:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ba82:	2003      	movs	r0, #3
 800ba84:	f7f7 ff00 	bl	8003888 <HAL_Delay>

  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800baa4:	685b      	ldr	r3, [r3, #4]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baac:	f043 0302 	orr.w	r3, r3, #2
 800bab0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800bab2:	2003      	movs	r0, #3
 800bab4:	f7f7 fee8 	bl	8003888 <HAL_Delay>

  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bac2:	b480      	push	{r7}
 800bac4:	b085      	sub	sp, #20
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	699b      	ldr	r3, [r3, #24]
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	4013      	ands	r3, r2
 800bad8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bada:	68fb      	ldr	r3, [r7, #12]
}
 800badc:	4618      	mov	r0, r3
 800bade:	3714      	adds	r7, #20
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bae8:	b480      	push	{r7}
 800baea:	b085      	sub	sp, #20
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bafa:	699b      	ldr	r3, [r3, #24]
 800bafc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	4013      	ands	r3, r2
 800bb0a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	0c1b      	lsrs	r3, r3, #16
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b085      	sub	sp, #20
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb38:	69db      	ldr	r3, [r3, #28]
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	4013      	ands	r3, r2
 800bb3e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	b29b      	uxth	r3, r3
}
 800bb44:	4618      	mov	r0, r3
 800bb46:	3714      	adds	r7, #20
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4e:	4770      	bx	lr

0800bb50 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	460b      	mov	r3, r1
 800bb5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bb60:	78fb      	ldrb	r3, [r7, #3]
 800bb62:	015a      	lsls	r2, r3, #5
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	4413      	add	r3, r2
 800bb68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	4013      	ands	r3, r2
 800bb7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb7e:	68bb      	ldr	r3, [r7, #8]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3714      	adds	r7, #20
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b087      	sub	sp, #28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	460b      	mov	r3, r1
 800bb96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bb9c:	697b      	ldr	r3, [r7, #20]
 800bb9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbae:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	f003 030f 	and.w	r3, r3, #15
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	fa22 f303 	lsr.w	r3, r2, r3
 800bbbc:	01db      	lsls	r3, r3, #7
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	4313      	orrs	r3, r2
 800bbc4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bbc6:	78fb      	ldrb	r3, [r7, #3]
 800bbc8:	015a      	lsls	r2, r3, #5
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	4413      	add	r3, r2
 800bbce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bbda:	68bb      	ldr	r3, [r7, #8]
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	371c      	adds	r7, #28
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	695b      	ldr	r3, [r3, #20]
 800bbf4:	f003 0301 	and.w	r3, r3, #1
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b085      	sub	sp, #20
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc1e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bc22:	f023 0307 	bic.w	r3, r3, #7
 800bc26:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f003 0306 	and.w	r3, r3, #6
 800bc34:	2b04      	cmp	r3, #4
 800bc36:	d109      	bne.n	800bc4c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc46:	f043 0303 	orr.w	r3, r3, #3
 800bc4a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6c:	4770      	bx	lr
	...

0800bc70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b087      	sub	sp, #28
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	460b      	mov	r3, r1
 800bc7a:	607a      	str	r2, [r7, #4]
 800bc7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	333c      	adds	r3, #60	; 0x3c
 800bc86:	3304      	adds	r3, #4
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	4a26      	ldr	r2, [pc, #152]	; (800bd28 <USB_EP0_OutStart+0xb8>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d90a      	bls.n	800bcaa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bca4:	d101      	bne.n	800bcaa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bca6:	2300      	movs	r3, #0
 800bca8:	e037      	b.n	800bd1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	697a      	ldr	r2, [r7, #20]
 800bcd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcd8:	f043 0318 	orr.w	r3, r3, #24
 800bcdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bcf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bcf2:	7afb      	ldrb	r3, [r7, #11]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d10f      	bne.n	800bd18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcfe:	461a      	mov	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	697a      	ldr	r2, [r7, #20]
 800bd0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bd16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	371c      	adds	r7, #28
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	4f54300a 	.word	0x4f54300a

0800bd2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800bd34:	2300      	movs	r3, #0
 800bd36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	60fb      	str	r3, [r7, #12]
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	4a13      	ldr	r2, [pc, #76]	; (800bd90 <USB_CoreReset+0x64>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d901      	bls.n	800bd4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd46:	2303      	movs	r3, #3
 800bd48:	e01b      	b.n	800bd82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	daf2      	bge.n	800bd38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd52:	2300      	movs	r3, #0
 800bd54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	f043 0201 	orr.w	r2, r3, #1
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	3301      	adds	r3, #1
 800bd66:	60fb      	str	r3, [r7, #12]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4a09      	ldr	r2, [pc, #36]	; (800bd90 <USB_CoreReset+0x64>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d901      	bls.n	800bd74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd70:	2303      	movs	r3, #3
 800bd72:	e006      	b.n	800bd82 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	691b      	ldr	r3, [r3, #16]
 800bd78:	f003 0301 	and.w	r3, r3, #1
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d0f0      	beq.n	800bd62 <USB_CoreReset+0x36>

  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	00030d40 	.word	0x00030d40

0800bd94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bd98:	4904      	ldr	r1, [pc, #16]	; (800bdac <MX_FATFS_Init+0x18>)
 800bd9a:	4805      	ldr	r0, [pc, #20]	; (800bdb0 <MX_FATFS_Init+0x1c>)
 800bd9c:	f001 fe28 	bl	800d9f0 <FATFS_LinkDriver>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461a      	mov	r2, r3
 800bda4:	4b03      	ldr	r3, [pc, #12]	; (800bdb4 <MX_FATFS_Init+0x20>)
 800bda6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800bda8:	bf00      	nop
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	20000cdc 	.word	0x20000cdc
 800bdb0:	08013718 	.word	0x08013718
 800bdb4:	20000cd8 	.word	0x20000cd8

0800bdb8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bdc2:	f000 f863 	bl	800be8c <BSP_SD_IsDetected>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d001      	beq.n	800bdd0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800bdcc:	2301      	movs	r3, #1
 800bdce:	e005      	b.n	800bddc <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800bdd0:	4804      	ldr	r0, [pc, #16]	; (800bde4 <BSP_SD_Init+0x2c>)
 800bdd2:	f7fb fb64 	bl	800749e <HAL_SD_Init>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800bdda:	79fb      	ldrb	r3, [r7, #7]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3708      	adds	r7, #8
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	20000af8 	.word	0x20000af8

0800bde8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b086      	sub	sp, #24
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	68ba      	ldr	r2, [r7, #8]
 800bdfc:	68f9      	ldr	r1, [r7, #12]
 800bdfe:	4806      	ldr	r0, [pc, #24]	; (800be18 <BSP_SD_ReadBlocks_DMA+0x30>)
 800be00:	f7fb fbde 	bl	80075c0 <HAL_SD_ReadBlocks_DMA>
 800be04:	4603      	mov	r3, r0
 800be06:	2b00      	cmp	r3, #0
 800be08:	d001      	beq.n	800be0e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800be0a:	2301      	movs	r3, #1
 800be0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800be0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3718      	adds	r7, #24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	20000af8 	.word	0x20000af8

0800be1c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b086      	sub	sp, #24
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800be28:	2300      	movs	r3, #0
 800be2a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	68f9      	ldr	r1, [r7, #12]
 800be32:	4806      	ldr	r0, [pc, #24]	; (800be4c <BSP_SD_WriteBlocks_DMA+0x30>)
 800be34:	f7fb fcae 	bl	8007794 <HAL_SD_WriteBlocks_DMA>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d001      	beq.n	800be42 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800be42:	7dfb      	ldrb	r3, [r7, #23]
}
 800be44:	4618      	mov	r0, r3
 800be46:	3718      	adds	r7, #24
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}
 800be4c:	20000af8 	.word	0x20000af8

0800be50 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800be54:	4805      	ldr	r0, [pc, #20]	; (800be6c <BSP_SD_GetCardState+0x1c>)
 800be56:	f7fc f90b 	bl	8008070 <HAL_SD_GetCardState>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b04      	cmp	r3, #4
 800be5e:	bf14      	ite	ne
 800be60:	2301      	movne	r3, #1
 800be62:	2300      	moveq	r3, #0
 800be64:	b2db      	uxtb	r3, r3
}
 800be66:	4618      	mov	r0, r3
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	20000af8 	.word	0x20000af8

0800be70 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	4803      	ldr	r0, [pc, #12]	; (800be88 <BSP_SD_GetCardInfo+0x18>)
 800be7c:	f7fc f8cc 	bl	8008018 <HAL_SD_GetCardInfo>
}
 800be80:	bf00      	nop
 800be82:	3708      	adds	r7, #8
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20000af8 	.word	0x20000af8

0800be8c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800be92:	2301      	movs	r3, #1
 800be94:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800be96:	f000 f80b 	bl	800beb0 <BSP_PlatformIsDetected>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d101      	bne.n	800bea4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800bea0:	2300      	movs	r3, #0
 800bea2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	b2db      	uxtb	r3, r3
}
 800bea8:	4618      	mov	r0, r3
 800beaa:	3708      	adds	r7, #8
 800beac:	46bd      	mov	sp, r7
 800beae:	bd80      	pop	{r7, pc}

0800beb0 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800beb6:	2301      	movs	r3, #1
 800beb8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800beba:	f44f 7180 	mov.w	r1, #256	; 0x100
 800bebe:	4806      	ldr	r0, [pc, #24]	; (800bed8 <BSP_PlatformIsDetected+0x28>)
 800bec0:	f7f8 fb4c 	bl	800455c <HAL_GPIO_ReadPin>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d001      	beq.n	800bece <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800beca:	2300      	movs	r3, #0
 800becc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800bece:	79fb      	ldrb	r3, [r7, #7]
}  
 800bed0:	4618      	mov	r0, r3
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	40020000 	.word	0x40020000

0800bedc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800bee4:	f7f7 fcc4 	bl	8003870 <HAL_GetTick>
 800bee8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800beea:	e006      	b.n	800befa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800beec:	f7ff ffb0 	bl	800be50 <BSP_SD_GetCardState>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d101      	bne.n	800befa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	e009      	b.n	800bf0e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800befa:	f7f7 fcb9 	bl	8003870 <HAL_GetTick>
 800befe:	4602      	mov	r2, r0
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	429a      	cmp	r2, r3
 800bf08:	d8f0      	bhi.n	800beec <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800bf0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
	...

0800bf18 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	4603      	mov	r3, r0
 800bf20:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800bf22:	4b0b      	ldr	r3, [pc, #44]	; (800bf50 <SD_CheckStatus+0x38>)
 800bf24:	2201      	movs	r2, #1
 800bf26:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bf28:	f7ff ff92 	bl	800be50 <BSP_SD_GetCardState>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d107      	bne.n	800bf42 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bf32:	4b07      	ldr	r3, [pc, #28]	; (800bf50 <SD_CheckStatus+0x38>)
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	f023 0301 	bic.w	r3, r3, #1
 800bf3c:	b2da      	uxtb	r2, r3
 800bf3e:	4b04      	ldr	r3, [pc, #16]	; (800bf50 <SD_CheckStatus+0x38>)
 800bf40:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bf42:	4b03      	ldr	r3, [pc, #12]	; (800bf50 <SD_CheckStatus+0x38>)
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	b2db      	uxtb	r3, r3
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	20000009 	.word	0x20000009

0800bf54 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b082      	sub	sp, #8
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bf5e:	f7ff ff2b 	bl	800bdb8 <BSP_SD_Init>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d107      	bne.n	800bf78 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7ff ffd4 	bl	800bf18 <SD_CheckStatus>
 800bf70:	4603      	mov	r3, r0
 800bf72:	461a      	mov	r2, r3
 800bf74:	4b04      	ldr	r3, [pc, #16]	; (800bf88 <SD_initialize+0x34>)
 800bf76:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800bf78:	4b03      	ldr	r3, [pc, #12]	; (800bf88 <SD_initialize+0x34>)
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	b2db      	uxtb	r3, r3
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	20000009 	.word	0x20000009

0800bf8c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b082      	sub	sp, #8
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	4603      	mov	r3, r0
 800bf94:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf96:	79fb      	ldrb	r3, [r7, #7]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff ffbd 	bl	800bf18 <SD_CheckStatus>
 800bf9e:	4603      	mov	r3, r0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}

0800bfa8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	60b9      	str	r1, [r7, #8]
 800bfb0:	607a      	str	r2, [r7, #4]
 800bfb2:	603b      	str	r3, [r7, #0]
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bfbc:	f247 5030 	movw	r0, #30000	; 0x7530
 800bfc0:	f7ff ff8c 	bl	800bedc <SD_CheckStatusWithTimeout>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	da01      	bge.n	800bfce <SD_read+0x26>
  {
    return res;
 800bfca:	7ffb      	ldrb	r3, [r7, #31]
 800bfcc:	e08b      	b.n	800c0e6 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	f003 0303 	and.w	r3, r3, #3
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	f040 8085 	bne.w	800c0e4 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	6879      	ldr	r1, [r7, #4]
 800bfde:	68b8      	ldr	r0, [r7, #8]
 800bfe0:	f7ff ff02 	bl	800bde8 <BSP_SD_ReadBlocks_DMA>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d133      	bne.n	800c052 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bfea:	4b41      	ldr	r3, [pc, #260]	; (800c0f0 <SD_read+0x148>)
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bff0:	f7f7 fc3e 	bl	8003870 <HAL_GetTick>
 800bff4:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bff6:	bf00      	nop
 800bff8:	4b3d      	ldr	r3, [pc, #244]	; (800c0f0 <SD_read+0x148>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d108      	bne.n	800c012 <SD_read+0x6a>
 800c000:	f7f7 fc36 	bl	8003870 <HAL_GetTick>
 800c004:	4602      	mov	r2, r0
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	1ad3      	subs	r3, r2, r3
 800c00a:	f247 522f 	movw	r2, #29999	; 0x752f
 800c00e:	4293      	cmp	r3, r2
 800c010:	d9f2      	bls.n	800bff8 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800c012:	4b37      	ldr	r3, [pc, #220]	; (800c0f0 <SD_read+0x148>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d102      	bne.n	800c020 <SD_read+0x78>
      {
        res = RES_ERROR;
 800c01a:	2301      	movs	r3, #1
 800c01c:	77fb      	strb	r3, [r7, #31]
 800c01e:	e061      	b.n	800c0e4 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800c020:	4b33      	ldr	r3, [pc, #204]	; (800c0f0 <SD_read+0x148>)
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c026:	f7f7 fc23 	bl	8003870 <HAL_GetTick>
 800c02a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c02c:	e007      	b.n	800c03e <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c02e:	f7ff ff0f 	bl	800be50 <BSP_SD_GetCardState>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d102      	bne.n	800c03e <SD_read+0x96>
          {
            res = RES_OK;
 800c038:	2300      	movs	r3, #0
 800c03a:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c03c:	e052      	b.n	800c0e4 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c03e:	f7f7 fc17 	bl	8003870 <HAL_GetTick>
 800c042:	4602      	mov	r2, r0
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	f247 522f 	movw	r2, #29999	; 0x752f
 800c04c:	4293      	cmp	r3, r2
 800c04e:	d9ee      	bls.n	800c02e <SD_read+0x86>
 800c050:	e048      	b.n	800c0e4 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800c052:	2300      	movs	r3, #0
 800c054:	61bb      	str	r3, [r7, #24]
 800c056:	e034      	b.n	800c0c2 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	1c5a      	adds	r2, r3, #1
 800c05c:	607a      	str	r2, [r7, #4]
 800c05e:	2201      	movs	r2, #1
 800c060:	4619      	mov	r1, r3
 800c062:	4824      	ldr	r0, [pc, #144]	; (800c0f4 <SD_read+0x14c>)
 800c064:	f7ff fec0 	bl	800bde8 <BSP_SD_ReadBlocks_DMA>
 800c068:	4603      	mov	r3, r0
 800c06a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c06c:	7fbb      	ldrb	r3, [r7, #30]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d12c      	bne.n	800c0cc <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800c072:	4b1f      	ldr	r3, [pc, #124]	; (800c0f0 <SD_read+0x148>)
 800c074:	2200      	movs	r2, #0
 800c076:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800c078:	f7f7 fbfa 	bl	8003870 <HAL_GetTick>
 800c07c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c07e:	bf00      	nop
 800c080:	4b1b      	ldr	r3, [pc, #108]	; (800c0f0 <SD_read+0x148>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d108      	bne.n	800c09a <SD_read+0xf2>
 800c088:	f7f7 fbf2 	bl	8003870 <HAL_GetTick>
 800c08c:	4602      	mov	r2, r0
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	f247 522f 	movw	r2, #29999	; 0x752f
 800c096:	4293      	cmp	r3, r2
 800c098:	d9f2      	bls.n	800c080 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800c09a:	4b15      	ldr	r3, [pc, #84]	; (800c0f0 <SD_read+0x148>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d016      	beq.n	800c0d0 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	4a13      	ldr	r2, [pc, #76]	; (800c0f4 <SD_read+0x14c>)
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	4611      	mov	r1, r2
 800c0aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	f002 fa0c 	bl	800e4cc <memcpy>
          buff += BLOCKSIZE;
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c0ba:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	61bb      	str	r3, [r7, #24]
 800c0c2:	69bb      	ldr	r3, [r7, #24]
 800c0c4:	683a      	ldr	r2, [r7, #0]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d8c6      	bhi.n	800c058 <SD_read+0xb0>
 800c0ca:	e002      	b.n	800c0d2 <SD_read+0x12a>
        }
        else
        {
          break;
 800c0cc:	bf00      	nop
 800c0ce:	e000      	b.n	800c0d2 <SD_read+0x12a>
            break;
 800c0d0:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	683a      	ldr	r2, [r7, #0]
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d104      	bne.n	800c0e4 <SD_read+0x13c>
 800c0da:	7fbb      	ldrb	r3, [r7, #30]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d101      	bne.n	800c0e4 <SD_read+0x13c>
        res = RES_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800c0e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3720      	adds	r7, #32
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20000774 	.word	0x20000774
 800c0f4:	20000570 	.word	0x20000570

0800c0f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b088      	sub	sp, #32
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60b9      	str	r1, [r7, #8]
 800c100:	607a      	str	r2, [r7, #4]
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	4603      	mov	r3, r0
 800c106:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c108:	2301      	movs	r3, #1
 800c10a:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800c10c:	4b4c      	ldr	r3, [pc, #304]	; (800c240 <SD_write+0x148>)
 800c10e:	2200      	movs	r2, #0
 800c110:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c112:	f247 5030 	movw	r0, #30000	; 0x7530
 800c116:	f7ff fee1 	bl	800bedc <SD_CheckStatusWithTimeout>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	da01      	bge.n	800c124 <SD_write+0x2c>
  {
    return res;
 800c120:	7ffb      	ldrb	r3, [r7, #31]
 800c122:	e088      	b.n	800c236 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	f003 0303 	and.w	r3, r3, #3
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	f040 8082 	bne.w	800c234 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c130:	683a      	ldr	r2, [r7, #0]
 800c132:	6879      	ldr	r1, [r7, #4]
 800c134:	68b8      	ldr	r0, [r7, #8]
 800c136:	f7ff fe71 	bl	800be1c <BSP_SD_WriteBlocks_DMA>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d130      	bne.n	800c1a2 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c140:	f7f7 fb96 	bl	8003870 <HAL_GetTick>
 800c144:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c146:	bf00      	nop
 800c148:	4b3d      	ldr	r3, [pc, #244]	; (800c240 <SD_write+0x148>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d108      	bne.n	800c162 <SD_write+0x6a>
 800c150:	f7f7 fb8e 	bl	8003870 <HAL_GetTick>
 800c154:	4602      	mov	r2, r0
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	1ad3      	subs	r3, r2, r3
 800c15a:	f247 522f 	movw	r2, #29999	; 0x752f
 800c15e:	4293      	cmp	r3, r2
 800c160:	d9f2      	bls.n	800c148 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800c162:	4b37      	ldr	r3, [pc, #220]	; (800c240 <SD_write+0x148>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d102      	bne.n	800c170 <SD_write+0x78>
      {
        res = RES_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	77fb      	strb	r3, [r7, #31]
 800c16e:	e061      	b.n	800c234 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800c170:	4b33      	ldr	r3, [pc, #204]	; (800c240 <SD_write+0x148>)
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c176:	f7f7 fb7b 	bl	8003870 <HAL_GetTick>
 800c17a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c17c:	e007      	b.n	800c18e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c17e:	f7ff fe67 	bl	800be50 <BSP_SD_GetCardState>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d102      	bne.n	800c18e <SD_write+0x96>
          {
            res = RES_OK;
 800c188:	2300      	movs	r3, #0
 800c18a:	77fb      	strb	r3, [r7, #31]
            break;
 800c18c:	e052      	b.n	800c234 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c18e:	f7f7 fb6f 	bl	8003870 <HAL_GetTick>
 800c192:	4602      	mov	r2, r0
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	1ad3      	subs	r3, r2, r3
 800c198:	f247 522f 	movw	r2, #29999	; 0x752f
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d9ee      	bls.n	800c17e <SD_write+0x86>
 800c1a0:	e048      	b.n	800c234 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	61bb      	str	r3, [r7, #24]
 800c1a6:	e034      	b.n	800c212 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800c1a8:	4b25      	ldr	r3, [pc, #148]	; (800c240 <SD_write+0x148>)
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	1c5a      	adds	r2, r3, #1
 800c1b2:	607a      	str	r2, [r7, #4]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	4822      	ldr	r0, [pc, #136]	; (800c244 <SD_write+0x14c>)
 800c1ba:	f7ff fe2f 	bl	800be1c <BSP_SD_WriteBlocks_DMA>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c1c2:	7fbb      	ldrb	r3, [r7, #30]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d129      	bne.n	800c21c <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800c1c8:	f7f7 fb52 	bl	8003870 <HAL_GetTick>
 800c1cc:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c1ce:	bf00      	nop
 800c1d0:	4b1b      	ldr	r3, [pc, #108]	; (800c240 <SD_write+0x148>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d108      	bne.n	800c1ea <SD_write+0xf2>
 800c1d8:	f7f7 fb4a 	bl	8003870 <HAL_GetTick>
 800c1dc:	4602      	mov	r2, r0
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	f247 522f 	movw	r2, #29999	; 0x752f
 800c1e6:	4293      	cmp	r3, r2
 800c1e8:	d9f2      	bls.n	800c1d0 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800c1ea:	4b15      	ldr	r3, [pc, #84]	; (800c240 <SD_write+0x148>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d016      	beq.n	800c220 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	4a13      	ldr	r2, [pc, #76]	; (800c244 <SD_write+0x14c>)
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	4611      	mov	r1, r2
 800c1fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c1fe:	461a      	mov	r2, r3
 800c200:	f002 f964 	bl	800e4cc <memcpy>
          buff += BLOCKSIZE;
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c20a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	3301      	adds	r3, #1
 800c210:	61bb      	str	r3, [r7, #24]
 800c212:	69bb      	ldr	r3, [r7, #24]
 800c214:	683a      	ldr	r2, [r7, #0]
 800c216:	429a      	cmp	r2, r3
 800c218:	d8c6      	bhi.n	800c1a8 <SD_write+0xb0>
 800c21a:	e002      	b.n	800c222 <SD_write+0x12a>
        }
        else
        {
          break;
 800c21c:	bf00      	nop
 800c21e:	e000      	b.n	800c222 <SD_write+0x12a>
            break;
 800c220:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800c222:	69bb      	ldr	r3, [r7, #24]
 800c224:	683a      	ldr	r2, [r7, #0]
 800c226:	429a      	cmp	r2, r3
 800c228:	d104      	bne.n	800c234 <SD_write+0x13c>
 800c22a:	7fbb      	ldrb	r3, [r7, #30]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d101      	bne.n	800c234 <SD_write+0x13c>
        res = RES_OK;
 800c230:	2300      	movs	r3, #0
 800c232:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800c234:	7ffb      	ldrb	r3, [r7, #31]
}
 800c236:	4618      	mov	r0, r3
 800c238:	3720      	adds	r7, #32
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	20000770 	.word	0x20000770
 800c244:	20000570 	.word	0x20000570

0800c248 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08c      	sub	sp, #48	; 0x30
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	4603      	mov	r3, r0
 800c250:	603a      	str	r2, [r7, #0]
 800c252:	71fb      	strb	r3, [r7, #7]
 800c254:	460b      	mov	r3, r1
 800c256:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c25e:	4b25      	ldr	r3, [pc, #148]	; (800c2f4 <SD_ioctl+0xac>)
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	b2db      	uxtb	r3, r3
 800c264:	f003 0301 	and.w	r3, r3, #1
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d001      	beq.n	800c270 <SD_ioctl+0x28>
 800c26c:	2303      	movs	r3, #3
 800c26e:	e03c      	b.n	800c2ea <SD_ioctl+0xa2>

  switch (cmd)
 800c270:	79bb      	ldrb	r3, [r7, #6]
 800c272:	2b03      	cmp	r3, #3
 800c274:	d834      	bhi.n	800c2e0 <SD_ioctl+0x98>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <SD_ioctl+0x34>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c28d 	.word	0x0800c28d
 800c280:	0800c295 	.word	0x0800c295
 800c284:	0800c2ad 	.word	0x0800c2ad
 800c288:	0800c2c7 	.word	0x0800c2c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c292:	e028      	b.n	800c2e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c294:	f107 030c 	add.w	r3, r7, #12
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff fde9 	bl	800be70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c29e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c2aa:	e01c      	b.n	800c2e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2ac:	f107 030c 	add.w	r3, r7, #12
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7ff fddd 	bl	800be70 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c2b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c2c4:	e00f      	b.n	800c2e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c2c6:	f107 030c 	add.w	r3, r7, #12
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7ff fdd0 	bl	800be70 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d2:	0a5a      	lsrs	r2, r3, #9
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c2de:	e002      	b.n	800c2e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c2e0:	2304      	movs	r3, #4
 800c2e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c2e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3730      	adds	r7, #48	; 0x30
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20000009 	.word	0x20000009

0800c2f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	460b      	mov	r3, r1
 800c302:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c304:	2300      	movs	r3, #0
 800c306:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	7c1b      	ldrb	r3, [r3, #16]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d115      	bne.n	800c33c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c310:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c314:	2202      	movs	r2, #2
 800c316:	2181      	movs	r1, #129	; 0x81
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f001 ff50 	bl	800e1be <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	2201      	movs	r2, #1
 800c322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c324:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c328:	2202      	movs	r2, #2
 800c32a:	2101      	movs	r1, #1
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f001 ff46 	bl	800e1be <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2201      	movs	r2, #1
 800c336:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c33a:	e012      	b.n	800c362 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c33c:	2340      	movs	r3, #64	; 0x40
 800c33e:	2202      	movs	r2, #2
 800c340:	2181      	movs	r1, #129	; 0x81
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f001 ff3b 	bl	800e1be <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c34e:	2340      	movs	r3, #64	; 0x40
 800c350:	2202      	movs	r2, #2
 800c352:	2101      	movs	r1, #1
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 ff32 	bl	800e1be <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2201      	movs	r2, #1
 800c35e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c362:	2308      	movs	r3, #8
 800c364:	2203      	movs	r2, #3
 800c366:	2182      	movs	r1, #130	; 0x82
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f001 ff28 	bl	800e1be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2201      	movs	r2, #1
 800c372:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c374:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c378:	f002 f898 	bl	800e4ac <malloc>
 800c37c:	4603      	mov	r3, r0
 800c37e:	461a      	mov	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d102      	bne.n	800c396 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800c390:	2301      	movs	r3, #1
 800c392:	73fb      	strb	r3, [r7, #15]
 800c394:	e026      	b.n	800c3e4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c39c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c3b0:	68bb      	ldr	r3, [r7, #8]
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	7c1b      	ldrb	r3, [r3, #16]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d109      	bne.n	800c3d4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c3c0:	68bb      	ldr	r3, [r7, #8]
 800c3c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c3c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3ca:	2101      	movs	r1, #1
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f001 ffe7 	bl	800e3a0 <USBD_LL_PrepareReceive>
 800c3d2:	e007      	b.n	800c3e4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c3d4:	68bb      	ldr	r3, [r7, #8]
 800c3d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c3da:	2340      	movs	r3, #64	; 0x40
 800c3dc:	2101      	movs	r1, #1
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f001 ffde 	bl	800e3a0 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3710      	adds	r7, #16
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}

0800c3ee <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b084      	sub	sp, #16
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
 800c3f6:	460b      	mov	r3, r1
 800c3f8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c3fe:	2181      	movs	r1, #129	; 0x81
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f001 ff02 	bl	800e20a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2200      	movs	r2, #0
 800c40a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c40c:	2101      	movs	r1, #1
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f001 fefb 	bl	800e20a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c41c:	2182      	movs	r1, #130	; 0x82
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f001 fef3 	bl	800e20a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00e      	beq.n	800c452 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c43a:	685b      	ldr	r3, [r3, #4]
 800c43c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c444:	4618      	mov	r0, r3
 800c446:	f002 f839 	bl	800e4bc <free>
    pdev->pClassData = NULL;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c452:	7bfb      	ldrb	r3, [r7, #15]
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b086      	sub	sp, #24
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c46c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c46e:	2300      	movs	r3, #0
 800c470:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c472:	2300      	movs	r3, #0
 800c474:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c482:	2b00      	cmp	r3, #0
 800c484:	d039      	beq.n	800c4fa <USBD_CDC_Setup+0x9e>
 800c486:	2b20      	cmp	r3, #32
 800c488:	d17c      	bne.n	800c584 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	88db      	ldrh	r3, [r3, #6]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d029      	beq.n	800c4e6 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	b25b      	sxtb	r3, r3
 800c498:	2b00      	cmp	r3, #0
 800c49a:	da11      	bge.n	800c4c0 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	683a      	ldr	r2, [r7, #0]
 800c4a6:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c4a8:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c4aa:	683a      	ldr	r2, [r7, #0]
 800c4ac:	88d2      	ldrh	r2, [r2, #6]
 800c4ae:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c4b0:	6939      	ldr	r1, [r7, #16]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	88db      	ldrh	r3, [r3, #6]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f001 f9c9 	bl	800d850 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c4be:	e068      	b.n	800c592 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	785a      	ldrb	r2, [r3, #1]
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	88db      	ldrh	r3, [r3, #6]
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c4d6:	6939      	ldr	r1, [r7, #16]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	88db      	ldrh	r3, [r3, #6]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f001 f9e4 	bl	800d8ac <USBD_CtlPrepareRx>
    break;
 800c4e4:	e055      	b.n	800c592 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	683a      	ldr	r2, [r7, #0]
 800c4f0:	7850      	ldrb	r0, [r2, #1]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	6839      	ldr	r1, [r7, #0]
 800c4f6:	4798      	blx	r3
    break;
 800c4f8:	e04b      	b.n	800c592 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	785b      	ldrb	r3, [r3, #1]
 800c4fe:	2b0a      	cmp	r3, #10
 800c500:	d017      	beq.n	800c532 <USBD_CDC_Setup+0xd6>
 800c502:	2b0b      	cmp	r3, #11
 800c504:	d029      	beq.n	800c55a <USBD_CDC_Setup+0xfe>
 800c506:	2b00      	cmp	r3, #0
 800c508:	d133      	bne.n	800c572 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c510:	2b03      	cmp	r3, #3
 800c512:	d107      	bne.n	800c524 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c514:	f107 030c 	add.w	r3, r7, #12
 800c518:	2202      	movs	r2, #2
 800c51a:	4619      	mov	r1, r3
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f001 f997 	bl	800d850 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c522:	e02e      	b.n	800c582 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c524:	6839      	ldr	r1, [r7, #0]
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f001 f927 	bl	800d77a <USBD_CtlError>
			  ret = USBD_FAIL;
 800c52c:	2302      	movs	r3, #2
 800c52e:	75fb      	strb	r3, [r7, #23]
      break;
 800c530:	e027      	b.n	800c582 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c538:	2b03      	cmp	r3, #3
 800c53a:	d107      	bne.n	800c54c <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c53c:	f107 030f 	add.w	r3, r7, #15
 800c540:	2201      	movs	r2, #1
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f001 f983 	bl	800d850 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c54a:	e01a      	b.n	800c582 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c54c:	6839      	ldr	r1, [r7, #0]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f001 f913 	bl	800d77a <USBD_CtlError>
			  ret = USBD_FAIL;
 800c554:	2302      	movs	r3, #2
 800c556:	75fb      	strb	r3, [r7, #23]
      break;
 800c558:	e013      	b.n	800c582 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c560:	2b03      	cmp	r3, #3
 800c562:	d00d      	beq.n	800c580 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800c564:	6839      	ldr	r1, [r7, #0]
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f001 f907 	bl	800d77a <USBD_CtlError>
			  ret = USBD_FAIL;
 800c56c:	2302      	movs	r3, #2
 800c56e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c570:	e006      	b.n	800c580 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f001 f900 	bl	800d77a <USBD_CtlError>
      ret = USBD_FAIL;
 800c57a:	2302      	movs	r3, #2
 800c57c:	75fb      	strb	r3, [r7, #23]
      break;
 800c57e:	e000      	b.n	800c582 <USBD_CDC_Setup+0x126>
      break;
 800c580:	bf00      	nop
    }
    break;
 800c582:	e006      	b.n	800c592 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800c584:	6839      	ldr	r1, [r7, #0]
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f001 f8f7 	bl	800d77a <USBD_CtlError>
    ret = USBD_FAIL;
 800c58c:	2302      	movs	r3, #2
 800c58e:	75fb      	strb	r3, [r7, #23]
    break;
 800c590:	bf00      	nop
  }

  return ret;
 800c592:	7dfb      	ldrb	r3, [r7, #23]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}

0800c59c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5ae:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c5b6:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d03a      	beq.n	800c638 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c5c2:	78fa      	ldrb	r2, [r7, #3]
 800c5c4:	6879      	ldr	r1, [r7, #4]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	009b      	lsls	r3, r3, #2
 800c5ca:	4413      	add	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	440b      	add	r3, r1
 800c5d0:	331c      	adds	r3, #28
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d029      	beq.n	800c62c <USBD_CDC_DataIn+0x90>
 800c5d8:	78fa      	ldrb	r2, [r7, #3]
 800c5da:	6879      	ldr	r1, [r7, #4]
 800c5dc:	4613      	mov	r3, r2
 800c5de:	009b      	lsls	r3, r3, #2
 800c5e0:	4413      	add	r3, r2
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	440b      	add	r3, r1
 800c5e6:	331c      	adds	r3, #28
 800c5e8:	681a      	ldr	r2, [r3, #0]
 800c5ea:	78f9      	ldrb	r1, [r7, #3]
 800c5ec:	68b8      	ldr	r0, [r7, #8]
 800c5ee:	460b      	mov	r3, r1
 800c5f0:	00db      	lsls	r3, r3, #3
 800c5f2:	1a5b      	subs	r3, r3, r1
 800c5f4:	009b      	lsls	r3, r3, #2
 800c5f6:	4403      	add	r3, r0
 800c5f8:	3344      	adds	r3, #68	; 0x44
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	fbb2 f1f3 	udiv	r1, r2, r3
 800c600:	fb03 f301 	mul.w	r3, r3, r1
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d110      	bne.n	800c62c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c60a:	78fa      	ldrb	r2, [r7, #3]
 800c60c:	6879      	ldr	r1, [r7, #4]
 800c60e:	4613      	mov	r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4413      	add	r3, r2
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	440b      	add	r3, r1
 800c618:	331c      	adds	r3, #28
 800c61a:	2200      	movs	r2, #0
 800c61c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c61e:	78f9      	ldrb	r1, [r7, #3]
 800c620:	2300      	movs	r3, #0
 800c622:	2200      	movs	r2, #0
 800c624:	6878      	ldr	r0, [r7, #4]
 800c626:	f001 fe98 	bl	800e35a <USBD_LL_Transmit>
 800c62a:	e003      	b.n	800c634 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	2200      	movs	r2, #0
 800c630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c634:	2300      	movs	r3, #0
 800c636:	e000      	b.n	800c63a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c638:	2302      	movs	r3, #2
  }
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b084      	sub	sp, #16
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	460b      	mov	r3, r1
 800c64c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c654:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800c656:	78fb      	ldrb	r3, [r7, #3]
 800c658:	4619      	mov	r1, r3
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f001 fec3 	bl	800e3e6 <USBD_LL_GetRxDataSize>
 800c660:	4602      	mov	r2, r0
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00d      	beq.n	800c68e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	68fa      	ldr	r2, [r7, #12]
 800c67c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c686:	4611      	mov	r1, r2
 800c688:	4798      	blx	r3

    return USBD_OK;
 800c68a:	2300      	movs	r3, #0
 800c68c:	e000      	b.n	800c690 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800c68e:	2302      	movs	r3, #2
  }
}
 800c690:	4618      	mov	r0, r3
 800c692:	3710      	adds	r7, #16
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c6a6:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d015      	beq.n	800c6de <USBD_CDC_EP0_RxReady+0x46>
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c6b8:	2bff      	cmp	r3, #255	; 0xff
 800c6ba:	d010      	beq.n	800c6de <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	68fa      	ldr	r2, [r7, #12]
 800c6c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800c6ca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c6cc:	68fa      	ldr	r2, [r7, #12]
 800c6ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c6d2:	b292      	uxth	r2, r2
 800c6d4:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	22ff      	movs	r2, #255	; 0xff
 800c6da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800c6de:	2300      	movs	r3, #0
}
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	3710      	adds	r7, #16
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}

0800c6e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2243      	movs	r2, #67	; 0x43
 800c6f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c6f6:	4b03      	ldr	r3, [pc, #12]	; (800c704 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	370c      	adds	r7, #12
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr
 800c704:	20000094 	.word	0x20000094

0800c708 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800c708:	b480      	push	{r7}
 800c70a:	b083      	sub	sp, #12
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2243      	movs	r2, #67	; 0x43
 800c714:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c716:	4b03      	ldr	r3, [pc, #12]	; (800c724 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c718:	4618      	mov	r0, r3
 800c71a:	370c      	adds	r7, #12
 800c71c:	46bd      	mov	sp, r7
 800c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c722:	4770      	bx	lr
 800c724:	20000050 	.word	0x20000050

0800c728 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2243      	movs	r2, #67	; 0x43
 800c734:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c736:	4b03      	ldr	r3, [pc, #12]	; (800c744 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c738:	4618      	mov	r0, r3
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr
 800c744:	200000d8 	.word	0x200000d8

0800c748 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	220a      	movs	r2, #10
 800c754:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c756:	4b03      	ldr	r3, [pc, #12]	; (800c764 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c758:	4618      	mov	r0, r3
 800c75a:	370c      	adds	r7, #12
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	2000000c 	.word	0x2000000c

0800c768 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c772:	2302      	movs	r3, #2
 800c774:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d005      	beq.n	800c788 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800c784:	2300      	movs	r3, #0
 800c786:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c788:	7bfb      	ldrb	r3, [r7, #15]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800c796:	b480      	push	{r7}
 800c798:	b087      	sub	sp, #28
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c7aa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c7b4:	88fa      	ldrh	r2, [r7, #6]
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800c7bc:	2300      	movs	r3, #0
}
 800c7be:	4618      	mov	r0, r3
 800c7c0:	371c      	adds	r7, #28
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800c7ca:	b480      	push	{r7}
 800c7cc:	b085      	sub	sp, #20
 800c7ce:	af00      	add	r7, sp, #0
 800c7d0:	6078      	str	r0, [r7, #4]
 800c7d2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c7da:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	683a      	ldr	r2, [r7, #0]
 800c7e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3714      	adds	r7, #20
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f0:	4770      	bx	lr

0800c7f2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c7f2:	b580      	push	{r7, lr}
 800c7f4:	b084      	sub	sp, #16
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c800:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d01c      	beq.n	800c846 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c812:	2b00      	cmp	r3, #0
 800c814:	d115      	bne.n	800c842 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2201      	movs	r2, #1
 800c81a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800c834:	b29b      	uxth	r3, r3
 800c836:	2181      	movs	r1, #129	; 0x81
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 fd8e 	bl	800e35a <USBD_LL_Transmit>

      return USBD_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	e002      	b.n	800c848 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800c842:	2301      	movs	r3, #1
 800c844:	e000      	b.n	800c848 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800c846:	2302      	movs	r3, #2
  }
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3710      	adds	r7, #16
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	b084      	sub	sp, #16
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c85e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c866:	2b00      	cmp	r3, #0
 800c868:	d017      	beq.n	800c89a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	7c1b      	ldrb	r3, [r3, #16]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d109      	bne.n	800c886 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c87c:	2101      	movs	r1, #1
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f001 fd8e 	bl	800e3a0 <USBD_LL_PrepareReceive>
 800c884:	e007      	b.n	800c896 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c88c:	2340      	movs	r3, #64	; 0x40
 800c88e:	2101      	movs	r1, #1
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f001 fd85 	bl	800e3a0 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c896:	2300      	movs	r3, #0
 800c898:	e000      	b.n	800c89c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800c89a:	2302      	movs	r3, #2
  }
}
 800c89c:	4618      	mov	r0, r3
 800c89e:	3710      	adds	r7, #16
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	60f8      	str	r0, [r7, #12]
 800c8ac:	60b9      	str	r1, [r7, #8]
 800c8ae:	4613      	mov	r3, r2
 800c8b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d101      	bne.n	800c8bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	e01a      	b.n	800c8f2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d003      	beq.n	800c8ce <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d003      	beq.n	800c8dc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	68ba      	ldr	r2, [r7, #8]
 800c8d8:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	79fa      	ldrb	r2, [r7, #7]
 800c8e8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c8ea:	68f8      	ldr	r0, [r7, #12]
 800c8ec:	f001 fc00 	bl	800e0f0 <USBD_LL_Init>

  return USBD_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	b085      	sub	sp, #20
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
 800c902:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800c904:	2300      	movs	r3, #0
 800c906:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d006      	beq.n	800c91c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	73fb      	strb	r3, [r7, #15]
 800c91a:	e001      	b.n	800c920 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800c91c:	2302      	movs	r3, #2
 800c91e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c920:	7bfb      	ldrb	r3, [r7, #15]
}
 800c922:	4618      	mov	r0, r3
 800c924:	3714      	adds	r7, #20
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b082      	sub	sp, #8
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f001 fc26 	bl	800e188 <USBD_LL_Start>

  return USBD_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800c946:	b480      	push	{r7}
 800c948:	b083      	sub	sp, #12
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr

0800c95c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b084      	sub	sp, #16
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	460b      	mov	r3, r1
 800c966:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800c968:	2302      	movs	r3, #2
 800c96a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00c      	beq.n	800c990 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	78fa      	ldrb	r2, [r7, #3]
 800c980:	4611      	mov	r1, r2
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	4798      	blx	r3
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d101      	bne.n	800c990 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800c98c:	2300      	movs	r3, #0
 800c98e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c990:	7bfb      	ldrb	r3, [r7, #15]
}
 800c992:	4618      	mov	r0, r3
 800c994:	3710      	adds	r7, #16
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b082      	sub	sp, #8
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	460b      	mov	r3, r1
 800c9a4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	78fa      	ldrb	r2, [r7, #3]
 800c9b0:	4611      	mov	r1, r2
 800c9b2:	6878      	ldr	r0, [r7, #4]
 800c9b4:	4798      	blx	r3
  return USBD_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3708      	adds	r7, #8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800c9d0:	6839      	ldr	r1, [r7, #0]
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	f000 fe94 	bl	800d700 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2201      	movs	r2, #1
 800c9dc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800c9e6:	461a      	mov	r2, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800c9f4:	f003 031f 	and.w	r3, r3, #31
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d00c      	beq.n	800ca16 <USBD_LL_SetupStage+0x56>
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d302      	bcc.n	800ca06 <USBD_LL_SetupStage+0x46>
 800ca00:	2b02      	cmp	r3, #2
 800ca02:	d010      	beq.n	800ca26 <USBD_LL_SetupStage+0x66>
 800ca04:	e017      	b.n	800ca36 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f000 fa04 	bl	800ce1c <USBD_StdDevReq>
    break;
 800ca14:	e01a      	b.n	800ca4c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fa66 	bl	800cef0 <USBD_StdItfReq>
    break;
 800ca24:	e012      	b.n	800ca4c <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 faa4 	bl	800cf7c <USBD_StdEPReq>
    break;
 800ca34:	e00a      	b.n	800ca4c <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800ca3c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	4619      	mov	r1, r3
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 fbff 	bl	800e248 <USBD_LL_StallEP>
    break;
 800ca4a:	bf00      	nop
  }

  return USBD_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b086      	sub	sp, #24
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	60f8      	str	r0, [r7, #12]
 800ca5e:	460b      	mov	r3, r1
 800ca60:	607a      	str	r2, [r7, #4]
 800ca62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800ca64:	7afb      	ldrb	r3, [r7, #11]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d14b      	bne.n	800cb02 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ca70:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ca78:	2b03      	cmp	r3, #3
 800ca7a:	d134      	bne.n	800cae6 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	68da      	ldr	r2, [r3, #12]
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	691b      	ldr	r3, [r3, #16]
 800ca84:	429a      	cmp	r2, r3
 800ca86:	d919      	bls.n	800cabc <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	68da      	ldr	r2, [r3, #12]
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	691b      	ldr	r3, [r3, #16]
 800ca90:	1ad2      	subs	r2, r2, r3
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	68da      	ldr	r2, [r3, #12]
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d203      	bcs.n	800caaa <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	e002      	b.n	800cab0 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800caae:	b29b      	uxth	r3, r3
 800cab0:	461a      	mov	r2, r3
 800cab2:	6879      	ldr	r1, [r7, #4]
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	f000 ff17 	bl	800d8e8 <USBD_CtlContinueRx>
 800caba:	e038      	b.n	800cb2e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00a      	beq.n	800cade <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800cace:	2b03      	cmp	r3, #3
 800cad0:	d105      	bne.n	800cade <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	68f8      	ldr	r0, [r7, #12]
 800cadc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f000 ff14 	bl	800d90c <USBD_CtlSendStatus>
 800cae4:	e023      	b.n	800cb2e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800caec:	2b05      	cmp	r3, #5
 800caee:	d11e      	bne.n	800cb2e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800caf8:	2100      	movs	r1, #0
 800cafa:	68f8      	ldr	r0, [r7, #12]
 800cafc:	f001 fba4 	bl	800e248 <USBD_LL_StallEP>
 800cb00:	e015      	b.n	800cb2e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00d      	beq.n	800cb2a <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800cb14:	2b03      	cmp	r3, #3
 800cb16:	d108      	bne.n	800cb2a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cb1e:	699b      	ldr	r3, [r3, #24]
 800cb20:	7afa      	ldrb	r2, [r7, #11]
 800cb22:	4611      	mov	r1, r2
 800cb24:	68f8      	ldr	r0, [r7, #12]
 800cb26:	4798      	blx	r3
 800cb28:	e001      	b.n	800cb2e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cb2a:	2302      	movs	r3, #2
 800cb2c:	e000      	b.n	800cb30 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800cb2e:	2300      	movs	r3, #0
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3718      	adds	r7, #24
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b086      	sub	sp, #24
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	60f8      	str	r0, [r7, #12]
 800cb40:	460b      	mov	r3, r1
 800cb42:	607a      	str	r2, [r7, #4]
 800cb44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800cb46:	7afb      	ldrb	r3, [r7, #11]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d17f      	bne.n	800cc4c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	3314      	adds	r3, #20
 800cb50:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d15c      	bne.n	800cc16 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800cb5c:	697b      	ldr	r3, [r7, #20]
 800cb5e:	68da      	ldr	r2, [r3, #12]
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	691b      	ldr	r3, [r3, #16]
 800cb64:	429a      	cmp	r2, r3
 800cb66:	d915      	bls.n	800cb94 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	68da      	ldr	r2, [r3, #12]
 800cb6c:	697b      	ldr	r3, [r7, #20]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	1ad2      	subs	r2, r2, r3
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	461a      	mov	r2, r3
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f000 fe81 	bl	800d888 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cb86:	2300      	movs	r3, #0
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2100      	movs	r1, #0
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f001 fc07 	bl	800e3a0 <USBD_LL_PrepareReceive>
 800cb92:	e04e      	b.n	800cc32 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800cb94:	697b      	ldr	r3, [r7, #20]
 800cb96:	689b      	ldr	r3, [r3, #8]
 800cb98:	697a      	ldr	r2, [r7, #20]
 800cb9a:	6912      	ldr	r2, [r2, #16]
 800cb9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cba0:	fb02 f201 	mul.w	r2, r2, r1
 800cba4:	1a9b      	subs	r3, r3, r2
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d11c      	bne.n	800cbe4 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	689a      	ldr	r2, [r3, #8]
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d316      	bcc.n	800cbe4 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d20f      	bcs.n	800cbe4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2100      	movs	r1, #0
 800cbc8:	68f8      	ldr	r0, [r7, #12]
 800cbca:	f000 fe5d 	bl	800d888 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	2200      	movs	r2, #0
 800cbda:	2100      	movs	r1, #0
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f001 fbdf 	bl	800e3a0 <USBD_LL_PrepareReceive>
 800cbe2:	e026      	b.n	800cc32 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cbea:	68db      	ldr	r3, [r3, #12]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00a      	beq.n	800cc06 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d105      	bne.n	800cc06 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cc06:	2180      	movs	r1, #128	; 0x80
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f001 fb1d 	bl	800e248 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cc0e:	68f8      	ldr	r0, [r7, #12]
 800cc10:	f000 fe8f 	bl	800d932 <USBD_CtlReceiveStatus>
 800cc14:	e00d      	b.n	800cc32 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cc1c:	2b04      	cmp	r3, #4
 800cc1e:	d004      	beq.n	800cc2a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d103      	bne.n	800cc32 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cc2a:	2180      	movs	r1, #128	; 0x80
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f001 fb0b 	bl	800e248 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	d11d      	bne.n	800cc78 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800cc3c:	68f8      	ldr	r0, [r7, #12]
 800cc3e:	f7ff fe82 	bl	800c946 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2200      	movs	r2, #0
 800cc46:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800cc4a:	e015      	b.n	800cc78 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc52:	695b      	ldr	r3, [r3, #20]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00d      	beq.n	800cc74 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	d108      	bne.n	800cc74 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc68:	695b      	ldr	r3, [r3, #20]
 800cc6a:	7afa      	ldrb	r2, [r7, #11]
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	68f8      	ldr	r0, [r7, #12]
 800cc70:	4798      	blx	r3
 800cc72:	e001      	b.n	800cc78 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cc74:	2302      	movs	r3, #2
 800cc76:	e000      	b.n	800cc7a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3718      	adds	r7, #24
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc8a:	2340      	movs	r3, #64	; 0x40
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2100      	movs	r1, #0
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f001 fa94 	bl	800e1be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2240      	movs	r2, #64	; 0x40
 800cca2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cca6:	2340      	movs	r3, #64	; 0x40
 800cca8:	2200      	movs	r2, #0
 800ccaa:	2180      	movs	r1, #128	; 0x80
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f001 fa86 	bl	800e1be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2240      	movs	r2, #64	; 0x40
 800ccbc:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d009      	beq.n	800ccfa <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	6852      	ldr	r2, [r2, #4]
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	4611      	mov	r1, r2
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	4798      	blx	r3
  }

  return USBD_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3708      	adds	r7, #8
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}

0800cd04 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	460b      	mov	r3, r1
 800cd0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	78fa      	ldrb	r2, [r7, #3]
 800cd14:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	370c      	adds	r7, #12
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2204      	movs	r2, #4
 800cd3c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800cd4e:	b480      	push	{r7}
 800cd50:	b083      	sub	sp, #12
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cd7e:	2b03      	cmp	r3, #3
 800cd80:	d10b      	bne.n	800cd9a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd88:	69db      	ldr	r3, [r3, #28]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d005      	beq.n	800cd9a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd94:	69db      	ldr	r3, [r3, #28]
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800cd9a:	2300      	movs	r3, #0
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800cda4:	b480      	push	{r7}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
 800cdac:	460b      	mov	r3, r1
 800cdae:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	370c      	adds	r7, #12
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800cdbe:	b480      	push	{r7}
 800cdc0:	b083      	sub	sp, #12
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
 800cdc6:	460b      	mov	r3, r1
 800cdc8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	370c      	adds	r7, #12
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr

0800cdd8 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b082      	sub	sp, #8
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	687a      	ldr	r2, [r7, #4]
 800ce08:	6852      	ldr	r2, [r2, #4]
 800ce0a:	b2d2      	uxtb	r2, r2
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	4798      	blx	r3

  return USBD_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3708      	adds	r7, #8
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
 800ce24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce26:	2300      	movs	r3, #0
 800ce28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce32:	2b20      	cmp	r3, #32
 800ce34:	d004      	beq.n	800ce40 <USBD_StdDevReq+0x24>
 800ce36:	2b40      	cmp	r3, #64	; 0x40
 800ce38:	d002      	beq.n	800ce40 <USBD_StdDevReq+0x24>
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d008      	beq.n	800ce50 <USBD_StdDevReq+0x34>
 800ce3e:	e04c      	b.n	800ceda <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	6839      	ldr	r1, [r7, #0]
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	4798      	blx	r3
    break;
 800ce4e:	e049      	b.n	800cee4 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	785b      	ldrb	r3, [r3, #1]
 800ce54:	2b09      	cmp	r3, #9
 800ce56:	d83a      	bhi.n	800cece <USBD_StdDevReq+0xb2>
 800ce58:	a201      	add	r2, pc, #4	; (adr r2, 800ce60 <USBD_StdDevReq+0x44>)
 800ce5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5e:	bf00      	nop
 800ce60:	0800ceb1 	.word	0x0800ceb1
 800ce64:	0800cec5 	.word	0x0800cec5
 800ce68:	0800cecf 	.word	0x0800cecf
 800ce6c:	0800cebb 	.word	0x0800cebb
 800ce70:	0800cecf 	.word	0x0800cecf
 800ce74:	0800ce93 	.word	0x0800ce93
 800ce78:	0800ce89 	.word	0x0800ce89
 800ce7c:	0800cecf 	.word	0x0800cecf
 800ce80:	0800cea7 	.word	0x0800cea7
 800ce84:	0800ce9d 	.word	0x0800ce9d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800ce88:	6839      	ldr	r1, [r7, #0]
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f000 f9d2 	bl	800d234 <USBD_GetDescriptor>
      break;
 800ce90:	e022      	b.n	800ced8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800ce92:	6839      	ldr	r1, [r7, #0]
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f000 fac7 	bl	800d428 <USBD_SetAddress>
      break;
 800ce9a:	e01d      	b.n	800ced8 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800ce9c:	6839      	ldr	r1, [r7, #0]
 800ce9e:	6878      	ldr	r0, [r7, #4]
 800cea0:	f000 fb04 	bl	800d4ac <USBD_SetConfig>
      break;
 800cea4:	e018      	b.n	800ced8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f000 fb8d 	bl	800d5c8 <USBD_GetConfig>
      break;
 800ceae:	e013      	b.n	800ced8 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 fbbc 	bl	800d630 <USBD_GetStatus>
      break;
 800ceb8:	e00e      	b.n	800ced8 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800ceba:	6839      	ldr	r1, [r7, #0]
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 fbea 	bl	800d696 <USBD_SetFeature>
      break;
 800cec2:	e009      	b.n	800ced8 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fbf9 	bl	800d6be <USBD_ClrFeature>
      break;
 800cecc:	e004      	b.n	800ced8 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800cece:	6839      	ldr	r1, [r7, #0]
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 fc52 	bl	800d77a <USBD_CtlError>
      break;
 800ced6:	bf00      	nop
    }
    break;
 800ced8:	e004      	b.n	800cee4 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800ceda:	6839      	ldr	r1, [r7, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fc4c 	bl	800d77a <USBD_CtlError>
    break;
 800cee2:	bf00      	nop
  }

  return ret;
 800cee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3710      	adds	r7, #16
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}
 800ceee:	bf00      	nop

0800cef0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
 800cef8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cefa:	2300      	movs	r3, #0
 800cefc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf06:	2b20      	cmp	r3, #32
 800cf08:	d003      	beq.n	800cf12 <USBD_StdItfReq+0x22>
 800cf0a:	2b40      	cmp	r3, #64	; 0x40
 800cf0c:	d001      	beq.n	800cf12 <USBD_StdItfReq+0x22>
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d12a      	bne.n	800cf68 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	d81d      	bhi.n	800cf5a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	889b      	ldrh	r3, [r3, #4]
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d813      	bhi.n	800cf50 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	4798      	blx	r3
 800cf36:	4603      	mov	r3, r0
 800cf38:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	88db      	ldrh	r3, [r3, #6]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d110      	bne.n	800cf64 <USBD_StdItfReq+0x74>
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10d      	bne.n	800cf64 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fcdf 	bl	800d90c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800cf4e:	e009      	b.n	800cf64 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fc11 	bl	800d77a <USBD_CtlError>
      break;
 800cf58:	e004      	b.n	800cf64 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800cf5a:	6839      	ldr	r1, [r7, #0]
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 fc0c 	bl	800d77a <USBD_CtlError>
      break;
 800cf62:	e000      	b.n	800cf66 <USBD_StdItfReq+0x76>
      break;
 800cf64:	bf00      	nop
    }
    break;
 800cf66:	e004      	b.n	800cf72 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800cf68:	6839      	ldr	r1, [r7, #0]
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 fc05 	bl	800d77a <USBD_CtlError>
    break;
 800cf70:	bf00      	nop
  }

  return USBD_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	889b      	ldrh	r3, [r3, #4]
 800cf8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf98:	2b20      	cmp	r3, #32
 800cf9a:	d004      	beq.n	800cfa6 <USBD_StdEPReq+0x2a>
 800cf9c:	2b40      	cmp	r3, #64	; 0x40
 800cf9e:	d002      	beq.n	800cfa6 <USBD_StdEPReq+0x2a>
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d008      	beq.n	800cfb6 <USBD_StdEPReq+0x3a>
 800cfa4:	e13b      	b.n	800d21e <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfac:	689b      	ldr	r3, [r3, #8]
 800cfae:	6839      	ldr	r1, [r7, #0]
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	4798      	blx	r3
    break;
 800cfb4:	e138      	b.n	800d228 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	781b      	ldrb	r3, [r3, #0]
 800cfba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cfbe:	2b20      	cmp	r3, #32
 800cfc0:	d10a      	bne.n	800cfd8 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	6839      	ldr	r1, [r7, #0]
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	4798      	blx	r3
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	73fb      	strb	r3, [r7, #15]

      return ret;
 800cfd4:	7bfb      	ldrb	r3, [r7, #15]
 800cfd6:	e128      	b.n	800d22a <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	785b      	ldrb	r3, [r3, #1]
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d03e      	beq.n	800d05e <USBD_StdEPReq+0xe2>
 800cfe0:	2b03      	cmp	r3, #3
 800cfe2:	d002      	beq.n	800cfea <USBD_StdEPReq+0x6e>
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d070      	beq.n	800d0ca <USBD_StdEPReq+0x14e>
 800cfe8:	e113      	b.n	800d212 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d002      	beq.n	800cffa <USBD_StdEPReq+0x7e>
 800cff4:	2b03      	cmp	r3, #3
 800cff6:	d015      	beq.n	800d024 <USBD_StdEPReq+0xa8>
 800cff8:	e02b      	b.n	800d052 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cffa:	7bbb      	ldrb	r3, [r7, #14]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00c      	beq.n	800d01a <USBD_StdEPReq+0x9e>
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	2b80      	cmp	r3, #128	; 0x80
 800d004:	d009      	beq.n	800d01a <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d006:	7bbb      	ldrb	r3, [r7, #14]
 800d008:	4619      	mov	r1, r3
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f001 f91c 	bl	800e248 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d010:	2180      	movs	r1, #128	; 0x80
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f001 f918 	bl	800e248 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d018:	e020      	b.n	800d05c <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800d01a:	6839      	ldr	r1, [r7, #0]
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 fbac 	bl	800d77a <USBD_CtlError>
        break;
 800d022:	e01b      	b.n	800d05c <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	885b      	ldrh	r3, [r3, #2]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10e      	bne.n	800d04a <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d02c:	7bbb      	ldrb	r3, [r7, #14]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d00b      	beq.n	800d04a <USBD_StdEPReq+0xce>
 800d032:	7bbb      	ldrb	r3, [r7, #14]
 800d034:	2b80      	cmp	r3, #128	; 0x80
 800d036:	d008      	beq.n	800d04a <USBD_StdEPReq+0xce>
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	88db      	ldrh	r3, [r3, #6]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d104      	bne.n	800d04a <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d040:	7bbb      	ldrb	r3, [r7, #14]
 800d042:	4619      	mov	r1, r3
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f001 f8ff 	bl	800e248 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 fc5e 	bl	800d90c <USBD_CtlSendStatus>

        break;
 800d050:	e004      	b.n	800d05c <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800d052:	6839      	ldr	r1, [r7, #0]
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fb90 	bl	800d77a <USBD_CtlError>
        break;
 800d05a:	bf00      	nop
      }
      break;
 800d05c:	e0de      	b.n	800d21c <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d064:	2b02      	cmp	r3, #2
 800d066:	d002      	beq.n	800d06e <USBD_StdEPReq+0xf2>
 800d068:	2b03      	cmp	r3, #3
 800d06a:	d015      	beq.n	800d098 <USBD_StdEPReq+0x11c>
 800d06c:	e026      	b.n	800d0bc <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d06e:	7bbb      	ldrb	r3, [r7, #14]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d00c      	beq.n	800d08e <USBD_StdEPReq+0x112>
 800d074:	7bbb      	ldrb	r3, [r7, #14]
 800d076:	2b80      	cmp	r3, #128	; 0x80
 800d078:	d009      	beq.n	800d08e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d07a:	7bbb      	ldrb	r3, [r7, #14]
 800d07c:	4619      	mov	r1, r3
 800d07e:	6878      	ldr	r0, [r7, #4]
 800d080:	f001 f8e2 	bl	800e248 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d084:	2180      	movs	r1, #128	; 0x80
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f001 f8de 	bl	800e248 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d08c:	e01c      	b.n	800d0c8 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800d08e:	6839      	ldr	r1, [r7, #0]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 fb72 	bl	800d77a <USBD_CtlError>
        break;
 800d096:	e017      	b.n	800d0c8 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	885b      	ldrh	r3, [r3, #2]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d112      	bne.n	800d0c6 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d0a0:	7bbb      	ldrb	r3, [r7, #14]
 800d0a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d004      	beq.n	800d0b4 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d0aa:	7bbb      	ldrb	r3, [r7, #14]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f001 f8e9 	bl	800e286 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fc29 	bl	800d90c <USBD_CtlSendStatus>
        }
        break;
 800d0ba:	e004      	b.n	800d0c6 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fb5b 	bl	800d77a <USBD_CtlError>
        break;
 800d0c4:	e000      	b.n	800d0c8 <USBD_StdEPReq+0x14c>
        break;
 800d0c6:	bf00      	nop
      }
      break;
 800d0c8:	e0a8      	b.n	800d21c <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d002      	beq.n	800d0da <USBD_StdEPReq+0x15e>
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d031      	beq.n	800d13c <USBD_StdEPReq+0x1c0>
 800d0d8:	e095      	b.n	800d206 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0da:	7bbb      	ldrb	r3, [r7, #14]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d007      	beq.n	800d0f0 <USBD_StdEPReq+0x174>
 800d0e0:	7bbb      	ldrb	r3, [r7, #14]
 800d0e2:	2b80      	cmp	r3, #128	; 0x80
 800d0e4:	d004      	beq.n	800d0f0 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800d0e6:	6839      	ldr	r1, [r7, #0]
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fb46 	bl	800d77a <USBD_CtlError>
          break;
 800d0ee:	e08f      	b.n	800d210 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d0f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	da0b      	bge.n	800d110 <USBD_StdEPReq+0x194>
 800d0f8:	7bbb      	ldrb	r3, [r7, #14]
 800d0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d0fe:	4613      	mov	r3, r2
 800d100:	009b      	lsls	r3, r3, #2
 800d102:	4413      	add	r3, r2
 800d104:	009b      	lsls	r3, r3, #2
 800d106:	3310      	adds	r3, #16
 800d108:	687a      	ldr	r2, [r7, #4]
 800d10a:	4413      	add	r3, r2
 800d10c:	3304      	adds	r3, #4
 800d10e:	e00a      	b.n	800d126 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d110:	7bbb      	ldrb	r3, [r7, #14]
 800d112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d116:	4613      	mov	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	4413      	add	r3, r2
 800d126:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800d128:	68bb      	ldr	r3, [r7, #8]
 800d12a:	2200      	movs	r2, #0
 800d12c:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	2202      	movs	r2, #2
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fb8b 	bl	800d850 <USBD_CtlSendData>
          break;
 800d13a:	e069      	b.n	800d210 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800d13c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d140:	2b00      	cmp	r3, #0
 800d142:	da11      	bge.n	800d168 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d144:	7bbb      	ldrb	r3, [r7, #14]
 800d146:	f003 020f 	and.w	r2, r3, #15
 800d14a:	6879      	ldr	r1, [r7, #4]
 800d14c:	4613      	mov	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4413      	add	r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	440b      	add	r3, r1
 800d156:	3318      	adds	r3, #24
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d117      	bne.n	800d18e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800d15e:	6839      	ldr	r1, [r7, #0]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f000 fb0a 	bl	800d77a <USBD_CtlError>
            break;
 800d166:	e053      	b.n	800d210 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d168:	7bbb      	ldrb	r3, [r7, #14]
 800d16a:	f003 020f 	and.w	r2, r3, #15
 800d16e:	6879      	ldr	r1, [r7, #4]
 800d170:	4613      	mov	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	4413      	add	r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	440b      	add	r3, r1
 800d17a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d104      	bne.n	800d18e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800d184:	6839      	ldr	r1, [r7, #0]
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 faf7 	bl	800d77a <USBD_CtlError>
            break;
 800d18c:	e040      	b.n	800d210 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d18e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d192:	2b00      	cmp	r3, #0
 800d194:	da0b      	bge.n	800d1ae <USBD_StdEPReq+0x232>
 800d196:	7bbb      	ldrb	r3, [r7, #14]
 800d198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d19c:	4613      	mov	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4413      	add	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	3310      	adds	r3, #16
 800d1a6:	687a      	ldr	r2, [r7, #4]
 800d1a8:	4413      	add	r3, r2
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	e00a      	b.n	800d1c4 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d1ae:	7bbb      	ldrb	r3, [r7, #14]
 800d1b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d1b4:	4613      	mov	r3, r2
 800d1b6:	009b      	lsls	r3, r3, #2
 800d1b8:	4413      	add	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d1c6:	7bbb      	ldrb	r3, [r7, #14]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <USBD_StdEPReq+0x256>
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
 800d1ce:	2b80      	cmp	r3, #128	; 0x80
 800d1d0:	d103      	bne.n	800d1da <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	601a      	str	r2, [r3, #0]
 800d1d8:	e00e      	b.n	800d1f8 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f001 f870 	bl	800e2c4 <USBD_LL_IsStallEP>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d003      	beq.n	800d1f2 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	601a      	str	r2, [r3, #0]
 800d1f0:	e002      	b.n	800d1f8 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2202      	movs	r2, #2
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 fb26 	bl	800d850 <USBD_CtlSendData>
          break;
 800d204:	e004      	b.n	800d210 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 fab6 	bl	800d77a <USBD_CtlError>
        break;
 800d20e:	bf00      	nop
      }
      break;
 800d210:	e004      	b.n	800d21c <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800d212:	6839      	ldr	r1, [r7, #0]
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 fab0 	bl	800d77a <USBD_CtlError>
      break;
 800d21a:	bf00      	nop
    }
    break;
 800d21c:	e004      	b.n	800d228 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800d21e:	6839      	ldr	r1, [r7, #0]
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 faaa 	bl	800d77a <USBD_CtlError>
    break;
 800d226:	bf00      	nop
  }

  return ret;
 800d228:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	885b      	ldrh	r3, [r3, #2]
 800d242:	0a1b      	lsrs	r3, r3, #8
 800d244:	b29b      	uxth	r3, r3
 800d246:	3b01      	subs	r3, #1
 800d248:	2b06      	cmp	r3, #6
 800d24a:	f200 80c9 	bhi.w	800d3e0 <USBD_GetDescriptor+0x1ac>
 800d24e:	a201      	add	r2, pc, #4	; (adr r2, 800d254 <USBD_GetDescriptor+0x20>)
 800d250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d254:	0800d271 	.word	0x0800d271
 800d258:	0800d289 	.word	0x0800d289
 800d25c:	0800d2c9 	.word	0x0800d2c9
 800d260:	0800d3e1 	.word	0x0800d3e1
 800d264:	0800d3e1 	.word	0x0800d3e1
 800d268:	0800d38d 	.word	0x0800d38d
 800d26c:	0800d3b3 	.word	0x0800d3b3
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	7c12      	ldrb	r2, [r2, #16]
 800d27c:	f107 010a 	add.w	r1, r7, #10
 800d280:	4610      	mov	r0, r2
 800d282:	4798      	blx	r3
 800d284:	60f8      	str	r0, [r7, #12]
    break;
 800d286:	e0b0      	b.n	800d3ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	7c1b      	ldrb	r3, [r3, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10d      	bne.n	800d2ac <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d298:	f107 020a 	add.w	r2, r7, #10
 800d29c:	4610      	mov	r0, r2
 800d29e:	4798      	blx	r3
 800d2a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	2202      	movs	r2, #2
 800d2a8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d2aa:	e09e      	b.n	800d3ea <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b4:	f107 020a 	add.w	r2, r7, #10
 800d2b8:	4610      	mov	r0, r2
 800d2ba:	4798      	blx	r3
 800d2bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	2202      	movs	r2, #2
 800d2c4:	701a      	strb	r2, [r3, #0]
    break;
 800d2c6:	e090      	b.n	800d3ea <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	885b      	ldrh	r3, [r3, #2]
 800d2cc:	b2db      	uxtb	r3, r3
 800d2ce:	2b05      	cmp	r3, #5
 800d2d0:	d856      	bhi.n	800d380 <USBD_GetDescriptor+0x14c>
 800d2d2:	a201      	add	r2, pc, #4	; (adr r2, 800d2d8 <USBD_GetDescriptor+0xa4>)
 800d2d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2d8:	0800d2f1 	.word	0x0800d2f1
 800d2dc:	0800d309 	.word	0x0800d309
 800d2e0:	0800d321 	.word	0x0800d321
 800d2e4:	0800d339 	.word	0x0800d339
 800d2e8:	0800d351 	.word	0x0800d351
 800d2ec:	0800d369 	.word	0x0800d369
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	687a      	ldr	r2, [r7, #4]
 800d2fa:	7c12      	ldrb	r2, [r2, #16]
 800d2fc:	f107 010a 	add.w	r1, r7, #10
 800d300:	4610      	mov	r0, r2
 800d302:	4798      	blx	r3
 800d304:	60f8      	str	r0, [r7, #12]
      break;
 800d306:	e040      	b.n	800d38a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d30e:	689b      	ldr	r3, [r3, #8]
 800d310:	687a      	ldr	r2, [r7, #4]
 800d312:	7c12      	ldrb	r2, [r2, #16]
 800d314:	f107 010a 	add.w	r1, r7, #10
 800d318:	4610      	mov	r0, r2
 800d31a:	4798      	blx	r3
 800d31c:	60f8      	str	r0, [r7, #12]
      break;
 800d31e:	e034      	b.n	800d38a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d326:	68db      	ldr	r3, [r3, #12]
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	7c12      	ldrb	r2, [r2, #16]
 800d32c:	f107 010a 	add.w	r1, r7, #10
 800d330:	4610      	mov	r0, r2
 800d332:	4798      	blx	r3
 800d334:	60f8      	str	r0, [r7, #12]
      break;
 800d336:	e028      	b.n	800d38a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d33e:	691b      	ldr	r3, [r3, #16]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	7c12      	ldrb	r2, [r2, #16]
 800d344:	f107 010a 	add.w	r1, r7, #10
 800d348:	4610      	mov	r0, r2
 800d34a:	4798      	blx	r3
 800d34c:	60f8      	str	r0, [r7, #12]
      break;
 800d34e:	e01c      	b.n	800d38a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d356:	695b      	ldr	r3, [r3, #20]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	7c12      	ldrb	r2, [r2, #16]
 800d35c:	f107 010a 	add.w	r1, r7, #10
 800d360:	4610      	mov	r0, r2
 800d362:	4798      	blx	r3
 800d364:	60f8      	str	r0, [r7, #12]
      break;
 800d366:	e010      	b.n	800d38a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d36e:	699b      	ldr	r3, [r3, #24]
 800d370:	687a      	ldr	r2, [r7, #4]
 800d372:	7c12      	ldrb	r2, [r2, #16]
 800d374:	f107 010a 	add.w	r1, r7, #10
 800d378:	4610      	mov	r0, r2
 800d37a:	4798      	blx	r3
 800d37c:	60f8      	str	r0, [r7, #12]
      break;
 800d37e:	e004      	b.n	800d38a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800d380:	6839      	ldr	r1, [r7, #0]
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f000 f9f9 	bl	800d77a <USBD_CtlError>
      return;
 800d388:	e04b      	b.n	800d422 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800d38a:	e02e      	b.n	800d3ea <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	7c1b      	ldrb	r3, [r3, #16]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d109      	bne.n	800d3a8 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d39a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39c:	f107 020a 	add.w	r2, r7, #10
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	4798      	blx	r3
 800d3a4:	60f8      	str	r0, [r7, #12]
      break;
 800d3a6:	e020      	b.n	800d3ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f9e5 	bl	800d77a <USBD_CtlError>
      return;
 800d3b0:	e037      	b.n	800d422 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	7c1b      	ldrb	r3, [r3, #16]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d10d      	bne.n	800d3d6 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d3c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3c2:	f107 020a 	add.w	r2, r7, #10
 800d3c6:	4610      	mov	r0, r2
 800d3c8:	4798      	blx	r3
 800d3ca:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	2207      	movs	r2, #7
 800d3d2:	701a      	strb	r2, [r3, #0]
      break;
 800d3d4:	e009      	b.n	800d3ea <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d3d6:	6839      	ldr	r1, [r7, #0]
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 f9ce 	bl	800d77a <USBD_CtlError>
      return;
 800d3de:	e020      	b.n	800d422 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 f9c9 	bl	800d77a <USBD_CtlError>
    return;
 800d3e8:	e01b      	b.n	800d422 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d3ea:	897b      	ldrh	r3, [r7, #10]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d011      	beq.n	800d414 <USBD_GetDescriptor+0x1e0>
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	88db      	ldrh	r3, [r3, #6]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00d      	beq.n	800d414 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	88da      	ldrh	r2, [r3, #6]
 800d3fc:	897b      	ldrh	r3, [r7, #10]
 800d3fe:	4293      	cmp	r3, r2
 800d400:	bf28      	it	cs
 800d402:	4613      	movcs	r3, r2
 800d404:	b29b      	uxth	r3, r3
 800d406:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d408:	897b      	ldrh	r3, [r7, #10]
 800d40a:	461a      	mov	r2, r3
 800d40c:	68f9      	ldr	r1, [r7, #12]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fa1e 	bl	800d850 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	88db      	ldrh	r3, [r3, #6]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d102      	bne.n	800d422 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f000 fa75 	bl	800d90c <USBD_CtlSendStatus>
  }
}
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	889b      	ldrh	r3, [r3, #4]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d130      	bne.n	800d49c <USBD_SetAddress+0x74>
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	88db      	ldrh	r3, [r3, #6]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d12c      	bne.n	800d49c <USBD_SetAddress+0x74>
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	885b      	ldrh	r3, [r3, #2]
 800d446:	2b7f      	cmp	r3, #127	; 0x7f
 800d448:	d828      	bhi.n	800d49c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	885b      	ldrh	r3, [r3, #2]
 800d44e:	b2db      	uxtb	r3, r3
 800d450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d454:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d45c:	2b03      	cmp	r3, #3
 800d45e:	d104      	bne.n	800d46a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d460:	6839      	ldr	r1, [r7, #0]
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 f989 	bl	800d77a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d468:	e01c      	b.n	800d4a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	7bfa      	ldrb	r2, [r7, #15]
 800d46e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d472:	7bfb      	ldrb	r3, [r7, #15]
 800d474:	4619      	mov	r1, r3
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 ff50 	bl	800e31c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fa45 	bl	800d90c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d482:	7bfb      	ldrb	r3, [r7, #15]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d004      	beq.n	800d492 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d490:	e008      	b.n	800d4a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2201      	movs	r2, #1
 800d496:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d49a:	e003      	b.n	800d4a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d49c:	6839      	ldr	r1, [r7, #0]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f96b 	bl	800d77a <USBD_CtlError>
  }
}
 800d4a4:	bf00      	nop
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	885b      	ldrh	r3, [r3, #2]
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	4b41      	ldr	r3, [pc, #260]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d4be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d4c0:	4b40      	ldr	r3, [pc, #256]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d904      	bls.n	800d4d2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d4c8:	6839      	ldr	r1, [r7, #0]
 800d4ca:	6878      	ldr	r0, [r7, #4]
 800d4cc:	f000 f955 	bl	800d77a <USBD_CtlError>
 800d4d0:	e075      	b.n	800d5be <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d4d8:	2b02      	cmp	r3, #2
 800d4da:	d002      	beq.n	800d4e2 <USBD_SetConfig+0x36>
 800d4dc:	2b03      	cmp	r3, #3
 800d4de:	d023      	beq.n	800d528 <USBD_SetConfig+0x7c>
 800d4e0:	e062      	b.n	800d5a8 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d4e2:	4b38      	ldr	r3, [pc, #224]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d4e4:	781b      	ldrb	r3, [r3, #0]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d01a      	beq.n	800d520 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d4ea:	4b36      	ldr	r3, [pc, #216]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	461a      	mov	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2203      	movs	r2, #3
 800d4f8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d4fc:	4b31      	ldr	r3, [pc, #196]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d4fe:	781b      	ldrb	r3, [r3, #0]
 800d500:	4619      	mov	r1, r3
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7ff fa2a 	bl	800c95c <USBD_SetClassConfig>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d104      	bne.n	800d518 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d50e:	6839      	ldr	r1, [r7, #0]
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f000 f932 	bl	800d77a <USBD_CtlError>
          return;
 800d516:	e052      	b.n	800d5be <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f9f7 	bl	800d90c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d51e:	e04e      	b.n	800d5be <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 f9f3 	bl	800d90c <USBD_CtlSendStatus>
      break;
 800d526:	e04a      	b.n	800d5be <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d528:	4b26      	ldr	r3, [pc, #152]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d112      	bne.n	800d556 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2202      	movs	r2, #2
 800d534:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d538:	4b22      	ldr	r3, [pc, #136]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	461a      	mov	r2, r3
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d542:	4b20      	ldr	r3, [pc, #128]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d544:	781b      	ldrb	r3, [r3, #0]
 800d546:	4619      	mov	r1, r3
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f7ff fa26 	bl	800c99a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f9dc 	bl	800d90c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d554:	e033      	b.n	800d5be <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d556:	4b1b      	ldr	r3, [pc, #108]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	461a      	mov	r2, r3
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685b      	ldr	r3, [r3, #4]
 800d560:	429a      	cmp	r2, r3
 800d562:	d01d      	beq.n	800d5a0 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	b2db      	uxtb	r3, r3
 800d56a:	4619      	mov	r1, r3
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f7ff fa14 	bl	800c99a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d572:	4b14      	ldr	r3, [pc, #80]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	461a      	mov	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d57c:	4b11      	ldr	r3, [pc, #68]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	4619      	mov	r1, r3
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7ff f9ea 	bl	800c95c <USBD_SetClassConfig>
 800d588:	4603      	mov	r3, r0
 800d58a:	2b02      	cmp	r3, #2
 800d58c:	d104      	bne.n	800d598 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d58e:	6839      	ldr	r1, [r7, #0]
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 f8f2 	bl	800d77a <USBD_CtlError>
          return;
 800d596:	e012      	b.n	800d5be <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f9b7 	bl	800d90c <USBD_CtlSendStatus>
      break;
 800d59e:	e00e      	b.n	800d5be <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d5a0:	6878      	ldr	r0, [r7, #4]
 800d5a2:	f000 f9b3 	bl	800d90c <USBD_CtlSendStatus>
      break;
 800d5a6:	e00a      	b.n	800d5be <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 f8e5 	bl	800d77a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d5b0:	4b04      	ldr	r3, [pc, #16]	; (800d5c4 <USBD_SetConfig+0x118>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f7ff f9ef 	bl	800c99a <USBD_ClrClassConfig>
      break;
 800d5bc:	bf00      	nop
    }
  }
}
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}
 800d5c4:	20000778 	.word	0x20000778

0800d5c8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	88db      	ldrh	r3, [r3, #6]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d004      	beq.n	800d5e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d5da:	6839      	ldr	r1, [r7, #0]
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f8cc 	bl	800d77a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d5e2:	e021      	b.n	800d628 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d5ea:	2b01      	cmp	r3, #1
 800d5ec:	db17      	blt.n	800d61e <USBD_GetConfig+0x56>
 800d5ee:	2b02      	cmp	r3, #2
 800d5f0:	dd02      	ble.n	800d5f8 <USBD_GetConfig+0x30>
 800d5f2:	2b03      	cmp	r3, #3
 800d5f4:	d00b      	beq.n	800d60e <USBD_GetConfig+0x46>
 800d5f6:	e012      	b.n	800d61e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	3308      	adds	r3, #8
 800d602:	2201      	movs	r2, #1
 800d604:	4619      	mov	r1, r3
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f922 	bl	800d850 <USBD_CtlSendData>
      break;
 800d60c:	e00c      	b.n	800d628 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	3304      	adds	r3, #4
 800d612:	2201      	movs	r2, #1
 800d614:	4619      	mov	r1, r3
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 f91a 	bl	800d850 <USBD_CtlSendData>
      break;
 800d61c:	e004      	b.n	800d628 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800d61e:	6839      	ldr	r1, [r7, #0]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 f8aa 	bl	800d77a <USBD_CtlError>
      break;
 800d626:	bf00      	nop
}
 800d628:	bf00      	nop
 800d62a:	3708      	adds	r7, #8
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b082      	sub	sp, #8
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d640:	3b01      	subs	r3, #1
 800d642:	2b02      	cmp	r3, #2
 800d644:	d81e      	bhi.n	800d684 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	88db      	ldrh	r3, [r3, #6]
 800d64a:	2b02      	cmp	r3, #2
 800d64c:	d004      	beq.n	800d658 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 f892 	bl	800d77a <USBD_CtlError>
      break;
 800d656:	e01a      	b.n	800d68e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2201      	movs	r2, #1
 800d65c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800d664:	2b00      	cmp	r3, #0
 800d666:	d005      	beq.n	800d674 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	68db      	ldr	r3, [r3, #12]
 800d66c:	f043 0202 	orr.w	r2, r3, #2
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	330c      	adds	r3, #12
 800d678:	2202      	movs	r2, #2
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f8e7 	bl	800d850 <USBD_CtlSendData>
    break;
 800d682:	e004      	b.n	800d68e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800d684:	6839      	ldr	r1, [r7, #0]
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f877 	bl	800d77a <USBD_CtlError>
    break;
 800d68c:	bf00      	nop
  }
}
 800d68e:	bf00      	nop
 800d690:	3708      	adds	r7, #8
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}

0800d696 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b082      	sub	sp, #8
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
 800d69e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	885b      	ldrh	r3, [r3, #2]
 800d6a4:	2b01      	cmp	r3, #1
 800d6a6:	d106      	bne.n	800d6b6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 f92b 	bl	800d90c <USBD_CtlSendStatus>
  }

}
 800d6b6:	bf00      	nop
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b082      	sub	sp, #8
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
 800d6c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d6ce:	3b01      	subs	r3, #1
 800d6d0:	2b02      	cmp	r3, #2
 800d6d2:	d80b      	bhi.n	800d6ec <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	885b      	ldrh	r3, [r3, #2]
 800d6d8:	2b01      	cmp	r3, #1
 800d6da:	d10c      	bne.n	800d6f6 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800d6e4:	6878      	ldr	r0, [r7, #4]
 800d6e6:	f000 f911 	bl	800d90c <USBD_CtlSendStatus>
    }
    break;
 800d6ea:	e004      	b.n	800d6f6 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800d6ec:	6839      	ldr	r1, [r7, #0]
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f000 f843 	bl	800d77a <USBD_CtlError>
    break;
 800d6f4:	e000      	b.n	800d6f8 <USBD_ClrFeature+0x3a>
    break;
 800d6f6:	bf00      	nop
  }
}
 800d6f8:	bf00      	nop
 800d6fa:	3708      	adds	r7, #8
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	bd80      	pop	{r7, pc}

0800d700 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d700:	b480      	push	{r7}
 800d702:	b083      	sub	sp, #12
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800d70a:	683b      	ldr	r3, [r7, #0]
 800d70c:	781a      	ldrb	r2, [r3, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	785a      	ldrb	r2, [r3, #1]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	3302      	adds	r3, #2
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	b29a      	uxth	r2, r3
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	3303      	adds	r3, #3
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	b29b      	uxth	r3, r3
 800d72a:	021b      	lsls	r3, r3, #8
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	4413      	add	r3, r2
 800d730:	b29a      	uxth	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	3304      	adds	r3, #4
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	b29a      	uxth	r2, r3
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	3305      	adds	r3, #5
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	b29b      	uxth	r3, r3
 800d746:	021b      	lsls	r3, r3, #8
 800d748:	b29b      	uxth	r3, r3
 800d74a:	4413      	add	r3, r2
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	3306      	adds	r3, #6
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	b29a      	uxth	r2, r3
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	3307      	adds	r3, #7
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	b29b      	uxth	r3, r3
 800d762:	021b      	lsls	r3, r3, #8
 800d764:	b29b      	uxth	r3, r3
 800d766:	4413      	add	r3, r2
 800d768:	b29a      	uxth	r2, r3
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	80da      	strh	r2, [r3, #6]

}
 800d76e:	bf00      	nop
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800d784:	2180      	movs	r1, #128	; 0x80
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 fd5e 	bl	800e248 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800d78c:	2100      	movs	r1, #0
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 fd5a 	bl	800e248 <USBD_LL_StallEP>
}
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d032      	beq.n	800d818 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	f000 f834 	bl	800d820 <USBD_GetLen>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	005b      	lsls	r3, r3, #1
 800d7c0:	b29a      	uxth	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
 800d7c8:	1c5a      	adds	r2, r3, #1
 800d7ca:	75fa      	strb	r2, [r7, #23]
 800d7cc:	461a      	mov	r2, r3
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	7812      	ldrb	r2, [r2, #0]
 800d7d6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800d7d8:	7dfb      	ldrb	r3, [r7, #23]
 800d7da:	1c5a      	adds	r2, r3, #1
 800d7dc:	75fa      	strb	r2, [r7, #23]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	4413      	add	r3, r2
 800d7e4:	2203      	movs	r2, #3
 800d7e6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800d7e8:	e012      	b.n	800d810 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	1c5a      	adds	r2, r3, #1
 800d7ee:	60fa      	str	r2, [r7, #12]
 800d7f0:	7dfa      	ldrb	r2, [r7, #23]
 800d7f2:	1c51      	adds	r1, r2, #1
 800d7f4:	75f9      	strb	r1, [r7, #23]
 800d7f6:	4611      	mov	r1, r2
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	440a      	add	r2, r1
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800d800:	7dfb      	ldrb	r3, [r7, #23]
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	75fa      	strb	r2, [r7, #23]
 800d806:	461a      	mov	r2, r3
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	4413      	add	r3, r2
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	781b      	ldrb	r3, [r3, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d1e8      	bne.n	800d7ea <USBD_GetString+0x4e>
    }
  }
}
 800d818:	bf00      	nop
 800d81a:	3718      	adds	r7, #24
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}

0800d820 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d820:	b480      	push	{r7}
 800d822:	b085      	sub	sp, #20
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800d828:	2300      	movs	r3, #0
 800d82a:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800d82c:	e005      	b.n	800d83a <USBD_GetLen+0x1a>
    {
        len++;
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	3301      	adds	r3, #1
 800d832:	73fb      	strb	r3, [r7, #15]
        buf++;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3301      	adds	r3, #1
 800d838:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1f5      	bne.n	800d82e <USBD_GetLen+0xe>
    }

    return len;
 800d842:	7bfb      	ldrb	r3, [r7, #15]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	4613      	mov	r3, r2
 800d85c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2202      	movs	r2, #2
 800d862:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800d866:	88fa      	ldrh	r2, [r7, #6]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800d86c:	88fa      	ldrh	r2, [r7, #6]
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d872:	88fb      	ldrh	r3, [r7, #6]
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	2100      	movs	r1, #0
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	f000 fd6e 	bl	800e35a <USBD_LL_Transmit>

  return USBD_OK;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3710      	adds	r7, #16
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}

0800d888 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800d888:	b580      	push	{r7, lr}
 800d88a:	b084      	sub	sp, #16
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	60f8      	str	r0, [r7, #12]
 800d890:	60b9      	str	r1, [r7, #8]
 800d892:	4613      	mov	r3, r2
 800d894:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800d896:	88fb      	ldrh	r3, [r7, #6]
 800d898:	68ba      	ldr	r2, [r7, #8]
 800d89a:	2100      	movs	r1, #0
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f000 fd5c 	bl	800e35a <USBD_LL_Transmit>

  return USBD_OK;
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b084      	sub	sp, #16
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	60f8      	str	r0, [r7, #12]
 800d8b4:	60b9      	str	r1, [r7, #8]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2203      	movs	r2, #3
 800d8be:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800d8c2:	88fa      	ldrh	r2, [r7, #6]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800d8ca:	88fa      	ldrh	r2, [r7, #6]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800d8d2:	88fb      	ldrh	r3, [r7, #6]
 800d8d4:	68ba      	ldr	r2, [r7, #8]
 800d8d6:	2100      	movs	r1, #0
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f000 fd61 	bl	800e3a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3710      	adds	r7, #16
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}

0800d8e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	4613      	mov	r3, r2
 800d8f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d8f6:	88fb      	ldrh	r3, [r7, #6]
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f000 fd4f 	bl	800e3a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d902:	2300      	movs	r3, #0
}
 800d904:	4618      	mov	r0, r3
 800d906:	3710      	adds	r7, #16
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd80      	pop	{r7, pc}

0800d90c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2204      	movs	r2, #4
 800d918:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d91c:	2300      	movs	r3, #0
 800d91e:	2200      	movs	r2, #0
 800d920:	2100      	movs	r1, #0
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 fd19 	bl	800e35a <USBD_LL_Transmit>

  return USBD_OK;
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3708      	adds	r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b082      	sub	sp, #8
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2205      	movs	r2, #5
 800d93e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d942:	2300      	movs	r3, #0
 800d944:	2200      	movs	r2, #0
 800d946:	2100      	movs	r1, #0
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 fd29 	bl	800e3a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d958:	b480      	push	{r7}
 800d95a:	b087      	sub	sp, #28
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	60b9      	str	r1, [r7, #8]
 800d962:	4613      	mov	r3, r2
 800d964:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d966:	2301      	movs	r3, #1
 800d968:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d96a:	2300      	movs	r3, #0
 800d96c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d96e:	4b1f      	ldr	r3, [pc, #124]	; (800d9ec <FATFS_LinkDriverEx+0x94>)
 800d970:	7a5b      	ldrb	r3, [r3, #9]
 800d972:	b2db      	uxtb	r3, r3
 800d974:	2b00      	cmp	r3, #0
 800d976:	d131      	bne.n	800d9dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d978:	4b1c      	ldr	r3, [pc, #112]	; (800d9ec <FATFS_LinkDriverEx+0x94>)
 800d97a:	7a5b      	ldrb	r3, [r3, #9]
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	461a      	mov	r2, r3
 800d980:	4b1a      	ldr	r3, [pc, #104]	; (800d9ec <FATFS_LinkDriverEx+0x94>)
 800d982:	2100      	movs	r1, #0
 800d984:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d986:	4b19      	ldr	r3, [pc, #100]	; (800d9ec <FATFS_LinkDriverEx+0x94>)
 800d988:	7a5b      	ldrb	r3, [r3, #9]
 800d98a:	b2db      	uxtb	r3, r3
 800d98c:	4a17      	ldr	r2, [pc, #92]	; (800d9ec <FATFS_LinkDriverEx+0x94>)
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	4413      	add	r3, r2
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d996:	4b15      	ldr	r3, [pc, #84]	; (800d9ec <FATFS_LinkDriverEx+0x94>)
 800d998:	7a5b      	ldrb	r3, [r3, #9]
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	461a      	mov	r2, r3
 800d99e:	4b13      	ldr	r3, [pc, #76]	; (800d9ec <FATFS_LinkDriverEx+0x94>)
 800d9a0:	4413      	add	r3, r2
 800d9a2:	79fa      	ldrb	r2, [r7, #7]
 800d9a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d9a6:	4b11      	ldr	r3, [pc, #68]	; (800d9ec <FATFS_LinkDriverEx+0x94>)
 800d9a8:	7a5b      	ldrb	r3, [r3, #9]
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	1c5a      	adds	r2, r3, #1
 800d9ae:	b2d1      	uxtb	r1, r2
 800d9b0:	4a0e      	ldr	r2, [pc, #56]	; (800d9ec <FATFS_LinkDriverEx+0x94>)
 800d9b2:	7251      	strb	r1, [r2, #9]
 800d9b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d9b6:	7dbb      	ldrb	r3, [r7, #22]
 800d9b8:	3330      	adds	r3, #48	; 0x30
 800d9ba:	b2da      	uxtb	r2, r3
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	223a      	movs	r2, #58	; 0x3a
 800d9c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	3302      	adds	r3, #2
 800d9cc:	222f      	movs	r2, #47	; 0x2f
 800d9ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	3303      	adds	r3, #3
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	371c      	adds	r7, #28
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop
 800d9ec:	2000077c 	.word	0x2000077c

0800d9f0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b082      	sub	sp, #8
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f7ff ffaa 	bl	800d958 <FATFS_LinkDriverEx>
 800da04:	4603      	mov	r3, r0
}
 800da06:	4618      	mov	r0, r3
 800da08:	3708      	adds	r7, #8
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
	...

0800da10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800da14:	2200      	movs	r2, #0
 800da16:	4912      	ldr	r1, [pc, #72]	; (800da60 <MX_USB_DEVICE_Init+0x50>)
 800da18:	4812      	ldr	r0, [pc, #72]	; (800da64 <MX_USB_DEVICE_Init+0x54>)
 800da1a:	f7fe ff43 	bl	800c8a4 <USBD_Init>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800da24:	f7f5 fa9e 	bl	8002f64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800da28:	490f      	ldr	r1, [pc, #60]	; (800da68 <MX_USB_DEVICE_Init+0x58>)
 800da2a:	480e      	ldr	r0, [pc, #56]	; (800da64 <MX_USB_DEVICE_Init+0x54>)
 800da2c:	f7fe ff65 	bl	800c8fa <USBD_RegisterClass>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d001      	beq.n	800da3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800da36:	f7f5 fa95 	bl	8002f64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800da3a:	490c      	ldr	r1, [pc, #48]	; (800da6c <MX_USB_DEVICE_Init+0x5c>)
 800da3c:	4809      	ldr	r0, [pc, #36]	; (800da64 <MX_USB_DEVICE_Init+0x54>)
 800da3e:	f7fe fe93 	bl	800c768 <USBD_CDC_RegisterInterface>
 800da42:	4603      	mov	r3, r0
 800da44:	2b00      	cmp	r3, #0
 800da46:	d001      	beq.n	800da4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800da48:	f7f5 fa8c 	bl	8002f64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800da4c:	4805      	ldr	r0, [pc, #20]	; (800da64 <MX_USB_DEVICE_Init+0x54>)
 800da4e:	f7fe ff6e 	bl	800c92e <USBD_Start>
 800da52:	4603      	mov	r3, r0
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800da58:	f7f5 fa84 	bl	8002f64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800da5c:	bf00      	nop
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	2000012c 	.word	0x2000012c
 800da64:	20001540 	.word	0x20001540
 800da68:	20000018 	.word	0x20000018
 800da6c:	2000011c 	.word	0x2000011c

0800da70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800da74:	2200      	movs	r2, #0
 800da76:	4905      	ldr	r1, [pc, #20]	; (800da8c <CDC_Init_FS+0x1c>)
 800da78:	4805      	ldr	r0, [pc, #20]	; (800da90 <CDC_Init_FS+0x20>)
 800da7a:	f7fe fe8c 	bl	800c796 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800da7e:	4905      	ldr	r1, [pc, #20]	; (800da94 <CDC_Init_FS+0x24>)
 800da80:	4803      	ldr	r0, [pc, #12]	; (800da90 <CDC_Init_FS+0x20>)
 800da82:	f7fe fea2 	bl	800c7ca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800da86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800da88:	4618      	mov	r0, r3
 800da8a:	bd80      	pop	{r7, pc}
 800da8c:	20001fdc 	.word	0x20001fdc
 800da90:	20001540 	.word	0x20001540
 800da94:	200017dc 	.word	0x200017dc

0800da98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800da98:	b480      	push	{r7}
 800da9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800da9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800daa8:	b480      	push	{r7}
 800daaa:	b085      	sub	sp, #20
 800daac:	af00      	add	r7, sp, #0
 800daae:	4603      	mov	r3, r0
 800dab0:	6039      	str	r1, [r7, #0]
 800dab2:	71fb      	strb	r3, [r7, #7]
 800dab4:	4613      	mov	r3, r2
 800dab6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800dab8:	f107 0308 	add.w	r3, r7, #8
 800dabc:	2200      	movs	r2, #0
 800dabe:	601a      	str	r2, [r3, #0]
 800dac0:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800dac4:	79fb      	ldrb	r3, [r7, #7]
 800dac6:	2b23      	cmp	r3, #35	; 0x23
 800dac8:	d87c      	bhi.n	800dbc4 <CDC_Control_FS+0x11c>
 800daca:	a201      	add	r2, pc, #4	; (adr r2, 800dad0 <CDC_Control_FS+0x28>)
 800dacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad0:	0800dbc5 	.word	0x0800dbc5
 800dad4:	0800dbc5 	.word	0x0800dbc5
 800dad8:	0800dbc5 	.word	0x0800dbc5
 800dadc:	0800dbc5 	.word	0x0800dbc5
 800dae0:	0800dbc5 	.word	0x0800dbc5
 800dae4:	0800dbc5 	.word	0x0800dbc5
 800dae8:	0800dbc5 	.word	0x0800dbc5
 800daec:	0800dbc5 	.word	0x0800dbc5
 800daf0:	0800dbc5 	.word	0x0800dbc5
 800daf4:	0800dbc5 	.word	0x0800dbc5
 800daf8:	0800dbc5 	.word	0x0800dbc5
 800dafc:	0800dbc5 	.word	0x0800dbc5
 800db00:	0800dbc5 	.word	0x0800dbc5
 800db04:	0800dbc5 	.word	0x0800dbc5
 800db08:	0800dbc5 	.word	0x0800dbc5
 800db0c:	0800dbc5 	.word	0x0800dbc5
 800db10:	0800dbc5 	.word	0x0800dbc5
 800db14:	0800dbc5 	.word	0x0800dbc5
 800db18:	0800dbc5 	.word	0x0800dbc5
 800db1c:	0800dbc5 	.word	0x0800dbc5
 800db20:	0800dbc5 	.word	0x0800dbc5
 800db24:	0800dbc5 	.word	0x0800dbc5
 800db28:	0800dbc5 	.word	0x0800dbc5
 800db2c:	0800dbc5 	.word	0x0800dbc5
 800db30:	0800dbc5 	.word	0x0800dbc5
 800db34:	0800dbc5 	.word	0x0800dbc5
 800db38:	0800dbc5 	.word	0x0800dbc5
 800db3c:	0800dbc5 	.word	0x0800dbc5
 800db40:	0800dbc5 	.word	0x0800dbc5
 800db44:	0800dbc5 	.word	0x0800dbc5
 800db48:	0800dbc5 	.word	0x0800dbc5
 800db4c:	0800dbc5 	.word	0x0800dbc5
 800db50:	0800db61 	.word	0x0800db61
 800db54:	0800db8d 	.word	0x0800db8d
 800db58:	0800dbc5 	.word	0x0800dbc5
 800db5c:	0800dbc5 	.word	0x0800dbc5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	781b      	ldrb	r3, [r3, #0]
 800db64:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	785b      	ldrb	r3, [r3, #1]
 800db6a:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	789b      	ldrb	r3, [r3, #2]
 800db70:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	78db      	ldrb	r3, [r3, #3]
 800db76:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	791b      	ldrb	r3, [r3, #4]
 800db7c:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	795b      	ldrb	r3, [r3, #5]
 800db82:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	799b      	ldrb	r3, [r3, #6]
 800db88:	73bb      	strb	r3, [r7, #14]
      	break;
 800db8a:	e01c      	b.n	800dbc6 <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800db8c:	7a3a      	ldrb	r2, [r7, #8]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800db92:	683b      	ldr	r3, [r7, #0]
 800db94:	3301      	adds	r3, #1
 800db96:	7a7a      	ldrb	r2, [r7, #9]
 800db98:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	3302      	adds	r3, #2
 800db9e:	7aba      	ldrb	r2, [r7, #10]
 800dba0:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	3303      	adds	r3, #3
 800dba6:	7afa      	ldrb	r2, [r7, #11]
 800dba8:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	3304      	adds	r3, #4
 800dbae:	7b3a      	ldrb	r2, [r7, #12]
 800dbb0:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800dbb2:	683b      	ldr	r3, [r7, #0]
 800dbb4:	3305      	adds	r3, #5
 800dbb6:	7b7a      	ldrb	r2, [r7, #13]
 800dbb8:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	3306      	adds	r3, #6
 800dbbe:	7bba      	ldrb	r2, [r7, #14]
 800dbc0:	701a      	strb	r2, [r3, #0]
      	break;
 800dbc2:	e000      	b.n	800dbc6 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dbc4:	bf00      	nop
  }

  return (USBD_OK);
 800dbc6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3714      	adds	r7, #20
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd2:	4770      	bx	lr

0800dbd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b082      	sub	sp, #8
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dbde:	6879      	ldr	r1, [r7, #4]
 800dbe0:	4805      	ldr	r0, [pc, #20]	; (800dbf8 <CDC_Receive_FS+0x24>)
 800dbe2:	f7fe fdf2 	bl	800c7ca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dbe6:	4804      	ldr	r0, [pc, #16]	; (800dbf8 <CDC_Receive_FS+0x24>)
 800dbe8:	f7fe fe32 	bl	800c850 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dbec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3708      	adds	r7, #8
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	bd80      	pop	{r7, pc}
 800dbf6:	bf00      	nop
 800dbf8:	20001540 	.word	0x20001540

0800dbfc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
 800dc04:	460b      	mov	r3, r1
 800dc06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dc0c:	4b0d      	ldr	r3, [pc, #52]	; (800dc44 <CDC_Transmit_FS+0x48>)
 800dc0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800dc12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d001      	beq.n	800dc22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e00b      	b.n	800dc3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dc22:	887b      	ldrh	r3, [r7, #2]
 800dc24:	461a      	mov	r2, r3
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	4806      	ldr	r0, [pc, #24]	; (800dc44 <CDC_Transmit_FS+0x48>)
 800dc2a:	f7fe fdb4 	bl	800c796 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dc2e:	4805      	ldr	r0, [pc, #20]	; (800dc44 <CDC_Transmit_FS+0x48>)
 800dc30:	f7fe fddf 	bl	800c7f2 <USBD_CDC_TransmitPacket>
 800dc34:	4603      	mov	r3, r0
 800dc36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dc38:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	20001540 	.word	0x20001540

0800dc48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	4603      	mov	r3, r0
 800dc50:	6039      	str	r1, [r7, #0]
 800dc52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	2212      	movs	r2, #18
 800dc58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dc5a:	4b03      	ldr	r3, [pc, #12]	; (800dc68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	370c      	adds	r7, #12
 800dc60:	46bd      	mov	sp, r7
 800dc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc66:	4770      	bx	lr
 800dc68:	20000148 	.word	0x20000148

0800dc6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b083      	sub	sp, #12
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	6039      	str	r1, [r7, #0]
 800dc76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	2204      	movs	r2, #4
 800dc7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dc7e:	4b03      	ldr	r3, [pc, #12]	; (800dc8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr
 800dc8c:	2000015c 	.word	0x2000015c

0800dc90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	4603      	mov	r3, r0
 800dc98:	6039      	str	r1, [r7, #0]
 800dc9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc9c:	79fb      	ldrb	r3, [r7, #7]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d105      	bne.n	800dcae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dca2:	683a      	ldr	r2, [r7, #0]
 800dca4:	4907      	ldr	r1, [pc, #28]	; (800dcc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dca6:	4808      	ldr	r0, [pc, #32]	; (800dcc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dca8:	f7ff fd78 	bl	800d79c <USBD_GetString>
 800dcac:	e004      	b.n	800dcb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dcae:	683a      	ldr	r2, [r7, #0]
 800dcb0:	4904      	ldr	r1, [pc, #16]	; (800dcc4 <USBD_FS_ProductStrDescriptor+0x34>)
 800dcb2:	4805      	ldr	r0, [pc, #20]	; (800dcc8 <USBD_FS_ProductStrDescriptor+0x38>)
 800dcb4:	f7ff fd72 	bl	800d79c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dcb8:	4b02      	ldr	r3, [pc, #8]	; (800dcc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3708      	adds	r7, #8
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	200027dc 	.word	0x200027dc
 800dcc8:	080136bc 	.word	0x080136bc

0800dccc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dccc:	b580      	push	{r7, lr}
 800dcce:	b082      	sub	sp, #8
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	6039      	str	r1, [r7, #0]
 800dcd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dcd8:	683a      	ldr	r2, [r7, #0]
 800dcda:	4904      	ldr	r1, [pc, #16]	; (800dcec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dcdc:	4804      	ldr	r0, [pc, #16]	; (800dcf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dcde:	f7ff fd5d 	bl	800d79c <USBD_GetString>
  return USBD_StrDesc;
 800dce2:	4b02      	ldr	r3, [pc, #8]	; (800dcec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	200027dc 	.word	0x200027dc
 800dcf0:	080136c8 	.word	0x080136c8

0800dcf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	6039      	str	r1, [r7, #0]
 800dcfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dd00:	683b      	ldr	r3, [r7, #0]
 800dd02:	221a      	movs	r2, #26
 800dd04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dd06:	f000 f843 	bl	800dd90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dd0a:	4b02      	ldr	r3, [pc, #8]	; (800dd14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	20000160 	.word	0x20000160

0800dd18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b082      	sub	sp, #8
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	4603      	mov	r3, r0
 800dd20:	6039      	str	r1, [r7, #0]
 800dd22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd24:	79fb      	ldrb	r3, [r7, #7]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d105      	bne.n	800dd36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	4907      	ldr	r1, [pc, #28]	; (800dd4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd2e:	4808      	ldr	r0, [pc, #32]	; (800dd50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd30:	f7ff fd34 	bl	800d79c <USBD_GetString>
 800dd34:	e004      	b.n	800dd40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd36:	683a      	ldr	r2, [r7, #0]
 800dd38:	4904      	ldr	r1, [pc, #16]	; (800dd4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd3a:	4805      	ldr	r0, [pc, #20]	; (800dd50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd3c:	f7ff fd2e 	bl	800d79c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd40:	4b02      	ldr	r3, [pc, #8]	; (800dd4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3708      	adds	r7, #8
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	200027dc 	.word	0x200027dc
 800dd50:	080136dc 	.word	0x080136dc

0800dd54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b082      	sub	sp, #8
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	6039      	str	r1, [r7, #0]
 800dd5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd60:	79fb      	ldrb	r3, [r7, #7]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d105      	bne.n	800dd72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd66:	683a      	ldr	r2, [r7, #0]
 800dd68:	4907      	ldr	r1, [pc, #28]	; (800dd88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd6a:	4808      	ldr	r0, [pc, #32]	; (800dd8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd6c:	f7ff fd16 	bl	800d79c <USBD_GetString>
 800dd70:	e004      	b.n	800dd7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd72:	683a      	ldr	r2, [r7, #0]
 800dd74:	4904      	ldr	r1, [pc, #16]	; (800dd88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd76:	4805      	ldr	r0, [pc, #20]	; (800dd8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd78:	f7ff fd10 	bl	800d79c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd7c:	4b02      	ldr	r3, [pc, #8]	; (800dd88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dd7e:	4618      	mov	r0, r3
 800dd80:	3708      	adds	r7, #8
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop
 800dd88:	200027dc 	.word	0x200027dc
 800dd8c:	080136e8 	.word	0x080136e8

0800dd90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dd96:	4b0f      	ldr	r3, [pc, #60]	; (800ddd4 <Get_SerialNum+0x44>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dd9c:	4b0e      	ldr	r3, [pc, #56]	; (800ddd8 <Get_SerialNum+0x48>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dda2:	4b0e      	ldr	r3, [pc, #56]	; (800dddc <Get_SerialNum+0x4c>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	4413      	add	r3, r2
 800ddae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d009      	beq.n	800ddca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ddb6:	2208      	movs	r2, #8
 800ddb8:	4909      	ldr	r1, [pc, #36]	; (800dde0 <Get_SerialNum+0x50>)
 800ddba:	68f8      	ldr	r0, [r7, #12]
 800ddbc:	f000 f814 	bl	800dde8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ddc0:	2204      	movs	r2, #4
 800ddc2:	4908      	ldr	r1, [pc, #32]	; (800dde4 <Get_SerialNum+0x54>)
 800ddc4:	68b8      	ldr	r0, [r7, #8]
 800ddc6:	f000 f80f 	bl	800dde8 <IntToUnicode>
  }
}
 800ddca:	bf00      	nop
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	1fff7a10 	.word	0x1fff7a10
 800ddd8:	1fff7a14 	.word	0x1fff7a14
 800dddc:	1fff7a18 	.word	0x1fff7a18
 800dde0:	20000162 	.word	0x20000162
 800dde4:	20000172 	.word	0x20000172

0800dde8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dde8:	b480      	push	{r7}
 800ddea:	b087      	sub	sp, #28
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	60b9      	str	r1, [r7, #8]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	75fb      	strb	r3, [r7, #23]
 800ddfe:	e027      	b.n	800de50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	0f1b      	lsrs	r3, r3, #28
 800de04:	2b09      	cmp	r3, #9
 800de06:	d80b      	bhi.n	800de20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	0f1b      	lsrs	r3, r3, #28
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	005b      	lsls	r3, r3, #1
 800de12:	4619      	mov	r1, r3
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	440b      	add	r3, r1
 800de18:	3230      	adds	r2, #48	; 0x30
 800de1a:	b2d2      	uxtb	r2, r2
 800de1c:	701a      	strb	r2, [r3, #0]
 800de1e:	e00a      	b.n	800de36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	0f1b      	lsrs	r3, r3, #28
 800de24:	b2da      	uxtb	r2, r3
 800de26:	7dfb      	ldrb	r3, [r7, #23]
 800de28:	005b      	lsls	r3, r3, #1
 800de2a:	4619      	mov	r1, r3
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	440b      	add	r3, r1
 800de30:	3237      	adds	r2, #55	; 0x37
 800de32:	b2d2      	uxtb	r2, r2
 800de34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	011b      	lsls	r3, r3, #4
 800de3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de3c:	7dfb      	ldrb	r3, [r7, #23]
 800de3e:	005b      	lsls	r3, r3, #1
 800de40:	3301      	adds	r3, #1
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	4413      	add	r3, r2
 800de46:	2200      	movs	r2, #0
 800de48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de4a:	7dfb      	ldrb	r3, [r7, #23]
 800de4c:	3301      	adds	r3, #1
 800de4e:	75fb      	strb	r3, [r7, #23]
 800de50:	7dfa      	ldrb	r2, [r7, #23]
 800de52:	79fb      	ldrb	r3, [r7, #7]
 800de54:	429a      	cmp	r2, r3
 800de56:	d3d3      	bcc.n	800de00 <IntToUnicode+0x18>
  }
}
 800de58:	bf00      	nop
 800de5a:	371c      	adds	r7, #28
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b08a      	sub	sp, #40	; 0x28
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de6c:	f107 0314 	add.w	r3, r7, #20
 800de70:	2200      	movs	r2, #0
 800de72:	601a      	str	r2, [r3, #0]
 800de74:	605a      	str	r2, [r3, #4]
 800de76:	609a      	str	r2, [r3, #8]
 800de78:	60da      	str	r2, [r3, #12]
 800de7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800de84:	d13a      	bne.n	800defc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de86:	2300      	movs	r3, #0
 800de88:	613b      	str	r3, [r7, #16]
 800de8a:	4b1e      	ldr	r3, [pc, #120]	; (800df04 <HAL_PCD_MspInit+0xa0>)
 800de8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de8e:	4a1d      	ldr	r2, [pc, #116]	; (800df04 <HAL_PCD_MspInit+0xa0>)
 800de90:	f043 0301 	orr.w	r3, r3, #1
 800de94:	6313      	str	r3, [r2, #48]	; 0x30
 800de96:	4b1b      	ldr	r3, [pc, #108]	; (800df04 <HAL_PCD_MspInit+0xa0>)
 800de98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de9a:	f003 0301 	and.w	r3, r3, #1
 800de9e:	613b      	str	r3, [r7, #16]
 800dea0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800dea2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800dea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dea8:	2302      	movs	r3, #2
 800deaa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800deac:	2300      	movs	r3, #0
 800deae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800deb0:	2303      	movs	r3, #3
 800deb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800deb4:	230a      	movs	r3, #10
 800deb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800deb8:	f107 0314 	add.w	r3, r7, #20
 800debc:	4619      	mov	r1, r3
 800debe:	4812      	ldr	r0, [pc, #72]	; (800df08 <HAL_PCD_MspInit+0xa4>)
 800dec0:	f7f6 f9b2 	bl	8004228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dec4:	4b0f      	ldr	r3, [pc, #60]	; (800df04 <HAL_PCD_MspInit+0xa0>)
 800dec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dec8:	4a0e      	ldr	r2, [pc, #56]	; (800df04 <HAL_PCD_MspInit+0xa0>)
 800deca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dece:	6353      	str	r3, [r2, #52]	; 0x34
 800ded0:	2300      	movs	r3, #0
 800ded2:	60fb      	str	r3, [r7, #12]
 800ded4:	4b0b      	ldr	r3, [pc, #44]	; (800df04 <HAL_PCD_MspInit+0xa0>)
 800ded6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ded8:	4a0a      	ldr	r2, [pc, #40]	; (800df04 <HAL_PCD_MspInit+0xa0>)
 800deda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dede:	6453      	str	r3, [r2, #68]	; 0x44
 800dee0:	4b08      	ldr	r3, [pc, #32]	; (800df04 <HAL_PCD_MspInit+0xa0>)
 800dee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dee8:	60fb      	str	r3, [r7, #12]
 800deea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800deec:	2200      	movs	r2, #0
 800deee:	2100      	movs	r1, #0
 800def0:	2043      	movs	r0, #67	; 0x43
 800def2:	f7f5 fdc6 	bl	8003a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800def6:	2043      	movs	r0, #67	; 0x43
 800def8:	f7f5 fddf 	bl	8003aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800defc:	bf00      	nop
 800defe:	3728      	adds	r7, #40	; 0x28
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	40023800 	.word	0x40023800
 800df08:	40020000 	.word	0x40020000

0800df0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b082      	sub	sp, #8
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800df20:	4619      	mov	r1, r3
 800df22:	4610      	mov	r0, r2
 800df24:	f7fe fd4c 	bl	800c9c0 <USBD_LL_SetupStage>
}
 800df28:	bf00      	nop
 800df2a:	3708      	adds	r7, #8
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}

0800df30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b082      	sub	sp, #8
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
 800df38:	460b      	mov	r3, r1
 800df3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800df42:	78fa      	ldrb	r2, [r7, #3]
 800df44:	6879      	ldr	r1, [r7, #4]
 800df46:	4613      	mov	r3, r2
 800df48:	00db      	lsls	r3, r3, #3
 800df4a:	1a9b      	subs	r3, r3, r2
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	440b      	add	r3, r1
 800df50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800df54:	681a      	ldr	r2, [r3, #0]
 800df56:	78fb      	ldrb	r3, [r7, #3]
 800df58:	4619      	mov	r1, r3
 800df5a:	f7fe fd7c 	bl	800ca56 <USBD_LL_DataOutStage>
}
 800df5e:	bf00      	nop
 800df60:	3708      	adds	r7, #8
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b082      	sub	sp, #8
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	460b      	mov	r3, r1
 800df70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800df78:	78fa      	ldrb	r2, [r7, #3]
 800df7a:	6879      	ldr	r1, [r7, #4]
 800df7c:	4613      	mov	r3, r2
 800df7e:	00db      	lsls	r3, r3, #3
 800df80:	1a9b      	subs	r3, r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	440b      	add	r3, r1
 800df86:	3348      	adds	r3, #72	; 0x48
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	78fb      	ldrb	r3, [r7, #3]
 800df8c:	4619      	mov	r1, r3
 800df8e:	f7fe fdd3 	bl	800cb38 <USBD_LL_DataInStage>
}
 800df92:	bf00      	nop
 800df94:	3708      	adds	r7, #8
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}

0800df9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df9a:	b580      	push	{r7, lr}
 800df9c:	b082      	sub	sp, #8
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fe fee1 	bl	800cd70 <USBD_LL_SOF>
}
 800dfae:	bf00      	nop
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800dfb6:	b580      	push	{r7, lr}
 800dfb8:	b084      	sub	sp, #16
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	68db      	ldr	r3, [r3, #12]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d102      	bne.n	800dfd0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	73fb      	strb	r3, [r7, #15]
 800dfce:	e008      	b.n	800dfe2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	d102      	bne.n	800dfde <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dfd8:	2301      	movs	r3, #1
 800dfda:	73fb      	strb	r3, [r7, #15]
 800dfdc:	e001      	b.n	800dfe2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dfde:	f7f4 ffc1 	bl	8002f64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dfe8:	7bfa      	ldrb	r2, [r7, #15]
 800dfea:	4611      	mov	r1, r2
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fe fe89 	bl	800cd04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe fe42 	bl	800cc82 <USBD_LL_Reset>
}
 800dffe:	bf00      	nop
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
	...

0800e008 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e016:	4618      	mov	r0, r3
 800e018:	f7fe fe84 	bl	800cd24 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	6812      	ldr	r2, [r2, #0]
 800e02a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e02e:	f043 0301 	orr.w	r3, r3, #1
 800e032:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6a1b      	ldr	r3, [r3, #32]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d005      	beq.n	800e048 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e03c:	4b04      	ldr	r3, [pc, #16]	; (800e050 <HAL_PCD_SuspendCallback+0x48>)
 800e03e:	691b      	ldr	r3, [r3, #16]
 800e040:	4a03      	ldr	r2, [pc, #12]	; (800e050 <HAL_PCD_SuspendCallback+0x48>)
 800e042:	f043 0306 	orr.w	r3, r3, #6
 800e046:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e048:	bf00      	nop
 800e04a:	3708      	adds	r7, #8
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	e000ed00 	.word	0xe000ed00

0800e054 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e062:	4618      	mov	r0, r3
 800e064:	f7fe fe73 	bl	800cd4e <USBD_LL_Resume>
}
 800e068:	bf00      	nop
 800e06a:	3708      	adds	r7, #8
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
 800e078:	460b      	mov	r3, r1
 800e07a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e082:	78fa      	ldrb	r2, [r7, #3]
 800e084:	4611      	mov	r1, r2
 800e086:	4618      	mov	r0, r3
 800e088:	f7fe fe99 	bl	800cdbe <USBD_LL_IsoOUTIncomplete>
}
 800e08c:	bf00      	nop
 800e08e:	3708      	adds	r7, #8
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b082      	sub	sp, #8
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	460b      	mov	r3, r1
 800e09e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0a6:	78fa      	ldrb	r2, [r7, #3]
 800e0a8:	4611      	mov	r1, r2
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7fe fe7a 	bl	800cda4 <USBD_LL_IsoINIncomplete>
}
 800e0b0:	bf00      	nop
 800e0b2:	3708      	adds	r7, #8
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}

0800e0b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fe fe86 	bl	800cdd8 <USBD_LL_DevConnected>
}
 800e0cc:	bf00      	nop
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b082      	sub	sp, #8
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fe fe83 	bl	800cdee <USBD_LL_DevDisconnected>
}
 800e0e8:	bf00      	nop
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d13c      	bne.n	800e17a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e100:	4a20      	ldr	r2, [pc, #128]	; (800e184 <USBD_LL_Init+0x94>)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	4a1e      	ldr	r2, [pc, #120]	; (800e184 <USBD_LL_Init+0x94>)
 800e10c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e110:	4b1c      	ldr	r3, [pc, #112]	; (800e184 <USBD_LL_Init+0x94>)
 800e112:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e116:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e118:	4b1a      	ldr	r3, [pc, #104]	; (800e184 <USBD_LL_Init+0x94>)
 800e11a:	2204      	movs	r2, #4
 800e11c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e11e:	4b19      	ldr	r3, [pc, #100]	; (800e184 <USBD_LL_Init+0x94>)
 800e120:	2202      	movs	r2, #2
 800e122:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e124:	4b17      	ldr	r3, [pc, #92]	; (800e184 <USBD_LL_Init+0x94>)
 800e126:	2200      	movs	r2, #0
 800e128:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e12a:	4b16      	ldr	r3, [pc, #88]	; (800e184 <USBD_LL_Init+0x94>)
 800e12c:	2202      	movs	r2, #2
 800e12e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e130:	4b14      	ldr	r3, [pc, #80]	; (800e184 <USBD_LL_Init+0x94>)
 800e132:	2200      	movs	r2, #0
 800e134:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e136:	4b13      	ldr	r3, [pc, #76]	; (800e184 <USBD_LL_Init+0x94>)
 800e138:	2200      	movs	r2, #0
 800e13a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e13c:	4b11      	ldr	r3, [pc, #68]	; (800e184 <USBD_LL_Init+0x94>)
 800e13e:	2200      	movs	r2, #0
 800e140:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e142:	4b10      	ldr	r3, [pc, #64]	; (800e184 <USBD_LL_Init+0x94>)
 800e144:	2200      	movs	r2, #0
 800e146:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e148:	4b0e      	ldr	r3, [pc, #56]	; (800e184 <USBD_LL_Init+0x94>)
 800e14a:	2200      	movs	r2, #0
 800e14c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e14e:	480d      	ldr	r0, [pc, #52]	; (800e184 <USBD_LL_Init+0x94>)
 800e150:	f7f7 fa17 	bl	8005582 <HAL_PCD_Init>
 800e154:	4603      	mov	r3, r0
 800e156:	2b00      	cmp	r3, #0
 800e158:	d001      	beq.n	800e15e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e15a:	f7f4 ff03 	bl	8002f64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e15e:	2180      	movs	r1, #128	; 0x80
 800e160:	4808      	ldr	r0, [pc, #32]	; (800e184 <USBD_LL_Init+0x94>)
 800e162:	f7f8 fb7c 	bl	800685e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e166:	2240      	movs	r2, #64	; 0x40
 800e168:	2100      	movs	r1, #0
 800e16a:	4806      	ldr	r0, [pc, #24]	; (800e184 <USBD_LL_Init+0x94>)
 800e16c:	f7f8 fb30 	bl	80067d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e170:	2280      	movs	r2, #128	; 0x80
 800e172:	2101      	movs	r1, #1
 800e174:	4803      	ldr	r0, [pc, #12]	; (800e184 <USBD_LL_Init+0x94>)
 800e176:	f7f8 fb2b 	bl	80067d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e17a:	2300      	movs	r3, #0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	200029dc 	.word	0x200029dc

0800e188 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e190:	2300      	movs	r3, #0
 800e192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7f7 fb0c 	bl	80057bc <HAL_PCD_Start>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800e1a8:	7bfb      	ldrb	r3, [r7, #15]
 800e1aa:	4618      	mov	r0, r3
 800e1ac:	f000 f92e 	bl	800e40c <USBD_Get_USB_Status>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	3710      	adds	r7, #16
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	bd80      	pop	{r7, pc}

0800e1be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e1be:	b580      	push	{r7, lr}
 800e1c0:	b084      	sub	sp, #16
 800e1c2:	af00      	add	r7, sp, #0
 800e1c4:	6078      	str	r0, [r7, #4]
 800e1c6:	4608      	mov	r0, r1
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	70fb      	strb	r3, [r7, #3]
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	70bb      	strb	r3, [r7, #2]
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e1e6:	78bb      	ldrb	r3, [r7, #2]
 800e1e8:	883a      	ldrh	r2, [r7, #0]
 800e1ea:	78f9      	ldrb	r1, [r7, #3]
 800e1ec:	f7f7 fee1 	bl	8005fb2 <HAL_PCD_EP_Open>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1f4:	7bfb      	ldrb	r3, [r7, #15]
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	f000 f908 	bl	800e40c <USBD_Get_USB_Status>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800e200:	7bbb      	ldrb	r3, [r7, #14]
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}

0800e20a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e20a:	b580      	push	{r7, lr}
 800e20c:	b084      	sub	sp, #16
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
 800e212:	460b      	mov	r3, r1
 800e214:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e216:	2300      	movs	r3, #0
 800e218:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e21a:	2300      	movs	r3, #0
 800e21c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e224:	78fa      	ldrb	r2, [r7, #3]
 800e226:	4611      	mov	r1, r2
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f7 ff2a 	bl	8006082 <HAL_PCD_EP_Close>
 800e22e:	4603      	mov	r3, r0
 800e230:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800e232:	7bfb      	ldrb	r3, [r7, #15]
 800e234:	4618      	mov	r0, r3
 800e236:	f000 f8e9 	bl	800e40c <USBD_Get_USB_Status>
 800e23a:	4603      	mov	r3, r0
 800e23c:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800e23e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3710      	adds	r7, #16
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}

0800e248 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	460b      	mov	r3, r1
 800e252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e254:	2300      	movs	r3, #0
 800e256:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e258:	2300      	movs	r3, #0
 800e25a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e262:	78fa      	ldrb	r2, [r7, #3]
 800e264:	4611      	mov	r1, r2
 800e266:	4618      	mov	r0, r3
 800e268:	f7f8 f802 	bl	8006270 <HAL_PCD_EP_SetStall>
 800e26c:	4603      	mov	r3, r0
 800e26e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e270:	7bfb      	ldrb	r3, [r7, #15]
 800e272:	4618      	mov	r0, r3
 800e274:	f000 f8ca 	bl	800e40c <USBD_Get_USB_Status>
 800e278:	4603      	mov	r3, r0
 800e27a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e27c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b084      	sub	sp, #16
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	460b      	mov	r3, r1
 800e290:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e292:	2300      	movs	r3, #0
 800e294:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e296:	2300      	movs	r3, #0
 800e298:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e2a0:	78fa      	ldrb	r2, [r7, #3]
 800e2a2:	4611      	mov	r1, r2
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7f8 f847 	bl	8006338 <HAL_PCD_EP_ClrStall>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800e2ae:	7bfb      	ldrb	r3, [r7, #15]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f000 f8ab 	bl	800e40c <USBD_Get_USB_Status>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800e2ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3710      	adds	r7, #16
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}

0800e2c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b085      	sub	sp, #20
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e2d6:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800e2d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	da0b      	bge.n	800e2f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800e2e0:	78fb      	ldrb	r3, [r7, #3]
 800e2e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2e6:	68f9      	ldr	r1, [r7, #12]
 800e2e8:	4613      	mov	r3, r2
 800e2ea:	00db      	lsls	r3, r3, #3
 800e2ec:	1a9b      	subs	r3, r3, r2
 800e2ee:	009b      	lsls	r3, r3, #2
 800e2f0:	440b      	add	r3, r1
 800e2f2:	333e      	adds	r3, #62	; 0x3e
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	e00b      	b.n	800e310 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800e2f8:	78fb      	ldrb	r3, [r7, #3]
 800e2fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2fe:	68f9      	ldr	r1, [r7, #12]
 800e300:	4613      	mov	r3, r2
 800e302:	00db      	lsls	r3, r3, #3
 800e304:	1a9b      	subs	r3, r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	440b      	add	r3, r1
 800e30a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e30e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e310:	4618      	mov	r0, r3
 800e312:	3714      	adds	r7, #20
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	460b      	mov	r3, r1
 800e326:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e328:	2300      	movs	r3, #0
 800e32a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e32c:	2300      	movs	r3, #0
 800e32e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e336:	78fa      	ldrb	r2, [r7, #3]
 800e338:	4611      	mov	r1, r2
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7f7 fe14 	bl	8005f68 <HAL_PCD_SetAddress>
 800e340:	4603      	mov	r3, r0
 800e342:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800e344:	7bfb      	ldrb	r3, [r7, #15]
 800e346:	4618      	mov	r0, r3
 800e348:	f000 f860 	bl	800e40c <USBD_Get_USB_Status>
 800e34c:	4603      	mov	r3, r0
 800e34e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800e350:	7bbb      	ldrb	r3, [r7, #14]
}
 800e352:	4618      	mov	r0, r3
 800e354:	3710      	adds	r7, #16
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b086      	sub	sp, #24
 800e35e:	af00      	add	r7, sp, #0
 800e360:	60f8      	str	r0, [r7, #12]
 800e362:	607a      	str	r2, [r7, #4]
 800e364:	461a      	mov	r2, r3
 800e366:	460b      	mov	r3, r1
 800e368:	72fb      	strb	r3, [r7, #11]
 800e36a:	4613      	mov	r3, r2
 800e36c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e36e:	2300      	movs	r3, #0
 800e370:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e372:	2300      	movs	r3, #0
 800e374:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e37c:	893b      	ldrh	r3, [r7, #8]
 800e37e:	7af9      	ldrb	r1, [r7, #11]
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	f7f7 ff2b 	bl	80061dc <HAL_PCD_EP_Transmit>
 800e386:	4603      	mov	r3, r0
 800e388:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800e38a:	7dfb      	ldrb	r3, [r7, #23]
 800e38c:	4618      	mov	r0, r3
 800e38e:	f000 f83d 	bl	800e40c <USBD_Get_USB_Status>
 800e392:	4603      	mov	r3, r0
 800e394:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800e396:	7dbb      	ldrb	r3, [r7, #22]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b086      	sub	sp, #24
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	60f8      	str	r0, [r7, #12]
 800e3a8:	607a      	str	r2, [r7, #4]
 800e3aa:	461a      	mov	r2, r3
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	72fb      	strb	r3, [r7, #11]
 800e3b0:	4613      	mov	r3, r2
 800e3b2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800e3c2:	893b      	ldrh	r3, [r7, #8]
 800e3c4:	7af9      	ldrb	r1, [r7, #11]
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	f7f7 fea5 	bl	8006116 <HAL_PCD_EP_Receive>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800e3d0:	7dfb      	ldrb	r3, [r7, #23]
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f000 f81a 	bl	800e40c <USBD_Get_USB_Status>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800e3dc:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3718      	adds	r7, #24
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3e6:	b580      	push	{r7, lr}
 800e3e8:	b082      	sub	sp, #8
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800e3f8:	78fa      	ldrb	r2, [r7, #3]
 800e3fa:	4611      	mov	r1, r2
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f7f7 fed5 	bl	80061ac <HAL_PCD_EP_GetRxCount>
 800e402:	4603      	mov	r3, r0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	4603      	mov	r3, r0
 800e414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e416:	2300      	movs	r3, #0
 800e418:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	d817      	bhi.n	800e450 <USBD_Get_USB_Status+0x44>
 800e420:	a201      	add	r2, pc, #4	; (adr r2, 800e428 <USBD_Get_USB_Status+0x1c>)
 800e422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e426:	bf00      	nop
 800e428:	0800e439 	.word	0x0800e439
 800e42c:	0800e43f 	.word	0x0800e43f
 800e430:	0800e445 	.word	0x0800e445
 800e434:	0800e44b 	.word	0x0800e44b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e438:	2300      	movs	r3, #0
 800e43a:	73fb      	strb	r3, [r7, #15]
    break;
 800e43c:	e00b      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e43e:	2302      	movs	r3, #2
 800e440:	73fb      	strb	r3, [r7, #15]
    break;
 800e442:	e008      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e444:	2301      	movs	r3, #1
 800e446:	73fb      	strb	r3, [r7, #15]
    break;
 800e448:	e005      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e44a:	2302      	movs	r3, #2
 800e44c:	73fb      	strb	r3, [r7, #15]
    break;
 800e44e:	e002      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e450:	2302      	movs	r3, #2
 800e452:	73fb      	strb	r3, [r7, #15]
    break;
 800e454:	bf00      	nop
  }
  return usb_status;
 800e456:	7bfb      	ldrb	r3, [r7, #15]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <__libc_init_array>:
 800e464:	b570      	push	{r4, r5, r6, lr}
 800e466:	4e0d      	ldr	r6, [pc, #52]	; (800e49c <__libc_init_array+0x38>)
 800e468:	4c0d      	ldr	r4, [pc, #52]	; (800e4a0 <__libc_init_array+0x3c>)
 800e46a:	1ba4      	subs	r4, r4, r6
 800e46c:	10a4      	asrs	r4, r4, #2
 800e46e:	2500      	movs	r5, #0
 800e470:	42a5      	cmp	r5, r4
 800e472:	d109      	bne.n	800e488 <__libc_init_array+0x24>
 800e474:	4e0b      	ldr	r6, [pc, #44]	; (800e4a4 <__libc_init_array+0x40>)
 800e476:	4c0c      	ldr	r4, [pc, #48]	; (800e4a8 <__libc_init_array+0x44>)
 800e478:	f004 fdcc 	bl	8013014 <_init>
 800e47c:	1ba4      	subs	r4, r4, r6
 800e47e:	10a4      	asrs	r4, r4, #2
 800e480:	2500      	movs	r5, #0
 800e482:	42a5      	cmp	r5, r4
 800e484:	d105      	bne.n	800e492 <__libc_init_array+0x2e>
 800e486:	bd70      	pop	{r4, r5, r6, pc}
 800e488:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e48c:	4798      	blx	r3
 800e48e:	3501      	adds	r5, #1
 800e490:	e7ee      	b.n	800e470 <__libc_init_array+0xc>
 800e492:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e496:	4798      	blx	r3
 800e498:	3501      	adds	r5, #1
 800e49a:	e7f2      	b.n	800e482 <__libc_init_array+0x1e>
 800e49c:	08013a30 	.word	0x08013a30
 800e4a0:	08013a30 	.word	0x08013a30
 800e4a4:	08013a30 	.word	0x08013a30
 800e4a8:	08013a34 	.word	0x08013a34

0800e4ac <malloc>:
 800e4ac:	4b02      	ldr	r3, [pc, #8]	; (800e4b8 <malloc+0xc>)
 800e4ae:	4601      	mov	r1, r0
 800e4b0:	6818      	ldr	r0, [r3, #0]
 800e4b2:	f000 b86d 	b.w	800e590 <_malloc_r>
 800e4b6:	bf00      	nop
 800e4b8:	2000017c 	.word	0x2000017c

0800e4bc <free>:
 800e4bc:	4b02      	ldr	r3, [pc, #8]	; (800e4c8 <free+0xc>)
 800e4be:	4601      	mov	r1, r0
 800e4c0:	6818      	ldr	r0, [r3, #0]
 800e4c2:	f000 b817 	b.w	800e4f4 <_free_r>
 800e4c6:	bf00      	nop
 800e4c8:	2000017c 	.word	0x2000017c

0800e4cc <memcpy>:
 800e4cc:	b510      	push	{r4, lr}
 800e4ce:	1e43      	subs	r3, r0, #1
 800e4d0:	440a      	add	r2, r1
 800e4d2:	4291      	cmp	r1, r2
 800e4d4:	d100      	bne.n	800e4d8 <memcpy+0xc>
 800e4d6:	bd10      	pop	{r4, pc}
 800e4d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4e0:	e7f7      	b.n	800e4d2 <memcpy+0x6>

0800e4e2 <memset>:
 800e4e2:	4402      	add	r2, r0
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d100      	bne.n	800e4ec <memset+0xa>
 800e4ea:	4770      	bx	lr
 800e4ec:	f803 1b01 	strb.w	r1, [r3], #1
 800e4f0:	e7f9      	b.n	800e4e6 <memset+0x4>
	...

0800e4f4 <_free_r>:
 800e4f4:	b538      	push	{r3, r4, r5, lr}
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	2900      	cmp	r1, #0
 800e4fa:	d045      	beq.n	800e588 <_free_r+0x94>
 800e4fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e500:	1f0c      	subs	r4, r1, #4
 800e502:	2b00      	cmp	r3, #0
 800e504:	bfb8      	it	lt
 800e506:	18e4      	addlt	r4, r4, r3
 800e508:	f002 ff62 	bl	80113d0 <__malloc_lock>
 800e50c:	4a1f      	ldr	r2, [pc, #124]	; (800e58c <_free_r+0x98>)
 800e50e:	6813      	ldr	r3, [r2, #0]
 800e510:	4610      	mov	r0, r2
 800e512:	b933      	cbnz	r3, 800e522 <_free_r+0x2e>
 800e514:	6063      	str	r3, [r4, #4]
 800e516:	6014      	str	r4, [r2, #0]
 800e518:	4628      	mov	r0, r5
 800e51a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e51e:	f002 bf58 	b.w	80113d2 <__malloc_unlock>
 800e522:	42a3      	cmp	r3, r4
 800e524:	d90c      	bls.n	800e540 <_free_r+0x4c>
 800e526:	6821      	ldr	r1, [r4, #0]
 800e528:	1862      	adds	r2, r4, r1
 800e52a:	4293      	cmp	r3, r2
 800e52c:	bf04      	itt	eq
 800e52e:	681a      	ldreq	r2, [r3, #0]
 800e530:	685b      	ldreq	r3, [r3, #4]
 800e532:	6063      	str	r3, [r4, #4]
 800e534:	bf04      	itt	eq
 800e536:	1852      	addeq	r2, r2, r1
 800e538:	6022      	streq	r2, [r4, #0]
 800e53a:	6004      	str	r4, [r0, #0]
 800e53c:	e7ec      	b.n	800e518 <_free_r+0x24>
 800e53e:	4613      	mov	r3, r2
 800e540:	685a      	ldr	r2, [r3, #4]
 800e542:	b10a      	cbz	r2, 800e548 <_free_r+0x54>
 800e544:	42a2      	cmp	r2, r4
 800e546:	d9fa      	bls.n	800e53e <_free_r+0x4a>
 800e548:	6819      	ldr	r1, [r3, #0]
 800e54a:	1858      	adds	r0, r3, r1
 800e54c:	42a0      	cmp	r0, r4
 800e54e:	d10b      	bne.n	800e568 <_free_r+0x74>
 800e550:	6820      	ldr	r0, [r4, #0]
 800e552:	4401      	add	r1, r0
 800e554:	1858      	adds	r0, r3, r1
 800e556:	4282      	cmp	r2, r0
 800e558:	6019      	str	r1, [r3, #0]
 800e55a:	d1dd      	bne.n	800e518 <_free_r+0x24>
 800e55c:	6810      	ldr	r0, [r2, #0]
 800e55e:	6852      	ldr	r2, [r2, #4]
 800e560:	605a      	str	r2, [r3, #4]
 800e562:	4401      	add	r1, r0
 800e564:	6019      	str	r1, [r3, #0]
 800e566:	e7d7      	b.n	800e518 <_free_r+0x24>
 800e568:	d902      	bls.n	800e570 <_free_r+0x7c>
 800e56a:	230c      	movs	r3, #12
 800e56c:	602b      	str	r3, [r5, #0]
 800e56e:	e7d3      	b.n	800e518 <_free_r+0x24>
 800e570:	6820      	ldr	r0, [r4, #0]
 800e572:	1821      	adds	r1, r4, r0
 800e574:	428a      	cmp	r2, r1
 800e576:	bf04      	itt	eq
 800e578:	6811      	ldreq	r1, [r2, #0]
 800e57a:	6852      	ldreq	r2, [r2, #4]
 800e57c:	6062      	str	r2, [r4, #4]
 800e57e:	bf04      	itt	eq
 800e580:	1809      	addeq	r1, r1, r0
 800e582:	6021      	streq	r1, [r4, #0]
 800e584:	605c      	str	r4, [r3, #4]
 800e586:	e7c7      	b.n	800e518 <_free_r+0x24>
 800e588:	bd38      	pop	{r3, r4, r5, pc}
 800e58a:	bf00      	nop
 800e58c:	20000788 	.word	0x20000788

0800e590 <_malloc_r>:
 800e590:	b570      	push	{r4, r5, r6, lr}
 800e592:	1ccd      	adds	r5, r1, #3
 800e594:	f025 0503 	bic.w	r5, r5, #3
 800e598:	3508      	adds	r5, #8
 800e59a:	2d0c      	cmp	r5, #12
 800e59c:	bf38      	it	cc
 800e59e:	250c      	movcc	r5, #12
 800e5a0:	2d00      	cmp	r5, #0
 800e5a2:	4606      	mov	r6, r0
 800e5a4:	db01      	blt.n	800e5aa <_malloc_r+0x1a>
 800e5a6:	42a9      	cmp	r1, r5
 800e5a8:	d903      	bls.n	800e5b2 <_malloc_r+0x22>
 800e5aa:	230c      	movs	r3, #12
 800e5ac:	6033      	str	r3, [r6, #0]
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	bd70      	pop	{r4, r5, r6, pc}
 800e5b2:	f002 ff0d 	bl	80113d0 <__malloc_lock>
 800e5b6:	4a21      	ldr	r2, [pc, #132]	; (800e63c <_malloc_r+0xac>)
 800e5b8:	6814      	ldr	r4, [r2, #0]
 800e5ba:	4621      	mov	r1, r4
 800e5bc:	b991      	cbnz	r1, 800e5e4 <_malloc_r+0x54>
 800e5be:	4c20      	ldr	r4, [pc, #128]	; (800e640 <_malloc_r+0xb0>)
 800e5c0:	6823      	ldr	r3, [r4, #0]
 800e5c2:	b91b      	cbnz	r3, 800e5cc <_malloc_r+0x3c>
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	f000 fe7b 	bl	800f2c0 <_sbrk_r>
 800e5ca:	6020      	str	r0, [r4, #0]
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	f000 fe76 	bl	800f2c0 <_sbrk_r>
 800e5d4:	1c43      	adds	r3, r0, #1
 800e5d6:	d124      	bne.n	800e622 <_malloc_r+0x92>
 800e5d8:	230c      	movs	r3, #12
 800e5da:	6033      	str	r3, [r6, #0]
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f002 fef8 	bl	80113d2 <__malloc_unlock>
 800e5e2:	e7e4      	b.n	800e5ae <_malloc_r+0x1e>
 800e5e4:	680b      	ldr	r3, [r1, #0]
 800e5e6:	1b5b      	subs	r3, r3, r5
 800e5e8:	d418      	bmi.n	800e61c <_malloc_r+0x8c>
 800e5ea:	2b0b      	cmp	r3, #11
 800e5ec:	d90f      	bls.n	800e60e <_malloc_r+0x7e>
 800e5ee:	600b      	str	r3, [r1, #0]
 800e5f0:	50cd      	str	r5, [r1, r3]
 800e5f2:	18cc      	adds	r4, r1, r3
 800e5f4:	4630      	mov	r0, r6
 800e5f6:	f002 feec 	bl	80113d2 <__malloc_unlock>
 800e5fa:	f104 000b 	add.w	r0, r4, #11
 800e5fe:	1d23      	adds	r3, r4, #4
 800e600:	f020 0007 	bic.w	r0, r0, #7
 800e604:	1ac3      	subs	r3, r0, r3
 800e606:	d0d3      	beq.n	800e5b0 <_malloc_r+0x20>
 800e608:	425a      	negs	r2, r3
 800e60a:	50e2      	str	r2, [r4, r3]
 800e60c:	e7d0      	b.n	800e5b0 <_malloc_r+0x20>
 800e60e:	428c      	cmp	r4, r1
 800e610:	684b      	ldr	r3, [r1, #4]
 800e612:	bf16      	itet	ne
 800e614:	6063      	strne	r3, [r4, #4]
 800e616:	6013      	streq	r3, [r2, #0]
 800e618:	460c      	movne	r4, r1
 800e61a:	e7eb      	b.n	800e5f4 <_malloc_r+0x64>
 800e61c:	460c      	mov	r4, r1
 800e61e:	6849      	ldr	r1, [r1, #4]
 800e620:	e7cc      	b.n	800e5bc <_malloc_r+0x2c>
 800e622:	1cc4      	adds	r4, r0, #3
 800e624:	f024 0403 	bic.w	r4, r4, #3
 800e628:	42a0      	cmp	r0, r4
 800e62a:	d005      	beq.n	800e638 <_malloc_r+0xa8>
 800e62c:	1a21      	subs	r1, r4, r0
 800e62e:	4630      	mov	r0, r6
 800e630:	f000 fe46 	bl	800f2c0 <_sbrk_r>
 800e634:	3001      	adds	r0, #1
 800e636:	d0cf      	beq.n	800e5d8 <_malloc_r+0x48>
 800e638:	6025      	str	r5, [r4, #0]
 800e63a:	e7db      	b.n	800e5f4 <_malloc_r+0x64>
 800e63c:	20000788 	.word	0x20000788
 800e640:	2000078c 	.word	0x2000078c

0800e644 <__cvt>:
 800e644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e648:	ec55 4b10 	vmov	r4, r5, d0
 800e64c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e64e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e652:	2d00      	cmp	r5, #0
 800e654:	460e      	mov	r6, r1
 800e656:	4691      	mov	r9, r2
 800e658:	4619      	mov	r1, r3
 800e65a:	bfb8      	it	lt
 800e65c:	4622      	movlt	r2, r4
 800e65e:	462b      	mov	r3, r5
 800e660:	f027 0720 	bic.w	r7, r7, #32
 800e664:	bfbb      	ittet	lt
 800e666:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e66a:	461d      	movlt	r5, r3
 800e66c:	2300      	movge	r3, #0
 800e66e:	232d      	movlt	r3, #45	; 0x2d
 800e670:	bfb8      	it	lt
 800e672:	4614      	movlt	r4, r2
 800e674:	2f46      	cmp	r7, #70	; 0x46
 800e676:	700b      	strb	r3, [r1, #0]
 800e678:	d004      	beq.n	800e684 <__cvt+0x40>
 800e67a:	2f45      	cmp	r7, #69	; 0x45
 800e67c:	d100      	bne.n	800e680 <__cvt+0x3c>
 800e67e:	3601      	adds	r6, #1
 800e680:	2102      	movs	r1, #2
 800e682:	e000      	b.n	800e686 <__cvt+0x42>
 800e684:	2103      	movs	r1, #3
 800e686:	ab03      	add	r3, sp, #12
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	ab02      	add	r3, sp, #8
 800e68c:	9300      	str	r3, [sp, #0]
 800e68e:	4632      	mov	r2, r6
 800e690:	4653      	mov	r3, sl
 800e692:	ec45 4b10 	vmov	d0, r4, r5
 800e696:	f001 fd97 	bl	80101c8 <_dtoa_r>
 800e69a:	2f47      	cmp	r7, #71	; 0x47
 800e69c:	4680      	mov	r8, r0
 800e69e:	d102      	bne.n	800e6a6 <__cvt+0x62>
 800e6a0:	f019 0f01 	tst.w	r9, #1
 800e6a4:	d026      	beq.n	800e6f4 <__cvt+0xb0>
 800e6a6:	2f46      	cmp	r7, #70	; 0x46
 800e6a8:	eb08 0906 	add.w	r9, r8, r6
 800e6ac:	d111      	bne.n	800e6d2 <__cvt+0x8e>
 800e6ae:	f898 3000 	ldrb.w	r3, [r8]
 800e6b2:	2b30      	cmp	r3, #48	; 0x30
 800e6b4:	d10a      	bne.n	800e6cc <__cvt+0x88>
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	4620      	mov	r0, r4
 800e6bc:	4629      	mov	r1, r5
 800e6be:	f7f2 fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6c2:	b918      	cbnz	r0, 800e6cc <__cvt+0x88>
 800e6c4:	f1c6 0601 	rsb	r6, r6, #1
 800e6c8:	f8ca 6000 	str.w	r6, [sl]
 800e6cc:	f8da 3000 	ldr.w	r3, [sl]
 800e6d0:	4499      	add	r9, r3
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4629      	mov	r1, r5
 800e6da:	f7f2 f9f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e6de:	b938      	cbnz	r0, 800e6f0 <__cvt+0xac>
 800e6e0:	2230      	movs	r2, #48	; 0x30
 800e6e2:	9b03      	ldr	r3, [sp, #12]
 800e6e4:	454b      	cmp	r3, r9
 800e6e6:	d205      	bcs.n	800e6f4 <__cvt+0xb0>
 800e6e8:	1c59      	adds	r1, r3, #1
 800e6ea:	9103      	str	r1, [sp, #12]
 800e6ec:	701a      	strb	r2, [r3, #0]
 800e6ee:	e7f8      	b.n	800e6e2 <__cvt+0x9e>
 800e6f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6f4:	9b03      	ldr	r3, [sp, #12]
 800e6f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6f8:	eba3 0308 	sub.w	r3, r3, r8
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	6013      	str	r3, [r2, #0]
 800e700:	b004      	add	sp, #16
 800e702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e706 <__exponent>:
 800e706:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e708:	2900      	cmp	r1, #0
 800e70a:	4604      	mov	r4, r0
 800e70c:	bfba      	itte	lt
 800e70e:	4249      	neglt	r1, r1
 800e710:	232d      	movlt	r3, #45	; 0x2d
 800e712:	232b      	movge	r3, #43	; 0x2b
 800e714:	2909      	cmp	r1, #9
 800e716:	f804 2b02 	strb.w	r2, [r4], #2
 800e71a:	7043      	strb	r3, [r0, #1]
 800e71c:	dd20      	ble.n	800e760 <__exponent+0x5a>
 800e71e:	f10d 0307 	add.w	r3, sp, #7
 800e722:	461f      	mov	r7, r3
 800e724:	260a      	movs	r6, #10
 800e726:	fb91 f5f6 	sdiv	r5, r1, r6
 800e72a:	fb06 1115 	mls	r1, r6, r5, r1
 800e72e:	3130      	adds	r1, #48	; 0x30
 800e730:	2d09      	cmp	r5, #9
 800e732:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e736:	f103 32ff 	add.w	r2, r3, #4294967295
 800e73a:	4629      	mov	r1, r5
 800e73c:	dc09      	bgt.n	800e752 <__exponent+0x4c>
 800e73e:	3130      	adds	r1, #48	; 0x30
 800e740:	3b02      	subs	r3, #2
 800e742:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e746:	42bb      	cmp	r3, r7
 800e748:	4622      	mov	r2, r4
 800e74a:	d304      	bcc.n	800e756 <__exponent+0x50>
 800e74c:	1a10      	subs	r0, r2, r0
 800e74e:	b003      	add	sp, #12
 800e750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e752:	4613      	mov	r3, r2
 800e754:	e7e7      	b.n	800e726 <__exponent+0x20>
 800e756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e75a:	f804 2b01 	strb.w	r2, [r4], #1
 800e75e:	e7f2      	b.n	800e746 <__exponent+0x40>
 800e760:	2330      	movs	r3, #48	; 0x30
 800e762:	4419      	add	r1, r3
 800e764:	7083      	strb	r3, [r0, #2]
 800e766:	1d02      	adds	r2, r0, #4
 800e768:	70c1      	strb	r1, [r0, #3]
 800e76a:	e7ef      	b.n	800e74c <__exponent+0x46>

0800e76c <_printf_float>:
 800e76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e770:	b08d      	sub	sp, #52	; 0x34
 800e772:	460c      	mov	r4, r1
 800e774:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e778:	4616      	mov	r6, r2
 800e77a:	461f      	mov	r7, r3
 800e77c:	4605      	mov	r5, r0
 800e77e:	f002 fe07 	bl	8011390 <_localeconv_r>
 800e782:	6803      	ldr	r3, [r0, #0]
 800e784:	9304      	str	r3, [sp, #16]
 800e786:	4618      	mov	r0, r3
 800e788:	f7f1 fd22 	bl	80001d0 <strlen>
 800e78c:	2300      	movs	r3, #0
 800e78e:	930a      	str	r3, [sp, #40]	; 0x28
 800e790:	f8d8 3000 	ldr.w	r3, [r8]
 800e794:	9005      	str	r0, [sp, #20]
 800e796:	3307      	adds	r3, #7
 800e798:	f023 0307 	bic.w	r3, r3, #7
 800e79c:	f103 0208 	add.w	r2, r3, #8
 800e7a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e7a4:	f8d4 b000 	ldr.w	fp, [r4]
 800e7a8:	f8c8 2000 	str.w	r2, [r8]
 800e7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e7b4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e7b8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e7bc:	9307      	str	r3, [sp, #28]
 800e7be:	f8cd 8018 	str.w	r8, [sp, #24]
 800e7c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7c6:	4ba7      	ldr	r3, [pc, #668]	; (800ea64 <_printf_float+0x2f8>)
 800e7c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7cc:	f7f2 f9ae 	bl	8000b2c <__aeabi_dcmpun>
 800e7d0:	bb70      	cbnz	r0, 800e830 <_printf_float+0xc4>
 800e7d2:	f04f 32ff 	mov.w	r2, #4294967295
 800e7d6:	4ba3      	ldr	r3, [pc, #652]	; (800ea64 <_printf_float+0x2f8>)
 800e7d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e7dc:	f7f2 f988 	bl	8000af0 <__aeabi_dcmple>
 800e7e0:	bb30      	cbnz	r0, 800e830 <_printf_float+0xc4>
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	2300      	movs	r3, #0
 800e7e6:	4640      	mov	r0, r8
 800e7e8:	4649      	mov	r1, r9
 800e7ea:	f7f2 f977 	bl	8000adc <__aeabi_dcmplt>
 800e7ee:	b110      	cbz	r0, 800e7f6 <_printf_float+0x8a>
 800e7f0:	232d      	movs	r3, #45	; 0x2d
 800e7f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7f6:	4a9c      	ldr	r2, [pc, #624]	; (800ea68 <_printf_float+0x2fc>)
 800e7f8:	4b9c      	ldr	r3, [pc, #624]	; (800ea6c <_printf_float+0x300>)
 800e7fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e7fe:	bf8c      	ite	hi
 800e800:	4690      	movhi	r8, r2
 800e802:	4698      	movls	r8, r3
 800e804:	2303      	movs	r3, #3
 800e806:	f02b 0204 	bic.w	r2, fp, #4
 800e80a:	6123      	str	r3, [r4, #16]
 800e80c:	6022      	str	r2, [r4, #0]
 800e80e:	f04f 0900 	mov.w	r9, #0
 800e812:	9700      	str	r7, [sp, #0]
 800e814:	4633      	mov	r3, r6
 800e816:	aa0b      	add	r2, sp, #44	; 0x2c
 800e818:	4621      	mov	r1, r4
 800e81a:	4628      	mov	r0, r5
 800e81c:	f000 f9e6 	bl	800ebec <_printf_common>
 800e820:	3001      	adds	r0, #1
 800e822:	f040 808d 	bne.w	800e940 <_printf_float+0x1d4>
 800e826:	f04f 30ff 	mov.w	r0, #4294967295
 800e82a:	b00d      	add	sp, #52	; 0x34
 800e82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e830:	4642      	mov	r2, r8
 800e832:	464b      	mov	r3, r9
 800e834:	4640      	mov	r0, r8
 800e836:	4649      	mov	r1, r9
 800e838:	f7f2 f978 	bl	8000b2c <__aeabi_dcmpun>
 800e83c:	b110      	cbz	r0, 800e844 <_printf_float+0xd8>
 800e83e:	4a8c      	ldr	r2, [pc, #560]	; (800ea70 <_printf_float+0x304>)
 800e840:	4b8c      	ldr	r3, [pc, #560]	; (800ea74 <_printf_float+0x308>)
 800e842:	e7da      	b.n	800e7fa <_printf_float+0x8e>
 800e844:	6861      	ldr	r1, [r4, #4]
 800e846:	1c4b      	adds	r3, r1, #1
 800e848:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e84c:	a80a      	add	r0, sp, #40	; 0x28
 800e84e:	d13e      	bne.n	800e8ce <_printf_float+0x162>
 800e850:	2306      	movs	r3, #6
 800e852:	6063      	str	r3, [r4, #4]
 800e854:	2300      	movs	r3, #0
 800e856:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e85a:	ab09      	add	r3, sp, #36	; 0x24
 800e85c:	9300      	str	r3, [sp, #0]
 800e85e:	ec49 8b10 	vmov	d0, r8, r9
 800e862:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e866:	6022      	str	r2, [r4, #0]
 800e868:	f8cd a004 	str.w	sl, [sp, #4]
 800e86c:	6861      	ldr	r1, [r4, #4]
 800e86e:	4628      	mov	r0, r5
 800e870:	f7ff fee8 	bl	800e644 <__cvt>
 800e874:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e878:	2b47      	cmp	r3, #71	; 0x47
 800e87a:	4680      	mov	r8, r0
 800e87c:	d109      	bne.n	800e892 <_printf_float+0x126>
 800e87e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e880:	1cd8      	adds	r0, r3, #3
 800e882:	db02      	blt.n	800e88a <_printf_float+0x11e>
 800e884:	6862      	ldr	r2, [r4, #4]
 800e886:	4293      	cmp	r3, r2
 800e888:	dd47      	ble.n	800e91a <_printf_float+0x1ae>
 800e88a:	f1aa 0a02 	sub.w	sl, sl, #2
 800e88e:	fa5f fa8a 	uxtb.w	sl, sl
 800e892:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e896:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e898:	d824      	bhi.n	800e8e4 <_printf_float+0x178>
 800e89a:	3901      	subs	r1, #1
 800e89c:	4652      	mov	r2, sl
 800e89e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e8a2:	9109      	str	r1, [sp, #36]	; 0x24
 800e8a4:	f7ff ff2f 	bl	800e706 <__exponent>
 800e8a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8aa:	1813      	adds	r3, r2, r0
 800e8ac:	2a01      	cmp	r2, #1
 800e8ae:	4681      	mov	r9, r0
 800e8b0:	6123      	str	r3, [r4, #16]
 800e8b2:	dc02      	bgt.n	800e8ba <_printf_float+0x14e>
 800e8b4:	6822      	ldr	r2, [r4, #0]
 800e8b6:	07d1      	lsls	r1, r2, #31
 800e8b8:	d501      	bpl.n	800e8be <_printf_float+0x152>
 800e8ba:	3301      	adds	r3, #1
 800e8bc:	6123      	str	r3, [r4, #16]
 800e8be:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d0a5      	beq.n	800e812 <_printf_float+0xa6>
 800e8c6:	232d      	movs	r3, #45	; 0x2d
 800e8c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8cc:	e7a1      	b.n	800e812 <_printf_float+0xa6>
 800e8ce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e8d2:	f000 8177 	beq.w	800ebc4 <_printf_float+0x458>
 800e8d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e8da:	d1bb      	bne.n	800e854 <_printf_float+0xe8>
 800e8dc:	2900      	cmp	r1, #0
 800e8de:	d1b9      	bne.n	800e854 <_printf_float+0xe8>
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e7b6      	b.n	800e852 <_printf_float+0xe6>
 800e8e4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e8e8:	d119      	bne.n	800e91e <_printf_float+0x1b2>
 800e8ea:	2900      	cmp	r1, #0
 800e8ec:	6863      	ldr	r3, [r4, #4]
 800e8ee:	dd0c      	ble.n	800e90a <_printf_float+0x19e>
 800e8f0:	6121      	str	r1, [r4, #16]
 800e8f2:	b913      	cbnz	r3, 800e8fa <_printf_float+0x18e>
 800e8f4:	6822      	ldr	r2, [r4, #0]
 800e8f6:	07d2      	lsls	r2, r2, #31
 800e8f8:	d502      	bpl.n	800e900 <_printf_float+0x194>
 800e8fa:	3301      	adds	r3, #1
 800e8fc:	440b      	add	r3, r1
 800e8fe:	6123      	str	r3, [r4, #16]
 800e900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e902:	65a3      	str	r3, [r4, #88]	; 0x58
 800e904:	f04f 0900 	mov.w	r9, #0
 800e908:	e7d9      	b.n	800e8be <_printf_float+0x152>
 800e90a:	b913      	cbnz	r3, 800e912 <_printf_float+0x1a6>
 800e90c:	6822      	ldr	r2, [r4, #0]
 800e90e:	07d0      	lsls	r0, r2, #31
 800e910:	d501      	bpl.n	800e916 <_printf_float+0x1aa>
 800e912:	3302      	adds	r3, #2
 800e914:	e7f3      	b.n	800e8fe <_printf_float+0x192>
 800e916:	2301      	movs	r3, #1
 800e918:	e7f1      	b.n	800e8fe <_printf_float+0x192>
 800e91a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e91e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e922:	4293      	cmp	r3, r2
 800e924:	db05      	blt.n	800e932 <_printf_float+0x1c6>
 800e926:	6822      	ldr	r2, [r4, #0]
 800e928:	6123      	str	r3, [r4, #16]
 800e92a:	07d1      	lsls	r1, r2, #31
 800e92c:	d5e8      	bpl.n	800e900 <_printf_float+0x194>
 800e92e:	3301      	adds	r3, #1
 800e930:	e7e5      	b.n	800e8fe <_printf_float+0x192>
 800e932:	2b00      	cmp	r3, #0
 800e934:	bfd4      	ite	le
 800e936:	f1c3 0302 	rsble	r3, r3, #2
 800e93a:	2301      	movgt	r3, #1
 800e93c:	4413      	add	r3, r2
 800e93e:	e7de      	b.n	800e8fe <_printf_float+0x192>
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	055a      	lsls	r2, r3, #21
 800e944:	d407      	bmi.n	800e956 <_printf_float+0x1ea>
 800e946:	6923      	ldr	r3, [r4, #16]
 800e948:	4642      	mov	r2, r8
 800e94a:	4631      	mov	r1, r6
 800e94c:	4628      	mov	r0, r5
 800e94e:	47b8      	blx	r7
 800e950:	3001      	adds	r0, #1
 800e952:	d12b      	bne.n	800e9ac <_printf_float+0x240>
 800e954:	e767      	b.n	800e826 <_printf_float+0xba>
 800e956:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e95a:	f240 80dc 	bls.w	800eb16 <_printf_float+0x3aa>
 800e95e:	2200      	movs	r2, #0
 800e960:	2300      	movs	r3, #0
 800e962:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e966:	f7f2 f8af 	bl	8000ac8 <__aeabi_dcmpeq>
 800e96a:	2800      	cmp	r0, #0
 800e96c:	d033      	beq.n	800e9d6 <_printf_float+0x26a>
 800e96e:	2301      	movs	r3, #1
 800e970:	4a41      	ldr	r2, [pc, #260]	; (800ea78 <_printf_float+0x30c>)
 800e972:	4631      	mov	r1, r6
 800e974:	4628      	mov	r0, r5
 800e976:	47b8      	blx	r7
 800e978:	3001      	adds	r0, #1
 800e97a:	f43f af54 	beq.w	800e826 <_printf_float+0xba>
 800e97e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e982:	429a      	cmp	r2, r3
 800e984:	db02      	blt.n	800e98c <_printf_float+0x220>
 800e986:	6823      	ldr	r3, [r4, #0]
 800e988:	07d8      	lsls	r0, r3, #31
 800e98a:	d50f      	bpl.n	800e9ac <_printf_float+0x240>
 800e98c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e990:	4631      	mov	r1, r6
 800e992:	4628      	mov	r0, r5
 800e994:	47b8      	blx	r7
 800e996:	3001      	adds	r0, #1
 800e998:	f43f af45 	beq.w	800e826 <_printf_float+0xba>
 800e99c:	f04f 0800 	mov.w	r8, #0
 800e9a0:	f104 091a 	add.w	r9, r4, #26
 800e9a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9a6:	3b01      	subs	r3, #1
 800e9a8:	4543      	cmp	r3, r8
 800e9aa:	dc09      	bgt.n	800e9c0 <_printf_float+0x254>
 800e9ac:	6823      	ldr	r3, [r4, #0]
 800e9ae:	079b      	lsls	r3, r3, #30
 800e9b0:	f100 8103 	bmi.w	800ebba <_printf_float+0x44e>
 800e9b4:	68e0      	ldr	r0, [r4, #12]
 800e9b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9b8:	4298      	cmp	r0, r3
 800e9ba:	bfb8      	it	lt
 800e9bc:	4618      	movlt	r0, r3
 800e9be:	e734      	b.n	800e82a <_printf_float+0xbe>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	464a      	mov	r2, r9
 800e9c4:	4631      	mov	r1, r6
 800e9c6:	4628      	mov	r0, r5
 800e9c8:	47b8      	blx	r7
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	f43f af2b 	beq.w	800e826 <_printf_float+0xba>
 800e9d0:	f108 0801 	add.w	r8, r8, #1
 800e9d4:	e7e6      	b.n	800e9a4 <_printf_float+0x238>
 800e9d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	dc2b      	bgt.n	800ea34 <_printf_float+0x2c8>
 800e9dc:	2301      	movs	r3, #1
 800e9de:	4a26      	ldr	r2, [pc, #152]	; (800ea78 <_printf_float+0x30c>)
 800e9e0:	4631      	mov	r1, r6
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	47b8      	blx	r7
 800e9e6:	3001      	adds	r0, #1
 800e9e8:	f43f af1d 	beq.w	800e826 <_printf_float+0xba>
 800e9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ee:	b923      	cbnz	r3, 800e9fa <_printf_float+0x28e>
 800e9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9f2:	b913      	cbnz	r3, 800e9fa <_printf_float+0x28e>
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	07d9      	lsls	r1, r3, #31
 800e9f8:	d5d8      	bpl.n	800e9ac <_printf_float+0x240>
 800e9fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e9fe:	4631      	mov	r1, r6
 800ea00:	4628      	mov	r0, r5
 800ea02:	47b8      	blx	r7
 800ea04:	3001      	adds	r0, #1
 800ea06:	f43f af0e 	beq.w	800e826 <_printf_float+0xba>
 800ea0a:	f04f 0900 	mov.w	r9, #0
 800ea0e:	f104 0a1a 	add.w	sl, r4, #26
 800ea12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea14:	425b      	negs	r3, r3
 800ea16:	454b      	cmp	r3, r9
 800ea18:	dc01      	bgt.n	800ea1e <_printf_float+0x2b2>
 800ea1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea1c:	e794      	b.n	800e948 <_printf_float+0x1dc>
 800ea1e:	2301      	movs	r3, #1
 800ea20:	4652      	mov	r2, sl
 800ea22:	4631      	mov	r1, r6
 800ea24:	4628      	mov	r0, r5
 800ea26:	47b8      	blx	r7
 800ea28:	3001      	adds	r0, #1
 800ea2a:	f43f aefc 	beq.w	800e826 <_printf_float+0xba>
 800ea2e:	f109 0901 	add.w	r9, r9, #1
 800ea32:	e7ee      	b.n	800ea12 <_printf_float+0x2a6>
 800ea34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea38:	429a      	cmp	r2, r3
 800ea3a:	bfa8      	it	ge
 800ea3c:	461a      	movge	r2, r3
 800ea3e:	2a00      	cmp	r2, #0
 800ea40:	4691      	mov	r9, r2
 800ea42:	dd07      	ble.n	800ea54 <_printf_float+0x2e8>
 800ea44:	4613      	mov	r3, r2
 800ea46:	4631      	mov	r1, r6
 800ea48:	4642      	mov	r2, r8
 800ea4a:	4628      	mov	r0, r5
 800ea4c:	47b8      	blx	r7
 800ea4e:	3001      	adds	r0, #1
 800ea50:	f43f aee9 	beq.w	800e826 <_printf_float+0xba>
 800ea54:	f104 031a 	add.w	r3, r4, #26
 800ea58:	f04f 0b00 	mov.w	fp, #0
 800ea5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea60:	9306      	str	r3, [sp, #24]
 800ea62:	e015      	b.n	800ea90 <_printf_float+0x324>
 800ea64:	7fefffff 	.word	0x7fefffff
 800ea68:	08013730 	.word	0x08013730
 800ea6c:	0801372c 	.word	0x0801372c
 800ea70:	08013738 	.word	0x08013738
 800ea74:	08013734 	.word	0x08013734
 800ea78:	0801373c 	.word	0x0801373c
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	9a06      	ldr	r2, [sp, #24]
 800ea80:	4631      	mov	r1, r6
 800ea82:	4628      	mov	r0, r5
 800ea84:	47b8      	blx	r7
 800ea86:	3001      	adds	r0, #1
 800ea88:	f43f aecd 	beq.w	800e826 <_printf_float+0xba>
 800ea8c:	f10b 0b01 	add.w	fp, fp, #1
 800ea90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800ea94:	ebaa 0309 	sub.w	r3, sl, r9
 800ea98:	455b      	cmp	r3, fp
 800ea9a:	dcef      	bgt.n	800ea7c <_printf_float+0x310>
 800ea9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eaa0:	429a      	cmp	r2, r3
 800eaa2:	44d0      	add	r8, sl
 800eaa4:	db15      	blt.n	800ead2 <_printf_float+0x366>
 800eaa6:	6823      	ldr	r3, [r4, #0]
 800eaa8:	07da      	lsls	r2, r3, #31
 800eaaa:	d412      	bmi.n	800ead2 <_printf_float+0x366>
 800eaac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eab0:	eba3 020a 	sub.w	r2, r3, sl
 800eab4:	eba3 0a01 	sub.w	sl, r3, r1
 800eab8:	4592      	cmp	sl, r2
 800eaba:	bfa8      	it	ge
 800eabc:	4692      	movge	sl, r2
 800eabe:	f1ba 0f00 	cmp.w	sl, #0
 800eac2:	dc0e      	bgt.n	800eae2 <_printf_float+0x376>
 800eac4:	f04f 0800 	mov.w	r8, #0
 800eac8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eacc:	f104 091a 	add.w	r9, r4, #26
 800ead0:	e019      	b.n	800eb06 <_printf_float+0x39a>
 800ead2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ead6:	4631      	mov	r1, r6
 800ead8:	4628      	mov	r0, r5
 800eada:	47b8      	blx	r7
 800eadc:	3001      	adds	r0, #1
 800eade:	d1e5      	bne.n	800eaac <_printf_float+0x340>
 800eae0:	e6a1      	b.n	800e826 <_printf_float+0xba>
 800eae2:	4653      	mov	r3, sl
 800eae4:	4642      	mov	r2, r8
 800eae6:	4631      	mov	r1, r6
 800eae8:	4628      	mov	r0, r5
 800eaea:	47b8      	blx	r7
 800eaec:	3001      	adds	r0, #1
 800eaee:	d1e9      	bne.n	800eac4 <_printf_float+0x358>
 800eaf0:	e699      	b.n	800e826 <_printf_float+0xba>
 800eaf2:	2301      	movs	r3, #1
 800eaf4:	464a      	mov	r2, r9
 800eaf6:	4631      	mov	r1, r6
 800eaf8:	4628      	mov	r0, r5
 800eafa:	47b8      	blx	r7
 800eafc:	3001      	adds	r0, #1
 800eafe:	f43f ae92 	beq.w	800e826 <_printf_float+0xba>
 800eb02:	f108 0801 	add.w	r8, r8, #1
 800eb06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb0a:	1a9b      	subs	r3, r3, r2
 800eb0c:	eba3 030a 	sub.w	r3, r3, sl
 800eb10:	4543      	cmp	r3, r8
 800eb12:	dcee      	bgt.n	800eaf2 <_printf_float+0x386>
 800eb14:	e74a      	b.n	800e9ac <_printf_float+0x240>
 800eb16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eb18:	2a01      	cmp	r2, #1
 800eb1a:	dc01      	bgt.n	800eb20 <_printf_float+0x3b4>
 800eb1c:	07db      	lsls	r3, r3, #31
 800eb1e:	d53a      	bpl.n	800eb96 <_printf_float+0x42a>
 800eb20:	2301      	movs	r3, #1
 800eb22:	4642      	mov	r2, r8
 800eb24:	4631      	mov	r1, r6
 800eb26:	4628      	mov	r0, r5
 800eb28:	47b8      	blx	r7
 800eb2a:	3001      	adds	r0, #1
 800eb2c:	f43f ae7b 	beq.w	800e826 <_printf_float+0xba>
 800eb30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb34:	4631      	mov	r1, r6
 800eb36:	4628      	mov	r0, r5
 800eb38:	47b8      	blx	r7
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	f108 0801 	add.w	r8, r8, #1
 800eb40:	f43f ae71 	beq.w	800e826 <_printf_float+0xba>
 800eb44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb46:	2200      	movs	r2, #0
 800eb48:	f103 3aff 	add.w	sl, r3, #4294967295
 800eb4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eb50:	2300      	movs	r3, #0
 800eb52:	f7f1 ffb9 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb56:	b9c8      	cbnz	r0, 800eb8c <_printf_float+0x420>
 800eb58:	4653      	mov	r3, sl
 800eb5a:	4642      	mov	r2, r8
 800eb5c:	4631      	mov	r1, r6
 800eb5e:	4628      	mov	r0, r5
 800eb60:	47b8      	blx	r7
 800eb62:	3001      	adds	r0, #1
 800eb64:	d10e      	bne.n	800eb84 <_printf_float+0x418>
 800eb66:	e65e      	b.n	800e826 <_printf_float+0xba>
 800eb68:	2301      	movs	r3, #1
 800eb6a:	4652      	mov	r2, sl
 800eb6c:	4631      	mov	r1, r6
 800eb6e:	4628      	mov	r0, r5
 800eb70:	47b8      	blx	r7
 800eb72:	3001      	adds	r0, #1
 800eb74:	f43f ae57 	beq.w	800e826 <_printf_float+0xba>
 800eb78:	f108 0801 	add.w	r8, r8, #1
 800eb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb7e:	3b01      	subs	r3, #1
 800eb80:	4543      	cmp	r3, r8
 800eb82:	dcf1      	bgt.n	800eb68 <_printf_float+0x3fc>
 800eb84:	464b      	mov	r3, r9
 800eb86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb8a:	e6de      	b.n	800e94a <_printf_float+0x1de>
 800eb8c:	f04f 0800 	mov.w	r8, #0
 800eb90:	f104 0a1a 	add.w	sl, r4, #26
 800eb94:	e7f2      	b.n	800eb7c <_printf_float+0x410>
 800eb96:	2301      	movs	r3, #1
 800eb98:	e7df      	b.n	800eb5a <_printf_float+0x3ee>
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	464a      	mov	r2, r9
 800eb9e:	4631      	mov	r1, r6
 800eba0:	4628      	mov	r0, r5
 800eba2:	47b8      	blx	r7
 800eba4:	3001      	adds	r0, #1
 800eba6:	f43f ae3e 	beq.w	800e826 <_printf_float+0xba>
 800ebaa:	f108 0801 	add.w	r8, r8, #1
 800ebae:	68e3      	ldr	r3, [r4, #12]
 800ebb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ebb2:	1a9b      	subs	r3, r3, r2
 800ebb4:	4543      	cmp	r3, r8
 800ebb6:	dcf0      	bgt.n	800eb9a <_printf_float+0x42e>
 800ebb8:	e6fc      	b.n	800e9b4 <_printf_float+0x248>
 800ebba:	f04f 0800 	mov.w	r8, #0
 800ebbe:	f104 0919 	add.w	r9, r4, #25
 800ebc2:	e7f4      	b.n	800ebae <_printf_float+0x442>
 800ebc4:	2900      	cmp	r1, #0
 800ebc6:	f43f ae8b 	beq.w	800e8e0 <_printf_float+0x174>
 800ebca:	2300      	movs	r3, #0
 800ebcc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ebd0:	ab09      	add	r3, sp, #36	; 0x24
 800ebd2:	9300      	str	r3, [sp, #0]
 800ebd4:	ec49 8b10 	vmov	d0, r8, r9
 800ebd8:	6022      	str	r2, [r4, #0]
 800ebda:	f8cd a004 	str.w	sl, [sp, #4]
 800ebde:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ebe2:	4628      	mov	r0, r5
 800ebe4:	f7ff fd2e 	bl	800e644 <__cvt>
 800ebe8:	4680      	mov	r8, r0
 800ebea:	e648      	b.n	800e87e <_printf_float+0x112>

0800ebec <_printf_common>:
 800ebec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebf0:	4691      	mov	r9, r2
 800ebf2:	461f      	mov	r7, r3
 800ebf4:	688a      	ldr	r2, [r1, #8]
 800ebf6:	690b      	ldr	r3, [r1, #16]
 800ebf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebfc:	4293      	cmp	r3, r2
 800ebfe:	bfb8      	it	lt
 800ec00:	4613      	movlt	r3, r2
 800ec02:	f8c9 3000 	str.w	r3, [r9]
 800ec06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec0a:	4606      	mov	r6, r0
 800ec0c:	460c      	mov	r4, r1
 800ec0e:	b112      	cbz	r2, 800ec16 <_printf_common+0x2a>
 800ec10:	3301      	adds	r3, #1
 800ec12:	f8c9 3000 	str.w	r3, [r9]
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	0699      	lsls	r1, r3, #26
 800ec1a:	bf42      	ittt	mi
 800ec1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ec20:	3302      	addmi	r3, #2
 800ec22:	f8c9 3000 	strmi.w	r3, [r9]
 800ec26:	6825      	ldr	r5, [r4, #0]
 800ec28:	f015 0506 	ands.w	r5, r5, #6
 800ec2c:	d107      	bne.n	800ec3e <_printf_common+0x52>
 800ec2e:	f104 0a19 	add.w	sl, r4, #25
 800ec32:	68e3      	ldr	r3, [r4, #12]
 800ec34:	f8d9 2000 	ldr.w	r2, [r9]
 800ec38:	1a9b      	subs	r3, r3, r2
 800ec3a:	42ab      	cmp	r3, r5
 800ec3c:	dc28      	bgt.n	800ec90 <_printf_common+0xa4>
 800ec3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ec42:	6822      	ldr	r2, [r4, #0]
 800ec44:	3300      	adds	r3, #0
 800ec46:	bf18      	it	ne
 800ec48:	2301      	movne	r3, #1
 800ec4a:	0692      	lsls	r2, r2, #26
 800ec4c:	d42d      	bmi.n	800ecaa <_printf_common+0xbe>
 800ec4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec52:	4639      	mov	r1, r7
 800ec54:	4630      	mov	r0, r6
 800ec56:	47c0      	blx	r8
 800ec58:	3001      	adds	r0, #1
 800ec5a:	d020      	beq.n	800ec9e <_printf_common+0xb2>
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	68e5      	ldr	r5, [r4, #12]
 800ec60:	f8d9 2000 	ldr.w	r2, [r9]
 800ec64:	f003 0306 	and.w	r3, r3, #6
 800ec68:	2b04      	cmp	r3, #4
 800ec6a:	bf08      	it	eq
 800ec6c:	1aad      	subeq	r5, r5, r2
 800ec6e:	68a3      	ldr	r3, [r4, #8]
 800ec70:	6922      	ldr	r2, [r4, #16]
 800ec72:	bf0c      	ite	eq
 800ec74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec78:	2500      	movne	r5, #0
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	bfc4      	itt	gt
 800ec7e:	1a9b      	subgt	r3, r3, r2
 800ec80:	18ed      	addgt	r5, r5, r3
 800ec82:	f04f 0900 	mov.w	r9, #0
 800ec86:	341a      	adds	r4, #26
 800ec88:	454d      	cmp	r5, r9
 800ec8a:	d11a      	bne.n	800ecc2 <_printf_common+0xd6>
 800ec8c:	2000      	movs	r0, #0
 800ec8e:	e008      	b.n	800eca2 <_printf_common+0xb6>
 800ec90:	2301      	movs	r3, #1
 800ec92:	4652      	mov	r2, sl
 800ec94:	4639      	mov	r1, r7
 800ec96:	4630      	mov	r0, r6
 800ec98:	47c0      	blx	r8
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	d103      	bne.n	800eca6 <_printf_common+0xba>
 800ec9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eca6:	3501      	adds	r5, #1
 800eca8:	e7c3      	b.n	800ec32 <_printf_common+0x46>
 800ecaa:	18e1      	adds	r1, r4, r3
 800ecac:	1c5a      	adds	r2, r3, #1
 800ecae:	2030      	movs	r0, #48	; 0x30
 800ecb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ecb4:	4422      	add	r2, r4
 800ecb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ecba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ecbe:	3302      	adds	r3, #2
 800ecc0:	e7c5      	b.n	800ec4e <_printf_common+0x62>
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	4622      	mov	r2, r4
 800ecc6:	4639      	mov	r1, r7
 800ecc8:	4630      	mov	r0, r6
 800ecca:	47c0      	blx	r8
 800eccc:	3001      	adds	r0, #1
 800ecce:	d0e6      	beq.n	800ec9e <_printf_common+0xb2>
 800ecd0:	f109 0901 	add.w	r9, r9, #1
 800ecd4:	e7d8      	b.n	800ec88 <_printf_common+0x9c>
	...

0800ecd8 <_printf_i>:
 800ecd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ece0:	460c      	mov	r4, r1
 800ece2:	7e09      	ldrb	r1, [r1, #24]
 800ece4:	b085      	sub	sp, #20
 800ece6:	296e      	cmp	r1, #110	; 0x6e
 800ece8:	4617      	mov	r7, r2
 800ecea:	4606      	mov	r6, r0
 800ecec:	4698      	mov	r8, r3
 800ecee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ecf0:	f000 80b3 	beq.w	800ee5a <_printf_i+0x182>
 800ecf4:	d822      	bhi.n	800ed3c <_printf_i+0x64>
 800ecf6:	2963      	cmp	r1, #99	; 0x63
 800ecf8:	d036      	beq.n	800ed68 <_printf_i+0x90>
 800ecfa:	d80a      	bhi.n	800ed12 <_printf_i+0x3a>
 800ecfc:	2900      	cmp	r1, #0
 800ecfe:	f000 80b9 	beq.w	800ee74 <_printf_i+0x19c>
 800ed02:	2958      	cmp	r1, #88	; 0x58
 800ed04:	f000 8083 	beq.w	800ee0e <_printf_i+0x136>
 800ed08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ed10:	e032      	b.n	800ed78 <_printf_i+0xa0>
 800ed12:	2964      	cmp	r1, #100	; 0x64
 800ed14:	d001      	beq.n	800ed1a <_printf_i+0x42>
 800ed16:	2969      	cmp	r1, #105	; 0x69
 800ed18:	d1f6      	bne.n	800ed08 <_printf_i+0x30>
 800ed1a:	6820      	ldr	r0, [r4, #0]
 800ed1c:	6813      	ldr	r3, [r2, #0]
 800ed1e:	0605      	lsls	r5, r0, #24
 800ed20:	f103 0104 	add.w	r1, r3, #4
 800ed24:	d52a      	bpl.n	800ed7c <_printf_i+0xa4>
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6011      	str	r1, [r2, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	da03      	bge.n	800ed36 <_printf_i+0x5e>
 800ed2e:	222d      	movs	r2, #45	; 0x2d
 800ed30:	425b      	negs	r3, r3
 800ed32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ed36:	486f      	ldr	r0, [pc, #444]	; (800eef4 <_printf_i+0x21c>)
 800ed38:	220a      	movs	r2, #10
 800ed3a:	e039      	b.n	800edb0 <_printf_i+0xd8>
 800ed3c:	2973      	cmp	r1, #115	; 0x73
 800ed3e:	f000 809d 	beq.w	800ee7c <_printf_i+0x1a4>
 800ed42:	d808      	bhi.n	800ed56 <_printf_i+0x7e>
 800ed44:	296f      	cmp	r1, #111	; 0x6f
 800ed46:	d020      	beq.n	800ed8a <_printf_i+0xb2>
 800ed48:	2970      	cmp	r1, #112	; 0x70
 800ed4a:	d1dd      	bne.n	800ed08 <_printf_i+0x30>
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	f043 0320 	orr.w	r3, r3, #32
 800ed52:	6023      	str	r3, [r4, #0]
 800ed54:	e003      	b.n	800ed5e <_printf_i+0x86>
 800ed56:	2975      	cmp	r1, #117	; 0x75
 800ed58:	d017      	beq.n	800ed8a <_printf_i+0xb2>
 800ed5a:	2978      	cmp	r1, #120	; 0x78
 800ed5c:	d1d4      	bne.n	800ed08 <_printf_i+0x30>
 800ed5e:	2378      	movs	r3, #120	; 0x78
 800ed60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed64:	4864      	ldr	r0, [pc, #400]	; (800eef8 <_printf_i+0x220>)
 800ed66:	e055      	b.n	800ee14 <_printf_i+0x13c>
 800ed68:	6813      	ldr	r3, [r2, #0]
 800ed6a:	1d19      	adds	r1, r3, #4
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	6011      	str	r1, [r2, #0]
 800ed70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ed74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed78:	2301      	movs	r3, #1
 800ed7a:	e08c      	b.n	800ee96 <_printf_i+0x1be>
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	6011      	str	r1, [r2, #0]
 800ed80:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ed84:	bf18      	it	ne
 800ed86:	b21b      	sxthne	r3, r3
 800ed88:	e7cf      	b.n	800ed2a <_printf_i+0x52>
 800ed8a:	6813      	ldr	r3, [r2, #0]
 800ed8c:	6825      	ldr	r5, [r4, #0]
 800ed8e:	1d18      	adds	r0, r3, #4
 800ed90:	6010      	str	r0, [r2, #0]
 800ed92:	0628      	lsls	r0, r5, #24
 800ed94:	d501      	bpl.n	800ed9a <_printf_i+0xc2>
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	e002      	b.n	800eda0 <_printf_i+0xc8>
 800ed9a:	0668      	lsls	r0, r5, #25
 800ed9c:	d5fb      	bpl.n	800ed96 <_printf_i+0xbe>
 800ed9e:	881b      	ldrh	r3, [r3, #0]
 800eda0:	4854      	ldr	r0, [pc, #336]	; (800eef4 <_printf_i+0x21c>)
 800eda2:	296f      	cmp	r1, #111	; 0x6f
 800eda4:	bf14      	ite	ne
 800eda6:	220a      	movne	r2, #10
 800eda8:	2208      	moveq	r2, #8
 800edaa:	2100      	movs	r1, #0
 800edac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edb0:	6865      	ldr	r5, [r4, #4]
 800edb2:	60a5      	str	r5, [r4, #8]
 800edb4:	2d00      	cmp	r5, #0
 800edb6:	f2c0 8095 	blt.w	800eee4 <_printf_i+0x20c>
 800edba:	6821      	ldr	r1, [r4, #0]
 800edbc:	f021 0104 	bic.w	r1, r1, #4
 800edc0:	6021      	str	r1, [r4, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d13d      	bne.n	800ee42 <_printf_i+0x16a>
 800edc6:	2d00      	cmp	r5, #0
 800edc8:	f040 808e 	bne.w	800eee8 <_printf_i+0x210>
 800edcc:	4665      	mov	r5, ip
 800edce:	2a08      	cmp	r2, #8
 800edd0:	d10b      	bne.n	800edea <_printf_i+0x112>
 800edd2:	6823      	ldr	r3, [r4, #0]
 800edd4:	07db      	lsls	r3, r3, #31
 800edd6:	d508      	bpl.n	800edea <_printf_i+0x112>
 800edd8:	6923      	ldr	r3, [r4, #16]
 800edda:	6862      	ldr	r2, [r4, #4]
 800eddc:	429a      	cmp	r2, r3
 800edde:	bfde      	ittt	le
 800ede0:	2330      	movle	r3, #48	; 0x30
 800ede2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ede6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800edea:	ebac 0305 	sub.w	r3, ip, r5
 800edee:	6123      	str	r3, [r4, #16]
 800edf0:	f8cd 8000 	str.w	r8, [sp]
 800edf4:	463b      	mov	r3, r7
 800edf6:	aa03      	add	r2, sp, #12
 800edf8:	4621      	mov	r1, r4
 800edfa:	4630      	mov	r0, r6
 800edfc:	f7ff fef6 	bl	800ebec <_printf_common>
 800ee00:	3001      	adds	r0, #1
 800ee02:	d14d      	bne.n	800eea0 <_printf_i+0x1c8>
 800ee04:	f04f 30ff 	mov.w	r0, #4294967295
 800ee08:	b005      	add	sp, #20
 800ee0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee0e:	4839      	ldr	r0, [pc, #228]	; (800eef4 <_printf_i+0x21c>)
 800ee10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ee14:	6813      	ldr	r3, [r2, #0]
 800ee16:	6821      	ldr	r1, [r4, #0]
 800ee18:	1d1d      	adds	r5, r3, #4
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	6015      	str	r5, [r2, #0]
 800ee1e:	060a      	lsls	r2, r1, #24
 800ee20:	d50b      	bpl.n	800ee3a <_printf_i+0x162>
 800ee22:	07ca      	lsls	r2, r1, #31
 800ee24:	bf44      	itt	mi
 800ee26:	f041 0120 	orrmi.w	r1, r1, #32
 800ee2a:	6021      	strmi	r1, [r4, #0]
 800ee2c:	b91b      	cbnz	r3, 800ee36 <_printf_i+0x15e>
 800ee2e:	6822      	ldr	r2, [r4, #0]
 800ee30:	f022 0220 	bic.w	r2, r2, #32
 800ee34:	6022      	str	r2, [r4, #0]
 800ee36:	2210      	movs	r2, #16
 800ee38:	e7b7      	b.n	800edaa <_printf_i+0xd2>
 800ee3a:	064d      	lsls	r5, r1, #25
 800ee3c:	bf48      	it	mi
 800ee3e:	b29b      	uxthmi	r3, r3
 800ee40:	e7ef      	b.n	800ee22 <_printf_i+0x14a>
 800ee42:	4665      	mov	r5, ip
 800ee44:	fbb3 f1f2 	udiv	r1, r3, r2
 800ee48:	fb02 3311 	mls	r3, r2, r1, r3
 800ee4c:	5cc3      	ldrb	r3, [r0, r3]
 800ee4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ee52:	460b      	mov	r3, r1
 800ee54:	2900      	cmp	r1, #0
 800ee56:	d1f5      	bne.n	800ee44 <_printf_i+0x16c>
 800ee58:	e7b9      	b.n	800edce <_printf_i+0xf6>
 800ee5a:	6813      	ldr	r3, [r2, #0]
 800ee5c:	6825      	ldr	r5, [r4, #0]
 800ee5e:	6961      	ldr	r1, [r4, #20]
 800ee60:	1d18      	adds	r0, r3, #4
 800ee62:	6010      	str	r0, [r2, #0]
 800ee64:	0628      	lsls	r0, r5, #24
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	d501      	bpl.n	800ee6e <_printf_i+0x196>
 800ee6a:	6019      	str	r1, [r3, #0]
 800ee6c:	e002      	b.n	800ee74 <_printf_i+0x19c>
 800ee6e:	066a      	lsls	r2, r5, #25
 800ee70:	d5fb      	bpl.n	800ee6a <_printf_i+0x192>
 800ee72:	8019      	strh	r1, [r3, #0]
 800ee74:	2300      	movs	r3, #0
 800ee76:	6123      	str	r3, [r4, #16]
 800ee78:	4665      	mov	r5, ip
 800ee7a:	e7b9      	b.n	800edf0 <_printf_i+0x118>
 800ee7c:	6813      	ldr	r3, [r2, #0]
 800ee7e:	1d19      	adds	r1, r3, #4
 800ee80:	6011      	str	r1, [r2, #0]
 800ee82:	681d      	ldr	r5, [r3, #0]
 800ee84:	6862      	ldr	r2, [r4, #4]
 800ee86:	2100      	movs	r1, #0
 800ee88:	4628      	mov	r0, r5
 800ee8a:	f7f1 f9a9 	bl	80001e0 <memchr>
 800ee8e:	b108      	cbz	r0, 800ee94 <_printf_i+0x1bc>
 800ee90:	1b40      	subs	r0, r0, r5
 800ee92:	6060      	str	r0, [r4, #4]
 800ee94:	6863      	ldr	r3, [r4, #4]
 800ee96:	6123      	str	r3, [r4, #16]
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ee9e:	e7a7      	b.n	800edf0 <_printf_i+0x118>
 800eea0:	6923      	ldr	r3, [r4, #16]
 800eea2:	462a      	mov	r2, r5
 800eea4:	4639      	mov	r1, r7
 800eea6:	4630      	mov	r0, r6
 800eea8:	47c0      	blx	r8
 800eeaa:	3001      	adds	r0, #1
 800eeac:	d0aa      	beq.n	800ee04 <_printf_i+0x12c>
 800eeae:	6823      	ldr	r3, [r4, #0]
 800eeb0:	079b      	lsls	r3, r3, #30
 800eeb2:	d413      	bmi.n	800eedc <_printf_i+0x204>
 800eeb4:	68e0      	ldr	r0, [r4, #12]
 800eeb6:	9b03      	ldr	r3, [sp, #12]
 800eeb8:	4298      	cmp	r0, r3
 800eeba:	bfb8      	it	lt
 800eebc:	4618      	movlt	r0, r3
 800eebe:	e7a3      	b.n	800ee08 <_printf_i+0x130>
 800eec0:	2301      	movs	r3, #1
 800eec2:	464a      	mov	r2, r9
 800eec4:	4639      	mov	r1, r7
 800eec6:	4630      	mov	r0, r6
 800eec8:	47c0      	blx	r8
 800eeca:	3001      	adds	r0, #1
 800eecc:	d09a      	beq.n	800ee04 <_printf_i+0x12c>
 800eece:	3501      	adds	r5, #1
 800eed0:	68e3      	ldr	r3, [r4, #12]
 800eed2:	9a03      	ldr	r2, [sp, #12]
 800eed4:	1a9b      	subs	r3, r3, r2
 800eed6:	42ab      	cmp	r3, r5
 800eed8:	dcf2      	bgt.n	800eec0 <_printf_i+0x1e8>
 800eeda:	e7eb      	b.n	800eeb4 <_printf_i+0x1dc>
 800eedc:	2500      	movs	r5, #0
 800eede:	f104 0919 	add.w	r9, r4, #25
 800eee2:	e7f5      	b.n	800eed0 <_printf_i+0x1f8>
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d1ac      	bne.n	800ee42 <_printf_i+0x16a>
 800eee8:	7803      	ldrb	r3, [r0, #0]
 800eeea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eeee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eef2:	e76c      	b.n	800edce <_printf_i+0xf6>
 800eef4:	0801373e 	.word	0x0801373e
 800eef8:	0801374f 	.word	0x0801374f

0800eefc <_scanf_float>:
 800eefc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef00:	469a      	mov	sl, r3
 800ef02:	688b      	ldr	r3, [r1, #8]
 800ef04:	4616      	mov	r6, r2
 800ef06:	1e5a      	subs	r2, r3, #1
 800ef08:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ef0c:	b087      	sub	sp, #28
 800ef0e:	bf83      	ittte	hi
 800ef10:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ef14:	189b      	addhi	r3, r3, r2
 800ef16:	9301      	strhi	r3, [sp, #4]
 800ef18:	2300      	movls	r3, #0
 800ef1a:	bf86      	itte	hi
 800ef1c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ef20:	608b      	strhi	r3, [r1, #8]
 800ef22:	9301      	strls	r3, [sp, #4]
 800ef24:	680b      	ldr	r3, [r1, #0]
 800ef26:	4688      	mov	r8, r1
 800ef28:	f04f 0b00 	mov.w	fp, #0
 800ef2c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ef30:	f848 3b1c 	str.w	r3, [r8], #28
 800ef34:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ef38:	4607      	mov	r7, r0
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	4645      	mov	r5, r8
 800ef3e:	465a      	mov	r2, fp
 800ef40:	46d9      	mov	r9, fp
 800ef42:	f8cd b008 	str.w	fp, [sp, #8]
 800ef46:	68a1      	ldr	r1, [r4, #8]
 800ef48:	b181      	cbz	r1, 800ef6c <_scanf_float+0x70>
 800ef4a:	6833      	ldr	r3, [r6, #0]
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	2b49      	cmp	r3, #73	; 0x49
 800ef50:	d071      	beq.n	800f036 <_scanf_float+0x13a>
 800ef52:	d84d      	bhi.n	800eff0 <_scanf_float+0xf4>
 800ef54:	2b39      	cmp	r3, #57	; 0x39
 800ef56:	d840      	bhi.n	800efda <_scanf_float+0xde>
 800ef58:	2b31      	cmp	r3, #49	; 0x31
 800ef5a:	f080 8088 	bcs.w	800f06e <_scanf_float+0x172>
 800ef5e:	2b2d      	cmp	r3, #45	; 0x2d
 800ef60:	f000 8090 	beq.w	800f084 <_scanf_float+0x188>
 800ef64:	d815      	bhi.n	800ef92 <_scanf_float+0x96>
 800ef66:	2b2b      	cmp	r3, #43	; 0x2b
 800ef68:	f000 808c 	beq.w	800f084 <_scanf_float+0x188>
 800ef6c:	f1b9 0f00 	cmp.w	r9, #0
 800ef70:	d003      	beq.n	800ef7a <_scanf_float+0x7e>
 800ef72:	6823      	ldr	r3, [r4, #0]
 800ef74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef78:	6023      	str	r3, [r4, #0]
 800ef7a:	3a01      	subs	r2, #1
 800ef7c:	2a01      	cmp	r2, #1
 800ef7e:	f200 80ea 	bhi.w	800f156 <_scanf_float+0x25a>
 800ef82:	4545      	cmp	r5, r8
 800ef84:	f200 80dc 	bhi.w	800f140 <_scanf_float+0x244>
 800ef88:	2601      	movs	r6, #1
 800ef8a:	4630      	mov	r0, r6
 800ef8c:	b007      	add	sp, #28
 800ef8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef92:	2b2e      	cmp	r3, #46	; 0x2e
 800ef94:	f000 809f 	beq.w	800f0d6 <_scanf_float+0x1da>
 800ef98:	2b30      	cmp	r3, #48	; 0x30
 800ef9a:	d1e7      	bne.n	800ef6c <_scanf_float+0x70>
 800ef9c:	6820      	ldr	r0, [r4, #0]
 800ef9e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800efa2:	d064      	beq.n	800f06e <_scanf_float+0x172>
 800efa4:	9b01      	ldr	r3, [sp, #4]
 800efa6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800efaa:	6020      	str	r0, [r4, #0]
 800efac:	f109 0901 	add.w	r9, r9, #1
 800efb0:	b11b      	cbz	r3, 800efba <_scanf_float+0xbe>
 800efb2:	3b01      	subs	r3, #1
 800efb4:	3101      	adds	r1, #1
 800efb6:	9301      	str	r3, [sp, #4]
 800efb8:	60a1      	str	r1, [r4, #8]
 800efba:	68a3      	ldr	r3, [r4, #8]
 800efbc:	3b01      	subs	r3, #1
 800efbe:	60a3      	str	r3, [r4, #8]
 800efc0:	6923      	ldr	r3, [r4, #16]
 800efc2:	3301      	adds	r3, #1
 800efc4:	6123      	str	r3, [r4, #16]
 800efc6:	6873      	ldr	r3, [r6, #4]
 800efc8:	3b01      	subs	r3, #1
 800efca:	2b00      	cmp	r3, #0
 800efcc:	6073      	str	r3, [r6, #4]
 800efce:	f340 80ac 	ble.w	800f12a <_scanf_float+0x22e>
 800efd2:	6833      	ldr	r3, [r6, #0]
 800efd4:	3301      	adds	r3, #1
 800efd6:	6033      	str	r3, [r6, #0]
 800efd8:	e7b5      	b.n	800ef46 <_scanf_float+0x4a>
 800efda:	2b45      	cmp	r3, #69	; 0x45
 800efdc:	f000 8085 	beq.w	800f0ea <_scanf_float+0x1ee>
 800efe0:	2b46      	cmp	r3, #70	; 0x46
 800efe2:	d06a      	beq.n	800f0ba <_scanf_float+0x1be>
 800efe4:	2b41      	cmp	r3, #65	; 0x41
 800efe6:	d1c1      	bne.n	800ef6c <_scanf_float+0x70>
 800efe8:	2a01      	cmp	r2, #1
 800efea:	d1bf      	bne.n	800ef6c <_scanf_float+0x70>
 800efec:	2202      	movs	r2, #2
 800efee:	e046      	b.n	800f07e <_scanf_float+0x182>
 800eff0:	2b65      	cmp	r3, #101	; 0x65
 800eff2:	d07a      	beq.n	800f0ea <_scanf_float+0x1ee>
 800eff4:	d818      	bhi.n	800f028 <_scanf_float+0x12c>
 800eff6:	2b54      	cmp	r3, #84	; 0x54
 800eff8:	d066      	beq.n	800f0c8 <_scanf_float+0x1cc>
 800effa:	d811      	bhi.n	800f020 <_scanf_float+0x124>
 800effc:	2b4e      	cmp	r3, #78	; 0x4e
 800effe:	d1b5      	bne.n	800ef6c <_scanf_float+0x70>
 800f000:	2a00      	cmp	r2, #0
 800f002:	d146      	bne.n	800f092 <_scanf_float+0x196>
 800f004:	f1b9 0f00 	cmp.w	r9, #0
 800f008:	d145      	bne.n	800f096 <_scanf_float+0x19a>
 800f00a:	6821      	ldr	r1, [r4, #0]
 800f00c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f010:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f014:	d13f      	bne.n	800f096 <_scanf_float+0x19a>
 800f016:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f01a:	6021      	str	r1, [r4, #0]
 800f01c:	2201      	movs	r2, #1
 800f01e:	e02e      	b.n	800f07e <_scanf_float+0x182>
 800f020:	2b59      	cmp	r3, #89	; 0x59
 800f022:	d01e      	beq.n	800f062 <_scanf_float+0x166>
 800f024:	2b61      	cmp	r3, #97	; 0x61
 800f026:	e7de      	b.n	800efe6 <_scanf_float+0xea>
 800f028:	2b6e      	cmp	r3, #110	; 0x6e
 800f02a:	d0e9      	beq.n	800f000 <_scanf_float+0x104>
 800f02c:	d815      	bhi.n	800f05a <_scanf_float+0x15e>
 800f02e:	2b66      	cmp	r3, #102	; 0x66
 800f030:	d043      	beq.n	800f0ba <_scanf_float+0x1be>
 800f032:	2b69      	cmp	r3, #105	; 0x69
 800f034:	d19a      	bne.n	800ef6c <_scanf_float+0x70>
 800f036:	f1bb 0f00 	cmp.w	fp, #0
 800f03a:	d138      	bne.n	800f0ae <_scanf_float+0x1b2>
 800f03c:	f1b9 0f00 	cmp.w	r9, #0
 800f040:	d197      	bne.n	800ef72 <_scanf_float+0x76>
 800f042:	6821      	ldr	r1, [r4, #0]
 800f044:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800f048:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800f04c:	d195      	bne.n	800ef7a <_scanf_float+0x7e>
 800f04e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f052:	6021      	str	r1, [r4, #0]
 800f054:	f04f 0b01 	mov.w	fp, #1
 800f058:	e011      	b.n	800f07e <_scanf_float+0x182>
 800f05a:	2b74      	cmp	r3, #116	; 0x74
 800f05c:	d034      	beq.n	800f0c8 <_scanf_float+0x1cc>
 800f05e:	2b79      	cmp	r3, #121	; 0x79
 800f060:	d184      	bne.n	800ef6c <_scanf_float+0x70>
 800f062:	f1bb 0f07 	cmp.w	fp, #7
 800f066:	d181      	bne.n	800ef6c <_scanf_float+0x70>
 800f068:	f04f 0b08 	mov.w	fp, #8
 800f06c:	e007      	b.n	800f07e <_scanf_float+0x182>
 800f06e:	eb12 0f0b 	cmn.w	r2, fp
 800f072:	f47f af7b 	bne.w	800ef6c <_scanf_float+0x70>
 800f076:	6821      	ldr	r1, [r4, #0]
 800f078:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800f07c:	6021      	str	r1, [r4, #0]
 800f07e:	702b      	strb	r3, [r5, #0]
 800f080:	3501      	adds	r5, #1
 800f082:	e79a      	b.n	800efba <_scanf_float+0xbe>
 800f084:	6821      	ldr	r1, [r4, #0]
 800f086:	0608      	lsls	r0, r1, #24
 800f088:	f57f af70 	bpl.w	800ef6c <_scanf_float+0x70>
 800f08c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800f090:	e7f4      	b.n	800f07c <_scanf_float+0x180>
 800f092:	2a02      	cmp	r2, #2
 800f094:	d047      	beq.n	800f126 <_scanf_float+0x22a>
 800f096:	f1bb 0f01 	cmp.w	fp, #1
 800f09a:	d003      	beq.n	800f0a4 <_scanf_float+0x1a8>
 800f09c:	f1bb 0f04 	cmp.w	fp, #4
 800f0a0:	f47f af64 	bne.w	800ef6c <_scanf_float+0x70>
 800f0a4:	f10b 0b01 	add.w	fp, fp, #1
 800f0a8:	fa5f fb8b 	uxtb.w	fp, fp
 800f0ac:	e7e7      	b.n	800f07e <_scanf_float+0x182>
 800f0ae:	f1bb 0f03 	cmp.w	fp, #3
 800f0b2:	d0f7      	beq.n	800f0a4 <_scanf_float+0x1a8>
 800f0b4:	f1bb 0f05 	cmp.w	fp, #5
 800f0b8:	e7f2      	b.n	800f0a0 <_scanf_float+0x1a4>
 800f0ba:	f1bb 0f02 	cmp.w	fp, #2
 800f0be:	f47f af55 	bne.w	800ef6c <_scanf_float+0x70>
 800f0c2:	f04f 0b03 	mov.w	fp, #3
 800f0c6:	e7da      	b.n	800f07e <_scanf_float+0x182>
 800f0c8:	f1bb 0f06 	cmp.w	fp, #6
 800f0cc:	f47f af4e 	bne.w	800ef6c <_scanf_float+0x70>
 800f0d0:	f04f 0b07 	mov.w	fp, #7
 800f0d4:	e7d3      	b.n	800f07e <_scanf_float+0x182>
 800f0d6:	6821      	ldr	r1, [r4, #0]
 800f0d8:	0588      	lsls	r0, r1, #22
 800f0da:	f57f af47 	bpl.w	800ef6c <_scanf_float+0x70>
 800f0de:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800f0e2:	6021      	str	r1, [r4, #0]
 800f0e4:	f8cd 9008 	str.w	r9, [sp, #8]
 800f0e8:	e7c9      	b.n	800f07e <_scanf_float+0x182>
 800f0ea:	6821      	ldr	r1, [r4, #0]
 800f0ec:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800f0f0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f0f4:	d006      	beq.n	800f104 <_scanf_float+0x208>
 800f0f6:	0548      	lsls	r0, r1, #21
 800f0f8:	f57f af38 	bpl.w	800ef6c <_scanf_float+0x70>
 800f0fc:	f1b9 0f00 	cmp.w	r9, #0
 800f100:	f43f af3b 	beq.w	800ef7a <_scanf_float+0x7e>
 800f104:	0588      	lsls	r0, r1, #22
 800f106:	bf58      	it	pl
 800f108:	9802      	ldrpl	r0, [sp, #8]
 800f10a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800f10e:	bf58      	it	pl
 800f110:	eba9 0000 	subpl.w	r0, r9, r0
 800f114:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800f118:	bf58      	it	pl
 800f11a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800f11e:	6021      	str	r1, [r4, #0]
 800f120:	f04f 0900 	mov.w	r9, #0
 800f124:	e7ab      	b.n	800f07e <_scanf_float+0x182>
 800f126:	2203      	movs	r2, #3
 800f128:	e7a9      	b.n	800f07e <_scanf_float+0x182>
 800f12a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800f12e:	9205      	str	r2, [sp, #20]
 800f130:	4631      	mov	r1, r6
 800f132:	4638      	mov	r0, r7
 800f134:	4798      	blx	r3
 800f136:	9a05      	ldr	r2, [sp, #20]
 800f138:	2800      	cmp	r0, #0
 800f13a:	f43f af04 	beq.w	800ef46 <_scanf_float+0x4a>
 800f13e:	e715      	b.n	800ef6c <_scanf_float+0x70>
 800f140:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f144:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f148:	4632      	mov	r2, r6
 800f14a:	4638      	mov	r0, r7
 800f14c:	4798      	blx	r3
 800f14e:	6923      	ldr	r3, [r4, #16]
 800f150:	3b01      	subs	r3, #1
 800f152:	6123      	str	r3, [r4, #16]
 800f154:	e715      	b.n	800ef82 <_scanf_float+0x86>
 800f156:	f10b 33ff 	add.w	r3, fp, #4294967295
 800f15a:	2b06      	cmp	r3, #6
 800f15c:	d80a      	bhi.n	800f174 <_scanf_float+0x278>
 800f15e:	f1bb 0f02 	cmp.w	fp, #2
 800f162:	d968      	bls.n	800f236 <_scanf_float+0x33a>
 800f164:	f1ab 0b03 	sub.w	fp, fp, #3
 800f168:	fa5f fb8b 	uxtb.w	fp, fp
 800f16c:	eba5 0b0b 	sub.w	fp, r5, fp
 800f170:	455d      	cmp	r5, fp
 800f172:	d14b      	bne.n	800f20c <_scanf_float+0x310>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	05da      	lsls	r2, r3, #23
 800f178:	d51f      	bpl.n	800f1ba <_scanf_float+0x2be>
 800f17a:	055b      	lsls	r3, r3, #21
 800f17c:	d468      	bmi.n	800f250 <_scanf_float+0x354>
 800f17e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800f182:	6923      	ldr	r3, [r4, #16]
 800f184:	2965      	cmp	r1, #101	; 0x65
 800f186:	f103 33ff 	add.w	r3, r3, #4294967295
 800f18a:	f105 3bff 	add.w	fp, r5, #4294967295
 800f18e:	6123      	str	r3, [r4, #16]
 800f190:	d00d      	beq.n	800f1ae <_scanf_float+0x2b2>
 800f192:	2945      	cmp	r1, #69	; 0x45
 800f194:	d00b      	beq.n	800f1ae <_scanf_float+0x2b2>
 800f196:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f19a:	4632      	mov	r2, r6
 800f19c:	4638      	mov	r0, r7
 800f19e:	4798      	blx	r3
 800f1a0:	6923      	ldr	r3, [r4, #16]
 800f1a2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800f1a6:	3b01      	subs	r3, #1
 800f1a8:	f1a5 0b02 	sub.w	fp, r5, #2
 800f1ac:	6123      	str	r3, [r4, #16]
 800f1ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f1b2:	4632      	mov	r2, r6
 800f1b4:	4638      	mov	r0, r7
 800f1b6:	4798      	blx	r3
 800f1b8:	465d      	mov	r5, fp
 800f1ba:	6826      	ldr	r6, [r4, #0]
 800f1bc:	f016 0610 	ands.w	r6, r6, #16
 800f1c0:	d17a      	bne.n	800f2b8 <_scanf_float+0x3bc>
 800f1c2:	702e      	strb	r6, [r5, #0]
 800f1c4:	6823      	ldr	r3, [r4, #0]
 800f1c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f1ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f1ce:	d142      	bne.n	800f256 <_scanf_float+0x35a>
 800f1d0:	9b02      	ldr	r3, [sp, #8]
 800f1d2:	eba9 0303 	sub.w	r3, r9, r3
 800f1d6:	425a      	negs	r2, r3
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d149      	bne.n	800f270 <_scanf_float+0x374>
 800f1dc:	2200      	movs	r2, #0
 800f1de:	4641      	mov	r1, r8
 800f1e0:	4638      	mov	r0, r7
 800f1e2:	f000 fec5 	bl	800ff70 <_strtod_r>
 800f1e6:	6825      	ldr	r5, [r4, #0]
 800f1e8:	f8da 3000 	ldr.w	r3, [sl]
 800f1ec:	f015 0f02 	tst.w	r5, #2
 800f1f0:	f103 0204 	add.w	r2, r3, #4
 800f1f4:	ec59 8b10 	vmov	r8, r9, d0
 800f1f8:	f8ca 2000 	str.w	r2, [sl]
 800f1fc:	d043      	beq.n	800f286 <_scanf_float+0x38a>
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	e9c3 8900 	strd	r8, r9, [r3]
 800f204:	68e3      	ldr	r3, [r4, #12]
 800f206:	3301      	adds	r3, #1
 800f208:	60e3      	str	r3, [r4, #12]
 800f20a:	e6be      	b.n	800ef8a <_scanf_float+0x8e>
 800f20c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f210:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f214:	4632      	mov	r2, r6
 800f216:	4638      	mov	r0, r7
 800f218:	4798      	blx	r3
 800f21a:	6923      	ldr	r3, [r4, #16]
 800f21c:	3b01      	subs	r3, #1
 800f21e:	6123      	str	r3, [r4, #16]
 800f220:	e7a6      	b.n	800f170 <_scanf_float+0x274>
 800f222:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f226:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f22a:	4632      	mov	r2, r6
 800f22c:	4638      	mov	r0, r7
 800f22e:	4798      	blx	r3
 800f230:	6923      	ldr	r3, [r4, #16]
 800f232:	3b01      	subs	r3, #1
 800f234:	6123      	str	r3, [r4, #16]
 800f236:	4545      	cmp	r5, r8
 800f238:	d8f3      	bhi.n	800f222 <_scanf_float+0x326>
 800f23a:	e6a5      	b.n	800ef88 <_scanf_float+0x8c>
 800f23c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800f240:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800f244:	4632      	mov	r2, r6
 800f246:	4638      	mov	r0, r7
 800f248:	4798      	blx	r3
 800f24a:	6923      	ldr	r3, [r4, #16]
 800f24c:	3b01      	subs	r3, #1
 800f24e:	6123      	str	r3, [r4, #16]
 800f250:	4545      	cmp	r5, r8
 800f252:	d8f3      	bhi.n	800f23c <_scanf_float+0x340>
 800f254:	e698      	b.n	800ef88 <_scanf_float+0x8c>
 800f256:	9b03      	ldr	r3, [sp, #12]
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d0bf      	beq.n	800f1dc <_scanf_float+0x2e0>
 800f25c:	9904      	ldr	r1, [sp, #16]
 800f25e:	230a      	movs	r3, #10
 800f260:	4632      	mov	r2, r6
 800f262:	3101      	adds	r1, #1
 800f264:	4638      	mov	r0, r7
 800f266:	f000 ff0f 	bl	8010088 <_strtol_r>
 800f26a:	9b03      	ldr	r3, [sp, #12]
 800f26c:	9d04      	ldr	r5, [sp, #16]
 800f26e:	1ac2      	subs	r2, r0, r3
 800f270:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800f274:	429d      	cmp	r5, r3
 800f276:	bf28      	it	cs
 800f278:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800f27c:	490f      	ldr	r1, [pc, #60]	; (800f2bc <_scanf_float+0x3c0>)
 800f27e:	4628      	mov	r0, r5
 800f280:	f000 f834 	bl	800f2ec <siprintf>
 800f284:	e7aa      	b.n	800f1dc <_scanf_float+0x2e0>
 800f286:	f015 0504 	ands.w	r5, r5, #4
 800f28a:	d1b8      	bne.n	800f1fe <_scanf_float+0x302>
 800f28c:	681f      	ldr	r7, [r3, #0]
 800f28e:	ee10 2a10 	vmov	r2, s0
 800f292:	464b      	mov	r3, r9
 800f294:	ee10 0a10 	vmov	r0, s0
 800f298:	4649      	mov	r1, r9
 800f29a:	f7f1 fc47 	bl	8000b2c <__aeabi_dcmpun>
 800f29e:	b128      	cbz	r0, 800f2ac <_scanf_float+0x3b0>
 800f2a0:	4628      	mov	r0, r5
 800f2a2:	f000 f81d 	bl	800f2e0 <nanf>
 800f2a6:	ed87 0a00 	vstr	s0, [r7]
 800f2aa:	e7ab      	b.n	800f204 <_scanf_float+0x308>
 800f2ac:	4640      	mov	r0, r8
 800f2ae:	4649      	mov	r1, r9
 800f2b0:	f7f1 fc9a 	bl	8000be8 <__aeabi_d2f>
 800f2b4:	6038      	str	r0, [r7, #0]
 800f2b6:	e7a5      	b.n	800f204 <_scanf_float+0x308>
 800f2b8:	2600      	movs	r6, #0
 800f2ba:	e666      	b.n	800ef8a <_scanf_float+0x8e>
 800f2bc:	08013760 	.word	0x08013760

0800f2c0 <_sbrk_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4c06      	ldr	r4, [pc, #24]	; (800f2dc <_sbrk_r+0x1c>)
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	4605      	mov	r5, r0
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	6023      	str	r3, [r4, #0]
 800f2cc:	f003 fe94 	bl	8012ff8 <_sbrk>
 800f2d0:	1c43      	adds	r3, r0, #1
 800f2d2:	d102      	bne.n	800f2da <_sbrk_r+0x1a>
 800f2d4:	6823      	ldr	r3, [r4, #0]
 800f2d6:	b103      	cbz	r3, 800f2da <_sbrk_r+0x1a>
 800f2d8:	602b      	str	r3, [r5, #0]
 800f2da:	bd38      	pop	{r3, r4, r5, pc}
 800f2dc:	20002de4 	.word	0x20002de4

0800f2e0 <nanf>:
 800f2e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800f2e8 <nanf+0x8>
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop
 800f2e8:	7fc00000 	.word	0x7fc00000

0800f2ec <siprintf>:
 800f2ec:	b40e      	push	{r1, r2, r3}
 800f2ee:	b500      	push	{lr}
 800f2f0:	b09c      	sub	sp, #112	; 0x70
 800f2f2:	ab1d      	add	r3, sp, #116	; 0x74
 800f2f4:	9002      	str	r0, [sp, #8]
 800f2f6:	9006      	str	r0, [sp, #24]
 800f2f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f2fc:	4809      	ldr	r0, [pc, #36]	; (800f324 <siprintf+0x38>)
 800f2fe:	9107      	str	r1, [sp, #28]
 800f300:	9104      	str	r1, [sp, #16]
 800f302:	4909      	ldr	r1, [pc, #36]	; (800f328 <siprintf+0x3c>)
 800f304:	f853 2b04 	ldr.w	r2, [r3], #4
 800f308:	9105      	str	r1, [sp, #20]
 800f30a:	6800      	ldr	r0, [r0, #0]
 800f30c:	9301      	str	r3, [sp, #4]
 800f30e:	a902      	add	r1, sp, #8
 800f310:	f002 fcc8 	bl	8011ca4 <_svfiprintf_r>
 800f314:	9b02      	ldr	r3, [sp, #8]
 800f316:	2200      	movs	r2, #0
 800f318:	701a      	strb	r2, [r3, #0]
 800f31a:	b01c      	add	sp, #112	; 0x70
 800f31c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f320:	b003      	add	sp, #12
 800f322:	4770      	bx	lr
 800f324:	2000017c 	.word	0x2000017c
 800f328:	ffff0208 	.word	0xffff0208

0800f32c <strncmp>:
 800f32c:	b510      	push	{r4, lr}
 800f32e:	b16a      	cbz	r2, 800f34c <strncmp+0x20>
 800f330:	3901      	subs	r1, #1
 800f332:	1884      	adds	r4, r0, r2
 800f334:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f338:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d103      	bne.n	800f348 <strncmp+0x1c>
 800f340:	42a0      	cmp	r0, r4
 800f342:	d001      	beq.n	800f348 <strncmp+0x1c>
 800f344:	2b00      	cmp	r3, #0
 800f346:	d1f5      	bne.n	800f334 <strncmp+0x8>
 800f348:	1a98      	subs	r0, r3, r2
 800f34a:	bd10      	pop	{r4, pc}
 800f34c:	4610      	mov	r0, r2
 800f34e:	e7fc      	b.n	800f34a <strncmp+0x1e>

0800f350 <sulp>:
 800f350:	b570      	push	{r4, r5, r6, lr}
 800f352:	4604      	mov	r4, r0
 800f354:	460d      	mov	r5, r1
 800f356:	ec45 4b10 	vmov	d0, r4, r5
 800f35a:	4616      	mov	r6, r2
 800f35c:	f002 fb06 	bl	801196c <__ulp>
 800f360:	ec51 0b10 	vmov	r0, r1, d0
 800f364:	b17e      	cbz	r6, 800f386 <sulp+0x36>
 800f366:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f36a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f36e:	2b00      	cmp	r3, #0
 800f370:	dd09      	ble.n	800f386 <sulp+0x36>
 800f372:	051b      	lsls	r3, r3, #20
 800f374:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f378:	2400      	movs	r4, #0
 800f37a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f37e:	4622      	mov	r2, r4
 800f380:	462b      	mov	r3, r5
 800f382:	f7f1 f939 	bl	80005f8 <__aeabi_dmul>
 800f386:	bd70      	pop	{r4, r5, r6, pc}

0800f388 <_strtod_l>:
 800f388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38c:	461f      	mov	r7, r3
 800f38e:	b0a1      	sub	sp, #132	; 0x84
 800f390:	2300      	movs	r3, #0
 800f392:	4681      	mov	r9, r0
 800f394:	4638      	mov	r0, r7
 800f396:	460e      	mov	r6, r1
 800f398:	9217      	str	r2, [sp, #92]	; 0x5c
 800f39a:	931c      	str	r3, [sp, #112]	; 0x70
 800f39c:	f001 fff5 	bl	801138a <__localeconv_l>
 800f3a0:	4680      	mov	r8, r0
 800f3a2:	6800      	ldr	r0, [r0, #0]
 800f3a4:	f7f0 ff14 	bl	80001d0 <strlen>
 800f3a8:	f04f 0a00 	mov.w	sl, #0
 800f3ac:	4604      	mov	r4, r0
 800f3ae:	f04f 0b00 	mov.w	fp, #0
 800f3b2:	961b      	str	r6, [sp, #108]	; 0x6c
 800f3b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f3b6:	781a      	ldrb	r2, [r3, #0]
 800f3b8:	2a0d      	cmp	r2, #13
 800f3ba:	d832      	bhi.n	800f422 <_strtod_l+0x9a>
 800f3bc:	2a09      	cmp	r2, #9
 800f3be:	d236      	bcs.n	800f42e <_strtod_l+0xa6>
 800f3c0:	2a00      	cmp	r2, #0
 800f3c2:	d03e      	beq.n	800f442 <_strtod_l+0xba>
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	930d      	str	r3, [sp, #52]	; 0x34
 800f3c8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f3ca:	782b      	ldrb	r3, [r5, #0]
 800f3cc:	2b30      	cmp	r3, #48	; 0x30
 800f3ce:	f040 80ac 	bne.w	800f52a <_strtod_l+0x1a2>
 800f3d2:	786b      	ldrb	r3, [r5, #1]
 800f3d4:	2b58      	cmp	r3, #88	; 0x58
 800f3d6:	d001      	beq.n	800f3dc <_strtod_l+0x54>
 800f3d8:	2b78      	cmp	r3, #120	; 0x78
 800f3da:	d167      	bne.n	800f4ac <_strtod_l+0x124>
 800f3dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f3de:	9301      	str	r3, [sp, #4]
 800f3e0:	ab1c      	add	r3, sp, #112	; 0x70
 800f3e2:	9300      	str	r3, [sp, #0]
 800f3e4:	9702      	str	r7, [sp, #8]
 800f3e6:	ab1d      	add	r3, sp, #116	; 0x74
 800f3e8:	4a88      	ldr	r2, [pc, #544]	; (800f60c <_strtod_l+0x284>)
 800f3ea:	a91b      	add	r1, sp, #108	; 0x6c
 800f3ec:	4648      	mov	r0, r9
 800f3ee:	f001 fcf2 	bl	8010dd6 <__gethex>
 800f3f2:	f010 0407 	ands.w	r4, r0, #7
 800f3f6:	4606      	mov	r6, r0
 800f3f8:	d005      	beq.n	800f406 <_strtod_l+0x7e>
 800f3fa:	2c06      	cmp	r4, #6
 800f3fc:	d12b      	bne.n	800f456 <_strtod_l+0xce>
 800f3fe:	3501      	adds	r5, #1
 800f400:	2300      	movs	r3, #0
 800f402:	951b      	str	r5, [sp, #108]	; 0x6c
 800f404:	930d      	str	r3, [sp, #52]	; 0x34
 800f406:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f040 859a 	bne.w	800ff42 <_strtod_l+0xbba>
 800f40e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f410:	b1e3      	cbz	r3, 800f44c <_strtod_l+0xc4>
 800f412:	4652      	mov	r2, sl
 800f414:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f418:	ec43 2b10 	vmov	d0, r2, r3
 800f41c:	b021      	add	sp, #132	; 0x84
 800f41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f422:	2a2b      	cmp	r2, #43	; 0x2b
 800f424:	d015      	beq.n	800f452 <_strtod_l+0xca>
 800f426:	2a2d      	cmp	r2, #45	; 0x2d
 800f428:	d004      	beq.n	800f434 <_strtod_l+0xac>
 800f42a:	2a20      	cmp	r2, #32
 800f42c:	d1ca      	bne.n	800f3c4 <_strtod_l+0x3c>
 800f42e:	3301      	adds	r3, #1
 800f430:	931b      	str	r3, [sp, #108]	; 0x6c
 800f432:	e7bf      	b.n	800f3b4 <_strtod_l+0x2c>
 800f434:	2201      	movs	r2, #1
 800f436:	920d      	str	r2, [sp, #52]	; 0x34
 800f438:	1c5a      	adds	r2, r3, #1
 800f43a:	921b      	str	r2, [sp, #108]	; 0x6c
 800f43c:	785b      	ldrb	r3, [r3, #1]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1c2      	bne.n	800f3c8 <_strtod_l+0x40>
 800f442:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f444:	961b      	str	r6, [sp, #108]	; 0x6c
 800f446:	2b00      	cmp	r3, #0
 800f448:	f040 8579 	bne.w	800ff3e <_strtod_l+0xbb6>
 800f44c:	4652      	mov	r2, sl
 800f44e:	465b      	mov	r3, fp
 800f450:	e7e2      	b.n	800f418 <_strtod_l+0x90>
 800f452:	2200      	movs	r2, #0
 800f454:	e7ef      	b.n	800f436 <_strtod_l+0xae>
 800f456:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f458:	b13a      	cbz	r2, 800f46a <_strtod_l+0xe2>
 800f45a:	2135      	movs	r1, #53	; 0x35
 800f45c:	a81e      	add	r0, sp, #120	; 0x78
 800f45e:	f002 fb7d 	bl	8011b5c <__copybits>
 800f462:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f464:	4648      	mov	r0, r9
 800f466:	f001 ffe9 	bl	801143c <_Bfree>
 800f46a:	3c01      	subs	r4, #1
 800f46c:	2c04      	cmp	r4, #4
 800f46e:	d806      	bhi.n	800f47e <_strtod_l+0xf6>
 800f470:	e8df f004 	tbb	[pc, r4]
 800f474:	1714030a 	.word	0x1714030a
 800f478:	0a          	.byte	0x0a
 800f479:	00          	.byte	0x00
 800f47a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800f47e:	0730      	lsls	r0, r6, #28
 800f480:	d5c1      	bpl.n	800f406 <_strtod_l+0x7e>
 800f482:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f486:	e7be      	b.n	800f406 <_strtod_l+0x7e>
 800f488:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800f48c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f48e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f492:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f496:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f49a:	e7f0      	b.n	800f47e <_strtod_l+0xf6>
 800f49c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800f610 <_strtod_l+0x288>
 800f4a0:	e7ed      	b.n	800f47e <_strtod_l+0xf6>
 800f4a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f4a6:	f04f 3aff 	mov.w	sl, #4294967295
 800f4aa:	e7e8      	b.n	800f47e <_strtod_l+0xf6>
 800f4ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4ae:	1c5a      	adds	r2, r3, #1
 800f4b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800f4b2:	785b      	ldrb	r3, [r3, #1]
 800f4b4:	2b30      	cmp	r3, #48	; 0x30
 800f4b6:	d0f9      	beq.n	800f4ac <_strtod_l+0x124>
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d0a4      	beq.n	800f406 <_strtod_l+0x7e>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	2500      	movs	r5, #0
 800f4c0:	9306      	str	r3, [sp, #24]
 800f4c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f4c4:	9308      	str	r3, [sp, #32]
 800f4c6:	9507      	str	r5, [sp, #28]
 800f4c8:	9505      	str	r5, [sp, #20]
 800f4ca:	220a      	movs	r2, #10
 800f4cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f4ce:	7807      	ldrb	r7, [r0, #0]
 800f4d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f4d4:	b2d9      	uxtb	r1, r3
 800f4d6:	2909      	cmp	r1, #9
 800f4d8:	d929      	bls.n	800f52e <_strtod_l+0x1a6>
 800f4da:	4622      	mov	r2, r4
 800f4dc:	f8d8 1000 	ldr.w	r1, [r8]
 800f4e0:	f7ff ff24 	bl	800f32c <strncmp>
 800f4e4:	2800      	cmp	r0, #0
 800f4e6:	d031      	beq.n	800f54c <_strtod_l+0x1c4>
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	9c05      	ldr	r4, [sp, #20]
 800f4ec:	9004      	str	r0, [sp, #16]
 800f4ee:	463b      	mov	r3, r7
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	2b65      	cmp	r3, #101	; 0x65
 800f4f4:	d001      	beq.n	800f4fa <_strtod_l+0x172>
 800f4f6:	2b45      	cmp	r3, #69	; 0x45
 800f4f8:	d114      	bne.n	800f524 <_strtod_l+0x19c>
 800f4fa:	b924      	cbnz	r4, 800f506 <_strtod_l+0x17e>
 800f4fc:	b910      	cbnz	r0, 800f504 <_strtod_l+0x17c>
 800f4fe:	9b06      	ldr	r3, [sp, #24]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d09e      	beq.n	800f442 <_strtod_l+0xba>
 800f504:	2400      	movs	r4, #0
 800f506:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f508:	1c73      	adds	r3, r6, #1
 800f50a:	931b      	str	r3, [sp, #108]	; 0x6c
 800f50c:	7873      	ldrb	r3, [r6, #1]
 800f50e:	2b2b      	cmp	r3, #43	; 0x2b
 800f510:	d078      	beq.n	800f604 <_strtod_l+0x27c>
 800f512:	2b2d      	cmp	r3, #45	; 0x2d
 800f514:	d070      	beq.n	800f5f8 <_strtod_l+0x270>
 800f516:	f04f 0c00 	mov.w	ip, #0
 800f51a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800f51e:	2f09      	cmp	r7, #9
 800f520:	d97c      	bls.n	800f61c <_strtod_l+0x294>
 800f522:	961b      	str	r6, [sp, #108]	; 0x6c
 800f524:	f04f 0e00 	mov.w	lr, #0
 800f528:	e09a      	b.n	800f660 <_strtod_l+0x2d8>
 800f52a:	2300      	movs	r3, #0
 800f52c:	e7c7      	b.n	800f4be <_strtod_l+0x136>
 800f52e:	9905      	ldr	r1, [sp, #20]
 800f530:	2908      	cmp	r1, #8
 800f532:	bfdd      	ittte	le
 800f534:	9907      	ldrle	r1, [sp, #28]
 800f536:	fb02 3301 	mlale	r3, r2, r1, r3
 800f53a:	9307      	strle	r3, [sp, #28]
 800f53c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800f540:	9b05      	ldr	r3, [sp, #20]
 800f542:	3001      	adds	r0, #1
 800f544:	3301      	adds	r3, #1
 800f546:	9305      	str	r3, [sp, #20]
 800f548:	901b      	str	r0, [sp, #108]	; 0x6c
 800f54a:	e7bf      	b.n	800f4cc <_strtod_l+0x144>
 800f54c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f54e:	191a      	adds	r2, r3, r4
 800f550:	921b      	str	r2, [sp, #108]	; 0x6c
 800f552:	9a05      	ldr	r2, [sp, #20]
 800f554:	5d1b      	ldrb	r3, [r3, r4]
 800f556:	2a00      	cmp	r2, #0
 800f558:	d037      	beq.n	800f5ca <_strtod_l+0x242>
 800f55a:	9c05      	ldr	r4, [sp, #20]
 800f55c:	4602      	mov	r2, r0
 800f55e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f562:	2909      	cmp	r1, #9
 800f564:	d913      	bls.n	800f58e <_strtod_l+0x206>
 800f566:	2101      	movs	r1, #1
 800f568:	9104      	str	r1, [sp, #16]
 800f56a:	e7c2      	b.n	800f4f2 <_strtod_l+0x16a>
 800f56c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f56e:	1c5a      	adds	r2, r3, #1
 800f570:	921b      	str	r2, [sp, #108]	; 0x6c
 800f572:	785b      	ldrb	r3, [r3, #1]
 800f574:	3001      	adds	r0, #1
 800f576:	2b30      	cmp	r3, #48	; 0x30
 800f578:	d0f8      	beq.n	800f56c <_strtod_l+0x1e4>
 800f57a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f57e:	2a08      	cmp	r2, #8
 800f580:	f200 84e4 	bhi.w	800ff4c <_strtod_l+0xbc4>
 800f584:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f586:	9208      	str	r2, [sp, #32]
 800f588:	4602      	mov	r2, r0
 800f58a:	2000      	movs	r0, #0
 800f58c:	4604      	mov	r4, r0
 800f58e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800f592:	f100 0101 	add.w	r1, r0, #1
 800f596:	d012      	beq.n	800f5be <_strtod_l+0x236>
 800f598:	440a      	add	r2, r1
 800f59a:	eb00 0c04 	add.w	ip, r0, r4
 800f59e:	4621      	mov	r1, r4
 800f5a0:	270a      	movs	r7, #10
 800f5a2:	458c      	cmp	ip, r1
 800f5a4:	d113      	bne.n	800f5ce <_strtod_l+0x246>
 800f5a6:	1821      	adds	r1, r4, r0
 800f5a8:	2908      	cmp	r1, #8
 800f5aa:	f104 0401 	add.w	r4, r4, #1
 800f5ae:	4404      	add	r4, r0
 800f5b0:	dc19      	bgt.n	800f5e6 <_strtod_l+0x25e>
 800f5b2:	9b07      	ldr	r3, [sp, #28]
 800f5b4:	210a      	movs	r1, #10
 800f5b6:	fb01 e303 	mla	r3, r1, r3, lr
 800f5ba:	9307      	str	r3, [sp, #28]
 800f5bc:	2100      	movs	r1, #0
 800f5be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f5c0:	1c58      	adds	r0, r3, #1
 800f5c2:	901b      	str	r0, [sp, #108]	; 0x6c
 800f5c4:	785b      	ldrb	r3, [r3, #1]
 800f5c6:	4608      	mov	r0, r1
 800f5c8:	e7c9      	b.n	800f55e <_strtod_l+0x1d6>
 800f5ca:	9805      	ldr	r0, [sp, #20]
 800f5cc:	e7d3      	b.n	800f576 <_strtod_l+0x1ee>
 800f5ce:	2908      	cmp	r1, #8
 800f5d0:	f101 0101 	add.w	r1, r1, #1
 800f5d4:	dc03      	bgt.n	800f5de <_strtod_l+0x256>
 800f5d6:	9b07      	ldr	r3, [sp, #28]
 800f5d8:	437b      	muls	r3, r7
 800f5da:	9307      	str	r3, [sp, #28]
 800f5dc:	e7e1      	b.n	800f5a2 <_strtod_l+0x21a>
 800f5de:	2910      	cmp	r1, #16
 800f5e0:	bfd8      	it	le
 800f5e2:	437d      	mulle	r5, r7
 800f5e4:	e7dd      	b.n	800f5a2 <_strtod_l+0x21a>
 800f5e6:	2c10      	cmp	r4, #16
 800f5e8:	bfdc      	itt	le
 800f5ea:	210a      	movle	r1, #10
 800f5ec:	fb01 e505 	mlale	r5, r1, r5, lr
 800f5f0:	e7e4      	b.n	800f5bc <_strtod_l+0x234>
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	9304      	str	r3, [sp, #16]
 800f5f6:	e781      	b.n	800f4fc <_strtod_l+0x174>
 800f5f8:	f04f 0c01 	mov.w	ip, #1
 800f5fc:	1cb3      	adds	r3, r6, #2
 800f5fe:	931b      	str	r3, [sp, #108]	; 0x6c
 800f600:	78b3      	ldrb	r3, [r6, #2]
 800f602:	e78a      	b.n	800f51a <_strtod_l+0x192>
 800f604:	f04f 0c00 	mov.w	ip, #0
 800f608:	e7f8      	b.n	800f5fc <_strtod_l+0x274>
 800f60a:	bf00      	nop
 800f60c:	08013768 	.word	0x08013768
 800f610:	7ff00000 	.word	0x7ff00000
 800f614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f616:	1c5f      	adds	r7, r3, #1
 800f618:	971b      	str	r7, [sp, #108]	; 0x6c
 800f61a:	785b      	ldrb	r3, [r3, #1]
 800f61c:	2b30      	cmp	r3, #48	; 0x30
 800f61e:	d0f9      	beq.n	800f614 <_strtod_l+0x28c>
 800f620:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800f624:	2f08      	cmp	r7, #8
 800f626:	f63f af7d 	bhi.w	800f524 <_strtod_l+0x19c>
 800f62a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f62e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f630:	930a      	str	r3, [sp, #40]	; 0x28
 800f632:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f634:	1c5f      	adds	r7, r3, #1
 800f636:	971b      	str	r7, [sp, #108]	; 0x6c
 800f638:	785b      	ldrb	r3, [r3, #1]
 800f63a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800f63e:	f1b8 0f09 	cmp.w	r8, #9
 800f642:	d937      	bls.n	800f6b4 <_strtod_l+0x32c>
 800f644:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f646:	1a7f      	subs	r7, r7, r1
 800f648:	2f08      	cmp	r7, #8
 800f64a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f64e:	dc37      	bgt.n	800f6c0 <_strtod_l+0x338>
 800f650:	45be      	cmp	lr, r7
 800f652:	bfa8      	it	ge
 800f654:	46be      	movge	lr, r7
 800f656:	f1bc 0f00 	cmp.w	ip, #0
 800f65a:	d001      	beq.n	800f660 <_strtod_l+0x2d8>
 800f65c:	f1ce 0e00 	rsb	lr, lr, #0
 800f660:	2c00      	cmp	r4, #0
 800f662:	d151      	bne.n	800f708 <_strtod_l+0x380>
 800f664:	2800      	cmp	r0, #0
 800f666:	f47f aece 	bne.w	800f406 <_strtod_l+0x7e>
 800f66a:	9a06      	ldr	r2, [sp, #24]
 800f66c:	2a00      	cmp	r2, #0
 800f66e:	f47f aeca 	bne.w	800f406 <_strtod_l+0x7e>
 800f672:	9a04      	ldr	r2, [sp, #16]
 800f674:	2a00      	cmp	r2, #0
 800f676:	f47f aee4 	bne.w	800f442 <_strtod_l+0xba>
 800f67a:	2b4e      	cmp	r3, #78	; 0x4e
 800f67c:	d027      	beq.n	800f6ce <_strtod_l+0x346>
 800f67e:	dc21      	bgt.n	800f6c4 <_strtod_l+0x33c>
 800f680:	2b49      	cmp	r3, #73	; 0x49
 800f682:	f47f aede 	bne.w	800f442 <_strtod_l+0xba>
 800f686:	49a0      	ldr	r1, [pc, #640]	; (800f908 <_strtod_l+0x580>)
 800f688:	a81b      	add	r0, sp, #108	; 0x6c
 800f68a:	f001 fdd7 	bl	801123c <__match>
 800f68e:	2800      	cmp	r0, #0
 800f690:	f43f aed7 	beq.w	800f442 <_strtod_l+0xba>
 800f694:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f696:	499d      	ldr	r1, [pc, #628]	; (800f90c <_strtod_l+0x584>)
 800f698:	3b01      	subs	r3, #1
 800f69a:	a81b      	add	r0, sp, #108	; 0x6c
 800f69c:	931b      	str	r3, [sp, #108]	; 0x6c
 800f69e:	f001 fdcd 	bl	801123c <__match>
 800f6a2:	b910      	cbnz	r0, 800f6aa <_strtod_l+0x322>
 800f6a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	931b      	str	r3, [sp, #108]	; 0x6c
 800f6aa:	f8df b274 	ldr.w	fp, [pc, #628]	; 800f920 <_strtod_l+0x598>
 800f6ae:	f04f 0a00 	mov.w	sl, #0
 800f6b2:	e6a8      	b.n	800f406 <_strtod_l+0x7e>
 800f6b4:	210a      	movs	r1, #10
 800f6b6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f6ba:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f6be:	e7b8      	b.n	800f632 <_strtod_l+0x2aa>
 800f6c0:	46be      	mov	lr, r7
 800f6c2:	e7c8      	b.n	800f656 <_strtod_l+0x2ce>
 800f6c4:	2b69      	cmp	r3, #105	; 0x69
 800f6c6:	d0de      	beq.n	800f686 <_strtod_l+0x2fe>
 800f6c8:	2b6e      	cmp	r3, #110	; 0x6e
 800f6ca:	f47f aeba 	bne.w	800f442 <_strtod_l+0xba>
 800f6ce:	4990      	ldr	r1, [pc, #576]	; (800f910 <_strtod_l+0x588>)
 800f6d0:	a81b      	add	r0, sp, #108	; 0x6c
 800f6d2:	f001 fdb3 	bl	801123c <__match>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	f43f aeb3 	beq.w	800f442 <_strtod_l+0xba>
 800f6dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	2b28      	cmp	r3, #40	; 0x28
 800f6e2:	d10e      	bne.n	800f702 <_strtod_l+0x37a>
 800f6e4:	aa1e      	add	r2, sp, #120	; 0x78
 800f6e6:	498b      	ldr	r1, [pc, #556]	; (800f914 <_strtod_l+0x58c>)
 800f6e8:	a81b      	add	r0, sp, #108	; 0x6c
 800f6ea:	f001 fdbb 	bl	8011264 <__hexnan>
 800f6ee:	2805      	cmp	r0, #5
 800f6f0:	d107      	bne.n	800f702 <_strtod_l+0x37a>
 800f6f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f6f4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800f6f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f6fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f700:	e681      	b.n	800f406 <_strtod_l+0x7e>
 800f702:	f8df b224 	ldr.w	fp, [pc, #548]	; 800f928 <_strtod_l+0x5a0>
 800f706:	e7d2      	b.n	800f6ae <_strtod_l+0x326>
 800f708:	ebae 0302 	sub.w	r3, lr, r2
 800f70c:	9306      	str	r3, [sp, #24]
 800f70e:	9b05      	ldr	r3, [sp, #20]
 800f710:	9807      	ldr	r0, [sp, #28]
 800f712:	2b00      	cmp	r3, #0
 800f714:	bf08      	it	eq
 800f716:	4623      	moveq	r3, r4
 800f718:	2c10      	cmp	r4, #16
 800f71a:	9305      	str	r3, [sp, #20]
 800f71c:	46a0      	mov	r8, r4
 800f71e:	bfa8      	it	ge
 800f720:	f04f 0810 	movge.w	r8, #16
 800f724:	f7f0 feee 	bl	8000504 <__aeabi_ui2d>
 800f728:	2c09      	cmp	r4, #9
 800f72a:	4682      	mov	sl, r0
 800f72c:	468b      	mov	fp, r1
 800f72e:	dc13      	bgt.n	800f758 <_strtod_l+0x3d0>
 800f730:	9b06      	ldr	r3, [sp, #24]
 800f732:	2b00      	cmp	r3, #0
 800f734:	f43f ae67 	beq.w	800f406 <_strtod_l+0x7e>
 800f738:	9b06      	ldr	r3, [sp, #24]
 800f73a:	dd7a      	ble.n	800f832 <_strtod_l+0x4aa>
 800f73c:	2b16      	cmp	r3, #22
 800f73e:	dc61      	bgt.n	800f804 <_strtod_l+0x47c>
 800f740:	4a75      	ldr	r2, [pc, #468]	; (800f918 <_strtod_l+0x590>)
 800f742:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800f746:	e9de 0100 	ldrd	r0, r1, [lr]
 800f74a:	4652      	mov	r2, sl
 800f74c:	465b      	mov	r3, fp
 800f74e:	f7f0 ff53 	bl	80005f8 <__aeabi_dmul>
 800f752:	4682      	mov	sl, r0
 800f754:	468b      	mov	fp, r1
 800f756:	e656      	b.n	800f406 <_strtod_l+0x7e>
 800f758:	4b6f      	ldr	r3, [pc, #444]	; (800f918 <_strtod_l+0x590>)
 800f75a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f75e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f762:	f7f0 ff49 	bl	80005f8 <__aeabi_dmul>
 800f766:	4606      	mov	r6, r0
 800f768:	4628      	mov	r0, r5
 800f76a:	460f      	mov	r7, r1
 800f76c:	f7f0 feca 	bl	8000504 <__aeabi_ui2d>
 800f770:	4602      	mov	r2, r0
 800f772:	460b      	mov	r3, r1
 800f774:	4630      	mov	r0, r6
 800f776:	4639      	mov	r1, r7
 800f778:	f7f0 fd88 	bl	800028c <__adddf3>
 800f77c:	2c0f      	cmp	r4, #15
 800f77e:	4682      	mov	sl, r0
 800f780:	468b      	mov	fp, r1
 800f782:	ddd5      	ble.n	800f730 <_strtod_l+0x3a8>
 800f784:	9b06      	ldr	r3, [sp, #24]
 800f786:	eba4 0808 	sub.w	r8, r4, r8
 800f78a:	4498      	add	r8, r3
 800f78c:	f1b8 0f00 	cmp.w	r8, #0
 800f790:	f340 8096 	ble.w	800f8c0 <_strtod_l+0x538>
 800f794:	f018 030f 	ands.w	r3, r8, #15
 800f798:	d00a      	beq.n	800f7b0 <_strtod_l+0x428>
 800f79a:	495f      	ldr	r1, [pc, #380]	; (800f918 <_strtod_l+0x590>)
 800f79c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f7a0:	4652      	mov	r2, sl
 800f7a2:	465b      	mov	r3, fp
 800f7a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f7a8:	f7f0 ff26 	bl	80005f8 <__aeabi_dmul>
 800f7ac:	4682      	mov	sl, r0
 800f7ae:	468b      	mov	fp, r1
 800f7b0:	f038 080f 	bics.w	r8, r8, #15
 800f7b4:	d073      	beq.n	800f89e <_strtod_l+0x516>
 800f7b6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f7ba:	dd47      	ble.n	800f84c <_strtod_l+0x4c4>
 800f7bc:	2400      	movs	r4, #0
 800f7be:	46a0      	mov	r8, r4
 800f7c0:	9407      	str	r4, [sp, #28]
 800f7c2:	9405      	str	r4, [sp, #20]
 800f7c4:	2322      	movs	r3, #34	; 0x22
 800f7c6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f920 <_strtod_l+0x598>
 800f7ca:	f8c9 3000 	str.w	r3, [r9]
 800f7ce:	f04f 0a00 	mov.w	sl, #0
 800f7d2:	9b07      	ldr	r3, [sp, #28]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	f43f ae16 	beq.w	800f406 <_strtod_l+0x7e>
 800f7da:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f7dc:	4648      	mov	r0, r9
 800f7de:	f001 fe2d 	bl	801143c <_Bfree>
 800f7e2:	9905      	ldr	r1, [sp, #20]
 800f7e4:	4648      	mov	r0, r9
 800f7e6:	f001 fe29 	bl	801143c <_Bfree>
 800f7ea:	4641      	mov	r1, r8
 800f7ec:	4648      	mov	r0, r9
 800f7ee:	f001 fe25 	bl	801143c <_Bfree>
 800f7f2:	9907      	ldr	r1, [sp, #28]
 800f7f4:	4648      	mov	r0, r9
 800f7f6:	f001 fe21 	bl	801143c <_Bfree>
 800f7fa:	4621      	mov	r1, r4
 800f7fc:	4648      	mov	r0, r9
 800f7fe:	f001 fe1d 	bl	801143c <_Bfree>
 800f802:	e600      	b.n	800f406 <_strtod_l+0x7e>
 800f804:	9a06      	ldr	r2, [sp, #24]
 800f806:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f80a:	4293      	cmp	r3, r2
 800f80c:	dbba      	blt.n	800f784 <_strtod_l+0x3fc>
 800f80e:	4d42      	ldr	r5, [pc, #264]	; (800f918 <_strtod_l+0x590>)
 800f810:	f1c4 040f 	rsb	r4, r4, #15
 800f814:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f818:	4652      	mov	r2, sl
 800f81a:	465b      	mov	r3, fp
 800f81c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f820:	f7f0 feea 	bl	80005f8 <__aeabi_dmul>
 800f824:	9b06      	ldr	r3, [sp, #24]
 800f826:	1b1c      	subs	r4, r3, r4
 800f828:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f82c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f830:	e78d      	b.n	800f74e <_strtod_l+0x3c6>
 800f832:	f113 0f16 	cmn.w	r3, #22
 800f836:	dba5      	blt.n	800f784 <_strtod_l+0x3fc>
 800f838:	4a37      	ldr	r2, [pc, #220]	; (800f918 <_strtod_l+0x590>)
 800f83a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800f83e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f842:	4650      	mov	r0, sl
 800f844:	4659      	mov	r1, fp
 800f846:	f7f1 f801 	bl	800084c <__aeabi_ddiv>
 800f84a:	e782      	b.n	800f752 <_strtod_l+0x3ca>
 800f84c:	2300      	movs	r3, #0
 800f84e:	4e33      	ldr	r6, [pc, #204]	; (800f91c <_strtod_l+0x594>)
 800f850:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f854:	4650      	mov	r0, sl
 800f856:	4659      	mov	r1, fp
 800f858:	461d      	mov	r5, r3
 800f85a:	f1b8 0f01 	cmp.w	r8, #1
 800f85e:	dc21      	bgt.n	800f8a4 <_strtod_l+0x51c>
 800f860:	b10b      	cbz	r3, 800f866 <_strtod_l+0x4de>
 800f862:	4682      	mov	sl, r0
 800f864:	468b      	mov	fp, r1
 800f866:	4b2d      	ldr	r3, [pc, #180]	; (800f91c <_strtod_l+0x594>)
 800f868:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f86c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f870:	4652      	mov	r2, sl
 800f872:	465b      	mov	r3, fp
 800f874:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f878:	f7f0 febe 	bl	80005f8 <__aeabi_dmul>
 800f87c:	4b28      	ldr	r3, [pc, #160]	; (800f920 <_strtod_l+0x598>)
 800f87e:	460a      	mov	r2, r1
 800f880:	400b      	ands	r3, r1
 800f882:	4928      	ldr	r1, [pc, #160]	; (800f924 <_strtod_l+0x59c>)
 800f884:	428b      	cmp	r3, r1
 800f886:	4682      	mov	sl, r0
 800f888:	d898      	bhi.n	800f7bc <_strtod_l+0x434>
 800f88a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f88e:	428b      	cmp	r3, r1
 800f890:	bf86      	itte	hi
 800f892:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f92c <_strtod_l+0x5a4>
 800f896:	f04f 3aff 	movhi.w	sl, #4294967295
 800f89a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f89e:	2300      	movs	r3, #0
 800f8a0:	9304      	str	r3, [sp, #16]
 800f8a2:	e077      	b.n	800f994 <_strtod_l+0x60c>
 800f8a4:	f018 0f01 	tst.w	r8, #1
 800f8a8:	d006      	beq.n	800f8b8 <_strtod_l+0x530>
 800f8aa:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800f8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8b2:	f7f0 fea1 	bl	80005f8 <__aeabi_dmul>
 800f8b6:	2301      	movs	r3, #1
 800f8b8:	3501      	adds	r5, #1
 800f8ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f8be:	e7cc      	b.n	800f85a <_strtod_l+0x4d2>
 800f8c0:	d0ed      	beq.n	800f89e <_strtod_l+0x516>
 800f8c2:	f1c8 0800 	rsb	r8, r8, #0
 800f8c6:	f018 020f 	ands.w	r2, r8, #15
 800f8ca:	d00a      	beq.n	800f8e2 <_strtod_l+0x55a>
 800f8cc:	4b12      	ldr	r3, [pc, #72]	; (800f918 <_strtod_l+0x590>)
 800f8ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8d2:	4650      	mov	r0, sl
 800f8d4:	4659      	mov	r1, fp
 800f8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8da:	f7f0 ffb7 	bl	800084c <__aeabi_ddiv>
 800f8de:	4682      	mov	sl, r0
 800f8e0:	468b      	mov	fp, r1
 800f8e2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f8e6:	d0da      	beq.n	800f89e <_strtod_l+0x516>
 800f8e8:	f1b8 0f1f 	cmp.w	r8, #31
 800f8ec:	dd20      	ble.n	800f930 <_strtod_l+0x5a8>
 800f8ee:	2400      	movs	r4, #0
 800f8f0:	46a0      	mov	r8, r4
 800f8f2:	9407      	str	r4, [sp, #28]
 800f8f4:	9405      	str	r4, [sp, #20]
 800f8f6:	2322      	movs	r3, #34	; 0x22
 800f8f8:	f04f 0a00 	mov.w	sl, #0
 800f8fc:	f04f 0b00 	mov.w	fp, #0
 800f900:	f8c9 3000 	str.w	r3, [r9]
 800f904:	e765      	b.n	800f7d2 <_strtod_l+0x44a>
 800f906:	bf00      	nop
 800f908:	08013731 	.word	0x08013731
 800f90c:	080137bb 	.word	0x080137bb
 800f910:	08013739 	.word	0x08013739
 800f914:	0801377c 	.word	0x0801377c
 800f918:	080137f8 	.word	0x080137f8
 800f91c:	080137d0 	.word	0x080137d0
 800f920:	7ff00000 	.word	0x7ff00000
 800f924:	7ca00000 	.word	0x7ca00000
 800f928:	fff80000 	.word	0xfff80000
 800f92c:	7fefffff 	.word	0x7fefffff
 800f930:	f018 0310 	ands.w	r3, r8, #16
 800f934:	bf18      	it	ne
 800f936:	236a      	movne	r3, #106	; 0x6a
 800f938:	4da0      	ldr	r5, [pc, #640]	; (800fbbc <_strtod_l+0x834>)
 800f93a:	9304      	str	r3, [sp, #16]
 800f93c:	4650      	mov	r0, sl
 800f93e:	4659      	mov	r1, fp
 800f940:	2300      	movs	r3, #0
 800f942:	f1b8 0f00 	cmp.w	r8, #0
 800f946:	f300 810a 	bgt.w	800fb5e <_strtod_l+0x7d6>
 800f94a:	b10b      	cbz	r3, 800f950 <_strtod_l+0x5c8>
 800f94c:	4682      	mov	sl, r0
 800f94e:	468b      	mov	fp, r1
 800f950:	9b04      	ldr	r3, [sp, #16]
 800f952:	b1bb      	cbz	r3, 800f984 <_strtod_l+0x5fc>
 800f954:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f958:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	4659      	mov	r1, fp
 800f960:	dd10      	ble.n	800f984 <_strtod_l+0x5fc>
 800f962:	2b1f      	cmp	r3, #31
 800f964:	f340 8107 	ble.w	800fb76 <_strtod_l+0x7ee>
 800f968:	2b34      	cmp	r3, #52	; 0x34
 800f96a:	bfde      	ittt	le
 800f96c:	3b20      	suble	r3, #32
 800f96e:	f04f 32ff 	movle.w	r2, #4294967295
 800f972:	fa02 f303 	lslle.w	r3, r2, r3
 800f976:	f04f 0a00 	mov.w	sl, #0
 800f97a:	bfcc      	ite	gt
 800f97c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f980:	ea03 0b01 	andle.w	fp, r3, r1
 800f984:	2200      	movs	r2, #0
 800f986:	2300      	movs	r3, #0
 800f988:	4650      	mov	r0, sl
 800f98a:	4659      	mov	r1, fp
 800f98c:	f7f1 f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f990:	2800      	cmp	r0, #0
 800f992:	d1ac      	bne.n	800f8ee <_strtod_l+0x566>
 800f994:	9b07      	ldr	r3, [sp, #28]
 800f996:	9300      	str	r3, [sp, #0]
 800f998:	9a05      	ldr	r2, [sp, #20]
 800f99a:	9908      	ldr	r1, [sp, #32]
 800f99c:	4623      	mov	r3, r4
 800f99e:	4648      	mov	r0, r9
 800f9a0:	f001 fd9e 	bl	80114e0 <__s2b>
 800f9a4:	9007      	str	r0, [sp, #28]
 800f9a6:	2800      	cmp	r0, #0
 800f9a8:	f43f af08 	beq.w	800f7bc <_strtod_l+0x434>
 800f9ac:	9a06      	ldr	r2, [sp, #24]
 800f9ae:	9b06      	ldr	r3, [sp, #24]
 800f9b0:	2a00      	cmp	r2, #0
 800f9b2:	f1c3 0300 	rsb	r3, r3, #0
 800f9b6:	bfa8      	it	ge
 800f9b8:	2300      	movge	r3, #0
 800f9ba:	930e      	str	r3, [sp, #56]	; 0x38
 800f9bc:	2400      	movs	r4, #0
 800f9be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f9c2:	9316      	str	r3, [sp, #88]	; 0x58
 800f9c4:	46a0      	mov	r8, r4
 800f9c6:	9b07      	ldr	r3, [sp, #28]
 800f9c8:	4648      	mov	r0, r9
 800f9ca:	6859      	ldr	r1, [r3, #4]
 800f9cc:	f001 fd02 	bl	80113d4 <_Balloc>
 800f9d0:	9005      	str	r0, [sp, #20]
 800f9d2:	2800      	cmp	r0, #0
 800f9d4:	f43f aef6 	beq.w	800f7c4 <_strtod_l+0x43c>
 800f9d8:	9b07      	ldr	r3, [sp, #28]
 800f9da:	691a      	ldr	r2, [r3, #16]
 800f9dc:	3202      	adds	r2, #2
 800f9de:	f103 010c 	add.w	r1, r3, #12
 800f9e2:	0092      	lsls	r2, r2, #2
 800f9e4:	300c      	adds	r0, #12
 800f9e6:	f7fe fd71 	bl	800e4cc <memcpy>
 800f9ea:	aa1e      	add	r2, sp, #120	; 0x78
 800f9ec:	a91d      	add	r1, sp, #116	; 0x74
 800f9ee:	ec4b ab10 	vmov	d0, sl, fp
 800f9f2:	4648      	mov	r0, r9
 800f9f4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f9f8:	f002 f82e 	bl	8011a58 <__d2b>
 800f9fc:	901c      	str	r0, [sp, #112]	; 0x70
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f43f aee0 	beq.w	800f7c4 <_strtod_l+0x43c>
 800fa04:	2101      	movs	r1, #1
 800fa06:	4648      	mov	r0, r9
 800fa08:	f001 fdf6 	bl	80115f8 <__i2b>
 800fa0c:	4680      	mov	r8, r0
 800fa0e:	2800      	cmp	r0, #0
 800fa10:	f43f aed8 	beq.w	800f7c4 <_strtod_l+0x43c>
 800fa14:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800fa16:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800fa18:	2e00      	cmp	r6, #0
 800fa1a:	bfab      	itete	ge
 800fa1c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800fa1e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800fa20:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800fa22:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800fa24:	bfac      	ite	ge
 800fa26:	18f7      	addge	r7, r6, r3
 800fa28:	1b9d      	sublt	r5, r3, r6
 800fa2a:	9b04      	ldr	r3, [sp, #16]
 800fa2c:	1af6      	subs	r6, r6, r3
 800fa2e:	4416      	add	r6, r2
 800fa30:	4b63      	ldr	r3, [pc, #396]	; (800fbc0 <_strtod_l+0x838>)
 800fa32:	3e01      	subs	r6, #1
 800fa34:	429e      	cmp	r6, r3
 800fa36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800fa3a:	f280 80af 	bge.w	800fb9c <_strtod_l+0x814>
 800fa3e:	1b9b      	subs	r3, r3, r6
 800fa40:	2b1f      	cmp	r3, #31
 800fa42:	eba2 0203 	sub.w	r2, r2, r3
 800fa46:	f04f 0101 	mov.w	r1, #1
 800fa4a:	f300 809b 	bgt.w	800fb84 <_strtod_l+0x7fc>
 800fa4e:	fa01 f303 	lsl.w	r3, r1, r3
 800fa52:	930f      	str	r3, [sp, #60]	; 0x3c
 800fa54:	2300      	movs	r3, #0
 800fa56:	930a      	str	r3, [sp, #40]	; 0x28
 800fa58:	18be      	adds	r6, r7, r2
 800fa5a:	9b04      	ldr	r3, [sp, #16]
 800fa5c:	42b7      	cmp	r7, r6
 800fa5e:	4415      	add	r5, r2
 800fa60:	441d      	add	r5, r3
 800fa62:	463b      	mov	r3, r7
 800fa64:	bfa8      	it	ge
 800fa66:	4633      	movge	r3, r6
 800fa68:	42ab      	cmp	r3, r5
 800fa6a:	bfa8      	it	ge
 800fa6c:	462b      	movge	r3, r5
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	bfc2      	ittt	gt
 800fa72:	1af6      	subgt	r6, r6, r3
 800fa74:	1aed      	subgt	r5, r5, r3
 800fa76:	1aff      	subgt	r7, r7, r3
 800fa78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa7a:	b1bb      	cbz	r3, 800faac <_strtod_l+0x724>
 800fa7c:	4641      	mov	r1, r8
 800fa7e:	461a      	mov	r2, r3
 800fa80:	4648      	mov	r0, r9
 800fa82:	f001 fe59 	bl	8011738 <__pow5mult>
 800fa86:	4680      	mov	r8, r0
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	f43f ae9b 	beq.w	800f7c4 <_strtod_l+0x43c>
 800fa8e:	4601      	mov	r1, r0
 800fa90:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fa92:	4648      	mov	r0, r9
 800fa94:	f001 fdb9 	bl	801160a <__multiply>
 800fa98:	900c      	str	r0, [sp, #48]	; 0x30
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	f43f ae92 	beq.w	800f7c4 <_strtod_l+0x43c>
 800faa0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800faa2:	4648      	mov	r0, r9
 800faa4:	f001 fcca 	bl	801143c <_Bfree>
 800faa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faaa:	931c      	str	r3, [sp, #112]	; 0x70
 800faac:	2e00      	cmp	r6, #0
 800faae:	dc7a      	bgt.n	800fba6 <_strtod_l+0x81e>
 800fab0:	9b06      	ldr	r3, [sp, #24]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	dd08      	ble.n	800fac8 <_strtod_l+0x740>
 800fab6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800fab8:	9905      	ldr	r1, [sp, #20]
 800faba:	4648      	mov	r0, r9
 800fabc:	f001 fe3c 	bl	8011738 <__pow5mult>
 800fac0:	9005      	str	r0, [sp, #20]
 800fac2:	2800      	cmp	r0, #0
 800fac4:	f43f ae7e 	beq.w	800f7c4 <_strtod_l+0x43c>
 800fac8:	2d00      	cmp	r5, #0
 800faca:	dd08      	ble.n	800fade <_strtod_l+0x756>
 800facc:	462a      	mov	r2, r5
 800face:	9905      	ldr	r1, [sp, #20]
 800fad0:	4648      	mov	r0, r9
 800fad2:	f001 fe7f 	bl	80117d4 <__lshift>
 800fad6:	9005      	str	r0, [sp, #20]
 800fad8:	2800      	cmp	r0, #0
 800fada:	f43f ae73 	beq.w	800f7c4 <_strtod_l+0x43c>
 800fade:	2f00      	cmp	r7, #0
 800fae0:	dd08      	ble.n	800faf4 <_strtod_l+0x76c>
 800fae2:	4641      	mov	r1, r8
 800fae4:	463a      	mov	r2, r7
 800fae6:	4648      	mov	r0, r9
 800fae8:	f001 fe74 	bl	80117d4 <__lshift>
 800faec:	4680      	mov	r8, r0
 800faee:	2800      	cmp	r0, #0
 800faf0:	f43f ae68 	beq.w	800f7c4 <_strtod_l+0x43c>
 800faf4:	9a05      	ldr	r2, [sp, #20]
 800faf6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800faf8:	4648      	mov	r0, r9
 800fafa:	f001 fed9 	bl	80118b0 <__mdiff>
 800fafe:	4604      	mov	r4, r0
 800fb00:	2800      	cmp	r0, #0
 800fb02:	f43f ae5f 	beq.w	800f7c4 <_strtod_l+0x43c>
 800fb06:	68c3      	ldr	r3, [r0, #12]
 800fb08:	930c      	str	r3, [sp, #48]	; 0x30
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	60c3      	str	r3, [r0, #12]
 800fb0e:	4641      	mov	r1, r8
 800fb10:	f001 feb4 	bl	801187c <__mcmp>
 800fb14:	2800      	cmp	r0, #0
 800fb16:	da55      	bge.n	800fbc4 <_strtod_l+0x83c>
 800fb18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fb1a:	b9e3      	cbnz	r3, 800fb56 <_strtod_l+0x7ce>
 800fb1c:	f1ba 0f00 	cmp.w	sl, #0
 800fb20:	d119      	bne.n	800fb56 <_strtod_l+0x7ce>
 800fb22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fb26:	b9b3      	cbnz	r3, 800fb56 <_strtod_l+0x7ce>
 800fb28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fb2c:	0d1b      	lsrs	r3, r3, #20
 800fb2e:	051b      	lsls	r3, r3, #20
 800fb30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800fb34:	d90f      	bls.n	800fb56 <_strtod_l+0x7ce>
 800fb36:	6963      	ldr	r3, [r4, #20]
 800fb38:	b913      	cbnz	r3, 800fb40 <_strtod_l+0x7b8>
 800fb3a:	6923      	ldr	r3, [r4, #16]
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	dd0a      	ble.n	800fb56 <_strtod_l+0x7ce>
 800fb40:	4621      	mov	r1, r4
 800fb42:	2201      	movs	r2, #1
 800fb44:	4648      	mov	r0, r9
 800fb46:	f001 fe45 	bl	80117d4 <__lshift>
 800fb4a:	4641      	mov	r1, r8
 800fb4c:	4604      	mov	r4, r0
 800fb4e:	f001 fe95 	bl	801187c <__mcmp>
 800fb52:	2800      	cmp	r0, #0
 800fb54:	dc67      	bgt.n	800fc26 <_strtod_l+0x89e>
 800fb56:	9b04      	ldr	r3, [sp, #16]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d171      	bne.n	800fc40 <_strtod_l+0x8b8>
 800fb5c:	e63d      	b.n	800f7da <_strtod_l+0x452>
 800fb5e:	f018 0f01 	tst.w	r8, #1
 800fb62:	d004      	beq.n	800fb6e <_strtod_l+0x7e6>
 800fb64:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fb68:	f7f0 fd46 	bl	80005f8 <__aeabi_dmul>
 800fb6c:	2301      	movs	r3, #1
 800fb6e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fb72:	3508      	adds	r5, #8
 800fb74:	e6e5      	b.n	800f942 <_strtod_l+0x5ba>
 800fb76:	f04f 32ff 	mov.w	r2, #4294967295
 800fb7a:	fa02 f303 	lsl.w	r3, r2, r3
 800fb7e:	ea03 0a0a 	and.w	sl, r3, sl
 800fb82:	e6ff      	b.n	800f984 <_strtod_l+0x5fc>
 800fb84:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800fb88:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800fb8c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800fb90:	36e2      	adds	r6, #226	; 0xe2
 800fb92:	fa01 f306 	lsl.w	r3, r1, r6
 800fb96:	930a      	str	r3, [sp, #40]	; 0x28
 800fb98:	910f      	str	r1, [sp, #60]	; 0x3c
 800fb9a:	e75d      	b.n	800fa58 <_strtod_l+0x6d0>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	930a      	str	r3, [sp, #40]	; 0x28
 800fba0:	2301      	movs	r3, #1
 800fba2:	930f      	str	r3, [sp, #60]	; 0x3c
 800fba4:	e758      	b.n	800fa58 <_strtod_l+0x6d0>
 800fba6:	4632      	mov	r2, r6
 800fba8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fbaa:	4648      	mov	r0, r9
 800fbac:	f001 fe12 	bl	80117d4 <__lshift>
 800fbb0:	901c      	str	r0, [sp, #112]	; 0x70
 800fbb2:	2800      	cmp	r0, #0
 800fbb4:	f47f af7c 	bne.w	800fab0 <_strtod_l+0x728>
 800fbb8:	e604      	b.n	800f7c4 <_strtod_l+0x43c>
 800fbba:	bf00      	nop
 800fbbc:	08013790 	.word	0x08013790
 800fbc0:	fffffc02 	.word	0xfffffc02
 800fbc4:	465d      	mov	r5, fp
 800fbc6:	f040 8086 	bne.w	800fcd6 <_strtod_l+0x94e>
 800fbca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fbcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fbd0:	b32a      	cbz	r2, 800fc1e <_strtod_l+0x896>
 800fbd2:	4aaf      	ldr	r2, [pc, #700]	; (800fe90 <_strtod_l+0xb08>)
 800fbd4:	4293      	cmp	r3, r2
 800fbd6:	d153      	bne.n	800fc80 <_strtod_l+0x8f8>
 800fbd8:	9b04      	ldr	r3, [sp, #16]
 800fbda:	4650      	mov	r0, sl
 800fbdc:	b1d3      	cbz	r3, 800fc14 <_strtod_l+0x88c>
 800fbde:	4aad      	ldr	r2, [pc, #692]	; (800fe94 <_strtod_l+0xb0c>)
 800fbe0:	402a      	ands	r2, r5
 800fbe2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800fbe6:	f04f 31ff 	mov.w	r1, #4294967295
 800fbea:	d816      	bhi.n	800fc1a <_strtod_l+0x892>
 800fbec:	0d12      	lsrs	r2, r2, #20
 800fbee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800fbf2:	fa01 f303 	lsl.w	r3, r1, r3
 800fbf6:	4298      	cmp	r0, r3
 800fbf8:	d142      	bne.n	800fc80 <_strtod_l+0x8f8>
 800fbfa:	4ba7      	ldr	r3, [pc, #668]	; (800fe98 <_strtod_l+0xb10>)
 800fbfc:	429d      	cmp	r5, r3
 800fbfe:	d102      	bne.n	800fc06 <_strtod_l+0x87e>
 800fc00:	3001      	adds	r0, #1
 800fc02:	f43f addf 	beq.w	800f7c4 <_strtod_l+0x43c>
 800fc06:	4ba3      	ldr	r3, [pc, #652]	; (800fe94 <_strtod_l+0xb0c>)
 800fc08:	402b      	ands	r3, r5
 800fc0a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800fc0e:	f04f 0a00 	mov.w	sl, #0
 800fc12:	e7a0      	b.n	800fb56 <_strtod_l+0x7ce>
 800fc14:	f04f 33ff 	mov.w	r3, #4294967295
 800fc18:	e7ed      	b.n	800fbf6 <_strtod_l+0x86e>
 800fc1a:	460b      	mov	r3, r1
 800fc1c:	e7eb      	b.n	800fbf6 <_strtod_l+0x86e>
 800fc1e:	bb7b      	cbnz	r3, 800fc80 <_strtod_l+0x8f8>
 800fc20:	f1ba 0f00 	cmp.w	sl, #0
 800fc24:	d12c      	bne.n	800fc80 <_strtod_l+0x8f8>
 800fc26:	9904      	ldr	r1, [sp, #16]
 800fc28:	4a9a      	ldr	r2, [pc, #616]	; (800fe94 <_strtod_l+0xb0c>)
 800fc2a:	465b      	mov	r3, fp
 800fc2c:	b1f1      	cbz	r1, 800fc6c <_strtod_l+0x8e4>
 800fc2e:	ea02 010b 	and.w	r1, r2, fp
 800fc32:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800fc36:	dc19      	bgt.n	800fc6c <_strtod_l+0x8e4>
 800fc38:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800fc3c:	f77f ae5b 	ble.w	800f8f6 <_strtod_l+0x56e>
 800fc40:	4a96      	ldr	r2, [pc, #600]	; (800fe9c <_strtod_l+0xb14>)
 800fc42:	2300      	movs	r3, #0
 800fc44:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800fc48:	4650      	mov	r0, sl
 800fc4a:	4659      	mov	r1, fp
 800fc4c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800fc50:	f7f0 fcd2 	bl	80005f8 <__aeabi_dmul>
 800fc54:	4682      	mov	sl, r0
 800fc56:	468b      	mov	fp, r1
 800fc58:	2900      	cmp	r1, #0
 800fc5a:	f47f adbe 	bne.w	800f7da <_strtod_l+0x452>
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	f47f adbb 	bne.w	800f7da <_strtod_l+0x452>
 800fc64:	2322      	movs	r3, #34	; 0x22
 800fc66:	f8c9 3000 	str.w	r3, [r9]
 800fc6a:	e5b6      	b.n	800f7da <_strtod_l+0x452>
 800fc6c:	4013      	ands	r3, r2
 800fc6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800fc72:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800fc76:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800fc7a:	f04f 3aff 	mov.w	sl, #4294967295
 800fc7e:	e76a      	b.n	800fb56 <_strtod_l+0x7ce>
 800fc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc82:	b193      	cbz	r3, 800fcaa <_strtod_l+0x922>
 800fc84:	422b      	tst	r3, r5
 800fc86:	f43f af66 	beq.w	800fb56 <_strtod_l+0x7ce>
 800fc8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fc8c:	9a04      	ldr	r2, [sp, #16]
 800fc8e:	4650      	mov	r0, sl
 800fc90:	4659      	mov	r1, fp
 800fc92:	b173      	cbz	r3, 800fcb2 <_strtod_l+0x92a>
 800fc94:	f7ff fb5c 	bl	800f350 <sulp>
 800fc98:	4602      	mov	r2, r0
 800fc9a:	460b      	mov	r3, r1
 800fc9c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fca0:	f7f0 faf4 	bl	800028c <__adddf3>
 800fca4:	4682      	mov	sl, r0
 800fca6:	468b      	mov	fp, r1
 800fca8:	e755      	b.n	800fb56 <_strtod_l+0x7ce>
 800fcaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fcac:	ea13 0f0a 	tst.w	r3, sl
 800fcb0:	e7e9      	b.n	800fc86 <_strtod_l+0x8fe>
 800fcb2:	f7ff fb4d 	bl	800f350 <sulp>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	460b      	mov	r3, r1
 800fcba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fcbe:	f7f0 fae3 	bl	8000288 <__aeabi_dsub>
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	4682      	mov	sl, r0
 800fcc8:	468b      	mov	fp, r1
 800fcca:	f7f0 fefd 	bl	8000ac8 <__aeabi_dcmpeq>
 800fcce:	2800      	cmp	r0, #0
 800fcd0:	f47f ae11 	bne.w	800f8f6 <_strtod_l+0x56e>
 800fcd4:	e73f      	b.n	800fb56 <_strtod_l+0x7ce>
 800fcd6:	4641      	mov	r1, r8
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f001 ff0c 	bl	8011af6 <__ratio>
 800fcde:	ec57 6b10 	vmov	r6, r7, d0
 800fce2:	2200      	movs	r2, #0
 800fce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fce8:	ee10 0a10 	vmov	r0, s0
 800fcec:	4639      	mov	r1, r7
 800fcee:	f7f0 feff 	bl	8000af0 <__aeabi_dcmple>
 800fcf2:	2800      	cmp	r0, #0
 800fcf4:	d077      	beq.n	800fde6 <_strtod_l+0xa5e>
 800fcf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d04a      	beq.n	800fd92 <_strtod_l+0xa0a>
 800fcfc:	4b68      	ldr	r3, [pc, #416]	; (800fea0 <_strtod_l+0xb18>)
 800fcfe:	2200      	movs	r2, #0
 800fd00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fd04:	4f66      	ldr	r7, [pc, #408]	; (800fea0 <_strtod_l+0xb18>)
 800fd06:	2600      	movs	r6, #0
 800fd08:	4b62      	ldr	r3, [pc, #392]	; (800fe94 <_strtod_l+0xb0c>)
 800fd0a:	402b      	ands	r3, r5
 800fd0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fd10:	4b64      	ldr	r3, [pc, #400]	; (800fea4 <_strtod_l+0xb1c>)
 800fd12:	429a      	cmp	r2, r3
 800fd14:	f040 80ce 	bne.w	800feb4 <_strtod_l+0xb2c>
 800fd18:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fd1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fd20:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800fd24:	ec4b ab10 	vmov	d0, sl, fp
 800fd28:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800fd2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800fd30:	f001 fe1c 	bl	801196c <__ulp>
 800fd34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fd38:	ec53 2b10 	vmov	r2, r3, d0
 800fd3c:	f7f0 fc5c 	bl	80005f8 <__aeabi_dmul>
 800fd40:	4652      	mov	r2, sl
 800fd42:	465b      	mov	r3, fp
 800fd44:	f7f0 faa2 	bl	800028c <__adddf3>
 800fd48:	460b      	mov	r3, r1
 800fd4a:	4952      	ldr	r1, [pc, #328]	; (800fe94 <_strtod_l+0xb0c>)
 800fd4c:	4a56      	ldr	r2, [pc, #344]	; (800fea8 <_strtod_l+0xb20>)
 800fd4e:	4019      	ands	r1, r3
 800fd50:	4291      	cmp	r1, r2
 800fd52:	4682      	mov	sl, r0
 800fd54:	d95b      	bls.n	800fe0e <_strtod_l+0xa86>
 800fd56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd58:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d103      	bne.n	800fd68 <_strtod_l+0x9e0>
 800fd60:	9b08      	ldr	r3, [sp, #32]
 800fd62:	3301      	adds	r3, #1
 800fd64:	f43f ad2e 	beq.w	800f7c4 <_strtod_l+0x43c>
 800fd68:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800fe98 <_strtod_l+0xb10>
 800fd6c:	f04f 3aff 	mov.w	sl, #4294967295
 800fd70:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fd72:	4648      	mov	r0, r9
 800fd74:	f001 fb62 	bl	801143c <_Bfree>
 800fd78:	9905      	ldr	r1, [sp, #20]
 800fd7a:	4648      	mov	r0, r9
 800fd7c:	f001 fb5e 	bl	801143c <_Bfree>
 800fd80:	4641      	mov	r1, r8
 800fd82:	4648      	mov	r0, r9
 800fd84:	f001 fb5a 	bl	801143c <_Bfree>
 800fd88:	4621      	mov	r1, r4
 800fd8a:	4648      	mov	r0, r9
 800fd8c:	f001 fb56 	bl	801143c <_Bfree>
 800fd90:	e619      	b.n	800f9c6 <_strtod_l+0x63e>
 800fd92:	f1ba 0f00 	cmp.w	sl, #0
 800fd96:	d11a      	bne.n	800fdce <_strtod_l+0xa46>
 800fd98:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fd9c:	b9eb      	cbnz	r3, 800fdda <_strtod_l+0xa52>
 800fd9e:	2200      	movs	r2, #0
 800fda0:	4b3f      	ldr	r3, [pc, #252]	; (800fea0 <_strtod_l+0xb18>)
 800fda2:	4630      	mov	r0, r6
 800fda4:	4639      	mov	r1, r7
 800fda6:	f7f0 fe99 	bl	8000adc <__aeabi_dcmplt>
 800fdaa:	b9c8      	cbnz	r0, 800fde0 <_strtod_l+0xa58>
 800fdac:	4630      	mov	r0, r6
 800fdae:	4639      	mov	r1, r7
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	4b3e      	ldr	r3, [pc, #248]	; (800feac <_strtod_l+0xb24>)
 800fdb4:	f7f0 fc20 	bl	80005f8 <__aeabi_dmul>
 800fdb8:	4606      	mov	r6, r0
 800fdba:	460f      	mov	r7, r1
 800fdbc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800fdc0:	9618      	str	r6, [sp, #96]	; 0x60
 800fdc2:	9319      	str	r3, [sp, #100]	; 0x64
 800fdc4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800fdc8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fdcc:	e79c      	b.n	800fd08 <_strtod_l+0x980>
 800fdce:	f1ba 0f01 	cmp.w	sl, #1
 800fdd2:	d102      	bne.n	800fdda <_strtod_l+0xa52>
 800fdd4:	2d00      	cmp	r5, #0
 800fdd6:	f43f ad8e 	beq.w	800f8f6 <_strtod_l+0x56e>
 800fdda:	2200      	movs	r2, #0
 800fddc:	4b34      	ldr	r3, [pc, #208]	; (800feb0 <_strtod_l+0xb28>)
 800fdde:	e78f      	b.n	800fd00 <_strtod_l+0x978>
 800fde0:	2600      	movs	r6, #0
 800fde2:	4f32      	ldr	r7, [pc, #200]	; (800feac <_strtod_l+0xb24>)
 800fde4:	e7ea      	b.n	800fdbc <_strtod_l+0xa34>
 800fde6:	4b31      	ldr	r3, [pc, #196]	; (800feac <_strtod_l+0xb24>)
 800fde8:	4630      	mov	r0, r6
 800fdea:	4639      	mov	r1, r7
 800fdec:	2200      	movs	r2, #0
 800fdee:	f7f0 fc03 	bl	80005f8 <__aeabi_dmul>
 800fdf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fdf4:	4606      	mov	r6, r0
 800fdf6:	460f      	mov	r7, r1
 800fdf8:	b933      	cbnz	r3, 800fe08 <_strtod_l+0xa80>
 800fdfa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdfe:	9010      	str	r0, [sp, #64]	; 0x40
 800fe00:	9311      	str	r3, [sp, #68]	; 0x44
 800fe02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fe06:	e7df      	b.n	800fdc8 <_strtod_l+0xa40>
 800fe08:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800fe0c:	e7f9      	b.n	800fe02 <_strtod_l+0xa7a>
 800fe0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fe12:	9b04      	ldr	r3, [sp, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d1ab      	bne.n	800fd70 <_strtod_l+0x9e8>
 800fe18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fe1c:	0d1b      	lsrs	r3, r3, #20
 800fe1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fe20:	051b      	lsls	r3, r3, #20
 800fe22:	429a      	cmp	r2, r3
 800fe24:	465d      	mov	r5, fp
 800fe26:	d1a3      	bne.n	800fd70 <_strtod_l+0x9e8>
 800fe28:	4639      	mov	r1, r7
 800fe2a:	4630      	mov	r0, r6
 800fe2c:	f7f0 fe94 	bl	8000b58 <__aeabi_d2iz>
 800fe30:	f7f0 fb78 	bl	8000524 <__aeabi_i2d>
 800fe34:	460b      	mov	r3, r1
 800fe36:	4602      	mov	r2, r0
 800fe38:	4639      	mov	r1, r7
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	f7f0 fa24 	bl	8000288 <__aeabi_dsub>
 800fe40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe42:	4606      	mov	r6, r0
 800fe44:	460f      	mov	r7, r1
 800fe46:	b933      	cbnz	r3, 800fe56 <_strtod_l+0xace>
 800fe48:	f1ba 0f00 	cmp.w	sl, #0
 800fe4c:	d103      	bne.n	800fe56 <_strtod_l+0xace>
 800fe4e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800fe52:	2d00      	cmp	r5, #0
 800fe54:	d06d      	beq.n	800ff32 <_strtod_l+0xbaa>
 800fe56:	a30a      	add	r3, pc, #40	; (adr r3, 800fe80 <_strtod_l+0xaf8>)
 800fe58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe5c:	4630      	mov	r0, r6
 800fe5e:	4639      	mov	r1, r7
 800fe60:	f7f0 fe3c 	bl	8000adc <__aeabi_dcmplt>
 800fe64:	2800      	cmp	r0, #0
 800fe66:	f47f acb8 	bne.w	800f7da <_strtod_l+0x452>
 800fe6a:	a307      	add	r3, pc, #28	; (adr r3, 800fe88 <_strtod_l+0xb00>)
 800fe6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe70:	4630      	mov	r0, r6
 800fe72:	4639      	mov	r1, r7
 800fe74:	f7f0 fe50 	bl	8000b18 <__aeabi_dcmpgt>
 800fe78:	2800      	cmp	r0, #0
 800fe7a:	f43f af79 	beq.w	800fd70 <_strtod_l+0x9e8>
 800fe7e:	e4ac      	b.n	800f7da <_strtod_l+0x452>
 800fe80:	94a03595 	.word	0x94a03595
 800fe84:	3fdfffff 	.word	0x3fdfffff
 800fe88:	35afe535 	.word	0x35afe535
 800fe8c:	3fe00000 	.word	0x3fe00000
 800fe90:	000fffff 	.word	0x000fffff
 800fe94:	7ff00000 	.word	0x7ff00000
 800fe98:	7fefffff 	.word	0x7fefffff
 800fe9c:	39500000 	.word	0x39500000
 800fea0:	3ff00000 	.word	0x3ff00000
 800fea4:	7fe00000 	.word	0x7fe00000
 800fea8:	7c9fffff 	.word	0x7c9fffff
 800feac:	3fe00000 	.word	0x3fe00000
 800feb0:	bff00000 	.word	0xbff00000
 800feb4:	9b04      	ldr	r3, [sp, #16]
 800feb6:	b333      	cbz	r3, 800ff06 <_strtod_l+0xb7e>
 800feb8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800feba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800febe:	d822      	bhi.n	800ff06 <_strtod_l+0xb7e>
 800fec0:	a327      	add	r3, pc, #156	; (adr r3, 800ff60 <_strtod_l+0xbd8>)
 800fec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec6:	4630      	mov	r0, r6
 800fec8:	4639      	mov	r1, r7
 800feca:	f7f0 fe11 	bl	8000af0 <__aeabi_dcmple>
 800fece:	b1a0      	cbz	r0, 800fefa <_strtod_l+0xb72>
 800fed0:	4639      	mov	r1, r7
 800fed2:	4630      	mov	r0, r6
 800fed4:	f7f0 fe68 	bl	8000ba8 <__aeabi_d2uiz>
 800fed8:	2800      	cmp	r0, #0
 800feda:	bf08      	it	eq
 800fedc:	2001      	moveq	r0, #1
 800fede:	f7f0 fb11 	bl	8000504 <__aeabi_ui2d>
 800fee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fee4:	4606      	mov	r6, r0
 800fee6:	460f      	mov	r7, r1
 800fee8:	bb03      	cbnz	r3, 800ff2c <_strtod_l+0xba4>
 800feea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800feee:	9012      	str	r0, [sp, #72]	; 0x48
 800fef0:	9313      	str	r3, [sp, #76]	; 0x4c
 800fef2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fef6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fefa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fefc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fefe:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ff02:	1a9b      	subs	r3, r3, r2
 800ff04:	930b      	str	r3, [sp, #44]	; 0x2c
 800ff06:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ff0a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ff0e:	f001 fd2d 	bl	801196c <__ulp>
 800ff12:	4650      	mov	r0, sl
 800ff14:	ec53 2b10 	vmov	r2, r3, d0
 800ff18:	4659      	mov	r1, fp
 800ff1a:	f7f0 fb6d 	bl	80005f8 <__aeabi_dmul>
 800ff1e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ff22:	f7f0 f9b3 	bl	800028c <__adddf3>
 800ff26:	4682      	mov	sl, r0
 800ff28:	468b      	mov	fp, r1
 800ff2a:	e772      	b.n	800fe12 <_strtod_l+0xa8a>
 800ff2c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ff30:	e7df      	b.n	800fef2 <_strtod_l+0xb6a>
 800ff32:	a30d      	add	r3, pc, #52	; (adr r3, 800ff68 <_strtod_l+0xbe0>)
 800ff34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff38:	f7f0 fdd0 	bl	8000adc <__aeabi_dcmplt>
 800ff3c:	e79c      	b.n	800fe78 <_strtod_l+0xaf0>
 800ff3e:	2300      	movs	r3, #0
 800ff40:	930d      	str	r3, [sp, #52]	; 0x34
 800ff42:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ff44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ff46:	6013      	str	r3, [r2, #0]
 800ff48:	f7ff ba61 	b.w	800f40e <_strtod_l+0x86>
 800ff4c:	2b65      	cmp	r3, #101	; 0x65
 800ff4e:	f04f 0200 	mov.w	r2, #0
 800ff52:	f43f ab4e 	beq.w	800f5f2 <_strtod_l+0x26a>
 800ff56:	2101      	movs	r1, #1
 800ff58:	4614      	mov	r4, r2
 800ff5a:	9104      	str	r1, [sp, #16]
 800ff5c:	f7ff bacb 	b.w	800f4f6 <_strtod_l+0x16e>
 800ff60:	ffc00000 	.word	0xffc00000
 800ff64:	41dfffff 	.word	0x41dfffff
 800ff68:	94a03595 	.word	0x94a03595
 800ff6c:	3fcfffff 	.word	0x3fcfffff

0800ff70 <_strtod_r>:
 800ff70:	4b05      	ldr	r3, [pc, #20]	; (800ff88 <_strtod_r+0x18>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	b410      	push	{r4}
 800ff76:	6a1b      	ldr	r3, [r3, #32]
 800ff78:	4c04      	ldr	r4, [pc, #16]	; (800ff8c <_strtod_r+0x1c>)
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	bf08      	it	eq
 800ff7e:	4623      	moveq	r3, r4
 800ff80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff84:	f7ff ba00 	b.w	800f388 <_strtod_l>
 800ff88:	2000017c 	.word	0x2000017c
 800ff8c:	200001e0 	.word	0x200001e0

0800ff90 <_strtol_l.isra.0>:
 800ff90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff94:	4680      	mov	r8, r0
 800ff96:	4689      	mov	r9, r1
 800ff98:	4692      	mov	sl, r2
 800ff9a:	461e      	mov	r6, r3
 800ff9c:	460f      	mov	r7, r1
 800ff9e:	463d      	mov	r5, r7
 800ffa0:	9808      	ldr	r0, [sp, #32]
 800ffa2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ffa6:	f001 f9ed 	bl	8011384 <__locale_ctype_ptr_l>
 800ffaa:	4420      	add	r0, r4
 800ffac:	7843      	ldrb	r3, [r0, #1]
 800ffae:	f013 0308 	ands.w	r3, r3, #8
 800ffb2:	d132      	bne.n	801001a <_strtol_l.isra.0+0x8a>
 800ffb4:	2c2d      	cmp	r4, #45	; 0x2d
 800ffb6:	d132      	bne.n	801001e <_strtol_l.isra.0+0x8e>
 800ffb8:	787c      	ldrb	r4, [r7, #1]
 800ffba:	1cbd      	adds	r5, r7, #2
 800ffbc:	2201      	movs	r2, #1
 800ffbe:	2e00      	cmp	r6, #0
 800ffc0:	d05d      	beq.n	801007e <_strtol_l.isra.0+0xee>
 800ffc2:	2e10      	cmp	r6, #16
 800ffc4:	d109      	bne.n	800ffda <_strtol_l.isra.0+0x4a>
 800ffc6:	2c30      	cmp	r4, #48	; 0x30
 800ffc8:	d107      	bne.n	800ffda <_strtol_l.isra.0+0x4a>
 800ffca:	782b      	ldrb	r3, [r5, #0]
 800ffcc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ffd0:	2b58      	cmp	r3, #88	; 0x58
 800ffd2:	d14f      	bne.n	8010074 <_strtol_l.isra.0+0xe4>
 800ffd4:	786c      	ldrb	r4, [r5, #1]
 800ffd6:	2610      	movs	r6, #16
 800ffd8:	3502      	adds	r5, #2
 800ffda:	2a00      	cmp	r2, #0
 800ffdc:	bf14      	ite	ne
 800ffde:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ffe2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ffe6:	2700      	movs	r7, #0
 800ffe8:	fbb1 fcf6 	udiv	ip, r1, r6
 800ffec:	4638      	mov	r0, r7
 800ffee:	fb06 1e1c 	mls	lr, r6, ip, r1
 800fff2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800fff6:	2b09      	cmp	r3, #9
 800fff8:	d817      	bhi.n	801002a <_strtol_l.isra.0+0x9a>
 800fffa:	461c      	mov	r4, r3
 800fffc:	42a6      	cmp	r6, r4
 800fffe:	dd23      	ble.n	8010048 <_strtol_l.isra.0+0xb8>
 8010000:	1c7b      	adds	r3, r7, #1
 8010002:	d007      	beq.n	8010014 <_strtol_l.isra.0+0x84>
 8010004:	4584      	cmp	ip, r0
 8010006:	d31c      	bcc.n	8010042 <_strtol_l.isra.0+0xb2>
 8010008:	d101      	bne.n	801000e <_strtol_l.isra.0+0x7e>
 801000a:	45a6      	cmp	lr, r4
 801000c:	db19      	blt.n	8010042 <_strtol_l.isra.0+0xb2>
 801000e:	fb00 4006 	mla	r0, r0, r6, r4
 8010012:	2701      	movs	r7, #1
 8010014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010018:	e7eb      	b.n	800fff2 <_strtol_l.isra.0+0x62>
 801001a:	462f      	mov	r7, r5
 801001c:	e7bf      	b.n	800ff9e <_strtol_l.isra.0+0xe>
 801001e:	2c2b      	cmp	r4, #43	; 0x2b
 8010020:	bf04      	itt	eq
 8010022:	1cbd      	addeq	r5, r7, #2
 8010024:	787c      	ldrbeq	r4, [r7, #1]
 8010026:	461a      	mov	r2, r3
 8010028:	e7c9      	b.n	800ffbe <_strtol_l.isra.0+0x2e>
 801002a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801002e:	2b19      	cmp	r3, #25
 8010030:	d801      	bhi.n	8010036 <_strtol_l.isra.0+0xa6>
 8010032:	3c37      	subs	r4, #55	; 0x37
 8010034:	e7e2      	b.n	800fffc <_strtol_l.isra.0+0x6c>
 8010036:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801003a:	2b19      	cmp	r3, #25
 801003c:	d804      	bhi.n	8010048 <_strtol_l.isra.0+0xb8>
 801003e:	3c57      	subs	r4, #87	; 0x57
 8010040:	e7dc      	b.n	800fffc <_strtol_l.isra.0+0x6c>
 8010042:	f04f 37ff 	mov.w	r7, #4294967295
 8010046:	e7e5      	b.n	8010014 <_strtol_l.isra.0+0x84>
 8010048:	1c7b      	adds	r3, r7, #1
 801004a:	d108      	bne.n	801005e <_strtol_l.isra.0+0xce>
 801004c:	2322      	movs	r3, #34	; 0x22
 801004e:	f8c8 3000 	str.w	r3, [r8]
 8010052:	4608      	mov	r0, r1
 8010054:	f1ba 0f00 	cmp.w	sl, #0
 8010058:	d107      	bne.n	801006a <_strtol_l.isra.0+0xda>
 801005a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801005e:	b102      	cbz	r2, 8010062 <_strtol_l.isra.0+0xd2>
 8010060:	4240      	negs	r0, r0
 8010062:	f1ba 0f00 	cmp.w	sl, #0
 8010066:	d0f8      	beq.n	801005a <_strtol_l.isra.0+0xca>
 8010068:	b10f      	cbz	r7, 801006e <_strtol_l.isra.0+0xde>
 801006a:	f105 39ff 	add.w	r9, r5, #4294967295
 801006e:	f8ca 9000 	str.w	r9, [sl]
 8010072:	e7f2      	b.n	801005a <_strtol_l.isra.0+0xca>
 8010074:	2430      	movs	r4, #48	; 0x30
 8010076:	2e00      	cmp	r6, #0
 8010078:	d1af      	bne.n	800ffda <_strtol_l.isra.0+0x4a>
 801007a:	2608      	movs	r6, #8
 801007c:	e7ad      	b.n	800ffda <_strtol_l.isra.0+0x4a>
 801007e:	2c30      	cmp	r4, #48	; 0x30
 8010080:	d0a3      	beq.n	800ffca <_strtol_l.isra.0+0x3a>
 8010082:	260a      	movs	r6, #10
 8010084:	e7a9      	b.n	800ffda <_strtol_l.isra.0+0x4a>
	...

08010088 <_strtol_r>:
 8010088:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801008a:	4c06      	ldr	r4, [pc, #24]	; (80100a4 <_strtol_r+0x1c>)
 801008c:	4d06      	ldr	r5, [pc, #24]	; (80100a8 <_strtol_r+0x20>)
 801008e:	6824      	ldr	r4, [r4, #0]
 8010090:	6a24      	ldr	r4, [r4, #32]
 8010092:	2c00      	cmp	r4, #0
 8010094:	bf08      	it	eq
 8010096:	462c      	moveq	r4, r5
 8010098:	9400      	str	r4, [sp, #0]
 801009a:	f7ff ff79 	bl	800ff90 <_strtol_l.isra.0>
 801009e:	b003      	add	sp, #12
 80100a0:	bd30      	pop	{r4, r5, pc}
 80100a2:	bf00      	nop
 80100a4:	2000017c 	.word	0x2000017c
 80100a8:	200001e0 	.word	0x200001e0

080100ac <quorem>:
 80100ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b0:	6903      	ldr	r3, [r0, #16]
 80100b2:	690c      	ldr	r4, [r1, #16]
 80100b4:	42a3      	cmp	r3, r4
 80100b6:	4680      	mov	r8, r0
 80100b8:	f2c0 8082 	blt.w	80101c0 <quorem+0x114>
 80100bc:	3c01      	subs	r4, #1
 80100be:	f101 0714 	add.w	r7, r1, #20
 80100c2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80100c6:	f100 0614 	add.w	r6, r0, #20
 80100ca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80100ce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80100d2:	eb06 030c 	add.w	r3, r6, ip
 80100d6:	3501      	adds	r5, #1
 80100d8:	eb07 090c 	add.w	r9, r7, ip
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	fbb0 f5f5 	udiv	r5, r0, r5
 80100e2:	b395      	cbz	r5, 801014a <quorem+0x9e>
 80100e4:	f04f 0a00 	mov.w	sl, #0
 80100e8:	4638      	mov	r0, r7
 80100ea:	46b6      	mov	lr, r6
 80100ec:	46d3      	mov	fp, sl
 80100ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80100f2:	b293      	uxth	r3, r2
 80100f4:	fb05 a303 	mla	r3, r5, r3, sl
 80100f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	ebab 0303 	sub.w	r3, fp, r3
 8010102:	0c12      	lsrs	r2, r2, #16
 8010104:	f8de b000 	ldr.w	fp, [lr]
 8010108:	fb05 a202 	mla	r2, r5, r2, sl
 801010c:	fa13 f38b 	uxtah	r3, r3, fp
 8010110:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8010114:	fa1f fb82 	uxth.w	fp, r2
 8010118:	f8de 2000 	ldr.w	r2, [lr]
 801011c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8010120:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010124:	b29b      	uxth	r3, r3
 8010126:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801012a:	4581      	cmp	r9, r0
 801012c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8010130:	f84e 3b04 	str.w	r3, [lr], #4
 8010134:	d2db      	bcs.n	80100ee <quorem+0x42>
 8010136:	f856 300c 	ldr.w	r3, [r6, ip]
 801013a:	b933      	cbnz	r3, 801014a <quorem+0x9e>
 801013c:	9b01      	ldr	r3, [sp, #4]
 801013e:	3b04      	subs	r3, #4
 8010140:	429e      	cmp	r6, r3
 8010142:	461a      	mov	r2, r3
 8010144:	d330      	bcc.n	80101a8 <quorem+0xfc>
 8010146:	f8c8 4010 	str.w	r4, [r8, #16]
 801014a:	4640      	mov	r0, r8
 801014c:	f001 fb96 	bl	801187c <__mcmp>
 8010150:	2800      	cmp	r0, #0
 8010152:	db25      	blt.n	80101a0 <quorem+0xf4>
 8010154:	3501      	adds	r5, #1
 8010156:	4630      	mov	r0, r6
 8010158:	f04f 0c00 	mov.w	ip, #0
 801015c:	f857 2b04 	ldr.w	r2, [r7], #4
 8010160:	f8d0 e000 	ldr.w	lr, [r0]
 8010164:	b293      	uxth	r3, r2
 8010166:	ebac 0303 	sub.w	r3, ip, r3
 801016a:	0c12      	lsrs	r2, r2, #16
 801016c:	fa13 f38e 	uxtah	r3, r3, lr
 8010170:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010174:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010178:	b29b      	uxth	r3, r3
 801017a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801017e:	45b9      	cmp	r9, r7
 8010180:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010184:	f840 3b04 	str.w	r3, [r0], #4
 8010188:	d2e8      	bcs.n	801015c <quorem+0xb0>
 801018a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801018e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010192:	b92a      	cbnz	r2, 80101a0 <quorem+0xf4>
 8010194:	3b04      	subs	r3, #4
 8010196:	429e      	cmp	r6, r3
 8010198:	461a      	mov	r2, r3
 801019a:	d30b      	bcc.n	80101b4 <quorem+0x108>
 801019c:	f8c8 4010 	str.w	r4, [r8, #16]
 80101a0:	4628      	mov	r0, r5
 80101a2:	b003      	add	sp, #12
 80101a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101a8:	6812      	ldr	r2, [r2, #0]
 80101aa:	3b04      	subs	r3, #4
 80101ac:	2a00      	cmp	r2, #0
 80101ae:	d1ca      	bne.n	8010146 <quorem+0x9a>
 80101b0:	3c01      	subs	r4, #1
 80101b2:	e7c5      	b.n	8010140 <quorem+0x94>
 80101b4:	6812      	ldr	r2, [r2, #0]
 80101b6:	3b04      	subs	r3, #4
 80101b8:	2a00      	cmp	r2, #0
 80101ba:	d1ef      	bne.n	801019c <quorem+0xf0>
 80101bc:	3c01      	subs	r4, #1
 80101be:	e7ea      	b.n	8010196 <quorem+0xea>
 80101c0:	2000      	movs	r0, #0
 80101c2:	e7ee      	b.n	80101a2 <quorem+0xf6>
 80101c4:	0000      	movs	r0, r0
	...

080101c8 <_dtoa_r>:
 80101c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101cc:	ec57 6b10 	vmov	r6, r7, d0
 80101d0:	b097      	sub	sp, #92	; 0x5c
 80101d2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80101d4:	9106      	str	r1, [sp, #24]
 80101d6:	4604      	mov	r4, r0
 80101d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80101da:	9312      	str	r3, [sp, #72]	; 0x48
 80101dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80101e0:	e9cd 6700 	strd	r6, r7, [sp]
 80101e4:	b93d      	cbnz	r5, 80101f6 <_dtoa_r+0x2e>
 80101e6:	2010      	movs	r0, #16
 80101e8:	f7fe f960 	bl	800e4ac <malloc>
 80101ec:	6260      	str	r0, [r4, #36]	; 0x24
 80101ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80101f2:	6005      	str	r5, [r0, #0]
 80101f4:	60c5      	str	r5, [r0, #12]
 80101f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101f8:	6819      	ldr	r1, [r3, #0]
 80101fa:	b151      	cbz	r1, 8010212 <_dtoa_r+0x4a>
 80101fc:	685a      	ldr	r2, [r3, #4]
 80101fe:	604a      	str	r2, [r1, #4]
 8010200:	2301      	movs	r3, #1
 8010202:	4093      	lsls	r3, r2
 8010204:	608b      	str	r3, [r1, #8]
 8010206:	4620      	mov	r0, r4
 8010208:	f001 f918 	bl	801143c <_Bfree>
 801020c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801020e:	2200      	movs	r2, #0
 8010210:	601a      	str	r2, [r3, #0]
 8010212:	1e3b      	subs	r3, r7, #0
 8010214:	bfbb      	ittet	lt
 8010216:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801021a:	9301      	strlt	r3, [sp, #4]
 801021c:	2300      	movge	r3, #0
 801021e:	2201      	movlt	r2, #1
 8010220:	bfac      	ite	ge
 8010222:	f8c8 3000 	strge.w	r3, [r8]
 8010226:	f8c8 2000 	strlt.w	r2, [r8]
 801022a:	4baf      	ldr	r3, [pc, #700]	; (80104e8 <_dtoa_r+0x320>)
 801022c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8010230:	ea33 0308 	bics.w	r3, r3, r8
 8010234:	d114      	bne.n	8010260 <_dtoa_r+0x98>
 8010236:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010238:	f242 730f 	movw	r3, #9999	; 0x270f
 801023c:	6013      	str	r3, [r2, #0]
 801023e:	9b00      	ldr	r3, [sp, #0]
 8010240:	b923      	cbnz	r3, 801024c <_dtoa_r+0x84>
 8010242:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8010246:	2800      	cmp	r0, #0
 8010248:	f000 8542 	beq.w	8010cd0 <_dtoa_r+0xb08>
 801024c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801024e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80104fc <_dtoa_r+0x334>
 8010252:	2b00      	cmp	r3, #0
 8010254:	f000 8544 	beq.w	8010ce0 <_dtoa_r+0xb18>
 8010258:	f10b 0303 	add.w	r3, fp, #3
 801025c:	f000 bd3e 	b.w	8010cdc <_dtoa_r+0xb14>
 8010260:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010264:	2200      	movs	r2, #0
 8010266:	2300      	movs	r3, #0
 8010268:	4630      	mov	r0, r6
 801026a:	4639      	mov	r1, r7
 801026c:	f7f0 fc2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010270:	4681      	mov	r9, r0
 8010272:	b168      	cbz	r0, 8010290 <_dtoa_r+0xc8>
 8010274:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010276:	2301      	movs	r3, #1
 8010278:	6013      	str	r3, [r2, #0]
 801027a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801027c:	2b00      	cmp	r3, #0
 801027e:	f000 8524 	beq.w	8010cca <_dtoa_r+0xb02>
 8010282:	4b9a      	ldr	r3, [pc, #616]	; (80104ec <_dtoa_r+0x324>)
 8010284:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010286:	f103 3bff 	add.w	fp, r3, #4294967295
 801028a:	6013      	str	r3, [r2, #0]
 801028c:	f000 bd28 	b.w	8010ce0 <_dtoa_r+0xb18>
 8010290:	aa14      	add	r2, sp, #80	; 0x50
 8010292:	a915      	add	r1, sp, #84	; 0x54
 8010294:	ec47 6b10 	vmov	d0, r6, r7
 8010298:	4620      	mov	r0, r4
 801029a:	f001 fbdd 	bl	8011a58 <__d2b>
 801029e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80102a2:	9004      	str	r0, [sp, #16]
 80102a4:	2d00      	cmp	r5, #0
 80102a6:	d07c      	beq.n	80103a2 <_dtoa_r+0x1da>
 80102a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80102ac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80102b0:	46b2      	mov	sl, r6
 80102b2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80102b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80102ba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80102be:	2200      	movs	r2, #0
 80102c0:	4b8b      	ldr	r3, [pc, #556]	; (80104f0 <_dtoa_r+0x328>)
 80102c2:	4650      	mov	r0, sl
 80102c4:	4659      	mov	r1, fp
 80102c6:	f7ef ffdf 	bl	8000288 <__aeabi_dsub>
 80102ca:	a381      	add	r3, pc, #516	; (adr r3, 80104d0 <_dtoa_r+0x308>)
 80102cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d0:	f7f0 f992 	bl	80005f8 <__aeabi_dmul>
 80102d4:	a380      	add	r3, pc, #512	; (adr r3, 80104d8 <_dtoa_r+0x310>)
 80102d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102da:	f7ef ffd7 	bl	800028c <__adddf3>
 80102de:	4606      	mov	r6, r0
 80102e0:	4628      	mov	r0, r5
 80102e2:	460f      	mov	r7, r1
 80102e4:	f7f0 f91e 	bl	8000524 <__aeabi_i2d>
 80102e8:	a37d      	add	r3, pc, #500	; (adr r3, 80104e0 <_dtoa_r+0x318>)
 80102ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ee:	f7f0 f983 	bl	80005f8 <__aeabi_dmul>
 80102f2:	4602      	mov	r2, r0
 80102f4:	460b      	mov	r3, r1
 80102f6:	4630      	mov	r0, r6
 80102f8:	4639      	mov	r1, r7
 80102fa:	f7ef ffc7 	bl	800028c <__adddf3>
 80102fe:	4606      	mov	r6, r0
 8010300:	460f      	mov	r7, r1
 8010302:	f7f0 fc29 	bl	8000b58 <__aeabi_d2iz>
 8010306:	2200      	movs	r2, #0
 8010308:	4682      	mov	sl, r0
 801030a:	2300      	movs	r3, #0
 801030c:	4630      	mov	r0, r6
 801030e:	4639      	mov	r1, r7
 8010310:	f7f0 fbe4 	bl	8000adc <__aeabi_dcmplt>
 8010314:	b148      	cbz	r0, 801032a <_dtoa_r+0x162>
 8010316:	4650      	mov	r0, sl
 8010318:	f7f0 f904 	bl	8000524 <__aeabi_i2d>
 801031c:	4632      	mov	r2, r6
 801031e:	463b      	mov	r3, r7
 8010320:	f7f0 fbd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010324:	b908      	cbnz	r0, 801032a <_dtoa_r+0x162>
 8010326:	f10a 3aff 	add.w	sl, sl, #4294967295
 801032a:	f1ba 0f16 	cmp.w	sl, #22
 801032e:	d859      	bhi.n	80103e4 <_dtoa_r+0x21c>
 8010330:	4970      	ldr	r1, [pc, #448]	; (80104f4 <_dtoa_r+0x32c>)
 8010332:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8010336:	e9dd 2300 	ldrd	r2, r3, [sp]
 801033a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801033e:	f7f0 fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 8010342:	2800      	cmp	r0, #0
 8010344:	d050      	beq.n	80103e8 <_dtoa_r+0x220>
 8010346:	f10a 3aff 	add.w	sl, sl, #4294967295
 801034a:	2300      	movs	r3, #0
 801034c:	930f      	str	r3, [sp, #60]	; 0x3c
 801034e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010350:	1b5d      	subs	r5, r3, r5
 8010352:	f1b5 0801 	subs.w	r8, r5, #1
 8010356:	bf49      	itett	mi
 8010358:	f1c5 0301 	rsbmi	r3, r5, #1
 801035c:	2300      	movpl	r3, #0
 801035e:	9305      	strmi	r3, [sp, #20]
 8010360:	f04f 0800 	movmi.w	r8, #0
 8010364:	bf58      	it	pl
 8010366:	9305      	strpl	r3, [sp, #20]
 8010368:	f1ba 0f00 	cmp.w	sl, #0
 801036c:	db3e      	blt.n	80103ec <_dtoa_r+0x224>
 801036e:	2300      	movs	r3, #0
 8010370:	44d0      	add	r8, sl
 8010372:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8010376:	9307      	str	r3, [sp, #28]
 8010378:	9b06      	ldr	r3, [sp, #24]
 801037a:	2b09      	cmp	r3, #9
 801037c:	f200 8090 	bhi.w	80104a0 <_dtoa_r+0x2d8>
 8010380:	2b05      	cmp	r3, #5
 8010382:	bfc4      	itt	gt
 8010384:	3b04      	subgt	r3, #4
 8010386:	9306      	strgt	r3, [sp, #24]
 8010388:	9b06      	ldr	r3, [sp, #24]
 801038a:	f1a3 0302 	sub.w	r3, r3, #2
 801038e:	bfcc      	ite	gt
 8010390:	2500      	movgt	r5, #0
 8010392:	2501      	movle	r5, #1
 8010394:	2b03      	cmp	r3, #3
 8010396:	f200 808f 	bhi.w	80104b8 <_dtoa_r+0x2f0>
 801039a:	e8df f003 	tbb	[pc, r3]
 801039e:	7f7d      	.short	0x7f7d
 80103a0:	7131      	.short	0x7131
 80103a2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80103a6:	441d      	add	r5, r3
 80103a8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80103ac:	2820      	cmp	r0, #32
 80103ae:	dd13      	ble.n	80103d8 <_dtoa_r+0x210>
 80103b0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80103b4:	9b00      	ldr	r3, [sp, #0]
 80103b6:	fa08 f800 	lsl.w	r8, r8, r0
 80103ba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80103be:	fa23 f000 	lsr.w	r0, r3, r0
 80103c2:	ea48 0000 	orr.w	r0, r8, r0
 80103c6:	f7f0 f89d 	bl	8000504 <__aeabi_ui2d>
 80103ca:	2301      	movs	r3, #1
 80103cc:	4682      	mov	sl, r0
 80103ce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80103d2:	3d01      	subs	r5, #1
 80103d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80103d6:	e772      	b.n	80102be <_dtoa_r+0xf6>
 80103d8:	9b00      	ldr	r3, [sp, #0]
 80103da:	f1c0 0020 	rsb	r0, r0, #32
 80103de:	fa03 f000 	lsl.w	r0, r3, r0
 80103e2:	e7f0      	b.n	80103c6 <_dtoa_r+0x1fe>
 80103e4:	2301      	movs	r3, #1
 80103e6:	e7b1      	b.n	801034c <_dtoa_r+0x184>
 80103e8:	900f      	str	r0, [sp, #60]	; 0x3c
 80103ea:	e7b0      	b.n	801034e <_dtoa_r+0x186>
 80103ec:	9b05      	ldr	r3, [sp, #20]
 80103ee:	eba3 030a 	sub.w	r3, r3, sl
 80103f2:	9305      	str	r3, [sp, #20]
 80103f4:	f1ca 0300 	rsb	r3, sl, #0
 80103f8:	9307      	str	r3, [sp, #28]
 80103fa:	2300      	movs	r3, #0
 80103fc:	930e      	str	r3, [sp, #56]	; 0x38
 80103fe:	e7bb      	b.n	8010378 <_dtoa_r+0x1b0>
 8010400:	2301      	movs	r3, #1
 8010402:	930a      	str	r3, [sp, #40]	; 0x28
 8010404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010406:	2b00      	cmp	r3, #0
 8010408:	dd59      	ble.n	80104be <_dtoa_r+0x2f6>
 801040a:	9302      	str	r3, [sp, #8]
 801040c:	4699      	mov	r9, r3
 801040e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010410:	2200      	movs	r2, #0
 8010412:	6072      	str	r2, [r6, #4]
 8010414:	2204      	movs	r2, #4
 8010416:	f102 0014 	add.w	r0, r2, #20
 801041a:	4298      	cmp	r0, r3
 801041c:	6871      	ldr	r1, [r6, #4]
 801041e:	d953      	bls.n	80104c8 <_dtoa_r+0x300>
 8010420:	4620      	mov	r0, r4
 8010422:	f000 ffd7 	bl	80113d4 <_Balloc>
 8010426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010428:	6030      	str	r0, [r6, #0]
 801042a:	f1b9 0f0e 	cmp.w	r9, #14
 801042e:	f8d3 b000 	ldr.w	fp, [r3]
 8010432:	f200 80e6 	bhi.w	8010602 <_dtoa_r+0x43a>
 8010436:	2d00      	cmp	r5, #0
 8010438:	f000 80e3 	beq.w	8010602 <_dtoa_r+0x43a>
 801043c:	ed9d 7b00 	vldr	d7, [sp]
 8010440:	f1ba 0f00 	cmp.w	sl, #0
 8010444:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010448:	dd74      	ble.n	8010534 <_dtoa_r+0x36c>
 801044a:	4a2a      	ldr	r2, [pc, #168]	; (80104f4 <_dtoa_r+0x32c>)
 801044c:	f00a 030f 	and.w	r3, sl, #15
 8010450:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010454:	ed93 7b00 	vldr	d7, [r3]
 8010458:	ea4f 162a 	mov.w	r6, sl, asr #4
 801045c:	06f0      	lsls	r0, r6, #27
 801045e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010462:	d565      	bpl.n	8010530 <_dtoa_r+0x368>
 8010464:	4b24      	ldr	r3, [pc, #144]	; (80104f8 <_dtoa_r+0x330>)
 8010466:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801046a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801046e:	f7f0 f9ed 	bl	800084c <__aeabi_ddiv>
 8010472:	e9cd 0100 	strd	r0, r1, [sp]
 8010476:	f006 060f 	and.w	r6, r6, #15
 801047a:	2503      	movs	r5, #3
 801047c:	4f1e      	ldr	r7, [pc, #120]	; (80104f8 <_dtoa_r+0x330>)
 801047e:	e04c      	b.n	801051a <_dtoa_r+0x352>
 8010480:	2301      	movs	r3, #1
 8010482:	930a      	str	r3, [sp, #40]	; 0x28
 8010484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010486:	4453      	add	r3, sl
 8010488:	f103 0901 	add.w	r9, r3, #1
 801048c:	9302      	str	r3, [sp, #8]
 801048e:	464b      	mov	r3, r9
 8010490:	2b01      	cmp	r3, #1
 8010492:	bfb8      	it	lt
 8010494:	2301      	movlt	r3, #1
 8010496:	e7ba      	b.n	801040e <_dtoa_r+0x246>
 8010498:	2300      	movs	r3, #0
 801049a:	e7b2      	b.n	8010402 <_dtoa_r+0x23a>
 801049c:	2300      	movs	r3, #0
 801049e:	e7f0      	b.n	8010482 <_dtoa_r+0x2ba>
 80104a0:	2501      	movs	r5, #1
 80104a2:	2300      	movs	r3, #0
 80104a4:	9306      	str	r3, [sp, #24]
 80104a6:	950a      	str	r5, [sp, #40]	; 0x28
 80104a8:	f04f 33ff 	mov.w	r3, #4294967295
 80104ac:	9302      	str	r3, [sp, #8]
 80104ae:	4699      	mov	r9, r3
 80104b0:	2200      	movs	r2, #0
 80104b2:	2312      	movs	r3, #18
 80104b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80104b6:	e7aa      	b.n	801040e <_dtoa_r+0x246>
 80104b8:	2301      	movs	r3, #1
 80104ba:	930a      	str	r3, [sp, #40]	; 0x28
 80104bc:	e7f4      	b.n	80104a8 <_dtoa_r+0x2e0>
 80104be:	2301      	movs	r3, #1
 80104c0:	9302      	str	r3, [sp, #8]
 80104c2:	4699      	mov	r9, r3
 80104c4:	461a      	mov	r2, r3
 80104c6:	e7f5      	b.n	80104b4 <_dtoa_r+0x2ec>
 80104c8:	3101      	adds	r1, #1
 80104ca:	6071      	str	r1, [r6, #4]
 80104cc:	0052      	lsls	r2, r2, #1
 80104ce:	e7a2      	b.n	8010416 <_dtoa_r+0x24e>
 80104d0:	636f4361 	.word	0x636f4361
 80104d4:	3fd287a7 	.word	0x3fd287a7
 80104d8:	8b60c8b3 	.word	0x8b60c8b3
 80104dc:	3fc68a28 	.word	0x3fc68a28
 80104e0:	509f79fb 	.word	0x509f79fb
 80104e4:	3fd34413 	.word	0x3fd34413
 80104e8:	7ff00000 	.word	0x7ff00000
 80104ec:	0801373d 	.word	0x0801373d
 80104f0:	3ff80000 	.word	0x3ff80000
 80104f4:	080137f8 	.word	0x080137f8
 80104f8:	080137d0 	.word	0x080137d0
 80104fc:	080137c1 	.word	0x080137c1
 8010500:	07f1      	lsls	r1, r6, #31
 8010502:	d508      	bpl.n	8010516 <_dtoa_r+0x34e>
 8010504:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010508:	e9d7 2300 	ldrd	r2, r3, [r7]
 801050c:	f7f0 f874 	bl	80005f8 <__aeabi_dmul>
 8010510:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010514:	3501      	adds	r5, #1
 8010516:	1076      	asrs	r6, r6, #1
 8010518:	3708      	adds	r7, #8
 801051a:	2e00      	cmp	r6, #0
 801051c:	d1f0      	bne.n	8010500 <_dtoa_r+0x338>
 801051e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010522:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010526:	f7f0 f991 	bl	800084c <__aeabi_ddiv>
 801052a:	e9cd 0100 	strd	r0, r1, [sp]
 801052e:	e01a      	b.n	8010566 <_dtoa_r+0x39e>
 8010530:	2502      	movs	r5, #2
 8010532:	e7a3      	b.n	801047c <_dtoa_r+0x2b4>
 8010534:	f000 80a0 	beq.w	8010678 <_dtoa_r+0x4b0>
 8010538:	f1ca 0600 	rsb	r6, sl, #0
 801053c:	4b9f      	ldr	r3, [pc, #636]	; (80107bc <_dtoa_r+0x5f4>)
 801053e:	4fa0      	ldr	r7, [pc, #640]	; (80107c0 <_dtoa_r+0x5f8>)
 8010540:	f006 020f 	and.w	r2, r6, #15
 8010544:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801054c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010550:	f7f0 f852 	bl	80005f8 <__aeabi_dmul>
 8010554:	e9cd 0100 	strd	r0, r1, [sp]
 8010558:	1136      	asrs	r6, r6, #4
 801055a:	2300      	movs	r3, #0
 801055c:	2502      	movs	r5, #2
 801055e:	2e00      	cmp	r6, #0
 8010560:	d17f      	bne.n	8010662 <_dtoa_r+0x49a>
 8010562:	2b00      	cmp	r3, #0
 8010564:	d1e1      	bne.n	801052a <_dtoa_r+0x362>
 8010566:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010568:	2b00      	cmp	r3, #0
 801056a:	f000 8087 	beq.w	801067c <_dtoa_r+0x4b4>
 801056e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010572:	2200      	movs	r2, #0
 8010574:	4b93      	ldr	r3, [pc, #588]	; (80107c4 <_dtoa_r+0x5fc>)
 8010576:	4630      	mov	r0, r6
 8010578:	4639      	mov	r1, r7
 801057a:	f7f0 faaf 	bl	8000adc <__aeabi_dcmplt>
 801057e:	2800      	cmp	r0, #0
 8010580:	d07c      	beq.n	801067c <_dtoa_r+0x4b4>
 8010582:	f1b9 0f00 	cmp.w	r9, #0
 8010586:	d079      	beq.n	801067c <_dtoa_r+0x4b4>
 8010588:	9b02      	ldr	r3, [sp, #8]
 801058a:	2b00      	cmp	r3, #0
 801058c:	dd35      	ble.n	80105fa <_dtoa_r+0x432>
 801058e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8010592:	9308      	str	r3, [sp, #32]
 8010594:	4639      	mov	r1, r7
 8010596:	2200      	movs	r2, #0
 8010598:	4b8b      	ldr	r3, [pc, #556]	; (80107c8 <_dtoa_r+0x600>)
 801059a:	4630      	mov	r0, r6
 801059c:	f7f0 f82c 	bl	80005f8 <__aeabi_dmul>
 80105a0:	e9cd 0100 	strd	r0, r1, [sp]
 80105a4:	9f02      	ldr	r7, [sp, #8]
 80105a6:	3501      	adds	r5, #1
 80105a8:	4628      	mov	r0, r5
 80105aa:	f7ef ffbb 	bl	8000524 <__aeabi_i2d>
 80105ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105b2:	f7f0 f821 	bl	80005f8 <__aeabi_dmul>
 80105b6:	2200      	movs	r2, #0
 80105b8:	4b84      	ldr	r3, [pc, #528]	; (80107cc <_dtoa_r+0x604>)
 80105ba:	f7ef fe67 	bl	800028c <__adddf3>
 80105be:	4605      	mov	r5, r0
 80105c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80105c4:	2f00      	cmp	r7, #0
 80105c6:	d15d      	bne.n	8010684 <_dtoa_r+0x4bc>
 80105c8:	2200      	movs	r2, #0
 80105ca:	4b81      	ldr	r3, [pc, #516]	; (80107d0 <_dtoa_r+0x608>)
 80105cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105d0:	f7ef fe5a 	bl	8000288 <__aeabi_dsub>
 80105d4:	462a      	mov	r2, r5
 80105d6:	4633      	mov	r3, r6
 80105d8:	e9cd 0100 	strd	r0, r1, [sp]
 80105dc:	f7f0 fa9c 	bl	8000b18 <__aeabi_dcmpgt>
 80105e0:	2800      	cmp	r0, #0
 80105e2:	f040 8288 	bne.w	8010af6 <_dtoa_r+0x92e>
 80105e6:	462a      	mov	r2, r5
 80105e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80105ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80105f0:	f7f0 fa74 	bl	8000adc <__aeabi_dcmplt>
 80105f4:	2800      	cmp	r0, #0
 80105f6:	f040 827c 	bne.w	8010af2 <_dtoa_r+0x92a>
 80105fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80105fe:	e9cd 2300 	strd	r2, r3, [sp]
 8010602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010604:	2b00      	cmp	r3, #0
 8010606:	f2c0 8150 	blt.w	80108aa <_dtoa_r+0x6e2>
 801060a:	f1ba 0f0e 	cmp.w	sl, #14
 801060e:	f300 814c 	bgt.w	80108aa <_dtoa_r+0x6e2>
 8010612:	4b6a      	ldr	r3, [pc, #424]	; (80107bc <_dtoa_r+0x5f4>)
 8010614:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010618:	ed93 7b00 	vldr	d7, [r3]
 801061c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801061e:	2b00      	cmp	r3, #0
 8010620:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010624:	f280 80d8 	bge.w	80107d8 <_dtoa_r+0x610>
 8010628:	f1b9 0f00 	cmp.w	r9, #0
 801062c:	f300 80d4 	bgt.w	80107d8 <_dtoa_r+0x610>
 8010630:	f040 825e 	bne.w	8010af0 <_dtoa_r+0x928>
 8010634:	2200      	movs	r2, #0
 8010636:	4b66      	ldr	r3, [pc, #408]	; (80107d0 <_dtoa_r+0x608>)
 8010638:	ec51 0b17 	vmov	r0, r1, d7
 801063c:	f7ef ffdc 	bl	80005f8 <__aeabi_dmul>
 8010640:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010644:	f7f0 fa5e 	bl	8000b04 <__aeabi_dcmpge>
 8010648:	464f      	mov	r7, r9
 801064a:	464e      	mov	r6, r9
 801064c:	2800      	cmp	r0, #0
 801064e:	f040 8234 	bne.w	8010aba <_dtoa_r+0x8f2>
 8010652:	2331      	movs	r3, #49	; 0x31
 8010654:	f10b 0501 	add.w	r5, fp, #1
 8010658:	f88b 3000 	strb.w	r3, [fp]
 801065c:	f10a 0a01 	add.w	sl, sl, #1
 8010660:	e22f      	b.n	8010ac2 <_dtoa_r+0x8fa>
 8010662:	07f2      	lsls	r2, r6, #31
 8010664:	d505      	bpl.n	8010672 <_dtoa_r+0x4aa>
 8010666:	e9d7 2300 	ldrd	r2, r3, [r7]
 801066a:	f7ef ffc5 	bl	80005f8 <__aeabi_dmul>
 801066e:	3501      	adds	r5, #1
 8010670:	2301      	movs	r3, #1
 8010672:	1076      	asrs	r6, r6, #1
 8010674:	3708      	adds	r7, #8
 8010676:	e772      	b.n	801055e <_dtoa_r+0x396>
 8010678:	2502      	movs	r5, #2
 801067a:	e774      	b.n	8010566 <_dtoa_r+0x39e>
 801067c:	f8cd a020 	str.w	sl, [sp, #32]
 8010680:	464f      	mov	r7, r9
 8010682:	e791      	b.n	80105a8 <_dtoa_r+0x3e0>
 8010684:	4b4d      	ldr	r3, [pc, #308]	; (80107bc <_dtoa_r+0x5f4>)
 8010686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801068a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801068e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010690:	2b00      	cmp	r3, #0
 8010692:	d047      	beq.n	8010724 <_dtoa_r+0x55c>
 8010694:	4602      	mov	r2, r0
 8010696:	460b      	mov	r3, r1
 8010698:	2000      	movs	r0, #0
 801069a:	494e      	ldr	r1, [pc, #312]	; (80107d4 <_dtoa_r+0x60c>)
 801069c:	f7f0 f8d6 	bl	800084c <__aeabi_ddiv>
 80106a0:	462a      	mov	r2, r5
 80106a2:	4633      	mov	r3, r6
 80106a4:	f7ef fdf0 	bl	8000288 <__aeabi_dsub>
 80106a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80106ac:	465d      	mov	r5, fp
 80106ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106b2:	f7f0 fa51 	bl	8000b58 <__aeabi_d2iz>
 80106b6:	4606      	mov	r6, r0
 80106b8:	f7ef ff34 	bl	8000524 <__aeabi_i2d>
 80106bc:	4602      	mov	r2, r0
 80106be:	460b      	mov	r3, r1
 80106c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80106c4:	f7ef fde0 	bl	8000288 <__aeabi_dsub>
 80106c8:	3630      	adds	r6, #48	; 0x30
 80106ca:	f805 6b01 	strb.w	r6, [r5], #1
 80106ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80106d2:	e9cd 0100 	strd	r0, r1, [sp]
 80106d6:	f7f0 fa01 	bl	8000adc <__aeabi_dcmplt>
 80106da:	2800      	cmp	r0, #0
 80106dc:	d163      	bne.n	80107a6 <_dtoa_r+0x5de>
 80106de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106e2:	2000      	movs	r0, #0
 80106e4:	4937      	ldr	r1, [pc, #220]	; (80107c4 <_dtoa_r+0x5fc>)
 80106e6:	f7ef fdcf 	bl	8000288 <__aeabi_dsub>
 80106ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80106ee:	f7f0 f9f5 	bl	8000adc <__aeabi_dcmplt>
 80106f2:	2800      	cmp	r0, #0
 80106f4:	f040 80b7 	bne.w	8010866 <_dtoa_r+0x69e>
 80106f8:	eba5 030b 	sub.w	r3, r5, fp
 80106fc:	429f      	cmp	r7, r3
 80106fe:	f77f af7c 	ble.w	80105fa <_dtoa_r+0x432>
 8010702:	2200      	movs	r2, #0
 8010704:	4b30      	ldr	r3, [pc, #192]	; (80107c8 <_dtoa_r+0x600>)
 8010706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801070a:	f7ef ff75 	bl	80005f8 <__aeabi_dmul>
 801070e:	2200      	movs	r2, #0
 8010710:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010714:	4b2c      	ldr	r3, [pc, #176]	; (80107c8 <_dtoa_r+0x600>)
 8010716:	e9dd 0100 	ldrd	r0, r1, [sp]
 801071a:	f7ef ff6d 	bl	80005f8 <__aeabi_dmul>
 801071e:	e9cd 0100 	strd	r0, r1, [sp]
 8010722:	e7c4      	b.n	80106ae <_dtoa_r+0x4e6>
 8010724:	462a      	mov	r2, r5
 8010726:	4633      	mov	r3, r6
 8010728:	f7ef ff66 	bl	80005f8 <__aeabi_dmul>
 801072c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010730:	eb0b 0507 	add.w	r5, fp, r7
 8010734:	465e      	mov	r6, fp
 8010736:	e9dd 0100 	ldrd	r0, r1, [sp]
 801073a:	f7f0 fa0d 	bl	8000b58 <__aeabi_d2iz>
 801073e:	4607      	mov	r7, r0
 8010740:	f7ef fef0 	bl	8000524 <__aeabi_i2d>
 8010744:	3730      	adds	r7, #48	; 0x30
 8010746:	4602      	mov	r2, r0
 8010748:	460b      	mov	r3, r1
 801074a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801074e:	f7ef fd9b 	bl	8000288 <__aeabi_dsub>
 8010752:	f806 7b01 	strb.w	r7, [r6], #1
 8010756:	42ae      	cmp	r6, r5
 8010758:	e9cd 0100 	strd	r0, r1, [sp]
 801075c:	f04f 0200 	mov.w	r2, #0
 8010760:	d126      	bne.n	80107b0 <_dtoa_r+0x5e8>
 8010762:	4b1c      	ldr	r3, [pc, #112]	; (80107d4 <_dtoa_r+0x60c>)
 8010764:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010768:	f7ef fd90 	bl	800028c <__adddf3>
 801076c:	4602      	mov	r2, r0
 801076e:	460b      	mov	r3, r1
 8010770:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010774:	f7f0 f9d0 	bl	8000b18 <__aeabi_dcmpgt>
 8010778:	2800      	cmp	r0, #0
 801077a:	d174      	bne.n	8010866 <_dtoa_r+0x69e>
 801077c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010780:	2000      	movs	r0, #0
 8010782:	4914      	ldr	r1, [pc, #80]	; (80107d4 <_dtoa_r+0x60c>)
 8010784:	f7ef fd80 	bl	8000288 <__aeabi_dsub>
 8010788:	4602      	mov	r2, r0
 801078a:	460b      	mov	r3, r1
 801078c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010790:	f7f0 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8010794:	2800      	cmp	r0, #0
 8010796:	f43f af30 	beq.w	80105fa <_dtoa_r+0x432>
 801079a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801079e:	2b30      	cmp	r3, #48	; 0x30
 80107a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80107a4:	d002      	beq.n	80107ac <_dtoa_r+0x5e4>
 80107a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80107aa:	e04a      	b.n	8010842 <_dtoa_r+0x67a>
 80107ac:	4615      	mov	r5, r2
 80107ae:	e7f4      	b.n	801079a <_dtoa_r+0x5d2>
 80107b0:	4b05      	ldr	r3, [pc, #20]	; (80107c8 <_dtoa_r+0x600>)
 80107b2:	f7ef ff21 	bl	80005f8 <__aeabi_dmul>
 80107b6:	e9cd 0100 	strd	r0, r1, [sp]
 80107ba:	e7bc      	b.n	8010736 <_dtoa_r+0x56e>
 80107bc:	080137f8 	.word	0x080137f8
 80107c0:	080137d0 	.word	0x080137d0
 80107c4:	3ff00000 	.word	0x3ff00000
 80107c8:	40240000 	.word	0x40240000
 80107cc:	401c0000 	.word	0x401c0000
 80107d0:	40140000 	.word	0x40140000
 80107d4:	3fe00000 	.word	0x3fe00000
 80107d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80107dc:	465d      	mov	r5, fp
 80107de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107e2:	4630      	mov	r0, r6
 80107e4:	4639      	mov	r1, r7
 80107e6:	f7f0 f831 	bl	800084c <__aeabi_ddiv>
 80107ea:	f7f0 f9b5 	bl	8000b58 <__aeabi_d2iz>
 80107ee:	4680      	mov	r8, r0
 80107f0:	f7ef fe98 	bl	8000524 <__aeabi_i2d>
 80107f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80107f8:	f7ef fefe 	bl	80005f8 <__aeabi_dmul>
 80107fc:	4602      	mov	r2, r0
 80107fe:	460b      	mov	r3, r1
 8010800:	4630      	mov	r0, r6
 8010802:	4639      	mov	r1, r7
 8010804:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010808:	f7ef fd3e 	bl	8000288 <__aeabi_dsub>
 801080c:	f805 6b01 	strb.w	r6, [r5], #1
 8010810:	eba5 060b 	sub.w	r6, r5, fp
 8010814:	45b1      	cmp	r9, r6
 8010816:	4602      	mov	r2, r0
 8010818:	460b      	mov	r3, r1
 801081a:	d139      	bne.n	8010890 <_dtoa_r+0x6c8>
 801081c:	f7ef fd36 	bl	800028c <__adddf3>
 8010820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010824:	4606      	mov	r6, r0
 8010826:	460f      	mov	r7, r1
 8010828:	f7f0 f976 	bl	8000b18 <__aeabi_dcmpgt>
 801082c:	b9c8      	cbnz	r0, 8010862 <_dtoa_r+0x69a>
 801082e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010832:	4630      	mov	r0, r6
 8010834:	4639      	mov	r1, r7
 8010836:	f7f0 f947 	bl	8000ac8 <__aeabi_dcmpeq>
 801083a:	b110      	cbz	r0, 8010842 <_dtoa_r+0x67a>
 801083c:	f018 0f01 	tst.w	r8, #1
 8010840:	d10f      	bne.n	8010862 <_dtoa_r+0x69a>
 8010842:	9904      	ldr	r1, [sp, #16]
 8010844:	4620      	mov	r0, r4
 8010846:	f000 fdf9 	bl	801143c <_Bfree>
 801084a:	2300      	movs	r3, #0
 801084c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801084e:	702b      	strb	r3, [r5, #0]
 8010850:	f10a 0301 	add.w	r3, sl, #1
 8010854:	6013      	str	r3, [r2, #0]
 8010856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010858:	2b00      	cmp	r3, #0
 801085a:	f000 8241 	beq.w	8010ce0 <_dtoa_r+0xb18>
 801085e:	601d      	str	r5, [r3, #0]
 8010860:	e23e      	b.n	8010ce0 <_dtoa_r+0xb18>
 8010862:	f8cd a020 	str.w	sl, [sp, #32]
 8010866:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801086a:	2a39      	cmp	r2, #57	; 0x39
 801086c:	f105 33ff 	add.w	r3, r5, #4294967295
 8010870:	d108      	bne.n	8010884 <_dtoa_r+0x6bc>
 8010872:	459b      	cmp	fp, r3
 8010874:	d10a      	bne.n	801088c <_dtoa_r+0x6c4>
 8010876:	9b08      	ldr	r3, [sp, #32]
 8010878:	3301      	adds	r3, #1
 801087a:	9308      	str	r3, [sp, #32]
 801087c:	2330      	movs	r3, #48	; 0x30
 801087e:	f88b 3000 	strb.w	r3, [fp]
 8010882:	465b      	mov	r3, fp
 8010884:	781a      	ldrb	r2, [r3, #0]
 8010886:	3201      	adds	r2, #1
 8010888:	701a      	strb	r2, [r3, #0]
 801088a:	e78c      	b.n	80107a6 <_dtoa_r+0x5de>
 801088c:	461d      	mov	r5, r3
 801088e:	e7ea      	b.n	8010866 <_dtoa_r+0x69e>
 8010890:	2200      	movs	r2, #0
 8010892:	4b9b      	ldr	r3, [pc, #620]	; (8010b00 <_dtoa_r+0x938>)
 8010894:	f7ef feb0 	bl	80005f8 <__aeabi_dmul>
 8010898:	2200      	movs	r2, #0
 801089a:	2300      	movs	r3, #0
 801089c:	4606      	mov	r6, r0
 801089e:	460f      	mov	r7, r1
 80108a0:	f7f0 f912 	bl	8000ac8 <__aeabi_dcmpeq>
 80108a4:	2800      	cmp	r0, #0
 80108a6:	d09a      	beq.n	80107de <_dtoa_r+0x616>
 80108a8:	e7cb      	b.n	8010842 <_dtoa_r+0x67a>
 80108aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80108ac:	2a00      	cmp	r2, #0
 80108ae:	f000 808b 	beq.w	80109c8 <_dtoa_r+0x800>
 80108b2:	9a06      	ldr	r2, [sp, #24]
 80108b4:	2a01      	cmp	r2, #1
 80108b6:	dc6e      	bgt.n	8010996 <_dtoa_r+0x7ce>
 80108b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80108ba:	2a00      	cmp	r2, #0
 80108bc:	d067      	beq.n	801098e <_dtoa_r+0x7c6>
 80108be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80108c2:	9f07      	ldr	r7, [sp, #28]
 80108c4:	9d05      	ldr	r5, [sp, #20]
 80108c6:	9a05      	ldr	r2, [sp, #20]
 80108c8:	2101      	movs	r1, #1
 80108ca:	441a      	add	r2, r3
 80108cc:	4620      	mov	r0, r4
 80108ce:	9205      	str	r2, [sp, #20]
 80108d0:	4498      	add	r8, r3
 80108d2:	f000 fe91 	bl	80115f8 <__i2b>
 80108d6:	4606      	mov	r6, r0
 80108d8:	2d00      	cmp	r5, #0
 80108da:	dd0c      	ble.n	80108f6 <_dtoa_r+0x72e>
 80108dc:	f1b8 0f00 	cmp.w	r8, #0
 80108e0:	dd09      	ble.n	80108f6 <_dtoa_r+0x72e>
 80108e2:	4545      	cmp	r5, r8
 80108e4:	9a05      	ldr	r2, [sp, #20]
 80108e6:	462b      	mov	r3, r5
 80108e8:	bfa8      	it	ge
 80108ea:	4643      	movge	r3, r8
 80108ec:	1ad2      	subs	r2, r2, r3
 80108ee:	9205      	str	r2, [sp, #20]
 80108f0:	1aed      	subs	r5, r5, r3
 80108f2:	eba8 0803 	sub.w	r8, r8, r3
 80108f6:	9b07      	ldr	r3, [sp, #28]
 80108f8:	b1eb      	cbz	r3, 8010936 <_dtoa_r+0x76e>
 80108fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d067      	beq.n	80109d0 <_dtoa_r+0x808>
 8010900:	b18f      	cbz	r7, 8010926 <_dtoa_r+0x75e>
 8010902:	4631      	mov	r1, r6
 8010904:	463a      	mov	r2, r7
 8010906:	4620      	mov	r0, r4
 8010908:	f000 ff16 	bl	8011738 <__pow5mult>
 801090c:	9a04      	ldr	r2, [sp, #16]
 801090e:	4601      	mov	r1, r0
 8010910:	4606      	mov	r6, r0
 8010912:	4620      	mov	r0, r4
 8010914:	f000 fe79 	bl	801160a <__multiply>
 8010918:	9904      	ldr	r1, [sp, #16]
 801091a:	9008      	str	r0, [sp, #32]
 801091c:	4620      	mov	r0, r4
 801091e:	f000 fd8d 	bl	801143c <_Bfree>
 8010922:	9b08      	ldr	r3, [sp, #32]
 8010924:	9304      	str	r3, [sp, #16]
 8010926:	9b07      	ldr	r3, [sp, #28]
 8010928:	1bda      	subs	r2, r3, r7
 801092a:	d004      	beq.n	8010936 <_dtoa_r+0x76e>
 801092c:	9904      	ldr	r1, [sp, #16]
 801092e:	4620      	mov	r0, r4
 8010930:	f000 ff02 	bl	8011738 <__pow5mult>
 8010934:	9004      	str	r0, [sp, #16]
 8010936:	2101      	movs	r1, #1
 8010938:	4620      	mov	r0, r4
 801093a:	f000 fe5d 	bl	80115f8 <__i2b>
 801093e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010940:	4607      	mov	r7, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	f000 81d0 	beq.w	8010ce8 <_dtoa_r+0xb20>
 8010948:	461a      	mov	r2, r3
 801094a:	4601      	mov	r1, r0
 801094c:	4620      	mov	r0, r4
 801094e:	f000 fef3 	bl	8011738 <__pow5mult>
 8010952:	9b06      	ldr	r3, [sp, #24]
 8010954:	2b01      	cmp	r3, #1
 8010956:	4607      	mov	r7, r0
 8010958:	dc40      	bgt.n	80109dc <_dtoa_r+0x814>
 801095a:	9b00      	ldr	r3, [sp, #0]
 801095c:	2b00      	cmp	r3, #0
 801095e:	d139      	bne.n	80109d4 <_dtoa_r+0x80c>
 8010960:	9b01      	ldr	r3, [sp, #4]
 8010962:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010966:	2b00      	cmp	r3, #0
 8010968:	d136      	bne.n	80109d8 <_dtoa_r+0x810>
 801096a:	9b01      	ldr	r3, [sp, #4]
 801096c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010970:	0d1b      	lsrs	r3, r3, #20
 8010972:	051b      	lsls	r3, r3, #20
 8010974:	b12b      	cbz	r3, 8010982 <_dtoa_r+0x7ba>
 8010976:	9b05      	ldr	r3, [sp, #20]
 8010978:	3301      	adds	r3, #1
 801097a:	9305      	str	r3, [sp, #20]
 801097c:	f108 0801 	add.w	r8, r8, #1
 8010980:	2301      	movs	r3, #1
 8010982:	9307      	str	r3, [sp, #28]
 8010984:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010986:	2b00      	cmp	r3, #0
 8010988:	d12a      	bne.n	80109e0 <_dtoa_r+0x818>
 801098a:	2001      	movs	r0, #1
 801098c:	e030      	b.n	80109f0 <_dtoa_r+0x828>
 801098e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010990:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010994:	e795      	b.n	80108c2 <_dtoa_r+0x6fa>
 8010996:	9b07      	ldr	r3, [sp, #28]
 8010998:	f109 37ff 	add.w	r7, r9, #4294967295
 801099c:	42bb      	cmp	r3, r7
 801099e:	bfbf      	itttt	lt
 80109a0:	9b07      	ldrlt	r3, [sp, #28]
 80109a2:	9707      	strlt	r7, [sp, #28]
 80109a4:	1afa      	sublt	r2, r7, r3
 80109a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80109a8:	bfbb      	ittet	lt
 80109aa:	189b      	addlt	r3, r3, r2
 80109ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80109ae:	1bdf      	subge	r7, r3, r7
 80109b0:	2700      	movlt	r7, #0
 80109b2:	f1b9 0f00 	cmp.w	r9, #0
 80109b6:	bfb5      	itete	lt
 80109b8:	9b05      	ldrlt	r3, [sp, #20]
 80109ba:	9d05      	ldrge	r5, [sp, #20]
 80109bc:	eba3 0509 	sublt.w	r5, r3, r9
 80109c0:	464b      	movge	r3, r9
 80109c2:	bfb8      	it	lt
 80109c4:	2300      	movlt	r3, #0
 80109c6:	e77e      	b.n	80108c6 <_dtoa_r+0x6fe>
 80109c8:	9f07      	ldr	r7, [sp, #28]
 80109ca:	9d05      	ldr	r5, [sp, #20]
 80109cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80109ce:	e783      	b.n	80108d8 <_dtoa_r+0x710>
 80109d0:	9a07      	ldr	r2, [sp, #28]
 80109d2:	e7ab      	b.n	801092c <_dtoa_r+0x764>
 80109d4:	2300      	movs	r3, #0
 80109d6:	e7d4      	b.n	8010982 <_dtoa_r+0x7ba>
 80109d8:	9b00      	ldr	r3, [sp, #0]
 80109da:	e7d2      	b.n	8010982 <_dtoa_r+0x7ba>
 80109dc:	2300      	movs	r3, #0
 80109de:	9307      	str	r3, [sp, #28]
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80109e6:	6918      	ldr	r0, [r3, #16]
 80109e8:	f000 fdb8 	bl	801155c <__hi0bits>
 80109ec:	f1c0 0020 	rsb	r0, r0, #32
 80109f0:	4440      	add	r0, r8
 80109f2:	f010 001f 	ands.w	r0, r0, #31
 80109f6:	d047      	beq.n	8010a88 <_dtoa_r+0x8c0>
 80109f8:	f1c0 0320 	rsb	r3, r0, #32
 80109fc:	2b04      	cmp	r3, #4
 80109fe:	dd3b      	ble.n	8010a78 <_dtoa_r+0x8b0>
 8010a00:	9b05      	ldr	r3, [sp, #20]
 8010a02:	f1c0 001c 	rsb	r0, r0, #28
 8010a06:	4403      	add	r3, r0
 8010a08:	9305      	str	r3, [sp, #20]
 8010a0a:	4405      	add	r5, r0
 8010a0c:	4480      	add	r8, r0
 8010a0e:	9b05      	ldr	r3, [sp, #20]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	dd05      	ble.n	8010a20 <_dtoa_r+0x858>
 8010a14:	461a      	mov	r2, r3
 8010a16:	9904      	ldr	r1, [sp, #16]
 8010a18:	4620      	mov	r0, r4
 8010a1a:	f000 fedb 	bl	80117d4 <__lshift>
 8010a1e:	9004      	str	r0, [sp, #16]
 8010a20:	f1b8 0f00 	cmp.w	r8, #0
 8010a24:	dd05      	ble.n	8010a32 <_dtoa_r+0x86a>
 8010a26:	4639      	mov	r1, r7
 8010a28:	4642      	mov	r2, r8
 8010a2a:	4620      	mov	r0, r4
 8010a2c:	f000 fed2 	bl	80117d4 <__lshift>
 8010a30:	4607      	mov	r7, r0
 8010a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010a34:	b353      	cbz	r3, 8010a8c <_dtoa_r+0x8c4>
 8010a36:	4639      	mov	r1, r7
 8010a38:	9804      	ldr	r0, [sp, #16]
 8010a3a:	f000 ff1f 	bl	801187c <__mcmp>
 8010a3e:	2800      	cmp	r0, #0
 8010a40:	da24      	bge.n	8010a8c <_dtoa_r+0x8c4>
 8010a42:	2300      	movs	r3, #0
 8010a44:	220a      	movs	r2, #10
 8010a46:	9904      	ldr	r1, [sp, #16]
 8010a48:	4620      	mov	r0, r4
 8010a4a:	f000 fd0e 	bl	801146a <__multadd>
 8010a4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a50:	9004      	str	r0, [sp, #16]
 8010a52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	f000 814d 	beq.w	8010cf6 <_dtoa_r+0xb2e>
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	4631      	mov	r1, r6
 8010a60:	220a      	movs	r2, #10
 8010a62:	4620      	mov	r0, r4
 8010a64:	f000 fd01 	bl	801146a <__multadd>
 8010a68:	9b02      	ldr	r3, [sp, #8]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	4606      	mov	r6, r0
 8010a6e:	dc4f      	bgt.n	8010b10 <_dtoa_r+0x948>
 8010a70:	9b06      	ldr	r3, [sp, #24]
 8010a72:	2b02      	cmp	r3, #2
 8010a74:	dd4c      	ble.n	8010b10 <_dtoa_r+0x948>
 8010a76:	e011      	b.n	8010a9c <_dtoa_r+0x8d4>
 8010a78:	d0c9      	beq.n	8010a0e <_dtoa_r+0x846>
 8010a7a:	9a05      	ldr	r2, [sp, #20]
 8010a7c:	331c      	adds	r3, #28
 8010a7e:	441a      	add	r2, r3
 8010a80:	9205      	str	r2, [sp, #20]
 8010a82:	441d      	add	r5, r3
 8010a84:	4498      	add	r8, r3
 8010a86:	e7c2      	b.n	8010a0e <_dtoa_r+0x846>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	e7f6      	b.n	8010a7a <_dtoa_r+0x8b2>
 8010a8c:	f1b9 0f00 	cmp.w	r9, #0
 8010a90:	dc38      	bgt.n	8010b04 <_dtoa_r+0x93c>
 8010a92:	9b06      	ldr	r3, [sp, #24]
 8010a94:	2b02      	cmp	r3, #2
 8010a96:	dd35      	ble.n	8010b04 <_dtoa_r+0x93c>
 8010a98:	f8cd 9008 	str.w	r9, [sp, #8]
 8010a9c:	9b02      	ldr	r3, [sp, #8]
 8010a9e:	b963      	cbnz	r3, 8010aba <_dtoa_r+0x8f2>
 8010aa0:	4639      	mov	r1, r7
 8010aa2:	2205      	movs	r2, #5
 8010aa4:	4620      	mov	r0, r4
 8010aa6:	f000 fce0 	bl	801146a <__multadd>
 8010aaa:	4601      	mov	r1, r0
 8010aac:	4607      	mov	r7, r0
 8010aae:	9804      	ldr	r0, [sp, #16]
 8010ab0:	f000 fee4 	bl	801187c <__mcmp>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	f73f adcc 	bgt.w	8010652 <_dtoa_r+0x48a>
 8010aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010abc:	465d      	mov	r5, fp
 8010abe:	ea6f 0a03 	mvn.w	sl, r3
 8010ac2:	f04f 0900 	mov.w	r9, #0
 8010ac6:	4639      	mov	r1, r7
 8010ac8:	4620      	mov	r0, r4
 8010aca:	f000 fcb7 	bl	801143c <_Bfree>
 8010ace:	2e00      	cmp	r6, #0
 8010ad0:	f43f aeb7 	beq.w	8010842 <_dtoa_r+0x67a>
 8010ad4:	f1b9 0f00 	cmp.w	r9, #0
 8010ad8:	d005      	beq.n	8010ae6 <_dtoa_r+0x91e>
 8010ada:	45b1      	cmp	r9, r6
 8010adc:	d003      	beq.n	8010ae6 <_dtoa_r+0x91e>
 8010ade:	4649      	mov	r1, r9
 8010ae0:	4620      	mov	r0, r4
 8010ae2:	f000 fcab 	bl	801143c <_Bfree>
 8010ae6:	4631      	mov	r1, r6
 8010ae8:	4620      	mov	r0, r4
 8010aea:	f000 fca7 	bl	801143c <_Bfree>
 8010aee:	e6a8      	b.n	8010842 <_dtoa_r+0x67a>
 8010af0:	2700      	movs	r7, #0
 8010af2:	463e      	mov	r6, r7
 8010af4:	e7e1      	b.n	8010aba <_dtoa_r+0x8f2>
 8010af6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010afa:	463e      	mov	r6, r7
 8010afc:	e5a9      	b.n	8010652 <_dtoa_r+0x48a>
 8010afe:	bf00      	nop
 8010b00:	40240000 	.word	0x40240000
 8010b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b06:	f8cd 9008 	str.w	r9, [sp, #8]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f000 80fa 	beq.w	8010d04 <_dtoa_r+0xb3c>
 8010b10:	2d00      	cmp	r5, #0
 8010b12:	dd05      	ble.n	8010b20 <_dtoa_r+0x958>
 8010b14:	4631      	mov	r1, r6
 8010b16:	462a      	mov	r2, r5
 8010b18:	4620      	mov	r0, r4
 8010b1a:	f000 fe5b 	bl	80117d4 <__lshift>
 8010b1e:	4606      	mov	r6, r0
 8010b20:	9b07      	ldr	r3, [sp, #28]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d04c      	beq.n	8010bc0 <_dtoa_r+0x9f8>
 8010b26:	6871      	ldr	r1, [r6, #4]
 8010b28:	4620      	mov	r0, r4
 8010b2a:	f000 fc53 	bl	80113d4 <_Balloc>
 8010b2e:	6932      	ldr	r2, [r6, #16]
 8010b30:	3202      	adds	r2, #2
 8010b32:	4605      	mov	r5, r0
 8010b34:	0092      	lsls	r2, r2, #2
 8010b36:	f106 010c 	add.w	r1, r6, #12
 8010b3a:	300c      	adds	r0, #12
 8010b3c:	f7fd fcc6 	bl	800e4cc <memcpy>
 8010b40:	2201      	movs	r2, #1
 8010b42:	4629      	mov	r1, r5
 8010b44:	4620      	mov	r0, r4
 8010b46:	f000 fe45 	bl	80117d4 <__lshift>
 8010b4a:	9b00      	ldr	r3, [sp, #0]
 8010b4c:	f8cd b014 	str.w	fp, [sp, #20]
 8010b50:	f003 0301 	and.w	r3, r3, #1
 8010b54:	46b1      	mov	r9, r6
 8010b56:	9307      	str	r3, [sp, #28]
 8010b58:	4606      	mov	r6, r0
 8010b5a:	4639      	mov	r1, r7
 8010b5c:	9804      	ldr	r0, [sp, #16]
 8010b5e:	f7ff faa5 	bl	80100ac <quorem>
 8010b62:	4649      	mov	r1, r9
 8010b64:	4605      	mov	r5, r0
 8010b66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010b6a:	9804      	ldr	r0, [sp, #16]
 8010b6c:	f000 fe86 	bl	801187c <__mcmp>
 8010b70:	4632      	mov	r2, r6
 8010b72:	9000      	str	r0, [sp, #0]
 8010b74:	4639      	mov	r1, r7
 8010b76:	4620      	mov	r0, r4
 8010b78:	f000 fe9a 	bl	80118b0 <__mdiff>
 8010b7c:	68c3      	ldr	r3, [r0, #12]
 8010b7e:	4602      	mov	r2, r0
 8010b80:	bb03      	cbnz	r3, 8010bc4 <_dtoa_r+0x9fc>
 8010b82:	4601      	mov	r1, r0
 8010b84:	9008      	str	r0, [sp, #32]
 8010b86:	9804      	ldr	r0, [sp, #16]
 8010b88:	f000 fe78 	bl	801187c <__mcmp>
 8010b8c:	9a08      	ldr	r2, [sp, #32]
 8010b8e:	4603      	mov	r3, r0
 8010b90:	4611      	mov	r1, r2
 8010b92:	4620      	mov	r0, r4
 8010b94:	9308      	str	r3, [sp, #32]
 8010b96:	f000 fc51 	bl	801143c <_Bfree>
 8010b9a:	9b08      	ldr	r3, [sp, #32]
 8010b9c:	b9a3      	cbnz	r3, 8010bc8 <_dtoa_r+0xa00>
 8010b9e:	9a06      	ldr	r2, [sp, #24]
 8010ba0:	b992      	cbnz	r2, 8010bc8 <_dtoa_r+0xa00>
 8010ba2:	9a07      	ldr	r2, [sp, #28]
 8010ba4:	b982      	cbnz	r2, 8010bc8 <_dtoa_r+0xa00>
 8010ba6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010baa:	d029      	beq.n	8010c00 <_dtoa_r+0xa38>
 8010bac:	9b00      	ldr	r3, [sp, #0]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	dd01      	ble.n	8010bb6 <_dtoa_r+0x9ee>
 8010bb2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8010bb6:	9b05      	ldr	r3, [sp, #20]
 8010bb8:	1c5d      	adds	r5, r3, #1
 8010bba:	f883 8000 	strb.w	r8, [r3]
 8010bbe:	e782      	b.n	8010ac6 <_dtoa_r+0x8fe>
 8010bc0:	4630      	mov	r0, r6
 8010bc2:	e7c2      	b.n	8010b4a <_dtoa_r+0x982>
 8010bc4:	2301      	movs	r3, #1
 8010bc6:	e7e3      	b.n	8010b90 <_dtoa_r+0x9c8>
 8010bc8:	9a00      	ldr	r2, [sp, #0]
 8010bca:	2a00      	cmp	r2, #0
 8010bcc:	db04      	blt.n	8010bd8 <_dtoa_r+0xa10>
 8010bce:	d125      	bne.n	8010c1c <_dtoa_r+0xa54>
 8010bd0:	9a06      	ldr	r2, [sp, #24]
 8010bd2:	bb1a      	cbnz	r2, 8010c1c <_dtoa_r+0xa54>
 8010bd4:	9a07      	ldr	r2, [sp, #28]
 8010bd6:	bb0a      	cbnz	r2, 8010c1c <_dtoa_r+0xa54>
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	ddec      	ble.n	8010bb6 <_dtoa_r+0x9ee>
 8010bdc:	2201      	movs	r2, #1
 8010bde:	9904      	ldr	r1, [sp, #16]
 8010be0:	4620      	mov	r0, r4
 8010be2:	f000 fdf7 	bl	80117d4 <__lshift>
 8010be6:	4639      	mov	r1, r7
 8010be8:	9004      	str	r0, [sp, #16]
 8010bea:	f000 fe47 	bl	801187c <__mcmp>
 8010bee:	2800      	cmp	r0, #0
 8010bf0:	dc03      	bgt.n	8010bfa <_dtoa_r+0xa32>
 8010bf2:	d1e0      	bne.n	8010bb6 <_dtoa_r+0x9ee>
 8010bf4:	f018 0f01 	tst.w	r8, #1
 8010bf8:	d0dd      	beq.n	8010bb6 <_dtoa_r+0x9ee>
 8010bfa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010bfe:	d1d8      	bne.n	8010bb2 <_dtoa_r+0x9ea>
 8010c00:	9b05      	ldr	r3, [sp, #20]
 8010c02:	9a05      	ldr	r2, [sp, #20]
 8010c04:	1c5d      	adds	r5, r3, #1
 8010c06:	2339      	movs	r3, #57	; 0x39
 8010c08:	7013      	strb	r3, [r2, #0]
 8010c0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010c0e:	2b39      	cmp	r3, #57	; 0x39
 8010c10:	f105 32ff 	add.w	r2, r5, #4294967295
 8010c14:	d04f      	beq.n	8010cb6 <_dtoa_r+0xaee>
 8010c16:	3301      	adds	r3, #1
 8010c18:	7013      	strb	r3, [r2, #0]
 8010c1a:	e754      	b.n	8010ac6 <_dtoa_r+0x8fe>
 8010c1c:	9a05      	ldr	r2, [sp, #20]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	f102 0501 	add.w	r5, r2, #1
 8010c24:	dd06      	ble.n	8010c34 <_dtoa_r+0xa6c>
 8010c26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010c2a:	d0e9      	beq.n	8010c00 <_dtoa_r+0xa38>
 8010c2c:	f108 0801 	add.w	r8, r8, #1
 8010c30:	9b05      	ldr	r3, [sp, #20]
 8010c32:	e7c2      	b.n	8010bba <_dtoa_r+0x9f2>
 8010c34:	9a02      	ldr	r2, [sp, #8]
 8010c36:	f805 8c01 	strb.w	r8, [r5, #-1]
 8010c3a:	eba5 030b 	sub.w	r3, r5, fp
 8010c3e:	4293      	cmp	r3, r2
 8010c40:	d021      	beq.n	8010c86 <_dtoa_r+0xabe>
 8010c42:	2300      	movs	r3, #0
 8010c44:	220a      	movs	r2, #10
 8010c46:	9904      	ldr	r1, [sp, #16]
 8010c48:	4620      	mov	r0, r4
 8010c4a:	f000 fc0e 	bl	801146a <__multadd>
 8010c4e:	45b1      	cmp	r9, r6
 8010c50:	9004      	str	r0, [sp, #16]
 8010c52:	f04f 0300 	mov.w	r3, #0
 8010c56:	f04f 020a 	mov.w	r2, #10
 8010c5a:	4649      	mov	r1, r9
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	d105      	bne.n	8010c6c <_dtoa_r+0xaa4>
 8010c60:	f000 fc03 	bl	801146a <__multadd>
 8010c64:	4681      	mov	r9, r0
 8010c66:	4606      	mov	r6, r0
 8010c68:	9505      	str	r5, [sp, #20]
 8010c6a:	e776      	b.n	8010b5a <_dtoa_r+0x992>
 8010c6c:	f000 fbfd 	bl	801146a <__multadd>
 8010c70:	4631      	mov	r1, r6
 8010c72:	4681      	mov	r9, r0
 8010c74:	2300      	movs	r3, #0
 8010c76:	220a      	movs	r2, #10
 8010c78:	4620      	mov	r0, r4
 8010c7a:	f000 fbf6 	bl	801146a <__multadd>
 8010c7e:	4606      	mov	r6, r0
 8010c80:	e7f2      	b.n	8010c68 <_dtoa_r+0xaa0>
 8010c82:	f04f 0900 	mov.w	r9, #0
 8010c86:	2201      	movs	r2, #1
 8010c88:	9904      	ldr	r1, [sp, #16]
 8010c8a:	4620      	mov	r0, r4
 8010c8c:	f000 fda2 	bl	80117d4 <__lshift>
 8010c90:	4639      	mov	r1, r7
 8010c92:	9004      	str	r0, [sp, #16]
 8010c94:	f000 fdf2 	bl	801187c <__mcmp>
 8010c98:	2800      	cmp	r0, #0
 8010c9a:	dcb6      	bgt.n	8010c0a <_dtoa_r+0xa42>
 8010c9c:	d102      	bne.n	8010ca4 <_dtoa_r+0xadc>
 8010c9e:	f018 0f01 	tst.w	r8, #1
 8010ca2:	d1b2      	bne.n	8010c0a <_dtoa_r+0xa42>
 8010ca4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010ca8:	2b30      	cmp	r3, #48	; 0x30
 8010caa:	f105 32ff 	add.w	r2, r5, #4294967295
 8010cae:	f47f af0a 	bne.w	8010ac6 <_dtoa_r+0x8fe>
 8010cb2:	4615      	mov	r5, r2
 8010cb4:	e7f6      	b.n	8010ca4 <_dtoa_r+0xadc>
 8010cb6:	4593      	cmp	fp, r2
 8010cb8:	d105      	bne.n	8010cc6 <_dtoa_r+0xafe>
 8010cba:	2331      	movs	r3, #49	; 0x31
 8010cbc:	f10a 0a01 	add.w	sl, sl, #1
 8010cc0:	f88b 3000 	strb.w	r3, [fp]
 8010cc4:	e6ff      	b.n	8010ac6 <_dtoa_r+0x8fe>
 8010cc6:	4615      	mov	r5, r2
 8010cc8:	e79f      	b.n	8010c0a <_dtoa_r+0xa42>
 8010cca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010d30 <_dtoa_r+0xb68>
 8010cce:	e007      	b.n	8010ce0 <_dtoa_r+0xb18>
 8010cd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010cd2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010d34 <_dtoa_r+0xb6c>
 8010cd6:	b11b      	cbz	r3, 8010ce0 <_dtoa_r+0xb18>
 8010cd8:	f10b 0308 	add.w	r3, fp, #8
 8010cdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010cde:	6013      	str	r3, [r2, #0]
 8010ce0:	4658      	mov	r0, fp
 8010ce2:	b017      	add	sp, #92	; 0x5c
 8010ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce8:	9b06      	ldr	r3, [sp, #24]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	f77f ae35 	ble.w	801095a <_dtoa_r+0x792>
 8010cf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010cf2:	9307      	str	r3, [sp, #28]
 8010cf4:	e649      	b.n	801098a <_dtoa_r+0x7c2>
 8010cf6:	9b02      	ldr	r3, [sp, #8]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	dc03      	bgt.n	8010d04 <_dtoa_r+0xb3c>
 8010cfc:	9b06      	ldr	r3, [sp, #24]
 8010cfe:	2b02      	cmp	r3, #2
 8010d00:	f73f aecc 	bgt.w	8010a9c <_dtoa_r+0x8d4>
 8010d04:	465d      	mov	r5, fp
 8010d06:	4639      	mov	r1, r7
 8010d08:	9804      	ldr	r0, [sp, #16]
 8010d0a:	f7ff f9cf 	bl	80100ac <quorem>
 8010d0e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010d12:	f805 8b01 	strb.w	r8, [r5], #1
 8010d16:	9a02      	ldr	r2, [sp, #8]
 8010d18:	eba5 030b 	sub.w	r3, r5, fp
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	ddb0      	ble.n	8010c82 <_dtoa_r+0xaba>
 8010d20:	2300      	movs	r3, #0
 8010d22:	220a      	movs	r2, #10
 8010d24:	9904      	ldr	r1, [sp, #16]
 8010d26:	4620      	mov	r0, r4
 8010d28:	f000 fb9f 	bl	801146a <__multadd>
 8010d2c:	9004      	str	r0, [sp, #16]
 8010d2e:	e7ea      	b.n	8010d06 <_dtoa_r+0xb3e>
 8010d30:	0801373c 	.word	0x0801373c
 8010d34:	080137b8 	.word	0x080137b8

08010d38 <rshift>:
 8010d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d3a:	6906      	ldr	r6, [r0, #16]
 8010d3c:	114b      	asrs	r3, r1, #5
 8010d3e:	429e      	cmp	r6, r3
 8010d40:	f100 0414 	add.w	r4, r0, #20
 8010d44:	dd30      	ble.n	8010da8 <rshift+0x70>
 8010d46:	f011 011f 	ands.w	r1, r1, #31
 8010d4a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010d4e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010d52:	d108      	bne.n	8010d66 <rshift+0x2e>
 8010d54:	4621      	mov	r1, r4
 8010d56:	42b2      	cmp	r2, r6
 8010d58:	460b      	mov	r3, r1
 8010d5a:	d211      	bcs.n	8010d80 <rshift+0x48>
 8010d5c:	f852 3b04 	ldr.w	r3, [r2], #4
 8010d60:	f841 3b04 	str.w	r3, [r1], #4
 8010d64:	e7f7      	b.n	8010d56 <rshift+0x1e>
 8010d66:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8010d6a:	f1c1 0c20 	rsb	ip, r1, #32
 8010d6e:	40cd      	lsrs	r5, r1
 8010d70:	3204      	adds	r2, #4
 8010d72:	4623      	mov	r3, r4
 8010d74:	42b2      	cmp	r2, r6
 8010d76:	4617      	mov	r7, r2
 8010d78:	d30c      	bcc.n	8010d94 <rshift+0x5c>
 8010d7a:	601d      	str	r5, [r3, #0]
 8010d7c:	b105      	cbz	r5, 8010d80 <rshift+0x48>
 8010d7e:	3304      	adds	r3, #4
 8010d80:	1b1a      	subs	r2, r3, r4
 8010d82:	42a3      	cmp	r3, r4
 8010d84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010d88:	bf08      	it	eq
 8010d8a:	2300      	moveq	r3, #0
 8010d8c:	6102      	str	r2, [r0, #16]
 8010d8e:	bf08      	it	eq
 8010d90:	6143      	streq	r3, [r0, #20]
 8010d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d94:	683f      	ldr	r7, [r7, #0]
 8010d96:	fa07 f70c 	lsl.w	r7, r7, ip
 8010d9a:	433d      	orrs	r5, r7
 8010d9c:	f843 5b04 	str.w	r5, [r3], #4
 8010da0:	f852 5b04 	ldr.w	r5, [r2], #4
 8010da4:	40cd      	lsrs	r5, r1
 8010da6:	e7e5      	b.n	8010d74 <rshift+0x3c>
 8010da8:	4623      	mov	r3, r4
 8010daa:	e7e9      	b.n	8010d80 <rshift+0x48>

08010dac <__hexdig_fun>:
 8010dac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010db0:	2b09      	cmp	r3, #9
 8010db2:	d802      	bhi.n	8010dba <__hexdig_fun+0xe>
 8010db4:	3820      	subs	r0, #32
 8010db6:	b2c0      	uxtb	r0, r0
 8010db8:	4770      	bx	lr
 8010dba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010dbe:	2b05      	cmp	r3, #5
 8010dc0:	d801      	bhi.n	8010dc6 <__hexdig_fun+0x1a>
 8010dc2:	3847      	subs	r0, #71	; 0x47
 8010dc4:	e7f7      	b.n	8010db6 <__hexdig_fun+0xa>
 8010dc6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010dca:	2b05      	cmp	r3, #5
 8010dcc:	d801      	bhi.n	8010dd2 <__hexdig_fun+0x26>
 8010dce:	3827      	subs	r0, #39	; 0x27
 8010dd0:	e7f1      	b.n	8010db6 <__hexdig_fun+0xa>
 8010dd2:	2000      	movs	r0, #0
 8010dd4:	4770      	bx	lr

08010dd6 <__gethex>:
 8010dd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dda:	b08b      	sub	sp, #44	; 0x2c
 8010ddc:	468a      	mov	sl, r1
 8010dde:	9002      	str	r0, [sp, #8]
 8010de0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010de2:	9306      	str	r3, [sp, #24]
 8010de4:	4690      	mov	r8, r2
 8010de6:	f000 fad0 	bl	801138a <__localeconv_l>
 8010dea:	6803      	ldr	r3, [r0, #0]
 8010dec:	9303      	str	r3, [sp, #12]
 8010dee:	4618      	mov	r0, r3
 8010df0:	f7ef f9ee 	bl	80001d0 <strlen>
 8010df4:	9b03      	ldr	r3, [sp, #12]
 8010df6:	9001      	str	r0, [sp, #4]
 8010df8:	4403      	add	r3, r0
 8010dfa:	f04f 0b00 	mov.w	fp, #0
 8010dfe:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010e02:	9307      	str	r3, [sp, #28]
 8010e04:	f8da 3000 	ldr.w	r3, [sl]
 8010e08:	3302      	adds	r3, #2
 8010e0a:	461f      	mov	r7, r3
 8010e0c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e10:	2830      	cmp	r0, #48	; 0x30
 8010e12:	d06c      	beq.n	8010eee <__gethex+0x118>
 8010e14:	f7ff ffca 	bl	8010dac <__hexdig_fun>
 8010e18:	4604      	mov	r4, r0
 8010e1a:	2800      	cmp	r0, #0
 8010e1c:	d16a      	bne.n	8010ef4 <__gethex+0x11e>
 8010e1e:	9a01      	ldr	r2, [sp, #4]
 8010e20:	9903      	ldr	r1, [sp, #12]
 8010e22:	4638      	mov	r0, r7
 8010e24:	f7fe fa82 	bl	800f32c <strncmp>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d166      	bne.n	8010efa <__gethex+0x124>
 8010e2c:	9b01      	ldr	r3, [sp, #4]
 8010e2e:	5cf8      	ldrb	r0, [r7, r3]
 8010e30:	18fe      	adds	r6, r7, r3
 8010e32:	f7ff ffbb 	bl	8010dac <__hexdig_fun>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d062      	beq.n	8010f00 <__gethex+0x12a>
 8010e3a:	4633      	mov	r3, r6
 8010e3c:	7818      	ldrb	r0, [r3, #0]
 8010e3e:	2830      	cmp	r0, #48	; 0x30
 8010e40:	461f      	mov	r7, r3
 8010e42:	f103 0301 	add.w	r3, r3, #1
 8010e46:	d0f9      	beq.n	8010e3c <__gethex+0x66>
 8010e48:	f7ff ffb0 	bl	8010dac <__hexdig_fun>
 8010e4c:	fab0 f580 	clz	r5, r0
 8010e50:	096d      	lsrs	r5, r5, #5
 8010e52:	4634      	mov	r4, r6
 8010e54:	f04f 0b01 	mov.w	fp, #1
 8010e58:	463a      	mov	r2, r7
 8010e5a:	4616      	mov	r6, r2
 8010e5c:	3201      	adds	r2, #1
 8010e5e:	7830      	ldrb	r0, [r6, #0]
 8010e60:	f7ff ffa4 	bl	8010dac <__hexdig_fun>
 8010e64:	2800      	cmp	r0, #0
 8010e66:	d1f8      	bne.n	8010e5a <__gethex+0x84>
 8010e68:	9a01      	ldr	r2, [sp, #4]
 8010e6a:	9903      	ldr	r1, [sp, #12]
 8010e6c:	4630      	mov	r0, r6
 8010e6e:	f7fe fa5d 	bl	800f32c <strncmp>
 8010e72:	b950      	cbnz	r0, 8010e8a <__gethex+0xb4>
 8010e74:	b954      	cbnz	r4, 8010e8c <__gethex+0xb6>
 8010e76:	9b01      	ldr	r3, [sp, #4]
 8010e78:	18f4      	adds	r4, r6, r3
 8010e7a:	4622      	mov	r2, r4
 8010e7c:	4616      	mov	r6, r2
 8010e7e:	3201      	adds	r2, #1
 8010e80:	7830      	ldrb	r0, [r6, #0]
 8010e82:	f7ff ff93 	bl	8010dac <__hexdig_fun>
 8010e86:	2800      	cmp	r0, #0
 8010e88:	d1f8      	bne.n	8010e7c <__gethex+0xa6>
 8010e8a:	b10c      	cbz	r4, 8010e90 <__gethex+0xba>
 8010e8c:	1ba4      	subs	r4, r4, r6
 8010e8e:	00a4      	lsls	r4, r4, #2
 8010e90:	7833      	ldrb	r3, [r6, #0]
 8010e92:	2b50      	cmp	r3, #80	; 0x50
 8010e94:	d001      	beq.n	8010e9a <__gethex+0xc4>
 8010e96:	2b70      	cmp	r3, #112	; 0x70
 8010e98:	d140      	bne.n	8010f1c <__gethex+0x146>
 8010e9a:	7873      	ldrb	r3, [r6, #1]
 8010e9c:	2b2b      	cmp	r3, #43	; 0x2b
 8010e9e:	d031      	beq.n	8010f04 <__gethex+0x12e>
 8010ea0:	2b2d      	cmp	r3, #45	; 0x2d
 8010ea2:	d033      	beq.n	8010f0c <__gethex+0x136>
 8010ea4:	1c71      	adds	r1, r6, #1
 8010ea6:	f04f 0900 	mov.w	r9, #0
 8010eaa:	7808      	ldrb	r0, [r1, #0]
 8010eac:	f7ff ff7e 	bl	8010dac <__hexdig_fun>
 8010eb0:	1e43      	subs	r3, r0, #1
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	2b18      	cmp	r3, #24
 8010eb6:	d831      	bhi.n	8010f1c <__gethex+0x146>
 8010eb8:	f1a0 0210 	sub.w	r2, r0, #16
 8010ebc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010ec0:	f7ff ff74 	bl	8010dac <__hexdig_fun>
 8010ec4:	1e43      	subs	r3, r0, #1
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	2b18      	cmp	r3, #24
 8010eca:	d922      	bls.n	8010f12 <__gethex+0x13c>
 8010ecc:	f1b9 0f00 	cmp.w	r9, #0
 8010ed0:	d000      	beq.n	8010ed4 <__gethex+0xfe>
 8010ed2:	4252      	negs	r2, r2
 8010ed4:	4414      	add	r4, r2
 8010ed6:	f8ca 1000 	str.w	r1, [sl]
 8010eda:	b30d      	cbz	r5, 8010f20 <__gethex+0x14a>
 8010edc:	f1bb 0f00 	cmp.w	fp, #0
 8010ee0:	bf0c      	ite	eq
 8010ee2:	2706      	moveq	r7, #6
 8010ee4:	2700      	movne	r7, #0
 8010ee6:	4638      	mov	r0, r7
 8010ee8:	b00b      	add	sp, #44	; 0x2c
 8010eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eee:	f10b 0b01 	add.w	fp, fp, #1
 8010ef2:	e78a      	b.n	8010e0a <__gethex+0x34>
 8010ef4:	2500      	movs	r5, #0
 8010ef6:	462c      	mov	r4, r5
 8010ef8:	e7ae      	b.n	8010e58 <__gethex+0x82>
 8010efa:	463e      	mov	r6, r7
 8010efc:	2501      	movs	r5, #1
 8010efe:	e7c7      	b.n	8010e90 <__gethex+0xba>
 8010f00:	4604      	mov	r4, r0
 8010f02:	e7fb      	b.n	8010efc <__gethex+0x126>
 8010f04:	f04f 0900 	mov.w	r9, #0
 8010f08:	1cb1      	adds	r1, r6, #2
 8010f0a:	e7ce      	b.n	8010eaa <__gethex+0xd4>
 8010f0c:	f04f 0901 	mov.w	r9, #1
 8010f10:	e7fa      	b.n	8010f08 <__gethex+0x132>
 8010f12:	230a      	movs	r3, #10
 8010f14:	fb03 0202 	mla	r2, r3, r2, r0
 8010f18:	3a10      	subs	r2, #16
 8010f1a:	e7cf      	b.n	8010ebc <__gethex+0xe6>
 8010f1c:	4631      	mov	r1, r6
 8010f1e:	e7da      	b.n	8010ed6 <__gethex+0x100>
 8010f20:	1bf3      	subs	r3, r6, r7
 8010f22:	3b01      	subs	r3, #1
 8010f24:	4629      	mov	r1, r5
 8010f26:	2b07      	cmp	r3, #7
 8010f28:	dc49      	bgt.n	8010fbe <__gethex+0x1e8>
 8010f2a:	9802      	ldr	r0, [sp, #8]
 8010f2c:	f000 fa52 	bl	80113d4 <_Balloc>
 8010f30:	9b01      	ldr	r3, [sp, #4]
 8010f32:	f100 0914 	add.w	r9, r0, #20
 8010f36:	f04f 0b00 	mov.w	fp, #0
 8010f3a:	f1c3 0301 	rsb	r3, r3, #1
 8010f3e:	4605      	mov	r5, r0
 8010f40:	f8cd 9010 	str.w	r9, [sp, #16]
 8010f44:	46da      	mov	sl, fp
 8010f46:	9308      	str	r3, [sp, #32]
 8010f48:	42b7      	cmp	r7, r6
 8010f4a:	d33b      	bcc.n	8010fc4 <__gethex+0x1ee>
 8010f4c:	9804      	ldr	r0, [sp, #16]
 8010f4e:	f840 ab04 	str.w	sl, [r0], #4
 8010f52:	eba0 0009 	sub.w	r0, r0, r9
 8010f56:	1080      	asrs	r0, r0, #2
 8010f58:	6128      	str	r0, [r5, #16]
 8010f5a:	0147      	lsls	r7, r0, #5
 8010f5c:	4650      	mov	r0, sl
 8010f5e:	f000 fafd 	bl	801155c <__hi0bits>
 8010f62:	f8d8 6000 	ldr.w	r6, [r8]
 8010f66:	1a3f      	subs	r7, r7, r0
 8010f68:	42b7      	cmp	r7, r6
 8010f6a:	dd64      	ble.n	8011036 <__gethex+0x260>
 8010f6c:	1bbf      	subs	r7, r7, r6
 8010f6e:	4639      	mov	r1, r7
 8010f70:	4628      	mov	r0, r5
 8010f72:	f000 fe0d 	bl	8011b90 <__any_on>
 8010f76:	4682      	mov	sl, r0
 8010f78:	b178      	cbz	r0, 8010f9a <__gethex+0x1c4>
 8010f7a:	1e7b      	subs	r3, r7, #1
 8010f7c:	1159      	asrs	r1, r3, #5
 8010f7e:	f003 021f 	and.w	r2, r3, #31
 8010f82:	f04f 0a01 	mov.w	sl, #1
 8010f86:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010f8a:	fa0a f202 	lsl.w	r2, sl, r2
 8010f8e:	420a      	tst	r2, r1
 8010f90:	d003      	beq.n	8010f9a <__gethex+0x1c4>
 8010f92:	4553      	cmp	r3, sl
 8010f94:	dc46      	bgt.n	8011024 <__gethex+0x24e>
 8010f96:	f04f 0a02 	mov.w	sl, #2
 8010f9a:	4639      	mov	r1, r7
 8010f9c:	4628      	mov	r0, r5
 8010f9e:	f7ff fecb 	bl	8010d38 <rshift>
 8010fa2:	443c      	add	r4, r7
 8010fa4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010fa8:	42a3      	cmp	r3, r4
 8010faa:	da52      	bge.n	8011052 <__gethex+0x27c>
 8010fac:	4629      	mov	r1, r5
 8010fae:	9802      	ldr	r0, [sp, #8]
 8010fb0:	f000 fa44 	bl	801143c <_Bfree>
 8010fb4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	6013      	str	r3, [r2, #0]
 8010fba:	27a3      	movs	r7, #163	; 0xa3
 8010fbc:	e793      	b.n	8010ee6 <__gethex+0x110>
 8010fbe:	3101      	adds	r1, #1
 8010fc0:	105b      	asrs	r3, r3, #1
 8010fc2:	e7b0      	b.n	8010f26 <__gethex+0x150>
 8010fc4:	1e73      	subs	r3, r6, #1
 8010fc6:	9305      	str	r3, [sp, #20]
 8010fc8:	9a07      	ldr	r2, [sp, #28]
 8010fca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010fce:	4293      	cmp	r3, r2
 8010fd0:	d018      	beq.n	8011004 <__gethex+0x22e>
 8010fd2:	f1bb 0f20 	cmp.w	fp, #32
 8010fd6:	d107      	bne.n	8010fe8 <__gethex+0x212>
 8010fd8:	9b04      	ldr	r3, [sp, #16]
 8010fda:	f8c3 a000 	str.w	sl, [r3]
 8010fde:	3304      	adds	r3, #4
 8010fe0:	f04f 0a00 	mov.w	sl, #0
 8010fe4:	9304      	str	r3, [sp, #16]
 8010fe6:	46d3      	mov	fp, sl
 8010fe8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010fec:	f7ff fede 	bl	8010dac <__hexdig_fun>
 8010ff0:	f000 000f 	and.w	r0, r0, #15
 8010ff4:	fa00 f00b 	lsl.w	r0, r0, fp
 8010ff8:	ea4a 0a00 	orr.w	sl, sl, r0
 8010ffc:	f10b 0b04 	add.w	fp, fp, #4
 8011000:	9b05      	ldr	r3, [sp, #20]
 8011002:	e00d      	b.n	8011020 <__gethex+0x24a>
 8011004:	9b05      	ldr	r3, [sp, #20]
 8011006:	9a08      	ldr	r2, [sp, #32]
 8011008:	4413      	add	r3, r2
 801100a:	42bb      	cmp	r3, r7
 801100c:	d3e1      	bcc.n	8010fd2 <__gethex+0x1fc>
 801100e:	4618      	mov	r0, r3
 8011010:	9a01      	ldr	r2, [sp, #4]
 8011012:	9903      	ldr	r1, [sp, #12]
 8011014:	9309      	str	r3, [sp, #36]	; 0x24
 8011016:	f7fe f989 	bl	800f32c <strncmp>
 801101a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801101c:	2800      	cmp	r0, #0
 801101e:	d1d8      	bne.n	8010fd2 <__gethex+0x1fc>
 8011020:	461e      	mov	r6, r3
 8011022:	e791      	b.n	8010f48 <__gethex+0x172>
 8011024:	1eb9      	subs	r1, r7, #2
 8011026:	4628      	mov	r0, r5
 8011028:	f000 fdb2 	bl	8011b90 <__any_on>
 801102c:	2800      	cmp	r0, #0
 801102e:	d0b2      	beq.n	8010f96 <__gethex+0x1c0>
 8011030:	f04f 0a03 	mov.w	sl, #3
 8011034:	e7b1      	b.n	8010f9a <__gethex+0x1c4>
 8011036:	da09      	bge.n	801104c <__gethex+0x276>
 8011038:	1bf7      	subs	r7, r6, r7
 801103a:	4629      	mov	r1, r5
 801103c:	463a      	mov	r2, r7
 801103e:	9802      	ldr	r0, [sp, #8]
 8011040:	f000 fbc8 	bl	80117d4 <__lshift>
 8011044:	1be4      	subs	r4, r4, r7
 8011046:	4605      	mov	r5, r0
 8011048:	f100 0914 	add.w	r9, r0, #20
 801104c:	f04f 0a00 	mov.w	sl, #0
 8011050:	e7a8      	b.n	8010fa4 <__gethex+0x1ce>
 8011052:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011056:	42a0      	cmp	r0, r4
 8011058:	dd6a      	ble.n	8011130 <__gethex+0x35a>
 801105a:	1b04      	subs	r4, r0, r4
 801105c:	42a6      	cmp	r6, r4
 801105e:	dc2e      	bgt.n	80110be <__gethex+0x2e8>
 8011060:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011064:	2b02      	cmp	r3, #2
 8011066:	d022      	beq.n	80110ae <__gethex+0x2d8>
 8011068:	2b03      	cmp	r3, #3
 801106a:	d024      	beq.n	80110b6 <__gethex+0x2e0>
 801106c:	2b01      	cmp	r3, #1
 801106e:	d115      	bne.n	801109c <__gethex+0x2c6>
 8011070:	42a6      	cmp	r6, r4
 8011072:	d113      	bne.n	801109c <__gethex+0x2c6>
 8011074:	2e01      	cmp	r6, #1
 8011076:	dc0b      	bgt.n	8011090 <__gethex+0x2ba>
 8011078:	9a06      	ldr	r2, [sp, #24]
 801107a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801107e:	6013      	str	r3, [r2, #0]
 8011080:	2301      	movs	r3, #1
 8011082:	612b      	str	r3, [r5, #16]
 8011084:	f8c9 3000 	str.w	r3, [r9]
 8011088:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801108a:	2762      	movs	r7, #98	; 0x62
 801108c:	601d      	str	r5, [r3, #0]
 801108e:	e72a      	b.n	8010ee6 <__gethex+0x110>
 8011090:	1e71      	subs	r1, r6, #1
 8011092:	4628      	mov	r0, r5
 8011094:	f000 fd7c 	bl	8011b90 <__any_on>
 8011098:	2800      	cmp	r0, #0
 801109a:	d1ed      	bne.n	8011078 <__gethex+0x2a2>
 801109c:	4629      	mov	r1, r5
 801109e:	9802      	ldr	r0, [sp, #8]
 80110a0:	f000 f9cc 	bl	801143c <_Bfree>
 80110a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80110a6:	2300      	movs	r3, #0
 80110a8:	6013      	str	r3, [r2, #0]
 80110aa:	2750      	movs	r7, #80	; 0x50
 80110ac:	e71b      	b.n	8010ee6 <__gethex+0x110>
 80110ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d0e1      	beq.n	8011078 <__gethex+0x2a2>
 80110b4:	e7f2      	b.n	801109c <__gethex+0x2c6>
 80110b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d1dd      	bne.n	8011078 <__gethex+0x2a2>
 80110bc:	e7ee      	b.n	801109c <__gethex+0x2c6>
 80110be:	1e67      	subs	r7, r4, #1
 80110c0:	f1ba 0f00 	cmp.w	sl, #0
 80110c4:	d131      	bne.n	801112a <__gethex+0x354>
 80110c6:	b127      	cbz	r7, 80110d2 <__gethex+0x2fc>
 80110c8:	4639      	mov	r1, r7
 80110ca:	4628      	mov	r0, r5
 80110cc:	f000 fd60 	bl	8011b90 <__any_on>
 80110d0:	4682      	mov	sl, r0
 80110d2:	117a      	asrs	r2, r7, #5
 80110d4:	2301      	movs	r3, #1
 80110d6:	f007 071f 	and.w	r7, r7, #31
 80110da:	fa03 f707 	lsl.w	r7, r3, r7
 80110de:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80110e2:	4621      	mov	r1, r4
 80110e4:	421f      	tst	r7, r3
 80110e6:	4628      	mov	r0, r5
 80110e8:	bf18      	it	ne
 80110ea:	f04a 0a02 	orrne.w	sl, sl, #2
 80110ee:	1b36      	subs	r6, r6, r4
 80110f0:	f7ff fe22 	bl	8010d38 <rshift>
 80110f4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80110f8:	2702      	movs	r7, #2
 80110fa:	f1ba 0f00 	cmp.w	sl, #0
 80110fe:	d048      	beq.n	8011192 <__gethex+0x3bc>
 8011100:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011104:	2b02      	cmp	r3, #2
 8011106:	d015      	beq.n	8011134 <__gethex+0x35e>
 8011108:	2b03      	cmp	r3, #3
 801110a:	d017      	beq.n	801113c <__gethex+0x366>
 801110c:	2b01      	cmp	r3, #1
 801110e:	d109      	bne.n	8011124 <__gethex+0x34e>
 8011110:	f01a 0f02 	tst.w	sl, #2
 8011114:	d006      	beq.n	8011124 <__gethex+0x34e>
 8011116:	f8d9 3000 	ldr.w	r3, [r9]
 801111a:	ea4a 0a03 	orr.w	sl, sl, r3
 801111e:	f01a 0f01 	tst.w	sl, #1
 8011122:	d10e      	bne.n	8011142 <__gethex+0x36c>
 8011124:	f047 0710 	orr.w	r7, r7, #16
 8011128:	e033      	b.n	8011192 <__gethex+0x3bc>
 801112a:	f04f 0a01 	mov.w	sl, #1
 801112e:	e7d0      	b.n	80110d2 <__gethex+0x2fc>
 8011130:	2701      	movs	r7, #1
 8011132:	e7e2      	b.n	80110fa <__gethex+0x324>
 8011134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011136:	f1c3 0301 	rsb	r3, r3, #1
 801113a:	9315      	str	r3, [sp, #84]	; 0x54
 801113c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801113e:	2b00      	cmp	r3, #0
 8011140:	d0f0      	beq.n	8011124 <__gethex+0x34e>
 8011142:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8011146:	f105 0314 	add.w	r3, r5, #20
 801114a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801114e:	eb03 010a 	add.w	r1, r3, sl
 8011152:	f04f 0c00 	mov.w	ip, #0
 8011156:	4618      	mov	r0, r3
 8011158:	f853 2b04 	ldr.w	r2, [r3], #4
 801115c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011160:	d01c      	beq.n	801119c <__gethex+0x3c6>
 8011162:	3201      	adds	r2, #1
 8011164:	6002      	str	r2, [r0, #0]
 8011166:	2f02      	cmp	r7, #2
 8011168:	f105 0314 	add.w	r3, r5, #20
 801116c:	d138      	bne.n	80111e0 <__gethex+0x40a>
 801116e:	f8d8 2000 	ldr.w	r2, [r8]
 8011172:	3a01      	subs	r2, #1
 8011174:	42b2      	cmp	r2, r6
 8011176:	d10a      	bne.n	801118e <__gethex+0x3b8>
 8011178:	1171      	asrs	r1, r6, #5
 801117a:	2201      	movs	r2, #1
 801117c:	f006 061f 	and.w	r6, r6, #31
 8011180:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011184:	fa02 f606 	lsl.w	r6, r2, r6
 8011188:	421e      	tst	r6, r3
 801118a:	bf18      	it	ne
 801118c:	4617      	movne	r7, r2
 801118e:	f047 0720 	orr.w	r7, r7, #32
 8011192:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011194:	601d      	str	r5, [r3, #0]
 8011196:	9b06      	ldr	r3, [sp, #24]
 8011198:	601c      	str	r4, [r3, #0]
 801119a:	e6a4      	b.n	8010ee6 <__gethex+0x110>
 801119c:	4299      	cmp	r1, r3
 801119e:	f843 cc04 	str.w	ip, [r3, #-4]
 80111a2:	d8d8      	bhi.n	8011156 <__gethex+0x380>
 80111a4:	68ab      	ldr	r3, [r5, #8]
 80111a6:	4599      	cmp	r9, r3
 80111a8:	db12      	blt.n	80111d0 <__gethex+0x3fa>
 80111aa:	6869      	ldr	r1, [r5, #4]
 80111ac:	9802      	ldr	r0, [sp, #8]
 80111ae:	3101      	adds	r1, #1
 80111b0:	f000 f910 	bl	80113d4 <_Balloc>
 80111b4:	692a      	ldr	r2, [r5, #16]
 80111b6:	3202      	adds	r2, #2
 80111b8:	f105 010c 	add.w	r1, r5, #12
 80111bc:	4683      	mov	fp, r0
 80111be:	0092      	lsls	r2, r2, #2
 80111c0:	300c      	adds	r0, #12
 80111c2:	f7fd f983 	bl	800e4cc <memcpy>
 80111c6:	4629      	mov	r1, r5
 80111c8:	9802      	ldr	r0, [sp, #8]
 80111ca:	f000 f937 	bl	801143c <_Bfree>
 80111ce:	465d      	mov	r5, fp
 80111d0:	692b      	ldr	r3, [r5, #16]
 80111d2:	1c5a      	adds	r2, r3, #1
 80111d4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80111d8:	612a      	str	r2, [r5, #16]
 80111da:	2201      	movs	r2, #1
 80111dc:	615a      	str	r2, [r3, #20]
 80111de:	e7c2      	b.n	8011166 <__gethex+0x390>
 80111e0:	692a      	ldr	r2, [r5, #16]
 80111e2:	454a      	cmp	r2, r9
 80111e4:	dd0b      	ble.n	80111fe <__gethex+0x428>
 80111e6:	2101      	movs	r1, #1
 80111e8:	4628      	mov	r0, r5
 80111ea:	f7ff fda5 	bl	8010d38 <rshift>
 80111ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80111f2:	3401      	adds	r4, #1
 80111f4:	42a3      	cmp	r3, r4
 80111f6:	f6ff aed9 	blt.w	8010fac <__gethex+0x1d6>
 80111fa:	2701      	movs	r7, #1
 80111fc:	e7c7      	b.n	801118e <__gethex+0x3b8>
 80111fe:	f016 061f 	ands.w	r6, r6, #31
 8011202:	d0fa      	beq.n	80111fa <__gethex+0x424>
 8011204:	449a      	add	sl, r3
 8011206:	f1c6 0620 	rsb	r6, r6, #32
 801120a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801120e:	f000 f9a5 	bl	801155c <__hi0bits>
 8011212:	42b0      	cmp	r0, r6
 8011214:	dbe7      	blt.n	80111e6 <__gethex+0x410>
 8011216:	e7f0      	b.n	80111fa <__gethex+0x424>

08011218 <L_shift>:
 8011218:	f1c2 0208 	rsb	r2, r2, #8
 801121c:	0092      	lsls	r2, r2, #2
 801121e:	b570      	push	{r4, r5, r6, lr}
 8011220:	f1c2 0620 	rsb	r6, r2, #32
 8011224:	6843      	ldr	r3, [r0, #4]
 8011226:	6804      	ldr	r4, [r0, #0]
 8011228:	fa03 f506 	lsl.w	r5, r3, r6
 801122c:	432c      	orrs	r4, r5
 801122e:	40d3      	lsrs	r3, r2
 8011230:	6004      	str	r4, [r0, #0]
 8011232:	f840 3f04 	str.w	r3, [r0, #4]!
 8011236:	4288      	cmp	r0, r1
 8011238:	d3f4      	bcc.n	8011224 <L_shift+0xc>
 801123a:	bd70      	pop	{r4, r5, r6, pc}

0801123c <__match>:
 801123c:	b530      	push	{r4, r5, lr}
 801123e:	6803      	ldr	r3, [r0, #0]
 8011240:	3301      	adds	r3, #1
 8011242:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011246:	b914      	cbnz	r4, 801124e <__match+0x12>
 8011248:	6003      	str	r3, [r0, #0]
 801124a:	2001      	movs	r0, #1
 801124c:	bd30      	pop	{r4, r5, pc}
 801124e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011252:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8011256:	2d19      	cmp	r5, #25
 8011258:	bf98      	it	ls
 801125a:	3220      	addls	r2, #32
 801125c:	42a2      	cmp	r2, r4
 801125e:	d0f0      	beq.n	8011242 <__match+0x6>
 8011260:	2000      	movs	r0, #0
 8011262:	e7f3      	b.n	801124c <__match+0x10>

08011264 <__hexnan>:
 8011264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011268:	680b      	ldr	r3, [r1, #0]
 801126a:	6801      	ldr	r1, [r0, #0]
 801126c:	115f      	asrs	r7, r3, #5
 801126e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8011272:	f013 031f 	ands.w	r3, r3, #31
 8011276:	b087      	sub	sp, #28
 8011278:	bf18      	it	ne
 801127a:	3704      	addne	r7, #4
 801127c:	2500      	movs	r5, #0
 801127e:	1f3e      	subs	r6, r7, #4
 8011280:	4682      	mov	sl, r0
 8011282:	4690      	mov	r8, r2
 8011284:	9301      	str	r3, [sp, #4]
 8011286:	f847 5c04 	str.w	r5, [r7, #-4]
 801128a:	46b1      	mov	r9, r6
 801128c:	4634      	mov	r4, r6
 801128e:	9502      	str	r5, [sp, #8]
 8011290:	46ab      	mov	fp, r5
 8011292:	784a      	ldrb	r2, [r1, #1]
 8011294:	1c4b      	adds	r3, r1, #1
 8011296:	9303      	str	r3, [sp, #12]
 8011298:	b342      	cbz	r2, 80112ec <__hexnan+0x88>
 801129a:	4610      	mov	r0, r2
 801129c:	9105      	str	r1, [sp, #20]
 801129e:	9204      	str	r2, [sp, #16]
 80112a0:	f7ff fd84 	bl	8010dac <__hexdig_fun>
 80112a4:	2800      	cmp	r0, #0
 80112a6:	d143      	bne.n	8011330 <__hexnan+0xcc>
 80112a8:	9a04      	ldr	r2, [sp, #16]
 80112aa:	9905      	ldr	r1, [sp, #20]
 80112ac:	2a20      	cmp	r2, #32
 80112ae:	d818      	bhi.n	80112e2 <__hexnan+0x7e>
 80112b0:	9b02      	ldr	r3, [sp, #8]
 80112b2:	459b      	cmp	fp, r3
 80112b4:	dd13      	ble.n	80112de <__hexnan+0x7a>
 80112b6:	454c      	cmp	r4, r9
 80112b8:	d206      	bcs.n	80112c8 <__hexnan+0x64>
 80112ba:	2d07      	cmp	r5, #7
 80112bc:	dc04      	bgt.n	80112c8 <__hexnan+0x64>
 80112be:	462a      	mov	r2, r5
 80112c0:	4649      	mov	r1, r9
 80112c2:	4620      	mov	r0, r4
 80112c4:	f7ff ffa8 	bl	8011218 <L_shift>
 80112c8:	4544      	cmp	r4, r8
 80112ca:	d944      	bls.n	8011356 <__hexnan+0xf2>
 80112cc:	2300      	movs	r3, #0
 80112ce:	f1a4 0904 	sub.w	r9, r4, #4
 80112d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80112d6:	f8cd b008 	str.w	fp, [sp, #8]
 80112da:	464c      	mov	r4, r9
 80112dc:	461d      	mov	r5, r3
 80112de:	9903      	ldr	r1, [sp, #12]
 80112e0:	e7d7      	b.n	8011292 <__hexnan+0x2e>
 80112e2:	2a29      	cmp	r2, #41	; 0x29
 80112e4:	d14a      	bne.n	801137c <__hexnan+0x118>
 80112e6:	3102      	adds	r1, #2
 80112e8:	f8ca 1000 	str.w	r1, [sl]
 80112ec:	f1bb 0f00 	cmp.w	fp, #0
 80112f0:	d044      	beq.n	801137c <__hexnan+0x118>
 80112f2:	454c      	cmp	r4, r9
 80112f4:	d206      	bcs.n	8011304 <__hexnan+0xa0>
 80112f6:	2d07      	cmp	r5, #7
 80112f8:	dc04      	bgt.n	8011304 <__hexnan+0xa0>
 80112fa:	462a      	mov	r2, r5
 80112fc:	4649      	mov	r1, r9
 80112fe:	4620      	mov	r0, r4
 8011300:	f7ff ff8a 	bl	8011218 <L_shift>
 8011304:	4544      	cmp	r4, r8
 8011306:	d928      	bls.n	801135a <__hexnan+0xf6>
 8011308:	4643      	mov	r3, r8
 801130a:	f854 2b04 	ldr.w	r2, [r4], #4
 801130e:	f843 2b04 	str.w	r2, [r3], #4
 8011312:	42a6      	cmp	r6, r4
 8011314:	d2f9      	bcs.n	801130a <__hexnan+0xa6>
 8011316:	2200      	movs	r2, #0
 8011318:	f843 2b04 	str.w	r2, [r3], #4
 801131c:	429e      	cmp	r6, r3
 801131e:	d2fb      	bcs.n	8011318 <__hexnan+0xb4>
 8011320:	6833      	ldr	r3, [r6, #0]
 8011322:	b91b      	cbnz	r3, 801132c <__hexnan+0xc8>
 8011324:	4546      	cmp	r6, r8
 8011326:	d127      	bne.n	8011378 <__hexnan+0x114>
 8011328:	2301      	movs	r3, #1
 801132a:	6033      	str	r3, [r6, #0]
 801132c:	2005      	movs	r0, #5
 801132e:	e026      	b.n	801137e <__hexnan+0x11a>
 8011330:	3501      	adds	r5, #1
 8011332:	2d08      	cmp	r5, #8
 8011334:	f10b 0b01 	add.w	fp, fp, #1
 8011338:	dd06      	ble.n	8011348 <__hexnan+0xe4>
 801133a:	4544      	cmp	r4, r8
 801133c:	d9cf      	bls.n	80112de <__hexnan+0x7a>
 801133e:	2300      	movs	r3, #0
 8011340:	f844 3c04 	str.w	r3, [r4, #-4]
 8011344:	2501      	movs	r5, #1
 8011346:	3c04      	subs	r4, #4
 8011348:	6822      	ldr	r2, [r4, #0]
 801134a:	f000 000f 	and.w	r0, r0, #15
 801134e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8011352:	6020      	str	r0, [r4, #0]
 8011354:	e7c3      	b.n	80112de <__hexnan+0x7a>
 8011356:	2508      	movs	r5, #8
 8011358:	e7c1      	b.n	80112de <__hexnan+0x7a>
 801135a:	9b01      	ldr	r3, [sp, #4]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d0df      	beq.n	8011320 <__hexnan+0xbc>
 8011360:	f04f 32ff 	mov.w	r2, #4294967295
 8011364:	f1c3 0320 	rsb	r3, r3, #32
 8011368:	fa22 f303 	lsr.w	r3, r2, r3
 801136c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011370:	401a      	ands	r2, r3
 8011372:	f847 2c04 	str.w	r2, [r7, #-4]
 8011376:	e7d3      	b.n	8011320 <__hexnan+0xbc>
 8011378:	3e04      	subs	r6, #4
 801137a:	e7d1      	b.n	8011320 <__hexnan+0xbc>
 801137c:	2004      	movs	r0, #4
 801137e:	b007      	add	sp, #28
 8011380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011384 <__locale_ctype_ptr_l>:
 8011384:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8011388:	4770      	bx	lr

0801138a <__localeconv_l>:
 801138a:	30f0      	adds	r0, #240	; 0xf0
 801138c:	4770      	bx	lr
	...

08011390 <_localeconv_r>:
 8011390:	4b04      	ldr	r3, [pc, #16]	; (80113a4 <_localeconv_r+0x14>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	6a18      	ldr	r0, [r3, #32]
 8011396:	4b04      	ldr	r3, [pc, #16]	; (80113a8 <_localeconv_r+0x18>)
 8011398:	2800      	cmp	r0, #0
 801139a:	bf08      	it	eq
 801139c:	4618      	moveq	r0, r3
 801139e:	30f0      	adds	r0, #240	; 0xf0
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop
 80113a4:	2000017c 	.word	0x2000017c
 80113a8:	200001e0 	.word	0x200001e0

080113ac <__ascii_mbtowc>:
 80113ac:	b082      	sub	sp, #8
 80113ae:	b901      	cbnz	r1, 80113b2 <__ascii_mbtowc+0x6>
 80113b0:	a901      	add	r1, sp, #4
 80113b2:	b142      	cbz	r2, 80113c6 <__ascii_mbtowc+0x1a>
 80113b4:	b14b      	cbz	r3, 80113ca <__ascii_mbtowc+0x1e>
 80113b6:	7813      	ldrb	r3, [r2, #0]
 80113b8:	600b      	str	r3, [r1, #0]
 80113ba:	7812      	ldrb	r2, [r2, #0]
 80113bc:	1c10      	adds	r0, r2, #0
 80113be:	bf18      	it	ne
 80113c0:	2001      	movne	r0, #1
 80113c2:	b002      	add	sp, #8
 80113c4:	4770      	bx	lr
 80113c6:	4610      	mov	r0, r2
 80113c8:	e7fb      	b.n	80113c2 <__ascii_mbtowc+0x16>
 80113ca:	f06f 0001 	mvn.w	r0, #1
 80113ce:	e7f8      	b.n	80113c2 <__ascii_mbtowc+0x16>

080113d0 <__malloc_lock>:
 80113d0:	4770      	bx	lr

080113d2 <__malloc_unlock>:
 80113d2:	4770      	bx	lr

080113d4 <_Balloc>:
 80113d4:	b570      	push	{r4, r5, r6, lr}
 80113d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80113d8:	4604      	mov	r4, r0
 80113da:	460e      	mov	r6, r1
 80113dc:	b93d      	cbnz	r5, 80113ee <_Balloc+0x1a>
 80113de:	2010      	movs	r0, #16
 80113e0:	f7fd f864 	bl	800e4ac <malloc>
 80113e4:	6260      	str	r0, [r4, #36]	; 0x24
 80113e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80113ea:	6005      	str	r5, [r0, #0]
 80113ec:	60c5      	str	r5, [r0, #12]
 80113ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80113f0:	68eb      	ldr	r3, [r5, #12]
 80113f2:	b183      	cbz	r3, 8011416 <_Balloc+0x42>
 80113f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80113f6:	68db      	ldr	r3, [r3, #12]
 80113f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80113fc:	b9b8      	cbnz	r0, 801142e <_Balloc+0x5a>
 80113fe:	2101      	movs	r1, #1
 8011400:	fa01 f506 	lsl.w	r5, r1, r6
 8011404:	1d6a      	adds	r2, r5, #5
 8011406:	0092      	lsls	r2, r2, #2
 8011408:	4620      	mov	r0, r4
 801140a:	f000 fbe2 	bl	8011bd2 <_calloc_r>
 801140e:	b160      	cbz	r0, 801142a <_Balloc+0x56>
 8011410:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8011414:	e00e      	b.n	8011434 <_Balloc+0x60>
 8011416:	2221      	movs	r2, #33	; 0x21
 8011418:	2104      	movs	r1, #4
 801141a:	4620      	mov	r0, r4
 801141c:	f000 fbd9 	bl	8011bd2 <_calloc_r>
 8011420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011422:	60e8      	str	r0, [r5, #12]
 8011424:	68db      	ldr	r3, [r3, #12]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d1e4      	bne.n	80113f4 <_Balloc+0x20>
 801142a:	2000      	movs	r0, #0
 801142c:	bd70      	pop	{r4, r5, r6, pc}
 801142e:	6802      	ldr	r2, [r0, #0]
 8011430:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8011434:	2300      	movs	r3, #0
 8011436:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801143a:	e7f7      	b.n	801142c <_Balloc+0x58>

0801143c <_Bfree>:
 801143c:	b570      	push	{r4, r5, r6, lr}
 801143e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011440:	4606      	mov	r6, r0
 8011442:	460d      	mov	r5, r1
 8011444:	b93c      	cbnz	r4, 8011456 <_Bfree+0x1a>
 8011446:	2010      	movs	r0, #16
 8011448:	f7fd f830 	bl	800e4ac <malloc>
 801144c:	6270      	str	r0, [r6, #36]	; 0x24
 801144e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011452:	6004      	str	r4, [r0, #0]
 8011454:	60c4      	str	r4, [r0, #12]
 8011456:	b13d      	cbz	r5, 8011468 <_Bfree+0x2c>
 8011458:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801145a:	686a      	ldr	r2, [r5, #4]
 801145c:	68db      	ldr	r3, [r3, #12]
 801145e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011462:	6029      	str	r1, [r5, #0]
 8011464:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011468:	bd70      	pop	{r4, r5, r6, pc}

0801146a <__multadd>:
 801146a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801146e:	690d      	ldr	r5, [r1, #16]
 8011470:	461f      	mov	r7, r3
 8011472:	4606      	mov	r6, r0
 8011474:	460c      	mov	r4, r1
 8011476:	f101 0c14 	add.w	ip, r1, #20
 801147a:	2300      	movs	r3, #0
 801147c:	f8dc 0000 	ldr.w	r0, [ip]
 8011480:	b281      	uxth	r1, r0
 8011482:	fb02 7101 	mla	r1, r2, r1, r7
 8011486:	0c0f      	lsrs	r7, r1, #16
 8011488:	0c00      	lsrs	r0, r0, #16
 801148a:	fb02 7000 	mla	r0, r2, r0, r7
 801148e:	b289      	uxth	r1, r1
 8011490:	3301      	adds	r3, #1
 8011492:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011496:	429d      	cmp	r5, r3
 8011498:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801149c:	f84c 1b04 	str.w	r1, [ip], #4
 80114a0:	dcec      	bgt.n	801147c <__multadd+0x12>
 80114a2:	b1d7      	cbz	r7, 80114da <__multadd+0x70>
 80114a4:	68a3      	ldr	r3, [r4, #8]
 80114a6:	42ab      	cmp	r3, r5
 80114a8:	dc12      	bgt.n	80114d0 <__multadd+0x66>
 80114aa:	6861      	ldr	r1, [r4, #4]
 80114ac:	4630      	mov	r0, r6
 80114ae:	3101      	adds	r1, #1
 80114b0:	f7ff ff90 	bl	80113d4 <_Balloc>
 80114b4:	6922      	ldr	r2, [r4, #16]
 80114b6:	3202      	adds	r2, #2
 80114b8:	f104 010c 	add.w	r1, r4, #12
 80114bc:	4680      	mov	r8, r0
 80114be:	0092      	lsls	r2, r2, #2
 80114c0:	300c      	adds	r0, #12
 80114c2:	f7fd f803 	bl	800e4cc <memcpy>
 80114c6:	4621      	mov	r1, r4
 80114c8:	4630      	mov	r0, r6
 80114ca:	f7ff ffb7 	bl	801143c <_Bfree>
 80114ce:	4644      	mov	r4, r8
 80114d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80114d4:	3501      	adds	r5, #1
 80114d6:	615f      	str	r7, [r3, #20]
 80114d8:	6125      	str	r5, [r4, #16]
 80114da:	4620      	mov	r0, r4
 80114dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114e0 <__s2b>:
 80114e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114e4:	460c      	mov	r4, r1
 80114e6:	4615      	mov	r5, r2
 80114e8:	461f      	mov	r7, r3
 80114ea:	2209      	movs	r2, #9
 80114ec:	3308      	adds	r3, #8
 80114ee:	4606      	mov	r6, r0
 80114f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80114f4:	2100      	movs	r1, #0
 80114f6:	2201      	movs	r2, #1
 80114f8:	429a      	cmp	r2, r3
 80114fa:	db20      	blt.n	801153e <__s2b+0x5e>
 80114fc:	4630      	mov	r0, r6
 80114fe:	f7ff ff69 	bl	80113d4 <_Balloc>
 8011502:	9b08      	ldr	r3, [sp, #32]
 8011504:	6143      	str	r3, [r0, #20]
 8011506:	2d09      	cmp	r5, #9
 8011508:	f04f 0301 	mov.w	r3, #1
 801150c:	6103      	str	r3, [r0, #16]
 801150e:	dd19      	ble.n	8011544 <__s2b+0x64>
 8011510:	f104 0809 	add.w	r8, r4, #9
 8011514:	46c1      	mov	r9, r8
 8011516:	442c      	add	r4, r5
 8011518:	f819 3b01 	ldrb.w	r3, [r9], #1
 801151c:	4601      	mov	r1, r0
 801151e:	3b30      	subs	r3, #48	; 0x30
 8011520:	220a      	movs	r2, #10
 8011522:	4630      	mov	r0, r6
 8011524:	f7ff ffa1 	bl	801146a <__multadd>
 8011528:	45a1      	cmp	r9, r4
 801152a:	d1f5      	bne.n	8011518 <__s2b+0x38>
 801152c:	eb08 0405 	add.w	r4, r8, r5
 8011530:	3c08      	subs	r4, #8
 8011532:	1b2d      	subs	r5, r5, r4
 8011534:	1963      	adds	r3, r4, r5
 8011536:	42bb      	cmp	r3, r7
 8011538:	db07      	blt.n	801154a <__s2b+0x6a>
 801153a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801153e:	0052      	lsls	r2, r2, #1
 8011540:	3101      	adds	r1, #1
 8011542:	e7d9      	b.n	80114f8 <__s2b+0x18>
 8011544:	340a      	adds	r4, #10
 8011546:	2509      	movs	r5, #9
 8011548:	e7f3      	b.n	8011532 <__s2b+0x52>
 801154a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801154e:	4601      	mov	r1, r0
 8011550:	3b30      	subs	r3, #48	; 0x30
 8011552:	220a      	movs	r2, #10
 8011554:	4630      	mov	r0, r6
 8011556:	f7ff ff88 	bl	801146a <__multadd>
 801155a:	e7eb      	b.n	8011534 <__s2b+0x54>

0801155c <__hi0bits>:
 801155c:	0c02      	lsrs	r2, r0, #16
 801155e:	0412      	lsls	r2, r2, #16
 8011560:	4603      	mov	r3, r0
 8011562:	b9b2      	cbnz	r2, 8011592 <__hi0bits+0x36>
 8011564:	0403      	lsls	r3, r0, #16
 8011566:	2010      	movs	r0, #16
 8011568:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801156c:	bf04      	itt	eq
 801156e:	021b      	lsleq	r3, r3, #8
 8011570:	3008      	addeq	r0, #8
 8011572:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011576:	bf04      	itt	eq
 8011578:	011b      	lsleq	r3, r3, #4
 801157a:	3004      	addeq	r0, #4
 801157c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011580:	bf04      	itt	eq
 8011582:	009b      	lsleq	r3, r3, #2
 8011584:	3002      	addeq	r0, #2
 8011586:	2b00      	cmp	r3, #0
 8011588:	db06      	blt.n	8011598 <__hi0bits+0x3c>
 801158a:	005b      	lsls	r3, r3, #1
 801158c:	d503      	bpl.n	8011596 <__hi0bits+0x3a>
 801158e:	3001      	adds	r0, #1
 8011590:	4770      	bx	lr
 8011592:	2000      	movs	r0, #0
 8011594:	e7e8      	b.n	8011568 <__hi0bits+0xc>
 8011596:	2020      	movs	r0, #32
 8011598:	4770      	bx	lr

0801159a <__lo0bits>:
 801159a:	6803      	ldr	r3, [r0, #0]
 801159c:	f013 0207 	ands.w	r2, r3, #7
 80115a0:	4601      	mov	r1, r0
 80115a2:	d00b      	beq.n	80115bc <__lo0bits+0x22>
 80115a4:	07da      	lsls	r2, r3, #31
 80115a6:	d423      	bmi.n	80115f0 <__lo0bits+0x56>
 80115a8:	0798      	lsls	r0, r3, #30
 80115aa:	bf49      	itett	mi
 80115ac:	085b      	lsrmi	r3, r3, #1
 80115ae:	089b      	lsrpl	r3, r3, #2
 80115b0:	2001      	movmi	r0, #1
 80115b2:	600b      	strmi	r3, [r1, #0]
 80115b4:	bf5c      	itt	pl
 80115b6:	600b      	strpl	r3, [r1, #0]
 80115b8:	2002      	movpl	r0, #2
 80115ba:	4770      	bx	lr
 80115bc:	b298      	uxth	r0, r3
 80115be:	b9a8      	cbnz	r0, 80115ec <__lo0bits+0x52>
 80115c0:	0c1b      	lsrs	r3, r3, #16
 80115c2:	2010      	movs	r0, #16
 80115c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80115c8:	bf04      	itt	eq
 80115ca:	0a1b      	lsreq	r3, r3, #8
 80115cc:	3008      	addeq	r0, #8
 80115ce:	071a      	lsls	r2, r3, #28
 80115d0:	bf04      	itt	eq
 80115d2:	091b      	lsreq	r3, r3, #4
 80115d4:	3004      	addeq	r0, #4
 80115d6:	079a      	lsls	r2, r3, #30
 80115d8:	bf04      	itt	eq
 80115da:	089b      	lsreq	r3, r3, #2
 80115dc:	3002      	addeq	r0, #2
 80115de:	07da      	lsls	r2, r3, #31
 80115e0:	d402      	bmi.n	80115e8 <__lo0bits+0x4e>
 80115e2:	085b      	lsrs	r3, r3, #1
 80115e4:	d006      	beq.n	80115f4 <__lo0bits+0x5a>
 80115e6:	3001      	adds	r0, #1
 80115e8:	600b      	str	r3, [r1, #0]
 80115ea:	4770      	bx	lr
 80115ec:	4610      	mov	r0, r2
 80115ee:	e7e9      	b.n	80115c4 <__lo0bits+0x2a>
 80115f0:	2000      	movs	r0, #0
 80115f2:	4770      	bx	lr
 80115f4:	2020      	movs	r0, #32
 80115f6:	4770      	bx	lr

080115f8 <__i2b>:
 80115f8:	b510      	push	{r4, lr}
 80115fa:	460c      	mov	r4, r1
 80115fc:	2101      	movs	r1, #1
 80115fe:	f7ff fee9 	bl	80113d4 <_Balloc>
 8011602:	2201      	movs	r2, #1
 8011604:	6144      	str	r4, [r0, #20]
 8011606:	6102      	str	r2, [r0, #16]
 8011608:	bd10      	pop	{r4, pc}

0801160a <__multiply>:
 801160a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801160e:	4614      	mov	r4, r2
 8011610:	690a      	ldr	r2, [r1, #16]
 8011612:	6923      	ldr	r3, [r4, #16]
 8011614:	429a      	cmp	r2, r3
 8011616:	bfb8      	it	lt
 8011618:	460b      	movlt	r3, r1
 801161a:	4688      	mov	r8, r1
 801161c:	bfbc      	itt	lt
 801161e:	46a0      	movlt	r8, r4
 8011620:	461c      	movlt	r4, r3
 8011622:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011626:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801162a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801162e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011632:	eb07 0609 	add.w	r6, r7, r9
 8011636:	42b3      	cmp	r3, r6
 8011638:	bfb8      	it	lt
 801163a:	3101      	addlt	r1, #1
 801163c:	f7ff feca 	bl	80113d4 <_Balloc>
 8011640:	f100 0514 	add.w	r5, r0, #20
 8011644:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8011648:	462b      	mov	r3, r5
 801164a:	2200      	movs	r2, #0
 801164c:	4573      	cmp	r3, lr
 801164e:	d316      	bcc.n	801167e <__multiply+0x74>
 8011650:	f104 0214 	add.w	r2, r4, #20
 8011654:	f108 0114 	add.w	r1, r8, #20
 8011658:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801165c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011660:	9300      	str	r3, [sp, #0]
 8011662:	9b00      	ldr	r3, [sp, #0]
 8011664:	9201      	str	r2, [sp, #4]
 8011666:	4293      	cmp	r3, r2
 8011668:	d80c      	bhi.n	8011684 <__multiply+0x7a>
 801166a:	2e00      	cmp	r6, #0
 801166c:	dd03      	ble.n	8011676 <__multiply+0x6c>
 801166e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011672:	2b00      	cmp	r3, #0
 8011674:	d05d      	beq.n	8011732 <__multiply+0x128>
 8011676:	6106      	str	r6, [r0, #16]
 8011678:	b003      	add	sp, #12
 801167a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167e:	f843 2b04 	str.w	r2, [r3], #4
 8011682:	e7e3      	b.n	801164c <__multiply+0x42>
 8011684:	f8b2 b000 	ldrh.w	fp, [r2]
 8011688:	f1bb 0f00 	cmp.w	fp, #0
 801168c:	d023      	beq.n	80116d6 <__multiply+0xcc>
 801168e:	4689      	mov	r9, r1
 8011690:	46ac      	mov	ip, r5
 8011692:	f04f 0800 	mov.w	r8, #0
 8011696:	f859 4b04 	ldr.w	r4, [r9], #4
 801169a:	f8dc a000 	ldr.w	sl, [ip]
 801169e:	b2a3      	uxth	r3, r4
 80116a0:	fa1f fa8a 	uxth.w	sl, sl
 80116a4:	fb0b a303 	mla	r3, fp, r3, sl
 80116a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80116ac:	f8dc 4000 	ldr.w	r4, [ip]
 80116b0:	4443      	add	r3, r8
 80116b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80116b6:	fb0b 840a 	mla	r4, fp, sl, r8
 80116ba:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80116be:	46e2      	mov	sl, ip
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80116c6:	454f      	cmp	r7, r9
 80116c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80116cc:	f84a 3b04 	str.w	r3, [sl], #4
 80116d0:	d82b      	bhi.n	801172a <__multiply+0x120>
 80116d2:	f8cc 8004 	str.w	r8, [ip, #4]
 80116d6:	9b01      	ldr	r3, [sp, #4]
 80116d8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80116dc:	3204      	adds	r2, #4
 80116de:	f1ba 0f00 	cmp.w	sl, #0
 80116e2:	d020      	beq.n	8011726 <__multiply+0x11c>
 80116e4:	682b      	ldr	r3, [r5, #0]
 80116e6:	4689      	mov	r9, r1
 80116e8:	46a8      	mov	r8, r5
 80116ea:	f04f 0b00 	mov.w	fp, #0
 80116ee:	f8b9 c000 	ldrh.w	ip, [r9]
 80116f2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80116f6:	fb0a 440c 	mla	r4, sl, ip, r4
 80116fa:	445c      	add	r4, fp
 80116fc:	46c4      	mov	ip, r8
 80116fe:	b29b      	uxth	r3, r3
 8011700:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011704:	f84c 3b04 	str.w	r3, [ip], #4
 8011708:	f859 3b04 	ldr.w	r3, [r9], #4
 801170c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8011710:	0c1b      	lsrs	r3, r3, #16
 8011712:	fb0a b303 	mla	r3, sl, r3, fp
 8011716:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801171a:	454f      	cmp	r7, r9
 801171c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8011720:	d805      	bhi.n	801172e <__multiply+0x124>
 8011722:	f8c8 3004 	str.w	r3, [r8, #4]
 8011726:	3504      	adds	r5, #4
 8011728:	e79b      	b.n	8011662 <__multiply+0x58>
 801172a:	46d4      	mov	ip, sl
 801172c:	e7b3      	b.n	8011696 <__multiply+0x8c>
 801172e:	46e0      	mov	r8, ip
 8011730:	e7dd      	b.n	80116ee <__multiply+0xe4>
 8011732:	3e01      	subs	r6, #1
 8011734:	e799      	b.n	801166a <__multiply+0x60>
	...

08011738 <__pow5mult>:
 8011738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801173c:	4615      	mov	r5, r2
 801173e:	f012 0203 	ands.w	r2, r2, #3
 8011742:	4606      	mov	r6, r0
 8011744:	460f      	mov	r7, r1
 8011746:	d007      	beq.n	8011758 <__pow5mult+0x20>
 8011748:	3a01      	subs	r2, #1
 801174a:	4c21      	ldr	r4, [pc, #132]	; (80117d0 <__pow5mult+0x98>)
 801174c:	2300      	movs	r3, #0
 801174e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011752:	f7ff fe8a 	bl	801146a <__multadd>
 8011756:	4607      	mov	r7, r0
 8011758:	10ad      	asrs	r5, r5, #2
 801175a:	d035      	beq.n	80117c8 <__pow5mult+0x90>
 801175c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801175e:	b93c      	cbnz	r4, 8011770 <__pow5mult+0x38>
 8011760:	2010      	movs	r0, #16
 8011762:	f7fc fea3 	bl	800e4ac <malloc>
 8011766:	6270      	str	r0, [r6, #36]	; 0x24
 8011768:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801176c:	6004      	str	r4, [r0, #0]
 801176e:	60c4      	str	r4, [r0, #12]
 8011770:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011774:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011778:	b94c      	cbnz	r4, 801178e <__pow5mult+0x56>
 801177a:	f240 2171 	movw	r1, #625	; 0x271
 801177e:	4630      	mov	r0, r6
 8011780:	f7ff ff3a 	bl	80115f8 <__i2b>
 8011784:	2300      	movs	r3, #0
 8011786:	f8c8 0008 	str.w	r0, [r8, #8]
 801178a:	4604      	mov	r4, r0
 801178c:	6003      	str	r3, [r0, #0]
 801178e:	f04f 0800 	mov.w	r8, #0
 8011792:	07eb      	lsls	r3, r5, #31
 8011794:	d50a      	bpl.n	80117ac <__pow5mult+0x74>
 8011796:	4639      	mov	r1, r7
 8011798:	4622      	mov	r2, r4
 801179a:	4630      	mov	r0, r6
 801179c:	f7ff ff35 	bl	801160a <__multiply>
 80117a0:	4639      	mov	r1, r7
 80117a2:	4681      	mov	r9, r0
 80117a4:	4630      	mov	r0, r6
 80117a6:	f7ff fe49 	bl	801143c <_Bfree>
 80117aa:	464f      	mov	r7, r9
 80117ac:	106d      	asrs	r5, r5, #1
 80117ae:	d00b      	beq.n	80117c8 <__pow5mult+0x90>
 80117b0:	6820      	ldr	r0, [r4, #0]
 80117b2:	b938      	cbnz	r0, 80117c4 <__pow5mult+0x8c>
 80117b4:	4622      	mov	r2, r4
 80117b6:	4621      	mov	r1, r4
 80117b8:	4630      	mov	r0, r6
 80117ba:	f7ff ff26 	bl	801160a <__multiply>
 80117be:	6020      	str	r0, [r4, #0]
 80117c0:	f8c0 8000 	str.w	r8, [r0]
 80117c4:	4604      	mov	r4, r0
 80117c6:	e7e4      	b.n	8011792 <__pow5mult+0x5a>
 80117c8:	4638      	mov	r0, r7
 80117ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117ce:	bf00      	nop
 80117d0:	080138c0 	.word	0x080138c0

080117d4 <__lshift>:
 80117d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117d8:	460c      	mov	r4, r1
 80117da:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80117de:	6923      	ldr	r3, [r4, #16]
 80117e0:	6849      	ldr	r1, [r1, #4]
 80117e2:	eb0a 0903 	add.w	r9, sl, r3
 80117e6:	68a3      	ldr	r3, [r4, #8]
 80117e8:	4607      	mov	r7, r0
 80117ea:	4616      	mov	r6, r2
 80117ec:	f109 0501 	add.w	r5, r9, #1
 80117f0:	42ab      	cmp	r3, r5
 80117f2:	db32      	blt.n	801185a <__lshift+0x86>
 80117f4:	4638      	mov	r0, r7
 80117f6:	f7ff fded 	bl	80113d4 <_Balloc>
 80117fa:	2300      	movs	r3, #0
 80117fc:	4680      	mov	r8, r0
 80117fe:	f100 0114 	add.w	r1, r0, #20
 8011802:	461a      	mov	r2, r3
 8011804:	4553      	cmp	r3, sl
 8011806:	db2b      	blt.n	8011860 <__lshift+0x8c>
 8011808:	6920      	ldr	r0, [r4, #16]
 801180a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801180e:	f104 0314 	add.w	r3, r4, #20
 8011812:	f016 021f 	ands.w	r2, r6, #31
 8011816:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801181a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801181e:	d025      	beq.n	801186c <__lshift+0x98>
 8011820:	f1c2 0e20 	rsb	lr, r2, #32
 8011824:	2000      	movs	r0, #0
 8011826:	681e      	ldr	r6, [r3, #0]
 8011828:	468a      	mov	sl, r1
 801182a:	4096      	lsls	r6, r2
 801182c:	4330      	orrs	r0, r6
 801182e:	f84a 0b04 	str.w	r0, [sl], #4
 8011832:	f853 0b04 	ldr.w	r0, [r3], #4
 8011836:	459c      	cmp	ip, r3
 8011838:	fa20 f00e 	lsr.w	r0, r0, lr
 801183c:	d814      	bhi.n	8011868 <__lshift+0x94>
 801183e:	6048      	str	r0, [r1, #4]
 8011840:	b108      	cbz	r0, 8011846 <__lshift+0x72>
 8011842:	f109 0502 	add.w	r5, r9, #2
 8011846:	3d01      	subs	r5, #1
 8011848:	4638      	mov	r0, r7
 801184a:	f8c8 5010 	str.w	r5, [r8, #16]
 801184e:	4621      	mov	r1, r4
 8011850:	f7ff fdf4 	bl	801143c <_Bfree>
 8011854:	4640      	mov	r0, r8
 8011856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801185a:	3101      	adds	r1, #1
 801185c:	005b      	lsls	r3, r3, #1
 801185e:	e7c7      	b.n	80117f0 <__lshift+0x1c>
 8011860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011864:	3301      	adds	r3, #1
 8011866:	e7cd      	b.n	8011804 <__lshift+0x30>
 8011868:	4651      	mov	r1, sl
 801186a:	e7dc      	b.n	8011826 <__lshift+0x52>
 801186c:	3904      	subs	r1, #4
 801186e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011872:	f841 2f04 	str.w	r2, [r1, #4]!
 8011876:	459c      	cmp	ip, r3
 8011878:	d8f9      	bhi.n	801186e <__lshift+0x9a>
 801187a:	e7e4      	b.n	8011846 <__lshift+0x72>

0801187c <__mcmp>:
 801187c:	6903      	ldr	r3, [r0, #16]
 801187e:	690a      	ldr	r2, [r1, #16]
 8011880:	1a9b      	subs	r3, r3, r2
 8011882:	b530      	push	{r4, r5, lr}
 8011884:	d10c      	bne.n	80118a0 <__mcmp+0x24>
 8011886:	0092      	lsls	r2, r2, #2
 8011888:	3014      	adds	r0, #20
 801188a:	3114      	adds	r1, #20
 801188c:	1884      	adds	r4, r0, r2
 801188e:	4411      	add	r1, r2
 8011890:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011894:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011898:	4295      	cmp	r5, r2
 801189a:	d003      	beq.n	80118a4 <__mcmp+0x28>
 801189c:	d305      	bcc.n	80118aa <__mcmp+0x2e>
 801189e:	2301      	movs	r3, #1
 80118a0:	4618      	mov	r0, r3
 80118a2:	bd30      	pop	{r4, r5, pc}
 80118a4:	42a0      	cmp	r0, r4
 80118a6:	d3f3      	bcc.n	8011890 <__mcmp+0x14>
 80118a8:	e7fa      	b.n	80118a0 <__mcmp+0x24>
 80118aa:	f04f 33ff 	mov.w	r3, #4294967295
 80118ae:	e7f7      	b.n	80118a0 <__mcmp+0x24>

080118b0 <__mdiff>:
 80118b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118b4:	460d      	mov	r5, r1
 80118b6:	4607      	mov	r7, r0
 80118b8:	4611      	mov	r1, r2
 80118ba:	4628      	mov	r0, r5
 80118bc:	4614      	mov	r4, r2
 80118be:	f7ff ffdd 	bl	801187c <__mcmp>
 80118c2:	1e06      	subs	r6, r0, #0
 80118c4:	d108      	bne.n	80118d8 <__mdiff+0x28>
 80118c6:	4631      	mov	r1, r6
 80118c8:	4638      	mov	r0, r7
 80118ca:	f7ff fd83 	bl	80113d4 <_Balloc>
 80118ce:	2301      	movs	r3, #1
 80118d0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80118d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118d8:	bfa4      	itt	ge
 80118da:	4623      	movge	r3, r4
 80118dc:	462c      	movge	r4, r5
 80118de:	4638      	mov	r0, r7
 80118e0:	6861      	ldr	r1, [r4, #4]
 80118e2:	bfa6      	itte	ge
 80118e4:	461d      	movge	r5, r3
 80118e6:	2600      	movge	r6, #0
 80118e8:	2601      	movlt	r6, #1
 80118ea:	f7ff fd73 	bl	80113d4 <_Balloc>
 80118ee:	692b      	ldr	r3, [r5, #16]
 80118f0:	60c6      	str	r6, [r0, #12]
 80118f2:	6926      	ldr	r6, [r4, #16]
 80118f4:	f105 0914 	add.w	r9, r5, #20
 80118f8:	f104 0214 	add.w	r2, r4, #20
 80118fc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011900:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8011904:	f100 0514 	add.w	r5, r0, #20
 8011908:	f04f 0e00 	mov.w	lr, #0
 801190c:	f852 ab04 	ldr.w	sl, [r2], #4
 8011910:	f859 4b04 	ldr.w	r4, [r9], #4
 8011914:	fa1e f18a 	uxtah	r1, lr, sl
 8011918:	b2a3      	uxth	r3, r4
 801191a:	1ac9      	subs	r1, r1, r3
 801191c:	0c23      	lsrs	r3, r4, #16
 801191e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8011922:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8011926:	b289      	uxth	r1, r1
 8011928:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801192c:	45c8      	cmp	r8, r9
 801192e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011932:	4694      	mov	ip, r2
 8011934:	f845 3b04 	str.w	r3, [r5], #4
 8011938:	d8e8      	bhi.n	801190c <__mdiff+0x5c>
 801193a:	45bc      	cmp	ip, r7
 801193c:	d304      	bcc.n	8011948 <__mdiff+0x98>
 801193e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8011942:	b183      	cbz	r3, 8011966 <__mdiff+0xb6>
 8011944:	6106      	str	r6, [r0, #16]
 8011946:	e7c5      	b.n	80118d4 <__mdiff+0x24>
 8011948:	f85c 1b04 	ldr.w	r1, [ip], #4
 801194c:	fa1e f381 	uxtah	r3, lr, r1
 8011950:	141a      	asrs	r2, r3, #16
 8011952:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011956:	b29b      	uxth	r3, r3
 8011958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801195c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011960:	f845 3b04 	str.w	r3, [r5], #4
 8011964:	e7e9      	b.n	801193a <__mdiff+0x8a>
 8011966:	3e01      	subs	r6, #1
 8011968:	e7e9      	b.n	801193e <__mdiff+0x8e>
	...

0801196c <__ulp>:
 801196c:	4b12      	ldr	r3, [pc, #72]	; (80119b8 <__ulp+0x4c>)
 801196e:	ee10 2a90 	vmov	r2, s1
 8011972:	401a      	ands	r2, r3
 8011974:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011978:	2b00      	cmp	r3, #0
 801197a:	dd04      	ble.n	8011986 <__ulp+0x1a>
 801197c:	2000      	movs	r0, #0
 801197e:	4619      	mov	r1, r3
 8011980:	ec41 0b10 	vmov	d0, r0, r1
 8011984:	4770      	bx	lr
 8011986:	425b      	negs	r3, r3
 8011988:	151b      	asrs	r3, r3, #20
 801198a:	2b13      	cmp	r3, #19
 801198c:	f04f 0000 	mov.w	r0, #0
 8011990:	f04f 0100 	mov.w	r1, #0
 8011994:	dc04      	bgt.n	80119a0 <__ulp+0x34>
 8011996:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801199a:	fa42 f103 	asr.w	r1, r2, r3
 801199e:	e7ef      	b.n	8011980 <__ulp+0x14>
 80119a0:	3b14      	subs	r3, #20
 80119a2:	2b1e      	cmp	r3, #30
 80119a4:	f04f 0201 	mov.w	r2, #1
 80119a8:	bfda      	itte	le
 80119aa:	f1c3 031f 	rsble	r3, r3, #31
 80119ae:	fa02 f303 	lslle.w	r3, r2, r3
 80119b2:	4613      	movgt	r3, r2
 80119b4:	4618      	mov	r0, r3
 80119b6:	e7e3      	b.n	8011980 <__ulp+0x14>
 80119b8:	7ff00000 	.word	0x7ff00000

080119bc <__b2d>:
 80119bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119be:	6905      	ldr	r5, [r0, #16]
 80119c0:	f100 0714 	add.w	r7, r0, #20
 80119c4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80119c8:	1f2e      	subs	r6, r5, #4
 80119ca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80119ce:	4620      	mov	r0, r4
 80119d0:	f7ff fdc4 	bl	801155c <__hi0bits>
 80119d4:	f1c0 0320 	rsb	r3, r0, #32
 80119d8:	280a      	cmp	r0, #10
 80119da:	600b      	str	r3, [r1, #0]
 80119dc:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011a54 <__b2d+0x98>
 80119e0:	dc14      	bgt.n	8011a0c <__b2d+0x50>
 80119e2:	f1c0 0e0b 	rsb	lr, r0, #11
 80119e6:	fa24 f10e 	lsr.w	r1, r4, lr
 80119ea:	42b7      	cmp	r7, r6
 80119ec:	ea41 030c 	orr.w	r3, r1, ip
 80119f0:	bf34      	ite	cc
 80119f2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80119f6:	2100      	movcs	r1, #0
 80119f8:	3015      	adds	r0, #21
 80119fa:	fa04 f000 	lsl.w	r0, r4, r0
 80119fe:	fa21 f10e 	lsr.w	r1, r1, lr
 8011a02:	ea40 0201 	orr.w	r2, r0, r1
 8011a06:	ec43 2b10 	vmov	d0, r2, r3
 8011a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a0c:	42b7      	cmp	r7, r6
 8011a0e:	bf3a      	itte	cc
 8011a10:	f1a5 0608 	subcc.w	r6, r5, #8
 8011a14:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011a18:	2100      	movcs	r1, #0
 8011a1a:	380b      	subs	r0, #11
 8011a1c:	d015      	beq.n	8011a4a <__b2d+0x8e>
 8011a1e:	4084      	lsls	r4, r0
 8011a20:	f1c0 0520 	rsb	r5, r0, #32
 8011a24:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011a28:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8011a2c:	42be      	cmp	r6, r7
 8011a2e:	fa21 fc05 	lsr.w	ip, r1, r5
 8011a32:	ea44 030c 	orr.w	r3, r4, ip
 8011a36:	bf8c      	ite	hi
 8011a38:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011a3c:	2400      	movls	r4, #0
 8011a3e:	fa01 f000 	lsl.w	r0, r1, r0
 8011a42:	40ec      	lsrs	r4, r5
 8011a44:	ea40 0204 	orr.w	r2, r0, r4
 8011a48:	e7dd      	b.n	8011a06 <__b2d+0x4a>
 8011a4a:	ea44 030c 	orr.w	r3, r4, ip
 8011a4e:	460a      	mov	r2, r1
 8011a50:	e7d9      	b.n	8011a06 <__b2d+0x4a>
 8011a52:	bf00      	nop
 8011a54:	3ff00000 	.word	0x3ff00000

08011a58 <__d2b>:
 8011a58:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011a5c:	460e      	mov	r6, r1
 8011a5e:	2101      	movs	r1, #1
 8011a60:	ec59 8b10 	vmov	r8, r9, d0
 8011a64:	4615      	mov	r5, r2
 8011a66:	f7ff fcb5 	bl	80113d4 <_Balloc>
 8011a6a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011a6e:	4607      	mov	r7, r0
 8011a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011a74:	bb34      	cbnz	r4, 8011ac4 <__d2b+0x6c>
 8011a76:	9301      	str	r3, [sp, #4]
 8011a78:	f1b8 0300 	subs.w	r3, r8, #0
 8011a7c:	d027      	beq.n	8011ace <__d2b+0x76>
 8011a7e:	a802      	add	r0, sp, #8
 8011a80:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011a84:	f7ff fd89 	bl	801159a <__lo0bits>
 8011a88:	9900      	ldr	r1, [sp, #0]
 8011a8a:	b1f0      	cbz	r0, 8011aca <__d2b+0x72>
 8011a8c:	9a01      	ldr	r2, [sp, #4]
 8011a8e:	f1c0 0320 	rsb	r3, r0, #32
 8011a92:	fa02 f303 	lsl.w	r3, r2, r3
 8011a96:	430b      	orrs	r3, r1
 8011a98:	40c2      	lsrs	r2, r0
 8011a9a:	617b      	str	r3, [r7, #20]
 8011a9c:	9201      	str	r2, [sp, #4]
 8011a9e:	9b01      	ldr	r3, [sp, #4]
 8011aa0:	61bb      	str	r3, [r7, #24]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	bf14      	ite	ne
 8011aa6:	2102      	movne	r1, #2
 8011aa8:	2101      	moveq	r1, #1
 8011aaa:	6139      	str	r1, [r7, #16]
 8011aac:	b1c4      	cbz	r4, 8011ae0 <__d2b+0x88>
 8011aae:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011ab2:	4404      	add	r4, r0
 8011ab4:	6034      	str	r4, [r6, #0]
 8011ab6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011aba:	6028      	str	r0, [r5, #0]
 8011abc:	4638      	mov	r0, r7
 8011abe:	b003      	add	sp, #12
 8011ac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ac4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011ac8:	e7d5      	b.n	8011a76 <__d2b+0x1e>
 8011aca:	6179      	str	r1, [r7, #20]
 8011acc:	e7e7      	b.n	8011a9e <__d2b+0x46>
 8011ace:	a801      	add	r0, sp, #4
 8011ad0:	f7ff fd63 	bl	801159a <__lo0bits>
 8011ad4:	9b01      	ldr	r3, [sp, #4]
 8011ad6:	617b      	str	r3, [r7, #20]
 8011ad8:	2101      	movs	r1, #1
 8011ada:	6139      	str	r1, [r7, #16]
 8011adc:	3020      	adds	r0, #32
 8011ade:	e7e5      	b.n	8011aac <__d2b+0x54>
 8011ae0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011ae4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011ae8:	6030      	str	r0, [r6, #0]
 8011aea:	6918      	ldr	r0, [r3, #16]
 8011aec:	f7ff fd36 	bl	801155c <__hi0bits>
 8011af0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8011af4:	e7e1      	b.n	8011aba <__d2b+0x62>

08011af6 <__ratio>:
 8011af6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011afa:	4688      	mov	r8, r1
 8011afc:	4669      	mov	r1, sp
 8011afe:	4681      	mov	r9, r0
 8011b00:	f7ff ff5c 	bl	80119bc <__b2d>
 8011b04:	a901      	add	r1, sp, #4
 8011b06:	4640      	mov	r0, r8
 8011b08:	ec57 6b10 	vmov	r6, r7, d0
 8011b0c:	f7ff ff56 	bl	80119bc <__b2d>
 8011b10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011b14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011b18:	eba3 0c02 	sub.w	ip, r3, r2
 8011b1c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011b20:	1a9b      	subs	r3, r3, r2
 8011b22:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011b26:	ec5b ab10 	vmov	sl, fp, d0
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	bfce      	itee	gt
 8011b2e:	463a      	movgt	r2, r7
 8011b30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011b34:	465a      	movle	r2, fp
 8011b36:	4659      	mov	r1, fp
 8011b38:	463d      	mov	r5, r7
 8011b3a:	bfd4      	ite	le
 8011b3c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8011b40:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8011b44:	4630      	mov	r0, r6
 8011b46:	ee10 2a10 	vmov	r2, s0
 8011b4a:	460b      	mov	r3, r1
 8011b4c:	4629      	mov	r1, r5
 8011b4e:	f7ee fe7d 	bl	800084c <__aeabi_ddiv>
 8011b52:	ec41 0b10 	vmov	d0, r0, r1
 8011b56:	b003      	add	sp, #12
 8011b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011b5c <__copybits>:
 8011b5c:	3901      	subs	r1, #1
 8011b5e:	b510      	push	{r4, lr}
 8011b60:	1149      	asrs	r1, r1, #5
 8011b62:	6914      	ldr	r4, [r2, #16]
 8011b64:	3101      	adds	r1, #1
 8011b66:	f102 0314 	add.w	r3, r2, #20
 8011b6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011b6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011b72:	42a3      	cmp	r3, r4
 8011b74:	4602      	mov	r2, r0
 8011b76:	d303      	bcc.n	8011b80 <__copybits+0x24>
 8011b78:	2300      	movs	r3, #0
 8011b7a:	428a      	cmp	r2, r1
 8011b7c:	d305      	bcc.n	8011b8a <__copybits+0x2e>
 8011b7e:	bd10      	pop	{r4, pc}
 8011b80:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b84:	f840 2b04 	str.w	r2, [r0], #4
 8011b88:	e7f3      	b.n	8011b72 <__copybits+0x16>
 8011b8a:	f842 3b04 	str.w	r3, [r2], #4
 8011b8e:	e7f4      	b.n	8011b7a <__copybits+0x1e>

08011b90 <__any_on>:
 8011b90:	f100 0214 	add.w	r2, r0, #20
 8011b94:	6900      	ldr	r0, [r0, #16]
 8011b96:	114b      	asrs	r3, r1, #5
 8011b98:	4298      	cmp	r0, r3
 8011b9a:	b510      	push	{r4, lr}
 8011b9c:	db11      	blt.n	8011bc2 <__any_on+0x32>
 8011b9e:	dd0a      	ble.n	8011bb6 <__any_on+0x26>
 8011ba0:	f011 011f 	ands.w	r1, r1, #31
 8011ba4:	d007      	beq.n	8011bb6 <__any_on+0x26>
 8011ba6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011baa:	fa24 f001 	lsr.w	r0, r4, r1
 8011bae:	fa00 f101 	lsl.w	r1, r0, r1
 8011bb2:	428c      	cmp	r4, r1
 8011bb4:	d10b      	bne.n	8011bce <__any_on+0x3e>
 8011bb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011bba:	4293      	cmp	r3, r2
 8011bbc:	d803      	bhi.n	8011bc6 <__any_on+0x36>
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	bd10      	pop	{r4, pc}
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	e7f7      	b.n	8011bb6 <__any_on+0x26>
 8011bc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011bca:	2900      	cmp	r1, #0
 8011bcc:	d0f5      	beq.n	8011bba <__any_on+0x2a>
 8011bce:	2001      	movs	r0, #1
 8011bd0:	e7f6      	b.n	8011bc0 <__any_on+0x30>

08011bd2 <_calloc_r>:
 8011bd2:	b538      	push	{r3, r4, r5, lr}
 8011bd4:	fb02 f401 	mul.w	r4, r2, r1
 8011bd8:	4621      	mov	r1, r4
 8011bda:	f7fc fcd9 	bl	800e590 <_malloc_r>
 8011bde:	4605      	mov	r5, r0
 8011be0:	b118      	cbz	r0, 8011bea <_calloc_r+0x18>
 8011be2:	4622      	mov	r2, r4
 8011be4:	2100      	movs	r1, #0
 8011be6:	f7fc fc7c 	bl	800e4e2 <memset>
 8011bea:	4628      	mov	r0, r5
 8011bec:	bd38      	pop	{r3, r4, r5, pc}

08011bee <__ssputs_r>:
 8011bee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bf2:	688e      	ldr	r6, [r1, #8]
 8011bf4:	429e      	cmp	r6, r3
 8011bf6:	4682      	mov	sl, r0
 8011bf8:	460c      	mov	r4, r1
 8011bfa:	4690      	mov	r8, r2
 8011bfc:	4699      	mov	r9, r3
 8011bfe:	d837      	bhi.n	8011c70 <__ssputs_r+0x82>
 8011c00:	898a      	ldrh	r2, [r1, #12]
 8011c02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011c06:	d031      	beq.n	8011c6c <__ssputs_r+0x7e>
 8011c08:	6825      	ldr	r5, [r4, #0]
 8011c0a:	6909      	ldr	r1, [r1, #16]
 8011c0c:	1a6f      	subs	r7, r5, r1
 8011c0e:	6965      	ldr	r5, [r4, #20]
 8011c10:	2302      	movs	r3, #2
 8011c12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011c16:	fb95 f5f3 	sdiv	r5, r5, r3
 8011c1a:	f109 0301 	add.w	r3, r9, #1
 8011c1e:	443b      	add	r3, r7
 8011c20:	429d      	cmp	r5, r3
 8011c22:	bf38      	it	cc
 8011c24:	461d      	movcc	r5, r3
 8011c26:	0553      	lsls	r3, r2, #21
 8011c28:	d530      	bpl.n	8011c8c <__ssputs_r+0x9e>
 8011c2a:	4629      	mov	r1, r5
 8011c2c:	f7fc fcb0 	bl	800e590 <_malloc_r>
 8011c30:	4606      	mov	r6, r0
 8011c32:	b950      	cbnz	r0, 8011c4a <__ssputs_r+0x5c>
 8011c34:	230c      	movs	r3, #12
 8011c36:	f8ca 3000 	str.w	r3, [sl]
 8011c3a:	89a3      	ldrh	r3, [r4, #12]
 8011c3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c40:	81a3      	strh	r3, [r4, #12]
 8011c42:	f04f 30ff 	mov.w	r0, #4294967295
 8011c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c4a:	463a      	mov	r2, r7
 8011c4c:	6921      	ldr	r1, [r4, #16]
 8011c4e:	f7fc fc3d 	bl	800e4cc <memcpy>
 8011c52:	89a3      	ldrh	r3, [r4, #12]
 8011c54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c5c:	81a3      	strh	r3, [r4, #12]
 8011c5e:	6126      	str	r6, [r4, #16]
 8011c60:	6165      	str	r5, [r4, #20]
 8011c62:	443e      	add	r6, r7
 8011c64:	1bed      	subs	r5, r5, r7
 8011c66:	6026      	str	r6, [r4, #0]
 8011c68:	60a5      	str	r5, [r4, #8]
 8011c6a:	464e      	mov	r6, r9
 8011c6c:	454e      	cmp	r6, r9
 8011c6e:	d900      	bls.n	8011c72 <__ssputs_r+0x84>
 8011c70:	464e      	mov	r6, r9
 8011c72:	4632      	mov	r2, r6
 8011c74:	4641      	mov	r1, r8
 8011c76:	6820      	ldr	r0, [r4, #0]
 8011c78:	f000 f919 	bl	8011eae <memmove>
 8011c7c:	68a3      	ldr	r3, [r4, #8]
 8011c7e:	1b9b      	subs	r3, r3, r6
 8011c80:	60a3      	str	r3, [r4, #8]
 8011c82:	6823      	ldr	r3, [r4, #0]
 8011c84:	441e      	add	r6, r3
 8011c86:	6026      	str	r6, [r4, #0]
 8011c88:	2000      	movs	r0, #0
 8011c8a:	e7dc      	b.n	8011c46 <__ssputs_r+0x58>
 8011c8c:	462a      	mov	r2, r5
 8011c8e:	f000 f927 	bl	8011ee0 <_realloc_r>
 8011c92:	4606      	mov	r6, r0
 8011c94:	2800      	cmp	r0, #0
 8011c96:	d1e2      	bne.n	8011c5e <__ssputs_r+0x70>
 8011c98:	6921      	ldr	r1, [r4, #16]
 8011c9a:	4650      	mov	r0, sl
 8011c9c:	f7fc fc2a 	bl	800e4f4 <_free_r>
 8011ca0:	e7c8      	b.n	8011c34 <__ssputs_r+0x46>
	...

08011ca4 <_svfiprintf_r>:
 8011ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca8:	461d      	mov	r5, r3
 8011caa:	898b      	ldrh	r3, [r1, #12]
 8011cac:	061f      	lsls	r7, r3, #24
 8011cae:	b09d      	sub	sp, #116	; 0x74
 8011cb0:	4680      	mov	r8, r0
 8011cb2:	460c      	mov	r4, r1
 8011cb4:	4616      	mov	r6, r2
 8011cb6:	d50f      	bpl.n	8011cd8 <_svfiprintf_r+0x34>
 8011cb8:	690b      	ldr	r3, [r1, #16]
 8011cba:	b96b      	cbnz	r3, 8011cd8 <_svfiprintf_r+0x34>
 8011cbc:	2140      	movs	r1, #64	; 0x40
 8011cbe:	f7fc fc67 	bl	800e590 <_malloc_r>
 8011cc2:	6020      	str	r0, [r4, #0]
 8011cc4:	6120      	str	r0, [r4, #16]
 8011cc6:	b928      	cbnz	r0, 8011cd4 <_svfiprintf_r+0x30>
 8011cc8:	230c      	movs	r3, #12
 8011cca:	f8c8 3000 	str.w	r3, [r8]
 8011cce:	f04f 30ff 	mov.w	r0, #4294967295
 8011cd2:	e0c8      	b.n	8011e66 <_svfiprintf_r+0x1c2>
 8011cd4:	2340      	movs	r3, #64	; 0x40
 8011cd6:	6163      	str	r3, [r4, #20]
 8011cd8:	2300      	movs	r3, #0
 8011cda:	9309      	str	r3, [sp, #36]	; 0x24
 8011cdc:	2320      	movs	r3, #32
 8011cde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011ce2:	2330      	movs	r3, #48	; 0x30
 8011ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011ce8:	9503      	str	r5, [sp, #12]
 8011cea:	f04f 0b01 	mov.w	fp, #1
 8011cee:	4637      	mov	r7, r6
 8011cf0:	463d      	mov	r5, r7
 8011cf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011cf6:	b10b      	cbz	r3, 8011cfc <_svfiprintf_r+0x58>
 8011cf8:	2b25      	cmp	r3, #37	; 0x25
 8011cfa:	d13e      	bne.n	8011d7a <_svfiprintf_r+0xd6>
 8011cfc:	ebb7 0a06 	subs.w	sl, r7, r6
 8011d00:	d00b      	beq.n	8011d1a <_svfiprintf_r+0x76>
 8011d02:	4653      	mov	r3, sl
 8011d04:	4632      	mov	r2, r6
 8011d06:	4621      	mov	r1, r4
 8011d08:	4640      	mov	r0, r8
 8011d0a:	f7ff ff70 	bl	8011bee <__ssputs_r>
 8011d0e:	3001      	adds	r0, #1
 8011d10:	f000 80a4 	beq.w	8011e5c <_svfiprintf_r+0x1b8>
 8011d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d16:	4453      	add	r3, sl
 8011d18:	9309      	str	r3, [sp, #36]	; 0x24
 8011d1a:	783b      	ldrb	r3, [r7, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	f000 809d 	beq.w	8011e5c <_svfiprintf_r+0x1b8>
 8011d22:	2300      	movs	r3, #0
 8011d24:	f04f 32ff 	mov.w	r2, #4294967295
 8011d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011d2c:	9304      	str	r3, [sp, #16]
 8011d2e:	9307      	str	r3, [sp, #28]
 8011d30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011d34:	931a      	str	r3, [sp, #104]	; 0x68
 8011d36:	462f      	mov	r7, r5
 8011d38:	2205      	movs	r2, #5
 8011d3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011d3e:	4850      	ldr	r0, [pc, #320]	; (8011e80 <_svfiprintf_r+0x1dc>)
 8011d40:	f7ee fa4e 	bl	80001e0 <memchr>
 8011d44:	9b04      	ldr	r3, [sp, #16]
 8011d46:	b9d0      	cbnz	r0, 8011d7e <_svfiprintf_r+0xda>
 8011d48:	06d9      	lsls	r1, r3, #27
 8011d4a:	bf44      	itt	mi
 8011d4c:	2220      	movmi	r2, #32
 8011d4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d52:	071a      	lsls	r2, r3, #28
 8011d54:	bf44      	itt	mi
 8011d56:	222b      	movmi	r2, #43	; 0x2b
 8011d58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011d5c:	782a      	ldrb	r2, [r5, #0]
 8011d5e:	2a2a      	cmp	r2, #42	; 0x2a
 8011d60:	d015      	beq.n	8011d8e <_svfiprintf_r+0xea>
 8011d62:	9a07      	ldr	r2, [sp, #28]
 8011d64:	462f      	mov	r7, r5
 8011d66:	2000      	movs	r0, #0
 8011d68:	250a      	movs	r5, #10
 8011d6a:	4639      	mov	r1, r7
 8011d6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011d70:	3b30      	subs	r3, #48	; 0x30
 8011d72:	2b09      	cmp	r3, #9
 8011d74:	d94d      	bls.n	8011e12 <_svfiprintf_r+0x16e>
 8011d76:	b1b8      	cbz	r0, 8011da8 <_svfiprintf_r+0x104>
 8011d78:	e00f      	b.n	8011d9a <_svfiprintf_r+0xf6>
 8011d7a:	462f      	mov	r7, r5
 8011d7c:	e7b8      	b.n	8011cf0 <_svfiprintf_r+0x4c>
 8011d7e:	4a40      	ldr	r2, [pc, #256]	; (8011e80 <_svfiprintf_r+0x1dc>)
 8011d80:	1a80      	subs	r0, r0, r2
 8011d82:	fa0b f000 	lsl.w	r0, fp, r0
 8011d86:	4318      	orrs	r0, r3
 8011d88:	9004      	str	r0, [sp, #16]
 8011d8a:	463d      	mov	r5, r7
 8011d8c:	e7d3      	b.n	8011d36 <_svfiprintf_r+0x92>
 8011d8e:	9a03      	ldr	r2, [sp, #12]
 8011d90:	1d11      	adds	r1, r2, #4
 8011d92:	6812      	ldr	r2, [r2, #0]
 8011d94:	9103      	str	r1, [sp, #12]
 8011d96:	2a00      	cmp	r2, #0
 8011d98:	db01      	blt.n	8011d9e <_svfiprintf_r+0xfa>
 8011d9a:	9207      	str	r2, [sp, #28]
 8011d9c:	e004      	b.n	8011da8 <_svfiprintf_r+0x104>
 8011d9e:	4252      	negs	r2, r2
 8011da0:	f043 0302 	orr.w	r3, r3, #2
 8011da4:	9207      	str	r2, [sp, #28]
 8011da6:	9304      	str	r3, [sp, #16]
 8011da8:	783b      	ldrb	r3, [r7, #0]
 8011daa:	2b2e      	cmp	r3, #46	; 0x2e
 8011dac:	d10c      	bne.n	8011dc8 <_svfiprintf_r+0x124>
 8011dae:	787b      	ldrb	r3, [r7, #1]
 8011db0:	2b2a      	cmp	r3, #42	; 0x2a
 8011db2:	d133      	bne.n	8011e1c <_svfiprintf_r+0x178>
 8011db4:	9b03      	ldr	r3, [sp, #12]
 8011db6:	1d1a      	adds	r2, r3, #4
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	9203      	str	r2, [sp, #12]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	bfb8      	it	lt
 8011dc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8011dc4:	3702      	adds	r7, #2
 8011dc6:	9305      	str	r3, [sp, #20]
 8011dc8:	4d2e      	ldr	r5, [pc, #184]	; (8011e84 <_svfiprintf_r+0x1e0>)
 8011dca:	7839      	ldrb	r1, [r7, #0]
 8011dcc:	2203      	movs	r2, #3
 8011dce:	4628      	mov	r0, r5
 8011dd0:	f7ee fa06 	bl	80001e0 <memchr>
 8011dd4:	b138      	cbz	r0, 8011de6 <_svfiprintf_r+0x142>
 8011dd6:	2340      	movs	r3, #64	; 0x40
 8011dd8:	1b40      	subs	r0, r0, r5
 8011dda:	fa03 f000 	lsl.w	r0, r3, r0
 8011dde:	9b04      	ldr	r3, [sp, #16]
 8011de0:	4303      	orrs	r3, r0
 8011de2:	3701      	adds	r7, #1
 8011de4:	9304      	str	r3, [sp, #16]
 8011de6:	7839      	ldrb	r1, [r7, #0]
 8011de8:	4827      	ldr	r0, [pc, #156]	; (8011e88 <_svfiprintf_r+0x1e4>)
 8011dea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011dee:	2206      	movs	r2, #6
 8011df0:	1c7e      	adds	r6, r7, #1
 8011df2:	f7ee f9f5 	bl	80001e0 <memchr>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	d038      	beq.n	8011e6c <_svfiprintf_r+0x1c8>
 8011dfa:	4b24      	ldr	r3, [pc, #144]	; (8011e8c <_svfiprintf_r+0x1e8>)
 8011dfc:	bb13      	cbnz	r3, 8011e44 <_svfiprintf_r+0x1a0>
 8011dfe:	9b03      	ldr	r3, [sp, #12]
 8011e00:	3307      	adds	r3, #7
 8011e02:	f023 0307 	bic.w	r3, r3, #7
 8011e06:	3308      	adds	r3, #8
 8011e08:	9303      	str	r3, [sp, #12]
 8011e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e0c:	444b      	add	r3, r9
 8011e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8011e10:	e76d      	b.n	8011cee <_svfiprintf_r+0x4a>
 8011e12:	fb05 3202 	mla	r2, r5, r2, r3
 8011e16:	2001      	movs	r0, #1
 8011e18:	460f      	mov	r7, r1
 8011e1a:	e7a6      	b.n	8011d6a <_svfiprintf_r+0xc6>
 8011e1c:	2300      	movs	r3, #0
 8011e1e:	3701      	adds	r7, #1
 8011e20:	9305      	str	r3, [sp, #20]
 8011e22:	4619      	mov	r1, r3
 8011e24:	250a      	movs	r5, #10
 8011e26:	4638      	mov	r0, r7
 8011e28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e2c:	3a30      	subs	r2, #48	; 0x30
 8011e2e:	2a09      	cmp	r2, #9
 8011e30:	d903      	bls.n	8011e3a <_svfiprintf_r+0x196>
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d0c8      	beq.n	8011dc8 <_svfiprintf_r+0x124>
 8011e36:	9105      	str	r1, [sp, #20]
 8011e38:	e7c6      	b.n	8011dc8 <_svfiprintf_r+0x124>
 8011e3a:	fb05 2101 	mla	r1, r5, r1, r2
 8011e3e:	2301      	movs	r3, #1
 8011e40:	4607      	mov	r7, r0
 8011e42:	e7f0      	b.n	8011e26 <_svfiprintf_r+0x182>
 8011e44:	ab03      	add	r3, sp, #12
 8011e46:	9300      	str	r3, [sp, #0]
 8011e48:	4622      	mov	r2, r4
 8011e4a:	4b11      	ldr	r3, [pc, #68]	; (8011e90 <_svfiprintf_r+0x1ec>)
 8011e4c:	a904      	add	r1, sp, #16
 8011e4e:	4640      	mov	r0, r8
 8011e50:	f7fc fc8c 	bl	800e76c <_printf_float>
 8011e54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011e58:	4681      	mov	r9, r0
 8011e5a:	d1d6      	bne.n	8011e0a <_svfiprintf_r+0x166>
 8011e5c:	89a3      	ldrh	r3, [r4, #12]
 8011e5e:	065b      	lsls	r3, r3, #25
 8011e60:	f53f af35 	bmi.w	8011cce <_svfiprintf_r+0x2a>
 8011e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e66:	b01d      	add	sp, #116	; 0x74
 8011e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e6c:	ab03      	add	r3, sp, #12
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	4622      	mov	r2, r4
 8011e72:	4b07      	ldr	r3, [pc, #28]	; (8011e90 <_svfiprintf_r+0x1ec>)
 8011e74:	a904      	add	r1, sp, #16
 8011e76:	4640      	mov	r0, r8
 8011e78:	f7fc ff2e 	bl	800ecd8 <_printf_i>
 8011e7c:	e7ea      	b.n	8011e54 <_svfiprintf_r+0x1b0>
 8011e7e:	bf00      	nop
 8011e80:	080138cc 	.word	0x080138cc
 8011e84:	080138d2 	.word	0x080138d2
 8011e88:	080138d6 	.word	0x080138d6
 8011e8c:	0800e76d 	.word	0x0800e76d
 8011e90:	08011bef 	.word	0x08011bef

08011e94 <__ascii_wctomb>:
 8011e94:	b149      	cbz	r1, 8011eaa <__ascii_wctomb+0x16>
 8011e96:	2aff      	cmp	r2, #255	; 0xff
 8011e98:	bf85      	ittet	hi
 8011e9a:	238a      	movhi	r3, #138	; 0x8a
 8011e9c:	6003      	strhi	r3, [r0, #0]
 8011e9e:	700a      	strbls	r2, [r1, #0]
 8011ea0:	f04f 30ff 	movhi.w	r0, #4294967295
 8011ea4:	bf98      	it	ls
 8011ea6:	2001      	movls	r0, #1
 8011ea8:	4770      	bx	lr
 8011eaa:	4608      	mov	r0, r1
 8011eac:	4770      	bx	lr

08011eae <memmove>:
 8011eae:	4288      	cmp	r0, r1
 8011eb0:	b510      	push	{r4, lr}
 8011eb2:	eb01 0302 	add.w	r3, r1, r2
 8011eb6:	d807      	bhi.n	8011ec8 <memmove+0x1a>
 8011eb8:	1e42      	subs	r2, r0, #1
 8011eba:	4299      	cmp	r1, r3
 8011ebc:	d00a      	beq.n	8011ed4 <memmove+0x26>
 8011ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ec2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011ec6:	e7f8      	b.n	8011eba <memmove+0xc>
 8011ec8:	4283      	cmp	r3, r0
 8011eca:	d9f5      	bls.n	8011eb8 <memmove+0xa>
 8011ecc:	1881      	adds	r1, r0, r2
 8011ece:	1ad2      	subs	r2, r2, r3
 8011ed0:	42d3      	cmn	r3, r2
 8011ed2:	d100      	bne.n	8011ed6 <memmove+0x28>
 8011ed4:	bd10      	pop	{r4, pc}
 8011ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011eda:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011ede:	e7f7      	b.n	8011ed0 <memmove+0x22>

08011ee0 <_realloc_r>:
 8011ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ee2:	4607      	mov	r7, r0
 8011ee4:	4614      	mov	r4, r2
 8011ee6:	460e      	mov	r6, r1
 8011ee8:	b921      	cbnz	r1, 8011ef4 <_realloc_r+0x14>
 8011eea:	4611      	mov	r1, r2
 8011eec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8011ef0:	f7fc bb4e 	b.w	800e590 <_malloc_r>
 8011ef4:	b922      	cbnz	r2, 8011f00 <_realloc_r+0x20>
 8011ef6:	f7fc fafd 	bl	800e4f4 <_free_r>
 8011efa:	4625      	mov	r5, r4
 8011efc:	4628      	mov	r0, r5
 8011efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f00:	f000 f814 	bl	8011f2c <_malloc_usable_size_r>
 8011f04:	42a0      	cmp	r0, r4
 8011f06:	d20f      	bcs.n	8011f28 <_realloc_r+0x48>
 8011f08:	4621      	mov	r1, r4
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	f7fc fb40 	bl	800e590 <_malloc_r>
 8011f10:	4605      	mov	r5, r0
 8011f12:	2800      	cmp	r0, #0
 8011f14:	d0f2      	beq.n	8011efc <_realloc_r+0x1c>
 8011f16:	4631      	mov	r1, r6
 8011f18:	4622      	mov	r2, r4
 8011f1a:	f7fc fad7 	bl	800e4cc <memcpy>
 8011f1e:	4631      	mov	r1, r6
 8011f20:	4638      	mov	r0, r7
 8011f22:	f7fc fae7 	bl	800e4f4 <_free_r>
 8011f26:	e7e9      	b.n	8011efc <_realloc_r+0x1c>
 8011f28:	4635      	mov	r5, r6
 8011f2a:	e7e7      	b.n	8011efc <_realloc_r+0x1c>

08011f2c <_malloc_usable_size_r>:
 8011f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011f30:	1f18      	subs	r0, r3, #4
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	bfbc      	itt	lt
 8011f36:	580b      	ldrlt	r3, [r1, r0]
 8011f38:	18c0      	addlt	r0, r0, r3
 8011f3a:	4770      	bx	lr

08011f3c <pow>:
 8011f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f40:	ed2d 8b04 	vpush	{d8-d9}
 8011f44:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8012218 <pow+0x2dc>
 8011f48:	b08d      	sub	sp, #52	; 0x34
 8011f4a:	ec57 6b10 	vmov	r6, r7, d0
 8011f4e:	ec55 4b11 	vmov	r4, r5, d1
 8011f52:	f000 f965 	bl	8012220 <__ieee754_pow>
 8011f56:	f999 3000 	ldrsb.w	r3, [r9]
 8011f5a:	9300      	str	r3, [sp, #0]
 8011f5c:	3301      	adds	r3, #1
 8011f5e:	eeb0 8a40 	vmov.f32	s16, s0
 8011f62:	eef0 8a60 	vmov.f32	s17, s1
 8011f66:	46c8      	mov	r8, r9
 8011f68:	d05f      	beq.n	801202a <pow+0xee>
 8011f6a:	4622      	mov	r2, r4
 8011f6c:	462b      	mov	r3, r5
 8011f6e:	4620      	mov	r0, r4
 8011f70:	4629      	mov	r1, r5
 8011f72:	f7ee fddb 	bl	8000b2c <__aeabi_dcmpun>
 8011f76:	4683      	mov	fp, r0
 8011f78:	2800      	cmp	r0, #0
 8011f7a:	d156      	bne.n	801202a <pow+0xee>
 8011f7c:	4632      	mov	r2, r6
 8011f7e:	463b      	mov	r3, r7
 8011f80:	4630      	mov	r0, r6
 8011f82:	4639      	mov	r1, r7
 8011f84:	f7ee fdd2 	bl	8000b2c <__aeabi_dcmpun>
 8011f88:	9001      	str	r0, [sp, #4]
 8011f8a:	b1e8      	cbz	r0, 8011fc8 <pow+0x8c>
 8011f8c:	2200      	movs	r2, #0
 8011f8e:	2300      	movs	r3, #0
 8011f90:	4620      	mov	r0, r4
 8011f92:	4629      	mov	r1, r5
 8011f94:	f7ee fd98 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d046      	beq.n	801202a <pow+0xee>
 8011f9c:	2301      	movs	r3, #1
 8011f9e:	9302      	str	r3, [sp, #8]
 8011fa0:	4b96      	ldr	r3, [pc, #600]	; (80121fc <pow+0x2c0>)
 8011fa2:	9303      	str	r3, [sp, #12]
 8011fa4:	4b96      	ldr	r3, [pc, #600]	; (8012200 <pow+0x2c4>)
 8011fa6:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011faa:	2200      	movs	r2, #0
 8011fac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011fb0:	9b00      	ldr	r3, [sp, #0]
 8011fb2:	2b02      	cmp	r3, #2
 8011fb4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011fb8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011fbc:	d033      	beq.n	8012026 <pow+0xea>
 8011fbe:	a802      	add	r0, sp, #8
 8011fc0:	f000 fefd 	bl	8012dbe <matherr>
 8011fc4:	bb48      	cbnz	r0, 801201a <pow+0xde>
 8011fc6:	e05d      	b.n	8012084 <pow+0x148>
 8011fc8:	f04f 0a00 	mov.w	sl, #0
 8011fcc:	f04f 0b00 	mov.w	fp, #0
 8011fd0:	4652      	mov	r2, sl
 8011fd2:	465b      	mov	r3, fp
 8011fd4:	4630      	mov	r0, r6
 8011fd6:	4639      	mov	r1, r7
 8011fd8:	f7ee fd76 	bl	8000ac8 <__aeabi_dcmpeq>
 8011fdc:	ec4b ab19 	vmov	d9, sl, fp
 8011fe0:	2800      	cmp	r0, #0
 8011fe2:	d054      	beq.n	801208e <pow+0x152>
 8011fe4:	4652      	mov	r2, sl
 8011fe6:	465b      	mov	r3, fp
 8011fe8:	4620      	mov	r0, r4
 8011fea:	4629      	mov	r1, r5
 8011fec:	f7ee fd6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8011ff0:	4680      	mov	r8, r0
 8011ff2:	b318      	cbz	r0, 801203c <pow+0x100>
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	9302      	str	r3, [sp, #8]
 8011ff8:	4b80      	ldr	r3, [pc, #512]	; (80121fc <pow+0x2c0>)
 8011ffa:	9303      	str	r3, [sp, #12]
 8011ffc:	9b01      	ldr	r3, [sp, #4]
 8011ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8012000:	9b00      	ldr	r3, [sp, #0]
 8012002:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012006:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801200a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d0d5      	beq.n	8011fbe <pow+0x82>
 8012012:	4b7b      	ldr	r3, [pc, #492]	; (8012200 <pow+0x2c4>)
 8012014:	2200      	movs	r2, #0
 8012016:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801201a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801201c:	b11b      	cbz	r3, 8012026 <pow+0xea>
 801201e:	f000 ffe5 	bl	8012fec <__errno>
 8012022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012024:	6003      	str	r3, [r0, #0]
 8012026:	ed9d 8b08 	vldr	d8, [sp, #32]
 801202a:	eeb0 0a48 	vmov.f32	s0, s16
 801202e:	eef0 0a68 	vmov.f32	s1, s17
 8012032:	b00d      	add	sp, #52	; 0x34
 8012034:	ecbd 8b04 	vpop	{d8-d9}
 8012038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801203c:	ec45 4b10 	vmov	d0, r4, r5
 8012040:	f000 feb5 	bl	8012dae <finite>
 8012044:	2800      	cmp	r0, #0
 8012046:	d0f0      	beq.n	801202a <pow+0xee>
 8012048:	4652      	mov	r2, sl
 801204a:	465b      	mov	r3, fp
 801204c:	4620      	mov	r0, r4
 801204e:	4629      	mov	r1, r5
 8012050:	f7ee fd44 	bl	8000adc <__aeabi_dcmplt>
 8012054:	2800      	cmp	r0, #0
 8012056:	d0e8      	beq.n	801202a <pow+0xee>
 8012058:	2301      	movs	r3, #1
 801205a:	9302      	str	r3, [sp, #8]
 801205c:	4b67      	ldr	r3, [pc, #412]	; (80121fc <pow+0x2c0>)
 801205e:	9303      	str	r3, [sp, #12]
 8012060:	f999 3000 	ldrsb.w	r3, [r9]
 8012064:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8012068:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801206c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012070:	b913      	cbnz	r3, 8012078 <pow+0x13c>
 8012072:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8012076:	e7a2      	b.n	8011fbe <pow+0x82>
 8012078:	4962      	ldr	r1, [pc, #392]	; (8012204 <pow+0x2c8>)
 801207a:	2000      	movs	r0, #0
 801207c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012080:	2b02      	cmp	r3, #2
 8012082:	d19c      	bne.n	8011fbe <pow+0x82>
 8012084:	f000 ffb2 	bl	8012fec <__errno>
 8012088:	2321      	movs	r3, #33	; 0x21
 801208a:	6003      	str	r3, [r0, #0]
 801208c:	e7c5      	b.n	801201a <pow+0xde>
 801208e:	eeb0 0a48 	vmov.f32	s0, s16
 8012092:	eef0 0a68 	vmov.f32	s1, s17
 8012096:	f000 fe8a 	bl	8012dae <finite>
 801209a:	9000      	str	r0, [sp, #0]
 801209c:	2800      	cmp	r0, #0
 801209e:	f040 8081 	bne.w	80121a4 <pow+0x268>
 80120a2:	ec47 6b10 	vmov	d0, r6, r7
 80120a6:	f000 fe82 	bl	8012dae <finite>
 80120aa:	2800      	cmp	r0, #0
 80120ac:	d07a      	beq.n	80121a4 <pow+0x268>
 80120ae:	ec45 4b10 	vmov	d0, r4, r5
 80120b2:	f000 fe7c 	bl	8012dae <finite>
 80120b6:	2800      	cmp	r0, #0
 80120b8:	d074      	beq.n	80121a4 <pow+0x268>
 80120ba:	ec53 2b18 	vmov	r2, r3, d8
 80120be:	ee18 0a10 	vmov	r0, s16
 80120c2:	4619      	mov	r1, r3
 80120c4:	f7ee fd32 	bl	8000b2c <__aeabi_dcmpun>
 80120c8:	f999 9000 	ldrsb.w	r9, [r9]
 80120cc:	4b4b      	ldr	r3, [pc, #300]	; (80121fc <pow+0x2c0>)
 80120ce:	b1b0      	cbz	r0, 80120fe <pow+0x1c2>
 80120d0:	2201      	movs	r2, #1
 80120d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80120d6:	9b00      	ldr	r3, [sp, #0]
 80120d8:	930a      	str	r3, [sp, #40]	; 0x28
 80120da:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80120de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80120e2:	f1b9 0f00 	cmp.w	r9, #0
 80120e6:	d0c4      	beq.n	8012072 <pow+0x136>
 80120e8:	4652      	mov	r2, sl
 80120ea:	465b      	mov	r3, fp
 80120ec:	4650      	mov	r0, sl
 80120ee:	4659      	mov	r1, fp
 80120f0:	f7ee fbac 	bl	800084c <__aeabi_ddiv>
 80120f4:	f1b9 0f02 	cmp.w	r9, #2
 80120f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80120fc:	e7c1      	b.n	8012082 <pow+0x146>
 80120fe:	2203      	movs	r2, #3
 8012100:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012104:	900a      	str	r0, [sp, #40]	; 0x28
 8012106:	4629      	mov	r1, r5
 8012108:	4620      	mov	r0, r4
 801210a:	2200      	movs	r2, #0
 801210c:	4b3e      	ldr	r3, [pc, #248]	; (8012208 <pow+0x2cc>)
 801210e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8012112:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8012116:	f7ee fa6f 	bl	80005f8 <__aeabi_dmul>
 801211a:	4604      	mov	r4, r0
 801211c:	460d      	mov	r5, r1
 801211e:	f1b9 0f00 	cmp.w	r9, #0
 8012122:	d124      	bne.n	801216e <pow+0x232>
 8012124:	4b39      	ldr	r3, [pc, #228]	; (801220c <pow+0x2d0>)
 8012126:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801212a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801212e:	4630      	mov	r0, r6
 8012130:	4652      	mov	r2, sl
 8012132:	465b      	mov	r3, fp
 8012134:	4639      	mov	r1, r7
 8012136:	f7ee fcd1 	bl	8000adc <__aeabi_dcmplt>
 801213a:	2800      	cmp	r0, #0
 801213c:	d056      	beq.n	80121ec <pow+0x2b0>
 801213e:	ec45 4b10 	vmov	d0, r4, r5
 8012142:	f000 fe49 	bl	8012dd8 <rint>
 8012146:	4622      	mov	r2, r4
 8012148:	462b      	mov	r3, r5
 801214a:	ec51 0b10 	vmov	r0, r1, d0
 801214e:	f7ee fcbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8012152:	b920      	cbnz	r0, 801215e <pow+0x222>
 8012154:	4b2e      	ldr	r3, [pc, #184]	; (8012210 <pow+0x2d4>)
 8012156:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801215a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801215e:	f998 3000 	ldrsb.w	r3, [r8]
 8012162:	2b02      	cmp	r3, #2
 8012164:	d142      	bne.n	80121ec <pow+0x2b0>
 8012166:	f000 ff41 	bl	8012fec <__errno>
 801216a:	2322      	movs	r3, #34	; 0x22
 801216c:	e78d      	b.n	801208a <pow+0x14e>
 801216e:	4b29      	ldr	r3, [pc, #164]	; (8012214 <pow+0x2d8>)
 8012170:	2200      	movs	r2, #0
 8012172:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012176:	4630      	mov	r0, r6
 8012178:	4652      	mov	r2, sl
 801217a:	465b      	mov	r3, fp
 801217c:	4639      	mov	r1, r7
 801217e:	f7ee fcad 	bl	8000adc <__aeabi_dcmplt>
 8012182:	2800      	cmp	r0, #0
 8012184:	d0eb      	beq.n	801215e <pow+0x222>
 8012186:	ec45 4b10 	vmov	d0, r4, r5
 801218a:	f000 fe25 	bl	8012dd8 <rint>
 801218e:	4622      	mov	r2, r4
 8012190:	462b      	mov	r3, r5
 8012192:	ec51 0b10 	vmov	r0, r1, d0
 8012196:	f7ee fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 801219a:	2800      	cmp	r0, #0
 801219c:	d1df      	bne.n	801215e <pow+0x222>
 801219e:	2200      	movs	r2, #0
 80121a0:	4b18      	ldr	r3, [pc, #96]	; (8012204 <pow+0x2c8>)
 80121a2:	e7da      	b.n	801215a <pow+0x21e>
 80121a4:	2200      	movs	r2, #0
 80121a6:	2300      	movs	r3, #0
 80121a8:	ec51 0b18 	vmov	r0, r1, d8
 80121ac:	f7ee fc8c 	bl	8000ac8 <__aeabi_dcmpeq>
 80121b0:	2800      	cmp	r0, #0
 80121b2:	f43f af3a 	beq.w	801202a <pow+0xee>
 80121b6:	ec47 6b10 	vmov	d0, r6, r7
 80121ba:	f000 fdf8 	bl	8012dae <finite>
 80121be:	2800      	cmp	r0, #0
 80121c0:	f43f af33 	beq.w	801202a <pow+0xee>
 80121c4:	ec45 4b10 	vmov	d0, r4, r5
 80121c8:	f000 fdf1 	bl	8012dae <finite>
 80121cc:	2800      	cmp	r0, #0
 80121ce:	f43f af2c 	beq.w	801202a <pow+0xee>
 80121d2:	2304      	movs	r3, #4
 80121d4:	9302      	str	r3, [sp, #8]
 80121d6:	4b09      	ldr	r3, [pc, #36]	; (80121fc <pow+0x2c0>)
 80121d8:	9303      	str	r3, [sp, #12]
 80121da:	2300      	movs	r3, #0
 80121dc:	930a      	str	r3, [sp, #40]	; 0x28
 80121de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80121e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80121e6:	ed8d 9b08 	vstr	d9, [sp, #32]
 80121ea:	e7b8      	b.n	801215e <pow+0x222>
 80121ec:	a802      	add	r0, sp, #8
 80121ee:	f000 fde6 	bl	8012dbe <matherr>
 80121f2:	2800      	cmp	r0, #0
 80121f4:	f47f af11 	bne.w	801201a <pow+0xde>
 80121f8:	e7b5      	b.n	8012166 <pow+0x22a>
 80121fa:	bf00      	nop
 80121fc:	080139de 	.word	0x080139de
 8012200:	3ff00000 	.word	0x3ff00000
 8012204:	fff00000 	.word	0xfff00000
 8012208:	3fe00000 	.word	0x3fe00000
 801220c:	47efffff 	.word	0x47efffff
 8012210:	c7efffff 	.word	0xc7efffff
 8012214:	7ff00000 	.word	0x7ff00000
 8012218:	2000034c 	.word	0x2000034c
 801221c:	00000000 	.word	0x00000000

08012220 <__ieee754_pow>:
 8012220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012224:	b091      	sub	sp, #68	; 0x44
 8012226:	ed8d 1b00 	vstr	d1, [sp]
 801222a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801222e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8012232:	ea58 0302 	orrs.w	r3, r8, r2
 8012236:	ec57 6b10 	vmov	r6, r7, d0
 801223a:	f000 84be 	beq.w	8012bba <__ieee754_pow+0x99a>
 801223e:	4b7a      	ldr	r3, [pc, #488]	; (8012428 <__ieee754_pow+0x208>)
 8012240:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8012244:	429c      	cmp	r4, r3
 8012246:	463d      	mov	r5, r7
 8012248:	ee10 aa10 	vmov	sl, s0
 801224c:	dc09      	bgt.n	8012262 <__ieee754_pow+0x42>
 801224e:	d103      	bne.n	8012258 <__ieee754_pow+0x38>
 8012250:	b93e      	cbnz	r6, 8012262 <__ieee754_pow+0x42>
 8012252:	45a0      	cmp	r8, r4
 8012254:	dc0d      	bgt.n	8012272 <__ieee754_pow+0x52>
 8012256:	e001      	b.n	801225c <__ieee754_pow+0x3c>
 8012258:	4598      	cmp	r8, r3
 801225a:	dc02      	bgt.n	8012262 <__ieee754_pow+0x42>
 801225c:	4598      	cmp	r8, r3
 801225e:	d10e      	bne.n	801227e <__ieee754_pow+0x5e>
 8012260:	b16a      	cbz	r2, 801227e <__ieee754_pow+0x5e>
 8012262:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8012266:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801226a:	ea54 030a 	orrs.w	r3, r4, sl
 801226e:	f000 84a4 	beq.w	8012bba <__ieee754_pow+0x99a>
 8012272:	486e      	ldr	r0, [pc, #440]	; (801242c <__ieee754_pow+0x20c>)
 8012274:	b011      	add	sp, #68	; 0x44
 8012276:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801227a:	f000 bda5 	b.w	8012dc8 <nan>
 801227e:	2d00      	cmp	r5, #0
 8012280:	da53      	bge.n	801232a <__ieee754_pow+0x10a>
 8012282:	4b6b      	ldr	r3, [pc, #428]	; (8012430 <__ieee754_pow+0x210>)
 8012284:	4598      	cmp	r8, r3
 8012286:	dc4d      	bgt.n	8012324 <__ieee754_pow+0x104>
 8012288:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801228c:	4598      	cmp	r8, r3
 801228e:	dd4c      	ble.n	801232a <__ieee754_pow+0x10a>
 8012290:	ea4f 5328 	mov.w	r3, r8, asr #20
 8012294:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012298:	2b14      	cmp	r3, #20
 801229a:	dd26      	ble.n	80122ea <__ieee754_pow+0xca>
 801229c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80122a0:	fa22 f103 	lsr.w	r1, r2, r3
 80122a4:	fa01 f303 	lsl.w	r3, r1, r3
 80122a8:	4293      	cmp	r3, r2
 80122aa:	d13e      	bne.n	801232a <__ieee754_pow+0x10a>
 80122ac:	f001 0101 	and.w	r1, r1, #1
 80122b0:	f1c1 0b02 	rsb	fp, r1, #2
 80122b4:	2a00      	cmp	r2, #0
 80122b6:	d15b      	bne.n	8012370 <__ieee754_pow+0x150>
 80122b8:	4b5b      	ldr	r3, [pc, #364]	; (8012428 <__ieee754_pow+0x208>)
 80122ba:	4598      	cmp	r8, r3
 80122bc:	d124      	bne.n	8012308 <__ieee754_pow+0xe8>
 80122be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80122c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80122c6:	ea53 030a 	orrs.w	r3, r3, sl
 80122ca:	f000 8476 	beq.w	8012bba <__ieee754_pow+0x99a>
 80122ce:	4b59      	ldr	r3, [pc, #356]	; (8012434 <__ieee754_pow+0x214>)
 80122d0:	429c      	cmp	r4, r3
 80122d2:	dd2d      	ble.n	8012330 <__ieee754_pow+0x110>
 80122d4:	f1b9 0f00 	cmp.w	r9, #0
 80122d8:	f280 8473 	bge.w	8012bc2 <__ieee754_pow+0x9a2>
 80122dc:	2000      	movs	r0, #0
 80122de:	2100      	movs	r1, #0
 80122e0:	ec41 0b10 	vmov	d0, r0, r1
 80122e4:	b011      	add	sp, #68	; 0x44
 80122e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ea:	2a00      	cmp	r2, #0
 80122ec:	d13e      	bne.n	801236c <__ieee754_pow+0x14c>
 80122ee:	f1c3 0314 	rsb	r3, r3, #20
 80122f2:	fa48 f103 	asr.w	r1, r8, r3
 80122f6:	fa01 f303 	lsl.w	r3, r1, r3
 80122fa:	4543      	cmp	r3, r8
 80122fc:	f040 8469 	bne.w	8012bd2 <__ieee754_pow+0x9b2>
 8012300:	f001 0101 	and.w	r1, r1, #1
 8012304:	f1c1 0b02 	rsb	fp, r1, #2
 8012308:	4b4b      	ldr	r3, [pc, #300]	; (8012438 <__ieee754_pow+0x218>)
 801230a:	4598      	cmp	r8, r3
 801230c:	d118      	bne.n	8012340 <__ieee754_pow+0x120>
 801230e:	f1b9 0f00 	cmp.w	r9, #0
 8012312:	f280 845a 	bge.w	8012bca <__ieee754_pow+0x9aa>
 8012316:	4948      	ldr	r1, [pc, #288]	; (8012438 <__ieee754_pow+0x218>)
 8012318:	4632      	mov	r2, r6
 801231a:	463b      	mov	r3, r7
 801231c:	2000      	movs	r0, #0
 801231e:	f7ee fa95 	bl	800084c <__aeabi_ddiv>
 8012322:	e7dd      	b.n	80122e0 <__ieee754_pow+0xc0>
 8012324:	f04f 0b02 	mov.w	fp, #2
 8012328:	e7c4      	b.n	80122b4 <__ieee754_pow+0x94>
 801232a:	f04f 0b00 	mov.w	fp, #0
 801232e:	e7c1      	b.n	80122b4 <__ieee754_pow+0x94>
 8012330:	f1b9 0f00 	cmp.w	r9, #0
 8012334:	dad2      	bge.n	80122dc <__ieee754_pow+0xbc>
 8012336:	e9dd 0300 	ldrd	r0, r3, [sp]
 801233a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801233e:	e7cf      	b.n	80122e0 <__ieee754_pow+0xc0>
 8012340:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012344:	d106      	bne.n	8012354 <__ieee754_pow+0x134>
 8012346:	4632      	mov	r2, r6
 8012348:	463b      	mov	r3, r7
 801234a:	4610      	mov	r0, r2
 801234c:	4619      	mov	r1, r3
 801234e:	f7ee f953 	bl	80005f8 <__aeabi_dmul>
 8012352:	e7c5      	b.n	80122e0 <__ieee754_pow+0xc0>
 8012354:	4b39      	ldr	r3, [pc, #228]	; (801243c <__ieee754_pow+0x21c>)
 8012356:	4599      	cmp	r9, r3
 8012358:	d10a      	bne.n	8012370 <__ieee754_pow+0x150>
 801235a:	2d00      	cmp	r5, #0
 801235c:	db08      	blt.n	8012370 <__ieee754_pow+0x150>
 801235e:	ec47 6b10 	vmov	d0, r6, r7
 8012362:	b011      	add	sp, #68	; 0x44
 8012364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012368:	f000 bc68 	b.w	8012c3c <__ieee754_sqrt>
 801236c:	f04f 0b00 	mov.w	fp, #0
 8012370:	ec47 6b10 	vmov	d0, r6, r7
 8012374:	f000 fd12 	bl	8012d9c <fabs>
 8012378:	ec51 0b10 	vmov	r0, r1, d0
 801237c:	f1ba 0f00 	cmp.w	sl, #0
 8012380:	d127      	bne.n	80123d2 <__ieee754_pow+0x1b2>
 8012382:	b124      	cbz	r4, 801238e <__ieee754_pow+0x16e>
 8012384:	4b2c      	ldr	r3, [pc, #176]	; (8012438 <__ieee754_pow+0x218>)
 8012386:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801238a:	429a      	cmp	r2, r3
 801238c:	d121      	bne.n	80123d2 <__ieee754_pow+0x1b2>
 801238e:	f1b9 0f00 	cmp.w	r9, #0
 8012392:	da05      	bge.n	80123a0 <__ieee754_pow+0x180>
 8012394:	4602      	mov	r2, r0
 8012396:	460b      	mov	r3, r1
 8012398:	2000      	movs	r0, #0
 801239a:	4927      	ldr	r1, [pc, #156]	; (8012438 <__ieee754_pow+0x218>)
 801239c:	f7ee fa56 	bl	800084c <__aeabi_ddiv>
 80123a0:	2d00      	cmp	r5, #0
 80123a2:	da9d      	bge.n	80122e0 <__ieee754_pow+0xc0>
 80123a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80123a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80123ac:	ea54 030b 	orrs.w	r3, r4, fp
 80123b0:	d108      	bne.n	80123c4 <__ieee754_pow+0x1a4>
 80123b2:	4602      	mov	r2, r0
 80123b4:	460b      	mov	r3, r1
 80123b6:	4610      	mov	r0, r2
 80123b8:	4619      	mov	r1, r3
 80123ba:	f7ed ff65 	bl	8000288 <__aeabi_dsub>
 80123be:	4602      	mov	r2, r0
 80123c0:	460b      	mov	r3, r1
 80123c2:	e7ac      	b.n	801231e <__ieee754_pow+0xfe>
 80123c4:	f1bb 0f01 	cmp.w	fp, #1
 80123c8:	d18a      	bne.n	80122e0 <__ieee754_pow+0xc0>
 80123ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123ce:	4619      	mov	r1, r3
 80123d0:	e786      	b.n	80122e0 <__ieee754_pow+0xc0>
 80123d2:	0fed      	lsrs	r5, r5, #31
 80123d4:	1e6b      	subs	r3, r5, #1
 80123d6:	930d      	str	r3, [sp, #52]	; 0x34
 80123d8:	ea5b 0303 	orrs.w	r3, fp, r3
 80123dc:	d102      	bne.n	80123e4 <__ieee754_pow+0x1c4>
 80123de:	4632      	mov	r2, r6
 80123e0:	463b      	mov	r3, r7
 80123e2:	e7e8      	b.n	80123b6 <__ieee754_pow+0x196>
 80123e4:	4b16      	ldr	r3, [pc, #88]	; (8012440 <__ieee754_pow+0x220>)
 80123e6:	4598      	cmp	r8, r3
 80123e8:	f340 80fe 	ble.w	80125e8 <__ieee754_pow+0x3c8>
 80123ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80123f0:	4598      	cmp	r8, r3
 80123f2:	dd0a      	ble.n	801240a <__ieee754_pow+0x1ea>
 80123f4:	4b0f      	ldr	r3, [pc, #60]	; (8012434 <__ieee754_pow+0x214>)
 80123f6:	429c      	cmp	r4, r3
 80123f8:	dc0d      	bgt.n	8012416 <__ieee754_pow+0x1f6>
 80123fa:	f1b9 0f00 	cmp.w	r9, #0
 80123fe:	f6bf af6d 	bge.w	80122dc <__ieee754_pow+0xbc>
 8012402:	a307      	add	r3, pc, #28	; (adr r3, 8012420 <__ieee754_pow+0x200>)
 8012404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012408:	e79f      	b.n	801234a <__ieee754_pow+0x12a>
 801240a:	4b0e      	ldr	r3, [pc, #56]	; (8012444 <__ieee754_pow+0x224>)
 801240c:	429c      	cmp	r4, r3
 801240e:	ddf4      	ble.n	80123fa <__ieee754_pow+0x1da>
 8012410:	4b09      	ldr	r3, [pc, #36]	; (8012438 <__ieee754_pow+0x218>)
 8012412:	429c      	cmp	r4, r3
 8012414:	dd18      	ble.n	8012448 <__ieee754_pow+0x228>
 8012416:	f1b9 0f00 	cmp.w	r9, #0
 801241a:	dcf2      	bgt.n	8012402 <__ieee754_pow+0x1e2>
 801241c:	e75e      	b.n	80122dc <__ieee754_pow+0xbc>
 801241e:	bf00      	nop
 8012420:	8800759c 	.word	0x8800759c
 8012424:	7e37e43c 	.word	0x7e37e43c
 8012428:	7ff00000 	.word	0x7ff00000
 801242c:	080138d1 	.word	0x080138d1
 8012430:	433fffff 	.word	0x433fffff
 8012434:	3fefffff 	.word	0x3fefffff
 8012438:	3ff00000 	.word	0x3ff00000
 801243c:	3fe00000 	.word	0x3fe00000
 8012440:	41e00000 	.word	0x41e00000
 8012444:	3feffffe 	.word	0x3feffffe
 8012448:	2200      	movs	r2, #0
 801244a:	4b63      	ldr	r3, [pc, #396]	; (80125d8 <__ieee754_pow+0x3b8>)
 801244c:	f7ed ff1c 	bl	8000288 <__aeabi_dsub>
 8012450:	a355      	add	r3, pc, #340	; (adr r3, 80125a8 <__ieee754_pow+0x388>)
 8012452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012456:	4604      	mov	r4, r0
 8012458:	460d      	mov	r5, r1
 801245a:	f7ee f8cd 	bl	80005f8 <__aeabi_dmul>
 801245e:	a354      	add	r3, pc, #336	; (adr r3, 80125b0 <__ieee754_pow+0x390>)
 8012460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012464:	4606      	mov	r6, r0
 8012466:	460f      	mov	r7, r1
 8012468:	4620      	mov	r0, r4
 801246a:	4629      	mov	r1, r5
 801246c:	f7ee f8c4 	bl	80005f8 <__aeabi_dmul>
 8012470:	2200      	movs	r2, #0
 8012472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012476:	4b59      	ldr	r3, [pc, #356]	; (80125dc <__ieee754_pow+0x3bc>)
 8012478:	4620      	mov	r0, r4
 801247a:	4629      	mov	r1, r5
 801247c:	f7ee f8bc 	bl	80005f8 <__aeabi_dmul>
 8012480:	4602      	mov	r2, r0
 8012482:	460b      	mov	r3, r1
 8012484:	a14c      	add	r1, pc, #304	; (adr r1, 80125b8 <__ieee754_pow+0x398>)
 8012486:	e9d1 0100 	ldrd	r0, r1, [r1]
 801248a:	f7ed fefd 	bl	8000288 <__aeabi_dsub>
 801248e:	4622      	mov	r2, r4
 8012490:	462b      	mov	r3, r5
 8012492:	f7ee f8b1 	bl	80005f8 <__aeabi_dmul>
 8012496:	4602      	mov	r2, r0
 8012498:	460b      	mov	r3, r1
 801249a:	2000      	movs	r0, #0
 801249c:	4950      	ldr	r1, [pc, #320]	; (80125e0 <__ieee754_pow+0x3c0>)
 801249e:	f7ed fef3 	bl	8000288 <__aeabi_dsub>
 80124a2:	4622      	mov	r2, r4
 80124a4:	462b      	mov	r3, r5
 80124a6:	4680      	mov	r8, r0
 80124a8:	4689      	mov	r9, r1
 80124aa:	4620      	mov	r0, r4
 80124ac:	4629      	mov	r1, r5
 80124ae:	f7ee f8a3 	bl	80005f8 <__aeabi_dmul>
 80124b2:	4602      	mov	r2, r0
 80124b4:	460b      	mov	r3, r1
 80124b6:	4640      	mov	r0, r8
 80124b8:	4649      	mov	r1, r9
 80124ba:	f7ee f89d 	bl	80005f8 <__aeabi_dmul>
 80124be:	a340      	add	r3, pc, #256	; (adr r3, 80125c0 <__ieee754_pow+0x3a0>)
 80124c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124c4:	f7ee f898 	bl	80005f8 <__aeabi_dmul>
 80124c8:	4602      	mov	r2, r0
 80124ca:	460b      	mov	r3, r1
 80124cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124d0:	f7ed feda 	bl	8000288 <__aeabi_dsub>
 80124d4:	4602      	mov	r2, r0
 80124d6:	460b      	mov	r3, r1
 80124d8:	4604      	mov	r4, r0
 80124da:	460d      	mov	r5, r1
 80124dc:	4630      	mov	r0, r6
 80124de:	4639      	mov	r1, r7
 80124e0:	f7ed fed4 	bl	800028c <__adddf3>
 80124e4:	2000      	movs	r0, #0
 80124e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124ea:	4632      	mov	r2, r6
 80124ec:	463b      	mov	r3, r7
 80124ee:	f7ed fecb 	bl	8000288 <__aeabi_dsub>
 80124f2:	4602      	mov	r2, r0
 80124f4:	460b      	mov	r3, r1
 80124f6:	4620      	mov	r0, r4
 80124f8:	4629      	mov	r1, r5
 80124fa:	f7ed fec5 	bl	8000288 <__aeabi_dsub>
 80124fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012500:	f10b 33ff 	add.w	r3, fp, #4294967295
 8012504:	4313      	orrs	r3, r2
 8012506:	4606      	mov	r6, r0
 8012508:	460f      	mov	r7, r1
 801250a:	f040 81eb 	bne.w	80128e4 <__ieee754_pow+0x6c4>
 801250e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80125c8 <__ieee754_pow+0x3a8>
 8012512:	e9dd 4500 	ldrd	r4, r5, [sp]
 8012516:	2400      	movs	r4, #0
 8012518:	4622      	mov	r2, r4
 801251a:	462b      	mov	r3, r5
 801251c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012520:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012524:	f7ed feb0 	bl	8000288 <__aeabi_dsub>
 8012528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801252c:	f7ee f864 	bl	80005f8 <__aeabi_dmul>
 8012530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012534:	4680      	mov	r8, r0
 8012536:	4689      	mov	r9, r1
 8012538:	4630      	mov	r0, r6
 801253a:	4639      	mov	r1, r7
 801253c:	f7ee f85c 	bl	80005f8 <__aeabi_dmul>
 8012540:	4602      	mov	r2, r0
 8012542:	460b      	mov	r3, r1
 8012544:	4640      	mov	r0, r8
 8012546:	4649      	mov	r1, r9
 8012548:	f7ed fea0 	bl	800028c <__adddf3>
 801254c:	4622      	mov	r2, r4
 801254e:	462b      	mov	r3, r5
 8012550:	4680      	mov	r8, r0
 8012552:	4689      	mov	r9, r1
 8012554:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012558:	f7ee f84e 	bl	80005f8 <__aeabi_dmul>
 801255c:	460b      	mov	r3, r1
 801255e:	4604      	mov	r4, r0
 8012560:	460d      	mov	r5, r1
 8012562:	4602      	mov	r2, r0
 8012564:	4649      	mov	r1, r9
 8012566:	4640      	mov	r0, r8
 8012568:	e9cd 4500 	strd	r4, r5, [sp]
 801256c:	f7ed fe8e 	bl	800028c <__adddf3>
 8012570:	4b1c      	ldr	r3, [pc, #112]	; (80125e4 <__ieee754_pow+0x3c4>)
 8012572:	4299      	cmp	r1, r3
 8012574:	4606      	mov	r6, r0
 8012576:	460f      	mov	r7, r1
 8012578:	468b      	mov	fp, r1
 801257a:	f340 82f7 	ble.w	8012b6c <__ieee754_pow+0x94c>
 801257e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8012582:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8012586:	4303      	orrs	r3, r0
 8012588:	f000 81ea 	beq.w	8012960 <__ieee754_pow+0x740>
 801258c:	a310      	add	r3, pc, #64	; (adr r3, 80125d0 <__ieee754_pow+0x3b0>)
 801258e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012596:	f7ee f82f 	bl	80005f8 <__aeabi_dmul>
 801259a:	a30d      	add	r3, pc, #52	; (adr r3, 80125d0 <__ieee754_pow+0x3b0>)
 801259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a0:	e6d5      	b.n	801234e <__ieee754_pow+0x12e>
 80125a2:	bf00      	nop
 80125a4:	f3af 8000 	nop.w
 80125a8:	60000000 	.word	0x60000000
 80125ac:	3ff71547 	.word	0x3ff71547
 80125b0:	f85ddf44 	.word	0xf85ddf44
 80125b4:	3e54ae0b 	.word	0x3e54ae0b
 80125b8:	55555555 	.word	0x55555555
 80125bc:	3fd55555 	.word	0x3fd55555
 80125c0:	652b82fe 	.word	0x652b82fe
 80125c4:	3ff71547 	.word	0x3ff71547
 80125c8:	00000000 	.word	0x00000000
 80125cc:	bff00000 	.word	0xbff00000
 80125d0:	8800759c 	.word	0x8800759c
 80125d4:	7e37e43c 	.word	0x7e37e43c
 80125d8:	3ff00000 	.word	0x3ff00000
 80125dc:	3fd00000 	.word	0x3fd00000
 80125e0:	3fe00000 	.word	0x3fe00000
 80125e4:	408fffff 	.word	0x408fffff
 80125e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80125ec:	f04f 0200 	mov.w	r2, #0
 80125f0:	da05      	bge.n	80125fe <__ieee754_pow+0x3de>
 80125f2:	4bd3      	ldr	r3, [pc, #844]	; (8012940 <__ieee754_pow+0x720>)
 80125f4:	f7ee f800 	bl	80005f8 <__aeabi_dmul>
 80125f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80125fc:	460c      	mov	r4, r1
 80125fe:	1523      	asrs	r3, r4, #20
 8012600:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012604:	4413      	add	r3, r2
 8012606:	9309      	str	r3, [sp, #36]	; 0x24
 8012608:	4bce      	ldr	r3, [pc, #824]	; (8012944 <__ieee754_pow+0x724>)
 801260a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801260e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012612:	429c      	cmp	r4, r3
 8012614:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012618:	dd08      	ble.n	801262c <__ieee754_pow+0x40c>
 801261a:	4bcb      	ldr	r3, [pc, #812]	; (8012948 <__ieee754_pow+0x728>)
 801261c:	429c      	cmp	r4, r3
 801261e:	f340 815e 	ble.w	80128de <__ieee754_pow+0x6be>
 8012622:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012624:	3301      	adds	r3, #1
 8012626:	9309      	str	r3, [sp, #36]	; 0x24
 8012628:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801262c:	f04f 0a00 	mov.w	sl, #0
 8012630:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8012634:	930c      	str	r3, [sp, #48]	; 0x30
 8012636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012638:	4bc4      	ldr	r3, [pc, #784]	; (801294c <__ieee754_pow+0x72c>)
 801263a:	4413      	add	r3, r2
 801263c:	ed93 7b00 	vldr	d7, [r3]
 8012640:	4629      	mov	r1, r5
 8012642:	ec53 2b17 	vmov	r2, r3, d7
 8012646:	ed8d 7b06 	vstr	d7, [sp, #24]
 801264a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801264e:	f7ed fe1b 	bl	8000288 <__aeabi_dsub>
 8012652:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8012656:	4606      	mov	r6, r0
 8012658:	460f      	mov	r7, r1
 801265a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801265e:	f7ed fe15 	bl	800028c <__adddf3>
 8012662:	4602      	mov	r2, r0
 8012664:	460b      	mov	r3, r1
 8012666:	2000      	movs	r0, #0
 8012668:	49b9      	ldr	r1, [pc, #740]	; (8012950 <__ieee754_pow+0x730>)
 801266a:	f7ee f8ef 	bl	800084c <__aeabi_ddiv>
 801266e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012672:	4602      	mov	r2, r0
 8012674:	460b      	mov	r3, r1
 8012676:	4630      	mov	r0, r6
 8012678:	4639      	mov	r1, r7
 801267a:	f7ed ffbd 	bl	80005f8 <__aeabi_dmul>
 801267e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012682:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8012686:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801268a:	2300      	movs	r3, #0
 801268c:	9302      	str	r3, [sp, #8]
 801268e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012692:	106d      	asrs	r5, r5, #1
 8012694:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8012698:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801269c:	2200      	movs	r2, #0
 801269e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80126a2:	4640      	mov	r0, r8
 80126a4:	4649      	mov	r1, r9
 80126a6:	4614      	mov	r4, r2
 80126a8:	461d      	mov	r5, r3
 80126aa:	f7ed ffa5 	bl	80005f8 <__aeabi_dmul>
 80126ae:	4602      	mov	r2, r0
 80126b0:	460b      	mov	r3, r1
 80126b2:	4630      	mov	r0, r6
 80126b4:	4639      	mov	r1, r7
 80126b6:	f7ed fde7 	bl	8000288 <__aeabi_dsub>
 80126ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80126be:	4606      	mov	r6, r0
 80126c0:	460f      	mov	r7, r1
 80126c2:	4620      	mov	r0, r4
 80126c4:	4629      	mov	r1, r5
 80126c6:	f7ed fddf 	bl	8000288 <__aeabi_dsub>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80126d2:	f7ed fdd9 	bl	8000288 <__aeabi_dsub>
 80126d6:	4642      	mov	r2, r8
 80126d8:	464b      	mov	r3, r9
 80126da:	f7ed ff8d 	bl	80005f8 <__aeabi_dmul>
 80126de:	4602      	mov	r2, r0
 80126e0:	460b      	mov	r3, r1
 80126e2:	4630      	mov	r0, r6
 80126e4:	4639      	mov	r1, r7
 80126e6:	f7ed fdcf 	bl	8000288 <__aeabi_dsub>
 80126ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80126ee:	f7ed ff83 	bl	80005f8 <__aeabi_dmul>
 80126f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80126f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80126fa:	4610      	mov	r0, r2
 80126fc:	4619      	mov	r1, r3
 80126fe:	f7ed ff7b 	bl	80005f8 <__aeabi_dmul>
 8012702:	a37b      	add	r3, pc, #492	; (adr r3, 80128f0 <__ieee754_pow+0x6d0>)
 8012704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012708:	4604      	mov	r4, r0
 801270a:	460d      	mov	r5, r1
 801270c:	f7ed ff74 	bl	80005f8 <__aeabi_dmul>
 8012710:	a379      	add	r3, pc, #484	; (adr r3, 80128f8 <__ieee754_pow+0x6d8>)
 8012712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012716:	f7ed fdb9 	bl	800028c <__adddf3>
 801271a:	4622      	mov	r2, r4
 801271c:	462b      	mov	r3, r5
 801271e:	f7ed ff6b 	bl	80005f8 <__aeabi_dmul>
 8012722:	a377      	add	r3, pc, #476	; (adr r3, 8012900 <__ieee754_pow+0x6e0>)
 8012724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012728:	f7ed fdb0 	bl	800028c <__adddf3>
 801272c:	4622      	mov	r2, r4
 801272e:	462b      	mov	r3, r5
 8012730:	f7ed ff62 	bl	80005f8 <__aeabi_dmul>
 8012734:	a374      	add	r3, pc, #464	; (adr r3, 8012908 <__ieee754_pow+0x6e8>)
 8012736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801273a:	f7ed fda7 	bl	800028c <__adddf3>
 801273e:	4622      	mov	r2, r4
 8012740:	462b      	mov	r3, r5
 8012742:	f7ed ff59 	bl	80005f8 <__aeabi_dmul>
 8012746:	a372      	add	r3, pc, #456	; (adr r3, 8012910 <__ieee754_pow+0x6f0>)
 8012748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801274c:	f7ed fd9e 	bl	800028c <__adddf3>
 8012750:	4622      	mov	r2, r4
 8012752:	462b      	mov	r3, r5
 8012754:	f7ed ff50 	bl	80005f8 <__aeabi_dmul>
 8012758:	a36f      	add	r3, pc, #444	; (adr r3, 8012918 <__ieee754_pow+0x6f8>)
 801275a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801275e:	f7ed fd95 	bl	800028c <__adddf3>
 8012762:	4622      	mov	r2, r4
 8012764:	4606      	mov	r6, r0
 8012766:	460f      	mov	r7, r1
 8012768:	462b      	mov	r3, r5
 801276a:	4620      	mov	r0, r4
 801276c:	4629      	mov	r1, r5
 801276e:	f7ed ff43 	bl	80005f8 <__aeabi_dmul>
 8012772:	4602      	mov	r2, r0
 8012774:	460b      	mov	r3, r1
 8012776:	4630      	mov	r0, r6
 8012778:	4639      	mov	r1, r7
 801277a:	f7ed ff3d 	bl	80005f8 <__aeabi_dmul>
 801277e:	4642      	mov	r2, r8
 8012780:	4604      	mov	r4, r0
 8012782:	460d      	mov	r5, r1
 8012784:	464b      	mov	r3, r9
 8012786:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801278a:	f7ed fd7f 	bl	800028c <__adddf3>
 801278e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012792:	f7ed ff31 	bl	80005f8 <__aeabi_dmul>
 8012796:	4622      	mov	r2, r4
 8012798:	462b      	mov	r3, r5
 801279a:	f7ed fd77 	bl	800028c <__adddf3>
 801279e:	4642      	mov	r2, r8
 80127a0:	4606      	mov	r6, r0
 80127a2:	460f      	mov	r7, r1
 80127a4:	464b      	mov	r3, r9
 80127a6:	4640      	mov	r0, r8
 80127a8:	4649      	mov	r1, r9
 80127aa:	f7ed ff25 	bl	80005f8 <__aeabi_dmul>
 80127ae:	2200      	movs	r2, #0
 80127b0:	4b68      	ldr	r3, [pc, #416]	; (8012954 <__ieee754_pow+0x734>)
 80127b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80127b6:	f7ed fd69 	bl	800028c <__adddf3>
 80127ba:	4632      	mov	r2, r6
 80127bc:	463b      	mov	r3, r7
 80127be:	f7ed fd65 	bl	800028c <__adddf3>
 80127c2:	9802      	ldr	r0, [sp, #8]
 80127c4:	460d      	mov	r5, r1
 80127c6:	4604      	mov	r4, r0
 80127c8:	4602      	mov	r2, r0
 80127ca:	460b      	mov	r3, r1
 80127cc:	4640      	mov	r0, r8
 80127ce:	4649      	mov	r1, r9
 80127d0:	f7ed ff12 	bl	80005f8 <__aeabi_dmul>
 80127d4:	2200      	movs	r2, #0
 80127d6:	4680      	mov	r8, r0
 80127d8:	4689      	mov	r9, r1
 80127da:	4b5e      	ldr	r3, [pc, #376]	; (8012954 <__ieee754_pow+0x734>)
 80127dc:	4620      	mov	r0, r4
 80127de:	4629      	mov	r1, r5
 80127e0:	f7ed fd52 	bl	8000288 <__aeabi_dsub>
 80127e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80127e8:	f7ed fd4e 	bl	8000288 <__aeabi_dsub>
 80127ec:	4602      	mov	r2, r0
 80127ee:	460b      	mov	r3, r1
 80127f0:	4630      	mov	r0, r6
 80127f2:	4639      	mov	r1, r7
 80127f4:	f7ed fd48 	bl	8000288 <__aeabi_dsub>
 80127f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127fc:	f7ed fefc 	bl	80005f8 <__aeabi_dmul>
 8012800:	4622      	mov	r2, r4
 8012802:	4606      	mov	r6, r0
 8012804:	460f      	mov	r7, r1
 8012806:	462b      	mov	r3, r5
 8012808:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801280c:	f7ed fef4 	bl	80005f8 <__aeabi_dmul>
 8012810:	4602      	mov	r2, r0
 8012812:	460b      	mov	r3, r1
 8012814:	4630      	mov	r0, r6
 8012816:	4639      	mov	r1, r7
 8012818:	f7ed fd38 	bl	800028c <__adddf3>
 801281c:	4606      	mov	r6, r0
 801281e:	460f      	mov	r7, r1
 8012820:	4602      	mov	r2, r0
 8012822:	460b      	mov	r3, r1
 8012824:	4640      	mov	r0, r8
 8012826:	4649      	mov	r1, r9
 8012828:	f7ed fd30 	bl	800028c <__adddf3>
 801282c:	9802      	ldr	r0, [sp, #8]
 801282e:	a33c      	add	r3, pc, #240	; (adr r3, 8012920 <__ieee754_pow+0x700>)
 8012830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012834:	4604      	mov	r4, r0
 8012836:	460d      	mov	r5, r1
 8012838:	f7ed fede 	bl	80005f8 <__aeabi_dmul>
 801283c:	4642      	mov	r2, r8
 801283e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8012842:	464b      	mov	r3, r9
 8012844:	4620      	mov	r0, r4
 8012846:	4629      	mov	r1, r5
 8012848:	f7ed fd1e 	bl	8000288 <__aeabi_dsub>
 801284c:	4602      	mov	r2, r0
 801284e:	460b      	mov	r3, r1
 8012850:	4630      	mov	r0, r6
 8012852:	4639      	mov	r1, r7
 8012854:	f7ed fd18 	bl	8000288 <__aeabi_dsub>
 8012858:	a333      	add	r3, pc, #204	; (adr r3, 8012928 <__ieee754_pow+0x708>)
 801285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285e:	f7ed fecb 	bl	80005f8 <__aeabi_dmul>
 8012862:	a333      	add	r3, pc, #204	; (adr r3, 8012930 <__ieee754_pow+0x710>)
 8012864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012868:	4606      	mov	r6, r0
 801286a:	460f      	mov	r7, r1
 801286c:	4620      	mov	r0, r4
 801286e:	4629      	mov	r1, r5
 8012870:	f7ed fec2 	bl	80005f8 <__aeabi_dmul>
 8012874:	4602      	mov	r2, r0
 8012876:	460b      	mov	r3, r1
 8012878:	4630      	mov	r0, r6
 801287a:	4639      	mov	r1, r7
 801287c:	f7ed fd06 	bl	800028c <__adddf3>
 8012880:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012882:	4b35      	ldr	r3, [pc, #212]	; (8012958 <__ieee754_pow+0x738>)
 8012884:	4413      	add	r3, r2
 8012886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801288a:	f7ed fcff 	bl	800028c <__adddf3>
 801288e:	4604      	mov	r4, r0
 8012890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012892:	460d      	mov	r5, r1
 8012894:	f7ed fe46 	bl	8000524 <__aeabi_i2d>
 8012898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801289a:	4b30      	ldr	r3, [pc, #192]	; (801295c <__ieee754_pow+0x73c>)
 801289c:	4413      	add	r3, r2
 801289e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80128a2:	4606      	mov	r6, r0
 80128a4:	460f      	mov	r7, r1
 80128a6:	4622      	mov	r2, r4
 80128a8:	462b      	mov	r3, r5
 80128aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128ae:	f7ed fced 	bl	800028c <__adddf3>
 80128b2:	4642      	mov	r2, r8
 80128b4:	464b      	mov	r3, r9
 80128b6:	f7ed fce9 	bl	800028c <__adddf3>
 80128ba:	4632      	mov	r2, r6
 80128bc:	463b      	mov	r3, r7
 80128be:	f7ed fce5 	bl	800028c <__adddf3>
 80128c2:	9802      	ldr	r0, [sp, #8]
 80128c4:	4632      	mov	r2, r6
 80128c6:	463b      	mov	r3, r7
 80128c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128cc:	f7ed fcdc 	bl	8000288 <__aeabi_dsub>
 80128d0:	4642      	mov	r2, r8
 80128d2:	464b      	mov	r3, r9
 80128d4:	f7ed fcd8 	bl	8000288 <__aeabi_dsub>
 80128d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80128dc:	e607      	b.n	80124ee <__ieee754_pow+0x2ce>
 80128de:	f04f 0a01 	mov.w	sl, #1
 80128e2:	e6a5      	b.n	8012630 <__ieee754_pow+0x410>
 80128e4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8012938 <__ieee754_pow+0x718>
 80128e8:	e613      	b.n	8012512 <__ieee754_pow+0x2f2>
 80128ea:	bf00      	nop
 80128ec:	f3af 8000 	nop.w
 80128f0:	4a454eef 	.word	0x4a454eef
 80128f4:	3fca7e28 	.word	0x3fca7e28
 80128f8:	93c9db65 	.word	0x93c9db65
 80128fc:	3fcd864a 	.word	0x3fcd864a
 8012900:	a91d4101 	.word	0xa91d4101
 8012904:	3fd17460 	.word	0x3fd17460
 8012908:	518f264d 	.word	0x518f264d
 801290c:	3fd55555 	.word	0x3fd55555
 8012910:	db6fabff 	.word	0xdb6fabff
 8012914:	3fdb6db6 	.word	0x3fdb6db6
 8012918:	33333303 	.word	0x33333303
 801291c:	3fe33333 	.word	0x3fe33333
 8012920:	e0000000 	.word	0xe0000000
 8012924:	3feec709 	.word	0x3feec709
 8012928:	dc3a03fd 	.word	0xdc3a03fd
 801292c:	3feec709 	.word	0x3feec709
 8012930:	145b01f5 	.word	0x145b01f5
 8012934:	be3e2fe0 	.word	0xbe3e2fe0
 8012938:	00000000 	.word	0x00000000
 801293c:	3ff00000 	.word	0x3ff00000
 8012940:	43400000 	.word	0x43400000
 8012944:	0003988e 	.word	0x0003988e
 8012948:	000bb679 	.word	0x000bb679
 801294c:	080139e8 	.word	0x080139e8
 8012950:	3ff00000 	.word	0x3ff00000
 8012954:	40080000 	.word	0x40080000
 8012958:	08013a08 	.word	0x08013a08
 801295c:	080139f8 	.word	0x080139f8
 8012960:	a3b4      	add	r3, pc, #720	; (adr r3, 8012c34 <__ieee754_pow+0xa14>)
 8012962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012966:	4640      	mov	r0, r8
 8012968:	4649      	mov	r1, r9
 801296a:	f7ed fc8f 	bl	800028c <__adddf3>
 801296e:	4622      	mov	r2, r4
 8012970:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012974:	462b      	mov	r3, r5
 8012976:	4630      	mov	r0, r6
 8012978:	4639      	mov	r1, r7
 801297a:	f7ed fc85 	bl	8000288 <__aeabi_dsub>
 801297e:	4602      	mov	r2, r0
 8012980:	460b      	mov	r3, r1
 8012982:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012986:	f7ee f8c7 	bl	8000b18 <__aeabi_dcmpgt>
 801298a:	2800      	cmp	r0, #0
 801298c:	f47f adfe 	bne.w	801258c <__ieee754_pow+0x36c>
 8012990:	4aa3      	ldr	r2, [pc, #652]	; (8012c20 <__ieee754_pow+0xa00>)
 8012992:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012996:	4293      	cmp	r3, r2
 8012998:	f340 810a 	ble.w	8012bb0 <__ieee754_pow+0x990>
 801299c:	151b      	asrs	r3, r3, #20
 801299e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80129a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80129a6:	fa4a f303 	asr.w	r3, sl, r3
 80129aa:	445b      	add	r3, fp
 80129ac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80129b0:	4e9c      	ldr	r6, [pc, #624]	; (8012c24 <__ieee754_pow+0xa04>)
 80129b2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80129b6:	4116      	asrs	r6, r2
 80129b8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80129bc:	2000      	movs	r0, #0
 80129be:	ea23 0106 	bic.w	r1, r3, r6
 80129c2:	f1c2 0214 	rsb	r2, r2, #20
 80129c6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80129ca:	fa4a fa02 	asr.w	sl, sl, r2
 80129ce:	f1bb 0f00 	cmp.w	fp, #0
 80129d2:	4602      	mov	r2, r0
 80129d4:	460b      	mov	r3, r1
 80129d6:	4620      	mov	r0, r4
 80129d8:	4629      	mov	r1, r5
 80129da:	bfb8      	it	lt
 80129dc:	f1ca 0a00 	rsblt	sl, sl, #0
 80129e0:	f7ed fc52 	bl	8000288 <__aeabi_dsub>
 80129e4:	e9cd 0100 	strd	r0, r1, [sp]
 80129e8:	4642      	mov	r2, r8
 80129ea:	464b      	mov	r3, r9
 80129ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129f0:	f7ed fc4c 	bl	800028c <__adddf3>
 80129f4:	2000      	movs	r0, #0
 80129f6:	a378      	add	r3, pc, #480	; (adr r3, 8012bd8 <__ieee754_pow+0x9b8>)
 80129f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fc:	4604      	mov	r4, r0
 80129fe:	460d      	mov	r5, r1
 8012a00:	f7ed fdfa 	bl	80005f8 <__aeabi_dmul>
 8012a04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a08:	4606      	mov	r6, r0
 8012a0a:	460f      	mov	r7, r1
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	4629      	mov	r1, r5
 8012a10:	f7ed fc3a 	bl	8000288 <__aeabi_dsub>
 8012a14:	4602      	mov	r2, r0
 8012a16:	460b      	mov	r3, r1
 8012a18:	4640      	mov	r0, r8
 8012a1a:	4649      	mov	r1, r9
 8012a1c:	f7ed fc34 	bl	8000288 <__aeabi_dsub>
 8012a20:	a36f      	add	r3, pc, #444	; (adr r3, 8012be0 <__ieee754_pow+0x9c0>)
 8012a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a26:	f7ed fde7 	bl	80005f8 <__aeabi_dmul>
 8012a2a:	a36f      	add	r3, pc, #444	; (adr r3, 8012be8 <__ieee754_pow+0x9c8>)
 8012a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a30:	4680      	mov	r8, r0
 8012a32:	4689      	mov	r9, r1
 8012a34:	4620      	mov	r0, r4
 8012a36:	4629      	mov	r1, r5
 8012a38:	f7ed fdde 	bl	80005f8 <__aeabi_dmul>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	460b      	mov	r3, r1
 8012a40:	4640      	mov	r0, r8
 8012a42:	4649      	mov	r1, r9
 8012a44:	f7ed fc22 	bl	800028c <__adddf3>
 8012a48:	4604      	mov	r4, r0
 8012a4a:	460d      	mov	r5, r1
 8012a4c:	4602      	mov	r2, r0
 8012a4e:	460b      	mov	r3, r1
 8012a50:	4630      	mov	r0, r6
 8012a52:	4639      	mov	r1, r7
 8012a54:	f7ed fc1a 	bl	800028c <__adddf3>
 8012a58:	4632      	mov	r2, r6
 8012a5a:	463b      	mov	r3, r7
 8012a5c:	4680      	mov	r8, r0
 8012a5e:	4689      	mov	r9, r1
 8012a60:	f7ed fc12 	bl	8000288 <__aeabi_dsub>
 8012a64:	4602      	mov	r2, r0
 8012a66:	460b      	mov	r3, r1
 8012a68:	4620      	mov	r0, r4
 8012a6a:	4629      	mov	r1, r5
 8012a6c:	f7ed fc0c 	bl	8000288 <__aeabi_dsub>
 8012a70:	4642      	mov	r2, r8
 8012a72:	4606      	mov	r6, r0
 8012a74:	460f      	mov	r7, r1
 8012a76:	464b      	mov	r3, r9
 8012a78:	4640      	mov	r0, r8
 8012a7a:	4649      	mov	r1, r9
 8012a7c:	f7ed fdbc 	bl	80005f8 <__aeabi_dmul>
 8012a80:	a35b      	add	r3, pc, #364	; (adr r3, 8012bf0 <__ieee754_pow+0x9d0>)
 8012a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a86:	4604      	mov	r4, r0
 8012a88:	460d      	mov	r5, r1
 8012a8a:	f7ed fdb5 	bl	80005f8 <__aeabi_dmul>
 8012a8e:	a35a      	add	r3, pc, #360	; (adr r3, 8012bf8 <__ieee754_pow+0x9d8>)
 8012a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a94:	f7ed fbf8 	bl	8000288 <__aeabi_dsub>
 8012a98:	4622      	mov	r2, r4
 8012a9a:	462b      	mov	r3, r5
 8012a9c:	f7ed fdac 	bl	80005f8 <__aeabi_dmul>
 8012aa0:	a357      	add	r3, pc, #348	; (adr r3, 8012c00 <__ieee754_pow+0x9e0>)
 8012aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa6:	f7ed fbf1 	bl	800028c <__adddf3>
 8012aaa:	4622      	mov	r2, r4
 8012aac:	462b      	mov	r3, r5
 8012aae:	f7ed fda3 	bl	80005f8 <__aeabi_dmul>
 8012ab2:	a355      	add	r3, pc, #340	; (adr r3, 8012c08 <__ieee754_pow+0x9e8>)
 8012ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab8:	f7ed fbe6 	bl	8000288 <__aeabi_dsub>
 8012abc:	4622      	mov	r2, r4
 8012abe:	462b      	mov	r3, r5
 8012ac0:	f7ed fd9a 	bl	80005f8 <__aeabi_dmul>
 8012ac4:	a352      	add	r3, pc, #328	; (adr r3, 8012c10 <__ieee754_pow+0x9f0>)
 8012ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aca:	f7ed fbdf 	bl	800028c <__adddf3>
 8012ace:	4622      	mov	r2, r4
 8012ad0:	462b      	mov	r3, r5
 8012ad2:	f7ed fd91 	bl	80005f8 <__aeabi_dmul>
 8012ad6:	4602      	mov	r2, r0
 8012ad8:	460b      	mov	r3, r1
 8012ada:	4640      	mov	r0, r8
 8012adc:	4649      	mov	r1, r9
 8012ade:	f7ed fbd3 	bl	8000288 <__aeabi_dsub>
 8012ae2:	4604      	mov	r4, r0
 8012ae4:	460d      	mov	r5, r1
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	460b      	mov	r3, r1
 8012aea:	4640      	mov	r0, r8
 8012aec:	4649      	mov	r1, r9
 8012aee:	f7ed fd83 	bl	80005f8 <__aeabi_dmul>
 8012af2:	2200      	movs	r2, #0
 8012af4:	e9cd 0100 	strd	r0, r1, [sp]
 8012af8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012afc:	4620      	mov	r0, r4
 8012afe:	4629      	mov	r1, r5
 8012b00:	f7ed fbc2 	bl	8000288 <__aeabi_dsub>
 8012b04:	4602      	mov	r2, r0
 8012b06:	460b      	mov	r3, r1
 8012b08:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012b0c:	f7ed fe9e 	bl	800084c <__aeabi_ddiv>
 8012b10:	4632      	mov	r2, r6
 8012b12:	4604      	mov	r4, r0
 8012b14:	460d      	mov	r5, r1
 8012b16:	463b      	mov	r3, r7
 8012b18:	4640      	mov	r0, r8
 8012b1a:	4649      	mov	r1, r9
 8012b1c:	f7ed fd6c 	bl	80005f8 <__aeabi_dmul>
 8012b20:	4632      	mov	r2, r6
 8012b22:	463b      	mov	r3, r7
 8012b24:	f7ed fbb2 	bl	800028c <__adddf3>
 8012b28:	4602      	mov	r2, r0
 8012b2a:	460b      	mov	r3, r1
 8012b2c:	4620      	mov	r0, r4
 8012b2e:	4629      	mov	r1, r5
 8012b30:	f7ed fbaa 	bl	8000288 <__aeabi_dsub>
 8012b34:	4642      	mov	r2, r8
 8012b36:	464b      	mov	r3, r9
 8012b38:	f7ed fba6 	bl	8000288 <__aeabi_dsub>
 8012b3c:	4602      	mov	r2, r0
 8012b3e:	460b      	mov	r3, r1
 8012b40:	2000      	movs	r0, #0
 8012b42:	4939      	ldr	r1, [pc, #228]	; (8012c28 <__ieee754_pow+0xa08>)
 8012b44:	f7ed fba0 	bl	8000288 <__aeabi_dsub>
 8012b48:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8012b4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8012b50:	4602      	mov	r2, r0
 8012b52:	460b      	mov	r3, r1
 8012b54:	da2f      	bge.n	8012bb6 <__ieee754_pow+0x996>
 8012b56:	4650      	mov	r0, sl
 8012b58:	ec43 2b10 	vmov	d0, r2, r3
 8012b5c:	f000 f9c0 	bl	8012ee0 <scalbn>
 8012b60:	ec51 0b10 	vmov	r0, r1, d0
 8012b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012b68:	f7ff bbf1 	b.w	801234e <__ieee754_pow+0x12e>
 8012b6c:	4b2f      	ldr	r3, [pc, #188]	; (8012c2c <__ieee754_pow+0xa0c>)
 8012b6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012b72:	429e      	cmp	r6, r3
 8012b74:	f77f af0c 	ble.w	8012990 <__ieee754_pow+0x770>
 8012b78:	4b2d      	ldr	r3, [pc, #180]	; (8012c30 <__ieee754_pow+0xa10>)
 8012b7a:	440b      	add	r3, r1
 8012b7c:	4303      	orrs	r3, r0
 8012b7e:	d00b      	beq.n	8012b98 <__ieee754_pow+0x978>
 8012b80:	a325      	add	r3, pc, #148	; (adr r3, 8012c18 <__ieee754_pow+0x9f8>)
 8012b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b8a:	f7ed fd35 	bl	80005f8 <__aeabi_dmul>
 8012b8e:	a322      	add	r3, pc, #136	; (adr r3, 8012c18 <__ieee754_pow+0x9f8>)
 8012b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b94:	f7ff bbdb 	b.w	801234e <__ieee754_pow+0x12e>
 8012b98:	4622      	mov	r2, r4
 8012b9a:	462b      	mov	r3, r5
 8012b9c:	f7ed fb74 	bl	8000288 <__aeabi_dsub>
 8012ba0:	4642      	mov	r2, r8
 8012ba2:	464b      	mov	r3, r9
 8012ba4:	f7ed ffae 	bl	8000b04 <__aeabi_dcmpge>
 8012ba8:	2800      	cmp	r0, #0
 8012baa:	f43f aef1 	beq.w	8012990 <__ieee754_pow+0x770>
 8012bae:	e7e7      	b.n	8012b80 <__ieee754_pow+0x960>
 8012bb0:	f04f 0a00 	mov.w	sl, #0
 8012bb4:	e718      	b.n	80129e8 <__ieee754_pow+0x7c8>
 8012bb6:	4621      	mov	r1, r4
 8012bb8:	e7d4      	b.n	8012b64 <__ieee754_pow+0x944>
 8012bba:	2000      	movs	r0, #0
 8012bbc:	491a      	ldr	r1, [pc, #104]	; (8012c28 <__ieee754_pow+0xa08>)
 8012bbe:	f7ff bb8f 	b.w	80122e0 <__ieee754_pow+0xc0>
 8012bc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bc6:	f7ff bb8b 	b.w	80122e0 <__ieee754_pow+0xc0>
 8012bca:	4630      	mov	r0, r6
 8012bcc:	4639      	mov	r1, r7
 8012bce:	f7ff bb87 	b.w	80122e0 <__ieee754_pow+0xc0>
 8012bd2:	4693      	mov	fp, r2
 8012bd4:	f7ff bb98 	b.w	8012308 <__ieee754_pow+0xe8>
 8012bd8:	00000000 	.word	0x00000000
 8012bdc:	3fe62e43 	.word	0x3fe62e43
 8012be0:	fefa39ef 	.word	0xfefa39ef
 8012be4:	3fe62e42 	.word	0x3fe62e42
 8012be8:	0ca86c39 	.word	0x0ca86c39
 8012bec:	be205c61 	.word	0xbe205c61
 8012bf0:	72bea4d0 	.word	0x72bea4d0
 8012bf4:	3e663769 	.word	0x3e663769
 8012bf8:	c5d26bf1 	.word	0xc5d26bf1
 8012bfc:	3ebbbd41 	.word	0x3ebbbd41
 8012c00:	af25de2c 	.word	0xaf25de2c
 8012c04:	3f11566a 	.word	0x3f11566a
 8012c08:	16bebd93 	.word	0x16bebd93
 8012c0c:	3f66c16c 	.word	0x3f66c16c
 8012c10:	5555553e 	.word	0x5555553e
 8012c14:	3fc55555 	.word	0x3fc55555
 8012c18:	c2f8f359 	.word	0xc2f8f359
 8012c1c:	01a56e1f 	.word	0x01a56e1f
 8012c20:	3fe00000 	.word	0x3fe00000
 8012c24:	000fffff 	.word	0x000fffff
 8012c28:	3ff00000 	.word	0x3ff00000
 8012c2c:	4090cbff 	.word	0x4090cbff
 8012c30:	3f6f3400 	.word	0x3f6f3400
 8012c34:	652b82fe 	.word	0x652b82fe
 8012c38:	3c971547 	.word	0x3c971547

08012c3c <__ieee754_sqrt>:
 8012c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c40:	4955      	ldr	r1, [pc, #340]	; (8012d98 <__ieee754_sqrt+0x15c>)
 8012c42:	ec55 4b10 	vmov	r4, r5, d0
 8012c46:	43a9      	bics	r1, r5
 8012c48:	462b      	mov	r3, r5
 8012c4a:	462a      	mov	r2, r5
 8012c4c:	d112      	bne.n	8012c74 <__ieee754_sqrt+0x38>
 8012c4e:	ee10 2a10 	vmov	r2, s0
 8012c52:	ee10 0a10 	vmov	r0, s0
 8012c56:	4629      	mov	r1, r5
 8012c58:	f7ed fcce 	bl	80005f8 <__aeabi_dmul>
 8012c5c:	4602      	mov	r2, r0
 8012c5e:	460b      	mov	r3, r1
 8012c60:	4620      	mov	r0, r4
 8012c62:	4629      	mov	r1, r5
 8012c64:	f7ed fb12 	bl	800028c <__adddf3>
 8012c68:	4604      	mov	r4, r0
 8012c6a:	460d      	mov	r5, r1
 8012c6c:	ec45 4b10 	vmov	d0, r4, r5
 8012c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c74:	2d00      	cmp	r5, #0
 8012c76:	ee10 0a10 	vmov	r0, s0
 8012c7a:	4621      	mov	r1, r4
 8012c7c:	dc0f      	bgt.n	8012c9e <__ieee754_sqrt+0x62>
 8012c7e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012c82:	4330      	orrs	r0, r6
 8012c84:	d0f2      	beq.n	8012c6c <__ieee754_sqrt+0x30>
 8012c86:	b155      	cbz	r5, 8012c9e <__ieee754_sqrt+0x62>
 8012c88:	ee10 2a10 	vmov	r2, s0
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	4629      	mov	r1, r5
 8012c90:	f7ed fafa 	bl	8000288 <__aeabi_dsub>
 8012c94:	4602      	mov	r2, r0
 8012c96:	460b      	mov	r3, r1
 8012c98:	f7ed fdd8 	bl	800084c <__aeabi_ddiv>
 8012c9c:	e7e4      	b.n	8012c68 <__ieee754_sqrt+0x2c>
 8012c9e:	151b      	asrs	r3, r3, #20
 8012ca0:	d073      	beq.n	8012d8a <__ieee754_sqrt+0x14e>
 8012ca2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012ca6:	07dd      	lsls	r5, r3, #31
 8012ca8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012cac:	bf48      	it	mi
 8012cae:	0fc8      	lsrmi	r0, r1, #31
 8012cb0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8012cb4:	bf44      	itt	mi
 8012cb6:	0049      	lslmi	r1, r1, #1
 8012cb8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012cbc:	2500      	movs	r5, #0
 8012cbe:	1058      	asrs	r0, r3, #1
 8012cc0:	0fcb      	lsrs	r3, r1, #31
 8012cc2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8012cc6:	0049      	lsls	r1, r1, #1
 8012cc8:	2316      	movs	r3, #22
 8012cca:	462c      	mov	r4, r5
 8012ccc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012cd0:	19a7      	adds	r7, r4, r6
 8012cd2:	4297      	cmp	r7, r2
 8012cd4:	bfde      	ittt	le
 8012cd6:	19bc      	addle	r4, r7, r6
 8012cd8:	1bd2      	suble	r2, r2, r7
 8012cda:	19ad      	addle	r5, r5, r6
 8012cdc:	0fcf      	lsrs	r7, r1, #31
 8012cde:	3b01      	subs	r3, #1
 8012ce0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8012ce4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012ce8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012cec:	d1f0      	bne.n	8012cd0 <__ieee754_sqrt+0x94>
 8012cee:	f04f 0c20 	mov.w	ip, #32
 8012cf2:	469e      	mov	lr, r3
 8012cf4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012cf8:	42a2      	cmp	r2, r4
 8012cfa:	eb06 070e 	add.w	r7, r6, lr
 8012cfe:	dc02      	bgt.n	8012d06 <__ieee754_sqrt+0xca>
 8012d00:	d112      	bne.n	8012d28 <__ieee754_sqrt+0xec>
 8012d02:	428f      	cmp	r7, r1
 8012d04:	d810      	bhi.n	8012d28 <__ieee754_sqrt+0xec>
 8012d06:	2f00      	cmp	r7, #0
 8012d08:	eb07 0e06 	add.w	lr, r7, r6
 8012d0c:	da42      	bge.n	8012d94 <__ieee754_sqrt+0x158>
 8012d0e:	f1be 0f00 	cmp.w	lr, #0
 8012d12:	db3f      	blt.n	8012d94 <__ieee754_sqrt+0x158>
 8012d14:	f104 0801 	add.w	r8, r4, #1
 8012d18:	1b12      	subs	r2, r2, r4
 8012d1a:	428f      	cmp	r7, r1
 8012d1c:	bf88      	it	hi
 8012d1e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012d22:	1bc9      	subs	r1, r1, r7
 8012d24:	4433      	add	r3, r6
 8012d26:	4644      	mov	r4, r8
 8012d28:	0052      	lsls	r2, r2, #1
 8012d2a:	f1bc 0c01 	subs.w	ip, ip, #1
 8012d2e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012d32:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012d36:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012d3a:	d1dd      	bne.n	8012cf8 <__ieee754_sqrt+0xbc>
 8012d3c:	430a      	orrs	r2, r1
 8012d3e:	d006      	beq.n	8012d4e <__ieee754_sqrt+0x112>
 8012d40:	1c5c      	adds	r4, r3, #1
 8012d42:	bf13      	iteet	ne
 8012d44:	3301      	addne	r3, #1
 8012d46:	3501      	addeq	r5, #1
 8012d48:	4663      	moveq	r3, ip
 8012d4a:	f023 0301 	bicne.w	r3, r3, #1
 8012d4e:	106a      	asrs	r2, r5, #1
 8012d50:	085b      	lsrs	r3, r3, #1
 8012d52:	07e9      	lsls	r1, r5, #31
 8012d54:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012d58:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8012d5c:	bf48      	it	mi
 8012d5e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012d62:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012d66:	461c      	mov	r4, r3
 8012d68:	e780      	b.n	8012c6c <__ieee754_sqrt+0x30>
 8012d6a:	0aca      	lsrs	r2, r1, #11
 8012d6c:	3815      	subs	r0, #21
 8012d6e:	0549      	lsls	r1, r1, #21
 8012d70:	2a00      	cmp	r2, #0
 8012d72:	d0fa      	beq.n	8012d6a <__ieee754_sqrt+0x12e>
 8012d74:	02d6      	lsls	r6, r2, #11
 8012d76:	d50a      	bpl.n	8012d8e <__ieee754_sqrt+0x152>
 8012d78:	f1c3 0420 	rsb	r4, r3, #32
 8012d7c:	fa21 f404 	lsr.w	r4, r1, r4
 8012d80:	1e5d      	subs	r5, r3, #1
 8012d82:	4099      	lsls	r1, r3
 8012d84:	4322      	orrs	r2, r4
 8012d86:	1b43      	subs	r3, r0, r5
 8012d88:	e78b      	b.n	8012ca2 <__ieee754_sqrt+0x66>
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	e7f0      	b.n	8012d70 <__ieee754_sqrt+0x134>
 8012d8e:	0052      	lsls	r2, r2, #1
 8012d90:	3301      	adds	r3, #1
 8012d92:	e7ef      	b.n	8012d74 <__ieee754_sqrt+0x138>
 8012d94:	46a0      	mov	r8, r4
 8012d96:	e7bf      	b.n	8012d18 <__ieee754_sqrt+0xdc>
 8012d98:	7ff00000 	.word	0x7ff00000

08012d9c <fabs>:
 8012d9c:	ec51 0b10 	vmov	r0, r1, d0
 8012da0:	ee10 2a10 	vmov	r2, s0
 8012da4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012da8:	ec43 2b10 	vmov	d0, r2, r3
 8012dac:	4770      	bx	lr

08012dae <finite>:
 8012dae:	ee10 3a90 	vmov	r3, s1
 8012db2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012db6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012dba:	0fc0      	lsrs	r0, r0, #31
 8012dbc:	4770      	bx	lr

08012dbe <matherr>:
 8012dbe:	2000      	movs	r0, #0
 8012dc0:	4770      	bx	lr
 8012dc2:	0000      	movs	r0, r0
 8012dc4:	0000      	movs	r0, r0
	...

08012dc8 <nan>:
 8012dc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012dd0 <nan+0x8>
 8012dcc:	4770      	bx	lr
 8012dce:	bf00      	nop
 8012dd0:	00000000 	.word	0x00000000
 8012dd4:	7ff80000 	.word	0x7ff80000

08012dd8 <rint>:
 8012dd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012dda:	ec51 0b10 	vmov	r0, r1, d0
 8012dde:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012de2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012de6:	2e13      	cmp	r6, #19
 8012de8:	460b      	mov	r3, r1
 8012dea:	ee10 4a10 	vmov	r4, s0
 8012dee:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012df2:	dc56      	bgt.n	8012ea2 <rint+0xca>
 8012df4:	2e00      	cmp	r6, #0
 8012df6:	da2b      	bge.n	8012e50 <rint+0x78>
 8012df8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012dfc:	4302      	orrs	r2, r0
 8012dfe:	d023      	beq.n	8012e48 <rint+0x70>
 8012e00:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012e04:	4302      	orrs	r2, r0
 8012e06:	4254      	negs	r4, r2
 8012e08:	4314      	orrs	r4, r2
 8012e0a:	0c4b      	lsrs	r3, r1, #17
 8012e0c:	0b24      	lsrs	r4, r4, #12
 8012e0e:	045b      	lsls	r3, r3, #17
 8012e10:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012e14:	ea44 0103 	orr.w	r1, r4, r3
 8012e18:	460b      	mov	r3, r1
 8012e1a:	492f      	ldr	r1, [pc, #188]	; (8012ed8 <rint+0x100>)
 8012e1c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012e20:	e9d1 6700 	ldrd	r6, r7, [r1]
 8012e24:	4602      	mov	r2, r0
 8012e26:	4639      	mov	r1, r7
 8012e28:	4630      	mov	r0, r6
 8012e2a:	f7ed fa2f 	bl	800028c <__adddf3>
 8012e2e:	e9cd 0100 	strd	r0, r1, [sp]
 8012e32:	463b      	mov	r3, r7
 8012e34:	4632      	mov	r2, r6
 8012e36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e3a:	f7ed fa25 	bl	8000288 <__aeabi_dsub>
 8012e3e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012e42:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012e46:	4639      	mov	r1, r7
 8012e48:	ec41 0b10 	vmov	d0, r0, r1
 8012e4c:	b003      	add	sp, #12
 8012e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e50:	4a22      	ldr	r2, [pc, #136]	; (8012edc <rint+0x104>)
 8012e52:	4132      	asrs	r2, r6
 8012e54:	ea01 0702 	and.w	r7, r1, r2
 8012e58:	4307      	orrs	r7, r0
 8012e5a:	d0f5      	beq.n	8012e48 <rint+0x70>
 8012e5c:	0852      	lsrs	r2, r2, #1
 8012e5e:	4011      	ands	r1, r2
 8012e60:	430c      	orrs	r4, r1
 8012e62:	d00b      	beq.n	8012e7c <rint+0xa4>
 8012e64:	ea23 0202 	bic.w	r2, r3, r2
 8012e68:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012e6c:	2e13      	cmp	r6, #19
 8012e6e:	fa43 f306 	asr.w	r3, r3, r6
 8012e72:	bf0c      	ite	eq
 8012e74:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012e78:	2400      	movne	r4, #0
 8012e7a:	4313      	orrs	r3, r2
 8012e7c:	4916      	ldr	r1, [pc, #88]	; (8012ed8 <rint+0x100>)
 8012e7e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012e82:	4622      	mov	r2, r4
 8012e84:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012e88:	4620      	mov	r0, r4
 8012e8a:	4629      	mov	r1, r5
 8012e8c:	f7ed f9fe 	bl	800028c <__adddf3>
 8012e90:	e9cd 0100 	strd	r0, r1, [sp]
 8012e94:	4622      	mov	r2, r4
 8012e96:	462b      	mov	r3, r5
 8012e98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e9c:	f7ed f9f4 	bl	8000288 <__aeabi_dsub>
 8012ea0:	e7d2      	b.n	8012e48 <rint+0x70>
 8012ea2:	2e33      	cmp	r6, #51	; 0x33
 8012ea4:	dd07      	ble.n	8012eb6 <rint+0xde>
 8012ea6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012eaa:	d1cd      	bne.n	8012e48 <rint+0x70>
 8012eac:	ee10 2a10 	vmov	r2, s0
 8012eb0:	f7ed f9ec 	bl	800028c <__adddf3>
 8012eb4:	e7c8      	b.n	8012e48 <rint+0x70>
 8012eb6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8012eba:	f04f 32ff 	mov.w	r2, #4294967295
 8012ebe:	40f2      	lsrs	r2, r6
 8012ec0:	4210      	tst	r0, r2
 8012ec2:	d0c1      	beq.n	8012e48 <rint+0x70>
 8012ec4:	0852      	lsrs	r2, r2, #1
 8012ec6:	4210      	tst	r0, r2
 8012ec8:	bf1f      	itttt	ne
 8012eca:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012ece:	ea20 0202 	bicne.w	r2, r0, r2
 8012ed2:	4134      	asrne	r4, r6
 8012ed4:	4314      	orrne	r4, r2
 8012ed6:	e7d1      	b.n	8012e7c <rint+0xa4>
 8012ed8:	08013a18 	.word	0x08013a18
 8012edc:	000fffff 	.word	0x000fffff

08012ee0 <scalbn>:
 8012ee0:	b570      	push	{r4, r5, r6, lr}
 8012ee2:	ec55 4b10 	vmov	r4, r5, d0
 8012ee6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012eea:	4606      	mov	r6, r0
 8012eec:	462b      	mov	r3, r5
 8012eee:	b9aa      	cbnz	r2, 8012f1c <scalbn+0x3c>
 8012ef0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012ef4:	4323      	orrs	r3, r4
 8012ef6:	d03b      	beq.n	8012f70 <scalbn+0x90>
 8012ef8:	4b31      	ldr	r3, [pc, #196]	; (8012fc0 <scalbn+0xe0>)
 8012efa:	4629      	mov	r1, r5
 8012efc:	2200      	movs	r2, #0
 8012efe:	ee10 0a10 	vmov	r0, s0
 8012f02:	f7ed fb79 	bl	80005f8 <__aeabi_dmul>
 8012f06:	4b2f      	ldr	r3, [pc, #188]	; (8012fc4 <scalbn+0xe4>)
 8012f08:	429e      	cmp	r6, r3
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	460d      	mov	r5, r1
 8012f0e:	da12      	bge.n	8012f36 <scalbn+0x56>
 8012f10:	a327      	add	r3, pc, #156	; (adr r3, 8012fb0 <scalbn+0xd0>)
 8012f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f16:	f7ed fb6f 	bl	80005f8 <__aeabi_dmul>
 8012f1a:	e009      	b.n	8012f30 <scalbn+0x50>
 8012f1c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012f20:	428a      	cmp	r2, r1
 8012f22:	d10c      	bne.n	8012f3e <scalbn+0x5e>
 8012f24:	ee10 2a10 	vmov	r2, s0
 8012f28:	4620      	mov	r0, r4
 8012f2a:	4629      	mov	r1, r5
 8012f2c:	f7ed f9ae 	bl	800028c <__adddf3>
 8012f30:	4604      	mov	r4, r0
 8012f32:	460d      	mov	r5, r1
 8012f34:	e01c      	b.n	8012f70 <scalbn+0x90>
 8012f36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012f3a:	460b      	mov	r3, r1
 8012f3c:	3a36      	subs	r2, #54	; 0x36
 8012f3e:	4432      	add	r2, r6
 8012f40:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012f44:	428a      	cmp	r2, r1
 8012f46:	dd0b      	ble.n	8012f60 <scalbn+0x80>
 8012f48:	ec45 4b11 	vmov	d1, r4, r5
 8012f4c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012fb8 <scalbn+0xd8>
 8012f50:	f000 f83c 	bl	8012fcc <copysign>
 8012f54:	a318      	add	r3, pc, #96	; (adr r3, 8012fb8 <scalbn+0xd8>)
 8012f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5a:	ec51 0b10 	vmov	r0, r1, d0
 8012f5e:	e7da      	b.n	8012f16 <scalbn+0x36>
 8012f60:	2a00      	cmp	r2, #0
 8012f62:	dd08      	ble.n	8012f76 <scalbn+0x96>
 8012f64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012f70:	ec45 4b10 	vmov	d0, r4, r5
 8012f74:	bd70      	pop	{r4, r5, r6, pc}
 8012f76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012f7a:	da0d      	bge.n	8012f98 <scalbn+0xb8>
 8012f7c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012f80:	429e      	cmp	r6, r3
 8012f82:	ec45 4b11 	vmov	d1, r4, r5
 8012f86:	dce1      	bgt.n	8012f4c <scalbn+0x6c>
 8012f88:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012fb0 <scalbn+0xd0>
 8012f8c:	f000 f81e 	bl	8012fcc <copysign>
 8012f90:	a307      	add	r3, pc, #28	; (adr r3, 8012fb0 <scalbn+0xd0>)
 8012f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f96:	e7e0      	b.n	8012f5a <scalbn+0x7a>
 8012f98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f9c:	3236      	adds	r2, #54	; 0x36
 8012f9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012fa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	4629      	mov	r1, r5
 8012faa:	2200      	movs	r2, #0
 8012fac:	4b06      	ldr	r3, [pc, #24]	; (8012fc8 <scalbn+0xe8>)
 8012fae:	e7b2      	b.n	8012f16 <scalbn+0x36>
 8012fb0:	c2f8f359 	.word	0xc2f8f359
 8012fb4:	01a56e1f 	.word	0x01a56e1f
 8012fb8:	8800759c 	.word	0x8800759c
 8012fbc:	7e37e43c 	.word	0x7e37e43c
 8012fc0:	43500000 	.word	0x43500000
 8012fc4:	ffff3cb0 	.word	0xffff3cb0
 8012fc8:	3c900000 	.word	0x3c900000

08012fcc <copysign>:
 8012fcc:	ec51 0b10 	vmov	r0, r1, d0
 8012fd0:	ee11 0a90 	vmov	r0, s3
 8012fd4:	ee10 2a10 	vmov	r2, s0
 8012fd8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012fdc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012fe0:	ea41 0300 	orr.w	r3, r1, r0
 8012fe4:	ec43 2b10 	vmov	d0, r2, r3
 8012fe8:	4770      	bx	lr
	...

08012fec <__errno>:
 8012fec:	4b01      	ldr	r3, [pc, #4]	; (8012ff4 <__errno+0x8>)
 8012fee:	6818      	ldr	r0, [r3, #0]
 8012ff0:	4770      	bx	lr
 8012ff2:	bf00      	nop
 8012ff4:	2000017c 	.word	0x2000017c

08012ff8 <_sbrk>:
 8012ff8:	4b04      	ldr	r3, [pc, #16]	; (801300c <_sbrk+0x14>)
 8012ffa:	6819      	ldr	r1, [r3, #0]
 8012ffc:	4602      	mov	r2, r0
 8012ffe:	b909      	cbnz	r1, 8013004 <_sbrk+0xc>
 8013000:	4903      	ldr	r1, [pc, #12]	; (8013010 <_sbrk+0x18>)
 8013002:	6019      	str	r1, [r3, #0]
 8013004:	6818      	ldr	r0, [r3, #0]
 8013006:	4402      	add	r2, r0
 8013008:	601a      	str	r2, [r3, #0]
 801300a:	4770      	bx	lr
 801300c:	20000790 	.word	0x20000790
 8013010:	20002de8 	.word	0x20002de8

08013014 <_init>:
 8013014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013016:	bf00      	nop
 8013018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801301a:	bc08      	pop	{r3}
 801301c:	469e      	mov	lr, r3
 801301e:	4770      	bx	lr

08013020 <_fini>:
 8013020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013022:	bf00      	nop
 8013024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013026:	bc08      	pop	{r3}
 8013028:	469e      	mov	lr, r3
 801302a:	4770      	bx	lr
