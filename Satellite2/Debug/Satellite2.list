
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800fbb8  0800fbb8  0001fbb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fee0  0800fee0  00020350  2**0
                  CONTENTS
  4 .ARM          00000008  0800fee0  0800fee0  0001fee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fee8  0800fee8  00020350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fee8  0800fee8  0001fee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800feec  0800feec  0001feec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  0800fef0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024e8  20000350  08010240  00020350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002838  08010240  00022838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020350  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274b2  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d4a  00000000  00000000  00047832  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001df0  00000000  00000000  0004c580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bd8  00000000  00000000  0004e370  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000709c  00000000  00000000  0004ff48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ceae  00000000  00000000  00056fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d38bd  00000000  00000000  00073e92  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014774f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b30  00000000  00000000  001477cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fb9c 	.word	0x0800fb9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	0800fb9c 	.word	0x0800fb9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <setup>:
int8_t counterDir;
bool notPlayed;
int i;

void setup()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	4828      	ldr	r0, [pc, #160]	; (8001034 <setup+0xac>)
 8000f92:	f001 fefd 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	; 0x40
 8000f9a:	4826      	ldr	r0, [pc, #152]	; (8001034 <setup+0xac>)
 8000f9c:	f001 fef8 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fa6:	4824      	ldr	r0, [pc, #144]	; (8001038 <setup+0xb0>)
 8000fa8:	f001 fef2 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8000fac:	2200      	movs	r2, #0
 8000fae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fb2:	4821      	ldr	r0, [pc, #132]	; (8001038 <setup+0xb0>)
 8000fb4:	f001 feec 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(750);
 8000fb8:	f240 20ee 	movw	r0, #750	; 0x2ee
 8000fbc:	f001 f866 	bl	800208c <HAL_Delay>

	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	481b      	ldr	r0, [pc, #108]	; (8001034 <setup+0xac>)
 8000fc6:	f001 fee3 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000fca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fce:	f001 f85d 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2140      	movs	r1, #64	; 0x40
 8000fd6:	4817      	ldr	r0, [pc, #92]	; (8001034 <setup+0xac>)
 8000fd8:	f001 feda 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fe0:	f001 f854 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4813      	ldr	r0, [pc, #76]	; (8001038 <setup+0xb0>)
 8000fec:	f001 fed0 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000ff0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ff4:	f001 f84a 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_SET);
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	480e      	ldr	r0, [pc, #56]	; (8001038 <setup+0xb0>)
 8001000:	f001 fec6 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001004:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001008:	f001 f840 	bl	800208c <HAL_Delay>

	motL = 0;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <setup+0xb4>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
	motR = 0;
 8001012:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <setup+0xb8>)
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
	counterDir = 1;
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <setup+0xbc>)
 800101a:	2201      	movs	r2, #1
 800101c:	701a      	strb	r2, [r3, #0]
	enableMotors();
 800101e:	f000 f87d 	bl	800111c <enableMotors>
	setPwmFrequency(100000);
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <setup+0xc0>)
 8001024:	f000 f8b4 	bl	8001190 <setPwmFrequency>
	notPlayed = true;
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <setup+0xc4>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
		println("Radio init successful!");
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
		HAL_Delay(500);
	}
	 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40020800 	.word	0x40020800
 8001038:	40020400 	.word	0x40020400
 800103c:	2000036c 	.word	0x2000036c
 8001040:	2000036d 	.word	0x2000036d
 8001044:	20000596 	.word	0x20000596
 8001048:	000186a0 	.word	0x000186a0
 800104c:	20000594 	.word	0x20000594

08001050 <loop>:

void loop()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2104      	movs	r1, #4
 8001058:	4820      	ldr	r0, [pc, #128]	; (80010dc <loop+0x8c>)
 800105a:	f001 fe99 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2101      	movs	r1, #1
 8001062:	481e      	ldr	r0, [pc, #120]	; (80010dc <loop+0x8c>)
 8001064:	f001 fe94 	bl	8002d90 <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 8001068:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800106c:	f001 f80e 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2102      	movs	r1, #2
 8001074:	4819      	ldr	r0, [pc, #100]	; (80010dc <loop+0x8c>)
 8001076:	f001 fe8b 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 800107a:	2201      	movs	r2, #1
 800107c:	2180      	movs	r1, #128	; 0x80
 800107e:	4818      	ldr	r0, [pc, #96]	; (80010e0 <loop+0x90>)
 8001080:	f001 fe86 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8001084:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001088:	f001 f800 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
 800108c:	2200      	movs	r2, #0
 800108e:	2102      	movs	r1, #2
 8001090:	4812      	ldr	r0, [pc, #72]	; (80010dc <loop+0x8c>)
 8001092:	f001 fe7d 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	4811      	ldr	r0, [pc, #68]	; (80010e0 <loop+0x90>)
 800109c:	f001 fe78 	bl	8002d90 <HAL_GPIO_WritePin>

	HAL_Delay(2000);
 80010a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010a4:	f000 fff2 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_SET);
 80010a8:	2201      	movs	r2, #1
 80010aa:	2108      	movs	r1, #8
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <loop+0x8c>)
 80010ae:	f001 fe6f 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_SET);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2140      	movs	r1, #64	; 0x40
 80010b6:	480a      	ldr	r0, [pc, #40]	; (80010e0 <loop+0x90>)
 80010b8:	f001 fe6a 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c0:	f000 ffe4 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(EN_R_GPIO_Port, EN_R_Pin, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	2108      	movs	r1, #8
 80010c8:	4804      	ldr	r0, [pc, #16]	; (80010dc <loop+0x8c>)
 80010ca:	f001 fe61 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2140      	movs	r1, #64	; 0x40
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <loop+0x90>)
 80010d4:	f001 fe5c 	bl	8002d90 <HAL_GPIO_WritePin>
		printv(printBuffer, printLen);
		message += 1;
		radio.txDone = false;
	}
	*/
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020800 	.word	0x40020800

080010e4 <dio0_IRQ>:

	return true;
}

void dio0_IRQ()
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
		HAL_GPIO_TogglePin(LEDD_GPIO_Port, LEDD_Pin);
		SX1278_dio0_IRQ(&radio);
		radio_procedure();
	}
	*/
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <haltMotors>:
	TIM2->CCR4 = (uint32_t)((float)TIM2->ARR / ((float)pwmR / 255.0));
	TIM3->CNT = 0;	// reset timer counter -> clears motor timeout
}

static void haltMotors()
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
	// Function called on TIM3 overflow interrupt
	TIM2->CCR2 = 0;
 80010f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010fc:	2200      	movs	r2, #0
 80010fe:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR4 = 0;
 8001100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001104:	2200      	movs	r2, #0
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
	TIM3->CNT = 0;	// reset timer counter -> clears motor timeout
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <haltMotors+0x24>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	40000400 	.word	0x40000400

0800111c <enableMotors>:

static void enableMotors()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	haltMotors();
 8001120:	f7ff ffe8 	bl	80010f4 <haltMotors>
	motL_forward = true;
 8001124:	4b16      	ldr	r3, [pc, #88]	; (8001180 <enableMotors+0x64>)
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]
	motR_forward = true;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <enableMotors+0x68>)
 800112c:	2201      	movs	r2, #1
 800112e:	701a      	strb	r2, [r3, #0]

	// flip direction based on config
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <enableMotors+0x64>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f083 0301 	eor.w	r3, r3, #1
 8001138:	b2db      	uxtb	r3, r3
 800113a:	461a      	mov	r2, r3
 800113c:	2101      	movs	r1, #1
 800113e:	4812      	ldr	r0, [pc, #72]	; (8001188 <enableMotors+0x6c>)
 8001140:	f001 fe26 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <enableMotors+0x68>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	f083 0301 	eor.w	r3, r3, #1
 800114c:	b2db      	uxtb	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	2104      	movs	r1, #4
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <enableMotors+0x6c>)
 8001154:	f001 fe1c 	bl	8002d90 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_2);
 8001158:	f000 fbe4 	bl	8001924 <Get_TIM2_Instance>
 800115c:	4603      	mov	r3, r0
 800115e:	2104      	movs	r1, #4
 8001160:	4618      	mov	r0, r3
 8001162:	f005 fc5f 	bl	8006a24 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_4);
 8001166:	f000 fbdd 	bl	8001924 <Get_TIM2_Instance>
 800116a:	4603      	mov	r3, r0
 800116c:	210c      	movs	r1, #12
 800116e:	4618      	mov	r0, r3
 8001170:	f005 fc58 	bl	8006a24 <HAL_TIM_PWM_Start>

	TIM3->CNT = 0;	// reset timer counter -> clears motor timeout
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <enableMotors+0x70>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000000 	.word	0x20000000
 8001184:	20000001 	.word	0x20000001
 8001188:	40020000 	.word	0x40020000
 800118c:	40000400 	.word	0x40000400

08001190 <setPwmFrequency>:
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_4);
}

static void setPwmFrequency(uint32_t f_hz)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	// <=>
	// ARR = Clock frequency / (2 * Frequency)
	// Clock frequency (200kHz) = Source frequency / PSC

	//TIM2->ARR = (uint32_t)(42000000 / TIM2->PSC) / (2 * f_hz);
	TIM2->ARR = 200000 / (2 * f_hz);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a0:	4904      	ldr	r1, [pc, #16]	; (80011b4 <setPwmFrequency+0x24>)
 80011a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80011a6:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	00030d40 	.word	0x00030d40

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011bc:	f000 fef4 	bl	8001fa8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c0:	f000 f822 	bl	8001208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c4:	f000 faba 	bl	800173c <MX_GPIO_Init>
  MX_DMA_Init();
 80011c8:	f000 fa90 	bl	80016ec <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80011cc:	f000 f926 	bl	800141c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80011d0:	f008 fc48 	bl	8009a64 <MX_FATFS_Init>
  MX_I2C1_Init();
 80011d4:	f000 f89a 	bl	800130c <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80011d8:	f00a fa62 	bl	800b6a0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80011dc:	f000 f93e 	bl	800145c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 80011e0:	f000 fa5a 	bl	8001698 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80011e4:	f000 f8c0 	bl	8001368 <MX_RTC_Init>
  MX_TIM2_Init();
 80011e8:	f000 f96e 	bl	80014c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80011ec:	f000 fa06 	bl	80015fc <MX_TIM5_Init>
  MX_TIM3_Init();
 80011f0:	f000 f9b6 	bl	8001560 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80011f4:	f7ff fec8 	bl	8000f88 <setup>

  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start(&htim3);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <main+0x4c>)
 80011fa:	f005 fbee 	bl	80069da <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 80011fe:	f7ff ff27 	bl	8001050 <loop>
 8001202:	e7fc      	b.n	80011fe <main+0x46>
 8001204:	20000948 	.word	0x20000948

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b098      	sub	sp, #96	; 0x60
 800120c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001212:	2230      	movs	r2, #48	; 0x30
 8001214:	2100      	movs	r1, #0
 8001216:	4618      	mov	r0, r3
 8001218:	f00a ff85 	bl	800c126 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800122c:	f107 030c 	add.w	r3, r7, #12
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b31      	ldr	r3, [pc, #196]	; (8001304 <SystemClock_Config+0xfc>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <SystemClock_Config+0xfc>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	6413      	str	r3, [r2, #64]	; 0x40
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <SystemClock_Config+0xfc>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b2b      	ldr	r3, [pc, #172]	; (8001308 <SystemClock_Config+0x100>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <SystemClock_Config+0x100>)
 8001260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SystemClock_Config+0x100>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001272:	2305      	movs	r3, #5
 8001274:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001280:	2302      	movs	r3, #2
 8001282:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001284:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001288:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 800128a:	2306      	movs	r3, #6
 800128c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800128e:	23a8      	movs	r3, #168	; 0xa8
 8001290:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001292:	2302      	movs	r3, #2
 8001294:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001296:	2307      	movs	r3, #7
 8001298:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800129e:	4618      	mov	r0, r3
 80012a0:	f003 f86a 	bl	8004378 <HAL_RCC_OscConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80012aa:	f000 fb65 	bl	8001978 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ae:	230f      	movs	r3, #15
 80012b0:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b2:	2302      	movs	r3, #2
 80012b4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2105      	movs	r1, #5
 80012cc:	4618      	mov	r0, r3
 80012ce:	f003 fac3 	bl	8004858 <HAL_RCC_ClockConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80012d8:	f000 fb4e 	bl	8001978 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012dc:	2302      	movs	r3, #2
 80012de:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80012e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fc80 	bl	8004bf0 <HAL_RCCEx_PeriphCLKConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80012f6:	f000 fb3f 	bl	8001978 <Error_Handler>
  }
}
 80012fa:	bf00      	nop
 80012fc:	3760      	adds	r7, #96	; 0x60
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_I2C1_Init+0x50>)
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_I2C1_Init+0x54>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_I2C1_Init+0x50>)
 8001318:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_I2C1_Init+0x58>)
 800131a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_I2C1_Init+0x50>)
 800132a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001330:	4b0a      	ldr	r3, [pc, #40]	; (800135c <MX_I2C1_Init+0x50>)
 8001332:	2200      	movs	r2, #0
 8001334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_I2C1_Init+0x50>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	; (800135c <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	; (800135c <MX_I2C1_Init+0x50>)
 800134a:	f001 fd53 	bl	8002df4 <HAL_I2C_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001354:	f000 fb10 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200008b4 	.word	0x200008b4
 8001360:	40005400 	.word	0x40005400
 8001364:	000186a0 	.word	0x000186a0

08001368 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800137c:	2300      	movs	r3, #0
 800137e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_RTC_Init+0xac>)
 8001382:	4a25      	ldr	r2, [pc, #148]	; (8001418 <MX_RTC_Init+0xb0>)
 8001384:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <MX_RTC_Init+0xac>)
 8001388:	2200      	movs	r2, #0
 800138a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <MX_RTC_Init+0xac>)
 800138e:	227f      	movs	r2, #127	; 0x7f
 8001390:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_RTC_Init+0xac>)
 8001394:	22ff      	movs	r2, #255	; 0xff
 8001396:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_RTC_Init+0xac>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_RTC_Init+0xac>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_RTC_Init+0xac>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80013aa:	481a      	ldr	r0, [pc, #104]	; (8001414 <MX_RTC_Init+0xac>)
 80013ac:	f003 fd02 	bl	8004db4 <HAL_RTC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80013b6:	f000 fadf 	bl	8001978 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80013be:	2300      	movs	r3, #0
 80013c0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2201      	movs	r2, #1
 80013d2:	4619      	mov	r1, r3
 80013d4:	480f      	ldr	r0, [pc, #60]	; (8001414 <MX_RTC_Init+0xac>)
 80013d6:	f003 fd7e 	bl	8004ed6 <HAL_RTC_SetTime>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80013e0:	f000 faca 	bl	8001978 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013e4:	2301      	movs	r3, #1
 80013e6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80013e8:	2301      	movs	r3, #1
 80013ea:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 80013f0:	2320      	movs	r3, #32
 80013f2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	2201      	movs	r2, #1
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_RTC_Init+0xac>)
 80013fc:	f003 fe28 	bl	8005050 <HAL_RTC_SetDate>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001406:	f000 fab7 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000988 	.word	0x20000988
 8001418:	40002800 	.word	0x40002800

0800141c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SDIO_SD_Init+0x38>)
 8001422:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <MX_SDIO_SD_Init+0x3c>)
 8001424:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_SDIO_SD_Init+0x38>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SDIO_SD_Init+0x38>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_SDIO_SD_Init+0x38>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SDIO_SD_Init+0x38>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800143e:	4b05      	ldr	r3, [pc, #20]	; (8001454 <MX_SDIO_SD_Init+0x38>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <MX_SDIO_SD_Init+0x38>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	20000a08 	.word	0x20000a08
 8001458:	40012c00 	.word	0x40012c00

0800145c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <MX_SPI1_Init+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800146c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_SPI1_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MX_SPI1_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_SPI1_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MX_SPI1_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_SPI1_Init+0x64>)
 80014a8:	220a      	movs	r2, #10
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_SPI1_Init+0x64>)
 80014ae:	f005 fa05 	bl	80068bc <HAL_SPI_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014b8:	f000 fa5e 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000a8c 	.word	0x20000a8c
 80014c4:	40013000 	.word	0x40013000

080014c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	463b      	mov	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <MX_TIM2_Init+0x94>)
 80014e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20999;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <MX_TIM2_Init+0x94>)
 80014ee:	f245 2207 	movw	r2, #20999	; 0x5207
 80014f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_TIM2_Init+0x94>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80014fa:	4b18      	ldr	r3, [pc, #96]	; (800155c <MX_TIM2_Init+0x94>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_TIM2_Init+0x94>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b15      	ldr	r3, [pc, #84]	; (800155c <MX_TIM2_Init+0x94>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800150c:	4813      	ldr	r0, [pc, #76]	; (800155c <MX_TIM2_Init+0x94>)
 800150e:	f005 fa39 	bl	8006984 <HAL_TIM_Base_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001518:	f000 fa2e 	bl	8001978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800151c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001520:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001522:	f107 0308 	add.w	r3, r7, #8
 8001526:	4619      	mov	r1, r3
 8001528:	480c      	ldr	r0, [pc, #48]	; (800155c <MX_TIM2_Init+0x94>)
 800152a:	f005 fbc1 	bl	8006cb0 <HAL_TIM_ConfigClockSource>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001534:	f000 fa20 	bl	8001978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001540:	463b      	mov	r3, r7
 8001542:	4619      	mov	r1, r3
 8001544:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_TIM2_Init+0x94>)
 8001546:	f005 fdf3 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001550:	f000 fa12 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20000ae4 	.word	0x20000ae4

08001560 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800157c:	4b1d      	ldr	r3, [pc, #116]	; (80015f4 <MX_TIM3_Init+0x94>)
 800157e:	4a1e      	ldr	r2, [pc, #120]	; (80015f8 <MX_TIM3_Init+0x98>)
 8001580:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 8001582:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <MX_TIM3_Init+0x94>)
 8001584:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001588:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <MX_TIM3_Init+0x94>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001590:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <MX_TIM3_Init+0x94>)
 8001592:	2264      	movs	r2, #100	; 0x64
 8001594:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <MX_TIM3_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159c:	4b15      	ldr	r3, [pc, #84]	; (80015f4 <MX_TIM3_Init+0x94>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <MX_TIM3_Init+0x94>)
 80015a4:	f005 f9ee 	bl	8006984 <HAL_TIM_Base_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015ae:	f000 f9e3 	bl	8001978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4619      	mov	r1, r3
 80015be:	480d      	ldr	r0, [pc, #52]	; (80015f4 <MX_TIM3_Init+0x94>)
 80015c0:	f005 fb76 	bl	8006cb0 <HAL_TIM_ConfigClockSource>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015ca:	f000 f9d5 	bl	8001978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d6:	463b      	mov	r3, r7
 80015d8:	4619      	mov	r1, r3
 80015da:	4806      	ldr	r0, [pc, #24]	; (80015f4 <MX_TIM3_Init+0x94>)
 80015dc:	f005 fda8 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015e6:	f000 f9c7 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000948 	.word	0x20000948
 80015f8:	40000400 	.word	0x40000400

080015fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	463b      	mov	r3, r7
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001618:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <MX_TIM5_Init+0x94>)
 800161a:	4a1e      	ldr	r2, [pc, #120]	; (8001694 <MX_TIM5_Init+0x98>)
 800161c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <MX_TIM5_Init+0x94>)
 8001620:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001624:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_TIM5_Init+0x94>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_TIM5_Init+0x94>)
 800162e:	2200      	movs	r2, #0
 8001630:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_TIM5_Init+0x94>)
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_TIM5_Init+0x94>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800163e:	4814      	ldr	r0, [pc, #80]	; (8001690 <MX_TIM5_Init+0x94>)
 8001640:	f005 f9a0 	bl	8006984 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800164a:	f000 f995 	bl	8001978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4619      	mov	r1, r3
 800165a:	480d      	ldr	r0, [pc, #52]	; (8001690 <MX_TIM5_Init+0x94>)
 800165c:	f005 fb28 	bl	8006cb0 <HAL_TIM_ConfigClockSource>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001666:	f000 f987 	bl	8001978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	; (8001690 <MX_TIM5_Init+0x94>)
 8001678:	f005 fd5a 	bl	8007130 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001682:	f000 f979 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3718      	adds	r7, #24
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000908 	.word	0x20000908
 8001694:	40000c00 	.word	0x40000c00

08001698 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800169c:	4b11      	ldr	r3, [pc, #68]	; (80016e4 <MX_USART3_UART_Init+0x4c>)
 800169e:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <MX_USART3_UART_Init+0x50>)
 80016a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <MX_USART3_UART_Init+0x4c>)
 80016a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	4b0e      	ldr	r3, [pc, #56]	; (80016e4 <MX_USART3_UART_Init+0x4c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016b0:	4b0c      	ldr	r3, [pc, #48]	; (80016e4 <MX_USART3_UART_Init+0x4c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016b6:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <MX_USART3_UART_Init+0x4c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <MX_USART3_UART_Init+0x4c>)
 80016be:	220c      	movs	r2, #12
 80016c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <MX_USART3_UART_Init+0x4c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <MX_USART3_UART_Init+0x4c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ce:	4805      	ldr	r0, [pc, #20]	; (80016e4 <MX_USART3_UART_Init+0x4c>)
 80016d0:	f005 fdbe 	bl	8007250 <HAL_UART_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80016da:	f000 f94d 	bl	8001978 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	20000874 	.word	0x20000874
 80016e8:	40004800 	.word	0x40004800

080016ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <MX_DMA_Init+0x4c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <MX_DMA_Init+0x4c>)
 80016fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <MX_DMA_Init+0x4c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	203b      	movs	r0, #59	; 0x3b
 8001714:	f000 fdb7 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001718:	203b      	movs	r0, #59	; 0x3b
 800171a:	f000 fdd0 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	2045      	movs	r0, #69	; 0x45
 8001724:	f000 fdaf 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001728:	2045      	movs	r0, #69	; 0x45
 800172a:	f000 fdc8 	bl	80022be <HAL_NVIC_EnableIRQ>

}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
 8001756:	4b6e      	ldr	r3, [pc, #440]	; (8001910 <MX_GPIO_Init+0x1d4>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a6d      	ldr	r2, [pc, #436]	; (8001910 <MX_GPIO_Init+0x1d4>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b6b      	ldr	r3, [pc, #428]	; (8001910 <MX_GPIO_Init+0x1d4>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	613b      	str	r3, [r7, #16]
 800176c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	4b67      	ldr	r3, [pc, #412]	; (8001910 <MX_GPIO_Init+0x1d4>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a66      	ldr	r2, [pc, #408]	; (8001910 <MX_GPIO_Init+0x1d4>)
 8001778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b64      	ldr	r3, [pc, #400]	; (8001910 <MX_GPIO_Init+0x1d4>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b60      	ldr	r3, [pc, #384]	; (8001910 <MX_GPIO_Init+0x1d4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a5f      	ldr	r2, [pc, #380]	; (8001910 <MX_GPIO_Init+0x1d4>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <MX_GPIO_Init+0x1d4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b59      	ldr	r3, [pc, #356]	; (8001910 <MX_GPIO_Init+0x1d4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	4a58      	ldr	r2, [pc, #352]	; (8001910 <MX_GPIO_Init+0x1d4>)
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6313      	str	r3, [r2, #48]	; 0x30
 80017b6:	4b56      	ldr	r3, [pc, #344]	; (8001910 <MX_GPIO_Init+0x1d4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	607b      	str	r3, [r7, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4b52      	ldr	r3, [pc, #328]	; (8001910 <MX_GPIO_Init+0x1d4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a51      	ldr	r2, [pc, #324]	; (8001910 <MX_GPIO_Init+0x1d4>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <MX_GPIO_Init+0x1d4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80017de:	2200      	movs	r2, #0
 80017e0:	21ef      	movs	r1, #239	; 0xef
 80017e2:	484c      	ldr	r0, [pc, #304]	; (8001914 <MX_GPIO_Init+0x1d8>)
 80017e4:	f001 fad4 	bl	8002d90 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|EN_L_Pin|PH_R_Pin|EN_R_Pin 
 80017e8:	2200      	movs	r2, #0
 80017ea:	211f      	movs	r1, #31
 80017ec:	484a      	ldr	r0, [pc, #296]	; (8001918 <MX_GPIO_Init+0x1dc>)
 80017ee:	f001 facf 	bl	8002d90 <HAL_GPIO_WritePin>
                          |P7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P6_Pin|P3_Pin|LEDD_Pin|LEDC_Pin 
 80017f2:	2200      	movs	r2, #0
 80017f4:	f243 2103 	movw	r1, #12803	; 0x3203
 80017f8:	4848      	ldr	r0, [pc, #288]	; (800191c <MX_GPIO_Init+0x1e0>)
 80017fa:	f001 fac9 	bl	8002d90 <HAL_GPIO_WritePin>
                          |LR_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 80017fe:	232f      	movs	r3, #47	; 0x2f
 8001800:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001802:	2301      	movs	r3, #1
 8001804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	2300      	movs	r3, #0
 800180c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	483f      	ldr	r0, [pc, #252]	; (8001914 <MX_GPIO_Init+0x1d8>)
 8001816:	f001 f909 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin EN_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|EN_L_Pin|PH_R_Pin;
 800181a:	2307      	movs	r3, #7
 800181c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001822:	2302      	movs	r3, #2
 8001824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4839      	ldr	r0, [pc, #228]	; (8001918 <MX_GPIO_Init+0x1dc>)
 8001832:	f001 f8fb 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_R_Pin P7_Pin */
  GPIO_InitStruct.Pin = EN_R_Pin|P7_Pin;
 8001836:	2318      	movs	r3, #24
 8001838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183a:	2301      	movs	r3, #1
 800183c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001842:	2300      	movs	r3, #0
 8001844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4832      	ldr	r0, [pc, #200]	; (8001918 <MX_GPIO_Init+0x1dc>)
 800184e:	f001 f8ed 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 8001852:	2340      	movs	r3, #64	; 0x40
 8001854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <MX_GPIO_Init+0x1e4>)
 8001858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800185a:	2302      	movs	r3, #2
 800185c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	482c      	ldr	r0, [pc, #176]	; (8001918 <MX_GPIO_Init+0x1dc>)
 8001866:	f001 f8e1 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : P6_Pin P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P6_Pin|P3_Pin|LR_NSS_Pin;
 800186a:	f240 2303 	movw	r3, #515	; 0x203
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	4826      	ldr	r0, [pc, #152]	; (800191c <MX_GPIO_Init+0x1e0>)
 8001884:	f001 f8d2 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8001888:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001892:	2302      	movs	r3, #2
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	481e      	ldr	r0, [pc, #120]	; (800191c <MX_GPIO_Init+0x1e0>)
 80018a2:	f001 f8c3 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 80018a6:	23c0      	movs	r3, #192	; 0xc0
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018ae:	2302      	movs	r3, #2
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4815      	ldr	r0, [pc, #84]	; (8001914 <MX_GPIO_Init+0x1d8>)
 80018be:	f001 f8b5 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 80018c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	4810      	ldr	r0, [pc, #64]	; (8001918 <MX_GPIO_Init+0x1dc>)
 80018d8:	f001 f8a8 	bl	8002a2c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 80018dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <MX_GPIO_Init+0x1dc>)
 80018f2:	f001 f89b 	bl	8002a2c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2017      	movs	r0, #23
 80018fc:	f000 fcc3 	bl	8002286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001900:	2017      	movs	r0, #23
 8001902:	f000 fcdc 	bl	80022be <HAL_NVIC_EnableIRQ>

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40020800 	.word	0x40020800
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	10110000 	.word	0x10110000

08001924 <Get_TIM2_Instance>:
/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance() { return &hi2c1; }
SPI_HandleTypeDef* Get_SPI1_Instance() { return &hspi1; }
RTC_HandleTypeDef* Get_RTC_Instance() { return &hrtc; }
TIM_HandleTypeDef* Get_TIM2_Instance() { return &htim2; }
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
 8001928:	4b02      	ldr	r3, [pc, #8]	; (8001934 <Get_TIM2_Instance+0x10>)
 800192a:	4618      	mov	r0, r3
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	20000ae4 	.word	0x20000ae4

08001938 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	80fb      	strh	r3, [r7, #6]
	//DIO0 Interrupt function
	if (GPIO_Pin == LR_DIO0_Pin)
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	2b40      	cmp	r3, #64	; 0x40
 8001946:	d101      	bne.n	800194c <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 8001948:	f7ff fbcc 	bl	80010e4 <dio0_IRQ>
	}
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	// motor interrupt in on TIM3
	if (htim->Instance == TIM3)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a04      	ldr	r2, [pc, #16]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		haltMotors();
 8001966:	f7ff fbc5 	bl	80010f4 <haltMotors>
	}

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40000400 	.word	0x40000400

08001978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
	...

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_MspInit+0x4c>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_MspInit+0x4c>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b0d      	ldr	r3, [pc, #52]	; (80019d4 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	603b      	str	r3, [r7, #0]
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b2:	4a08      	ldr	r2, [pc, #32]	; (80019d4 <HAL_MspInit+0x4c>)
 80019b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ba:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c2:	603b      	str	r3, [r7, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800

080019d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_I2C_MspInit+0x84>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d12b      	bne.n	8001a52 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_I2C_MspInit+0x88>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_I2C_MspInit+0x88>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_I2C_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001a16:	23c0      	movs	r3, #192	; 0xc0
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1a:	2312      	movs	r3, #18
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a26:	2304      	movs	r3, #4
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480c      	ldr	r0, [pc, #48]	; (8001a64 <HAL_I2C_MspInit+0x8c>)
 8001a32:	f000 fffb 	bl	8002a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_I2C_MspInit+0x88>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_I2C_MspInit+0x88>)
 8001a40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_I2C_MspInit+0x88>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a52:	bf00      	nop
 8001a54:	3728      	adds	r7, #40	; 0x28
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40005400 	.word	0x40005400
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020400 	.word	0x40020400

08001a68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_RTC_MspInit+0x24>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d102      	bne.n	8001a80 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RTC_MspInit+0x28>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40002800 	.word	0x40002800
 8001a90:	42470e3c 	.word	0x42470e3c

08001a94 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	; 0x28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 0314 	add.w	r3, r7, #20
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a70      	ldr	r2, [pc, #448]	; (8001c74 <HAL_SD_MspInit+0x1e0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	f040 80da 	bne.w	8001c6c <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001ab8:	2300      	movs	r3, #0
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	4b6e      	ldr	r3, [pc, #440]	; (8001c78 <HAL_SD_MspInit+0x1e4>)
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac0:	4a6d      	ldr	r2, [pc, #436]	; (8001c78 <HAL_SD_MspInit+0x1e4>)
 8001ac2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac8:	4b6b      	ldr	r3, [pc, #428]	; (8001c78 <HAL_SD_MspInit+0x1e4>)
 8001aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001acc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	4b67      	ldr	r3, [pc, #412]	; (8001c78 <HAL_SD_MspInit+0x1e4>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	4a66      	ldr	r2, [pc, #408]	; (8001c78 <HAL_SD_MspInit+0x1e4>)
 8001ade:	f043 0304 	orr.w	r3, r3, #4
 8001ae2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae4:	4b64      	ldr	r3, [pc, #400]	; (8001c78 <HAL_SD_MspInit+0x1e4>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af0:	2300      	movs	r3, #0
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	4b60      	ldr	r3, [pc, #384]	; (8001c78 <HAL_SD_MspInit+0x1e4>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	4a5f      	ldr	r2, [pc, #380]	; (8001c78 <HAL_SD_MspInit+0x1e4>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	6313      	str	r3, [r2, #48]	; 0x30
 8001b00:	4b5d      	ldr	r3, [pc, #372]	; (8001c78 <HAL_SD_MspInit+0x1e4>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b0c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b12:	2302      	movs	r3, #2
 8001b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b16:	2301      	movs	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b1e:	230c      	movs	r3, #12
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4854      	ldr	r0, [pc, #336]	; (8001c7c <HAL_SD_MspInit+0x1e8>)
 8001b2a:	f000 ff7f 	bl	8002a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b40:	230c      	movs	r3, #12
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	4619      	mov	r1, r3
 8001b4a:	484c      	ldr	r0, [pc, #304]	; (8001c7c <HAL_SD_MspInit+0x1e8>)
 8001b4c:	f000 ff6e 	bl	8002a2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b50:	2304      	movs	r3, #4
 8001b52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b60:	230c      	movs	r3, #12
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4845      	ldr	r0, [pc, #276]	; (8001c80 <HAL_SD_MspInit+0x1ec>)
 8001b6c:	f000 ff5e 	bl	8002a2c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001b70:	4b44      	ldr	r3, [pc, #272]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001b72:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <HAL_SD_MspInit+0x1f4>)
 8001b74:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001b76:	4b43      	ldr	r3, [pc, #268]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b7c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b84:	4b3f      	ldr	r3, [pc, #252]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b90:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b92:	4b3c      	ldr	r3, [pc, #240]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001b94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b98:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b9a:	4b3a      	ldr	r3, [pc, #232]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001b9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ba0:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001ba2:	4b38      	ldr	r3, [pc, #224]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ba8:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bae:	4b35      	ldr	r3, [pc, #212]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001bb4:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001bba:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001bbc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001bc2:	4b30      	ldr	r3, [pc, #192]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001bc4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001bc8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001bca:	482e      	ldr	r0, [pc, #184]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001bcc:	f000 fb92 	bl	80022f4 <HAL_DMA_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8001bd6:	f7ff fecf 	bl	8001978 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a29      	ldr	r2, [pc, #164]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001bde:	641a      	str	r2, [r3, #64]	; 0x40
 8001be0:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_SD_MspInit+0x1f0>)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001be8:	4a29      	ldr	r2, [pc, #164]	; (8001c90 <HAL_SD_MspInit+0x1fc>)
 8001bea:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001bee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bf2:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bfa:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c06:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c0e:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c16:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c26:	2204      	movs	r2, #4
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001c2a:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001c38:	4b14      	ldr	r3, [pc, #80]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001c40:	4812      	ldr	r0, [pc, #72]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c42:	f000 fb57 	bl	80022f4 <HAL_DMA_Init>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8001c4c:	f7ff fe94 	bl	8001978 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c54:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c56:	4a0d      	ldr	r2, [pc, #52]	; (8001c8c <HAL_SD_MspInit+0x1f8>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2031      	movs	r0, #49	; 0x31
 8001c62:	f000 fb10 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001c66:	2031      	movs	r0, #49	; 0x31
 8001c68:	f000 fb29 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3728      	adds	r7, #40	; 0x28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40012c00 	.word	0x40012c00
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40020800 	.word	0x40020800
 8001c80:	40020c00 	.word	0x40020c00
 8001c84:	20000814 	.word	0x20000814
 8001c88:	40026458 	.word	0x40026458
 8001c8c:	200009a8 	.word	0x200009a8
 8001c90:	400264a0 	.word	0x400264a0

08001c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	; (8001d18 <HAL_SPI_MspInit+0x84>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12b      	bne.n	8001d0e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a17      	ldr	r2, [pc, #92]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a10      	ldr	r2, [pc, #64]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_SPI_MspInit+0x88>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8001cee:	2338      	movs	r3, #56	; 0x38
 8001cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cfe:	2305      	movs	r3, #5
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 0314 	add.w	r3, r7, #20
 8001d06:	4619      	mov	r1, r3
 8001d08:	4805      	ldr	r0, [pc, #20]	; (8001d20 <HAL_SPI_MspInit+0x8c>)
 8001d0a:	f000 fe8f 	bl	8002a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3728      	adds	r7, #40	; 0x28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40013000 	.word	0x40013000
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020400 	.word	0x40020400

08001d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d34:	d10e      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a1f      	ldr	r2, [pc, #124]	; (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
 8001d50:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001d52:	e02e      	b.n	8001db2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_TIM_Base_MspInit+0x9c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d116      	bne.n	8001d8c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	201d      	movs	r0, #29
 8001d80:	f000 fa81 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d84:	201d      	movs	r0, #29
 8001d86:	f000 fa9a 	bl	80022be <HAL_NVIC_EnableIRQ>
}
 8001d8a:	e012      	b.n	8001db2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a0c      	ldr	r2, [pc, #48]	; (8001dc4 <HAL_TIM_Base_MspInit+0xa0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d10d      	bne.n	8001db2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <HAL_TIM_Base_MspInit+0x98>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40000400 	.word	0x40000400
 8001dc4:	40000c00 	.word	0x40000c00

08001dc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08a      	sub	sp, #40	; 0x28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a19      	ldr	r2, [pc, #100]	; (8001e4c <HAL_UART_MspInit+0x84>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d12c      	bne.n	8001e44 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
 8001dee:	4b18      	ldr	r3, [pc, #96]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	4a17      	ldr	r2, [pc, #92]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfa:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_UART_MspInit+0x88>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8001e22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e34:	2307      	movs	r3, #7
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <HAL_UART_MspInit+0x8c>)
 8001e40:	f000 fdf4 	bl	8002a2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40004800 	.word	0x40004800
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020400 	.word	0x40020400

08001e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e66:	b480      	push	{r7}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e6a:	e7fe      	b.n	8001e6a <HardFault_Handler+0x4>

08001e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <MemManage_Handler+0x4>

08001e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <BusFault_Handler+0x4>

08001e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <UsageFault_Handler+0x4>

08001e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eac:	f000 f8ce 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001eb8:	2040      	movs	r0, #64	; 0x40
 8001eba:	f000 ff83 	bl	8002dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ec8:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <TIM3_IRQHandler+0x10>)
 8001eca:	f004 fde9 	bl	8006aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ece:	bf00      	nop
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000948 	.word	0x20000948

08001ed8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001edc:	4802      	ldr	r0, [pc, #8]	; (8001ee8 <SDIO_IRQHandler+0x10>)
 8001ede:	f003 fc3b 	bl	8005758 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	20000a08 	.word	0x20000a08

08001eec <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001ef0:	4802      	ldr	r0, [pc, #8]	; (8001efc <DMA2_Stream3_IRQHandler+0x10>)
 8001ef2:	f000 fb27 	bl	8002544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ef6:	bf00      	nop
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000814 	.word	0x20000814

08001f00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f04:	4802      	ldr	r0, [pc, #8]	; (8001f10 <OTG_FS_IRQHandler+0x10>)
 8001f06:	f001 f9fd 	bl	8003304 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000242c 	.word	0x2000242c

08001f14 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <DMA2_Stream6_IRQHandler+0x10>)
 8001f1a:	f000 fb13 	bl	8002544 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	200009a8 	.word	0x200009a8

08001f28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <SystemInit+0x28>)
 8001f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <SystemInit+0x28>)
 8001f34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f3c:	4b04      	ldr	r3, [pc, #16]	; (8001f50 <SystemInit+0x28>)
 8001f3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f42:	609a      	str	r2, [r3, #8]
#endif
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f8c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f58:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f5a:	e003      	b.n	8001f64 <LoopCopyDataInit>

08001f5c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f5e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f60:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f62:	3104      	adds	r1, #4

08001f64 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f64:	480b      	ldr	r0, [pc, #44]	; (8001f94 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f68:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f6a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f6c:	d3f6      	bcc.n	8001f5c <CopyDataInit>
  ldr  r2, =_sbss
 8001f6e:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f70:	e002      	b.n	8001f78 <LoopFillZerobss>

08001f72 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f72:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f74:	f842 3b04 	str.w	r3, [r2], #4

08001f78 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f7a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f7c:	d3f9      	bcc.n	8001f72 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f7e:	f7ff ffd3 	bl	8001f28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f82:	f00a f891 	bl	800c0a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f86:	f7ff f917 	bl	80011b8 <main>
  bx  lr    
 8001f8a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f8c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f90:	0800fef0 	.word	0x0800fef0
  ldr  r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f98:	20000350 	.word	0x20000350
  ldr  r2, =_sbss
 8001f9c:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 8001fa0:	20002838 	.word	0x20002838

08001fa4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fa4:	e7fe      	b.n	8001fa4 <ADC_IRQHandler>
	...

08001fa8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fac:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_Init+0x40>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	; (8001fe8 <HAL_Init+0x40>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_Init+0x40>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <HAL_Init+0x40>)
 8001fbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a07      	ldr	r2, [pc, #28]	; (8001fe8 <HAL_Init+0x40>)
 8001fca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd0:	2003      	movs	r0, #3
 8001fd2:	f000 f94d 	bl	8002270 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f000 f808 	bl	8001fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fdc:	f7ff fcd4 	bl	8001988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00

08001fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff4:	4b12      	ldr	r3, [pc, #72]	; (8002040 <HAL_InitTick+0x54>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b12      	ldr	r3, [pc, #72]	; (8002044 <HAL_InitTick+0x58>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f965 	bl	80022da <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00e      	b.n	8002038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d80a      	bhi.n	8002036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 f92d 	bl	8002286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800202c:	4a06      	ldr	r2, [pc, #24]	; (8002048 <HAL_InitTick+0x5c>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	20000004 	.word	0x20000004
 8002044:	2000000c 	.word	0x2000000c
 8002048:	20000008 	.word	0x20000008

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	; (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	2000000c 	.word	0x2000000c
 8002070:	20000b24 	.word	0x20000b24

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	; (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	20000b24 	.word	0x20000b24

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a6:	4b09      	ldr	r3, [pc, #36]	; (80020cc <HAL_Delay+0x40>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020b2:	bf00      	nop
 80020b4:	f7ff ffde 	bl	8002074 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	bf00      	nop
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000000c 	.word	0x2000000c

080020d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020e6:	68ba      	ldr	r2, [r7, #8]
 80020e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020ec:	4013      	ands	r3, r2
 80020ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <__NVIC_SetPriorityGrouping+0x44>)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	60d3      	str	r3, [r2, #12]
}
 8002108:	bf00      	nop
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800211c:	4b04      	ldr	r3, [pc, #16]	; (8002130 <__NVIC_GetPriorityGrouping+0x18>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	0a1b      	lsrs	r3, r3, #8
 8002122:	f003 0307 	and.w	r3, r3, #7
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00

08002134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002142:	2b00      	cmp	r3, #0
 8002144:	db0b      	blt.n	800215e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	f003 021f 	and.w	r2, r3, #31
 800214c:	4907      	ldr	r1, [pc, #28]	; (800216c <__NVIC_EnableIRQ+0x38>)
 800214e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002152:	095b      	lsrs	r3, r3, #5
 8002154:	2001      	movs	r0, #1
 8002156:	fa00 f202 	lsl.w	r2, r0, r2
 800215a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000e100 	.word	0xe000e100

08002170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	6039      	str	r1, [r7, #0]
 800217a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db0a      	blt.n	800219a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b2da      	uxtb	r2, r3
 8002188:	490c      	ldr	r1, [pc, #48]	; (80021bc <__NVIC_SetPriority+0x4c>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	0112      	lsls	r2, r2, #4
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	440b      	add	r3, r1
 8002194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002198:	e00a      	b.n	80021b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4908      	ldr	r1, [pc, #32]	; (80021c0 <__NVIC_SetPriority+0x50>)
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	3b04      	subs	r3, #4
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	440b      	add	r3, r1
 80021ae:	761a      	strb	r2, [r3, #24]
}
 80021b0:	bf00      	nop
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000e100 	.word	0xe000e100
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b089      	sub	sp, #36	; 0x24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	f1c3 0307 	rsb	r3, r3, #7
 80021de:	2b04      	cmp	r3, #4
 80021e0:	bf28      	it	cs
 80021e2:	2304      	movcs	r3, #4
 80021e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	3304      	adds	r3, #4
 80021ea:	2b06      	cmp	r3, #6
 80021ec:	d902      	bls.n	80021f4 <NVIC_EncodePriority+0x30>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3b03      	subs	r3, #3
 80021f2:	e000      	b.n	80021f6 <NVIC_EncodePriority+0x32>
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43d9      	mvns	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	4313      	orrs	r3, r2
         );
}
 800221e:	4618      	mov	r0, r3
 8002220:	3724      	adds	r7, #36	; 0x24
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
	...

0800222c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3b01      	subs	r3, #1
 8002238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800223c:	d301      	bcc.n	8002242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800223e:	2301      	movs	r3, #1
 8002240:	e00f      	b.n	8002262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <SysTick_Config+0x40>)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3b01      	subs	r3, #1
 8002248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224a:	210f      	movs	r1, #15
 800224c:	f04f 30ff 	mov.w	r0, #4294967295
 8002250:	f7ff ff8e 	bl	8002170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002254:	4b05      	ldr	r3, [pc, #20]	; (800226c <SysTick_Config+0x40>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <SysTick_Config+0x40>)
 800225c:	2207      	movs	r2, #7
 800225e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000e010 	.word	0xe000e010

08002270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff29 	bl	80020d0 <__NVIC_SetPriorityGrouping>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002286:	b580      	push	{r7, lr}
 8002288:	b086      	sub	sp, #24
 800228a:	af00      	add	r7, sp, #0
 800228c:	4603      	mov	r3, r0
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002298:	f7ff ff3e 	bl	8002118 <__NVIC_GetPriorityGrouping>
 800229c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68b9      	ldr	r1, [r7, #8]
 80022a2:	6978      	ldr	r0, [r7, #20]
 80022a4:	f7ff ff8e 	bl	80021c4 <NVIC_EncodePriority>
 80022a8:	4602      	mov	r2, r0
 80022aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff ff5d 	bl	8002170 <__NVIC_SetPriority>
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b082      	sub	sp, #8
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff31 	bl	8002134 <__NVIC_EnableIRQ>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b082      	sub	sp, #8
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff ffa2 	bl	800222c <SysTick_Config>
 80022e8:	4603      	mov	r3, r0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002300:	f7ff feb8 	bl	8002074 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e099      	b.n	8002444 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002330:	e00f      	b.n	8002352 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002332:	f7ff fe9f 	bl	8002074 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b05      	cmp	r3, #5
 800233e:	d908      	bls.n	8002352 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2203      	movs	r2, #3
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e078      	b.n	8002444 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e8      	bne.n	8002332 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	4b38      	ldr	r3, [pc, #224]	; (800244c <HAL_DMA_Init+0x158>)
 800236c:	4013      	ands	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800237e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002396:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a1b      	ldr	r3, [r3, #32]
 800239c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d107      	bne.n	80023bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	4313      	orrs	r3, r2
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f023 0307 	bic.w	r3, r3, #7
 80023d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d117      	bne.n	8002416 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 fa9d 	bl	8002938 <DMA_CheckFifoParam>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2240      	movs	r2, #64	; 0x40
 8002408:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002412:	2301      	movs	r3, #1
 8002414:	e016      	b.n	8002444 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fa54 	bl	80028cc <DMA_CalcBaseAndBitshift>
 8002424:	4603      	mov	r3, r0
 8002426:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242c:	223f      	movs	r2, #63	; 0x3f
 800242e:	409a      	lsls	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2201      	movs	r2, #1
 800243e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	f010803f 	.word	0xf010803f

08002450 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002466:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800246e:	2b01      	cmp	r3, #1
 8002470:	d101      	bne.n	8002476 <HAL_DMA_Start_IT+0x26>
 8002472:	2302      	movs	r3, #2
 8002474:	e040      	b.n	80024f8 <HAL_DMA_Start_IT+0xa8>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b01      	cmp	r3, #1
 8002488:	d12f      	bne.n	80024ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2202      	movs	r2, #2
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68b9      	ldr	r1, [r7, #8]
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f9e6 	bl	8002870 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	223f      	movs	r2, #63	; 0x3f
 80024aa:	409a      	lsls	r2, r3
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0216 	orr.w	r2, r2, #22
 80024be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f042 0208 	orr.w	r2, r2, #8
 80024d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	e005      	b.n	80024f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024f2:	2302      	movs	r3, #2
 80024f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d004      	beq.n	800251e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2280      	movs	r2, #128	; 0x80
 8002518:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e00c      	b.n	8002538 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2205      	movs	r2, #5
 8002522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0201 	bic.w	r2, r2, #1
 8002534:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002550:	4b92      	ldr	r3, [pc, #584]	; (800279c <HAL_DMA_IRQHandler+0x258>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a92      	ldr	r2, [pc, #584]	; (80027a0 <HAL_DMA_IRQHandler+0x25c>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0a9b      	lsrs	r3, r3, #10
 800255c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256e:	2208      	movs	r2, #8
 8002570:	409a      	lsls	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4013      	ands	r3, r2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d01a      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0204 	bic.w	r2, r2, #4
 8002596:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259c:	2208      	movs	r2, #8
 800259e:	409a      	lsls	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a8:	f043 0201 	orr.w	r2, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	2201      	movs	r2, #1
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d012      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00b      	beq.n	80025e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d2:	2201      	movs	r2, #1
 80025d4:	409a      	lsls	r2, r3
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	f043 0202 	orr.w	r2, r3, #2
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ea:	2204      	movs	r2, #4
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d012      	beq.n	800261c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00b      	beq.n	800261c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	2204      	movs	r2, #4
 800260a:	409a      	lsls	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f043 0204 	orr.w	r2, r3, #4
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	2210      	movs	r2, #16
 8002622:	409a      	lsls	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4013      	ands	r3, r2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d043      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d03c      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2210      	movs	r2, #16
 8002640:	409a      	lsls	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d018      	beq.n	8002686 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d108      	bne.n	8002674 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d024      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	4798      	blx	r3
 8002672:	e01f      	b.n	80026b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01b      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
 8002684:	e016      	b.n	80026b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d107      	bne.n	80026a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0208 	bic.w	r2, r2, #8
 80026a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d003      	beq.n	80026b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b8:	2220      	movs	r2, #32
 80026ba:	409a      	lsls	r2, r3
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4013      	ands	r3, r2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	f000 808e 	beq.w	80027e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 8086 	beq.w	80027e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026da:	2220      	movs	r2, #32
 80026dc:	409a      	lsls	r2, r3
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d136      	bne.n	800275c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0216 	bic.w	r2, r2, #22
 80026fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695a      	ldr	r2, [r3, #20]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800270c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <HAL_DMA_IRQHandler+0x1da>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271a:	2b00      	cmp	r3, #0
 800271c:	d007      	beq.n	800272e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0208 	bic.w	r2, r2, #8
 800272c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002732:	223f      	movs	r2, #63	; 0x3f
 8002734:	409a      	lsls	r2, r3
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274e:	2b00      	cmp	r3, #0
 8002750:	d07d      	beq.n	800284e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	4798      	blx	r3
        }
        return;
 800275a:	e078      	b.n	800284e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01c      	beq.n	80027a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d108      	bne.n	800278a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277c:	2b00      	cmp	r3, #0
 800277e:	d030      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	4798      	blx	r3
 8002788:	e02b      	b.n	80027e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278e:	2b00      	cmp	r3, #0
 8002790:	d027      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
 800279a:	e022      	b.n	80027e2 <HAL_DMA_IRQHandler+0x29e>
 800279c:	20000004 	.word	0x20000004
 80027a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10f      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0210 	bic.w	r2, r2, #16
 80027c0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d032      	beq.n	8002850 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d022      	beq.n	800283c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2205      	movs	r2, #5
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	429a      	cmp	r2, r3
 8002818:	d307      	bcc.n	800282a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f2      	bne.n	800280e <HAL_DMA_IRQHandler+0x2ca>
 8002828:	e000      	b.n	800282c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800282a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	4798      	blx	r3
 800284c:	e000      	b.n	8002850 <HAL_DMA_IRQHandler+0x30c>
        return;
 800284e:	bf00      	nop
    }
  }
}
 8002850:	3718      	adds	r7, #24
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop

08002858 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800288c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b40      	cmp	r3, #64	; 0x40
 800289c:	d108      	bne.n	80028b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028ae:	e007      	b.n	80028c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]
}
 80028c0:	bf00      	nop
 80028c2:	3714      	adds	r7, #20
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3b10      	subs	r3, #16
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <DMA_CalcBaseAndBitshift+0x64>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028e6:	4a13      	ldr	r2, [pc, #76]	; (8002934 <DMA_CalcBaseAndBitshift+0x68>)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d909      	bls.n	800290e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002902:	f023 0303 	bic.w	r3, r3, #3
 8002906:	1d1a      	adds	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	659a      	str	r2, [r3, #88]	; 0x58
 800290c:	e007      	b.n	800291e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	aaaaaaab 	.word	0xaaaaaaab
 8002934:	0800fc0c 	.word	0x0800fc0c

08002938 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11f      	bne.n	8002992 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d855      	bhi.n	8002a04 <DMA_CheckFifoParam+0xcc>
 8002958:	a201      	add	r2, pc, #4	; (adr r2, 8002960 <DMA_CheckFifoParam+0x28>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002971 	.word	0x08002971
 8002964:	08002983 	.word	0x08002983
 8002968:	08002971 	.word	0x08002971
 800296c:	08002a05 	.word	0x08002a05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d045      	beq.n	8002a08 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002980:	e042      	b.n	8002a08 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002986:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800298a:	d13f      	bne.n	8002a0c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002990:	e03c      	b.n	8002a0c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299a:	d121      	bne.n	80029e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d836      	bhi.n	8002a10 <DMA_CheckFifoParam+0xd8>
 80029a2:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <DMA_CheckFifoParam+0x70>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029bf 	.word	0x080029bf
 80029b0:	080029b9 	.word	0x080029b9
 80029b4:	080029d1 	.word	0x080029d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      break;
 80029bc:	e02f      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d024      	beq.n	8002a14 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ce:	e021      	b.n	8002a14 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029d8:	d11e      	bne.n	8002a18 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029de:	e01b      	b.n	8002a18 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d902      	bls.n	80029ec <DMA_CheckFifoParam+0xb4>
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d003      	beq.n	80029f2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029ea:	e018      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      break;
 80029f0:	e015      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00e      	beq.n	8002a1c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	73fb      	strb	r3, [r7, #15]
      break;
 8002a02:	e00b      	b.n	8002a1c <DMA_CheckFifoParam+0xe4>
      break;
 8002a04:	bf00      	nop
 8002a06:	e00a      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      break;
 8002a08:	bf00      	nop
 8002a0a:	e008      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      break;
 8002a0c:	bf00      	nop
 8002a0e:	e006      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      break;
 8002a10:	bf00      	nop
 8002a12:	e004      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      break;
 8002a14:	bf00      	nop
 8002a16:	e002      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      break;   
 8002a18:	bf00      	nop
 8002a1a:	e000      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      break;
 8002a1c:	bf00      	nop
    }
  } 
  
  return status; 
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a42:	2300      	movs	r3, #0
 8002a44:	61fb      	str	r3, [r7, #28]
 8002a46:	e16b      	b.n	8002d20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a48:	2201      	movs	r2, #1
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f040 815a 	bne.w	8002d1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d00b      	beq.n	8002a86 <HAL_GPIO_Init+0x5a>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a7a:	2b11      	cmp	r3, #17
 8002a7c:	d003      	beq.n	8002a86 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b12      	cmp	r3, #18
 8002a84:	d130      	bne.n	8002ae8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	005b      	lsls	r3, r3, #1
 8002a90:	2203      	movs	r2, #3
 8002a92:	fa02 f303 	lsl.w	r3, r2, r3
 8002a96:	43db      	mvns	r3, r3
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002abc:	2201      	movs	r2, #1
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	091b      	lsrs	r3, r3, #4
 8002ad2:	f003 0201 	and.w	r2, r3, #1
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d003      	beq.n	8002b28 <HAL_GPIO_Init+0xfc>
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b12      	cmp	r3, #18
 8002b26:	d123      	bne.n	8002b70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	08da      	lsrs	r2, r3, #3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3208      	adds	r2, #8
 8002b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	220f      	movs	r2, #15
 8002b40:	fa02 f303 	lsl.w	r3, r2, r3
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	08da      	lsrs	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3208      	adds	r2, #8
 8002b6a:	69b9      	ldr	r1, [r7, #24]
 8002b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	4013      	ands	r3, r2
 8002b86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f003 0203 	and.w	r2, r3, #3
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80b4 	beq.w	8002d1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b5f      	ldr	r3, [pc, #380]	; (8002d34 <HAL_GPIO_Init+0x308>)
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bba:	4a5e      	ldr	r2, [pc, #376]	; (8002d34 <HAL_GPIO_Init+0x308>)
 8002bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc2:	4b5c      	ldr	r3, [pc, #368]	; (8002d34 <HAL_GPIO_Init+0x308>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bce:	4a5a      	ldr	r2, [pc, #360]	; (8002d38 <HAL_GPIO_Init+0x30c>)
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	089b      	lsrs	r3, r3, #2
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	220f      	movs	r2, #15
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a51      	ldr	r2, [pc, #324]	; (8002d3c <HAL_GPIO_Init+0x310>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d02b      	beq.n	8002c52 <HAL_GPIO_Init+0x226>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <HAL_GPIO_Init+0x314>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d025      	beq.n	8002c4e <HAL_GPIO_Init+0x222>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4f      	ldr	r2, [pc, #316]	; (8002d44 <HAL_GPIO_Init+0x318>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <HAL_GPIO_Init+0x21e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4e      	ldr	r2, [pc, #312]	; (8002d48 <HAL_GPIO_Init+0x31c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d019      	beq.n	8002c46 <HAL_GPIO_Init+0x21a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4d      	ldr	r2, [pc, #308]	; (8002d4c <HAL_GPIO_Init+0x320>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x216>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4c      	ldr	r2, [pc, #304]	; (8002d50 <HAL_GPIO_Init+0x324>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x212>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4b      	ldr	r2, [pc, #300]	; (8002d54 <HAL_GPIO_Init+0x328>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x20e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4a      	ldr	r2, [pc, #296]	; (8002d58 <HAL_GPIO_Init+0x32c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x20a>
 8002c32:	2307      	movs	r3, #7
 8002c34:	e00e      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c36:	2308      	movs	r3, #8
 8002c38:	e00c      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c3a:	2306      	movs	r3, #6
 8002c3c:	e00a      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c3e:	2305      	movs	r3, #5
 8002c40:	e008      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c42:	2304      	movs	r3, #4
 8002c44:	e006      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c46:	2303      	movs	r3, #3
 8002c48:	e004      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e002      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <HAL_GPIO_Init+0x228>
 8002c52:	2300      	movs	r3, #0
 8002c54:	69fa      	ldr	r2, [r7, #28]
 8002c56:	f002 0203 	and.w	r2, r2, #3
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	4093      	lsls	r3, r2
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c64:	4934      	ldr	r1, [pc, #208]	; (8002d38 <HAL_GPIO_Init+0x30c>)
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	3302      	adds	r3, #2
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c72:	4b3a      	ldr	r3, [pc, #232]	; (8002d5c <HAL_GPIO_Init+0x330>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c96:	4a31      	ldr	r2, [pc, #196]	; (8002d5c <HAL_GPIO_Init+0x330>)
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <HAL_GPIO_Init+0x330>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <HAL_GPIO_Init+0x330>)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cc6:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <HAL_GPIO_Init+0x330>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cea:	4a1c      	ldr	r2, [pc, #112]	; (8002d5c <HAL_GPIO_Init+0x330>)
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <HAL_GPIO_Init+0x330>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d14:	4a11      	ldr	r2, [pc, #68]	; (8002d5c <HAL_GPIO_Init+0x330>)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	61fb      	str	r3, [r7, #28]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	2b0f      	cmp	r3, #15
 8002d24:	f67f ae90 	bls.w	8002a48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3724      	adds	r7, #36	; 0x24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	40023800 	.word	0x40023800
 8002d38:	40013800 	.word	0x40013800
 8002d3c:	40020000 	.word	0x40020000
 8002d40:	40020400 	.word	0x40020400
 8002d44:	40020800 	.word	0x40020800
 8002d48:	40020c00 	.word	0x40020c00
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40021400 	.word	0x40021400
 8002d54:	40021800 	.word	0x40021800
 8002d58:	40021c00 	.word	0x40021c00
 8002d5c:	40013c00 	.word	0x40013c00

08002d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e001      	b.n	8002d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dac:	e003      	b.n	8002db6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dae:	887b      	ldrh	r3, [r7, #2]
 8002db0:	041a      	lsls	r2, r3, #16
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	619a      	str	r2, [r3, #24]
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
	...

08002dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	4603      	mov	r3, r0
 8002dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dda:	4a05      	ldr	r2, [pc, #20]	; (8002df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002de0:	88fb      	ldrh	r3, [r7, #6]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe fda8 	bl	8001938 <HAL_GPIO_EXTI_Callback>
  }
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40013c00 	.word	0x40013c00

08002df4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e11f      	b.n	8003046 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d106      	bne.n	8002e20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7fe fddc 	bl	80019d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2224      	movs	r2, #36	; 0x24
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0201 	bic.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e58:	f001 fea2 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8002e5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a7b      	ldr	r2, [pc, #492]	; (8003050 <HAL_I2C_Init+0x25c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d807      	bhi.n	8002e78 <HAL_I2C_Init+0x84>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_I2C_Init+0x260>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e006      	b.n	8002e86 <HAL_I2C_Init+0x92>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_I2C_Init+0x264>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf94      	ite	ls
 8002e80:	2301      	movls	r3, #1
 8002e82:	2300      	movhi	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0db      	b.n	8003046 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a72      	ldr	r2, [pc, #456]	; (800305c <HAL_I2C_Init+0x268>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0c9b      	lsrs	r3, r3, #18
 8002e98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a64      	ldr	r2, [pc, #400]	; (8003050 <HAL_I2C_Init+0x25c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d802      	bhi.n	8002ec8 <HAL_I2C_Init+0xd4>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	e009      	b.n	8002edc <HAL_I2C_Init+0xe8>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	4a63      	ldr	r2, [pc, #396]	; (8003060 <HAL_I2C_Init+0x26c>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	3301      	adds	r3, #1
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4956      	ldr	r1, [pc, #344]	; (8003050 <HAL_I2C_Init+0x25c>)
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	d80d      	bhi.n	8002f18 <HAL_I2C_Init+0x124>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e59      	subs	r1, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	bf38      	it	cc
 8002f14:	2304      	movcc	r3, #4
 8002f16:	e04f      	b.n	8002fb8 <HAL_I2C_Init+0x1c4>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d111      	bne.n	8002f44 <HAL_I2C_Init+0x150>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e012      	b.n	8002f6a <HAL_I2C_Init+0x176>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x17e>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e022      	b.n	8002fb8 <HAL_I2C_Init+0x1c4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10e      	bne.n	8002f98 <HAL_I2C_Init+0x1a4>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e58      	subs	r0, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	440b      	add	r3, r1
 8002f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f96:	e00f      	b.n	8002fb8 <HAL_I2C_Init+0x1c4>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	6809      	ldr	r1, [r1, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6911      	ldr	r1, [r2, #16]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68d2      	ldr	r2, [r2, #12]
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	000186a0 	.word	0x000186a0
 8003054:	001e847f 	.word	0x001e847f
 8003058:	003d08ff 	.word	0x003d08ff
 800305c:	431bde83 	.word	0x431bde83
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003066:	b08f      	sub	sp, #60	; 0x3c
 8003068:	af0a      	add	r7, sp, #40	; 0x28
 800306a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e10f      	b.n	8003296 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f008 fd09 	bl	800baa8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2203      	movs	r2, #3
 800309a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d102      	bne.n	80030b0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f005 fb0e 	bl	80086d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	687e      	ldr	r6, [r7, #4]
 80030c2:	466d      	mov	r5, sp
 80030c4:	f106 0410 	add.w	r4, r6, #16
 80030c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030d0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80030d4:	e885 0003 	stmia.w	r5, {r0, r1}
 80030d8:	1d33      	adds	r3, r6, #4
 80030da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030dc:	6838      	ldr	r0, [r7, #0]
 80030de:	f005 f9e5 	bl	80084ac <USB_CoreInit>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d0      	b.n	8003296 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f005 fafc 	bl	80086f8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003100:	2300      	movs	r3, #0
 8003102:	73fb      	strb	r3, [r7, #15]
 8003104:	e04a      	b.n	800319c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	333d      	adds	r3, #61	; 0x3d
 8003116:	2201      	movs	r2, #1
 8003118:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	333c      	adds	r3, #60	; 0x3c
 800312a:	7bfa      	ldrb	r2, [r7, #15]
 800312c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800312e:	7bfa      	ldrb	r2, [r7, #15]
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	b298      	uxth	r0, r3
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3342      	adds	r3, #66	; 0x42
 8003142:	4602      	mov	r2, r0
 8003144:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	333f      	adds	r3, #63	; 0x3f
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	6879      	ldr	r1, [r7, #4]
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	1a9b      	subs	r3, r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	3344      	adds	r3, #68	; 0x44
 800316a:	2200      	movs	r2, #0
 800316c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	3348      	adds	r3, #72	; 0x48
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3350      	adds	r3, #80	; 0x50
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003196:	7bfb      	ldrb	r3, [r7, #15]
 8003198:	3301      	adds	r3, #1
 800319a:	73fb      	strb	r3, [r7, #15]
 800319c:	7bfa      	ldrb	r2, [r7, #15]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d3af      	bcc.n	8003106 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]
 80031aa:	e044      	b.n	8003236 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	6879      	ldr	r1, [r7, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	1a9b      	subs	r3, r3, r2
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	440b      	add	r3, r1
 80031ba:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031c2:	7bfa      	ldrb	r2, [r7, #15]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80031d4:	7bfa      	ldrb	r2, [r7, #15]
 80031d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031d8:	7bfa      	ldrb	r2, [r7, #15]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	00db      	lsls	r3, r3, #3
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80031ea:	2200      	movs	r2, #0
 80031ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031ee:	7bfa      	ldrb	r2, [r7, #15]
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	4613      	mov	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	1a9b      	subs	r3, r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003204:	7bfa      	ldrb	r2, [r7, #15]
 8003206:	6879      	ldr	r1, [r7, #4]
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	1a9b      	subs	r3, r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	440b      	add	r3, r1
 8003212:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800321a:	7bfa      	ldrb	r2, [r7, #15]
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	1a9b      	subs	r3, r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	3301      	adds	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
 8003236:	7bfa      	ldrb	r2, [r7, #15]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d3b5      	bcc.n	80031ac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	687e      	ldr	r6, [r7, #4]
 8003248:	466d      	mov	r5, sp
 800324a:	f106 0410 	add.w	r4, r6, #16
 800324e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003250:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003256:	e894 0003 	ldmia.w	r4, {r0, r1}
 800325a:	e885 0003 	stmia.w	r5, {r0, r1}
 800325e:	1d33      	adds	r3, r6, #4
 8003260:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003262:	6838      	ldr	r0, [r7, #0]
 8003264:	f005 fa72 	bl	800874c <USB_DevInit>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2202      	movs	r2, #2
 8003272:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e00d      	b.n	8003296 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2201      	movs	r2, #1
 8003286:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f006 fa67 	bl	8009762 <USB_DevDisconnect>

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800329e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b084      	sub	sp, #16
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_PCD_Start+0x1c>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e020      	b.n	80032fc <HAL_PCD_Start+0x5e>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d109      	bne.n	80032de <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d005      	beq.n	80032de <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4618      	mov	r0, r3
 80032e4:	f006 fa25 	bl	8009732 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f005 f9e1 	bl	80086b4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003304:	b590      	push	{r4, r7, lr}
 8003306:	b08d      	sub	sp, #52	; 0x34
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4618      	mov	r0, r3
 800331c:	f006 facc 	bl	80098b8 <USB_GetMode>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	f040 838e 	bne.w	8003a44 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f006 fa30 	bl	8009792 <USB_ReadInterrupts>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	f000 8384 	beq.w	8003a42 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4618      	mov	r0, r3
 8003340:	f006 fa27 	bl	8009792 <USB_ReadInterrupts>
 8003344:	4603      	mov	r3, r0
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b02      	cmp	r3, #2
 800334c:	d107      	bne.n	800335e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	695a      	ldr	r2, [r3, #20]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f002 0202 	and.w	r2, r2, #2
 800335c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f006 fa15 	bl	8009792 <USB_ReadInterrupts>
 8003368:	4603      	mov	r3, r0
 800336a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003372:	d17b      	bne.n	800346c <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4618      	mov	r0, r3
 800337e:	f006 fa1b 	bl	80097b8 <USB_ReadDevAllOutEpInterrupt>
 8003382:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003384:	e06f      	b.n	8003466 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d064      	beq.n	800345a <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	4611      	mov	r1, r2
 800339a:	4618      	mov	r0, r3
 800339c:	f006 fa40 	bl	8009820 <USB_ReadDevOutEPInterrupt>
 80033a0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00c      	beq.n	80033c6 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	461a      	mov	r2, r3
 80033ba:	2301      	movs	r3, #1
 80033bc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fe0d 	bl	8003fe0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	f003 0308 	and.w	r3, r3, #8
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00c      	beq.n	80033ea <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80033d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 ff0c 	bl	80041f0 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e4:	461a      	mov	r2, r3
 80033e6:	2308      	movs	r3, #8
 80033e8:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 0310 	and.w	r3, r3, #16
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003400:	461a      	mov	r2, r3
 8003402:	2310      	movs	r3, #16
 8003404:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	f003 0320 	and.w	r3, r3, #32
 800340c:	2b00      	cmp	r3, #0
 800340e:	d015      	beq.n	800343c <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d108      	bne.n	800342a <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003422:	461a      	mov	r2, r3
 8003424:	2101      	movs	r1, #1
 8003426:	f006 fa8b 	bl	8009940 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003436:	461a      	mov	r2, r3
 8003438:	2320      	movs	r3, #32
 800343a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003452:	461a      	mov	r2, r3
 8003454:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003458:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345c:	3301      	adds	r3, #1
 800345e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003462:	085b      	lsrs	r3, r3, #1
 8003464:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	d18c      	bne.n	8003386 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f006 f98e 	bl	8009792 <USB_ReadInterrupts>
 8003476:	4603      	mov	r3, r0
 8003478:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800347c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003480:	f040 80c4 	bne.w	800360c <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4618      	mov	r0, r3
 800348a:	f006 f9af 	bl	80097ec <USB_ReadDevAllInEpInterrupt>
 800348e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003490:	2300      	movs	r3, #0
 8003492:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003494:	e0b6      	b.n	8003604 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80ab 	beq.w	80035f8 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	b2d2      	uxtb	r2, r2
 80034aa:	4611      	mov	r1, r2
 80034ac:	4618      	mov	r0, r3
 80034ae:	f006 f9d5 	bl	800985c <USB_ReadDevInEPInterrupt>
 80034b2:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d05b      	beq.n	8003576 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	2201      	movs	r2, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	69f9      	ldr	r1, [r7, #28]
 80034da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034de:	4013      	ands	r3, r2
 80034e0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ee:	461a      	mov	r2, r3
 80034f0:	2301      	movs	r3, #1
 80034f2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d11b      	bne.n	8003534 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3348      	adds	r3, #72	; 0x48
 800350c:	6819      	ldr	r1, [r3, #0]
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4403      	add	r3, r0
 800351c:	3344      	adds	r3, #68	; 0x44
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4419      	add	r1, r3
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	4403      	add	r3, r0
 8003530:	3348      	adds	r3, #72	; 0x48
 8003532:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	b2db      	uxtb	r3, r3
 8003538:	4619      	mov	r1, r3
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f008 fb35 	bl	800bbaa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d116      	bne.n	8003576 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d113      	bne.n	8003576 <HAL_PCD_IRQHandler+0x272>
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	3350      	adds	r3, #80	; 0x50
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d108      	bne.n	8003576 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6818      	ldr	r0, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800356e:	461a      	mov	r2, r3
 8003570:	2101      	movs	r1, #1
 8003572:	f006 f9e5 	bl	8009940 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	015a      	lsls	r2, r3, #5
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	4413      	add	r3, r2
 8003588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800358c:	461a      	mov	r2, r3
 800358e:	2308      	movs	r3, #8
 8003590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d008      	beq.n	80035ae <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a8:	461a      	mov	r2, r3
 80035aa:	2310      	movs	r3, #16
 80035ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	015a      	lsls	r2, r3, #5
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	4413      	add	r3, r2
 80035c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c4:	461a      	mov	r2, r3
 80035c6:	2340      	movs	r3, #64	; 0x40
 80035c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e0:	461a      	mov	r2, r3
 80035e2:	2302      	movs	r3, #2
 80035e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80035f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fc67 	bl	8003ec6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	3301      	adds	r3, #1
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003606:	2b00      	cmp	r3, #0
 8003608:	f47f af45 	bne.w	8003496 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4618      	mov	r0, r3
 8003612:	f006 f8be 	bl	8009792 <USB_ReadInterrupts>
 8003616:	4603      	mov	r3, r0
 8003618:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800361c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003620:	d122      	bne.n	8003668 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003630:	f023 0301 	bic.w	r3, r3, #1
 8003634:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800363c:	2b01      	cmp	r3, #1
 800363e:	d108      	bne.n	8003652 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003648:	2100      	movs	r1, #0
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fe88 	bl	8004360 <HAL_PCDEx_LPM_Callback>
 8003650:	e002      	b.n	8003658 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f008 fb20 	bl	800bc98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f006 f890 	bl	8009792 <USB_ReadInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367c:	d112      	bne.n	80036a4 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d102      	bne.n	8003694 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f008 fadc 	bl	800bc4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80036a2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f006 f872 	bl	8009792 <USB_ReadInterrupts>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b8:	f040 80a7 	bne.w	800380a <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	69fa      	ldr	r2, [r7, #28]
 80036c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ca:	f023 0301 	bic.w	r3, r3, #1
 80036ce:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2110      	movs	r1, #16
 80036d6:	4618      	mov	r0, r3
 80036d8:	f005 f9aa 	bl	8008a30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036dc:	2300      	movs	r3, #0
 80036de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e0:	e036      	b.n	8003750 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036ee:	461a      	mov	r2, r3
 80036f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036f4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003706:	0151      	lsls	r1, r2, #5
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	440a      	add	r2, r1
 800370c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003710:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003714:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003718:	015a      	lsls	r2, r3, #5
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	4413      	add	r3, r2
 800371e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003722:	461a      	mov	r2, r3
 8003724:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003728:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800372a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	440a      	add	r2, r1
 8003740:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003744:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003748:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	3301      	adds	r3, #1
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003756:	429a      	cmp	r2, r3
 8003758:	d3c3      	bcc.n	80036e2 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003768:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800376c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	2b00      	cmp	r3, #0
 8003774:	d016      	beq.n	80037a4 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003786:	f043 030b 	orr.w	r3, r3, #11
 800378a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800379c:	f043 030b 	orr.w	r3, r3, #11
 80037a0:	6453      	str	r3, [r2, #68]	; 0x44
 80037a2:	e015      	b.n	80037d0 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037c2:	691b      	ldr	r3, [r3, #16]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ca:	f043 030b 	orr.w	r3, r3, #11
 80037ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80037f4:	461a      	mov	r2, r3
 80037f6:	f006 f8a3 	bl	8009940 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f005 ffbf 	bl	8009792 <USB_ReadInterrupts>
 8003814:	4603      	mov	r3, r0
 8003816:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800381a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381e:	d124      	bne.n	800386a <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f006 f855 	bl	80098d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f005 f95f 	bl	8008af2 <USB_GetDevSpeed>
 8003834:	4603      	mov	r3, r0
 8003836:	461a      	mov	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681c      	ldr	r4, [r3, #0]
 8003840:	f001 f9a2 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8003844:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	4620      	mov	r0, r4
 8003850:	f004 fe8e 	bl	8008570 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f008 f9d0 	bl	800bbfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003868:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f005 ff8f 	bl	8009792 <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b10      	cmp	r3, #16
 800387c:	d161      	bne.n	8003942 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	699a      	ldr	r2, [r3, #24]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0210 	bic.w	r2, r2, #16
 800388c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800388e:	6a3b      	ldr	r3, [r7, #32]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f003 020f 	and.w	r2, r3, #15
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	3304      	adds	r3, #4
 80038ac:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	0c5b      	lsrs	r3, r3, #17
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d124      	bne.n	8003904 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d035      	beq.n	8003932 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	091b      	lsrs	r3, r3, #4
 80038ce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	461a      	mov	r2, r3
 80038d8:	6a38      	ldr	r0, [r7, #32]
 80038da:	f005 fe07 	bl	80094ec <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	091b      	lsrs	r3, r3, #4
 80038e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038ea:	441a      	add	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	091b      	lsrs	r3, r3, #4
 80038f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038fc:	441a      	add	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	619a      	str	r2, [r3, #24]
 8003902:	e016      	b.n	8003932 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	0c5b      	lsrs	r3, r3, #17
 8003908:	f003 030f 	and.w	r3, r3, #15
 800390c:	2b06      	cmp	r3, #6
 800390e:	d110      	bne.n	8003932 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003916:	2208      	movs	r2, #8
 8003918:	4619      	mov	r1, r3
 800391a:	6a38      	ldr	r0, [r7, #32]
 800391c:	f005 fde6 	bl	80094ec <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800392c:	441a      	add	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0210 	orr.w	r2, r2, #16
 8003940:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f005 ff23 	bl	8009792 <USB_ReadInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b08      	cmp	r3, #8
 8003954:	d10a      	bne.n	800396c <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f008 f941 	bl	800bbde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f002 0208 	and.w	r2, r2, #8
 800396a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f005 ff0e 	bl	8009792 <USB_ReadInterrupts>
 8003976:	4603      	mov	r3, r0
 8003978:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800397c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003980:	d10f      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f008 f9a3 	bl	800bcd8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80039a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f005 fef3 	bl	8009792 <USB_ReadInterrupts>
 80039ac:	4603      	mov	r3, r0
 80039ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039b6:	d10f      	bne.n	80039d8 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	4619      	mov	r1, r3
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f008 f976 	bl	800bcb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80039d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4618      	mov	r0, r3
 80039de:	f005 fed8 	bl	8009792 <USB_ReadInterrupts>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ec:	d10a      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f008 f984 	bl	800bcfc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	695a      	ldr	r2, [r3, #20]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003a02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f005 fec2 	bl	8009792 <USB_ReadInterrupts>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d115      	bne.n	8003a44 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f003 0304 	and.w	r3, r3, #4
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f008 f974 	bl	800bd18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6859      	ldr	r1, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	e000      	b.n	8003a44 <HAL_PCD_IRQHandler+0x740>
      return;
 8003a42:	bf00      	nop
    }
  }
}
 8003a44:	3734      	adds	r7, #52	; 0x34
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd90      	pop	{r4, r7, pc}

08003a4a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_PCD_SetAddress+0x1a>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e013      	b.n	8003a8c <HAL_PCD_SetAddress+0x42>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	78fa      	ldrb	r2, [r7, #3]
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f005 fe32 	bl	80096e6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	4608      	mov	r0, r1
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	70fb      	strb	r3, [r7, #3]
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	803b      	strh	r3, [r7, #0]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	da0f      	bge.n	8003ada <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	f003 020f 	and.w	r2, r3, #15
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	3338      	adds	r3, #56	; 0x38
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	3304      	adds	r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	705a      	strb	r2, [r3, #1]
 8003ad8:	e00f      	b.n	8003afa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4413      	add	r3, r2
 8003af0:	3304      	adds	r3, #4
 8003af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003afa:	78fb      	ldrb	r3, [r7, #3]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b06:	883a      	ldrh	r2, [r7, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	78ba      	ldrb	r2, [r7, #2]
 8003b10:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	785b      	ldrb	r3, [r3, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b24:	78bb      	ldrb	r3, [r7, #2]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d102      	bne.n	8003b30 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d101      	bne.n	8003b3e <HAL_PCD_EP_Open+0xaa>
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	e00e      	b.n	8003b5c <HAL_PCD_EP_Open+0xc8>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68f9      	ldr	r1, [r7, #12]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f004 fff5 	bl	8008b3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003b5a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da0f      	bge.n	8003b98 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	f003 020f 	and.w	r2, r3, #15
 8003b7e:	4613      	mov	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	1a9b      	subs	r3, r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	3338      	adds	r3, #56	; 0x38
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2201      	movs	r2, #1
 8003b94:	705a      	strb	r2, [r3, #1]
 8003b96:	e00f      	b.n	8003bb8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 020f 	and.w	r2, r3, #15
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	3304      	adds	r3, #4
 8003bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bb8:	78fb      	ldrb	r3, [r7, #3]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_PCD_EP_Close+0x6e>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e00e      	b.n	8003bf0 <HAL_PCD_EP_Close+0x8c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f005 f833 	bl	8008c4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	607a      	str	r2, [r7, #4]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	460b      	mov	r3, r1
 8003c06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c08:	7afb      	ldrb	r3, [r7, #11]
 8003c0a:	f003 020f 	and.w	r2, r3, #15
 8003c0e:	4613      	mov	r3, r2
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	3304      	adds	r3, #4
 8003c20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2200      	movs	r2, #0
 8003c32:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2200      	movs	r2, #0
 8003c38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c54:	7afb      	ldrb	r3, [r7, #11]
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	6979      	ldr	r1, [r7, #20]
 8003c6c:	f005 fab6 	bl	80091dc <USB_EP0StartXfer>
 8003c70:	e008      	b.n	8003c84 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	f005 f868 	bl	8008d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	460b      	mov	r3, r1
 8003c98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c9a:	78fb      	ldrb	r3, [r7, #3]
 8003c9c:	f003 020f 	and.w	r2, r3, #15
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003cb0:	681b      	ldr	r3, [r3, #0]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cce:	7afb      	ldrb	r3, [r7, #11]
 8003cd0:	f003 020f 	and.w	r2, r3, #15
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	00db      	lsls	r3, r3, #3
 8003cd8:	1a9b      	subs	r3, r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	3338      	adds	r3, #56	; 0x38
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfe:	7afb      	ldrb	r3, [r7, #11]
 8003d00:	f003 030f 	and.w	r3, r3, #15
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d102      	bne.n	8003d18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d109      	bne.n	8003d36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	f005 fa54 	bl	80091dc <USB_EP0StartXfer>
 8003d34:	e008      	b.n	8003d48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	6979      	ldr	r1, [r7, #20]
 8003d44:	f005 f806 	bl	8008d54 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d901      	bls.n	8003d70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e050      	b.n	8003e12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	da0f      	bge.n	8003d98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f003 020f 	and.w	r2, r3, #15
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	1a9b      	subs	r3, r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	3338      	adds	r3, #56	; 0x38
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	705a      	strb	r2, [r3, #1]
 8003d96:	e00d      	b.n	8003db4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d98:	78fa      	ldrb	r2, [r7, #3]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	4413      	add	r3, r2
 8003daa:	3304      	adds	r3, #4
 8003dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2200      	movs	r2, #0
 8003db2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	b2da      	uxtb	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d101      	bne.n	8003dd4 <HAL_PCD_EP_SetStall+0x82>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	e01e      	b.n	8003e12 <HAL_PCD_EP_SetStall+0xc0>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68f9      	ldr	r1, [r7, #12]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 fbab 	bl	800953e <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	f003 030f 	and.w	r3, r3, #15
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10a      	bne.n	8003e08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	b2d9      	uxtb	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e02:	461a      	mov	r2, r3
 8003e04:	f005 fd9c 	bl	8009940 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d901      	bls.n	8003e38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e042      	b.n	8003ebe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da0f      	bge.n	8003e60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3338      	adds	r3, #56	; 0x38
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	705a      	strb	r2, [r3, #1]
 8003e5e:	e00f      	b.n	8003e80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	f003 020f 	and.w	r2, r3, #15
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e86:	78fb      	ldrb	r3, [r7, #3]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_PCD_EP_ClrStall+0x86>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e00e      	b.n	8003ebe <HAL_PCD_EP_ClrStall+0xa4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f005 fbb3 	bl	800961a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b08a      	sub	sp, #40	; 0x28
 8003eca:	af02      	add	r7, sp, #8
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	3338      	adds	r3, #56	; 0x38
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	3304      	adds	r3, #4
 8003eec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d901      	bls.n	8003efe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e06c      	b.n	8003fd8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	695a      	ldr	r2, [r3, #20]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d902      	bls.n	8003f1a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	089b      	lsrs	r3, r3, #2
 8003f20:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f22:	e02b      	b.n	8003f7c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	69fa      	ldr	r2, [r7, #28]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d902      	bls.n	8003f40 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	3303      	adds	r3, #3
 8003f44:	089b      	lsrs	r3, r3, #2
 8003f46:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68d9      	ldr	r1, [r3, #12]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	6978      	ldr	r0, [r7, #20]
 8003f60:	f005 fa8f 	bl	8009482 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	68da      	ldr	r2, [r3, #12]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	441a      	add	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	699a      	ldr	r2, [r3, #24]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	441a      	add	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d809      	bhi.n	8003fa6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d203      	bcs.n	8003fa6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1be      	bne.n	8003f24 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d811      	bhi.n	8003fd6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	2201      	movs	r2, #1
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	6939      	ldr	r1, [r7, #16]
 8003fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	333c      	adds	r3, #60	; 0x3c
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	2b01      	cmp	r3, #1
 8004014:	f040 80b3 	bne.w	800417e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	f003 0308 	and.w	r3, r3, #8
 800401e:	2b00      	cmp	r3, #0
 8004020:	d028      	beq.n	8004074 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4a70      	ldr	r2, [pc, #448]	; (80041e8 <PCD_EP_OutXfrComplete_int+0x208>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d90e      	bls.n	8004048 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004030:	2b00      	cmp	r3, #0
 8004032:	d009      	beq.n	8004048 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004040:	461a      	mov	r2, r3
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f007 fd81 	bl	800bb50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004058:	461a      	mov	r2, r3
 800405a:	2101      	movs	r1, #1
 800405c:	f005 fc70 	bl	8009940 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	461a      	mov	r2, r3
 800406e:	2308      	movs	r3, #8
 8004070:	6093      	str	r3, [r2, #8]
 8004072:	e0b3      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d009      	beq.n	8004092 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	461a      	mov	r2, r3
 800408c:	2320      	movs	r3, #32
 800408e:	6093      	str	r3, [r2, #8]
 8004090:	e0a4      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 809f 	bne.w	80041dc <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4a51      	ldr	r2, [pc, #324]	; (80041e8 <PCD_EP_OutXfrComplete_int+0x208>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d90f      	bls.n	80040c6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	015a      	lsls	r2, r3, #5
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	4413      	add	r3, r2
 80040b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040bc:	461a      	mov	r2, r3
 80040be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040c2:	6093      	str	r3, [r2, #8]
 80040c4:	e08a      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	1a9b      	subs	r3, r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80040d8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	0159      	lsls	r1, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	440b      	add	r3, r1
 80040e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80040ec:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	4613      	mov	r3, r2
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4403      	add	r3, r0
 80040fc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004100:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	1a9b      	subs	r3, r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004114:	6819      	ldr	r1, [r3, #0]
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	4613      	mov	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	1a9b      	subs	r3, r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4403      	add	r3, r0
 8004124:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4419      	add	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	4613      	mov	r3, r2
 8004132:	00db      	lsls	r3, r3, #3
 8004134:	1a9b      	subs	r3, r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4403      	add	r3, r0
 800413a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800413e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	4619      	mov	r1, r3
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f007 fd14 	bl	800bb74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d144      	bne.n	80041dc <PCD_EP_OutXfrComplete_int+0x1fc>
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	1a9b      	subs	r3, r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d138      	bne.n	80041dc <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004174:	461a      	mov	r2, r3
 8004176:	2101      	movs	r1, #1
 8004178:	f005 fbe2 	bl	8009940 <USB_EP0_OutStart>
 800417c:	e02e      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a1a      	ldr	r2, [pc, #104]	; (80041ec <PCD_EP_OutXfrComplete_int+0x20c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d124      	bne.n	80041d0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800419c:	461a      	mov	r2, r3
 800419e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041a2:	6093      	str	r3, [r2, #8]
 80041a4:	e01a      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	2320      	movs	r3, #32
 80041c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	4619      	mov	r1, r3
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f007 fcd3 	bl	800bb74 <HAL_PCD_DataOutStageCallback>
 80041ce:	e005      	b.n	80041dc <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f007 fccc 	bl	800bb74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3718      	adds	r7, #24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	4f54300a 	.word	0x4f54300a
 80041ec:	4f54310a 	.word	0x4f54310a

080041f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	333c      	adds	r3, #60	; 0x3c
 8004208:	3304      	adds	r3, #4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d113      	bne.n	800424e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	4a1f      	ldr	r2, [pc, #124]	; (80042a8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d922      	bls.n	8004274 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004234:	2b00      	cmp	r3, #0
 8004236:	d01d      	beq.n	8004274 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	461a      	mov	r2, r3
 8004246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800424a:	6093      	str	r3, [r2, #8]
 800424c:	e012      	b.n	8004274 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a16      	ldr	r2, [pc, #88]	; (80042ac <PCD_EP_OutSetupPacket_int+0xbc>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d10e      	bne.n	8004274 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800425c:	2b00      	cmp	r3, #0
 800425e:	d009      	beq.n	8004274 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426c:	461a      	mov	r2, r3
 800426e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004272:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f007 fc6b 	bl	800bb50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a0a      	ldr	r2, [pc, #40]	; (80042a8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d90c      	bls.n	800429c <PCD_EP_OutSetupPacket_int+0xac>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d108      	bne.n	800429c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004294:	461a      	mov	r2, r3
 8004296:	2101      	movs	r1, #1
 8004298:	f005 fb52 	bl	8009940 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3718      	adds	r7, #24
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	4f54300a 	.word	0x4f54300a
 80042ac:	4f54310a 	.word	0x4f54310a

080042b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	70fb      	strb	r3, [r7, #3]
 80042bc:	4613      	mov	r3, r2
 80042be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d107      	bne.n	80042de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80042ce:	883b      	ldrh	r3, [r7, #0]
 80042d0:	0419      	lsls	r1, r3, #16
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	430a      	orrs	r2, r1
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
 80042dc:	e028      	b.n	8004330 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	4413      	add	r3, r2
 80042ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	73fb      	strb	r3, [r7, #15]
 80042f0:	e00d      	b.n	800430e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	3340      	adds	r3, #64	; 0x40
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	4413      	add	r3, r2
 8004306:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	3301      	adds	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	3b01      	subs	r3, #1
 8004314:	429a      	cmp	r2, r3
 8004316:	d3ec      	bcc.n	80042f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004318:	883b      	ldrh	r3, [r7, #0]
 800431a:	0418      	lsls	r0, r3, #16
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	78fb      	ldrb	r3, [r7, #3]
 8004322:	3b01      	subs	r3, #1
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	4302      	orrs	r2, r0
 8004328:	3340      	adds	r3, #64	; 0x40
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	887a      	ldrh	r2, [r7, #2]
 8004350:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b086      	sub	sp, #24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e25b      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d075      	beq.n	8004482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004396:	4ba3      	ldr	r3, [pc, #652]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d00c      	beq.n	80043bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043a2:	4ba0      	ldr	r3, [pc, #640]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043aa:	2b08      	cmp	r3, #8
 80043ac:	d112      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ae:	4b9d      	ldr	r3, [pc, #628]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ba:	d10b      	bne.n	80043d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043bc:	4b99      	ldr	r3, [pc, #612]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d05b      	beq.n	8004480 <HAL_RCC_OscConfig+0x108>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d157      	bne.n	8004480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e236      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043dc:	d106      	bne.n	80043ec <HAL_RCC_OscConfig+0x74>
 80043de:	4b91      	ldr	r3, [pc, #580]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a90      	ldr	r2, [pc, #576]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043e8:	6013      	str	r3, [r2, #0]
 80043ea:	e01d      	b.n	8004428 <HAL_RCC_OscConfig+0xb0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043f4:	d10c      	bne.n	8004410 <HAL_RCC_OscConfig+0x98>
 80043f6:	4b8b      	ldr	r3, [pc, #556]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a8a      	ldr	r2, [pc, #552]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80043fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	4b88      	ldr	r3, [pc, #544]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a87      	ldr	r2, [pc, #540]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e00b      	b.n	8004428 <HAL_RCC_OscConfig+0xb0>
 8004410:	4b84      	ldr	r3, [pc, #528]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a83      	ldr	r2, [pc, #524]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	4b81      	ldr	r3, [pc, #516]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a80      	ldr	r2, [pc, #512]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d013      	beq.n	8004458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004430:	f7fd fe20 	bl	8002074 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004438:	f7fd fe1c 	bl	8002074 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b64      	cmp	r3, #100	; 0x64
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1fb      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0xc0>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fd fe0c 	bl	8002074 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004460:	f7fd fe08 	bl	8002074 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e1e7      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004472:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0xe8>
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d063      	beq.n	8004556 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800448e:	4b65      	ldr	r3, [pc, #404]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00b      	beq.n	80044b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800449a:	4b62      	ldr	r3, [pc, #392]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d11c      	bne.n	80044e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044a6:	4b5f      	ldr	r3, [pc, #380]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d116      	bne.n	80044e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044b2:	4b5c      	ldr	r3, [pc, #368]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_RCC_OscConfig+0x152>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d001      	beq.n	80044ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e1bb      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ca:	4b56      	ldr	r3, [pc, #344]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	4952      	ldr	r1, [pc, #328]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044de:	e03a      	b.n	8004556 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d020      	beq.n	800452a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e8:	4b4f      	ldr	r3, [pc, #316]	; (8004628 <HAL_RCC_OscConfig+0x2b0>)
 80044ea:	2201      	movs	r2, #1
 80044ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fd fdc1 	bl	8002074 <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f6:	f7fd fdbd 	bl	8002074 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e19c      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004508:	4b46      	ldr	r3, [pc, #280]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004514:	4b43      	ldr	r3, [pc, #268]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	4940      	ldr	r1, [pc, #256]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]
 8004528:	e015      	b.n	8004556 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800452a:	4b3f      	ldr	r3, [pc, #252]	; (8004628 <HAL_RCC_OscConfig+0x2b0>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004530:	f7fd fda0 	bl	8002074 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004538:	f7fd fd9c 	bl	8002074 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e17b      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800454a:	4b36      	ldr	r3, [pc, #216]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b00      	cmp	r3, #0
 8004560:	d030      	beq.n	80045c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d016      	beq.n	8004598 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800456a:	4b30      	ldr	r3, [pc, #192]	; (800462c <HAL_RCC_OscConfig+0x2b4>)
 800456c:	2201      	movs	r2, #1
 800456e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004570:	f7fd fd80 	bl	8002074 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004578:	f7fd fd7c 	bl	8002074 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b02      	cmp	r3, #2
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e15b      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800458a:	4b26      	ldr	r3, [pc, #152]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0x200>
 8004596:	e015      	b.n	80045c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004598:	4b24      	ldr	r3, [pc, #144]	; (800462c <HAL_RCC_OscConfig+0x2b4>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459e:	f7fd fd69 	bl	8002074 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a6:	f7fd fd65 	bl	8002074 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e144      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045b8:	4b1a      	ldr	r3, [pc, #104]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80045ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0304 	and.w	r3, r3, #4
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	f000 80a0 	beq.w	8004712 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045d2:	2300      	movs	r3, #0
 80045d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10f      	bne.n	8004602 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	60bb      	str	r3, [r7, #8]
 80045e6:	4b0f      	ldr	r3, [pc, #60]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a0e      	ldr	r2, [pc, #56]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80045ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
 80045f2:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <HAL_RCC_OscConfig+0x2ac>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fa:	60bb      	str	r3, [r7, #8]
 80045fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045fe:	2301      	movs	r3, #1
 8004600:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004602:	4b0b      	ldr	r3, [pc, #44]	; (8004630 <HAL_RCC_OscConfig+0x2b8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800460a:	2b00      	cmp	r3, #0
 800460c:	d121      	bne.n	8004652 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800460e:	4b08      	ldr	r3, [pc, #32]	; (8004630 <HAL_RCC_OscConfig+0x2b8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a07      	ldr	r2, [pc, #28]	; (8004630 <HAL_RCC_OscConfig+0x2b8>)
 8004614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800461a:	f7fd fd2b 	bl	8002074 <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004620:	e011      	b.n	8004646 <HAL_RCC_OscConfig+0x2ce>
 8004622:	bf00      	nop
 8004624:	40023800 	.word	0x40023800
 8004628:	42470000 	.word	0x42470000
 800462c:	42470e80 	.word	0x42470e80
 8004630:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004634:	f7fd fd1e 	bl	8002074 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e0fd      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004646:	4b81      	ldr	r3, [pc, #516]	; (800484c <HAL_RCC_OscConfig+0x4d4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d106      	bne.n	8004668 <HAL_RCC_OscConfig+0x2f0>
 800465a:	4b7d      	ldr	r3, [pc, #500]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465e:	4a7c      	ldr	r2, [pc, #496]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	6713      	str	r3, [r2, #112]	; 0x70
 8004666:	e01c      	b.n	80046a2 <HAL_RCC_OscConfig+0x32a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	2b05      	cmp	r3, #5
 800466e:	d10c      	bne.n	800468a <HAL_RCC_OscConfig+0x312>
 8004670:	4b77      	ldr	r3, [pc, #476]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004674:	4a76      	ldr	r2, [pc, #472]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004676:	f043 0304 	orr.w	r3, r3, #4
 800467a:	6713      	str	r3, [r2, #112]	; 0x70
 800467c:	4b74      	ldr	r3, [pc, #464]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800467e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004680:	4a73      	ldr	r2, [pc, #460]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004682:	f043 0301 	orr.w	r3, r3, #1
 8004686:	6713      	str	r3, [r2, #112]	; 0x70
 8004688:	e00b      	b.n	80046a2 <HAL_RCC_OscConfig+0x32a>
 800468a:	4b71      	ldr	r3, [pc, #452]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a70      	ldr	r2, [pc, #448]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004690:	f023 0301 	bic.w	r3, r3, #1
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	4b6e      	ldr	r3, [pc, #440]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	4a6d      	ldr	r2, [pc, #436]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800469c:	f023 0304 	bic.w	r3, r3, #4
 80046a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d015      	beq.n	80046d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046aa:	f7fd fce3 	bl	8002074 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b0:	e00a      	b.n	80046c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046b2:	f7fd fcdf 	bl	8002074 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e0bc      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	4b61      	ldr	r3, [pc, #388]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0ee      	beq.n	80046b2 <HAL_RCC_OscConfig+0x33a>
 80046d4:	e014      	b.n	8004700 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d6:	f7fd fccd 	bl	8002074 <HAL_GetTick>
 80046da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046dc:	e00a      	b.n	80046f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046de:	f7fd fcc9 	bl	8002074 <HAL_GetTick>
 80046e2:	4602      	mov	r2, r0
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	1ad3      	subs	r3, r2, r3
 80046e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e0a6      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f4:	4b56      	ldr	r3, [pc, #344]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f8:	f003 0302 	and.w	r3, r3, #2
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ee      	bne.n	80046de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d105      	bne.n	8004712 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004706:	4b52      	ldr	r3, [pc, #328]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	4a51      	ldr	r2, [pc, #324]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800470c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004710:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8092 	beq.w	8004840 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800471c:	4b4c      	ldr	r3, [pc, #304]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f003 030c 	and.w	r3, r3, #12
 8004724:	2b08      	cmp	r3, #8
 8004726:	d05c      	beq.n	80047e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b02      	cmp	r3, #2
 800472e:	d141      	bne.n	80047b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004730:	4b48      	ldr	r3, [pc, #288]	; (8004854 <HAL_RCC_OscConfig+0x4dc>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7fd fc9d 	bl	8002074 <HAL_GetTick>
 800473a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473e:	f7fd fc99 	bl	8002074 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e078      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004750:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f0      	bne.n	800473e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	69da      	ldr	r2, [r3, #28]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	431a      	orrs	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	019b      	lsls	r3, r3, #6
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	085b      	lsrs	r3, r3, #1
 8004774:	3b01      	subs	r3, #1
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	061b      	lsls	r3, r3, #24
 8004780:	4933      	ldr	r1, [pc, #204]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004786:	4b33      	ldr	r3, [pc, #204]	; (8004854 <HAL_RCC_OscConfig+0x4dc>)
 8004788:	2201      	movs	r2, #1
 800478a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fd fc72 	bl	8002074 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004794:	f7fd fc6e 	bl	8002074 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e04d      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a6:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x41c>
 80047b2:	e045      	b.n	8004840 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b4:	4b27      	ldr	r3, [pc, #156]	; (8004854 <HAL_RCC_OscConfig+0x4dc>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ba:	f7fd fc5b 	bl	8002074 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c0:	e008      	b.n	80047d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c2:	f7fd fc57 	bl	8002074 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d901      	bls.n	80047d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e036      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d4:	4b1e      	ldr	r3, [pc, #120]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1f0      	bne.n	80047c2 <HAL_RCC_OscConfig+0x44a>
 80047e0:	e02e      	b.n	8004840 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e029      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <HAL_RCC_OscConfig+0x4d8>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d11c      	bne.n	800483c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d115      	bne.n	800483c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004816:	4013      	ands	r3, r2
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800481c:	4293      	cmp	r3, r2
 800481e:	d10d      	bne.n	800483c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d106      	bne.n	800483c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004838:	429a      	cmp	r2, r3
 800483a:	d001      	beq.n	8004840 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40007000 	.word	0x40007000
 8004850:	40023800 	.word	0x40023800
 8004854:	42470060 	.word	0x42470060

08004858 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e0cc      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800486c:	4b68      	ldr	r3, [pc, #416]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d90c      	bls.n	8004894 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487a:	4b65      	ldr	r3, [pc, #404]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004882:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	683a      	ldr	r2, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d001      	beq.n	8004894 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0b8      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d020      	beq.n	80048e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048ac:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a58      	ldr	r2, [pc, #352]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0308 	and.w	r3, r3, #8
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d005      	beq.n	80048d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c4:	4b53      	ldr	r3, [pc, #332]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a52      	ldr	r2, [pc, #328]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048d0:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	494d      	ldr	r1, [pc, #308]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d044      	beq.n	8004978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d107      	bne.n	8004906 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	4b47      	ldr	r3, [pc, #284]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d119      	bne.n	8004936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e07f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d003      	beq.n	8004916 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004912:	2b03      	cmp	r3, #3
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004916:	4b3f      	ldr	r3, [pc, #252]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e06f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004926:	4b3b      	ldr	r3, [pc, #236]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e067      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004936:	4b37      	ldr	r3, [pc, #220]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f023 0203 	bic.w	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	4934      	ldr	r1, [pc, #208]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004944:	4313      	orrs	r3, r2
 8004946:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004948:	f7fd fb94 	bl	8002074 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800494e:	e00a      	b.n	8004966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004950:	f7fd fb90 	bl	8002074 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f241 3288 	movw	r2, #5000	; 0x1388
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e04f      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004966:	4b2b      	ldr	r3, [pc, #172]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 020c 	and.w	r2, r3, #12
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	429a      	cmp	r2, r3
 8004976:	d1eb      	bne.n	8004950 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004978:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 030f 	and.w	r3, r3, #15
 8004980:	683a      	ldr	r2, [r7, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d20c      	bcs.n	80049a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	4b22      	ldr	r3, [pc, #136]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 8004988:	683a      	ldr	r2, [r7, #0]
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b20      	ldr	r3, [pc, #128]	; (8004a10 <HAL_RCC_ClockConfig+0x1b8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e032      	b.n	8004a06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d008      	beq.n	80049be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049ac:	4b19      	ldr	r3, [pc, #100]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4916      	ldr	r1, [pc, #88]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ca:	4b12      	ldr	r3, [pc, #72]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	490e      	ldr	r1, [pc, #56]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049de:	f000 f821 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049e2:	4601      	mov	r1, r0
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <HAL_RCC_ClockConfig+0x1bc>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	091b      	lsrs	r3, r3, #4
 80049ea:	f003 030f 	and.w	r3, r3, #15
 80049ee:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <HAL_RCC_ClockConfig+0x1c0>)
 80049f0:	5cd3      	ldrb	r3, [r2, r3]
 80049f2:	fa21 f303 	lsr.w	r3, r1, r3
 80049f6:	4a09      	ldr	r2, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049fa:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_ClockConfig+0x1c8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd faf4 	bl	8001fec <HAL_InitTick>

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023c00 	.word	0x40023c00
 8004a14:	40023800 	.word	0x40023800
 8004a18:	0800fbf4 	.word	0x0800fbf4
 8004a1c:	20000004 	.word	0x20000004
 8004a20:	20000008 	.word	0x20000008

08004a24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	607b      	str	r3, [r7, #4]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	2300      	movs	r3, #0
 8004a34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a3a:	4b50      	ldr	r3, [pc, #320]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	2b04      	cmp	r3, #4
 8004a44:	d007      	beq.n	8004a56 <HAL_RCC_GetSysClockFreq+0x32>
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d008      	beq.n	8004a5c <HAL_RCC_GetSysClockFreq+0x38>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f040 808d 	bne.w	8004b6a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a50:	4b4b      	ldr	r3, [pc, #300]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004a52:	60bb      	str	r3, [r7, #8]
       break;
 8004a54:	e08c      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a56:	4b4b      	ldr	r3, [pc, #300]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a58:	60bb      	str	r3, [r7, #8]
      break;
 8004a5a:	e089      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a5c:	4b47      	ldr	r3, [pc, #284]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a66:	4b45      	ldr	r3, [pc, #276]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d023      	beq.n	8004aba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a72:	4b42      	ldr	r3, [pc, #264]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	099b      	lsrs	r3, r3, #6
 8004a78:	f04f 0400 	mov.w	r4, #0
 8004a7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	ea03 0501 	and.w	r5, r3, r1
 8004a88:	ea04 0602 	and.w	r6, r4, r2
 8004a8c:	4a3d      	ldr	r2, [pc, #244]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a8e:	fb02 f106 	mul.w	r1, r2, r6
 8004a92:	2200      	movs	r2, #0
 8004a94:	fb02 f205 	mul.w	r2, r2, r5
 8004a98:	440a      	add	r2, r1
 8004a9a:	493a      	ldr	r1, [pc, #232]	; (8004b84 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a9c:	fba5 0101 	umull	r0, r1, r5, r1
 8004aa0:	1853      	adds	r3, r2, r1
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f04f 0400 	mov.w	r4, #0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4623      	mov	r3, r4
 8004aae:	f7fc f8eb 	bl	8000c88 <__aeabi_uldivmod>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	460c      	mov	r4, r1
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e049      	b.n	8004b4e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aba:	4b30      	ldr	r3, [pc, #192]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	099b      	lsrs	r3, r3, #6
 8004ac0:	f04f 0400 	mov.w	r4, #0
 8004ac4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	ea03 0501 	and.w	r5, r3, r1
 8004ad0:	ea04 0602 	and.w	r6, r4, r2
 8004ad4:	4629      	mov	r1, r5
 8004ad6:	4632      	mov	r2, r6
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	f04f 0400 	mov.w	r4, #0
 8004ae0:	0154      	lsls	r4, r2, #5
 8004ae2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004ae6:	014b      	lsls	r3, r1, #5
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4622      	mov	r2, r4
 8004aec:	1b49      	subs	r1, r1, r5
 8004aee:	eb62 0206 	sbc.w	r2, r2, r6
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	f04f 0400 	mov.w	r4, #0
 8004afa:	0194      	lsls	r4, r2, #6
 8004afc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b00:	018b      	lsls	r3, r1, #6
 8004b02:	1a5b      	subs	r3, r3, r1
 8004b04:	eb64 0402 	sbc.w	r4, r4, r2
 8004b08:	f04f 0100 	mov.w	r1, #0
 8004b0c:	f04f 0200 	mov.w	r2, #0
 8004b10:	00e2      	lsls	r2, r4, #3
 8004b12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b16:	00d9      	lsls	r1, r3, #3
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4614      	mov	r4, r2
 8004b1c:	195b      	adds	r3, r3, r5
 8004b1e:	eb44 0406 	adc.w	r4, r4, r6
 8004b22:	f04f 0100 	mov.w	r1, #0
 8004b26:	f04f 0200 	mov.w	r2, #0
 8004b2a:	02a2      	lsls	r2, r4, #10
 8004b2c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b30:	0299      	lsls	r1, r3, #10
 8004b32:	460b      	mov	r3, r1
 8004b34:	4614      	mov	r4, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	4621      	mov	r1, r4
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f04f 0400 	mov.w	r4, #0
 8004b40:	461a      	mov	r2, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	f7fc f8a0 	bl	8000c88 <__aeabi_uldivmod>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <HAL_RCC_GetSysClockFreq+0x158>)
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	0c1b      	lsrs	r3, r3, #16
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	3301      	adds	r3, #1
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b66:	60bb      	str	r3, [r7, #8]
      break;
 8004b68:	e002      	b.n	8004b70 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b6a:	4b05      	ldr	r3, [pc, #20]	; (8004b80 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004b6c:	60bb      	str	r3, [r7, #8]
      break;
 8004b6e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b70:	68bb      	ldr	r3, [r7, #8]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	40023800 	.word	0x40023800
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	00b71b00 	.word	0x00b71b00

08004b88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	20000004 	.word	0x20000004

08004ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ba4:	f7ff fff0 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004ba8:	4601      	mov	r1, r0
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	0a9b      	lsrs	r3, r3, #10
 8004bb0:	f003 0307 	and.w	r3, r3, #7
 8004bb4:	4a03      	ldr	r2, [pc, #12]	; (8004bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bb6:	5cd3      	ldrb	r3, [r2, r3]
 8004bb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	0800fc04 	.word	0x0800fc04

08004bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bcc:	f7ff ffdc 	bl	8004b88 <HAL_RCC_GetHCLKFreq>
 8004bd0:	4601      	mov	r1, r0
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	0b5b      	lsrs	r3, r3, #13
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	4a03      	ldr	r2, [pc, #12]	; (8004bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bde:	5cd3      	ldrb	r3, [r2, r3]
 8004be0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	0800fc04 	.word	0x0800fc04

08004bf0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d105      	bne.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d035      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c18:	4b62      	ldr	r3, [pc, #392]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c1e:	f7fd fa29 	bl	8002074 <HAL_GetTick>
 8004c22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c24:	e008      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c26:	f7fd fa25 	bl	8002074 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0b0      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c38:	4b5b      	ldr	r3, [pc, #364]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	019a      	lsls	r2, r3, #6
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	071b      	lsls	r3, r3, #28
 8004c50:	4955      	ldr	r1, [pc, #340]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004c58:	4b52      	ldr	r3, [pc, #328]	; (8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c5e:	f7fd fa09 	bl	8002074 <HAL_GetTick>
 8004c62:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c66:	f7fd fa05 	bl	8002074 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e090      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004c78:	4b4b      	ldr	r3, [pc, #300]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 8083 	beq.w	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4b44      	ldr	r3, [pc, #272]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a43      	ldr	r2, [pc, #268]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b41      	ldr	r3, [pc, #260]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004caa:	60fb      	str	r3, [r7, #12]
 8004cac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004cae:	4b3f      	ldr	r3, [pc, #252]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a3e      	ldr	r2, [pc, #248]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004cba:	f7fd f9db 	bl	8002074 <HAL_GetTick>
 8004cbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004cc2:	f7fd f9d7 	bl	8002074 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e062      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004cd4:	4b35      	ldr	r3, [pc, #212]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ce0:	4b31      	ldr	r3, [pc, #196]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d02f      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d028      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004cfe:	4b2a      	ldr	r3, [pc, #168]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d08:	4b29      	ldr	r3, [pc, #164]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d0e:	4b28      	ldr	r3, [pc, #160]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004d14:	4a24      	ldr	r2, [pc, #144]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d1a:	4b23      	ldr	r3, [pc, #140]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d114      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004d26:	f7fd f9a5 	bl	8002074 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fd f9a1 	bl	8002074 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e02a      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ee      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d5c:	d10d      	bne.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d5e:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004d6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d72:	490d      	ldr	r1, [pc, #52]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	608b      	str	r3, [r1, #8]
 8004d78:	e005      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	4a0a      	ldr	r2, [pc, #40]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d80:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d84:	6093      	str	r3, [r2, #8]
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d88:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d92:	4905      	ldr	r1, [pc, #20]	; (8004da8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3718      	adds	r7, #24
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	42470068 	.word	0x42470068
 8004da8:	40023800 	.word	0x40023800
 8004dac:	40007000 	.word	0x40007000
 8004db0:	42470e40 	.word	0x42470e40

08004db4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e083      	b.n	8004ece <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	7f5b      	ldrb	r3, [r3, #29]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc fe46 	bl	8001a68 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	22ca      	movs	r2, #202	; 0xca
 8004de8:	625a      	str	r2, [r3, #36]	; 0x24
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2253      	movs	r2, #83	; 0x53
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f9fb 	bl	80051ee <RTC_EnterInitMode>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	22ff      	movs	r2, #255	; 0xff
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2204      	movs	r2, #4
 8004e0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e05e      	b.n	8004ece <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e22:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6899      	ldr	r1, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	431a      	orrs	r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	68d2      	ldr	r2, [r2, #12]
 8004e4a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6919      	ldr	r1, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	041a      	lsls	r2, r3, #16
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e6e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 0320 	and.w	r3, r3, #32
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10e      	bne.n	8004e9c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f98d 	bl	800519e <HAL_RTC_WaitForSynchro>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	22ff      	movs	r2, #255	; 0xff
 8004e90:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2204      	movs	r2, #4
 8004e96:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e018      	b.n	8004ece <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004eaa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	22ff      	movs	r2, #255	; 0xff
 8004ec4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004ed6:	b590      	push	{r4, r7, lr}
 8004ed8:	b087      	sub	sp, #28
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	7f1b      	ldrb	r3, [r3, #28]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <HAL_RTC_SetTime+0x1c>
 8004eee:	2302      	movs	r3, #2
 8004ef0:	e0aa      	b.n	8005048 <HAL_RTC_SetTime+0x172>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2202      	movs	r2, #2
 8004efc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d126      	bne.n	8004f52 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2200      	movs	r2, #0
 8004f16:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 f992 	bl	8005246 <RTC_ByteToBcd2>
 8004f22:	4603      	mov	r3, r0
 8004f24:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	785b      	ldrb	r3, [r3, #1]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 f98b 	bl	8005246 <RTC_ByteToBcd2>
 8004f30:	4603      	mov	r3, r0
 8004f32:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f34:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	789b      	ldrb	r3, [r3, #2]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f983 	bl	8005246 <RTC_ByteToBcd2>
 8004f40:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004f42:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	78db      	ldrb	r3, [r3, #3]
 8004f4a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	e018      	b.n	8004f84 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d102      	bne.n	8004f66 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2200      	movs	r2, #0
 8004f64:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	785b      	ldrb	r3, [r3, #1]
 8004f70:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f72:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004f74:	68ba      	ldr	r2, [r7, #8]
 8004f76:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004f78:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	78db      	ldrb	r3, [r3, #3]
 8004f7e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	22ca      	movs	r2, #202	; 0xca
 8004f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2253      	movs	r2, #83	; 0x53
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f92a 	bl	80051ee <RTC_EnterInitMode>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00b      	beq.n	8004fb8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	22ff      	movs	r2, #255	; 0xff
 8004fa6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2204      	movs	r2, #4
 8004fac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e047      	b.n	8005048 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004fc2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004fc6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004fd6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6899      	ldr	r1, [r3, #8]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	431a      	orrs	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ffe:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d111      	bne.n	8005032 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 f8c5 	bl	800519e <HAL_RTC_WaitForSynchro>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	22ff      	movs	r2, #255	; 0xff
 8005020:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2204      	movs	r2, #4
 8005026:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e00a      	b.n	8005048 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	22ff      	movs	r2, #255	; 0xff
 8005038:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2200      	movs	r2, #0
 8005044:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8005046:	2300      	movs	r3, #0
  }
}
 8005048:	4618      	mov	r0, r3
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	bd90      	pop	{r4, r7, pc}

08005050 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	7f1b      	ldrb	r3, [r3, #28]
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_RTC_SetDate+0x1c>
 8005068:	2302      	movs	r3, #2
 800506a:	e094      	b.n	8005196 <HAL_RTC_SetDate+0x146>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2202      	movs	r2, #2
 8005076:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10e      	bne.n	800509c <HAL_RTC_SetDate+0x4c>
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	785b      	ldrb	r3, [r3, #1]
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	d008      	beq.n	800509c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	785b      	ldrb	r3, [r3, #1]
 800508e:	f023 0310 	bic.w	r3, r3, #16
 8005092:	b2db      	uxtb	r3, r3
 8005094:	330a      	adds	r3, #10
 8005096:	b2da      	uxtb	r2, r3
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11c      	bne.n	80050dc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	78db      	ldrb	r3, [r3, #3]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f8cd 	bl	8005246 <RTC_ByteToBcd2>
 80050ac:	4603      	mov	r3, r0
 80050ae:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	785b      	ldrb	r3, [r3, #1]
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f8c6 	bl	8005246 <RTC_ByteToBcd2>
 80050ba:	4603      	mov	r3, r0
 80050bc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80050be:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	789b      	ldrb	r3, [r3, #2]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 f8be 	bl	8005246 <RTC_ByteToBcd2>
 80050ca:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80050cc:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
 80050da:	e00e      	b.n	80050fa <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	78db      	ldrb	r3, [r3, #3]
 80050e0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050e8:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80050ee:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050f6:	4313      	orrs	r3, r2
 80050f8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	22ca      	movs	r2, #202	; 0xca
 8005100:	625a      	str	r2, [r3, #36]	; 0x24
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2253      	movs	r2, #83	; 0x53
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f86f 	bl	80051ee <RTC_EnterInitMode>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	22ff      	movs	r2, #255	; 0xff
 800511c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2204      	movs	r2, #4
 8005122:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e033      	b.n	8005196 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005138:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800513c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800514c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d111      	bne.n	8005180 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f81e 	bl	800519e <HAL_RTC_WaitForSynchro>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00b      	beq.n	8005180 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	22ff      	movs	r2, #255	; 0xff
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2204      	movs	r2, #4
 8005174:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e00a      	b.n	8005196 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	22ff      	movs	r2, #255	; 0xff
 8005186:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8005194:	2300      	movs	r3, #0
  }
}
 8005196:	4618      	mov	r0, r3
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	bd90      	pop	{r4, r7, pc}

0800519e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b084      	sub	sp, #16
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051b8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051ba:	f7fc ff5b 	bl	8002074 <HAL_GetTick>
 80051be:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80051c0:	e009      	b.n	80051d6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80051c2:	f7fc ff57 	bl	8002074 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051d0:	d901      	bls.n	80051d6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e007      	b.n	80051e6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d0ee      	beq.n	80051c2 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b084      	sub	sp, #16
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d119      	bne.n	800523c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f04f 32ff 	mov.w	r2, #4294967295
 8005210:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005212:	f7fc ff2f 	bl	8002074 <HAL_GetTick>
 8005216:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005218:	e009      	b.n	800522e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800521a:	f7fc ff2b 	bl	8002074 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005228:	d901      	bls.n	800522e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e007      	b.n	800523e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005238:	2b00      	cmp	r3, #0
 800523a:	d0ee      	beq.n	800521a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}

08005246 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005246:	b480      	push	{r7}
 8005248:	b085      	sub	sp, #20
 800524a:	af00      	add	r7, sp, #0
 800524c:	4603      	mov	r3, r0
 800524e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8005254:	e005      	b.n	8005262 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3301      	adds	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	3b0a      	subs	r3, #10
 8005260:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8005262:	79fb      	ldrb	r3, [r7, #7]
 8005264:	2b09      	cmp	r3, #9
 8005266:	d8f6      	bhi.n	8005256 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	b2db      	uxtb	r3, r3
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	b2da      	uxtb	r2, r3
 8005270:	79fb      	ldrb	r3, [r7, #7]
 8005272:	4313      	orrs	r3, r2
 8005274:	b2db      	uxtb	r3, r3
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e022      	b.n	80052da <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800529a:	b2db      	uxtb	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d105      	bne.n	80052ac <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2200      	movs	r2, #0
 80052a4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7fc fbf4 	bl	8001a94 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2203      	movs	r2, #3
 80052b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f815 	bl	80052e4 <HAL_SD_InitCard>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e00a      	b.n	80052da <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80052e4:	b5b0      	push	{r4, r5, r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af04      	add	r7, sp, #16
 80052ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80052ec:	2300      	movs	r3, #0
 80052ee:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80052f4:	2300      	movs	r3, #0
 80052f6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80052f8:	2300      	movs	r3, #0
 80052fa:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80052fc:	2300      	movs	r3, #0
 80052fe:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005300:	2376      	movs	r3, #118	; 0x76
 8005302:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681d      	ldr	r5, [r3, #0]
 8005308:	466c      	mov	r4, sp
 800530a:	f107 0314 	add.w	r3, r7, #20
 800530e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005312:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800531c:	4628      	mov	r0, r5
 800531e:	f002 fb61 	bl	80079e4 <SDIO_Init>
 8005322:	4603      	mov	r3, r0
 8005324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e031      	b.n	8005398 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005334:	4b1a      	ldr	r3, [pc, #104]	; (80053a0 <HAL_SD_InitCard+0xbc>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f002 fb99 	bl	8007a76 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005344:	4b16      	ldr	r3, [pc, #88]	; (80053a0 <HAL_SD_InitCard+0xbc>)
 8005346:	2201      	movs	r2, #1
 8005348:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fffa 	bl	8006344 <SD_PowerON>
 8005350:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00b      	beq.n	8005370 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	431a      	orrs	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e013      	b.n	8005398 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 ff19 	bl	80061a8 <SD_InitCard>
 8005376:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00b      	beq.n	8005396 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e000      	b.n	8005398 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3728      	adds	r7, #40	; 0x28
 800539c:	46bd      	mov	sp, r7
 800539e:	bdb0      	pop	{r4, r5, r7, pc}
 80053a0:	422580a0 	.word	0x422580a0

080053a4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b08c      	sub	sp, #48	; 0x30
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d107      	bne.n	80053cc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0c9      	b.n	8005560 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053d2:	b2db      	uxtb	r3, r3
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	f040 80c2 	bne.w	800555e <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	441a      	add	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d907      	bls.n	80053fe <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e0b0      	b.n	8005560 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2203      	movs	r2, #3
 8005402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800541c:	f043 0302 	orr.w	r3, r3, #2
 8005420:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	4a50      	ldr	r2, [pc, #320]	; (8005568 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	4a4f      	ldr	r2, [pc, #316]	; (800556c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8005430:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005436:	2200      	movs	r2, #0
 8005438:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3380      	adds	r3, #128	; 0x80
 8005444:	4619      	mov	r1, r3
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	025b      	lsls	r3, r3, #9
 800544c:	089b      	lsrs	r3, r3, #2
 800544e:	f7fc ffff 	bl	8002450 <HAL_DMA_Start_IT>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d017      	beq.n	8005488 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005466:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a40      	ldr	r2, [pc, #256]	; (8005570 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e06b      	b.n	8005560 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005488:	4b3a      	ldr	r3, [pc, #232]	; (8005574 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	2b01      	cmp	r3, #1
 8005494:	d002      	beq.n	800549c <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	025b      	lsls	r3, r3, #9
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054a4:	4618      	mov	r0, r3
 80054a6:	f002 fb79 	bl	8007b9c <SDMMC_CmdBlockLength>
 80054aa:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80054ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00f      	beq.n	80054d2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a2e      	ldr	r2, [pc, #184]	; (8005570 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80054b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e046      	b.n	8005560 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295
 80054d6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	025b      	lsls	r3, r3, #9
 80054dc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80054de:	2390      	movs	r3, #144	; 0x90
 80054e0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80054e2:	2302      	movs	r3, #2
 80054e4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80054ea:	2301      	movs	r3, #1
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f107 0210 	add.w	r2, r7, #16
 80054f6:	4611      	mov	r1, r2
 80054f8:	4618      	mov	r0, r3
 80054fa:	f002 fb23 	bl	8007b44 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	2b01      	cmp	r3, #1
 8005502:	d90a      	bls.n	800551a <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2282      	movs	r2, #130	; 0x82
 8005508:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005510:	4618      	mov	r0, r3
 8005512:	f002 fb87 	bl	8007c24 <SDMMC_CmdReadMultiBlock>
 8005516:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005518:	e009      	b.n	800552e <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2281      	movs	r2, #129	; 0x81
 800551e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005526:	4618      	mov	r0, r3
 8005528:	f002 fb5a 	bl	8007be0 <SDMMC_CmdReadSingleBlock>
 800552c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d012      	beq.n	800555a <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a0d      	ldr	r2, [pc, #52]	; (8005570 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800553a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005542:	431a      	orrs	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e002      	b.n	8005560 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	e000      	b.n	8005560 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800555e:	2302      	movs	r3, #2
  }
}
 8005560:	4618      	mov	r0, r3
 8005562:	3730      	adds	r7, #48	; 0x30
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	08005fb7 	.word	0x08005fb7
 800556c:	08006029 	.word	0x08006029
 8005570:	004005ff 	.word	0x004005ff
 8005574:	4225858c 	.word	0x4225858c

08005578 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	; 0x30
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d107      	bne.n	80055a0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005594:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e0ce      	b.n	800573e <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	f040 80c7 	bne.w	800573c <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80055b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	441a      	add	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	429a      	cmp	r2, r3
 80055c0:	d907      	bls.n	80055d2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0b5      	b.n	800573e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2203      	movs	r2, #3
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2200      	movs	r2, #0
 80055e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80055f0:	f043 0302 	orr.w	r3, r3, #2
 80055f4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055fa:	4a53      	ldr	r2, [pc, #332]	; (8005748 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80055fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005602:	4a52      	ldr	r2, [pc, #328]	; (800574c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8005604:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	2200      	movs	r2, #0
 800560c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005612:	2b01      	cmp	r3, #1
 8005614:	d002      	beq.n	800561c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005618:	025b      	lsls	r3, r3, #9
 800561a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005624:	4618      	mov	r0, r3
 8005626:	f002 fab9 	bl	8007b9c <SDMMC_CmdBlockLength>
 800562a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00f      	beq.n	8005652 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a46      	ldr	r2, [pc, #280]	; (8005750 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005640:	431a      	orrs	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e075      	b.n	800573e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d90a      	bls.n	800566e <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	22a0      	movs	r2, #160	; 0xa0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005664:	4618      	mov	r0, r3
 8005666:	f002 fb21 	bl	8007cac <SDMMC_CmdWriteMultiBlock>
 800566a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800566c:	e009      	b.n	8005682 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2290      	movs	r2, #144	; 0x90
 8005672:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800567a:	4618      	mov	r0, r3
 800567c:	f002 faf4 	bl	8007c68 <SDMMC_CmdWriteSingleBlock>
 8005680:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d012      	beq.n	80056ae <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a30      	ldr	r2, [pc, #192]	; (8005750 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800568e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005696:	431a      	orrs	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e047      	b.n	800573e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80056ae:	4b29      	ldr	r3, [pc, #164]	; (8005754 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80056b0:	2201      	movs	r2, #1
 80056b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80056b8:	68b9      	ldr	r1, [r7, #8]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3380      	adds	r3, #128	; 0x80
 80056c0:	461a      	mov	r2, r3
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	025b      	lsls	r3, r3, #9
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	f7fc fec2 	bl	8002450 <HAL_DMA_Start_IT>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d01c      	beq.n	800570c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80056e0:	f023 0302 	bic.w	r3, r3, #2
 80056e4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a19      	ldr	r2, [pc, #100]	; (8005750 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80056ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e018      	b.n	800573e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800570c:	f04f 33ff 	mov.w	r3, #4294967295
 8005710:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	025b      	lsls	r3, r3, #9
 8005716:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005718:	2390      	movs	r3, #144	; 0x90
 800571a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800571c:	2300      	movs	r3, #0
 800571e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005720:	2300      	movs	r3, #0
 8005722:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005724:	2301      	movs	r3, #1
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f107 0210 	add.w	r2, r7, #16
 8005730:	4611      	mov	r1, r2
 8005732:	4618      	mov	r0, r3
 8005734:	f002 fa06 	bl	8007b44 <SDIO_ConfigData>

      return HAL_OK;
 8005738:	2300      	movs	r3, #0
 800573a:	e000      	b.n	800573e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800573c:	2302      	movs	r3, #2
  }
}
 800573e:	4618      	mov	r0, r3
 8005740:	3730      	adds	r7, #48	; 0x30
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	08005f8d 	.word	0x08005f8d
 800574c:	08006029 	.word	0x08006029
 8005750:	004005ff 	.word	0x004005ff
 8005754:	4225858c 	.word	0x4225858c

08005758 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005764:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <HAL_SD_IRQHandler+0x2e>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0308 	and.w	r3, r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fff6 	bl	8006770 <SD_Read_IT>
 8005784:	e165      	b.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 808f 	beq.w	80058b4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800579e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80057ae:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80057b2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 0201 	bic.w	r2, r2, #1
 80057c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d039      	beq.n	8005842 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f003 0302 	and.w	r3, r3, #2
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <HAL_SD_IRQHandler+0x8a>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d011      	beq.n	8005806 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f002 fa82 	bl	8007cf0 <SDMMC_CmdStopTransfer>
 80057ec:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f943 	bl	8005a8c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f240 523a 	movw	r2, #1338	; 0x53a
 800580e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <HAL_SD_IRQHandler+0xda>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f000 f920 	bl	8005a78 <HAL_SD_RxCpltCallback>
 8005838:	e10b      	b.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 f912 	bl	8005a64 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005840:	e107      	b.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8102 	beq.w	8005a52 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f003 0320 	and.w	r3, r3, #32
 8005854:	2b00      	cmp	r3, #0
 8005856:	d011      	beq.n	800587c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f002 fa47 	bl	8007cf0 <SDMMC_CmdStopTransfer>
 8005862:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f908 	bl	8005a8c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 80e5 	bne.w	8005a52 <HAL_SD_IRQHandler+0x2fa>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b00      	cmp	r3, #0
 8005890:	f040 80df 	bne.w	8005a52 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0208 	bic.w	r2, r2, #8
 80058a2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 f8d9 	bl	8005a64 <HAL_SD_TxCpltCallback>
}
 80058b2:	e0ce      	b.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d008      	beq.n	80058d4 <HAL_SD_IRQHandler+0x17c>
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d003      	beq.n	80058d4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 ffa0 	bl	8006812 <SD_Write_IT>
 80058d2:	e0be      	b.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058da:	f240 233a 	movw	r3, #570	; 0x23a
 80058de:	4013      	ands	r3, r2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80b6 	beq.w	8005a52 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	f043 0202 	orr.w	r2, r3, #2
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	f003 0308 	and.w	r3, r3, #8
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005912:	f043 0208 	orr.w	r2, r3, #8
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	f003 0320 	and.w	r3, r3, #32
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	f043 0220 	orr.w	r2, r3, #32
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	f043 0210 	orr.w	r2, r3, #16
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005960:	f043 0208 	orr.w	r2, r3, #8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f240 723a 	movw	r2, #1850	; 0x73a
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6812      	ldr	r2, [r2, #0]
 800597c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005980:	f023 0302 	bic.w	r3, r3, #2
 8005984:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4618      	mov	r0, r3
 800598c:	f002 f9b0 	bl	8007cf0 <SDMMC_CmdStopTransfer>
 8005990:	4602      	mov	r2, r0
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f869 	bl	8005a8c <HAL_SD_ErrorCallback>
}
 80059ba:	e04a      	b.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d045      	beq.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d104      	bne.n	80059da <HAL_SD_IRQHandler+0x282>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d011      	beq.n	80059fe <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059de:	4a1f      	ldr	r2, [pc, #124]	; (8005a5c <HAL_SD_IRQHandler+0x304>)
 80059e0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e6:	4618      	mov	r0, r3
 80059e8:	f7fc fd8a 	bl	8002500 <HAL_DMA_Abort_IT>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d02f      	beq.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fb68 	bl	80060cc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80059fc:	e029      	b.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d104      	bne.n	8005a12 <HAL_SD_IRQHandler+0x2ba>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d011      	beq.n	8005a36 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	4a12      	ldr	r2, [pc, #72]	; (8005a60 <HAL_SD_IRQHandler+0x308>)
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fc fd6e 	bl	8002500 <HAL_DMA_Abort_IT>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d013      	beq.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fb83 	bl	800613a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005a34:	e00d      	b.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f828 	bl	8005aa0 <HAL_SD_AbortCallback>
}
 8005a50:	e7ff      	b.n	8005a52 <HAL_SD_IRQHandler+0x2fa>
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	080060cd 	.word	0x080060cd
 8005a60:	0800613b 	.word	0x0800613b

08005a64 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ac2:	0f9b      	lsrs	r3, r3, #30
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ace:	0e9b      	lsrs	r3, r3, #26
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ae0:	0e1b      	lsrs	r3, r3, #24
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	b2da      	uxtb	r2, r3
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af2:	0c1b      	lsrs	r3, r3, #16
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005afe:	0a1b      	lsrs	r3, r3, #8
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b14:	0d1b      	lsrs	r3, r3, #20
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b20:	0c1b      	lsrs	r3, r3, #16
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 030f 	and.w	r3, r3, #15
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b32:	0bdb      	lsrs	r3, r3, #15
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b44:	0b9b      	lsrs	r3, r3, #14
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b56:	0b5b      	lsrs	r3, r3, #13
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b68:	0b1b      	lsrs	r3, r3, #12
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f003 0301 	and.w	r3, r3, #1
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d163      	bne.n	8005c4c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b88:	009a      	lsls	r2, r3, #2
 8005b8a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b8e:	4013      	ands	r3, r2
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b94:	0f92      	lsrs	r2, r2, #30
 8005b96:	431a      	orrs	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ba0:	0edb      	lsrs	r3, r3, #27
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	f003 0307 	and.w	r3, r3, #7
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bb2:	0e1b      	lsrs	r3, r3, #24
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc4:	0d5b      	lsrs	r3, r3, #21
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bd6:	0c9b      	lsrs	r3, r3, #18
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005be8:	0bdb      	lsrs	r3, r3, #15
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	f003 0307 	and.w	r3, r3, #7
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	1c5a      	adds	r2, r3, #1
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	7e1b      	ldrb	r3, [r3, #24]
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	3302      	adds	r3, #2
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005c16:	fb02 f203 	mul.w	r2, r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	7a1b      	ldrb	r3, [r3, #8]
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	f003 030f 	and.w	r3, r3, #15
 8005c28:	2201      	movs	r2, #1
 8005c2a:	409a      	lsls	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005c38:	0a52      	lsrs	r2, r2, #9
 8005c3a:	fb02 f203 	mul.w	r2, r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c48:	661a      	str	r2, [r3, #96]	; 0x60
 8005c4a:	e031      	b.n	8005cb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d11d      	bne.n	8005c90 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c58:	041b      	lsls	r3, r3, #16
 8005c5a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c62:	0c1b      	lsrs	r3, r3, #16
 8005c64:	431a      	orrs	r2, r3
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	029a      	lsls	r2, r3, #10
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c84:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	661a      	str	r2, [r3, #96]	; 0x60
 8005c8e:	e00f      	b.n	8005cb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a58      	ldr	r2, [pc, #352]	; (8005df8 <HAL_SD_GetCardCSD+0x344>)
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e09d      	b.n	8005dec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cb4:	0b9b      	lsrs	r3, r3, #14
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cc6:	09db      	lsrs	r3, r3, #7
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cce:	b2da      	uxtb	r2, r3
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce8:	0fdb      	lsrs	r3, r3, #31
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	0f5b      	lsrs	r3, r3, #29
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	f003 0303 	and.w	r3, r3, #3
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	0e9b      	lsrs	r3, r3, #26
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	0d9b      	lsrs	r3, r3, #22
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	b2da      	uxtb	r2, r3
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2a:	0d5b      	lsrs	r3, r3, #21
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d46:	0c1b      	lsrs	r3, r3, #16
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5a:	0bdb      	lsrs	r3, r3, #15
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d6e:	0b9b      	lsrs	r3, r3, #14
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d82:	0b5b      	lsrs	r3, r3, #13
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	0b1b      	lsrs	r3, r3, #12
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	0a9b      	lsrs	r3, r3, #10
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0303 	and.w	r3, r3, #3
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbe:	0a1b      	lsrs	r3, r3, #8
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	004005ff 	.word	0x004005ff

08005dfc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005e54:	b5b0      	push	{r4, r5, r7, lr}
 8005e56:	b08e      	sub	sp, #56	; 0x38
 8005e58:	af04      	add	r7, sp, #16
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2203      	movs	r2, #3
 8005e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d02e      	beq.n	8005ecc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e74:	d106      	bne.n	8005e84 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
 8005e82:	e029      	b.n	8005ed8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e8a:	d10a      	bne.n	8005ea2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 fb0f 	bl	80064b0 <SD_WideBus_Enable>
 8005e92:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	431a      	orrs	r2, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	639a      	str	r2, [r3, #56]	; 0x38
 8005ea0:	e01a      	b.n	8005ed8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fb4c 	bl	8006546 <SD_WideBus_Disable>
 8005eae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	639a      	str	r2, [r3, #56]	; 0x38
 8005ebc:	e00c      	b.n	8005ed8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ec2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	639a      	str	r2, [r3, #56]	; 0x38
 8005eca:	e005      	b.n	8005ed8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	e024      	b.n	8005f3e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	699b      	ldr	r3, [r3, #24]
 8005f14:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681d      	ldr	r5, [r3, #0]
 8005f1a:	466c      	mov	r4, sp
 8005f1c:	f107 0318 	add.w	r3, r7, #24
 8005f20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005f28:	f107 030c 	add.w	r3, r7, #12
 8005f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f2e:	4628      	mov	r0, r5
 8005f30:	f001 fd58 	bl	80079e4 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3728      	adds	r7, #40	; 0x28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bdb0      	pop	{r4, r5, r7, pc}
 8005f46:	bf00      	nop
 8005f48:	004005ff 	.word	0x004005ff

08005f4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b086      	sub	sp, #24
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005f58:	f107 030c 	add.w	r3, r7, #12
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa7e 	bl	8006460 <SD_SendStatus>
 8005f64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	0a5b      	lsrs	r3, r3, #9
 8005f7c:	f003 030f 	and.w	r3, r3, #15
 8005f80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005f82:	693b      	ldr	r3, [r7, #16]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3718      	adds	r7, #24
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005fb6:	b580      	push	{r7, lr}
 8005fb8:	b084      	sub	sp, #16
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	2b82      	cmp	r3, #130	; 0x82
 8005fca:	d111      	bne.n	8005ff0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f001 fe8d 	bl	8007cf0 <SDMMC_CmdStopTransfer>
 8005fd6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	431a      	orrs	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005fea:	68f8      	ldr	r0, [r7, #12]
 8005fec:	f7ff fd4e 	bl	8005a8c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0208 	bic.w	r2, r2, #8
 8005ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f240 523a 	movw	r2, #1338	; 0x53a
 8006008:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f7ff fd2d 	bl	8005a78 <HAL_SD_RxCpltCallback>
#endif
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fc fc0e 	bl	8002858 <HAL_DMA_GetError>
 800603c:	4603      	mov	r3, r0
 800603e:	2b02      	cmp	r3, #2
 8006040:	d03e      	beq.n	80060c0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006048:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006050:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d002      	beq.n	800605e <SD_DMAError+0x36>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d12d      	bne.n	80060ba <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <SD_DMAError+0xa0>)
 8006064:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006074:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006082:	6978      	ldr	r0, [r7, #20]
 8006084:	f7ff ff62 	bl	8005f4c <HAL_SD_GetCardState>
 8006088:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b06      	cmp	r3, #6
 800608e:	d002      	beq.n	8006096 <SD_DMAError+0x6e>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b05      	cmp	r3, #5
 8006094:	d10a      	bne.n	80060ac <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f001 fe28 	bl	8007cf0 <SDMMC_CmdStopTransfer>
 80060a0:	4602      	mov	r2, r0
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	431a      	orrs	r2, r3
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2200      	movs	r2, #0
 80060b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80060ba:	6978      	ldr	r0, [r7, #20]
 80060bc:	f7ff fce6 	bl	8005a8c <HAL_SD_ErrorCallback>
#endif
  }
}
 80060c0:	bf00      	nop
 80060c2:	3718      	adds	r7, #24
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	004005ff 	.word	0x004005ff

080060cc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f240 523a 	movw	r2, #1338	; 0x53a
 80060e2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff ff31 	bl	8005f4c <HAL_SD_GetCardState>
 80060ea:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b06      	cmp	r3, #6
 80060fe:	d002      	beq.n	8006106 <SD_DMATxAbort+0x3a>
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2b05      	cmp	r3, #5
 8006104:	d10a      	bne.n	800611c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fdf0 	bl	8007cf0 <SDMMC_CmdStopTransfer>
 8006110:	4602      	mov	r2, r0
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	431a      	orrs	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f7ff fcbb 	bl	8005aa0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800612a:	e002      	b.n	8006132 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fcad 	bl	8005a8c <HAL_SD_ErrorCallback>
}
 8006132:	bf00      	nop
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b084      	sub	sp, #16
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f240 523a 	movw	r2, #1338	; 0x53a
 8006150:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff fefa 	bl	8005f4c <HAL_SD_GetCardState>
 8006158:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b06      	cmp	r3, #6
 800616c:	d002      	beq.n	8006174 <SD_DMARxAbort+0x3a>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b05      	cmp	r3, #5
 8006172:	d10a      	bne.n	800618a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4618      	mov	r0, r3
 800617a:	f001 fdb9 	bl	8007cf0 <SDMMC_CmdStopTransfer>
 800617e:	4602      	mov	r2, r0
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006184:	431a      	orrs	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff fc84 	bl	8005aa0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006198:	e002      	b.n	80061a0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7ff fc76 	bl	8005a8c <HAL_SD_ErrorCallback>
}
 80061a0:	bf00      	nop
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b094      	sub	sp, #80	; 0x50
 80061ac:	af04      	add	r7, sp, #16
 80061ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80061b0:	2301      	movs	r3, #1
 80061b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 fc6b 	bl	8007a94 <SDIO_GetPowerState>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061c8:	e0b7      	b.n	800633a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d02f      	beq.n	8006232 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fe94 	bl	8007f04 <SDMMC_CmdSendCID>
 80061dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	e0a8      	b.n	800633a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 fc95 	bl	8007b1e <SDIO_GetResponse>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2104      	movs	r1, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f001 fc8c 	bl	8007b1e <SDIO_GetResponse>
 8006206:	4602      	mov	r2, r0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2108      	movs	r1, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f001 fc83 	bl	8007b1e <SDIO_GetResponse>
 8006218:	4602      	mov	r2, r0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	210c      	movs	r1, #12
 8006224:	4618      	mov	r0, r3
 8006226:	f001 fc7a 	bl	8007b1e <SDIO_GetResponse>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	2b03      	cmp	r3, #3
 8006238:	d00d      	beq.n	8006256 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f107 020e 	add.w	r2, r7, #14
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f001 fe9a 	bl	8007f7e <SDMMC_CmdSetRelAdd>
 800624a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <SD_InitCard+0xae>
    {
      return errorstate;
 8006252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006254:	e071      	b.n	800633a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	2b03      	cmp	r3, #3
 800625c:	d036      	beq.n	80062cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800625e:	89fb      	ldrh	r3, [r7, #14]
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f001 fe64 	bl	8007f40 <SDMMC_CmdSendCSD>
 8006278:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800627a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006282:	e05a      	b.n	800633a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fc47 	bl	8007b1e <SDIO_GetResponse>
 8006290:	4602      	mov	r2, r0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2104      	movs	r1, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fc3e 	bl	8007b1e <SDIO_GetResponse>
 80062a2:	4602      	mov	r2, r0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2108      	movs	r1, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 fc35 	bl	8007b1e <SDIO_GetResponse>
 80062b4:	4602      	mov	r2, r0
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	210c      	movs	r1, #12
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 fc2c 	bl	8007b1e <SDIO_GetResponse>
 80062c6:	4602      	mov	r2, r0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2104      	movs	r1, #4
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 fc23 	bl	8007b1e <SDIO_GetResponse>
 80062d8:	4603      	mov	r3, r0
 80062da:	0d1a      	lsrs	r2, r3, #20
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80062e0:	f107 0310 	add.w	r3, r7, #16
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fbe4 	bl	8005ab4 <HAL_SD_GetCardCSD>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062f6:	e020      	b.n	800633a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	f04f 0400 	mov.w	r4, #0
 8006306:	461a      	mov	r2, r3
 8006308:	4623      	mov	r3, r4
 800630a:	4608      	mov	r0, r1
 800630c:	f001 fd12 	bl	8007d34 <SDMMC_CmdSelDesel>
 8006310:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006314:	2b00      	cmp	r3, #0
 8006316:	d001      	beq.n	800631c <SD_InitCard+0x174>
  {
    return errorstate;
 8006318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631a:	e00e      	b.n	800633a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681d      	ldr	r5, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	466c      	mov	r4, sp
 8006324:	f103 0210 	add.w	r2, r3, #16
 8006328:	ca07      	ldmia	r2, {r0, r1, r2}
 800632a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800632e:	3304      	adds	r3, #4
 8006330:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006332:	4628      	mov	r0, r5
 8006334:	f001 fb56 	bl	80079e4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3740      	adds	r7, #64	; 0x40
 800633e:	46bd      	mov	sp, r7
 8006340:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006344 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f001 fd0c 	bl	8007d7a <SDMMC_CmdGoIdleState>
 8006362:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <SD_PowerON+0x2a>
  {
    return errorstate;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	e072      	b.n	8006454 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f001 fd1f 	bl	8007db6 <SDMMC_CmdOperCond>
 8006378:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f001 fcf5 	bl	8007d7a <SDMMC_CmdGoIdleState>
 8006390:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e05b      	b.n	8006454 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d137      	bne.n	800641a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 fd1f 	bl	8007df4 <SDMMC_CmdAppCommand>
 80063b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d02d      	beq.n	800641a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063c2:	e047      	b.n	8006454 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 fd12 	bl	8007df4 <SDMMC_CmdAppCommand>
 80063d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <SD_PowerON+0x98>
    {
      return errorstate;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	e03b      	b.n	8006454 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	491e      	ldr	r1, [pc, #120]	; (800645c <SD_PowerON+0x118>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fd28 	bl	8007e38 <SDMMC_CmdAppOperCommand>
 80063e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063f4:	e02e      	b.n	8006454 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 fb8e 	bl	8007b1e <SDIO_GetResponse>
 8006402:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	0fdb      	lsrs	r3, r3, #31
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <SD_PowerON+0xcc>
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <SD_PowerON+0xce>
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]

    count++;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	3301      	adds	r3, #1
 8006418:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006420:	4293      	cmp	r3, r2
 8006422:	d802      	bhi.n	800642a <SD_PowerON+0xe6>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0cc      	beq.n	80063c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006430:	4293      	cmp	r3, r2
 8006432:	d902      	bls.n	800643a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006438:	e00c      	b.n	8006454 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	645a      	str	r2, [r3, #68]	; 0x44
 800644a:	e002      	b.n	8006452 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	c1100000 	.word	0xc1100000

08006460 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d102      	bne.n	8006476 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006470:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006474:	e018      	b.n	80064a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647e:	041b      	lsls	r3, r3, #16
 8006480:	4619      	mov	r1, r3
 8006482:	4610      	mov	r0, r2
 8006484:	f001 fd9c 	bl	8007fc0 <SDMMC_CmdSendStatus>
 8006488:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d001      	beq.n	8006494 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	e009      	b.n	80064a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2100      	movs	r1, #0
 800649a:	4618      	mov	r0, r3
 800649c:	f001 fb3f 	bl	8007b1e <SDIO_GetResponse>
 80064a0:	4602      	mov	r2, r0
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3710      	adds	r7, #16
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	2300      	movs	r3, #0
 80064be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2100      	movs	r1, #0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f001 fb29 	bl	8007b1e <SDIO_GetResponse>
 80064cc:	4603      	mov	r3, r0
 80064ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064d6:	d102      	bne.n	80064de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064dc:	e02f      	b.n	800653e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064de:	f107 030c 	add.w	r3, r7, #12
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f879 	bl	80065dc <SD_FindSCR>
 80064ea:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	e023      	b.n	800653e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01c      	beq.n	800653a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006508:	041b      	lsls	r3, r3, #16
 800650a:	4619      	mov	r1, r3
 800650c:	4610      	mov	r0, r2
 800650e:	f001 fc71 	bl	8007df4 <SDMMC_CmdAppCommand>
 8006512:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	e00f      	b.n	800653e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2102      	movs	r1, #2
 8006524:	4618      	mov	r0, r3
 8006526:	f001 fcaa 	bl	8007e7e <SDMMC_CmdBusWidth>
 800652a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	e003      	b.n	800653e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006536:	2300      	movs	r3, #0
 8006538:	e001      	b.n	800653e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800653a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b086      	sub	sp, #24
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]
 8006552:	2300      	movs	r3, #0
 8006554:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2100      	movs	r1, #0
 800655c:	4618      	mov	r0, r3
 800655e:	f001 fade 	bl	8007b1e <SDIO_GetResponse>
 8006562:	4603      	mov	r3, r0
 8006564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006568:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800656c:	d102      	bne.n	8006574 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800656e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006572:	e02f      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006574:	f107 030c 	add.w	r3, r7, #12
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f82e 	bl	80065dc <SD_FindSCR>
 8006580:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	e023      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d01c      	beq.n	80065d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800659e:	041b      	lsls	r3, r3, #16
 80065a0:	4619      	mov	r1, r3
 80065a2:	4610      	mov	r0, r2
 80065a4:	f001 fc26 	bl	8007df4 <SDMMC_CmdAppCommand>
 80065a8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	e00f      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2100      	movs	r1, #0
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 fc5f 	bl	8007e7e <SDMMC_CmdBusWidth>
 80065c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	e003      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80065cc:	2300      	movs	r3, #0
 80065ce:	e001      	b.n	80065d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80065d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3718      	adds	r7, #24
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80065dc:	b590      	push	{r4, r7, lr}
 80065de:	b08f      	sub	sp, #60	; 0x3c
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80065e6:	f7fb fd45 	bl	8002074 <HAL_GetTick>
 80065ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80065f0:	2300      	movs	r3, #0
 80065f2:	60bb      	str	r3, [r7, #8]
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2108      	movs	r1, #8
 8006602:	4618      	mov	r0, r3
 8006604:	f001 faca 	bl	8007b9c <SDMMC_CmdBlockLength>
 8006608:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	2b00      	cmp	r3, #0
 800660e:	d001      	beq.n	8006614 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	e0a9      	b.n	8006768 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	4619      	mov	r1, r3
 8006620:	4610      	mov	r0, r2
 8006622:	f001 fbe7 	bl	8007df4 <SDMMC_CmdAppCommand>
 8006626:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d001      	beq.n	8006632 <SD_FindSCR+0x56>
  {
    return errorstate;
 800662e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006630:	e09a      	b.n	8006768 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006632:	f04f 33ff 	mov.w	r3, #4294967295
 8006636:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006638:	2308      	movs	r3, #8
 800663a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800663c:	2330      	movs	r3, #48	; 0x30
 800663e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006640:	2302      	movs	r3, #2
 8006642:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006644:	2300      	movs	r3, #0
 8006646:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8006648:	2301      	movs	r3, #1
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f107 0210 	add.w	r2, r7, #16
 8006654:	4611      	mov	r1, r2
 8006656:	4618      	mov	r0, r3
 8006658:	f001 fa74 	bl	8007b44 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4618      	mov	r0, r3
 8006662:	f001 fc2e 	bl	8007ec2 <SDMMC_CmdSendSCR>
 8006666:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	2b00      	cmp	r3, #0
 800666c:	d022      	beq.n	80066b4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800666e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006670:	e07a      	b.n	8006768 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800667c:	2b00      	cmp	r3, #0
 800667e:	d00e      	beq.n	800669e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	f107 0208 	add.w	r2, r7, #8
 800668c:	18d4      	adds	r4, r2, r3
 800668e:	4608      	mov	r0, r1
 8006690:	f001 f9d3 	bl	8007a3a <SDIO_ReadFIFO>
 8006694:	4603      	mov	r3, r0
 8006696:	6023      	str	r3, [r4, #0]
      index++;
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	3301      	adds	r3, #1
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800669e:	f7fb fce9 	bl	8002074 <HAL_GetTick>
 80066a2:	4602      	mov	r2, r0
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	1ad3      	subs	r3, r2, r3
 80066a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ac:	d102      	bne.n	80066b4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80066ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066b2:	e059      	b.n	8006768 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066ba:	f240 432a 	movw	r3, #1066	; 0x42a
 80066be:	4013      	ands	r3, r2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d0d6      	beq.n	8006672 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ca:	f003 0308 	and.w	r3, r3, #8
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d005      	beq.n	80066de <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2208      	movs	r2, #8
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80066da:	2308      	movs	r3, #8
 80066dc:	e044      	b.n	8006768 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066e4:	f003 0302 	and.w	r3, r3, #2
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2202      	movs	r2, #2
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80066f4:	2302      	movs	r3, #2
 80066f6:	e037      	b.n	8006768 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d005      	beq.n	8006712 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2220      	movs	r2, #32
 800670c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800670e:	2320      	movs	r3, #32
 8006710:	e02a      	b.n	8006768 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f240 523a 	movw	r2, #1338	; 0x53a
 800671a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	061a      	lsls	r2, r3, #24
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006728:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	0a1b      	lsrs	r3, r3, #8
 800672e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006732:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	0e1b      	lsrs	r3, r3, #24
 8006738:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	601a      	str	r2, [r3, #0]
    scr++;
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	3304      	adds	r3, #4
 8006742:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	061a      	lsls	r2, r3, #24
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	021b      	lsls	r3, r3, #8
 800674c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006750:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	0a1b      	lsrs	r3, r3, #8
 8006756:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800675a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	0e1b      	lsrs	r3, r3, #24
 8006760:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	373c      	adds	r7, #60	; 0x3c
 800676c:	46bd      	mov	sp, r7
 800676e:	bd90      	pop	{r4, r7, pc}

08006770 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d03f      	beq.n	800680a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e033      	b.n	80067f8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f001 f950 	bl	8007a3a <SDIO_ReadFIFO>
 800679a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	3301      	adds	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	0a1b      	lsrs	r3, r3, #8
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	3301      	adds	r3, #1
 80067be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	3b01      	subs	r3, #1
 80067c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	3301      	adds	r3, #1
 80067d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	3b01      	subs	r3, #1
 80067da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	0e1b      	lsrs	r3, r3, #24
 80067e0:	b2da      	uxtb	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	3301      	adds	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	3b01      	subs	r3, #1
 80067f0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	3301      	adds	r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	2b07      	cmp	r3, #7
 80067fc:	d9c8      	bls.n	8006790 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	693a      	ldr	r2, [r7, #16]
 8006808:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800680a:	bf00      	nop
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b086      	sub	sp, #24
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d043      	beq.n	80068b4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800682c:	2300      	movs	r3, #0
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	e037      	b.n	80068a2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	3b01      	subs	r3, #1
 8006842:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	021a      	lsls	r2, r3, #8
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	4313      	orrs	r3, r2
 800684e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	3b01      	subs	r3, #1
 800685a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	041a      	lsls	r2, r3, #16
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4313      	orrs	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	3301      	adds	r3, #1
 800686c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	3b01      	subs	r3, #1
 8006872:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	061a      	lsls	r2, r3, #24
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4313      	orrs	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3301      	adds	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	3b01      	subs	r3, #1
 800688a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f107 0208 	add.w	r2, r7, #8
 8006894:	4611      	mov	r1, r2
 8006896:	4618      	mov	r0, r3
 8006898:	f001 f8dc 	bl	8007a54 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	3301      	adds	r3, #1
 80068a0:	617b      	str	r3, [r7, #20]
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b07      	cmp	r3, #7
 80068a6:	d9c4      	bls.n	8006832 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68fa      	ldr	r2, [r7, #12]
 80068ac:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80068b4:	bf00      	nop
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d101      	bne.n	80068ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e056      	b.n	800697c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d106      	bne.n	80068ee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f7fb f9d3 	bl	8001c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2202      	movs	r2, #2
 80068f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006904:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	431a      	orrs	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	431a      	orrs	r2, r3
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	431a      	orrs	r2, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6a1b      	ldr	r3, [r3, #32]
 8006936:	ea42 0103 	orr.w	r1, r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	0c1b      	lsrs	r3, r3, #16
 800694c:	f003 0104 	and.w	r1, r3, #4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69da      	ldr	r2, [r3, #28]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800696a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e01d      	b.n	80069d2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d106      	bne.n	80069b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fb f9ba 	bl	8001d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	3304      	adds	r3, #4
 80069c0:	4619      	mov	r1, r3
 80069c2:	4610      	mov	r0, r2
 80069c4:	f000 fa54 	bl	8006e70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2202      	movs	r2, #2
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2b06      	cmp	r3, #6
 80069fa:	d007      	beq.n	8006a0c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	2201      	movs	r2, #1
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fb54 	bl	80070e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a15      	ldr	r2, [pc, #84]	; (8006a98 <HAL_TIM_PWM_Start+0x74>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d004      	beq.n	8006a50 <HAL_TIM_PWM_Start+0x2c>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a14      	ldr	r2, [pc, #80]	; (8006a9c <HAL_TIM_PWM_Start+0x78>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d101      	bne.n	8006a54 <HAL_TIM_PWM_Start+0x30>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_TIM_PWM_Start+0x32>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	f003 0307 	and.w	r3, r3, #7
 8006a74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2b06      	cmp	r3, #6
 8006a7a:	d007      	beq.n	8006a8c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	40010000 	.word	0x40010000
 8006a9c:	40010400 	.word	0x40010400

08006aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	2b02      	cmp	r3, #2
 8006ab4:	d122      	bne.n	8006afc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	2b02      	cmp	r3, #2
 8006ac2:	d11b      	bne.n	8006afc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0202 	mvn.w	r2, #2
 8006acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d003      	beq.n	8006aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f9a5 	bl	8006e32 <HAL_TIM_IC_CaptureCallback>
 8006ae8:	e005      	b.n	8006af6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f997 	bl	8006e1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f9a8 	bl	8006e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	d122      	bne.n	8006b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d11b      	bne.n	8006b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f06f 0204 	mvn.w	r2, #4
 8006b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2202      	movs	r2, #2
 8006b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f97b 	bl	8006e32 <HAL_TIM_IC_CaptureCallback>
 8006b3c:	e005      	b.n	8006b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 f96d 	bl	8006e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 f97e 	bl	8006e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f003 0308 	and.w	r3, r3, #8
 8006b5a:	2b08      	cmp	r3, #8
 8006b5c:	d122      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f003 0308 	and.w	r3, r3, #8
 8006b68:	2b08      	cmp	r3, #8
 8006b6a:	d11b      	bne.n	8006ba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f06f 0208 	mvn.w	r2, #8
 8006b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2204      	movs	r2, #4
 8006b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f003 0303 	and.w	r3, r3, #3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d003      	beq.n	8006b92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f951 	bl	8006e32 <HAL_TIM_IC_CaptureCallback>
 8006b90:	e005      	b.n	8006b9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f943 	bl	8006e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 f954 	bl	8006e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	f003 0310 	and.w	r3, r3, #16
 8006bae:	2b10      	cmp	r3, #16
 8006bb0:	d122      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	68db      	ldr	r3, [r3, #12]
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d11b      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0210 	mvn.w	r2, #16
 8006bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2208      	movs	r2, #8
 8006bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f927 	bl	8006e32 <HAL_TIM_IC_CaptureCallback>
 8006be4:	e005      	b.n	8006bf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f919 	bl	8006e1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f92a 	bl	8006e46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d10e      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d107      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0201 	mvn.w	r2, #1
 8006c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7fa fe98 	bl	8001954 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2e:	2b80      	cmp	r3, #128	; 0x80
 8006c30:	d10e      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c3c:	2b80      	cmp	r3, #128	; 0x80
 8006c3e:	d107      	bne.n	8006c50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 faf6 	bl	800723c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	691b      	ldr	r3, [r3, #16]
 8006c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5a:	2b40      	cmp	r3, #64	; 0x40
 8006c5c:	d10e      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c68:	2b40      	cmp	r3, #64	; 0x40
 8006c6a:	d107      	bne.n	8006c7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f8ef 	bl	8006e5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	f003 0320 	and.w	r3, r3, #32
 8006c86:	2b20      	cmp	r3, #32
 8006c88:	d10e      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	f003 0320 	and.w	r3, r3, #32
 8006c94:	2b20      	cmp	r3, #32
 8006c96:	d107      	bne.n	8006ca8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f06f 0220 	mvn.w	r2, #32
 8006ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fac0 	bl	8007228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_TIM_ConfigClockSource+0x18>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	e0a6      	b.n	8006e16 <HAL_TIM_ConfigClockSource+0x166>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006cee:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b40      	cmp	r3, #64	; 0x40
 8006cfe:	d067      	beq.n	8006dd0 <HAL_TIM_ConfigClockSource+0x120>
 8006d00:	2b40      	cmp	r3, #64	; 0x40
 8006d02:	d80b      	bhi.n	8006d1c <HAL_TIM_ConfigClockSource+0x6c>
 8006d04:	2b10      	cmp	r3, #16
 8006d06:	d073      	beq.n	8006df0 <HAL_TIM_ConfigClockSource+0x140>
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d802      	bhi.n	8006d12 <HAL_TIM_ConfigClockSource+0x62>
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d06f      	beq.n	8006df0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006d10:	e078      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d12:	2b20      	cmp	r3, #32
 8006d14:	d06c      	beq.n	8006df0 <HAL_TIM_ConfigClockSource+0x140>
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d06a      	beq.n	8006df0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006d1a:	e073      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d1c:	2b70      	cmp	r3, #112	; 0x70
 8006d1e:	d00d      	beq.n	8006d3c <HAL_TIM_ConfigClockSource+0x8c>
 8006d20:	2b70      	cmp	r3, #112	; 0x70
 8006d22:	d804      	bhi.n	8006d2e <HAL_TIM_ConfigClockSource+0x7e>
 8006d24:	2b50      	cmp	r3, #80	; 0x50
 8006d26:	d033      	beq.n	8006d90 <HAL_TIM_ConfigClockSource+0xe0>
 8006d28:	2b60      	cmp	r3, #96	; 0x60
 8006d2a:	d041      	beq.n	8006db0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006d2c:	e06a      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d32:	d066      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0x152>
 8006d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d38:	d017      	beq.n	8006d6a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006d3a:	e063      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6818      	ldr	r0, [r3, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	6899      	ldr	r1, [r3, #8]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	f000 f9aa 	bl	80070a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006d5e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	609a      	str	r2, [r3, #8]
      break;
 8006d68:	e04c      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	6899      	ldr	r1, [r3, #8]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f000 f993 	bl	80070a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d8c:	609a      	str	r2, [r3, #8]
      break;
 8006d8e:	e039      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	6859      	ldr	r1, [r3, #4]
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	f000 f907 	bl	8006fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2150      	movs	r1, #80	; 0x50
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 f960 	bl	800706e <TIM_ITRx_SetConfig>
      break;
 8006dae:	e029      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6818      	ldr	r0, [r3, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	6859      	ldr	r1, [r3, #4]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	f000 f926 	bl	800700e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2160      	movs	r1, #96	; 0x60
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 f950 	bl	800706e <TIM_ITRx_SetConfig>
      break;
 8006dce:	e019      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6818      	ldr	r0, [r3, #0]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	6859      	ldr	r1, [r3, #4]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	f000 f8e7 	bl	8006fb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2140      	movs	r1, #64	; 0x40
 8006de8:	4618      	mov	r0, r3
 8006dea:	f000 f940 	bl	800706e <TIM_ITRx_SetConfig>
      break;
 8006dee:	e009      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f000 f937 	bl	800706e <TIM_ITRx_SetConfig>
      break;
 8006e00:	e000      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006e02:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e14:	2300      	movs	r3, #0
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e1e:	b480      	push	{r7}
 8006e20:	b083      	sub	sp, #12
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e26:	bf00      	nop
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b083      	sub	sp, #12
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e3a:	bf00      	nop
 8006e3c:	370c      	adds	r7, #12
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b083      	sub	sp, #12
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e4e:	bf00      	nop
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e62:	bf00      	nop
 8006e64:	370c      	adds	r7, #12
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b085      	sub	sp, #20
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a40      	ldr	r2, [pc, #256]	; (8006f84 <TIM_Base_SetConfig+0x114>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d013      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8e:	d00f      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a3d      	ldr	r2, [pc, #244]	; (8006f88 <TIM_Base_SetConfig+0x118>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00b      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a3c      	ldr	r2, [pc, #240]	; (8006f8c <TIM_Base_SetConfig+0x11c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d007      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a3b      	ldr	r2, [pc, #236]	; (8006f90 <TIM_Base_SetConfig+0x120>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d003      	beq.n	8006eb0 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a3a      	ldr	r2, [pc, #232]	; (8006f94 <TIM_Base_SetConfig+0x124>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d108      	bne.n	8006ec2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2f      	ldr	r2, [pc, #188]	; (8006f84 <TIM_Base_SetConfig+0x114>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d02b      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ed0:	d027      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2c      	ldr	r2, [pc, #176]	; (8006f88 <TIM_Base_SetConfig+0x118>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d023      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2b      	ldr	r2, [pc, #172]	; (8006f8c <TIM_Base_SetConfig+0x11c>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d01f      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2a      	ldr	r2, [pc, #168]	; (8006f90 <TIM_Base_SetConfig+0x120>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d01b      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a29      	ldr	r2, [pc, #164]	; (8006f94 <TIM_Base_SetConfig+0x124>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d017      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a28      	ldr	r2, [pc, #160]	; (8006f98 <TIM_Base_SetConfig+0x128>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d013      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a27      	ldr	r2, [pc, #156]	; (8006f9c <TIM_Base_SetConfig+0x12c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d00f      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <TIM_Base_SetConfig+0x130>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d00b      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a25      	ldr	r2, [pc, #148]	; (8006fa4 <TIM_Base_SetConfig+0x134>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d007      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a24      	ldr	r2, [pc, #144]	; (8006fa8 <TIM_Base_SetConfig+0x138>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a23      	ldr	r2, [pc, #140]	; (8006fac <TIM_Base_SetConfig+0x13c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d108      	bne.n	8006f34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	695b      	ldr	r3, [r3, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a0a      	ldr	r2, [pc, #40]	; (8006f84 <TIM_Base_SetConfig+0x114>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_Base_SetConfig+0xf8>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a0c      	ldr	r2, [pc, #48]	; (8006f94 <TIM_Base_SetConfig+0x124>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d103      	bne.n	8006f70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	615a      	str	r2, [r3, #20]
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	40010000 	.word	0x40010000
 8006f88:	40000400 	.word	0x40000400
 8006f8c:	40000800 	.word	0x40000800
 8006f90:	40000c00 	.word	0x40000c00
 8006f94:	40010400 	.word	0x40010400
 8006f98:	40014000 	.word	0x40014000
 8006f9c:	40014400 	.word	0x40014400
 8006fa0:	40014800 	.word	0x40014800
 8006fa4:	40001800 	.word	0x40001800
 8006fa8:	40001c00 	.word	0x40001c00
 8006fac:	40002000 	.word	0x40002000

08006fb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b087      	sub	sp, #28
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	f023 0201 	bic.w	r2, r3, #1
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	f023 030a 	bic.w	r3, r3, #10
 8006fec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	693a      	ldr	r2, [r7, #16]
 8006ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	697a      	ldr	r2, [r7, #20]
 8007000:	621a      	str	r2, [r3, #32]
}
 8007002:	bf00      	nop
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr

0800700e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800700e:	b480      	push	{r7}
 8007010:	b087      	sub	sp, #28
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	f023 0210 	bic.w	r2, r3, #16
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	031b      	lsls	r3, r3, #12
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800704a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4313      	orrs	r3, r2
 8007054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	621a      	str	r2, [r3, #32]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800706e:	b480      	push	{r7}
 8007070:	b085      	sub	sp, #20
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
 8007076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007084:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	f043 0307 	orr.w	r3, r3, #7
 8007090:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	68fa      	ldr	r2, [r7, #12]
 8007096:	609a      	str	r2, [r3, #8]
}
 8007098:	bf00      	nop
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	021a      	lsls	r2, r3, #8
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	431a      	orrs	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	609a      	str	r2, [r3, #8]
}
 80070d8:	bf00      	nop
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	60f8      	str	r0, [r7, #12]
 80070ec:	60b9      	str	r1, [r7, #8]
 80070ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	f003 031f 	and.w	r3, r3, #31
 80070f6:	2201      	movs	r2, #1
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a1a      	ldr	r2, [r3, #32]
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	43db      	mvns	r3, r3
 8007106:	401a      	ands	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a1a      	ldr	r2, [r3, #32]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	6879      	ldr	r1, [r7, #4]
 8007118:	fa01 f303 	lsl.w	r3, r1, r3
 800711c:	431a      	orrs	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	621a      	str	r2, [r3, #32]
}
 8007122:	bf00      	nop
 8007124:	371c      	adds	r7, #28
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
	...

08007130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d101      	bne.n	8007148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007144:	2302      	movs	r3, #2
 8007146:	e05a      	b.n	80071fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2202      	movs	r2, #2
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800716e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	4313      	orrs	r3, r2
 8007178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a21      	ldr	r2, [pc, #132]	; (800720c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d022      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007194:	d01d      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a1d      	ldr	r2, [pc, #116]	; (8007210 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d018      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a1b      	ldr	r2, [pc, #108]	; (8007214 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d013      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a1a      	ldr	r2, [pc, #104]	; (8007218 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d00e      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a18      	ldr	r2, [pc, #96]	; (800721c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d009      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a17      	ldr	r2, [pc, #92]	; (8007220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d004      	beq.n	80071d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a15      	ldr	r2, [pc, #84]	; (8007224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d10c      	bne.n	80071ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	4313      	orrs	r3, r2
 80071e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68ba      	ldr	r2, [r7, #8]
 80071ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40010000 	.word	0x40010000
 8007210:	40000400 	.word	0x40000400
 8007214:	40000800 	.word	0x40000800
 8007218:	40000c00 	.word	0x40000c00
 800721c:	40010400 	.word	0x40010400
 8007220:	40014000 	.word	0x40014000
 8007224:	40001800 	.word	0x40001800

08007228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d101      	bne.n	8007262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e03f      	b.n	80072e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7fa fda6 	bl	8001dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2224      	movs	r2, #36	; 0x24
 8007280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68da      	ldr	r2, [r3, #12]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f829 	bl	80072ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2220      	movs	r2, #32
 80072dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3708      	adds	r7, #8
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	b085      	sub	sp, #20
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68da      	ldr	r2, [r3, #12]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	430a      	orrs	r2, r1
 800730a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689a      	ldr	r2, [r3, #8]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	69db      	ldr	r3, [r3, #28]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800732e:	f023 030c 	bic.w	r3, r3, #12
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	68f9      	ldr	r1, [r7, #12]
 8007338:	430b      	orrs	r3, r1
 800733a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	69db      	ldr	r3, [r3, #28]
 8007356:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800735a:	f040 818b 	bne.w	8007674 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4ac1      	ldr	r2, [pc, #772]	; (8007668 <UART_SetConfig+0x37c>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d005      	beq.n	8007374 <UART_SetConfig+0x88>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4abf      	ldr	r2, [pc, #764]	; (800766c <UART_SetConfig+0x380>)
 800736e:	4293      	cmp	r3, r2
 8007370:	f040 80bd 	bne.w	80074ee <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007374:	f7fd fc28 	bl	8004bc8 <HAL_RCC_GetPCLK2Freq>
 8007378:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	461d      	mov	r5, r3
 800737e:	f04f 0600 	mov.w	r6, #0
 8007382:	46a8      	mov	r8, r5
 8007384:	46b1      	mov	r9, r6
 8007386:	eb18 0308 	adds.w	r3, r8, r8
 800738a:	eb49 0409 	adc.w	r4, r9, r9
 800738e:	4698      	mov	r8, r3
 8007390:	46a1      	mov	r9, r4
 8007392:	eb18 0805 	adds.w	r8, r8, r5
 8007396:	eb49 0906 	adc.w	r9, r9, r6
 800739a:	f04f 0100 	mov.w	r1, #0
 800739e:	f04f 0200 	mov.w	r2, #0
 80073a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80073a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80073aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80073ae:	4688      	mov	r8, r1
 80073b0:	4691      	mov	r9, r2
 80073b2:	eb18 0005 	adds.w	r0, r8, r5
 80073b6:	eb49 0106 	adc.w	r1, r9, r6
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	461d      	mov	r5, r3
 80073c0:	f04f 0600 	mov.w	r6, #0
 80073c4:	196b      	adds	r3, r5, r5
 80073c6:	eb46 0406 	adc.w	r4, r6, r6
 80073ca:	461a      	mov	r2, r3
 80073cc:	4623      	mov	r3, r4
 80073ce:	f7f9 fc5b 	bl	8000c88 <__aeabi_uldivmod>
 80073d2:	4603      	mov	r3, r0
 80073d4:	460c      	mov	r4, r1
 80073d6:	461a      	mov	r2, r3
 80073d8:	4ba5      	ldr	r3, [pc, #660]	; (8007670 <UART_SetConfig+0x384>)
 80073da:	fba3 2302 	umull	r2, r3, r3, r2
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	461d      	mov	r5, r3
 80073e8:	f04f 0600 	mov.w	r6, #0
 80073ec:	46a9      	mov	r9, r5
 80073ee:	46b2      	mov	sl, r6
 80073f0:	eb19 0309 	adds.w	r3, r9, r9
 80073f4:	eb4a 040a 	adc.w	r4, sl, sl
 80073f8:	4699      	mov	r9, r3
 80073fa:	46a2      	mov	sl, r4
 80073fc:	eb19 0905 	adds.w	r9, r9, r5
 8007400:	eb4a 0a06 	adc.w	sl, sl, r6
 8007404:	f04f 0100 	mov.w	r1, #0
 8007408:	f04f 0200 	mov.w	r2, #0
 800740c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007410:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007414:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007418:	4689      	mov	r9, r1
 800741a:	4692      	mov	sl, r2
 800741c:	eb19 0005 	adds.w	r0, r9, r5
 8007420:	eb4a 0106 	adc.w	r1, sl, r6
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	461d      	mov	r5, r3
 800742a:	f04f 0600 	mov.w	r6, #0
 800742e:	196b      	adds	r3, r5, r5
 8007430:	eb46 0406 	adc.w	r4, r6, r6
 8007434:	461a      	mov	r2, r3
 8007436:	4623      	mov	r3, r4
 8007438:	f7f9 fc26 	bl	8000c88 <__aeabi_uldivmod>
 800743c:	4603      	mov	r3, r0
 800743e:	460c      	mov	r4, r1
 8007440:	461a      	mov	r2, r3
 8007442:	4b8b      	ldr	r3, [pc, #556]	; (8007670 <UART_SetConfig+0x384>)
 8007444:	fba3 1302 	umull	r1, r3, r3, r2
 8007448:	095b      	lsrs	r3, r3, #5
 800744a:	2164      	movs	r1, #100	; 0x64
 800744c:	fb01 f303 	mul.w	r3, r1, r3
 8007450:	1ad3      	subs	r3, r2, r3
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	3332      	adds	r3, #50	; 0x32
 8007456:	4a86      	ldr	r2, [pc, #536]	; (8007670 <UART_SetConfig+0x384>)
 8007458:	fba2 2303 	umull	r2, r3, r2, r3
 800745c:	095b      	lsrs	r3, r3, #5
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007464:	4498      	add	r8, r3
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	461d      	mov	r5, r3
 800746a:	f04f 0600 	mov.w	r6, #0
 800746e:	46a9      	mov	r9, r5
 8007470:	46b2      	mov	sl, r6
 8007472:	eb19 0309 	adds.w	r3, r9, r9
 8007476:	eb4a 040a 	adc.w	r4, sl, sl
 800747a:	4699      	mov	r9, r3
 800747c:	46a2      	mov	sl, r4
 800747e:	eb19 0905 	adds.w	r9, r9, r5
 8007482:	eb4a 0a06 	adc.w	sl, sl, r6
 8007486:	f04f 0100 	mov.w	r1, #0
 800748a:	f04f 0200 	mov.w	r2, #0
 800748e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007492:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007496:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800749a:	4689      	mov	r9, r1
 800749c:	4692      	mov	sl, r2
 800749e:	eb19 0005 	adds.w	r0, r9, r5
 80074a2:	eb4a 0106 	adc.w	r1, sl, r6
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	461d      	mov	r5, r3
 80074ac:	f04f 0600 	mov.w	r6, #0
 80074b0:	196b      	adds	r3, r5, r5
 80074b2:	eb46 0406 	adc.w	r4, r6, r6
 80074b6:	461a      	mov	r2, r3
 80074b8:	4623      	mov	r3, r4
 80074ba:	f7f9 fbe5 	bl	8000c88 <__aeabi_uldivmod>
 80074be:	4603      	mov	r3, r0
 80074c0:	460c      	mov	r4, r1
 80074c2:	461a      	mov	r2, r3
 80074c4:	4b6a      	ldr	r3, [pc, #424]	; (8007670 <UART_SetConfig+0x384>)
 80074c6:	fba3 1302 	umull	r1, r3, r3, r2
 80074ca:	095b      	lsrs	r3, r3, #5
 80074cc:	2164      	movs	r1, #100	; 0x64
 80074ce:	fb01 f303 	mul.w	r3, r1, r3
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	00db      	lsls	r3, r3, #3
 80074d6:	3332      	adds	r3, #50	; 0x32
 80074d8:	4a65      	ldr	r2, [pc, #404]	; (8007670 <UART_SetConfig+0x384>)
 80074da:	fba2 2303 	umull	r2, r3, r2, r3
 80074de:	095b      	lsrs	r3, r3, #5
 80074e0:	f003 0207 	and.w	r2, r3, #7
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4442      	add	r2, r8
 80074ea:	609a      	str	r2, [r3, #8]
 80074ec:	e26f      	b.n	80079ce <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074ee:	f7fd fb57 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 80074f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	461d      	mov	r5, r3
 80074f8:	f04f 0600 	mov.w	r6, #0
 80074fc:	46a8      	mov	r8, r5
 80074fe:	46b1      	mov	r9, r6
 8007500:	eb18 0308 	adds.w	r3, r8, r8
 8007504:	eb49 0409 	adc.w	r4, r9, r9
 8007508:	4698      	mov	r8, r3
 800750a:	46a1      	mov	r9, r4
 800750c:	eb18 0805 	adds.w	r8, r8, r5
 8007510:	eb49 0906 	adc.w	r9, r9, r6
 8007514:	f04f 0100 	mov.w	r1, #0
 8007518:	f04f 0200 	mov.w	r2, #0
 800751c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007520:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007524:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007528:	4688      	mov	r8, r1
 800752a:	4691      	mov	r9, r2
 800752c:	eb18 0005 	adds.w	r0, r8, r5
 8007530:	eb49 0106 	adc.w	r1, r9, r6
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	461d      	mov	r5, r3
 800753a:	f04f 0600 	mov.w	r6, #0
 800753e:	196b      	adds	r3, r5, r5
 8007540:	eb46 0406 	adc.w	r4, r6, r6
 8007544:	461a      	mov	r2, r3
 8007546:	4623      	mov	r3, r4
 8007548:	f7f9 fb9e 	bl	8000c88 <__aeabi_uldivmod>
 800754c:	4603      	mov	r3, r0
 800754e:	460c      	mov	r4, r1
 8007550:	461a      	mov	r2, r3
 8007552:	4b47      	ldr	r3, [pc, #284]	; (8007670 <UART_SetConfig+0x384>)
 8007554:	fba3 2302 	umull	r2, r3, r3, r2
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	461d      	mov	r5, r3
 8007562:	f04f 0600 	mov.w	r6, #0
 8007566:	46a9      	mov	r9, r5
 8007568:	46b2      	mov	sl, r6
 800756a:	eb19 0309 	adds.w	r3, r9, r9
 800756e:	eb4a 040a 	adc.w	r4, sl, sl
 8007572:	4699      	mov	r9, r3
 8007574:	46a2      	mov	sl, r4
 8007576:	eb19 0905 	adds.w	r9, r9, r5
 800757a:	eb4a 0a06 	adc.w	sl, sl, r6
 800757e:	f04f 0100 	mov.w	r1, #0
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800758a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800758e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007592:	4689      	mov	r9, r1
 8007594:	4692      	mov	sl, r2
 8007596:	eb19 0005 	adds.w	r0, r9, r5
 800759a:	eb4a 0106 	adc.w	r1, sl, r6
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	461d      	mov	r5, r3
 80075a4:	f04f 0600 	mov.w	r6, #0
 80075a8:	196b      	adds	r3, r5, r5
 80075aa:	eb46 0406 	adc.w	r4, r6, r6
 80075ae:	461a      	mov	r2, r3
 80075b0:	4623      	mov	r3, r4
 80075b2:	f7f9 fb69 	bl	8000c88 <__aeabi_uldivmod>
 80075b6:	4603      	mov	r3, r0
 80075b8:	460c      	mov	r4, r1
 80075ba:	461a      	mov	r2, r3
 80075bc:	4b2c      	ldr	r3, [pc, #176]	; (8007670 <UART_SetConfig+0x384>)
 80075be:	fba3 1302 	umull	r1, r3, r3, r2
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	2164      	movs	r1, #100	; 0x64
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	00db      	lsls	r3, r3, #3
 80075ce:	3332      	adds	r3, #50	; 0x32
 80075d0:	4a27      	ldr	r2, [pc, #156]	; (8007670 <UART_SetConfig+0x384>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80075de:	4498      	add	r8, r3
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	461d      	mov	r5, r3
 80075e4:	f04f 0600 	mov.w	r6, #0
 80075e8:	46a9      	mov	r9, r5
 80075ea:	46b2      	mov	sl, r6
 80075ec:	eb19 0309 	adds.w	r3, r9, r9
 80075f0:	eb4a 040a 	adc.w	r4, sl, sl
 80075f4:	4699      	mov	r9, r3
 80075f6:	46a2      	mov	sl, r4
 80075f8:	eb19 0905 	adds.w	r9, r9, r5
 80075fc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007600:	f04f 0100 	mov.w	r1, #0
 8007604:	f04f 0200 	mov.w	r2, #0
 8007608:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800760c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007610:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007614:	4689      	mov	r9, r1
 8007616:	4692      	mov	sl, r2
 8007618:	eb19 0005 	adds.w	r0, r9, r5
 800761c:	eb4a 0106 	adc.w	r1, sl, r6
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	461d      	mov	r5, r3
 8007626:	f04f 0600 	mov.w	r6, #0
 800762a:	196b      	adds	r3, r5, r5
 800762c:	eb46 0406 	adc.w	r4, r6, r6
 8007630:	461a      	mov	r2, r3
 8007632:	4623      	mov	r3, r4
 8007634:	f7f9 fb28 	bl	8000c88 <__aeabi_uldivmod>
 8007638:	4603      	mov	r3, r0
 800763a:	460c      	mov	r4, r1
 800763c:	461a      	mov	r2, r3
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <UART_SetConfig+0x384>)
 8007640:	fba3 1302 	umull	r1, r3, r3, r2
 8007644:	095b      	lsrs	r3, r3, #5
 8007646:	2164      	movs	r1, #100	; 0x64
 8007648:	fb01 f303 	mul.w	r3, r1, r3
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	3332      	adds	r3, #50	; 0x32
 8007652:	4a07      	ldr	r2, [pc, #28]	; (8007670 <UART_SetConfig+0x384>)
 8007654:	fba2 2303 	umull	r2, r3, r2, r3
 8007658:	095b      	lsrs	r3, r3, #5
 800765a:	f003 0207 	and.w	r2, r3, #7
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4442      	add	r2, r8
 8007664:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007666:	e1b2      	b.n	80079ce <UART_SetConfig+0x6e2>
 8007668:	40011000 	.word	0x40011000
 800766c:	40011400 	.word	0x40011400
 8007670:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4ad7      	ldr	r2, [pc, #860]	; (80079d8 <UART_SetConfig+0x6ec>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d005      	beq.n	800768a <UART_SetConfig+0x39e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4ad6      	ldr	r2, [pc, #856]	; (80079dc <UART_SetConfig+0x6f0>)
 8007684:	4293      	cmp	r3, r2
 8007686:	f040 80d1 	bne.w	800782c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800768a:	f7fd fa9d 	bl	8004bc8 <HAL_RCC_GetPCLK2Freq>
 800768e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	469a      	mov	sl, r3
 8007694:	f04f 0b00 	mov.w	fp, #0
 8007698:	46d0      	mov	r8, sl
 800769a:	46d9      	mov	r9, fp
 800769c:	eb18 0308 	adds.w	r3, r8, r8
 80076a0:	eb49 0409 	adc.w	r4, r9, r9
 80076a4:	4698      	mov	r8, r3
 80076a6:	46a1      	mov	r9, r4
 80076a8:	eb18 080a 	adds.w	r8, r8, sl
 80076ac:	eb49 090b 	adc.w	r9, r9, fp
 80076b0:	f04f 0100 	mov.w	r1, #0
 80076b4:	f04f 0200 	mov.w	r2, #0
 80076b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80076bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80076c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80076c4:	4688      	mov	r8, r1
 80076c6:	4691      	mov	r9, r2
 80076c8:	eb1a 0508 	adds.w	r5, sl, r8
 80076cc:	eb4b 0609 	adc.w	r6, fp, r9
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	4619      	mov	r1, r3
 80076d6:	f04f 0200 	mov.w	r2, #0
 80076da:	f04f 0300 	mov.w	r3, #0
 80076de:	f04f 0400 	mov.w	r4, #0
 80076e2:	0094      	lsls	r4, r2, #2
 80076e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80076e8:	008b      	lsls	r3, r1, #2
 80076ea:	461a      	mov	r2, r3
 80076ec:	4623      	mov	r3, r4
 80076ee:	4628      	mov	r0, r5
 80076f0:	4631      	mov	r1, r6
 80076f2:	f7f9 fac9 	bl	8000c88 <__aeabi_uldivmod>
 80076f6:	4603      	mov	r3, r0
 80076f8:	460c      	mov	r4, r1
 80076fa:	461a      	mov	r2, r3
 80076fc:	4bb8      	ldr	r3, [pc, #736]	; (80079e0 <UART_SetConfig+0x6f4>)
 80076fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007702:	095b      	lsrs	r3, r3, #5
 8007704:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	469b      	mov	fp, r3
 800770c:	f04f 0c00 	mov.w	ip, #0
 8007710:	46d9      	mov	r9, fp
 8007712:	46e2      	mov	sl, ip
 8007714:	eb19 0309 	adds.w	r3, r9, r9
 8007718:	eb4a 040a 	adc.w	r4, sl, sl
 800771c:	4699      	mov	r9, r3
 800771e:	46a2      	mov	sl, r4
 8007720:	eb19 090b 	adds.w	r9, r9, fp
 8007724:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007728:	f04f 0100 	mov.w	r1, #0
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007734:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007738:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800773c:	4689      	mov	r9, r1
 800773e:	4692      	mov	sl, r2
 8007740:	eb1b 0509 	adds.w	r5, fp, r9
 8007744:	eb4c 060a 	adc.w	r6, ip, sl
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	4619      	mov	r1, r3
 800774e:	f04f 0200 	mov.w	r2, #0
 8007752:	f04f 0300 	mov.w	r3, #0
 8007756:	f04f 0400 	mov.w	r4, #0
 800775a:	0094      	lsls	r4, r2, #2
 800775c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007760:	008b      	lsls	r3, r1, #2
 8007762:	461a      	mov	r2, r3
 8007764:	4623      	mov	r3, r4
 8007766:	4628      	mov	r0, r5
 8007768:	4631      	mov	r1, r6
 800776a:	f7f9 fa8d 	bl	8000c88 <__aeabi_uldivmod>
 800776e:	4603      	mov	r3, r0
 8007770:	460c      	mov	r4, r1
 8007772:	461a      	mov	r2, r3
 8007774:	4b9a      	ldr	r3, [pc, #616]	; (80079e0 <UART_SetConfig+0x6f4>)
 8007776:	fba3 1302 	umull	r1, r3, r3, r2
 800777a:	095b      	lsrs	r3, r3, #5
 800777c:	2164      	movs	r1, #100	; 0x64
 800777e:	fb01 f303 	mul.w	r3, r1, r3
 8007782:	1ad3      	subs	r3, r2, r3
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	3332      	adds	r3, #50	; 0x32
 8007788:	4a95      	ldr	r2, [pc, #596]	; (80079e0 <UART_SetConfig+0x6f4>)
 800778a:	fba2 2303 	umull	r2, r3, r2, r3
 800778e:	095b      	lsrs	r3, r3, #5
 8007790:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007794:	4498      	add	r8, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	469b      	mov	fp, r3
 800779a:	f04f 0c00 	mov.w	ip, #0
 800779e:	46d9      	mov	r9, fp
 80077a0:	46e2      	mov	sl, ip
 80077a2:	eb19 0309 	adds.w	r3, r9, r9
 80077a6:	eb4a 040a 	adc.w	r4, sl, sl
 80077aa:	4699      	mov	r9, r3
 80077ac:	46a2      	mov	sl, r4
 80077ae:	eb19 090b 	adds.w	r9, r9, fp
 80077b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80077b6:	f04f 0100 	mov.w	r1, #0
 80077ba:	f04f 0200 	mov.w	r2, #0
 80077be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80077c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80077c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80077ca:	4689      	mov	r9, r1
 80077cc:	4692      	mov	sl, r2
 80077ce:	eb1b 0509 	adds.w	r5, fp, r9
 80077d2:	eb4c 060a 	adc.w	r6, ip, sl
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	4619      	mov	r1, r3
 80077dc:	f04f 0200 	mov.w	r2, #0
 80077e0:	f04f 0300 	mov.w	r3, #0
 80077e4:	f04f 0400 	mov.w	r4, #0
 80077e8:	0094      	lsls	r4, r2, #2
 80077ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80077ee:	008b      	lsls	r3, r1, #2
 80077f0:	461a      	mov	r2, r3
 80077f2:	4623      	mov	r3, r4
 80077f4:	4628      	mov	r0, r5
 80077f6:	4631      	mov	r1, r6
 80077f8:	f7f9 fa46 	bl	8000c88 <__aeabi_uldivmod>
 80077fc:	4603      	mov	r3, r0
 80077fe:	460c      	mov	r4, r1
 8007800:	461a      	mov	r2, r3
 8007802:	4b77      	ldr	r3, [pc, #476]	; (80079e0 <UART_SetConfig+0x6f4>)
 8007804:	fba3 1302 	umull	r1, r3, r3, r2
 8007808:	095b      	lsrs	r3, r3, #5
 800780a:	2164      	movs	r1, #100	; 0x64
 800780c:	fb01 f303 	mul.w	r3, r1, r3
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	011b      	lsls	r3, r3, #4
 8007814:	3332      	adds	r3, #50	; 0x32
 8007816:	4a72      	ldr	r2, [pc, #456]	; (80079e0 <UART_SetConfig+0x6f4>)
 8007818:	fba2 2303 	umull	r2, r3, r2, r3
 800781c:	095b      	lsrs	r3, r3, #5
 800781e:	f003 020f 	and.w	r2, r3, #15
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4442      	add	r2, r8
 8007828:	609a      	str	r2, [r3, #8]
 800782a:	e0d0      	b.n	80079ce <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800782c:	f7fd f9b8 	bl	8004ba0 <HAL_RCC_GetPCLK1Freq>
 8007830:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	469a      	mov	sl, r3
 8007836:	f04f 0b00 	mov.w	fp, #0
 800783a:	46d0      	mov	r8, sl
 800783c:	46d9      	mov	r9, fp
 800783e:	eb18 0308 	adds.w	r3, r8, r8
 8007842:	eb49 0409 	adc.w	r4, r9, r9
 8007846:	4698      	mov	r8, r3
 8007848:	46a1      	mov	r9, r4
 800784a:	eb18 080a 	adds.w	r8, r8, sl
 800784e:	eb49 090b 	adc.w	r9, r9, fp
 8007852:	f04f 0100 	mov.w	r1, #0
 8007856:	f04f 0200 	mov.w	r2, #0
 800785a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800785e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007862:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007866:	4688      	mov	r8, r1
 8007868:	4691      	mov	r9, r2
 800786a:	eb1a 0508 	adds.w	r5, sl, r8
 800786e:	eb4b 0609 	adc.w	r6, fp, r9
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	4619      	mov	r1, r3
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	f04f 0300 	mov.w	r3, #0
 8007880:	f04f 0400 	mov.w	r4, #0
 8007884:	0094      	lsls	r4, r2, #2
 8007886:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800788a:	008b      	lsls	r3, r1, #2
 800788c:	461a      	mov	r2, r3
 800788e:	4623      	mov	r3, r4
 8007890:	4628      	mov	r0, r5
 8007892:	4631      	mov	r1, r6
 8007894:	f7f9 f9f8 	bl	8000c88 <__aeabi_uldivmod>
 8007898:	4603      	mov	r3, r0
 800789a:	460c      	mov	r4, r1
 800789c:	461a      	mov	r2, r3
 800789e:	4b50      	ldr	r3, [pc, #320]	; (80079e0 <UART_SetConfig+0x6f4>)
 80078a0:	fba3 2302 	umull	r2, r3, r3, r2
 80078a4:	095b      	lsrs	r3, r3, #5
 80078a6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	469b      	mov	fp, r3
 80078ae:	f04f 0c00 	mov.w	ip, #0
 80078b2:	46d9      	mov	r9, fp
 80078b4:	46e2      	mov	sl, ip
 80078b6:	eb19 0309 	adds.w	r3, r9, r9
 80078ba:	eb4a 040a 	adc.w	r4, sl, sl
 80078be:	4699      	mov	r9, r3
 80078c0:	46a2      	mov	sl, r4
 80078c2:	eb19 090b 	adds.w	r9, r9, fp
 80078c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80078ca:	f04f 0100 	mov.w	r1, #0
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80078da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80078de:	4689      	mov	r9, r1
 80078e0:	4692      	mov	sl, r2
 80078e2:	eb1b 0509 	adds.w	r5, fp, r9
 80078e6:	eb4c 060a 	adc.w	r6, ip, sl
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	4619      	mov	r1, r3
 80078f0:	f04f 0200 	mov.w	r2, #0
 80078f4:	f04f 0300 	mov.w	r3, #0
 80078f8:	f04f 0400 	mov.w	r4, #0
 80078fc:	0094      	lsls	r4, r2, #2
 80078fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007902:	008b      	lsls	r3, r1, #2
 8007904:	461a      	mov	r2, r3
 8007906:	4623      	mov	r3, r4
 8007908:	4628      	mov	r0, r5
 800790a:	4631      	mov	r1, r6
 800790c:	f7f9 f9bc 	bl	8000c88 <__aeabi_uldivmod>
 8007910:	4603      	mov	r3, r0
 8007912:	460c      	mov	r4, r1
 8007914:	461a      	mov	r2, r3
 8007916:	4b32      	ldr	r3, [pc, #200]	; (80079e0 <UART_SetConfig+0x6f4>)
 8007918:	fba3 1302 	umull	r1, r3, r3, r2
 800791c:	095b      	lsrs	r3, r3, #5
 800791e:	2164      	movs	r1, #100	; 0x64
 8007920:	fb01 f303 	mul.w	r3, r1, r3
 8007924:	1ad3      	subs	r3, r2, r3
 8007926:	011b      	lsls	r3, r3, #4
 8007928:	3332      	adds	r3, #50	; 0x32
 800792a:	4a2d      	ldr	r2, [pc, #180]	; (80079e0 <UART_SetConfig+0x6f4>)
 800792c:	fba2 2303 	umull	r2, r3, r2, r3
 8007930:	095b      	lsrs	r3, r3, #5
 8007932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007936:	4498      	add	r8, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	469b      	mov	fp, r3
 800793c:	f04f 0c00 	mov.w	ip, #0
 8007940:	46d9      	mov	r9, fp
 8007942:	46e2      	mov	sl, ip
 8007944:	eb19 0309 	adds.w	r3, r9, r9
 8007948:	eb4a 040a 	adc.w	r4, sl, sl
 800794c:	4699      	mov	r9, r3
 800794e:	46a2      	mov	sl, r4
 8007950:	eb19 090b 	adds.w	r9, r9, fp
 8007954:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007958:	f04f 0100 	mov.w	r1, #0
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007964:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007968:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800796c:	4689      	mov	r9, r1
 800796e:	4692      	mov	sl, r2
 8007970:	eb1b 0509 	adds.w	r5, fp, r9
 8007974:	eb4c 060a 	adc.w	r6, ip, sl
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	4619      	mov	r1, r3
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	f04f 0300 	mov.w	r3, #0
 8007986:	f04f 0400 	mov.w	r4, #0
 800798a:	0094      	lsls	r4, r2, #2
 800798c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007990:	008b      	lsls	r3, r1, #2
 8007992:	461a      	mov	r2, r3
 8007994:	4623      	mov	r3, r4
 8007996:	4628      	mov	r0, r5
 8007998:	4631      	mov	r1, r6
 800799a:	f7f9 f975 	bl	8000c88 <__aeabi_uldivmod>
 800799e:	4603      	mov	r3, r0
 80079a0:	460c      	mov	r4, r1
 80079a2:	461a      	mov	r2, r3
 80079a4:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <UART_SetConfig+0x6f4>)
 80079a6:	fba3 1302 	umull	r1, r3, r3, r2
 80079aa:	095b      	lsrs	r3, r3, #5
 80079ac:	2164      	movs	r1, #100	; 0x64
 80079ae:	fb01 f303 	mul.w	r3, r1, r3
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	011b      	lsls	r3, r3, #4
 80079b6:	3332      	adds	r3, #50	; 0x32
 80079b8:	4a09      	ldr	r2, [pc, #36]	; (80079e0 <UART_SetConfig+0x6f4>)
 80079ba:	fba2 2303 	umull	r2, r3, r2, r3
 80079be:	095b      	lsrs	r3, r3, #5
 80079c0:	f003 020f 	and.w	r2, r3, #15
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4442      	add	r2, r8
 80079ca:	609a      	str	r2, [r3, #8]
}
 80079cc:	e7ff      	b.n	80079ce <UART_SetConfig+0x6e2>
 80079ce:	bf00      	nop
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d8:	40011000 	.word	0x40011000
 80079dc:	40011400 	.word	0x40011400
 80079e0:	51eb851f 	.word	0x51eb851f

080079e4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80079e4:	b084      	sub	sp, #16
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	f107 001c 	add.w	r0, r7, #28
 80079f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80079fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80079fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80079fe:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8007a02:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8007a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8007a06:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007a0a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007a0e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8007a1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	431a      	orrs	r2, r3
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	b004      	add	sp, #16
 8007a38:	4770      	bx	lr

08007a3a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2203      	movs	r2, #3
 8007a82:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8007a84:	2002      	movs	r0, #2
 8007a86:	f7fa fb01 	bl	800208c <HAL_Delay>
  
  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0303 	and.w	r3, r3, #3
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007ace:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8007ad4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007ada:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007aea:	f023 030f 	bic.w	r3, r3, #15
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	431a      	orrs	r2, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	b2db      	uxtb	r3, r3
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b085      	sub	sp, #20
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3314      	adds	r3, #20
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	4413      	add	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
}  
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685a      	ldr	r2, [r3, #4]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b6a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8007b70:	431a      	orrs	r2, r3
                       Data->DPSM);
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007b76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b82:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	431a      	orrs	r2, r3
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007b8e:	2300      	movs	r3, #0

}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007baa:	2310      	movs	r3, #16
 8007bac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bae:	2340      	movs	r3, #64	; 0x40
 8007bb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007bbc:	f107 0308 	add.w	r3, r7, #8
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f7ff ff74 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8007bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bcc:	2110      	movs	r1, #16
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fa40 	bl	8008054 <SDMMC_GetCmdResp1>
 8007bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bd6:	69fb      	ldr	r3, [r7, #28]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3720      	adds	r7, #32
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007bee:	2311      	movs	r3, #17
 8007bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007bf2:	2340      	movs	r3, #64	; 0x40
 8007bf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bfe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c00:	f107 0308 	add.w	r3, r7, #8
 8007c04:	4619      	mov	r1, r3
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7ff ff52 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c10:	2111      	movs	r1, #17
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fa1e 	bl	8008054 <SDMMC_GetCmdResp1>
 8007c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c1a:	69fb      	ldr	r3, [r7, #28]
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007c32:	2312      	movs	r3, #18
 8007c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c36:	2340      	movs	r3, #64	; 0x40
 8007c38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c44:	f107 0308 	add.w	r3, r7, #8
 8007c48:	4619      	mov	r1, r3
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f7ff ff30 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c54:	2112      	movs	r1, #18
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f9fc 	bl	8008054 <SDMMC_GetCmdResp1>
 8007c5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c5e:	69fb      	ldr	r3, [r7, #28]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3720      	adds	r7, #32
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b088      	sub	sp, #32
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007c76:	2318      	movs	r3, #24
 8007c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007c7a:	2340      	movs	r3, #64	; 0x40
 8007c7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007c82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007c88:	f107 0308 	add.w	r3, r7, #8
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7ff ff0e 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c98:	2118      	movs	r1, #24
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f9da 	bl	8008054 <SDMMC_GetCmdResp1>
 8007ca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ca2:	69fb      	ldr	r3, [r7, #28]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3720      	adds	r7, #32
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b088      	sub	sp, #32
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007cba:	2319      	movs	r3, #25
 8007cbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007cbe:	2340      	movs	r3, #64	; 0x40
 8007cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ccc:	f107 0308 	add.w	r3, r7, #8
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff feec 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8007cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cdc:	2119      	movs	r1, #25
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f9b8 	bl	8008054 <SDMMC_GetCmdResp1>
 8007ce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3720      	adds	r7, #32
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b088      	sub	sp, #32
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007cfc:	230c      	movs	r3, #12
 8007cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d00:	2340      	movs	r3, #64	; 0x40
 8007d02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d04:	2300      	movs	r3, #0
 8007d06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d0e:	f107 0308 	add.w	r3, r7, #8
 8007d12:	4619      	mov	r1, r3
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7ff fecb 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007d1a:	4a05      	ldr	r2, [pc, #20]	; (8007d30 <SDMMC_CmdStopTransfer+0x40>)
 8007d1c:	210c      	movs	r1, #12
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f998 	bl	8008054 <SDMMC_GetCmdResp1>
 8007d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007d26:	69fb      	ldr	r3, [r7, #28]
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}
 8007d30:	05f5e100 	.word	0x05f5e100

08007d34 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08a      	sub	sp, #40	; 0x28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007d44:	2307      	movs	r3, #7
 8007d46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d54:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d56:	f107 0310 	add.w	r3, r7, #16
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f7ff fea7 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8007d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d66:	2107      	movs	r1, #7
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 f973 	bl	8008054 <SDMMC_GetCmdResp1>
 8007d6e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3728      	adds	r7, #40	; 0x28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b088      	sub	sp, #32
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007d98:	f107 0308 	add.w	r3, r7, #8
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f7ff fe86 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 f92d 	bl	8008004 <SDMMC_GetCmdError>
 8007daa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dac:	69fb      	ldr	r3, [r7, #28]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b088      	sub	sp, #32
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007dbe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007dc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007dc4:	2308      	movs	r3, #8
 8007dc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007dc8:	2340      	movs	r3, #64	; 0x40
 8007dca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dd4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007dd6:	f107 0308 	add.w	r3, r7, #8
 8007dda:	4619      	mov	r1, r3
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f7ff fe67 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 fb16 	bl	8008414 <SDMMC_GetCmdResp7>
 8007de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007dea:	69fb      	ldr	r3, [r7, #28]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3720      	adds	r7, #32
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b088      	sub	sp, #32
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007e02:	2337      	movs	r3, #55	; 0x37
 8007e04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e06:	2340      	movs	r3, #64	; 0x40
 8007e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e14:	f107 0308 	add.w	r3, r7, #8
 8007e18:	4619      	mov	r1, r3
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7ff fe48 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e24:	2137      	movs	r1, #55	; 0x37
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f914 	bl	8008054 <SDMMC_GetCmdResp1>
 8007e2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e2e:	69fb      	ldr	r3, [r7, #28]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3720      	adds	r7, #32
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b088      	sub	sp, #32
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007e48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007e4e:	2329      	movs	r3, #41	; 0x29
 8007e50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e52:	2340      	movs	r3, #64	; 0x40
 8007e54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e56:	2300      	movs	r3, #0
 8007e58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e60:	f107 0308 	add.w	r3, r7, #8
 8007e64:	4619      	mov	r1, r3
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f7ff fe22 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fa23 	bl	80082b8 <SDMMC_GetCmdResp3>
 8007e72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007e74:	69fb      	ldr	r3, [r7, #28]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3720      	adds	r7, #32
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b088      	sub	sp, #32
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007e8c:	2306      	movs	r3, #6
 8007e8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007e90:	2340      	movs	r3, #64	; 0x40
 8007e92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007e98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007e9e:	f107 0308 	add.w	r3, r7, #8
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff fe03 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eae:	2106      	movs	r1, #6
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 f8cf 	bl	8008054 <SDMMC_GetCmdResp1>
 8007eb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007eb8:	69fb      	ldr	r3, [r7, #28]
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3720      	adds	r7, #32
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b088      	sub	sp, #32
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007ece:	2333      	movs	r3, #51	; 0x33
 8007ed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007ed2:	2340      	movs	r3, #64	; 0x40
 8007ed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ede:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007ee0:	f107 0308 	add.w	r3, r7, #8
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff fde2 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ef0:	2133      	movs	r1, #51	; 0x33
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f8ae 	bl	8008054 <SDMMC_GetCmdResp1>
 8007ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007efa:	69fb      	ldr	r3, [r7, #28]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3720      	adds	r7, #32
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007f10:	2302      	movs	r3, #2
 8007f12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007f14:	23c0      	movs	r3, #192	; 0xc0
 8007f16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f22:	f107 0308 	add.w	r3, r7, #8
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff fdc1 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f97c 	bl	800822c <SDMMC_GetCmdResp2>
 8007f34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f36:	69fb      	ldr	r3, [r7, #28]
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3720      	adds	r7, #32
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007f4e:	2309      	movs	r3, #9
 8007f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007f52:	23c0      	movs	r3, #192	; 0xc0
 8007f54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f56:	2300      	movs	r3, #0
 8007f58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f60:	f107 0308 	add.w	r3, r7, #8
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff fda2 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f95d 	bl	800822c <SDMMC_GetCmdResp2>
 8007f72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007f74:	69fb      	ldr	r3, [r7, #28]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3720      	adds	r7, #32
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b088      	sub	sp, #32
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007f90:	2340      	movs	r3, #64	; 0x40
 8007f92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007f94:	2300      	movs	r3, #0
 8007f96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f9c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007f9e:	f107 0308 	add.w	r3, r7, #8
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7ff fd83 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	2103      	movs	r1, #3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f9bc 	bl	800832c <SDMMC_GetCmdResp6>
 8007fb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007fb6:	69fb      	ldr	r3, [r7, #28]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3720      	adds	r7, #32
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}

08007fc0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
 8007fc8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007fce:	230d      	movs	r3, #13
 8007fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007fd2:	2340      	movs	r3, #64	; 0x40
 8007fd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007fda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fde:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007fe0:	f107 0308 	add.w	r3, r7, #8
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff fd62 	bl	8007ab0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff0:	210d      	movs	r1, #13
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 f82e 	bl	8008054 <SDMMC_GetCmdResp1>
 8007ff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3720      	adds	r7, #32
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008004:	b490      	push	{r4, r7}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800800c:	4b0f      	ldr	r3, [pc, #60]	; (800804c <SDMMC_GetCmdError+0x48>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a0f      	ldr	r2, [pc, #60]	; (8008050 <SDMMC_GetCmdError+0x4c>)
 8008012:	fba2 2303 	umull	r2, r3, r2, r3
 8008016:	0a5b      	lsrs	r3, r3, #9
 8008018:	f241 3288 	movw	r2, #5000	; 0x1388
 800801c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008020:	4623      	mov	r3, r4
 8008022:	1e5c      	subs	r4, r3, #1
 8008024:	2b00      	cmp	r3, #0
 8008026:	d102      	bne.n	800802e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008028:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800802c:	e009      	b.n	8008042 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0f2      	beq.n	8008020 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	22c5      	movs	r2, #197	; 0xc5
 800803e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bc90      	pop	{r4, r7}
 800804a:	4770      	bx	lr
 800804c:	20000004 	.word	0x20000004
 8008050:	10624dd3 	.word	0x10624dd3

08008054 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008054:	b590      	push	{r4, r7, lr}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	60f8      	str	r0, [r7, #12]
 800805c:	460b      	mov	r3, r1
 800805e:	607a      	str	r2, [r7, #4]
 8008060:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008062:	4b6f      	ldr	r3, [pc, #444]	; (8008220 <SDMMC_GetCmdResp1+0x1cc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a6f      	ldr	r2, [pc, #444]	; (8008224 <SDMMC_GetCmdResp1+0x1d0>)
 8008068:	fba2 2303 	umull	r2, r3, r2, r3
 800806c:	0a5b      	lsrs	r3, r3, #9
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008074:	4623      	mov	r3, r4
 8008076:	1e5c      	subs	r4, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800807c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008080:	e0c9      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008086:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800808e:	2b00      	cmp	r3, #0
 8008090:	d0f0      	beq.n	8008074 <SDMMC_GetCmdResp1+0x20>
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008098:	2b00      	cmp	r3, #0
 800809a:	d1eb      	bne.n	8008074 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d004      	beq.n	80080b2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2204      	movs	r2, #4
 80080ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080ae:	2304      	movs	r3, #4
 80080b0:	e0b1      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d004      	beq.n	80080c8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2201      	movs	r2, #1
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e0a6      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	22c5      	movs	r2, #197	; 0xc5
 80080cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80080ce:	68f8      	ldr	r0, [r7, #12]
 80080d0:	f7ff fd18 	bl	8007b04 <SDIO_GetCommandResponse>
 80080d4:	4603      	mov	r3, r0
 80080d6:	461a      	mov	r2, r3
 80080d8:	7afb      	ldrb	r3, [r7, #11]
 80080da:	4293      	cmp	r3, r2
 80080dc:	d001      	beq.n	80080e2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080de:	2301      	movs	r3, #1
 80080e0:	e099      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80080e2:	2100      	movs	r1, #0
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7ff fd1a 	bl	8007b1e <SDIO_GetResponse>
 80080ea:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80080ec:	693a      	ldr	r2, [r7, #16]
 80080ee:	4b4e      	ldr	r3, [pc, #312]	; (8008228 <SDMMC_GetCmdResp1+0x1d4>)
 80080f0:	4013      	ands	r3, r2
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d101      	bne.n	80080fa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e08d      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	da02      	bge.n	8008106 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008100:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008104:	e087      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d001      	beq.n	8008114 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008110:	2340      	movs	r3, #64	; 0x40
 8008112:	e080      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800811e:	2380      	movs	r3, #128	; 0x80
 8008120:	e079      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008128:	2b00      	cmp	r3, #0
 800812a:	d002      	beq.n	8008132 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800812c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008130:	e071      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800813c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008140:	e069      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800814c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008150:	e061      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800815c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008160:	e059      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800816c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008170:	e051      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d002      	beq.n	8008182 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800817c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008180:	e049      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008188:	2b00      	cmp	r3, #0
 800818a:	d002      	beq.n	8008192 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800818c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008190:	e041      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008198:	2b00      	cmp	r3, #0
 800819a:	d002      	beq.n	80081a2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800819c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a0:	e039      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80081ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80081b0:	e031      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80081bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80081c0:	e029      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80081cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80081d0:	e021      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80081dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80081e0:	e019      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d002      	beq.n	80081f2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80081ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081f0:	e011      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80081fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008200:	e009      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f003 0308 	and.w	r3, r3, #8
 8008208:	2b00      	cmp	r3, #0
 800820a:	d002      	beq.n	8008212 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800820c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008210:	e001      	b.n	8008216 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008216:	4618      	mov	r0, r3
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	bd90      	pop	{r4, r7, pc}
 800821e:	bf00      	nop
 8008220:	20000004 	.word	0x20000004
 8008224:	10624dd3 	.word	0x10624dd3
 8008228:	fdffe008 	.word	0xfdffe008

0800822c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800822c:	b490      	push	{r4, r7}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008234:	4b1e      	ldr	r3, [pc, #120]	; (80082b0 <SDMMC_GetCmdResp2+0x84>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a1e      	ldr	r2, [pc, #120]	; (80082b4 <SDMMC_GetCmdResp2+0x88>)
 800823a:	fba2 2303 	umull	r2, r3, r2, r3
 800823e:	0a5b      	lsrs	r3, r3, #9
 8008240:	f241 3288 	movw	r2, #5000	; 0x1388
 8008244:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008248:	4623      	mov	r3, r4
 800824a:	1e5c      	subs	r4, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d102      	bne.n	8008256 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008250:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008254:	e026      	b.n	80082a4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800825a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008262:	2b00      	cmp	r3, #0
 8008264:	d0f0      	beq.n	8008248 <SDMMC_GetCmdResp2+0x1c>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1eb      	bne.n	8008248 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d004      	beq.n	8008286 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2204      	movs	r2, #4
 8008280:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008282:	2304      	movs	r3, #4
 8008284:	e00e      	b.n	80082a4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d004      	beq.n	800829c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008298:	2301      	movs	r3, #1
 800829a:	e003      	b.n	80082a4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	22c5      	movs	r2, #197	; 0xc5
 80082a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bc90      	pop	{r4, r7}
 80082ac:	4770      	bx	lr
 80082ae:	bf00      	nop
 80082b0:	20000004 	.word	0x20000004
 80082b4:	10624dd3 	.word	0x10624dd3

080082b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80082b8:	b490      	push	{r4, r7}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80082c0:	4b18      	ldr	r3, [pc, #96]	; (8008324 <SDMMC_GetCmdResp3+0x6c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a18      	ldr	r2, [pc, #96]	; (8008328 <SDMMC_GetCmdResp3+0x70>)
 80082c6:	fba2 2303 	umull	r2, r3, r2, r3
 80082ca:	0a5b      	lsrs	r3, r3, #9
 80082cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80082d4:	4623      	mov	r3, r4
 80082d6:	1e5c      	subs	r4, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80082dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80082e0:	e01b      	b.n	800831a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d0f0      	beq.n	80082d4 <SDMMC_GetCmdResp3+0x1c>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1eb      	bne.n	80082d4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2204      	movs	r2, #4
 800830c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800830e:	2304      	movs	r3, #4
 8008310:	e003      	b.n	800831a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	22c5      	movs	r2, #197	; 0xc5
 8008316:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3710      	adds	r7, #16
 800831e:	46bd      	mov	sp, r7
 8008320:	bc90      	pop	{r4, r7}
 8008322:	4770      	bx	lr
 8008324:	20000004 	.word	0x20000004
 8008328:	10624dd3 	.word	0x10624dd3

0800832c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800832c:	b590      	push	{r4, r7, lr}
 800832e:	b087      	sub	sp, #28
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	460b      	mov	r3, r1
 8008336:	607a      	str	r2, [r7, #4]
 8008338:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800833a:	4b34      	ldr	r3, [pc, #208]	; (800840c <SDMMC_GetCmdResp6+0xe0>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a34      	ldr	r2, [pc, #208]	; (8008410 <SDMMC_GetCmdResp6+0xe4>)
 8008340:	fba2 2303 	umull	r2, r3, r2, r3
 8008344:	0a5b      	lsrs	r3, r3, #9
 8008346:	f241 3288 	movw	r2, #5000	; 0x1388
 800834a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800834e:	4623      	mov	r3, r4
 8008350:	1e5c      	subs	r4, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008356:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800835a:	e052      	b.n	8008402 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008360:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008368:	2b00      	cmp	r3, #0
 800836a:	d0f0      	beq.n	800834e <SDMMC_GetCmdResp6+0x22>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1eb      	bne.n	800834e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800837a:	f003 0304 	and.w	r3, r3, #4
 800837e:	2b00      	cmp	r3, #0
 8008380:	d004      	beq.n	800838c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2204      	movs	r2, #4
 8008386:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008388:	2304      	movs	r3, #4
 800838a:	e03a      	b.n	8008402 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d004      	beq.n	80083a2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2201      	movs	r2, #1
 800839c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800839e:	2301      	movs	r3, #1
 80083a0:	e02f      	b.n	8008402 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f7ff fbae 	bl	8007b04 <SDIO_GetCommandResponse>
 80083a8:	4603      	mov	r3, r0
 80083aa:	461a      	mov	r2, r3
 80083ac:	7afb      	ldrb	r3, [r7, #11]
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d001      	beq.n	80083b6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e025      	b.n	8008402 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	22c5      	movs	r2, #197	; 0xc5
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80083bc:	2100      	movs	r1, #0
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff fbad 	bl	8007b1e <SDIO_GetResponse>
 80083c4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d106      	bne.n	80083de <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	0c1b      	lsrs	r3, r3, #16
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80083da:	2300      	movs	r3, #0
 80083dc:	e011      	b.n	8008402 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80083e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80083ec:	e009      	b.n	8008402 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d002      	beq.n	80083fe <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80083f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083fc:	e001      	b.n	8008402 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80083fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008402:	4618      	mov	r0, r3
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	bd90      	pop	{r4, r7, pc}
 800840a:	bf00      	nop
 800840c:	20000004 	.word	0x20000004
 8008410:	10624dd3 	.word	0x10624dd3

08008414 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008414:	b490      	push	{r4, r7}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800841c:	4b21      	ldr	r3, [pc, #132]	; (80084a4 <SDMMC_GetCmdResp7+0x90>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a21      	ldr	r2, [pc, #132]	; (80084a8 <SDMMC_GetCmdResp7+0x94>)
 8008422:	fba2 2303 	umull	r2, r3, r2, r3
 8008426:	0a5b      	lsrs	r3, r3, #9
 8008428:	f241 3288 	movw	r2, #5000	; 0x1388
 800842c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8008430:	4623      	mov	r3, r4
 8008432:	1e5c      	subs	r4, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800843c:	e02c      	b.n	8008498 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008442:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0f0      	beq.n	8008430 <SDMMC_GetCmdResp7+0x1c>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1eb      	bne.n	8008430 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845c:	f003 0304 	and.w	r3, r3, #4
 8008460:	2b00      	cmp	r3, #0
 8008462:	d004      	beq.n	800846e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2204      	movs	r2, #4
 8008468:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800846a:	2304      	movs	r3, #4
 800846c:	e014      	b.n	8008498 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d004      	beq.n	8008484 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008480:	2301      	movs	r3, #1
 8008482:	e009      	b.n	8008498 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848c:	2b00      	cmp	r3, #0
 800848e:	d002      	beq.n	8008496 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2240      	movs	r2, #64	; 0x40
 8008494:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008496:	2300      	movs	r3, #0
  
}
 8008498:	4618      	mov	r0, r3
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bc90      	pop	{r4, r7}
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	20000004 	.word	0x20000004
 80084a8:	10624dd3 	.word	0x10624dd3

080084ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80084ac:	b084      	sub	sp, #16
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b084      	sub	sp, #16
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	f107 001c 	add.w	r0, r7, #28
 80084ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d122      	bne.n	800850a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80084d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d105      	bne.n	80084fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 fa7c 	bl	80099fc <USB_CoreReset>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]
 8008508:	e01a      	b.n	8008540 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fa70 	bl	80099fc <USB_CoreReset>
 800851c:	4603      	mov	r3, r0
 800851e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008522:	2b00      	cmp	r3, #0
 8008524:	d106      	bne.n	8008534 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	639a      	str	r2, [r3, #56]	; 0x38
 8008532:	e005      	b.n	8008540 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	2b01      	cmp	r3, #1
 8008544:	d10b      	bne.n	800855e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f043 0206 	orr.w	r2, r3, #6
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f043 0220 	orr.w	r2, r3, #32
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800856a:	b004      	add	sp, #16
 800856c:	4770      	bx	lr
	...

08008570 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4613      	mov	r3, r2
 800857c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d165      	bne.n	8008650 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4a41      	ldr	r2, [pc, #260]	; (800868c <USB_SetTurnaroundTime+0x11c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d906      	bls.n	800859a <USB_SetTurnaroundTime+0x2a>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	4a40      	ldr	r2, [pc, #256]	; (8008690 <USB_SetTurnaroundTime+0x120>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d802      	bhi.n	800859a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008594:	230f      	movs	r3, #15
 8008596:	617b      	str	r3, [r7, #20]
 8008598:	e062      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	4a3c      	ldr	r2, [pc, #240]	; (8008690 <USB_SetTurnaroundTime+0x120>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d906      	bls.n	80085b0 <USB_SetTurnaroundTime+0x40>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	4a3b      	ldr	r2, [pc, #236]	; (8008694 <USB_SetTurnaroundTime+0x124>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d802      	bhi.n	80085b0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80085aa:	230e      	movs	r3, #14
 80085ac:	617b      	str	r3, [r7, #20]
 80085ae:	e057      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	4a38      	ldr	r2, [pc, #224]	; (8008694 <USB_SetTurnaroundTime+0x124>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d906      	bls.n	80085c6 <USB_SetTurnaroundTime+0x56>
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	4a37      	ldr	r2, [pc, #220]	; (8008698 <USB_SetTurnaroundTime+0x128>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d802      	bhi.n	80085c6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80085c0:	230d      	movs	r3, #13
 80085c2:	617b      	str	r3, [r7, #20]
 80085c4:	e04c      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	4a33      	ldr	r2, [pc, #204]	; (8008698 <USB_SetTurnaroundTime+0x128>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d906      	bls.n	80085dc <USB_SetTurnaroundTime+0x6c>
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	4a32      	ldr	r2, [pc, #200]	; (800869c <USB_SetTurnaroundTime+0x12c>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d802      	bhi.n	80085dc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80085d6:	230c      	movs	r3, #12
 80085d8:	617b      	str	r3, [r7, #20]
 80085da:	e041      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	4a2f      	ldr	r2, [pc, #188]	; (800869c <USB_SetTurnaroundTime+0x12c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d906      	bls.n	80085f2 <USB_SetTurnaroundTime+0x82>
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4a2e      	ldr	r2, [pc, #184]	; (80086a0 <USB_SetTurnaroundTime+0x130>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d802      	bhi.n	80085f2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80085ec:	230b      	movs	r3, #11
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	e036      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4a2a      	ldr	r2, [pc, #168]	; (80086a0 <USB_SetTurnaroundTime+0x130>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d906      	bls.n	8008608 <USB_SetTurnaroundTime+0x98>
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	4a29      	ldr	r2, [pc, #164]	; (80086a4 <USB_SetTurnaroundTime+0x134>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d802      	bhi.n	8008608 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008602:	230a      	movs	r3, #10
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	e02b      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4a26      	ldr	r2, [pc, #152]	; (80086a4 <USB_SetTurnaroundTime+0x134>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d906      	bls.n	800861e <USB_SetTurnaroundTime+0xae>
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	4a25      	ldr	r2, [pc, #148]	; (80086a8 <USB_SetTurnaroundTime+0x138>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d802      	bhi.n	800861e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008618:	2309      	movs	r3, #9
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	e020      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	4a21      	ldr	r2, [pc, #132]	; (80086a8 <USB_SetTurnaroundTime+0x138>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d906      	bls.n	8008634 <USB_SetTurnaroundTime+0xc4>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	4a20      	ldr	r2, [pc, #128]	; (80086ac <USB_SetTurnaroundTime+0x13c>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d802      	bhi.n	8008634 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800862e:	2308      	movs	r3, #8
 8008630:	617b      	str	r3, [r7, #20]
 8008632:	e015      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4a1d      	ldr	r2, [pc, #116]	; (80086ac <USB_SetTurnaroundTime+0x13c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d906      	bls.n	800864a <USB_SetTurnaroundTime+0xda>
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	4a1c      	ldr	r2, [pc, #112]	; (80086b0 <USB_SetTurnaroundTime+0x140>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d802      	bhi.n	800864a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008644:	2307      	movs	r3, #7
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	e00a      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800864a:	2306      	movs	r3, #6
 800864c:	617b      	str	r3, [r7, #20]
 800864e:	e007      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d102      	bne.n	800865c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008656:	2309      	movs	r3, #9
 8008658:	617b      	str	r3, [r7, #20]
 800865a:	e001      	b.n	8008660 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800865c:	2309      	movs	r3, #9
 800865e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	029b      	lsls	r3, r3, #10
 8008674:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008678:	431a      	orrs	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	371c      	adds	r7, #28
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	00d8acbf 	.word	0x00d8acbf
 8008690:	00e4e1bf 	.word	0x00e4e1bf
 8008694:	00f423ff 	.word	0x00f423ff
 8008698:	0106737f 	.word	0x0106737f
 800869c:	011a499f 	.word	0x011a499f
 80086a0:	01312cff 	.word	0x01312cff
 80086a4:	014ca43f 	.word	0x014ca43f
 80086a8:	016e35ff 	.word	0x016e35ff
 80086ac:	01a6ab1f 	.word	0x01a6ab1f
 80086b0:	01e847ff 	.word	0x01e847ff

080086b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f043 0201 	orr.w	r2, r3, #1
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	370c      	adds	r7, #12
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b083      	sub	sp, #12
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f023 0201 	bic.w	r2, r3, #1
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008710:	78fb      	ldrb	r3, [r7, #3]
 8008712:	2b01      	cmp	r3, #1
 8008714:	d106      	bne.n	8008724 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	60da      	str	r2, [r3, #12]
 8008722:	e00b      	b.n	800873c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d106      	bne.n	8008738 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	60da      	str	r2, [r3, #12]
 8008736:	e001      	b.n	800873c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e003      	b.n	8008744 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800873c:	2032      	movs	r0, #50	; 0x32
 800873e:	f7f9 fca5 	bl	800208c <HAL_Delay>

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800874c:	b084      	sub	sp, #16
 800874e:	b580      	push	{r7, lr}
 8008750:	b086      	sub	sp, #24
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800875a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800875e:	2300      	movs	r3, #0
 8008760:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008766:	2300      	movs	r3, #0
 8008768:	613b      	str	r3, [r7, #16]
 800876a:	e009      	b.n	8008780 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	3340      	adds	r3, #64	; 0x40
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	2200      	movs	r2, #0
 8008778:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	3301      	adds	r3, #1
 800877e:	613b      	str	r3, [r7, #16]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	2b0e      	cmp	r3, #14
 8008784:	d9f2      	bls.n	800876c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d112      	bne.n	80087b2 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008790:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	639a      	str	r2, [r3, #56]	; 0x38
 80087b0:	e00b      	b.n	80087ca <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087d0:	461a      	mov	r2, r3
 80087d2:	2300      	movs	r3, #0
 80087d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	4619      	mov	r1, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e4:	461a      	mov	r2, r3
 80087e6:	680b      	ldr	r3, [r1, #0]
 80087e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d10c      	bne.n	800880a <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80087f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d104      	bne.n	8008800 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80087f6:	2100      	movs	r1, #0
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f961 	bl	8008ac0 <USB_SetDevSpeed>
 80087fe:	e008      	b.n	8008812 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008800:	2101      	movs	r1, #1
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 f95c 	bl	8008ac0 <USB_SetDevSpeed>
 8008808:	e003      	b.n	8008812 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800880a:	2103      	movs	r1, #3
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 f957 	bl	8008ac0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008812:	2110      	movs	r1, #16
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f90b 	bl	8008a30 <USB_FlushTxFifo>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 f929 	bl	8008a7c <USB_FlushRxFifo>
 800882a:	4603      	mov	r3, r0
 800882c:	2b00      	cmp	r3, #0
 800882e:	d001      	beq.n	8008834 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883a:	461a      	mov	r2, r3
 800883c:	2300      	movs	r3, #0
 800883e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008846:	461a      	mov	r2, r3
 8008848:	2300      	movs	r3, #0
 800884a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008852:	461a      	mov	r2, r3
 8008854:	2300      	movs	r3, #0
 8008856:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008858:	2300      	movs	r3, #0
 800885a:	613b      	str	r3, [r7, #16]
 800885c:	e043      	b.n	80088e6 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008874:	d118      	bne.n	80088a8 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d10a      	bne.n	8008892 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	015a      	lsls	r2, r3, #5
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	4413      	add	r3, r2
 8008884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008888:	461a      	mov	r2, r3
 800888a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800888e:	6013      	str	r3, [r2, #0]
 8008890:	e013      	b.n	80088ba <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889e:	461a      	mov	r2, r3
 80088a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	e008      	b.n	80088ba <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b4:	461a      	mov	r2, r3
 80088b6:	2300      	movs	r3, #0
 80088b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	015a      	lsls	r2, r3, #5
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	4413      	add	r3, r2
 80088c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c6:	461a      	mov	r2, r3
 80088c8:	2300      	movs	r3, #0
 80088ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	015a      	lsls	r2, r3, #5
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4413      	add	r3, r2
 80088d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d8:	461a      	mov	r2, r3
 80088da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80088de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	3301      	adds	r3, #1
 80088e4:	613b      	str	r3, [r7, #16]
 80088e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e8:	693a      	ldr	r2, [r7, #16]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d3b7      	bcc.n	800885e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088ee:	2300      	movs	r3, #0
 80088f0:	613b      	str	r3, [r7, #16]
 80088f2:	e043      	b.n	800897c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	015a      	lsls	r2, r3, #5
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4413      	add	r3, r2
 80088fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008906:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800890a:	d118      	bne.n	800893e <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4413      	add	r3, r2
 800891a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891e:	461a      	mov	r2, r3
 8008920:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008924:	6013      	str	r3, [r2, #0]
 8008926:	e013      	b.n	8008950 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008934:	461a      	mov	r2, r3
 8008936:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800893a:	6013      	str	r3, [r2, #0]
 800893c:	e008      	b.n	8008950 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800894a:	461a      	mov	r2, r3
 800894c:	2300      	movs	r3, #0
 800894e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	015a      	lsls	r2, r3, #5
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	4413      	add	r3, r2
 8008958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895c:	461a      	mov	r2, r3
 800895e:	2300      	movs	r3, #0
 8008960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	015a      	lsls	r2, r3, #5
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	4413      	add	r3, r2
 800896a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896e:	461a      	mov	r2, r3
 8008970:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008974:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	3301      	adds	r3, #1
 800897a:	613b      	str	r3, [r7, #16]
 800897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	429a      	cmp	r2, r3
 8008982:	d3b7      	bcc.n	80088f4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898a:	691b      	ldr	r3, [r3, #16]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008996:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800899a:	2b01      	cmp	r3, #1
 800899c:	d111      	bne.n	80089c2 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a4:	461a      	mov	r2, r3
 80089a6:	4b20      	ldr	r3, [pc, #128]	; (8008a28 <USB_DevInit+0x2dc>)
 80089a8:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089bc:	f043 0303 	orr.w	r3, r3, #3
 80089c0:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80089ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	f043 0210 	orr.w	r2, r3, #16
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	699a      	ldr	r2, [r3, #24]
 80089e6:	4b11      	ldr	r3, [pc, #68]	; (8008a2c <USB_DevInit+0x2e0>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	687a      	ldr	r2, [r7, #4]
 80089ec:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80089ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d005      	beq.n	8008a00 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	699b      	ldr	r3, [r3, #24]
 80089f8:	f043 0208 	orr.w	r2, r3, #8
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d107      	bne.n	8008a16 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a0e:	f043 0304 	orr.w	r3, r3, #4
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3718      	adds	r7, #24
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a22:	b004      	add	sp, #16
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	00800100 	.word	0x00800100
 8008a2c:	803c3800 	.word	0x803c3800

08008a30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	019b      	lsls	r3, r3, #6
 8008a42:	f043 0220 	orr.w	r2, r3, #32
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a09      	ldr	r2, [pc, #36]	; (8008a78 <USB_FlushTxFifo+0x48>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d901      	bls.n	8008a5c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e006      	b.n	8008a6a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	f003 0320 	and.w	r3, r3, #32
 8008a64:	2b20      	cmp	r3, #32
 8008a66:	d0f0      	beq.n	8008a4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	00030d40 	.word	0x00030d40

08008a7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008a84:	2300      	movs	r3, #0
 8008a86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2210      	movs	r2, #16
 8008a8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3301      	adds	r3, #1
 8008a92:	60fb      	str	r3, [r7, #12]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4a09      	ldr	r2, [pc, #36]	; (8008abc <USB_FlushRxFifo+0x40>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d901      	bls.n	8008aa0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e006      	b.n	8008aae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	f003 0310 	and.w	r3, r3, #16
 8008aa8:	2b10      	cmp	r3, #16
 8008aaa:	d0f0      	beq.n	8008a8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008aac:	2300      	movs	r3, #0
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop
 8008abc:	00030d40 	.word	0x00030d40

08008ac0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b085      	sub	sp, #20
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	460b      	mov	r3, r1
 8008aca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	78fb      	ldrb	r3, [r7, #3]
 8008ada:	68f9      	ldr	r1, [r7, #12]
 8008adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b087      	sub	sp, #28
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f003 0306 	and.w	r3, r3, #6
 8008b0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008b12:	2300      	movs	r3, #0
 8008b14:	75fb      	strb	r3, [r7, #23]
 8008b16:	e00a      	b.n	8008b2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b02      	cmp	r3, #2
 8008b1c:	d002      	beq.n	8008b24 <USB_GetDevSpeed+0x32>
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2b06      	cmp	r3, #6
 8008b22:	d102      	bne.n	8008b2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008b24:	2302      	movs	r3, #2
 8008b26:	75fb      	strb	r3, [r7, #23]
 8008b28:	e001      	b.n	8008b2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008b2a:	230f      	movs	r3, #15
 8008b2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	371c      	adds	r7, #28
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	785b      	ldrb	r3, [r3, #1]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d13a      	bne.n	8008bce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b5e:	69da      	ldr	r2, [r3, #28]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	f003 030f 	and.w	r3, r3, #15
 8008b68:	2101      	movs	r1, #1
 8008b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	68f9      	ldr	r1, [r7, #12]
 8008b72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b76:	4313      	orrs	r3, r2
 8008b78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d155      	bne.n	8008c3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	015a      	lsls	r2, r3, #5
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4413      	add	r3, r2
 8008b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	78db      	ldrb	r3, [r3, #3]
 8008baa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	059b      	lsls	r3, r3, #22
 8008bb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008bca:	6013      	str	r3, [r2, #0]
 8008bcc:	e036      	b.n	8008c3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd4:	69da      	ldr	r2, [r3, #28]
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	f003 030f 	and.w	r3, r3, #15
 8008bde:	2101      	movs	r1, #1
 8008be0:	fa01 f303 	lsl.w	r3, r1, r3
 8008be4:	041b      	lsls	r3, r3, #16
 8008be6:	68f9      	ldr	r1, [r7, #12]
 8008be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bec:	4313      	orrs	r3, r2
 8008bee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d11a      	bne.n	8008c3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	015a      	lsls	r2, r3, #5
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c12:	681a      	ldr	r2, [r3, #0]
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	78db      	ldrb	r3, [r3, #3]
 8008c20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008c22:	430b      	orrs	r3, r1
 8008c24:	4313      	orrs	r3, r2
 8008c26:	68ba      	ldr	r2, [r7, #8]
 8008c28:	0151      	lsls	r1, r2, #5
 8008c2a:	68fa      	ldr	r2, [r7, #12]
 8008c2c:	440a      	add	r2, r1
 8008c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
	...

08008c4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b085      	sub	sp, #20
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	785b      	ldrb	r3, [r3, #1]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d135      	bne.n	8008cd4 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	f003 030f 	and.w	r3, r3, #15
 8008c78:	2101      	movs	r1, #1
 8008c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	43db      	mvns	r3, r3
 8008c82:	68f9      	ldr	r1, [r7, #12]
 8008c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c88:	4013      	ands	r3, r2
 8008c8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c92:	69da      	ldr	r2, [r3, #28]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	f003 030f 	and.w	r3, r3, #15
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	43db      	mvns	r3, r3
 8008ca6:	68f9      	ldr	r1, [r7, #12]
 8008ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cac:	4013      	ands	r3, r2
 8008cae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	0159      	lsls	r1, r3, #5
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	440b      	add	r3, r1
 8008cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cca:	4619      	mov	r1, r3
 8008ccc:	4b1f      	ldr	r3, [pc, #124]	; (8008d4c <USB_DeactivateEndpoint+0x100>)
 8008cce:	4013      	ands	r3, r2
 8008cd0:	600b      	str	r3, [r1, #0]
 8008cd2:	e034      	b.n	8008d3e <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	f003 030f 	and.w	r3, r3, #15
 8008ce4:	2101      	movs	r1, #1
 8008ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8008cea:	041b      	lsls	r3, r3, #16
 8008cec:	43db      	mvns	r3, r3
 8008cee:	68f9      	ldr	r1, [r7, #12]
 8008cf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cf4:	4013      	ands	r3, r2
 8008cf6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfe:	69da      	ldr	r2, [r3, #28]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	2101      	movs	r1, #1
 8008d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d0e:	041b      	lsls	r3, r3, #16
 8008d10:	43db      	mvns	r3, r3
 8008d12:	68f9      	ldr	r1, [r7, #12]
 8008d14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d18:	4013      	ands	r3, r2
 8008d1a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d28:	681a      	ldr	r2, [r3, #0]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	0159      	lsls	r1, r3, #5
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	440b      	add	r3, r1
 8008d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d36:	4619      	mov	r1, r3
 8008d38:	4b05      	ldr	r3, [pc, #20]	; (8008d50 <USB_DeactivateEndpoint+0x104>)
 8008d3a:	4013      	ands	r3, r2
 8008d3c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3714      	adds	r7, #20
 8008d44:	46bd      	mov	sp, r7
 8008d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4a:	4770      	bx	lr
 8008d4c:	ec337800 	.word	0xec337800
 8008d50:	eff37800 	.word	0xeff37800

08008d54 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08a      	sub	sp, #40	; 0x28
 8008d58:	af02      	add	r7, sp, #8
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	4613      	mov	r3, r2
 8008d60:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	785b      	ldrb	r3, [r3, #1]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	f040 815c 	bne.w	800902e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d132      	bne.n	8008de4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d7e:	69bb      	ldr	r3, [r7, #24]
 8008d80:	015a      	lsls	r2, r3, #5
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	4413      	add	r3, r2
 8008d86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	0151      	lsls	r1, r2, #5
 8008d90:	69fa      	ldr	r2, [r7, #28]
 8008d92:	440a      	add	r2, r1
 8008d94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d98:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d9c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008da0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	015a      	lsls	r2, r3, #5
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	4413      	add	r3, r2
 8008daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	0151      	lsls	r1, r2, #5
 8008db4:	69fa      	ldr	r2, [r7, #28]
 8008db6:	440a      	add	r2, r1
 8008db8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dbc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	015a      	lsls	r2, r3, #5
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	4413      	add	r3, r2
 8008dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dce:	691b      	ldr	r3, [r3, #16]
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	0151      	lsls	r1, r2, #5
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	440a      	add	r2, r1
 8008dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ddc:	0cdb      	lsrs	r3, r3, #19
 8008dde:	04db      	lsls	r3, r3, #19
 8008de0:	6113      	str	r3, [r2, #16]
 8008de2:	e074      	b.n	8008ece <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008de4:	69bb      	ldr	r3, [r7, #24]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	69fb      	ldr	r3, [r7, #28]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	69ba      	ldr	r2, [r7, #24]
 8008df4:	0151      	lsls	r1, r2, #5
 8008df6:	69fa      	ldr	r2, [r7, #28]
 8008df8:	440a      	add	r2, r1
 8008dfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dfe:	0cdb      	lsrs	r3, r3, #19
 8008e00:	04db      	lsls	r3, r3, #19
 8008e02:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	69ba      	ldr	r2, [r7, #24]
 8008e14:	0151      	lsls	r1, r2, #5
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	440a      	add	r2, r1
 8008e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e26:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e34:	691a      	ldr	r2, [r3, #16]
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	6959      	ldr	r1, [r3, #20]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	440b      	add	r3, r1
 8008e40:	1e59      	subs	r1, r3, #1
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e4a:	04d9      	lsls	r1, r3, #19
 8008e4c:	4b9d      	ldr	r3, [pc, #628]	; (80090c4 <USB_EPStartXfer+0x370>)
 8008e4e:	400b      	ands	r3, r1
 8008e50:	69b9      	ldr	r1, [r7, #24]
 8008e52:	0148      	lsls	r0, r1, #5
 8008e54:	69f9      	ldr	r1, [r7, #28]
 8008e56:	4401      	add	r1, r0
 8008e58:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	691a      	ldr	r2, [r3, #16]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e76:	69b9      	ldr	r1, [r7, #24]
 8008e78:	0148      	lsls	r0, r1, #5
 8008e7a:	69f9      	ldr	r1, [r7, #28]
 8008e7c:	4401      	add	r1, r0
 8008e7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008e82:	4313      	orrs	r3, r2
 8008e84:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	78db      	ldrb	r3, [r3, #3]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d11f      	bne.n	8008ece <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	015a      	lsls	r2, r3, #5
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	4413      	add	r3, r2
 8008e96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	69ba      	ldr	r2, [r7, #24]
 8008e9e:	0151      	lsls	r1, r2, #5
 8008ea0:	69fa      	ldr	r2, [r7, #28]
 8008ea2:	440a      	add	r2, r1
 8008ea4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ea8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008eac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eba:	691b      	ldr	r3, [r3, #16]
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	0151      	lsls	r1, r2, #5
 8008ec0:	69fa      	ldr	r2, [r7, #28]
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ec8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ecc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d14b      	bne.n	8008f6c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d009      	beq.n	8008ef0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee8:	461a      	mov	r2, r3
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	78db      	ldrb	r3, [r3, #3]
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d128      	bne.n	8008f4a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d110      	bne.n	8008f2a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69ba      	ldr	r2, [r7, #24]
 8008f18:	0151      	lsls	r1, r2, #5
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	440a      	add	r2, r1
 8008f1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	e00f      	b.n	8008f4a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	015a      	lsls	r2, r3, #5
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	4413      	add	r3, r2
 8008f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	0151      	lsls	r1, r2, #5
 8008f3c:	69fa      	ldr	r2, [r7, #28]
 8008f3e:	440a      	add	r2, r1
 8008f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f48:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	69ba      	ldr	r2, [r7, #24]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	e12f      	b.n	80091cc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f86:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	78db      	ldrb	r3, [r3, #3]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d015      	beq.n	8008fc0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 8117 	beq.w	80091cc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008f9e:	69fb      	ldr	r3, [r7, #28]
 8008fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	2101      	movs	r1, #1
 8008fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb4:	69f9      	ldr	r1, [r7, #28]
 8008fb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	634b      	str	r3, [r1, #52]	; 0x34
 8008fbe:	e105      	b.n	80091cc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d110      	bne.n	8008ff2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	015a      	lsls	r2, r3, #5
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	4413      	add	r3, r2
 8008fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69ba      	ldr	r2, [r7, #24]
 8008fe0:	0151      	lsls	r1, r2, #5
 8008fe2:	69fa      	ldr	r2, [r7, #28]
 8008fe4:	440a      	add	r2, r1
 8008fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e00f      	b.n	8009012 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	69ba      	ldr	r2, [r7, #24]
 8009002:	0151      	lsls	r1, r2, #5
 8009004:	69fa      	ldr	r2, [r7, #28]
 8009006:	440a      	add	r2, r1
 8009008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800900c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009010:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	68d9      	ldr	r1, [r3, #12]
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	781a      	ldrb	r2, [r3, #0]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	b298      	uxth	r0, r3
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	4603      	mov	r3, r0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 fa2b 	bl	8009482 <USB_WritePacket>
 800902c:	e0ce      	b.n	80091cc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800902e:	69bb      	ldr	r3, [r7, #24]
 8009030:	015a      	lsls	r2, r3, #5
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	4413      	add	r3, r2
 8009036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	69ba      	ldr	r2, [r7, #24]
 800903e:	0151      	lsls	r1, r2, #5
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	440a      	add	r2, r1
 8009044:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009048:	0cdb      	lsrs	r3, r3, #19
 800904a:	04db      	lsls	r3, r3, #19
 800904c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800904e:	69bb      	ldr	r3, [r7, #24]
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	0151      	lsls	r1, r2, #5
 8009060:	69fa      	ldr	r2, [r7, #28]
 8009062:	440a      	add	r2, r1
 8009064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800906c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009070:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d126      	bne.n	80090c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	015a      	lsls	r2, r3, #5
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	4413      	add	r3, r2
 8009082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009086:	691a      	ldr	r2, [r3, #16]
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009090:	69b9      	ldr	r1, [r7, #24]
 8009092:	0148      	lsls	r0, r1, #5
 8009094:	69f9      	ldr	r1, [r7, #28]
 8009096:	4401      	add	r1, r0
 8009098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800909c:	4313      	orrs	r3, r2
 800909e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	69fb      	ldr	r3, [r7, #28]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	0151      	lsls	r1, r2, #5
 80090b2:	69fa      	ldr	r2, [r7, #28]
 80090b4:	440a      	add	r2, r1
 80090b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090be:	6113      	str	r3, [r2, #16]
 80090c0:	e036      	b.n	8009130 <USB_EPStartXfer+0x3dc>
 80090c2:	bf00      	nop
 80090c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	695a      	ldr	r2, [r3, #20]
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	4413      	add	r3, r2
 80090d2:	1e5a      	subs	r2, r3, #1
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090dc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ea:	691a      	ldr	r2, [r3, #16]
 80090ec:	8afb      	ldrh	r3, [r7, #22]
 80090ee:	04d9      	lsls	r1, r3, #19
 80090f0:	4b39      	ldr	r3, [pc, #228]	; (80091d8 <USB_EPStartXfer+0x484>)
 80090f2:	400b      	ands	r3, r1
 80090f4:	69b9      	ldr	r1, [r7, #24]
 80090f6:	0148      	lsls	r0, r1, #5
 80090f8:	69f9      	ldr	r1, [r7, #28]
 80090fa:	4401      	add	r1, r0
 80090fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009100:	4313      	orrs	r3, r2
 8009102:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009104:	69bb      	ldr	r3, [r7, #24]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009110:	691a      	ldr	r2, [r3, #16]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	8af9      	ldrh	r1, [r7, #22]
 8009118:	fb01 f303 	mul.w	r3, r1, r3
 800911c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009120:	69b9      	ldr	r1, [r7, #24]
 8009122:	0148      	lsls	r0, r1, #5
 8009124:	69f9      	ldr	r1, [r7, #28]
 8009126:	4401      	add	r1, r0
 8009128:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800912c:	4313      	orrs	r3, r2
 800912e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d10d      	bne.n	8009152 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d009      	beq.n	8009152 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	68d9      	ldr	r1, [r3, #12]
 8009142:	69bb      	ldr	r3, [r7, #24]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914e:	460a      	mov	r2, r1
 8009150:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	78db      	ldrb	r3, [r3, #3]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d128      	bne.n	80091ac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009166:	2b00      	cmp	r3, #0
 8009168:	d110      	bne.n	800918c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	69fb      	ldr	r3, [r7, #28]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	69ba      	ldr	r2, [r7, #24]
 800917a:	0151      	lsls	r1, r2, #5
 800917c:	69fa      	ldr	r2, [r7, #28]
 800917e:	440a      	add	r2, r1
 8009180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	e00f      	b.n	80091ac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	015a      	lsls	r2, r3, #5
 8009190:	69fb      	ldr	r3, [r7, #28]
 8009192:	4413      	add	r3, r2
 8009194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69ba      	ldr	r2, [r7, #24]
 800919c:	0151      	lsls	r1, r2, #5
 800919e:	69fa      	ldr	r2, [r7, #28]
 80091a0:	440a      	add	r2, r1
 80091a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80091ac:	69bb      	ldr	r3, [r7, #24]
 80091ae:	015a      	lsls	r2, r3, #5
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	4413      	add	r3, r2
 80091b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	69ba      	ldr	r2, [r7, #24]
 80091bc:	0151      	lsls	r1, r2, #5
 80091be:	69fa      	ldr	r2, [r7, #28]
 80091c0:	440a      	add	r2, r1
 80091c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3720      	adds	r7, #32
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	1ff80000 	.word	0x1ff80000

080091dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80091dc:	b480      	push	{r7}
 80091de:	b087      	sub	sp, #28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	785b      	ldrb	r3, [r3, #1]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	f040 80cd 	bne.w	8009398 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	695b      	ldr	r3, [r3, #20]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d132      	bne.n	800926c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	693a      	ldr	r2, [r7, #16]
 8009216:	0151      	lsls	r1, r2, #5
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	440a      	add	r2, r1
 800921c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	693a      	ldr	r2, [r7, #16]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	015a      	lsls	r2, r3, #5
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	4413      	add	r3, r2
 8009252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	440a      	add	r2, r1
 8009260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009264:	0cdb      	lsrs	r3, r3, #19
 8009266:	04db      	lsls	r3, r3, #19
 8009268:	6113      	str	r3, [r2, #16]
 800926a:	e04e      	b.n	800930a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	691b      	ldr	r3, [r3, #16]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	0151      	lsls	r1, r2, #5
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	440a      	add	r2, r1
 8009282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009286:	0cdb      	lsrs	r3, r3, #19
 8009288:	04db      	lsls	r3, r3, #19
 800928a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	015a      	lsls	r2, r3, #5
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	4413      	add	r3, r2
 8009294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	693a      	ldr	r2, [r7, #16]
 800929c:	0151      	lsls	r1, r2, #5
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	440a      	add	r2, r1
 80092a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	695a      	ldr	r2, [r3, #20]
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	689b      	ldr	r3, [r3, #8]
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d903      	bls.n	80092c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	689a      	ldr	r2, [r3, #8]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	015a      	lsls	r2, r3, #5
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	4413      	add	r3, r2
 80092cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	693a      	ldr	r2, [r7, #16]
 80092d4:	0151      	lsls	r1, r2, #5
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	440a      	add	r2, r1
 80092da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	015a      	lsls	r2, r3, #5
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	4413      	add	r3, r2
 80092ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f0:	691a      	ldr	r2, [r3, #16]
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	695b      	ldr	r3, [r3, #20]
 80092f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092fa:	6939      	ldr	r1, [r7, #16]
 80092fc:	0148      	lsls	r0, r1, #5
 80092fe:	6979      	ldr	r1, [r7, #20]
 8009300:	4401      	add	r1, r0
 8009302:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009306:	4313      	orrs	r3, r2
 8009308:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800930a:	79fb      	ldrb	r3, [r7, #7]
 800930c:	2b01      	cmp	r3, #1
 800930e:	d11e      	bne.n	800934e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d009      	beq.n	800932c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	4413      	add	r3, r2
 8009320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009324:	461a      	mov	r2, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	693a      	ldr	r2, [r7, #16]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	440a      	add	r2, r1
 8009342:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009346:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800934a:	6013      	str	r3, [r2, #0]
 800934c:	e092      	b.n	8009474 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	015a      	lsls	r2, r3, #5
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	4413      	add	r3, r2
 8009356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	0151      	lsls	r1, r2, #5
 8009360:	697a      	ldr	r2, [r7, #20]
 8009362:	440a      	add	r2, r1
 8009364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009368:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800936c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d07e      	beq.n	8009474 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	f003 030f 	and.w	r3, r3, #15
 8009386:	2101      	movs	r1, #1
 8009388:	fa01 f303 	lsl.w	r3, r1, r3
 800938c:	6979      	ldr	r1, [r7, #20]
 800938e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009392:	4313      	orrs	r3, r2
 8009394:	634b      	str	r3, [r1, #52]	; 0x34
 8009396:	e06d      	b.n	8009474 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	015a      	lsls	r2, r3, #5
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	4413      	add	r3, r2
 80093a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a4:	691b      	ldr	r3, [r3, #16]
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	0151      	lsls	r1, r2, #5
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	440a      	add	r2, r1
 80093ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093b2:	0cdb      	lsrs	r3, r3, #19
 80093b4:	04db      	lsls	r3, r3, #19
 80093b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	015a      	lsls	r2, r3, #5
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	4413      	add	r3, r2
 80093c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	0151      	lsls	r1, r2, #5
 80093ca:	697a      	ldr	r2, [r7, #20]
 80093cc:	440a      	add	r2, r1
 80093ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80093d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80093da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	689a      	ldr	r2, [r3, #8]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	693a      	ldr	r2, [r7, #16]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	440a      	add	r2, r1
 8009402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800940a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	4413      	add	r3, r2
 8009414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009418:	691a      	ldr	r2, [r3, #16]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009422:	6939      	ldr	r1, [r7, #16]
 8009424:	0148      	lsls	r0, r1, #5
 8009426:	6979      	ldr	r1, [r7, #20]
 8009428:	4401      	add	r1, r0
 800942a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800942e:	4313      	orrs	r3, r2
 8009430:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009432:	79fb      	ldrb	r3, [r7, #7]
 8009434:	2b01      	cmp	r3, #1
 8009436:	d10d      	bne.n	8009454 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	68db      	ldr	r3, [r3, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d009      	beq.n	8009454 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	68d9      	ldr	r1, [r3, #12]
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009450:	460a      	mov	r2, r1
 8009452:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	697a      	ldr	r2, [r7, #20]
 8009468:	440a      	add	r2, r1
 800946a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800946e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009472:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009474:	2300      	movs	r3, #0
}
 8009476:	4618      	mov	r0, r3
 8009478:	371c      	adds	r7, #28
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009482:	b480      	push	{r7}
 8009484:	b089      	sub	sp, #36	; 0x24
 8009486:	af00      	add	r7, sp, #0
 8009488:	60f8      	str	r0, [r7, #12]
 800948a:	60b9      	str	r1, [r7, #8]
 800948c:	4611      	mov	r1, r2
 800948e:	461a      	mov	r2, r3
 8009490:	460b      	mov	r3, r1
 8009492:	71fb      	strb	r3, [r7, #7]
 8009494:	4613      	mov	r3, r2
 8009496:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80094a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d11a      	bne.n	80094de <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80094a8:	88bb      	ldrh	r3, [r7, #4]
 80094aa:	3303      	adds	r3, #3
 80094ac:	089b      	lsrs	r3, r3, #2
 80094ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80094b0:	2300      	movs	r3, #0
 80094b2:	61bb      	str	r3, [r7, #24]
 80094b4:	e00f      	b.n	80094d6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	031a      	lsls	r2, r3, #12
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094c2:	461a      	mov	r2, r3
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	3304      	adds	r3, #4
 80094ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	3301      	adds	r3, #1
 80094d4:	61bb      	str	r3, [r7, #24]
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	429a      	cmp	r2, r3
 80094dc:	d3eb      	bcc.n	80094b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80094de:	2300      	movs	r3, #0
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3724      	adds	r7, #36	; 0x24
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b089      	sub	sp, #36	; 0x24
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	4613      	mov	r3, r2
 80094f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009502:	88fb      	ldrh	r3, [r7, #6]
 8009504:	3303      	adds	r3, #3
 8009506:	089b      	lsrs	r3, r3, #2
 8009508:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800950a:	2300      	movs	r3, #0
 800950c:	61bb      	str	r3, [r7, #24]
 800950e:	e00b      	b.n	8009528 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	601a      	str	r2, [r3, #0]
    pDest++;
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	3304      	adds	r3, #4
 8009520:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009522:	69bb      	ldr	r3, [r7, #24]
 8009524:	3301      	adds	r3, #1
 8009526:	61bb      	str	r3, [r7, #24]
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	429a      	cmp	r2, r3
 800952e:	d3ef      	bcc.n	8009510 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009530:	69fb      	ldr	r3, [r7, #28]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3724      	adds	r7, #36	; 0x24
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr

0800953e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800953e:	b480      	push	{r7}
 8009540:	b085      	sub	sp, #20
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	785b      	ldrb	r3, [r3, #1]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d12c      	bne.n	80095b4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	015a      	lsls	r2, r3, #5
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	4413      	add	r3, r2
 8009562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	db12      	blt.n	8009592 <USB_EPSetStall+0x54>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d00f      	beq.n	8009592 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	0151      	lsls	r1, r2, #5
 8009584:	68fa      	ldr	r2, [r7, #12]
 8009586:	440a      	add	r2, r1
 8009588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800958c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009590:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68ba      	ldr	r2, [r7, #8]
 80095a2:	0151      	lsls	r1, r2, #5
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	440a      	add	r2, r1
 80095a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095b0:	6013      	str	r3, [r2, #0]
 80095b2:	e02b      	b.n	800960c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	015a      	lsls	r2, r3, #5
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	4413      	add	r3, r2
 80095bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	db12      	blt.n	80095ec <USB_EPSetStall+0xae>
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00f      	beq.n	80095ec <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	68ba      	ldr	r2, [r7, #8]
 80095dc:	0151      	lsls	r1, r2, #5
 80095de:	68fa      	ldr	r2, [r7, #12]
 80095e0:	440a      	add	r2, r1
 80095e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095ea:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800960a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	3714      	adds	r7, #20
 8009612:	46bd      	mov	sp, r7
 8009614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009618:	4770      	bx	lr

0800961a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800961a:	b480      	push	{r7}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	785b      	ldrb	r3, [r3, #1]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d128      	bne.n	8009688 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	0151      	lsls	r1, r2, #5
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	440a      	add	r2, r1
 800964c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009650:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009654:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	78db      	ldrb	r3, [r3, #3]
 800965a:	2b03      	cmp	r3, #3
 800965c:	d003      	beq.n	8009666 <USB_EPClearStall+0x4c>
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	78db      	ldrb	r3, [r3, #3]
 8009662:	2b02      	cmp	r3, #2
 8009664:	d138      	bne.n	80096d8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	015a      	lsls	r2, r3, #5
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	4413      	add	r3, r2
 800966e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	68ba      	ldr	r2, [r7, #8]
 8009676:	0151      	lsls	r1, r2, #5
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	440a      	add	r2, r1
 800967c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009684:	6013      	str	r3, [r2, #0]
 8009686:	e027      	b.n	80096d8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	015a      	lsls	r2, r3, #5
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4413      	add	r3, r2
 8009690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	0151      	lsls	r1, r2, #5
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	440a      	add	r2, r1
 800969e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	78db      	ldrb	r3, [r3, #3]
 80096ac:	2b03      	cmp	r3, #3
 80096ae:	d003      	beq.n	80096b8 <USB_EPClearStall+0x9e>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	78db      	ldrb	r3, [r3, #3]
 80096b4:	2b02      	cmp	r3, #2
 80096b6:	d10f      	bne.n	80096d8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	0151      	lsls	r1, r2, #5
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	440a      	add	r2, r1
 80096ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096d6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr

080096e6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
 80096ee:	460b      	mov	r3, r1
 80096f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009704:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009708:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	78fb      	ldrb	r3, [r7, #3]
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800971a:	68f9      	ldr	r1, [r7, #12]
 800971c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009720:	4313      	orrs	r3, r2
 8009722:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	68fa      	ldr	r2, [r7, #12]
 8009748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800974c:	f023 0302 	bic.w	r3, r3, #2
 8009750:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009752:	2003      	movs	r0, #3
 8009754:	f7f8 fc9a 	bl	800208c <HAL_Delay>

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	68fa      	ldr	r2, [r7, #12]
 8009778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800977c:	f043 0302 	orr.w	r3, r3, #2
 8009780:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009782:	2003      	movs	r0, #3
 8009784:	f7f8 fc82 	bl	800208c <HAL_Delay>

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}

08009792 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009792:	b480      	push	{r7}
 8009794:	b085      	sub	sp, #20
 8009796:	af00      	add	r7, sp, #0
 8009798:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	695b      	ldr	r3, [r3, #20]
 800979e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	4013      	ands	r3, r2
 80097a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80097aa:	68fb      	ldr	r3, [r7, #12]
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3714      	adds	r7, #20
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	4013      	ands	r3, r2
 80097da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	0c1b      	lsrs	r3, r3, #16
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3714      	adds	r7, #20
 80097e4:	46bd      	mov	sp, r7
 80097e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ea:	4770      	bx	lr

080097ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b085      	sub	sp, #20
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097fe:	699b      	ldr	r3, [r3, #24]
 8009800:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009808:	69db      	ldr	r3, [r3, #28]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	4013      	ands	r3, r2
 800980e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	b29b      	uxth	r3, r3
}
 8009814:	4618      	mov	r0, r3
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009830:	78fb      	ldrb	r3, [r7, #3]
 8009832:	015a      	lsls	r2, r3, #5
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	4413      	add	r3, r2
 8009838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009846:	695b      	ldr	r3, [r3, #20]
 8009848:	68ba      	ldr	r2, [r7, #8]
 800984a:	4013      	ands	r3, r2
 800984c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800984e:	68bb      	ldr	r3, [r7, #8]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800987c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800987e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	f003 030f 	and.w	r3, r3, #15
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	fa22 f303 	lsr.w	r3, r2, r3
 800988c:	01db      	lsls	r3, r3, #7
 800988e:	b2db      	uxtb	r3, r3
 8009890:	693a      	ldr	r2, [r7, #16]
 8009892:	4313      	orrs	r3, r2
 8009894:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	4013      	ands	r3, r2
 80098a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80098aa:	68bb      	ldr	r3, [r7, #8]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	371c      	adds	r7, #28
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	f003 0301 	and.w	r3, r3, #1
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b085      	sub	sp, #20
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80098f2:	f023 0307 	bic.w	r3, r3, #7
 80098f6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f003 0306 	and.w	r3, r3, #6
 8009904:	2b04      	cmp	r3, #4
 8009906:	d109      	bne.n	800991c <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68fa      	ldr	r2, [r7, #12]
 8009912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009916:	f043 0303 	orr.w	r3, r3, #3
 800991a:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800992a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800992e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3714      	adds	r7, #20
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr
	...

08009940 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009940:	b480      	push	{r7}
 8009942:	b087      	sub	sp, #28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	460b      	mov	r3, r1
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	333c      	adds	r3, #60	; 0x3c
 8009956:	3304      	adds	r3, #4
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	4a26      	ldr	r2, [pc, #152]	; (80099f8 <USB_EP0_OutStart+0xb8>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d90a      	bls.n	800997a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009974:	d101      	bne.n	800997a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	e037      	b.n	80099ea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009980:	461a      	mov	r2, r3
 8009982:	2300      	movs	r3, #0
 8009984:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998c:	691b      	ldr	r3, [r3, #16]
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009998:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a8:	f043 0318 	orr.w	r3, r3, #24
 80099ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099bc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80099c0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d10f      	bne.n	80099e8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ce:	461a      	mov	r2, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	697a      	ldr	r2, [r7, #20]
 80099de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099e2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80099e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	371c      	adds	r7, #28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	4f54300a 	.word	0x4f54300a

080099fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	60fb      	str	r3, [r7, #12]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	4a13      	ldr	r2, [pc, #76]	; (8009a60 <USB_CoreReset+0x64>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d901      	bls.n	8009a1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a16:	2303      	movs	r3, #3
 8009a18:	e01b      	b.n	8009a52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	daf2      	bge.n	8009a08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a22:	2300      	movs	r3, #0
 8009a24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	f043 0201 	orr.w	r2, r3, #1
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	3301      	adds	r3, #1
 8009a36:	60fb      	str	r3, [r7, #12]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4a09      	ldr	r2, [pc, #36]	; (8009a60 <USB_CoreReset+0x64>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d901      	bls.n	8009a44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e006      	b.n	8009a52 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	691b      	ldr	r3, [r3, #16]
 8009a48:	f003 0301 	and.w	r3, r3, #1
 8009a4c:	2b01      	cmp	r3, #1
 8009a4e:	d0f0      	beq.n	8009a32 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3714      	adds	r7, #20
 8009a56:	46bd      	mov	sp, r7
 8009a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5c:	4770      	bx	lr
 8009a5e:	bf00      	nop
 8009a60:	00030d40 	.word	0x00030d40

08009a64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009a68:	4904      	ldr	r1, [pc, #16]	; (8009a7c <MX_FATFS_Init+0x18>)
 8009a6a:	4805      	ldr	r0, [pc, #20]	; (8009a80 <MX_FATFS_Init+0x1c>)
 8009a6c:	f001 fe08 	bl	800b680 <FATFS_LinkDriver>
 8009a70:	4603      	mov	r3, r0
 8009a72:	461a      	mov	r2, r3
 8009a74:	4b03      	ldr	r3, [pc, #12]	; (8009a84 <MX_FATFS_Init+0x20>)
 8009a76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009a78:	bf00      	nop
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20000b2c 	.word	0x20000b2c
 8009a80:	0800fc14 	.word	0x0800fc14
 8009a84:	20000b28 	.word	0x20000b28

08009a88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009a92:	f000 f871 	bl	8009b78 <BSP_SD_IsDetected>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d001      	beq.n	8009aa0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e012      	b.n	8009ac6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009aa0:	480b      	ldr	r0, [pc, #44]	; (8009ad0 <BSP_SD_Init+0x48>)
 8009aa2:	f7fb fbee 	bl	8005282 <HAL_SD_Init>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009aaa:	79fb      	ldrb	r3, [r7, #7]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d109      	bne.n	8009ac4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009ab0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ab4:	4806      	ldr	r0, [pc, #24]	; (8009ad0 <BSP_SD_Init+0x48>)
 8009ab6:	f7fc f9cd 	bl	8005e54 <HAL_SD_ConfigWideBusOperation>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000a08 	.word	0x20000a08

08009ad4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b086      	sub	sp, #24
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	60f8      	str	r0, [r7, #12]
 8009adc:	60b9      	str	r1, [r7, #8]
 8009ade:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	68f9      	ldr	r1, [r7, #12]
 8009aea:	4806      	ldr	r0, [pc, #24]	; (8009b04 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009aec:	f7fb fc5a 	bl	80053a4 <HAL_SD_ReadBlocks_DMA>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d001      	beq.n	8009afa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8009afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20000a08 	.word	0x20000a08

08009b08 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009b14:	2300      	movs	r3, #0
 8009b16:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68ba      	ldr	r2, [r7, #8]
 8009b1c:	68f9      	ldr	r1, [r7, #12]
 8009b1e:	4806      	ldr	r0, [pc, #24]	; (8009b38 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009b20:	f7fb fd2a 	bl	8005578 <HAL_SD_WriteBlocks_DMA>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d001      	beq.n	8009b2e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	20000a08 	.word	0x20000a08

08009b3c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009b40:	4805      	ldr	r0, [pc, #20]	; (8009b58 <BSP_SD_GetCardState+0x1c>)
 8009b42:	f7fc fa03 	bl	8005f4c <HAL_SD_GetCardState>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b04      	cmp	r3, #4
 8009b4a:	bf14      	ite	ne
 8009b4c:	2301      	movne	r3, #1
 8009b4e:	2300      	moveq	r3, #0
 8009b50:	b2db      	uxtb	r3, r3
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	20000a08 	.word	0x20000a08

08009b5c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	4803      	ldr	r0, [pc, #12]	; (8009b74 <BSP_SD_GetCardInfo+0x18>)
 8009b68:	f7fc f948 	bl	8005dfc <HAL_SD_GetCardInfo>
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	20000a08 	.word	0x20000a08

08009b78 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8009b82:	f000 f80b 	bl	8009b9c <BSP_PlatformIsDetected>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d101      	bne.n	8009b90 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	b2db      	uxtb	r3, r3
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009baa:	4806      	ldr	r0, [pc, #24]	; (8009bc4 <BSP_PlatformIsDetected+0x28>)
 8009bac:	f7f9 f8d8 	bl	8002d60 <HAL_GPIO_ReadPin>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d001      	beq.n	8009bba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8009bba:	79fb      	ldrb	r3, [r7, #7]
}  
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	40020000 	.word	0x40020000

08009bc8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009bd0:	f7f8 fa50 	bl	8002074 <HAL_GetTick>
 8009bd4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009bd6:	e006      	b.n	8009be6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009bd8:	f7ff ffb0 	bl	8009b3c <BSP_SD_GetCardState>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d101      	bne.n	8009be6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e009      	b.n	8009bfa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009be6:	f7f8 fa45 	bl	8002074 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	429a      	cmp	r2, r3
 8009bf4:	d8f0      	bhi.n	8009bd8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009c0e:	4b0b      	ldr	r3, [pc, #44]	; (8009c3c <SD_CheckStatus+0x38>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009c14:	f7ff ff92 	bl	8009b3c <BSP_SD_GetCardState>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d107      	bne.n	8009c2e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009c1e:	4b07      	ldr	r3, [pc, #28]	; (8009c3c <SD_CheckStatus+0x38>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	f023 0301 	bic.w	r3, r3, #1
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <SD_CheckStatus+0x38>)
 8009c2c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009c2e:	4b03      	ldr	r3, [pc, #12]	; (8009c3c <SD_CheckStatus+0x38>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	b2db      	uxtb	r3, r3
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	2000000d 	.word	0x2000000d

08009c40 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	4603      	mov	r3, r0
 8009c48:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009c4a:	f7ff ff1d 	bl	8009a88 <BSP_SD_Init>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d107      	bne.n	8009c64 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff ffd4 	bl	8009c04 <SD_CheckStatus>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	461a      	mov	r2, r3
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <SD_initialize+0x34>)
 8009c62:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 8009c64:	4b03      	ldr	r3, [pc, #12]	; (8009c74 <SD_initialize+0x34>)
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	b2db      	uxtb	r3, r3
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3708      	adds	r7, #8
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	2000000d 	.word	0x2000000d

08009c78 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009c82:	79fb      	ldrb	r3, [r7, #7]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7ff ffbd 	bl	8009c04 <SD_CheckStatus>
 8009c8a:	4603      	mov	r3, r0
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b088      	sub	sp, #32
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60b9      	str	r1, [r7, #8]
 8009c9c:	607a      	str	r2, [r7, #4]
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009ca8:	f247 5030 	movw	r0, #30000	; 0x7530
 8009cac:	f7ff ff8c 	bl	8009bc8 <SD_CheckStatusWithTimeout>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	da01      	bge.n	8009cba <SD_read+0x26>
  {
    return res;
 8009cb6:	7ffb      	ldrb	r3, [r7, #31]
 8009cb8:	e08b      	b.n	8009dd2 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	f003 0303 	and.w	r3, r3, #3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f040 8085 	bne.w	8009dd0 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009cc6:	683a      	ldr	r2, [r7, #0]
 8009cc8:	6879      	ldr	r1, [r7, #4]
 8009cca:	68b8      	ldr	r0, [r7, #8]
 8009ccc:	f7ff ff02 	bl	8009ad4 <BSP_SD_ReadBlocks_DMA>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d133      	bne.n	8009d3e <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009cd6:	4b41      	ldr	r3, [pc, #260]	; (8009ddc <SD_read+0x148>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009cdc:	f7f8 f9ca 	bl	8002074 <HAL_GetTick>
 8009ce0:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009ce2:	bf00      	nop
 8009ce4:	4b3d      	ldr	r3, [pc, #244]	; (8009ddc <SD_read+0x148>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d108      	bne.n	8009cfe <SD_read+0x6a>
 8009cec:	f7f8 f9c2 	bl	8002074 <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	f247 522f 	movw	r2, #29999	; 0x752f
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d9f2      	bls.n	8009ce4 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8009cfe:	4b37      	ldr	r3, [pc, #220]	; (8009ddc <SD_read+0x148>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d102      	bne.n	8009d0c <SD_read+0x78>
      {
        res = RES_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	77fb      	strb	r3, [r7, #31]
 8009d0a:	e061      	b.n	8009dd0 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 8009d0c:	4b33      	ldr	r3, [pc, #204]	; (8009ddc <SD_read+0x148>)
 8009d0e:	2200      	movs	r2, #0
 8009d10:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009d12:	f7f8 f9af 	bl	8002074 <HAL_GetTick>
 8009d16:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d18:	e007      	b.n	8009d2a <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d1a:	f7ff ff0f 	bl	8009b3c <BSP_SD_GetCardState>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d102      	bne.n	8009d2a <SD_read+0x96>
          {
            res = RES_OK;
 8009d24:	2300      	movs	r3, #0
 8009d26:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009d28:	e052      	b.n	8009dd0 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d2a:	f7f8 f9a3 	bl	8002074 <HAL_GetTick>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	1ad3      	subs	r3, r2, r3
 8009d34:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d9ee      	bls.n	8009d1a <SD_read+0x86>
 8009d3c:	e048      	b.n	8009dd0 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 8009d3e:	2300      	movs	r3, #0
 8009d40:	61bb      	str	r3, [r7, #24]
 8009d42:	e034      	b.n	8009dae <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	607a      	str	r2, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4824      	ldr	r0, [pc, #144]	; (8009de0 <SD_read+0x14c>)
 8009d50:	f7ff fec0 	bl	8009ad4 <BSP_SD_ReadBlocks_DMA>
 8009d54:	4603      	mov	r3, r0
 8009d56:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8009d58:	7fbb      	ldrb	r3, [r7, #30]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d12c      	bne.n	8009db8 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 8009d5e:	4b1f      	ldr	r3, [pc, #124]	; (8009ddc <SD_read+0x148>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 8009d64:	f7f8 f986 	bl	8002074 <HAL_GetTick>
 8009d68:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009d6a:	bf00      	nop
 8009d6c:	4b1b      	ldr	r3, [pc, #108]	; (8009ddc <SD_read+0x148>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d108      	bne.n	8009d86 <SD_read+0xf2>
 8009d74:	f7f8 f97e 	bl	8002074 <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	f247 522f 	movw	r2, #29999	; 0x752f
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d9f2      	bls.n	8009d6c <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 8009d86:	4b15      	ldr	r3, [pc, #84]	; (8009ddc <SD_read+0x148>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d016      	beq.n	8009dbc <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	4a13      	ldr	r2, [pc, #76]	; (8009de0 <SD_read+0x14c>)
 8009d92:	4618      	mov	r0, r3
 8009d94:	4611      	mov	r1, r2
 8009d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f002 f9b8 	bl	800c110 <memcpy>
          buff += BLOCKSIZE;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009da6:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	3301      	adds	r3, #1
 8009dac:	61bb      	str	r3, [r7, #24]
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d8c6      	bhi.n	8009d44 <SD_read+0xb0>
 8009db6:	e002      	b.n	8009dbe <SD_read+0x12a>
        }
        else
        {
          break;
 8009db8:	bf00      	nop
 8009dba:	e000      	b.n	8009dbe <SD_read+0x12a>
            break;
 8009dbc:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	683a      	ldr	r2, [r7, #0]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d104      	bne.n	8009dd0 <SD_read+0x13c>
 8009dc6:	7fbb      	ldrb	r3, [r7, #30]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <SD_read+0x13c>
        res = RES_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 8009dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3720      	adds	r7, #32
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
 8009dda:	bf00      	nop
 8009ddc:	20000574 	.word	0x20000574
 8009de0:	20000370 	.word	0x20000370

08009de4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60b9      	str	r1, [r7, #8]
 8009dec:	607a      	str	r2, [r7, #4]
 8009dee:	603b      	str	r3, [r7, #0]
 8009df0:	4603      	mov	r3, r0
 8009df2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 8009df8:	4b4c      	ldr	r3, [pc, #304]	; (8009f2c <SD_write+0x148>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009dfe:	f247 5030 	movw	r0, #30000	; 0x7530
 8009e02:	f7ff fee1 	bl	8009bc8 <SD_CheckStatusWithTimeout>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da01      	bge.n	8009e10 <SD_write+0x2c>
  {
    return res;
 8009e0c:	7ffb      	ldrb	r3, [r7, #31]
 8009e0e:	e088      	b.n	8009f22 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f003 0303 	and.w	r3, r3, #3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f040 8082 	bne.w	8009f20 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	6879      	ldr	r1, [r7, #4]
 8009e20:	68b8      	ldr	r0, [r7, #8]
 8009e22:	f7ff fe71 	bl	8009b08 <BSP_SD_WriteBlocks_DMA>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d130      	bne.n	8009e8e <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009e2c:	f7f8 f922 	bl	8002074 <HAL_GetTick>
 8009e30:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009e32:	bf00      	nop
 8009e34:	4b3d      	ldr	r3, [pc, #244]	; (8009f2c <SD_write+0x148>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d108      	bne.n	8009e4e <SD_write+0x6a>
 8009e3c:	f7f8 f91a 	bl	8002074 <HAL_GetTick>
 8009e40:	4602      	mov	r2, r0
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	1ad3      	subs	r3, r2, r3
 8009e46:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d9f2      	bls.n	8009e34 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8009e4e:	4b37      	ldr	r3, [pc, #220]	; (8009f2c <SD_write+0x148>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d102      	bne.n	8009e5c <SD_write+0x78>
      {
        res = RES_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	77fb      	strb	r3, [r7, #31]
 8009e5a:	e061      	b.n	8009f20 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 8009e5c:	4b33      	ldr	r3, [pc, #204]	; (8009f2c <SD_write+0x148>)
 8009e5e:	2200      	movs	r2, #0
 8009e60:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009e62:	f7f8 f907 	bl	8002074 <HAL_GetTick>
 8009e66:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e68:	e007      	b.n	8009e7a <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e6a:	f7ff fe67 	bl	8009b3c <BSP_SD_GetCardState>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d102      	bne.n	8009e7a <SD_write+0x96>
          {
            res = RES_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	77fb      	strb	r3, [r7, #31]
            break;
 8009e78:	e052      	b.n	8009f20 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009e7a:	f7f8 f8fb 	bl	8002074 <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	f247 522f 	movw	r2, #29999	; 0x752f
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d9ee      	bls.n	8009e6a <SD_write+0x86>
 8009e8c:	e048      	b.n	8009f20 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 8009e8e:	2300      	movs	r3, #0
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	e034      	b.n	8009efe <SD_write+0x11a>
      {
        WriteStatus = 0;
 8009e94:	4b25      	ldr	r3, [pc, #148]	; (8009f2c <SD_write+0x148>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	1c5a      	adds	r2, r3, #1
 8009e9e:	607a      	str	r2, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	4822      	ldr	r0, [pc, #136]	; (8009f30 <SD_write+0x14c>)
 8009ea6:	f7ff fe2f 	bl	8009b08 <BSP_SD_WriteBlocks_DMA>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 8009eae:	7fbb      	ldrb	r3, [r7, #30]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d129      	bne.n	8009f08 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 8009eb4:	f7f8 f8de 	bl	8002074 <HAL_GetTick>
 8009eb8:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009eba:	bf00      	nop
 8009ebc:	4b1b      	ldr	r3, [pc, #108]	; (8009f2c <SD_write+0x148>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d108      	bne.n	8009ed6 <SD_write+0xf2>
 8009ec4:	f7f8 f8d6 	bl	8002074 <HAL_GetTick>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	1ad3      	subs	r3, r2, r3
 8009ece:	f247 522f 	movw	r2, #29999	; 0x752f
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d9f2      	bls.n	8009ebc <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 8009ed6:	4b15      	ldr	r3, [pc, #84]	; (8009f2c <SD_write+0x148>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d016      	beq.n	8009f0c <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	4a13      	ldr	r2, [pc, #76]	; (8009f30 <SD_write+0x14c>)
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009eea:	461a      	mov	r2, r3
 8009eec:	f002 f910 	bl	800c110 <memcpy>
          buff += BLOCKSIZE;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009ef6:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 8009ef8:	69bb      	ldr	r3, [r7, #24]
 8009efa:	3301      	adds	r3, #1
 8009efc:	61bb      	str	r3, [r7, #24]
 8009efe:	69bb      	ldr	r3, [r7, #24]
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d8c6      	bhi.n	8009e94 <SD_write+0xb0>
 8009f06:	e002      	b.n	8009f0e <SD_write+0x12a>
        }
        else
        {
          break;
 8009f08:	bf00      	nop
 8009f0a:	e000      	b.n	8009f0e <SD_write+0x12a>
            break;
 8009f0c:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d104      	bne.n	8009f20 <SD_write+0x13c>
 8009f16:	7fbb      	ldrb	r3, [r7, #30]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <SD_write+0x13c>
        res = RES_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 8009f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3720      	adds	r7, #32
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	20000570 	.word	0x20000570
 8009f30:	20000370 	.word	0x20000370

08009f34 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b08c      	sub	sp, #48	; 0x30
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	603a      	str	r2, [r7, #0]
 8009f3e:	71fb      	strb	r3, [r7, #7]
 8009f40:	460b      	mov	r3, r1
 8009f42:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009f4a:	4b25      	ldr	r3, [pc, #148]	; (8009fe0 <SD_ioctl+0xac>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	f003 0301 	and.w	r3, r3, #1
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d001      	beq.n	8009f5c <SD_ioctl+0x28>
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e03c      	b.n	8009fd6 <SD_ioctl+0xa2>

  switch (cmd)
 8009f5c:	79bb      	ldrb	r3, [r7, #6]
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	d834      	bhi.n	8009fcc <SD_ioctl+0x98>
 8009f62:	a201      	add	r2, pc, #4	; (adr r2, 8009f68 <SD_ioctl+0x34>)
 8009f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f68:	08009f79 	.word	0x08009f79
 8009f6c:	08009f81 	.word	0x08009f81
 8009f70:	08009f99 	.word	0x08009f99
 8009f74:	08009fb3 	.word	0x08009fb3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f7e:	e028      	b.n	8009fd2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f80:	f107 030c 	add.w	r3, r7, #12
 8009f84:	4618      	mov	r0, r3
 8009f86:	f7ff fde9 	bl	8009b5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009f96:	e01c      	b.n	8009fd2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009f98:	f107 030c 	add.w	r3, r7, #12
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7ff fddd 	bl	8009b5c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa4:	b29a      	uxth	r2, r3
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009fb0:	e00f      	b.n	8009fd2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009fb2:	f107 030c 	add.w	r3, r7, #12
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7ff fdd0 	bl	8009b5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fbe:	0a5a      	lsrs	r2, r3, #9
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009fca:	e002      	b.n	8009fd2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009fcc:	2304      	movs	r3, #4
 8009fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8009fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3730      	adds	r7, #48	; 0x30
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	2000000d 	.word	0x2000000d

08009fe4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b084      	sub	sp, #16
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	460b      	mov	r3, r1
 8009fee:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7c1b      	ldrb	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d115      	bne.n	800a028 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ffc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a000:	2202      	movs	r2, #2
 800a002:	2181      	movs	r1, #129	; 0x81
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f001 fefc 	bl	800be02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a010:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a014:	2202      	movs	r2, #2
 800a016:	2101      	movs	r1, #1
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 fef2 	bl	800be02 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800a026:	e012      	b.n	800a04e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a028:	2340      	movs	r3, #64	; 0x40
 800a02a:	2202      	movs	r2, #2
 800a02c:	2181      	movs	r1, #129	; 0x81
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f001 fee7 	bl	800be02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a03a:	2340      	movs	r3, #64	; 0x40
 800a03c:	2202      	movs	r2, #2
 800a03e:	2101      	movs	r1, #1
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f001 fede 	bl	800be02 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a04e:	2308      	movs	r3, #8
 800a050:	2203      	movs	r2, #3
 800a052:	2182      	movs	r1, #130	; 0x82
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f001 fed4 	bl	800be02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800a060:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a064:	f002 f844 	bl	800c0f0 <malloc>
 800a068:	4603      	mov	r3, r0
 800a06a:	461a      	mov	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d102      	bne.n	800a082 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800a07c:	2301      	movs	r3, #1
 800a07e:	73fb      	strb	r3, [r7, #15]
 800a080:	e026      	b.n	800a0d0 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a088:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	2200      	movs	r2, #0
 800a098:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	7c1b      	ldrb	r3, [r3, #16]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d109      	bne.n	800a0c0 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0b6:	2101      	movs	r1, #1
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f001 ff93 	bl	800bfe4 <USBD_LL_PrepareReceive>
 800a0be:	e007      	b.n	800a0d0 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a0c6:	2340      	movs	r3, #64	; 0x40
 800a0c8:	2101      	movs	r1, #1
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f001 ff8a 	bl	800bfe4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a0d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}

0800a0da <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0da:	b580      	push	{r7, lr}
 800a0dc:	b084      	sub	sp, #16
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	460b      	mov	r3, r1
 800a0e4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a0ea:	2181      	movs	r1, #129	; 0x81
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f001 feae 	bl	800be4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f001 fea7 	bl	800be4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a108:	2182      	movs	r1, #130	; 0x82
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f001 fe9f 	bl	800be4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00e      	beq.n	800a13e <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a130:	4618      	mov	r0, r3
 800a132:	f001 ffe5 	bl	800c100 <free>
    pdev->pClassData = NULL;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3710      	adds	r7, #16
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b086      	sub	sp, #24
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a158:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a15a:	2300      	movs	r3, #0
 800a15c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a15e:	2300      	movs	r3, #0
 800a160:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a162:	2300      	movs	r3, #0
 800a164:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d039      	beq.n	800a1e6 <USBD_CDC_Setup+0x9e>
 800a172:	2b20      	cmp	r3, #32
 800a174:	d17c      	bne.n	800a270 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	88db      	ldrh	r3, [r3, #6]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d029      	beq.n	800a1d2 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	781b      	ldrb	r3, [r3, #0]
 800a182:	b25b      	sxtb	r3, r3
 800a184:	2b00      	cmp	r3, #0
 800a186:	da11      	bge.n	800a1ac <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800a194:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	88d2      	ldrh	r2, [r2, #6]
 800a19a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a19c:	6939      	ldr	r1, [r7, #16]
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	88db      	ldrh	r3, [r3, #6]
 800a1a2:	461a      	mov	r2, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f001 f99b 	bl	800b4e0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800a1aa:	e068      	b.n	800a27e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	785a      	ldrb	r2, [r3, #1]
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	88db      	ldrh	r3, [r3, #6]
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a1c2:	6939      	ldr	r1, [r7, #16]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	88db      	ldrh	r3, [r3, #6]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f001 f9b6 	bl	800b53c <USBD_CtlPrepareRx>
    break;
 800a1d0:	e055      	b.n	800a27e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	683a      	ldr	r2, [r7, #0]
 800a1dc:	7850      	ldrb	r0, [r2, #1]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	6839      	ldr	r1, [r7, #0]
 800a1e2:	4798      	blx	r3
    break;
 800a1e4:	e04b      	b.n	800a27e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	2b0a      	cmp	r3, #10
 800a1ec:	d017      	beq.n	800a21e <USBD_CDC_Setup+0xd6>
 800a1ee:	2b0b      	cmp	r3, #11
 800a1f0:	d029      	beq.n	800a246 <USBD_CDC_Setup+0xfe>
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d133      	bne.n	800a25e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	d107      	bne.n	800a210 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800a200:	f107 030c 	add.w	r3, r7, #12
 800a204:	2202      	movs	r2, #2
 800a206:	4619      	mov	r1, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f001 f969 	bl	800b4e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a20e:	e02e      	b.n	800a26e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f001 f8f9 	bl	800b40a <USBD_CtlError>
			  ret = USBD_FAIL;
 800a218:	2302      	movs	r3, #2
 800a21a:	75fb      	strb	r3, [r7, #23]
      break;
 800a21c:	e027      	b.n	800a26e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a224:	2b03      	cmp	r3, #3
 800a226:	d107      	bne.n	800a238 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800a228:	f107 030f 	add.w	r3, r7, #15
 800a22c:	2201      	movs	r2, #1
 800a22e:	4619      	mov	r1, r3
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f001 f955 	bl	800b4e0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800a236:	e01a      	b.n	800a26e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800a238:	6839      	ldr	r1, [r7, #0]
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f001 f8e5 	bl	800b40a <USBD_CtlError>
			  ret = USBD_FAIL;
 800a240:	2302      	movs	r3, #2
 800a242:	75fb      	strb	r3, [r7, #23]
      break;
 800a244:	e013      	b.n	800a26e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a24c:	2b03      	cmp	r3, #3
 800a24e:	d00d      	beq.n	800a26c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f001 f8d9 	bl	800b40a <USBD_CtlError>
			  ret = USBD_FAIL;
 800a258:	2302      	movs	r3, #2
 800a25a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800a25c:	e006      	b.n	800a26c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f001 f8d2 	bl	800b40a <USBD_CtlError>
      ret = USBD_FAIL;
 800a266:	2302      	movs	r3, #2
 800a268:	75fb      	strb	r3, [r7, #23]
      break;
 800a26a:	e000      	b.n	800a26e <USBD_CDC_Setup+0x126>
      break;
 800a26c:	bf00      	nop
    }
    break;
 800a26e:	e006      	b.n	800a27e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800a270:	6839      	ldr	r1, [r7, #0]
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 f8c9 	bl	800b40a <USBD_CtlError>
    ret = USBD_FAIL;
 800a278:	2302      	movs	r3, #2
 800a27a:	75fb      	strb	r3, [r7, #23]
    break;
 800a27c:	bf00      	nop
  }

  return ret;
 800a27e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a29a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800a2a2:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d03a      	beq.n	800a324 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a2ae:	78fa      	ldrb	r2, [r7, #3]
 800a2b0:	6879      	ldr	r1, [r7, #4]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	4413      	add	r3, r2
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	440b      	add	r3, r1
 800a2bc:	331c      	adds	r3, #28
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d029      	beq.n	800a318 <USBD_CDC_DataIn+0x90>
 800a2c4:	78fa      	ldrb	r2, [r7, #3]
 800a2c6:	6879      	ldr	r1, [r7, #4]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	440b      	add	r3, r1
 800a2d2:	331c      	adds	r3, #28
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	78f9      	ldrb	r1, [r7, #3]
 800a2d8:	68b8      	ldr	r0, [r7, #8]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	00db      	lsls	r3, r3, #3
 800a2de:	1a5b      	subs	r3, r3, r1
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	4403      	add	r3, r0
 800a2e4:	3344      	adds	r3, #68	; 0x44
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a2ec:	fb03 f301 	mul.w	r3, r3, r1
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d110      	bne.n	800a318 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a2f6:	78fa      	ldrb	r2, [r7, #3]
 800a2f8:	6879      	ldr	r1, [r7, #4]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4413      	add	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	440b      	add	r3, r1
 800a304:	331c      	adds	r3, #28
 800a306:	2200      	movs	r2, #0
 800a308:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800a30a:	78f9      	ldrb	r1, [r7, #3]
 800a30c:	2300      	movs	r3, #0
 800a30e:	2200      	movs	r2, #0
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 fe44 	bl	800bf9e <USBD_LL_Transmit>
 800a316:	e003      	b.n	800a320 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	2200      	movs	r2, #0
 800a31c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a320:	2300      	movs	r3, #0
 800a322:	e000      	b.n	800a326 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a324:	2302      	movs	r3, #2
  }
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
 800a336:	460b      	mov	r3, r1
 800a338:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a340:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f001 fe6f 	bl	800c02a <USBD_LL_GetRxDataSize>
 800a34c:	4602      	mov	r2, r0
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00d      	beq.n	800a37a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	68fa      	ldr	r2, [r7, #12]
 800a368:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a372:	4611      	mov	r1, r2
 800a374:	4798      	blx	r3

    return USBD_OK;
 800a376:	2300      	movs	r3, #0
 800a378:	e000      	b.n	800a37c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a37a:	2302      	movs	r3, #2
  }
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a392:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d015      	beq.n	800a3ca <USBD_CDC_EP0_RxReady+0x46>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a3a4:	2bff      	cmp	r3, #255	; 0xff
 800a3a6:	d010      	beq.n	800a3ca <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a3b6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a3be:	b292      	uxth	r2, r2
 800a3c0:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	22ff      	movs	r2, #255	; 0xff
 800a3c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a3ca:	2300      	movs	r3, #0
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2243      	movs	r2, #67	; 0x43
 800a3e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a3e2:	4b03      	ldr	r3, [pc, #12]	; (800a3f0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	20000098 	.word	0x20000098

0800a3f4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2243      	movs	r2, #67	; 0x43
 800a400:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a402:	4b03      	ldr	r3, [pc, #12]	; (800a410 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr
 800a410:	20000054 	.word	0x20000054

0800a414 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2243      	movs	r2, #67	; 0x43
 800a420:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a422:	4b03      	ldr	r3, [pc, #12]	; (800a430 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	200000dc 	.word	0x200000dc

0800a434 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	220a      	movs	r2, #10
 800a440:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a442:	4b03      	ldr	r3, [pc, #12]	; (800a450 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a444:	4618      	mov	r0, r3
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	20000010 	.word	0x20000010

0800a454 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a45e:	2302      	movs	r3, #2
 800a460:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d005      	beq.n	800a474 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	683a      	ldr	r2, [r7, #0]
 800a46c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800a470:	2300      	movs	r3, #0
 800a472:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a474:	7bfb      	ldrb	r3, [r7, #15]
}
 800a476:	4618      	mov	r0, r3
 800a478:	3714      	adds	r7, #20
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a482:	b480      	push	{r7}
 800a484:	b087      	sub	sp, #28
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	60b9      	str	r1, [r7, #8]
 800a48c:	4613      	mov	r3, r2
 800a48e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a496:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	68ba      	ldr	r2, [r7, #8]
 800a49c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a4a0:	88fa      	ldrh	r2, [r7, #6]
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4c6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	683a      	ldr	r2, [r7, #0]
 800a4cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3714      	adds	r7, #20
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b084      	sub	sp, #16
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4ec:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d017      	beq.n	800a528 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	7c1b      	ldrb	r3, [r3, #16]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d109      	bne.n	800a514 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a50a:	2101      	movs	r1, #1
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f001 fd69 	bl	800bfe4 <USBD_LL_PrepareReceive>
 800a512:	e007      	b.n	800a524 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a51a:	2340      	movs	r3, #64	; 0x40
 800a51c:	2101      	movs	r1, #1
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f001 fd60 	bl	800bfe4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a524:	2300      	movs	r3, #0
 800a526:	e000      	b.n	800a52a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a528:	2302      	movs	r3, #2
  }
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}

0800a532 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a532:	b580      	push	{r7, lr}
 800a534:	b084      	sub	sp, #16
 800a536:	af00      	add	r7, sp, #0
 800a538:	60f8      	str	r0, [r7, #12]
 800a53a:	60b9      	str	r1, [r7, #8]
 800a53c:	4613      	mov	r3, r2
 800a53e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a546:	2302      	movs	r3, #2
 800a548:	e01a      	b.n	800a580 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	2200      	movs	r2, #0
 800a558:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	79fa      	ldrb	r2, [r7, #7]
 800a576:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f001 fbdb 	bl	800bd34 <USBD_LL_Init>

  return USBD_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d006      	beq.n	800a5aa <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	683a      	ldr	r2, [r7, #0]
 800a5a0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
 800a5a8:	e001      	b.n	800a5ae <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a5aa:	2302      	movs	r3, #2
 800a5ac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3714      	adds	r7, #20
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 fc01 	bl	800bdcc <USBD_LL_Start>

  return USBD_OK;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}

0800a5d4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	370c      	adds	r7, #12
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	6078      	str	r0, [r7, #4]
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a5f6:	2302      	movs	r3, #2
 800a5f8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00c      	beq.n	800a61e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	78fa      	ldrb	r2, [r7, #3]
 800a60e:	4611      	mov	r1, r2
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	4798      	blx	r3
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a61a:	2300      	movs	r3, #0
 800a61c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a61e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	78fa      	ldrb	r2, [r7, #3]
 800a63e:	4611      	mov	r1, r2
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	4798      	blx	r3
  return USBD_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}

0800a64e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b082      	sub	sp, #8
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a65e:	6839      	ldr	r1, [r7, #0]
 800a660:	4618      	mov	r0, r3
 800a662:	f000 fe95 	bl	800b390 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800a674:	461a      	mov	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a682:	f003 031f 	and.w	r3, r3, #31
 800a686:	2b01      	cmp	r3, #1
 800a688:	d00c      	beq.n	800a6a4 <USBD_LL_SetupStage+0x56>
 800a68a:	2b01      	cmp	r3, #1
 800a68c:	d302      	bcc.n	800a694 <USBD_LL_SetupStage+0x46>
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d010      	beq.n	800a6b4 <USBD_LL_SetupStage+0x66>
 800a692:	e017      	b.n	800a6c4 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a69a:	4619      	mov	r1, r3
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fa05 	bl	800aaac <USBD_StdDevReq>
    break;
 800a6a2:	e01a      	b.n	800a6da <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fa67 	bl	800ab80 <USBD_StdItfReq>
    break;
 800a6b2:	e012      	b.n	800a6da <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 faa5 	bl	800ac0c <USBD_StdEPReq>
    break;
 800a6c2:	e00a      	b.n	800a6da <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a6ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f001 fbda 	bl	800be8c <USBD_LL_StallEP>
    break;
 800a6d8:	bf00      	nop
  }

  return USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800a6f2:	7afb      	ldrb	r3, [r7, #11]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d14b      	bne.n	800a790 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a6fe:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a706:	2b03      	cmp	r3, #3
 800a708:	d134      	bne.n	800a774 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	68da      	ldr	r2, [r3, #12]
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	691b      	ldr	r3, [r3, #16]
 800a712:	429a      	cmp	r2, r3
 800a714:	d919      	bls.n	800a74a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	1ad2      	subs	r2, r2, r3
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a724:	697b      	ldr	r3, [r7, #20]
 800a726:	68da      	ldr	r2, [r3, #12]
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a72c:	429a      	cmp	r2, r3
 800a72e:	d203      	bcs.n	800a738 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800a734:	b29b      	uxth	r3, r3
 800a736:	e002      	b.n	800a73e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a73c:	b29b      	uxth	r3, r3
 800a73e:	461a      	mov	r2, r3
 800a740:	6879      	ldr	r1, [r7, #4]
 800a742:	68f8      	ldr	r0, [r7, #12]
 800a744:	f000 ff18 	bl	800b578 <USBD_CtlContinueRx>
 800a748:	e038      	b.n	800a7bc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a750:	691b      	ldr	r3, [r3, #16]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d105      	bne.n	800a76c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a766:	691b      	ldr	r3, [r3, #16]
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 ff15 	bl	800b59c <USBD_CtlSendStatus>
 800a772:	e023      	b.n	800a7bc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a77a:	2b05      	cmp	r3, #5
 800a77c:	d11e      	bne.n	800a7bc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2200      	movs	r2, #0
 800a782:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800a786:	2100      	movs	r1, #0
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f001 fb7f 	bl	800be8c <USBD_LL_StallEP>
 800a78e:	e015      	b.n	800a7bc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00d      	beq.n	800a7b8 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800a7a2:	2b03      	cmp	r3, #3
 800a7a4:	d108      	bne.n	800a7b8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a7ac:	699b      	ldr	r3, [r3, #24]
 800a7ae:	7afa      	ldrb	r2, [r7, #11]
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	4798      	blx	r3
 800a7b6:	e001      	b.n	800a7bc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	e000      	b.n	800a7be <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a7bc:	2300      	movs	r3, #0
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}

0800a7c6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800a7c6:	b580      	push	{r7, lr}
 800a7c8:	b086      	sub	sp, #24
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	60f8      	str	r0, [r7, #12]
 800a7ce:	460b      	mov	r3, r1
 800a7d0:	607a      	str	r2, [r7, #4]
 800a7d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800a7d4:	7afb      	ldrb	r3, [r7, #11]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d17f      	bne.n	800a8da <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	3314      	adds	r3, #20
 800a7de:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a7e6:	2b02      	cmp	r3, #2
 800a7e8:	d15c      	bne.n	800a8a4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	68da      	ldr	r2, [r3, #12]
 800a7ee:	697b      	ldr	r3, [r7, #20]
 800a7f0:	691b      	ldr	r3, [r3, #16]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d915      	bls.n	800a822 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	68da      	ldr	r2, [r3, #12]
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	1ad2      	subs	r2, r2, r3
 800a800:	697b      	ldr	r3, [r7, #20]
 800a802:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800a804:	697b      	ldr	r3, [r7, #20]
 800a806:	68db      	ldr	r3, [r3, #12]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 fe82 	bl	800b518 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a814:	2300      	movs	r3, #0
 800a816:	2200      	movs	r2, #0
 800a818:	2100      	movs	r1, #0
 800a81a:	68f8      	ldr	r0, [r7, #12]
 800a81c:	f001 fbe2 	bl	800bfe4 <USBD_LL_PrepareReceive>
 800a820:	e04e      	b.n	800a8c0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	697a      	ldr	r2, [r7, #20]
 800a828:	6912      	ldr	r2, [r2, #16]
 800a82a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a82e:	fb02 f201 	mul.w	r2, r2, r1
 800a832:	1a9b      	subs	r3, r3, r2
 800a834:	2b00      	cmp	r3, #0
 800a836:	d11c      	bne.n	800a872 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	689a      	ldr	r2, [r3, #8]
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a840:	429a      	cmp	r2, r3
 800a842:	d316      	bcc.n	800a872 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a844:	697b      	ldr	r3, [r7, #20]
 800a846:	689a      	ldr	r2, [r3, #8]
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a84e:	429a      	cmp	r2, r3
 800a850:	d20f      	bcs.n	800a872 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a852:	2200      	movs	r2, #0
 800a854:	2100      	movs	r1, #0
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f000 fe5e 	bl	800b518 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a864:	2300      	movs	r3, #0
 800a866:	2200      	movs	r2, #0
 800a868:	2100      	movs	r1, #0
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f001 fbba 	bl	800bfe4 <USBD_LL_PrepareReceive>
 800a870:	e026      	b.n	800a8c0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00a      	beq.n	800a894 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a884:	2b03      	cmp	r3, #3
 800a886:	d105      	bne.n	800a894 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a894:	2180      	movs	r1, #128	; 0x80
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f001 faf8 	bl	800be8c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 fe90 	bl	800b5c2 <USBD_CtlReceiveStatus>
 800a8a2:	e00d      	b.n	800a8c0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a8aa:	2b04      	cmp	r3, #4
 800a8ac:	d004      	beq.n	800a8b8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d103      	bne.n	800a8c0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a8b8:	2180      	movs	r1, #128	; 0x80
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f001 fae6 	bl	800be8c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d11d      	bne.n	800a906 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a8ca:	68f8      	ldr	r0, [r7, #12]
 800a8cc:	f7ff fe82 	bl	800a5d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a8d8:	e015      	b.n	800a906 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00d      	beq.n	800a902 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d108      	bne.n	800a902 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8f6:	695b      	ldr	r3, [r3, #20]
 800a8f8:	7afa      	ldrb	r2, [r7, #11]
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	68f8      	ldr	r0, [r7, #12]
 800a8fe:	4798      	blx	r3
 800a900:	e001      	b.n	800a906 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a902:	2302      	movs	r3, #2
 800a904:	e000      	b.n	800a908 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3718      	adds	r7, #24
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b082      	sub	sp, #8
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a918:	2340      	movs	r3, #64	; 0x40
 800a91a:	2200      	movs	r2, #0
 800a91c:	2100      	movs	r1, #0
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 fa6f 	bl	800be02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2240      	movs	r2, #64	; 0x40
 800a930:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a934:	2340      	movs	r3, #64	; 0x40
 800a936:	2200      	movs	r2, #0
 800a938:	2180      	movs	r1, #128	; 0x80
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f001 fa61 	bl	800be02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2240      	movs	r2, #64	; 0x40
 800a94a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	6852      	ldr	r2, [r2, #4]
 800a980:	b2d2      	uxtb	r2, r2
 800a982:	4611      	mov	r1, r2
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	4798      	blx	r3
  }

  return USBD_OK;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a992:	b480      	push	{r7}
 800a994:	b083      	sub	sp, #12
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	460b      	mov	r3, r1
 800a99c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	78fa      	ldrb	r2, [r7, #3]
 800a9a2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr

0800a9b2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a9b2:	b480      	push	{r7}
 800a9b4:	b083      	sub	sp, #12
 800a9b6:	af00      	add	r7, sp, #0
 800a9b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2204      	movs	r2, #4
 800a9ca:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b083      	sub	sp, #12
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b082      	sub	sp, #8
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aa0c:	2b03      	cmp	r3, #3
 800aa0e:	d10b      	bne.n	800aa28 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa16:	69db      	ldr	r3, [r3, #28]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa22:	69db      	ldr	r3, [r3, #28]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3708      	adds	r7, #8
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}

0800aa32 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800aa32:	b480      	push	{r7}
 800aa34:	b083      	sub	sp, #12
 800aa36:	af00      	add	r7, sp, #0
 800aa38:	6078      	str	r0, [r7, #4]
 800aa3a:	460b      	mov	r3, r1
 800aa3c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b083      	sub	sp, #12
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	6852      	ldr	r2, [r2, #4]
 800aa98:	b2d2      	uxtb	r2, r2
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	4798      	blx	r3

  return USBD_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aab6:	2300      	movs	r3, #0
 800aab8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aac2:	2b20      	cmp	r3, #32
 800aac4:	d004      	beq.n	800aad0 <USBD_StdDevReq+0x24>
 800aac6:	2b40      	cmp	r3, #64	; 0x40
 800aac8:	d002      	beq.n	800aad0 <USBD_StdDevReq+0x24>
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d008      	beq.n	800aae0 <USBD_StdDevReq+0x34>
 800aace:	e04c      	b.n	800ab6a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	4798      	blx	r3
    break;
 800aade:	e049      	b.n	800ab74 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	785b      	ldrb	r3, [r3, #1]
 800aae4:	2b09      	cmp	r3, #9
 800aae6:	d83a      	bhi.n	800ab5e <USBD_StdDevReq+0xb2>
 800aae8:	a201      	add	r2, pc, #4	; (adr r2, 800aaf0 <USBD_StdDevReq+0x44>)
 800aaea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaee:	bf00      	nop
 800aaf0:	0800ab41 	.word	0x0800ab41
 800aaf4:	0800ab55 	.word	0x0800ab55
 800aaf8:	0800ab5f 	.word	0x0800ab5f
 800aafc:	0800ab4b 	.word	0x0800ab4b
 800ab00:	0800ab5f 	.word	0x0800ab5f
 800ab04:	0800ab23 	.word	0x0800ab23
 800ab08:	0800ab19 	.word	0x0800ab19
 800ab0c:	0800ab5f 	.word	0x0800ab5f
 800ab10:	0800ab37 	.word	0x0800ab37
 800ab14:	0800ab2d 	.word	0x0800ab2d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 f9d2 	bl	800aec4 <USBD_GetDescriptor>
      break;
 800ab20:	e022      	b.n	800ab68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800ab22:	6839      	ldr	r1, [r7, #0]
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fac7 	bl	800b0b8 <USBD_SetAddress>
      break;
 800ab2a:	e01d      	b.n	800ab68 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fb04 	bl	800b13c <USBD_SetConfig>
      break;
 800ab34:	e018      	b.n	800ab68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fb8d 	bl	800b258 <USBD_GetConfig>
      break;
 800ab3e:	e013      	b.n	800ab68 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 fbbc 	bl	800b2c0 <USBD_GetStatus>
      break;
 800ab48:	e00e      	b.n	800ab68 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fbea 	bl	800b326 <USBD_SetFeature>
      break;
 800ab52:	e009      	b.n	800ab68 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800ab54:	6839      	ldr	r1, [r7, #0]
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fbf9 	bl	800b34e <USBD_ClrFeature>
      break;
 800ab5c:	e004      	b.n	800ab68 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800ab5e:	6839      	ldr	r1, [r7, #0]
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fc52 	bl	800b40a <USBD_CtlError>
      break;
 800ab66:	bf00      	nop
    }
    break;
 800ab68:	e004      	b.n	800ab74 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800ab6a:	6839      	ldr	r1, [r7, #0]
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 fc4c 	bl	800b40a <USBD_CtlError>
    break;
 800ab72:	bf00      	nop
  }

  return ret;
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop

0800ab80 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	d003      	beq.n	800aba2 <USBD_StdItfReq+0x22>
 800ab9a:	2b40      	cmp	r3, #64	; 0x40
 800ab9c:	d001      	beq.n	800aba2 <USBD_StdItfReq+0x22>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d12a      	bne.n	800abf8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aba8:	3b01      	subs	r3, #1
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d81d      	bhi.n	800abea <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	889b      	ldrh	r3, [r3, #4]
 800abb2:	b2db      	uxtb	r3, r3
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d813      	bhi.n	800abe0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	4798      	blx	r3
 800abc6:	4603      	mov	r3, r0
 800abc8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	88db      	ldrh	r3, [r3, #6]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d110      	bne.n	800abf4 <USBD_StdItfReq+0x74>
 800abd2:	7bfb      	ldrb	r3, [r7, #15]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10d      	bne.n	800abf4 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f000 fcdf 	bl	800b59c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800abde:	e009      	b.n	800abf4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fc11 	bl	800b40a <USBD_CtlError>
      break;
 800abe8:	e004      	b.n	800abf4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 fc0c 	bl	800b40a <USBD_CtlError>
      break;
 800abf2:	e000      	b.n	800abf6 <USBD_StdItfReq+0x76>
      break;
 800abf4:	bf00      	nop
    }
    break;
 800abf6:	e004      	b.n	800ac02 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800abf8:	6839      	ldr	r1, [r7, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 fc05 	bl	800b40a <USBD_CtlError>
    break;
 800ac00:	bf00      	nop
  }

  return USBD_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	889b      	ldrh	r3, [r3, #4]
 800ac1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac28:	2b20      	cmp	r3, #32
 800ac2a:	d004      	beq.n	800ac36 <USBD_StdEPReq+0x2a>
 800ac2c:	2b40      	cmp	r3, #64	; 0x40
 800ac2e:	d002      	beq.n	800ac36 <USBD_StdEPReq+0x2a>
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d008      	beq.n	800ac46 <USBD_StdEPReq+0x3a>
 800ac34:	e13b      	b.n	800aeae <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	4798      	blx	r3
    break;
 800ac44:	e138      	b.n	800aeb8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d10a      	bne.n	800ac68 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	6839      	ldr	r1, [r7, #0]
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	4798      	blx	r3
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]

      return ret;
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	e128      	b.n	800aeba <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	785b      	ldrb	r3, [r3, #1]
 800ac6c:	2b01      	cmp	r3, #1
 800ac6e:	d03e      	beq.n	800acee <USBD_StdEPReq+0xe2>
 800ac70:	2b03      	cmp	r3, #3
 800ac72:	d002      	beq.n	800ac7a <USBD_StdEPReq+0x6e>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d070      	beq.n	800ad5a <USBD_StdEPReq+0x14e>
 800ac78:	e113      	b.n	800aea2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ac80:	2b02      	cmp	r3, #2
 800ac82:	d002      	beq.n	800ac8a <USBD_StdEPReq+0x7e>
 800ac84:	2b03      	cmp	r3, #3
 800ac86:	d015      	beq.n	800acb4 <USBD_StdEPReq+0xa8>
 800ac88:	e02b      	b.n	800ace2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d00c      	beq.n	800acaa <USBD_StdEPReq+0x9e>
 800ac90:	7bbb      	ldrb	r3, [r7, #14]
 800ac92:	2b80      	cmp	r3, #128	; 0x80
 800ac94:	d009      	beq.n	800acaa <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	4619      	mov	r1, r3
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f001 f8f6 	bl	800be8c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800aca0:	2180      	movs	r1, #128	; 0x80
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f001 f8f2 	bl	800be8c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800aca8:	e020      	b.n	800acec <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800acaa:	6839      	ldr	r1, [r7, #0]
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fbac 	bl	800b40a <USBD_CtlError>
        break;
 800acb2:	e01b      	b.n	800acec <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	885b      	ldrh	r3, [r3, #2]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d10e      	bne.n	800acda <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800acbc:	7bbb      	ldrb	r3, [r7, #14]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00b      	beq.n	800acda <USBD_StdEPReq+0xce>
 800acc2:	7bbb      	ldrb	r3, [r7, #14]
 800acc4:	2b80      	cmp	r3, #128	; 0x80
 800acc6:	d008      	beq.n	800acda <USBD_StdEPReq+0xce>
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	88db      	ldrh	r3, [r3, #6]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d104      	bne.n	800acda <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	4619      	mov	r1, r3
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f001 f8d9 	bl	800be8c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fc5e 	bl	800b59c <USBD_CtlSendStatus>

        break;
 800ace0:	e004      	b.n	800acec <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800ace2:	6839      	ldr	r1, [r7, #0]
 800ace4:	6878      	ldr	r0, [r7, #4]
 800ace6:	f000 fb90 	bl	800b40a <USBD_CtlError>
        break;
 800acea:	bf00      	nop
      }
      break;
 800acec:	e0de      	b.n	800aeac <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	d002      	beq.n	800acfe <USBD_StdEPReq+0xf2>
 800acf8:	2b03      	cmp	r3, #3
 800acfa:	d015      	beq.n	800ad28 <USBD_StdEPReq+0x11c>
 800acfc:	e026      	b.n	800ad4c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800acfe:	7bbb      	ldrb	r3, [r7, #14]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00c      	beq.n	800ad1e <USBD_StdEPReq+0x112>
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	2b80      	cmp	r3, #128	; 0x80
 800ad08:	d009      	beq.n	800ad1e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800ad0a:	7bbb      	ldrb	r3, [r7, #14]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f001 f8bc 	bl	800be8c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800ad14:	2180      	movs	r1, #128	; 0x80
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f001 f8b8 	bl	800be8c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ad1c:	e01c      	b.n	800ad58 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800ad1e:	6839      	ldr	r1, [r7, #0]
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fb72 	bl	800b40a <USBD_CtlError>
        break;
 800ad26:	e017      	b.n	800ad58 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	885b      	ldrh	r3, [r3, #2]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d112      	bne.n	800ad56 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ad30:	7bbb      	ldrb	r3, [r7, #14]
 800ad32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d004      	beq.n	800ad44 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800ad3a:	7bbb      	ldrb	r3, [r7, #14]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f001 f8c3 	bl	800beca <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fc29 	bl	800b59c <USBD_CtlSendStatus>
        }
        break;
 800ad4a:	e004      	b.n	800ad56 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800ad4c:	6839      	ldr	r1, [r7, #0]
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fb5b 	bl	800b40a <USBD_CtlError>
        break;
 800ad54:	e000      	b.n	800ad58 <USBD_StdEPReq+0x14c>
        break;
 800ad56:	bf00      	nop
      }
      break;
 800ad58:	e0a8      	b.n	800aeac <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	d002      	beq.n	800ad6a <USBD_StdEPReq+0x15e>
 800ad64:	2b03      	cmp	r3, #3
 800ad66:	d031      	beq.n	800adcc <USBD_StdEPReq+0x1c0>
 800ad68:	e095      	b.n	800ae96 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d007      	beq.n	800ad80 <USBD_StdEPReq+0x174>
 800ad70:	7bbb      	ldrb	r3, [r7, #14]
 800ad72:	2b80      	cmp	r3, #128	; 0x80
 800ad74:	d004      	beq.n	800ad80 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fb46 	bl	800b40a <USBD_CtlError>
          break;
 800ad7e:	e08f      	b.n	800aea0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ad80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	da0b      	bge.n	800ada0 <USBD_StdEPReq+0x194>
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad8e:	4613      	mov	r3, r2
 800ad90:	009b      	lsls	r3, r3, #2
 800ad92:	4413      	add	r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	3310      	adds	r3, #16
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	e00a      	b.n	800adb6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
 800ada2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ada6:	4613      	mov	r3, r2
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	009b      	lsls	r3, r3, #2
 800adae:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	4413      	add	r3, r2
 800adb6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	2200      	movs	r2, #0
 800adbc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	2202      	movs	r2, #2
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fb8b 	bl	800b4e0 <USBD_CtlSendData>
          break;
 800adca:	e069      	b.n	800aea0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800adcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800add0:	2b00      	cmp	r3, #0
 800add2:	da11      	bge.n	800adf8 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800add4:	7bbb      	ldrb	r3, [r7, #14]
 800add6:	f003 020f 	and.w	r2, r3, #15
 800adda:	6879      	ldr	r1, [r7, #4]
 800addc:	4613      	mov	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	4413      	add	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	440b      	add	r3, r1
 800ade6:	3318      	adds	r3, #24
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d117      	bne.n	800ae1e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800adee:	6839      	ldr	r1, [r7, #0]
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fb0a 	bl	800b40a <USBD_CtlError>
            break;
 800adf6:	e053      	b.n	800aea0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800adf8:	7bbb      	ldrb	r3, [r7, #14]
 800adfa:	f003 020f 	and.w	r2, r3, #15
 800adfe:	6879      	ldr	r1, [r7, #4]
 800ae00:	4613      	mov	r3, r2
 800ae02:	009b      	lsls	r3, r3, #2
 800ae04:	4413      	add	r3, r2
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	440b      	add	r3, r1
 800ae0a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d104      	bne.n	800ae1e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ae14:	6839      	ldr	r1, [r7, #0]
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 faf7 	bl	800b40a <USBD_CtlError>
            break;
 800ae1c:	e040      	b.n	800aea0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ae1e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	da0b      	bge.n	800ae3e <USBD_StdEPReq+0x232>
 800ae26:	7bbb      	ldrb	r3, [r7, #14]
 800ae28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae2c:	4613      	mov	r3, r2
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	4413      	add	r3, r2
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	3310      	adds	r3, #16
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	4413      	add	r3, r2
 800ae3a:	3304      	adds	r3, #4
 800ae3c:	e00a      	b.n	800ae54 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	4413      	add	r3, r2
 800ae54:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d002      	beq.n	800ae62 <USBD_StdEPReq+0x256>
 800ae5c:	7bbb      	ldrb	r3, [r7, #14]
 800ae5e:	2b80      	cmp	r3, #128	; 0x80
 800ae60:	d103      	bne.n	800ae6a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]
 800ae68:	e00e      	b.n	800ae88 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ae6a:	7bbb      	ldrb	r3, [r7, #14]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f001 f84a 	bl	800bf08 <USBD_LL_IsStallEP>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d003      	beq.n	800ae82 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	2201      	movs	r2, #1
 800ae7e:	601a      	str	r2, [r3, #0]
 800ae80:	e002      	b.n	800ae88 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800ae82:	68bb      	ldr	r3, [r7, #8]
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	2202      	movs	r2, #2
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 fb26 	bl	800b4e0 <USBD_CtlSendData>
          break;
 800ae94:	e004      	b.n	800aea0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800ae96:	6839      	ldr	r1, [r7, #0]
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fab6 	bl	800b40a <USBD_CtlError>
        break;
 800ae9e:	bf00      	nop
      }
      break;
 800aea0:	e004      	b.n	800aeac <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 fab0 	bl	800b40a <USBD_CtlError>
      break;
 800aeaa:	bf00      	nop
    }
    break;
 800aeac:	e004      	b.n	800aeb8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800aeae:	6839      	ldr	r1, [r7, #0]
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 faaa 	bl	800b40a <USBD_CtlError>
    break;
 800aeb6:	bf00      	nop
  }

  return ret;
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3710      	adds	r7, #16
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
	...

0800aec4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b084      	sub	sp, #16
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	885b      	ldrh	r3, [r3, #2]
 800aed2:	0a1b      	lsrs	r3, r3, #8
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	3b01      	subs	r3, #1
 800aed8:	2b06      	cmp	r3, #6
 800aeda:	f200 80c9 	bhi.w	800b070 <USBD_GetDescriptor+0x1ac>
 800aede:	a201      	add	r2, pc, #4	; (adr r2, 800aee4 <USBD_GetDescriptor+0x20>)
 800aee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee4:	0800af01 	.word	0x0800af01
 800aee8:	0800af19 	.word	0x0800af19
 800aeec:	0800af59 	.word	0x0800af59
 800aef0:	0800b071 	.word	0x0800b071
 800aef4:	0800b071 	.word	0x0800b071
 800aef8:	0800b01d 	.word	0x0800b01d
 800aefc:	0800b043 	.word	0x0800b043
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	7c12      	ldrb	r2, [r2, #16]
 800af0c:	f107 010a 	add.w	r1, r7, #10
 800af10:	4610      	mov	r0, r2
 800af12:	4798      	blx	r3
 800af14:	60f8      	str	r0, [r7, #12]
    break;
 800af16:	e0b0      	b.n	800b07a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	7c1b      	ldrb	r3, [r3, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d10d      	bne.n	800af3c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800af26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af28:	f107 020a 	add.w	r2, r7, #10
 800af2c:	4610      	mov	r0, r2
 800af2e:	4798      	blx	r3
 800af30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	3301      	adds	r3, #1
 800af36:	2202      	movs	r2, #2
 800af38:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800af3a:	e09e      	b.n	800b07a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800af42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af44:	f107 020a 	add.w	r2, r7, #10
 800af48:	4610      	mov	r0, r2
 800af4a:	4798      	blx	r3
 800af4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	3301      	adds	r3, #1
 800af52:	2202      	movs	r2, #2
 800af54:	701a      	strb	r2, [r3, #0]
    break;
 800af56:	e090      	b.n	800b07a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	885b      	ldrh	r3, [r3, #2]
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	2b05      	cmp	r3, #5
 800af60:	d856      	bhi.n	800b010 <USBD_GetDescriptor+0x14c>
 800af62:	a201      	add	r2, pc, #4	; (adr r2, 800af68 <USBD_GetDescriptor+0xa4>)
 800af64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af68:	0800af81 	.word	0x0800af81
 800af6c:	0800af99 	.word	0x0800af99
 800af70:	0800afb1 	.word	0x0800afb1
 800af74:	0800afc9 	.word	0x0800afc9
 800af78:	0800afe1 	.word	0x0800afe1
 800af7c:	0800aff9 	.word	0x0800aff9
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	7c12      	ldrb	r2, [r2, #16]
 800af8c:	f107 010a 	add.w	r1, r7, #10
 800af90:	4610      	mov	r0, r2
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
      break;
 800af96:	e040      	b.n	800b01a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	687a      	ldr	r2, [r7, #4]
 800afa2:	7c12      	ldrb	r2, [r2, #16]
 800afa4:	f107 010a 	add.w	r1, r7, #10
 800afa8:	4610      	mov	r0, r2
 800afaa:	4798      	blx	r3
 800afac:	60f8      	str	r0, [r7, #12]
      break;
 800afae:	e034      	b.n	800b01a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	7c12      	ldrb	r2, [r2, #16]
 800afbc:	f107 010a 	add.w	r1, r7, #10
 800afc0:	4610      	mov	r0, r2
 800afc2:	4798      	blx	r3
 800afc4:	60f8      	str	r0, [r7, #12]
      break;
 800afc6:	e028      	b.n	800b01a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	7c12      	ldrb	r2, [r2, #16]
 800afd4:	f107 010a 	add.w	r1, r7, #10
 800afd8:	4610      	mov	r0, r2
 800afda:	4798      	blx	r3
 800afdc:	60f8      	str	r0, [r7, #12]
      break;
 800afde:	e01c      	b.n	800b01a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800afe6:	695b      	ldr	r3, [r3, #20]
 800afe8:	687a      	ldr	r2, [r7, #4]
 800afea:	7c12      	ldrb	r2, [r2, #16]
 800afec:	f107 010a 	add.w	r1, r7, #10
 800aff0:	4610      	mov	r0, r2
 800aff2:	4798      	blx	r3
 800aff4:	60f8      	str	r0, [r7, #12]
      break;
 800aff6:	e010      	b.n	800b01a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800affe:	699b      	ldr	r3, [r3, #24]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	7c12      	ldrb	r2, [r2, #16]
 800b004:	f107 010a 	add.w	r1, r7, #10
 800b008:	4610      	mov	r0, r2
 800b00a:	4798      	blx	r3
 800b00c:	60f8      	str	r0, [r7, #12]
      break;
 800b00e:	e004      	b.n	800b01a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f9f9 	bl	800b40a <USBD_CtlError>
      return;
 800b018:	e04b      	b.n	800b0b2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800b01a:	e02e      	b.n	800b07a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	7c1b      	ldrb	r3, [r3, #16]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d109      	bne.n	800b038 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b02c:	f107 020a 	add.w	r2, r7, #10
 800b030:	4610      	mov	r0, r2
 800b032:	4798      	blx	r3
 800b034:	60f8      	str	r0, [r7, #12]
      break;
 800b036:	e020      	b.n	800b07a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f9e5 	bl	800b40a <USBD_CtlError>
      return;
 800b040:	e037      	b.n	800b0b2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	7c1b      	ldrb	r3, [r3, #16]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10d      	bne.n	800b066 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b052:	f107 020a 	add.w	r2, r7, #10
 800b056:	4610      	mov	r0, r2
 800b058:	4798      	blx	r3
 800b05a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	3301      	adds	r3, #1
 800b060:	2207      	movs	r2, #7
 800b062:	701a      	strb	r2, [r3, #0]
      break;
 800b064:	e009      	b.n	800b07a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800b066:	6839      	ldr	r1, [r7, #0]
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f000 f9ce 	bl	800b40a <USBD_CtlError>
      return;
 800b06e:	e020      	b.n	800b0b2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f9c9 	bl	800b40a <USBD_CtlError>
    return;
 800b078:	e01b      	b.n	800b0b2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800b07a:	897b      	ldrh	r3, [r7, #10]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d011      	beq.n	800b0a4 <USBD_GetDescriptor+0x1e0>
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	88db      	ldrh	r3, [r3, #6]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d00d      	beq.n	800b0a4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800b088:	683b      	ldr	r3, [r7, #0]
 800b08a:	88da      	ldrh	r2, [r3, #6]
 800b08c:	897b      	ldrh	r3, [r7, #10]
 800b08e:	4293      	cmp	r3, r2
 800b090:	bf28      	it	cs
 800b092:	4613      	movcs	r3, r2
 800b094:	b29b      	uxth	r3, r3
 800b096:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800b098:	897b      	ldrh	r3, [r7, #10]
 800b09a:	461a      	mov	r2, r3
 800b09c:	68f9      	ldr	r1, [r7, #12]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 fa1e 	bl	800b4e0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	88db      	ldrh	r3, [r3, #6]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d102      	bne.n	800b0b2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 fa75 	bl	800b59c <USBD_CtlSendStatus>
  }
}
 800b0b2:	3710      	adds	r7, #16
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	889b      	ldrh	r3, [r3, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d130      	bne.n	800b12c <USBD_SetAddress+0x74>
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	88db      	ldrh	r3, [r3, #6]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d12c      	bne.n	800b12c <USBD_SetAddress+0x74>
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	885b      	ldrh	r3, [r3, #2]
 800b0d6:	2b7f      	cmp	r3, #127	; 0x7f
 800b0d8:	d828      	bhi.n	800b12c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	885b      	ldrh	r3, [r3, #2]
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b0ec:	2b03      	cmp	r3, #3
 800b0ee:	d104      	bne.n	800b0fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800b0f0:	6839      	ldr	r1, [r7, #0]
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f989 	bl	800b40a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0f8:	e01c      	b.n	800b134 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	7bfa      	ldrb	r2, [r7, #15]
 800b0fe:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 ff2a 	bl	800bf60 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 fa45 	bl	800b59c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b112:	7bfb      	ldrb	r3, [r7, #15]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d004      	beq.n	800b122 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2202      	movs	r2, #2
 800b11c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b120:	e008      	b.n	800b134 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b12a:	e003      	b.n	800b134 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b12c:	6839      	ldr	r1, [r7, #0]
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 f96b 	bl	800b40a <USBD_CtlError>
  }
}
 800b134:	bf00      	nop
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	885b      	ldrh	r3, [r3, #2]
 800b14a:	b2da      	uxtb	r2, r3
 800b14c:	4b41      	ldr	r3, [pc, #260]	; (800b254 <USBD_SetConfig+0x118>)
 800b14e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b150:	4b40      	ldr	r3, [pc, #256]	; (800b254 <USBD_SetConfig+0x118>)
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	2b01      	cmp	r3, #1
 800b156:	d904      	bls.n	800b162 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b158:	6839      	ldr	r1, [r7, #0]
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f955 	bl	800b40a <USBD_CtlError>
 800b160:	e075      	b.n	800b24e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b168:	2b02      	cmp	r3, #2
 800b16a:	d002      	beq.n	800b172 <USBD_SetConfig+0x36>
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d023      	beq.n	800b1b8 <USBD_SetConfig+0x7c>
 800b170:	e062      	b.n	800b238 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800b172:	4b38      	ldr	r3, [pc, #224]	; (800b254 <USBD_SetConfig+0x118>)
 800b174:	781b      	ldrb	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d01a      	beq.n	800b1b0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800b17a:	4b36      	ldr	r3, [pc, #216]	; (800b254 <USBD_SetConfig+0x118>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2203      	movs	r2, #3
 800b188:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b18c:	4b31      	ldr	r3, [pc, #196]	; (800b254 <USBD_SetConfig+0x118>)
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	4619      	mov	r1, r3
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f7ff fa29 	bl	800a5ea <USBD_SetClassConfig>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b02      	cmp	r3, #2
 800b19c:	d104      	bne.n	800b1a8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f932 	bl	800b40a <USBD_CtlError>
          return;
 800b1a6:	e052      	b.n	800b24e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f9f7 	bl	800b59c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b1ae:	e04e      	b.n	800b24e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 f9f3 	bl	800b59c <USBD_CtlSendStatus>
      break;
 800b1b6:	e04a      	b.n	800b24e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b1b8:	4b26      	ldr	r3, [pc, #152]	; (800b254 <USBD_SetConfig+0x118>)
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d112      	bne.n	800b1e6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2202      	movs	r2, #2
 800b1c4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800b1c8:	4b22      	ldr	r3, [pc, #136]	; (800b254 <USBD_SetConfig+0x118>)
 800b1ca:	781b      	ldrb	r3, [r3, #0]
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800b1d2:	4b20      	ldr	r3, [pc, #128]	; (800b254 <USBD_SetConfig+0x118>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	4619      	mov	r1, r3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f7ff fa25 	bl	800a628 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f9dc 	bl	800b59c <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800b1e4:	e033      	b.n	800b24e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800b1e6:	4b1b      	ldr	r3, [pc, #108]	; (800b254 <USBD_SetConfig+0x118>)
 800b1e8:	781b      	ldrb	r3, [r3, #0]
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	429a      	cmp	r2, r3
 800b1f2:	d01d      	beq.n	800b230 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	685b      	ldr	r3, [r3, #4]
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f7ff fa13 	bl	800a628 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b202:	4b14      	ldr	r3, [pc, #80]	; (800b254 <USBD_SetConfig+0x118>)
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b20c:	4b11      	ldr	r3, [pc, #68]	; (800b254 <USBD_SetConfig+0x118>)
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	4619      	mov	r1, r3
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7ff f9e9 	bl	800a5ea <USBD_SetClassConfig>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b02      	cmp	r3, #2
 800b21c:	d104      	bne.n	800b228 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800b21e:	6839      	ldr	r1, [r7, #0]
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 f8f2 	bl	800b40a <USBD_CtlError>
          return;
 800b226:	e012      	b.n	800b24e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 f9b7 	bl	800b59c <USBD_CtlSendStatus>
      break;
 800b22e:	e00e      	b.n	800b24e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f9b3 	bl	800b59c <USBD_CtlSendStatus>
      break;
 800b236:	e00a      	b.n	800b24e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f8e5 	bl	800b40a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800b240:	4b04      	ldr	r3, [pc, #16]	; (800b254 <USBD_SetConfig+0x118>)
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f7ff f9ee 	bl	800a628 <USBD_ClrClassConfig>
      break;
 800b24c:	bf00      	nop
    }
  }
}
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	20000578 	.word	0x20000578

0800b258 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	b082      	sub	sp, #8
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	88db      	ldrh	r3, [r3, #6]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d004      	beq.n	800b274 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 f8cc 	bl	800b40a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800b272:	e021      	b.n	800b2b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b27a:	2b01      	cmp	r3, #1
 800b27c:	db17      	blt.n	800b2ae <USBD_GetConfig+0x56>
 800b27e:	2b02      	cmp	r3, #2
 800b280:	dd02      	ble.n	800b288 <USBD_GetConfig+0x30>
 800b282:	2b03      	cmp	r3, #3
 800b284:	d00b      	beq.n	800b29e <USBD_GetConfig+0x46>
 800b286:	e012      	b.n	800b2ae <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2200      	movs	r2, #0
 800b28c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3308      	adds	r3, #8
 800b292:	2201      	movs	r2, #1
 800b294:	4619      	mov	r1, r3
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f000 f922 	bl	800b4e0 <USBD_CtlSendData>
      break;
 800b29c:	e00c      	b.n	800b2b8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	3304      	adds	r3, #4
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f91a 	bl	800b4e0 <USBD_CtlSendData>
      break;
 800b2ac:	e004      	b.n	800b2b8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f8aa 	bl	800b40a <USBD_CtlError>
      break;
 800b2b6:	bf00      	nop
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b082      	sub	sp, #8
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d81e      	bhi.n	800b314 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	88db      	ldrh	r3, [r3, #6]
 800b2da:	2b02      	cmp	r3, #2
 800b2dc:	d004      	beq.n	800b2e8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800b2de:	6839      	ldr	r1, [r7, #0]
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f892 	bl	800b40a <USBD_CtlError>
      break;
 800b2e6:	e01a      	b.n	800b31e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d005      	beq.n	800b304 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	f043 0202 	orr.w	r2, r3, #2
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	330c      	adds	r3, #12
 800b308:	2202      	movs	r2, #2
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 f8e7 	bl	800b4e0 <USBD_CtlSendData>
    break;
 800b312:	e004      	b.n	800b31e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f877 	bl	800b40a <USBD_CtlError>
    break;
 800b31c:	bf00      	nop
  }
}
 800b31e:	bf00      	nop
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}

0800b326 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b326:	b580      	push	{r7, lr}
 800b328:	b082      	sub	sp, #8
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	885b      	ldrh	r3, [r3, #2]
 800b334:	2b01      	cmp	r3, #1
 800b336:	d106      	bne.n	800b346 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f000 f92b 	bl	800b59c <USBD_CtlSendStatus>
  }

}
 800b346:	bf00      	nop
 800b348:	3708      	adds	r7, #8
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	b082      	sub	sp, #8
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b35e:	3b01      	subs	r3, #1
 800b360:	2b02      	cmp	r3, #2
 800b362:	d80b      	bhi.n	800b37c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	885b      	ldrh	r3, [r3, #2]
 800b368:	2b01      	cmp	r3, #1
 800b36a:	d10c      	bne.n	800b386 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2200      	movs	r2, #0
 800b370:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f911 	bl	800b59c <USBD_CtlSendStatus>
    }
    break;
 800b37a:	e004      	b.n	800b386 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800b37c:	6839      	ldr	r1, [r7, #0]
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f000 f843 	bl	800b40a <USBD_CtlError>
    break;
 800b384:	e000      	b.n	800b388 <USBD_ClrFeature+0x3a>
    break;
 800b386:	bf00      	nop
  }
}
 800b388:	bf00      	nop
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b390:	b480      	push	{r7}
 800b392:	b083      	sub	sp, #12
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
 800b398:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	781a      	ldrb	r2, [r3, #0]
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	785a      	ldrb	r2, [r3, #1]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	3302      	adds	r3, #2
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	3303      	adds	r3, #3
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	021b      	lsls	r3, r3, #8
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	4413      	add	r3, r2
 800b3c0:	b29a      	uxth	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	3304      	adds	r3, #4
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	3305      	adds	r3, #5
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	021b      	lsls	r3, r3, #8
 800b3d8:	b29b      	uxth	r3, r3
 800b3da:	4413      	add	r3, r2
 800b3dc:	b29a      	uxth	r2, r3
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	3306      	adds	r3, #6
 800b3e6:	781b      	ldrb	r3, [r3, #0]
 800b3e8:	b29a      	uxth	r2, r3
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	3307      	adds	r3, #7
 800b3ee:	781b      	ldrb	r3, [r3, #0]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	021b      	lsls	r3, r3, #8
 800b3f4:	b29b      	uxth	r3, r3
 800b3f6:	4413      	add	r3, r2
 800b3f8:	b29a      	uxth	r2, r3
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	80da      	strh	r2, [r3, #6]

}
 800b3fe:	bf00      	nop
 800b400:	370c      	adds	r7, #12
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr

0800b40a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b082      	sub	sp, #8
 800b40e:	af00      	add	r7, sp, #0
 800b410:	6078      	str	r0, [r7, #4]
 800b412:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800b414:	2180      	movs	r1, #128	; 0x80
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f000 fd38 	bl	800be8c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b41c:	2100      	movs	r1, #0
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fd34 	bl	800be8c <USBD_LL_StallEP>
}
 800b424:	bf00      	nop
 800b426:	3708      	adds	r7, #8
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b438:	2300      	movs	r3, #0
 800b43a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d032      	beq.n	800b4a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 f834 	bl	800b4b0 <USBD_GetLen>
 800b448:	4603      	mov	r3, r0
 800b44a:	3301      	adds	r3, #1
 800b44c:	b29b      	uxth	r3, r3
 800b44e:	005b      	lsls	r3, r3, #1
 800b450:	b29a      	uxth	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b456:	7dfb      	ldrb	r3, [r7, #23]
 800b458:	1c5a      	adds	r2, r3, #1
 800b45a:	75fa      	strb	r2, [r7, #23]
 800b45c:	461a      	mov	r2, r3
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	4413      	add	r3, r2
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	7812      	ldrb	r2, [r2, #0]
 800b466:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b468:	7dfb      	ldrb	r3, [r7, #23]
 800b46a:	1c5a      	adds	r2, r3, #1
 800b46c:	75fa      	strb	r2, [r7, #23]
 800b46e:	461a      	mov	r2, r3
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	4413      	add	r3, r2
 800b474:	2203      	movs	r2, #3
 800b476:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b478:	e012      	b.n	800b4a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	1c5a      	adds	r2, r3, #1
 800b47e:	60fa      	str	r2, [r7, #12]
 800b480:	7dfa      	ldrb	r2, [r7, #23]
 800b482:	1c51      	adds	r1, r2, #1
 800b484:	75f9      	strb	r1, [r7, #23]
 800b486:	4611      	mov	r1, r2
 800b488:	68ba      	ldr	r2, [r7, #8]
 800b48a:	440a      	add	r2, r1
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b490:	7dfb      	ldrb	r3, [r7, #23]
 800b492:	1c5a      	adds	r2, r3, #1
 800b494:	75fa      	strb	r2, [r7, #23]
 800b496:	461a      	mov	r2, r3
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	4413      	add	r3, r2
 800b49c:	2200      	movs	r2, #0
 800b49e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1e8      	bne.n	800b47a <USBD_GetString+0x4e>
    }
  }
}
 800b4a8:	bf00      	nop
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800b4bc:	e005      	b.n	800b4ca <USBD_GetLen+0x1a>
    {
        len++;
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	73fb      	strb	r3, [r7, #15]
        buf++;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d1f5      	bne.n	800b4be <USBD_GetLen+0xe>
    }

    return len;
 800b4d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b084      	sub	sp, #16
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	4613      	mov	r3, r2
 800b4ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2202      	movs	r2, #2
 800b4f2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b4f6:	88fa      	ldrh	r2, [r7, #6]
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b4fc:	88fa      	ldrh	r2, [r7, #6]
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b502:	88fb      	ldrh	r3, [r7, #6]
 800b504:	68ba      	ldr	r2, [r7, #8]
 800b506:	2100      	movs	r1, #0
 800b508:	68f8      	ldr	r0, [r7, #12]
 800b50a:	f000 fd48 	bl	800bf9e <USBD_LL_Transmit>

  return USBD_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	3710      	adds	r7, #16
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	4613      	mov	r3, r2
 800b524:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b526:	88fb      	ldrh	r3, [r7, #6]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	2100      	movs	r1, #0
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	f000 fd36 	bl	800bf9e <USBD_LL_Transmit>

  return USBD_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b084      	sub	sp, #16
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2203      	movs	r2, #3
 800b54e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b552:	88fa      	ldrh	r2, [r7, #6]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b55a:	88fa      	ldrh	r2, [r7, #6]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b562:	88fb      	ldrh	r3, [r7, #6]
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	2100      	movs	r1, #0
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 fd3b 	bl	800bfe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	4613      	mov	r3, r2
 800b584:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b586:	88fb      	ldrh	r3, [r7, #6]
 800b588:	68ba      	ldr	r2, [r7, #8]
 800b58a:	2100      	movs	r1, #0
 800b58c:	68f8      	ldr	r0, [r7, #12]
 800b58e:	f000 fd29 	bl	800bfe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	3710      	adds	r7, #16
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}

0800b59c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2204      	movs	r2, #4
 800b5a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2100      	movs	r1, #0
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fcf3 	bl	800bf9e <USBD_LL_Transmit>

  return USBD_OK;
 800b5b8:	2300      	movs	r3, #0
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3708      	adds	r7, #8
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2205      	movs	r2, #5
 800b5ce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 fd03 	bl	800bfe4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3708      	adds	r7, #8
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b087      	sub	sp, #28
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	4613      	mov	r3, r2
 800b5f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b5fe:	4b1f      	ldr	r3, [pc, #124]	; (800b67c <FATFS_LinkDriverEx+0x94>)
 800b600:	7a5b      	ldrb	r3, [r3, #9]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	2b00      	cmp	r3, #0
 800b606:	d131      	bne.n	800b66c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b608:	4b1c      	ldr	r3, [pc, #112]	; (800b67c <FATFS_LinkDriverEx+0x94>)
 800b60a:	7a5b      	ldrb	r3, [r3, #9]
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	461a      	mov	r2, r3
 800b610:	4b1a      	ldr	r3, [pc, #104]	; (800b67c <FATFS_LinkDriverEx+0x94>)
 800b612:	2100      	movs	r1, #0
 800b614:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b616:	4b19      	ldr	r3, [pc, #100]	; (800b67c <FATFS_LinkDriverEx+0x94>)
 800b618:	7a5b      	ldrb	r3, [r3, #9]
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	4a17      	ldr	r2, [pc, #92]	; (800b67c <FATFS_LinkDriverEx+0x94>)
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	68fa      	ldr	r2, [r7, #12]
 800b624:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b626:	4b15      	ldr	r3, [pc, #84]	; (800b67c <FATFS_LinkDriverEx+0x94>)
 800b628:	7a5b      	ldrb	r3, [r3, #9]
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	461a      	mov	r2, r3
 800b62e:	4b13      	ldr	r3, [pc, #76]	; (800b67c <FATFS_LinkDriverEx+0x94>)
 800b630:	4413      	add	r3, r2
 800b632:	79fa      	ldrb	r2, [r7, #7]
 800b634:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b636:	4b11      	ldr	r3, [pc, #68]	; (800b67c <FATFS_LinkDriverEx+0x94>)
 800b638:	7a5b      	ldrb	r3, [r3, #9]
 800b63a:	b2db      	uxtb	r3, r3
 800b63c:	1c5a      	adds	r2, r3, #1
 800b63e:	b2d1      	uxtb	r1, r2
 800b640:	4a0e      	ldr	r2, [pc, #56]	; (800b67c <FATFS_LinkDriverEx+0x94>)
 800b642:	7251      	strb	r1, [r2, #9]
 800b644:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b646:	7dbb      	ldrb	r3, [r7, #22]
 800b648:	3330      	adds	r3, #48	; 0x30
 800b64a:	b2da      	uxtb	r2, r3
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	3301      	adds	r3, #1
 800b654:	223a      	movs	r2, #58	; 0x3a
 800b656:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	3302      	adds	r3, #2
 800b65c:	222f      	movs	r2, #47	; 0x2f
 800b65e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	3303      	adds	r3, #3
 800b664:	2200      	movs	r2, #0
 800b666:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b66c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b66e:	4618      	mov	r0, r3
 800b670:	371c      	adds	r7, #28
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	2000057c 	.word	0x2000057c

0800b680 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b68a:	2200      	movs	r2, #0
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f7ff ffaa 	bl	800b5e8 <FATFS_LinkDriverEx>
 800b694:	4603      	mov	r3, r0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3708      	adds	r7, #8
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
	...

0800b6a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4912      	ldr	r1, [pc, #72]	; (800b6f0 <MX_USB_DEVICE_Init+0x50>)
 800b6a8:	4812      	ldr	r0, [pc, #72]	; (800b6f4 <MX_USB_DEVICE_Init+0x54>)
 800b6aa:	f7fe ff42 	bl	800a532 <USBD_Init>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d001      	beq.n	800b6b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b6b4:	f7f6 f960 	bl	8001978 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b6b8:	490f      	ldr	r1, [pc, #60]	; (800b6f8 <MX_USB_DEVICE_Init+0x58>)
 800b6ba:	480e      	ldr	r0, [pc, #56]	; (800b6f4 <MX_USB_DEVICE_Init+0x54>)
 800b6bc:	f7fe ff64 	bl	800a588 <USBD_RegisterClass>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d001      	beq.n	800b6ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b6c6:	f7f6 f957 	bl	8001978 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b6ca:	490c      	ldr	r1, [pc, #48]	; (800b6fc <MX_USB_DEVICE_Init+0x5c>)
 800b6cc:	4809      	ldr	r0, [pc, #36]	; (800b6f4 <MX_USB_DEVICE_Init+0x54>)
 800b6ce:	f7fe fec1 	bl	800a454 <USBD_CDC_RegisterInterface>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d001      	beq.n	800b6dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b6d8:	f7f6 f94e 	bl	8001978 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b6dc:	4805      	ldr	r0, [pc, #20]	; (800b6f4 <MX_USB_DEVICE_Init+0x54>)
 800b6de:	f7fe ff6d 	bl	800a5bc <USBD_Start>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d001      	beq.n	800b6ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b6e8:	f7f6 f946 	bl	8001978 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b6ec:	bf00      	nop
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	20000130 	.word	0x20000130
 800b6f4:	20000f90 	.word	0x20000f90
 800b6f8:	2000001c 	.word	0x2000001c
 800b6fc:	20000120 	.word	0x20000120

0800b700 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b704:	2200      	movs	r2, #0
 800b706:	4905      	ldr	r1, [pc, #20]	; (800b71c <CDC_Init_FS+0x1c>)
 800b708:	4805      	ldr	r0, [pc, #20]	; (800b720 <CDC_Init_FS+0x20>)
 800b70a:	f7fe feba 	bl	800a482 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b70e:	4905      	ldr	r1, [pc, #20]	; (800b724 <CDC_Init_FS+0x24>)
 800b710:	4803      	ldr	r0, [pc, #12]	; (800b720 <CDC_Init_FS+0x20>)
 800b712:	f7fe fed0 	bl	800a4b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b716:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b718:	4618      	mov	r0, r3
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20001a2c 	.word	0x20001a2c
 800b720:	20000f90 	.word	0x20000f90
 800b724:	2000122c 	.word	0x2000122c

0800b728 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b728:	b480      	push	{r7}
 800b72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b72c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b72e:	4618      	mov	r0, r3
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b738:	b480      	push	{r7}
 800b73a:	b085      	sub	sp, #20
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	4603      	mov	r3, r0
 800b740:	6039      	str	r1, [r7, #0]
 800b742:	71fb      	strb	r3, [r7, #7]
 800b744:	4613      	mov	r3, r2
 800b746:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800b748:	f107 0308 	add.w	r3, r7, #8
 800b74c:	2200      	movs	r2, #0
 800b74e:	601a      	str	r2, [r3, #0]
 800b750:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	2b23      	cmp	r3, #35	; 0x23
 800b758:	d87c      	bhi.n	800b854 <CDC_Control_FS+0x11c>
 800b75a:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <CDC_Control_FS+0x28>)
 800b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b760:	0800b855 	.word	0x0800b855
 800b764:	0800b855 	.word	0x0800b855
 800b768:	0800b855 	.word	0x0800b855
 800b76c:	0800b855 	.word	0x0800b855
 800b770:	0800b855 	.word	0x0800b855
 800b774:	0800b855 	.word	0x0800b855
 800b778:	0800b855 	.word	0x0800b855
 800b77c:	0800b855 	.word	0x0800b855
 800b780:	0800b855 	.word	0x0800b855
 800b784:	0800b855 	.word	0x0800b855
 800b788:	0800b855 	.word	0x0800b855
 800b78c:	0800b855 	.word	0x0800b855
 800b790:	0800b855 	.word	0x0800b855
 800b794:	0800b855 	.word	0x0800b855
 800b798:	0800b855 	.word	0x0800b855
 800b79c:	0800b855 	.word	0x0800b855
 800b7a0:	0800b855 	.word	0x0800b855
 800b7a4:	0800b855 	.word	0x0800b855
 800b7a8:	0800b855 	.word	0x0800b855
 800b7ac:	0800b855 	.word	0x0800b855
 800b7b0:	0800b855 	.word	0x0800b855
 800b7b4:	0800b855 	.word	0x0800b855
 800b7b8:	0800b855 	.word	0x0800b855
 800b7bc:	0800b855 	.word	0x0800b855
 800b7c0:	0800b855 	.word	0x0800b855
 800b7c4:	0800b855 	.word	0x0800b855
 800b7c8:	0800b855 	.word	0x0800b855
 800b7cc:	0800b855 	.word	0x0800b855
 800b7d0:	0800b855 	.word	0x0800b855
 800b7d4:	0800b855 	.word	0x0800b855
 800b7d8:	0800b855 	.word	0x0800b855
 800b7dc:	0800b855 	.word	0x0800b855
 800b7e0:	0800b7f1 	.word	0x0800b7f1
 800b7e4:	0800b81d 	.word	0x0800b81d
 800b7e8:	0800b855 	.word	0x0800b855
 800b7ec:	0800b855 	.word	0x0800b855
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	785b      	ldrb	r3, [r3, #1]
 800b7fa:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	789b      	ldrb	r3, [r3, #2]
 800b800:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	78db      	ldrb	r3, [r3, #3]
 800b806:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	791b      	ldrb	r3, [r3, #4]
 800b80c:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	795b      	ldrb	r3, [r3, #5]
 800b812:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	799b      	ldrb	r3, [r3, #6]
 800b818:	73bb      	strb	r3, [r7, #14]
      	break;
 800b81a:	e01c      	b.n	800b856 <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800b81c:	7a3a      	ldrb	r2, [r7, #8]
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	3301      	adds	r3, #1
 800b826:	7a7a      	ldrb	r2, [r7, #9]
 800b828:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	3302      	adds	r3, #2
 800b82e:	7aba      	ldrb	r2, [r7, #10]
 800b830:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	3303      	adds	r3, #3
 800b836:	7afa      	ldrb	r2, [r7, #11]
 800b838:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	3304      	adds	r3, #4
 800b83e:	7b3a      	ldrb	r2, [r7, #12]
 800b840:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	3305      	adds	r3, #5
 800b846:	7b7a      	ldrb	r2, [r7, #13]
 800b848:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	3306      	adds	r3, #6
 800b84e:	7bba      	ldrb	r2, [r7, #14]
 800b850:	701a      	strb	r2, [r3, #0]
      	break;
 800b852:	e000      	b.n	800b856 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b854:	bf00      	nop
  }

  return (USBD_OK);
 800b856:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b86e:	6879      	ldr	r1, [r7, #4]
 800b870:	4805      	ldr	r0, [pc, #20]	; (800b888 <CDC_Receive_FS+0x24>)
 800b872:	f7fe fe20 	bl	800a4b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b876:	4804      	ldr	r0, [pc, #16]	; (800b888 <CDC_Receive_FS+0x24>)
 800b878:	f7fe fe31 	bl	800a4de <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b87c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	20000f90 	.word	0x20000f90

0800b88c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b083      	sub	sp, #12
 800b890:	af00      	add	r7, sp, #0
 800b892:	4603      	mov	r3, r0
 800b894:	6039      	str	r1, [r7, #0]
 800b896:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2212      	movs	r2, #18
 800b89c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b89e:	4b03      	ldr	r3, [pc, #12]	; (800b8ac <USBD_FS_DeviceDescriptor+0x20>)
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	2000014c 	.word	0x2000014c

0800b8b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	6039      	str	r1, [r7, #0]
 800b8ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	2204      	movs	r2, #4
 800b8c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b8c2:	4b03      	ldr	r3, [pc, #12]	; (800b8d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	370c      	adds	r7, #12
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ce:	4770      	bx	lr
 800b8d0:	20000160 	.word	0x20000160

0800b8d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	4603      	mov	r3, r0
 800b8dc:	6039      	str	r1, [r7, #0]
 800b8de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d105      	bne.n	800b8f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8e6:	683a      	ldr	r2, [r7, #0]
 800b8e8:	4907      	ldr	r1, [pc, #28]	; (800b908 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8ea:	4808      	ldr	r0, [pc, #32]	; (800b90c <USBD_FS_ProductStrDescriptor+0x38>)
 800b8ec:	f7ff fd9e 	bl	800b42c <USBD_GetString>
 800b8f0:	e004      	b.n	800b8fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	4904      	ldr	r1, [pc, #16]	; (800b908 <USBD_FS_ProductStrDescriptor+0x34>)
 800b8f6:	4805      	ldr	r0, [pc, #20]	; (800b90c <USBD_FS_ProductStrDescriptor+0x38>)
 800b8f8:	f7ff fd98 	bl	800b42c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8fc:	4b02      	ldr	r3, [pc, #8]	; (800b908 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3708      	adds	r7, #8
 800b902:	46bd      	mov	sp, r7
 800b904:	bd80      	pop	{r7, pc}
 800b906:	bf00      	nop
 800b908:	2000222c 	.word	0x2000222c
 800b90c:	0800fbb8 	.word	0x0800fbb8

0800b910 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	4603      	mov	r3, r0
 800b918:	6039      	str	r1, [r7, #0]
 800b91a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	4904      	ldr	r1, [pc, #16]	; (800b930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b920:	4804      	ldr	r0, [pc, #16]	; (800b934 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b922:	f7ff fd83 	bl	800b42c <USBD_GetString>
  return USBD_StrDesc;
 800b926:	4b02      	ldr	r3, [pc, #8]	; (800b930 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3708      	adds	r7, #8
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	2000222c 	.word	0x2000222c
 800b934:	0800fbc4 	.word	0x0800fbc4

0800b938 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	4603      	mov	r3, r0
 800b940:	6039      	str	r1, [r7, #0]
 800b942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	221a      	movs	r2, #26
 800b948:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b94a:	f000 f843 	bl	800b9d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b94e:	4b02      	ldr	r3, [pc, #8]	; (800b958 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20000164 	.word	0x20000164

0800b95c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	4603      	mov	r3, r0
 800b964:	6039      	str	r1, [r7, #0]
 800b966:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b968:	79fb      	ldrb	r3, [r7, #7]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d105      	bne.n	800b97a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	4907      	ldr	r1, [pc, #28]	; (800b990 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b972:	4808      	ldr	r0, [pc, #32]	; (800b994 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b974:	f7ff fd5a 	bl	800b42c <USBD_GetString>
 800b978:	e004      	b.n	800b984 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b97a:	683a      	ldr	r2, [r7, #0]
 800b97c:	4904      	ldr	r1, [pc, #16]	; (800b990 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b97e:	4805      	ldr	r0, [pc, #20]	; (800b994 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b980:	f7ff fd54 	bl	800b42c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b984:	4b02      	ldr	r3, [pc, #8]	; (800b990 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b986:	4618      	mov	r0, r3
 800b988:	3708      	adds	r7, #8
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	2000222c 	.word	0x2000222c
 800b994:	0800fbd8 	.word	0x0800fbd8

0800b998 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b082      	sub	sp, #8
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	6039      	str	r1, [r7, #0]
 800b9a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b9a4:	79fb      	ldrb	r3, [r7, #7]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d105      	bne.n	800b9b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9aa:	683a      	ldr	r2, [r7, #0]
 800b9ac:	4907      	ldr	r1, [pc, #28]	; (800b9cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9ae:	4808      	ldr	r0, [pc, #32]	; (800b9d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9b0:	f7ff fd3c 	bl	800b42c <USBD_GetString>
 800b9b4:	e004      	b.n	800b9c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b9b6:	683a      	ldr	r2, [r7, #0]
 800b9b8:	4904      	ldr	r1, [pc, #16]	; (800b9cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b9ba:	4805      	ldr	r0, [pc, #20]	; (800b9d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b9bc:	f7ff fd36 	bl	800b42c <USBD_GetString>
  }
  return USBD_StrDesc;
 800b9c0:	4b02      	ldr	r3, [pc, #8]	; (800b9cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3708      	adds	r7, #8
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	2000222c 	.word	0x2000222c
 800b9d0:	0800fbe4 	.word	0x0800fbe4

0800b9d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b9da:	4b0f      	ldr	r3, [pc, #60]	; (800ba18 <Get_SerialNum+0x44>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b9e0:	4b0e      	ldr	r3, [pc, #56]	; (800ba1c <Get_SerialNum+0x48>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b9e6:	4b0e      	ldr	r3, [pc, #56]	; (800ba20 <Get_SerialNum+0x4c>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d009      	beq.n	800ba0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b9fa:	2208      	movs	r2, #8
 800b9fc:	4909      	ldr	r1, [pc, #36]	; (800ba24 <Get_SerialNum+0x50>)
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f000 f814 	bl	800ba2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ba04:	2204      	movs	r2, #4
 800ba06:	4908      	ldr	r1, [pc, #32]	; (800ba28 <Get_SerialNum+0x54>)
 800ba08:	68b8      	ldr	r0, [r7, #8]
 800ba0a:	f000 f80f 	bl	800ba2c <IntToUnicode>
  }
}
 800ba0e:	bf00      	nop
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
 800ba16:	bf00      	nop
 800ba18:	1fff7a10 	.word	0x1fff7a10
 800ba1c:	1fff7a14 	.word	0x1fff7a14
 800ba20:	1fff7a18 	.word	0x1fff7a18
 800ba24:	20000166 	.word	0x20000166
 800ba28:	20000176 	.word	0x20000176

0800ba2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b087      	sub	sp, #28
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	4613      	mov	r3, r2
 800ba38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ba3e:	2300      	movs	r3, #0
 800ba40:	75fb      	strb	r3, [r7, #23]
 800ba42:	e027      	b.n	800ba94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	0f1b      	lsrs	r3, r3, #28
 800ba48:	2b09      	cmp	r3, #9
 800ba4a:	d80b      	bhi.n	800ba64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	0f1b      	lsrs	r3, r3, #28
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
 800ba54:	005b      	lsls	r3, r3, #1
 800ba56:	4619      	mov	r1, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	440b      	add	r3, r1
 800ba5c:	3230      	adds	r2, #48	; 0x30
 800ba5e:	b2d2      	uxtb	r2, r2
 800ba60:	701a      	strb	r2, [r3, #0]
 800ba62:	e00a      	b.n	800ba7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	0f1b      	lsrs	r3, r3, #28
 800ba68:	b2da      	uxtb	r2, r3
 800ba6a:	7dfb      	ldrb	r3, [r7, #23]
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	4619      	mov	r1, r3
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	440b      	add	r3, r1
 800ba74:	3237      	adds	r2, #55	; 0x37
 800ba76:	b2d2      	uxtb	r2, r2
 800ba78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	011b      	lsls	r3, r3, #4
 800ba7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	005b      	lsls	r3, r3, #1
 800ba84:	3301      	adds	r3, #1
 800ba86:	68ba      	ldr	r2, [r7, #8]
 800ba88:	4413      	add	r3, r2
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba8e:	7dfb      	ldrb	r3, [r7, #23]
 800ba90:	3301      	adds	r3, #1
 800ba92:	75fb      	strb	r3, [r7, #23]
 800ba94:	7dfa      	ldrb	r2, [r7, #23]
 800ba96:	79fb      	ldrb	r3, [r7, #7]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d3d3      	bcc.n	800ba44 <IntToUnicode+0x18>
  }
}
 800ba9c:	bf00      	nop
 800ba9e:	371c      	adds	r7, #28
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b08a      	sub	sp, #40	; 0x28
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bab0:	f107 0314 	add.w	r3, r7, #20
 800bab4:	2200      	movs	r2, #0
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	605a      	str	r2, [r3, #4]
 800baba:	609a      	str	r2, [r3, #8]
 800babc:	60da      	str	r2, [r3, #12]
 800babe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bac8:	d13a      	bne.n	800bb40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800baca:	2300      	movs	r3, #0
 800bacc:	613b      	str	r3, [r7, #16]
 800bace:	4b1e      	ldr	r3, [pc, #120]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad2:	4a1d      	ldr	r2, [pc, #116]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bad4:	f043 0301 	orr.w	r3, r3, #1
 800bad8:	6313      	str	r3, [r2, #48]	; 0x30
 800bada:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800badc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	613b      	str	r3, [r7, #16]
 800bae4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bae6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800baea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800baec:	2302      	movs	r3, #2
 800baee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800baf0:	2300      	movs	r3, #0
 800baf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800baf4:	2303      	movs	r3, #3
 800baf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800baf8:	230a      	movs	r3, #10
 800bafa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bafc:	f107 0314 	add.w	r3, r7, #20
 800bb00:	4619      	mov	r1, r3
 800bb02:	4812      	ldr	r0, [pc, #72]	; (800bb4c <HAL_PCD_MspInit+0xa4>)
 800bb04:	f7f6 ff92 	bl	8002a2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bb08:	4b0f      	ldr	r3, [pc, #60]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb0c:	4a0e      	ldr	r2, [pc, #56]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb12:	6353      	str	r3, [r2, #52]	; 0x34
 800bb14:	2300      	movs	r3, #0
 800bb16:	60fb      	str	r3, [r7, #12]
 800bb18:	4b0b      	ldr	r3, [pc, #44]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb1c:	4a0a      	ldr	r2, [pc, #40]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bb22:	6453      	str	r3, [r2, #68]	; 0x44
 800bb24:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <HAL_PCD_MspInit+0xa0>)
 800bb26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb2c:	60fb      	str	r3, [r7, #12]
 800bb2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bb30:	2200      	movs	r2, #0
 800bb32:	2100      	movs	r1, #0
 800bb34:	2043      	movs	r0, #67	; 0x43
 800bb36:	f7f6 fba6 	bl	8002286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bb3a:	2043      	movs	r0, #67	; 0x43
 800bb3c:	f7f6 fbbf 	bl	80022be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bb40:	bf00      	nop
 800bb42:	3728      	adds	r7, #40	; 0x28
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	40023800 	.word	0x40023800
 800bb4c:	40020000 	.word	0x40020000

0800bb50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bb64:	4619      	mov	r1, r3
 800bb66:	4610      	mov	r0, r2
 800bb68:	f7fe fd71 	bl	800a64e <USBD_LL_SetupStage>
}
 800bb6c:	bf00      	nop
 800bb6e:	3708      	adds	r7, #8
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b082      	sub	sp, #8
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bb86:	78fa      	ldrb	r2, [r7, #3]
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	4613      	mov	r3, r2
 800bb8c:	00db      	lsls	r3, r3, #3
 800bb8e:	1a9b      	subs	r3, r3, r2
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	440b      	add	r3, r1
 800bb94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	78fb      	ldrb	r3, [r7, #3]
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	f7fe fda1 	bl	800a6e4 <USBD_LL_DataOutStage>
}
 800bba2:	bf00      	nop
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbaa:	b580      	push	{r7, lr}
 800bbac:	b082      	sub	sp, #8
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800bbbc:	78fa      	ldrb	r2, [r7, #3]
 800bbbe:	6879      	ldr	r1, [r7, #4]
 800bbc0:	4613      	mov	r3, r2
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	1a9b      	subs	r3, r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	440b      	add	r3, r1
 800bbca:	3348      	adds	r3, #72	; 0x48
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	78fb      	ldrb	r3, [r7, #3]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f7fe fdf8 	bl	800a7c6 <USBD_LL_DataInStage>
}
 800bbd6:	bf00      	nop
 800bbd8:	3708      	adds	r7, #8
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}

0800bbde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bbec:	4618      	mov	r0, r3
 800bbee:	f7fe ff06 	bl	800a9fe <USBD_LL_SOF>
}
 800bbf2:	bf00      	nop
 800bbf4:	3708      	adds	r7, #8
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bd80      	pop	{r7, pc}

0800bbfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800bbfa:	b580      	push	{r7, lr}
 800bbfc:	b084      	sub	sp, #16
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bc02:	2301      	movs	r3, #1
 800bc04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	68db      	ldr	r3, [r3, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d102      	bne.n	800bc14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	73fb      	strb	r3, [r7, #15]
 800bc12:	e008      	b.n	800bc26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d102      	bne.n	800bc22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	73fb      	strb	r3, [r7, #15]
 800bc20:	e001      	b.n	800bc26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bc22:	f7f5 fea9 	bl	8001978 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc2c:	7bfa      	ldrb	r2, [r7, #15]
 800bc2e:	4611      	mov	r1, r2
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fe feae 	bl	800a992 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f7fe fe67 	bl	800a910 <USBD_LL_Reset>
}
 800bc42:	bf00      	nop
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7fe fea9 	bl	800a9b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	6812      	ldr	r2, [r2, #0]
 800bc6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc72:	f043 0301 	orr.w	r3, r3, #1
 800bc76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6a1b      	ldr	r3, [r3, #32]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d005      	beq.n	800bc8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bc80:	4b04      	ldr	r3, [pc, #16]	; (800bc94 <HAL_PCD_SuspendCallback+0x48>)
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	4a03      	ldr	r2, [pc, #12]	; (800bc94 <HAL_PCD_SuspendCallback+0x48>)
 800bc86:	f043 0306 	orr.w	r3, r3, #6
 800bc8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc8c:	bf00      	nop
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	e000ed00 	.word	0xe000ed00

0800bc98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fe fe98 	bl	800a9dc <USBD_LL_Resume>
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcc6:	78fa      	ldrb	r2, [r7, #3]
 800bcc8:	4611      	mov	r1, r2
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe febe 	bl	800aa4c <USBD_LL_IsoOUTIncomplete>
}
 800bcd0:	bf00      	nop
 800bcd2:	3708      	adds	r7, #8
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	bd80      	pop	{r7, pc}

0800bcd8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	460b      	mov	r3, r1
 800bce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bcea:	78fa      	ldrb	r2, [r7, #3]
 800bcec:	4611      	mov	r1, r2
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fe fe9f 	bl	800aa32 <USBD_LL_IsoINIncomplete>
}
 800bcf4:	bf00      	nop
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe feab 	bl	800aa66 <USBD_LL_DevConnected>
}
 800bd10:	bf00      	nop
 800bd12:	3708      	adds	r7, #8
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd80      	pop	{r7, pc}

0800bd18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fe fea8 	bl	800aa7c <USBD_LL_DevDisconnected>
}
 800bd2c:	bf00      	nop
 800bd2e:	3708      	adds	r7, #8
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}

0800bd34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b082      	sub	sp, #8
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d13c      	bne.n	800bdbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bd44:	4a20      	ldr	r2, [pc, #128]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a1e      	ldr	r2, [pc, #120]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd50:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd54:	4b1c      	ldr	r3, [pc, #112]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bd5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bd5c:	4b1a      	ldr	r3, [pc, #104]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd5e:	2204      	movs	r2, #4
 800bd60:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bd62:	4b19      	ldr	r3, [pc, #100]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd64:	2202      	movs	r2, #2
 800bd66:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd68:	4b17      	ldr	r3, [pc, #92]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bd6e:	4b16      	ldr	r3, [pc, #88]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd70:	2202      	movs	r2, #2
 800bd72:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd74:	4b14      	ldr	r3, [pc, #80]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd76:	2200      	movs	r2, #0
 800bd78:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bd7a:	4b13      	ldr	r3, [pc, #76]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bd80:	4b11      	ldr	r3, [pc, #68]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd86:	4b10      	ldr	r3, [pc, #64]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd8c:	4b0e      	ldr	r3, [pc, #56]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd8e:	2200      	movs	r2, #0
 800bd90:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd92:	480d      	ldr	r0, [pc, #52]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bd94:	f7f7 f966 	bl	8003064 <HAL_PCD_Init>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd9e:	f7f5 fdeb 	bl	8001978 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bda2:	2180      	movs	r1, #128	; 0x80
 800bda4:	4808      	ldr	r0, [pc, #32]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bda6:	f7f8 faca 	bl	800433e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bdaa:	2240      	movs	r2, #64	; 0x40
 800bdac:	2100      	movs	r1, #0
 800bdae:	4806      	ldr	r0, [pc, #24]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bdb0:	f7f8 fa7e 	bl	80042b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bdb4:	2280      	movs	r2, #128	; 0x80
 800bdb6:	2101      	movs	r1, #1
 800bdb8:	4803      	ldr	r0, [pc, #12]	; (800bdc8 <USBD_LL_Init+0x94>)
 800bdba:	f7f8 fa79 	bl	80042b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3708      	adds	r7, #8
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}
 800bdc8:	2000242c 	.word	0x2000242c

0800bdcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7f7 fa5b 	bl	800329e <HAL_PCD_Start>
 800bde8:	4603      	mov	r3, r0
 800bdea:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800bdec:	7bfb      	ldrb	r3, [r7, #15]
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f000 f92e 	bl	800c050 <USBD_Get_USB_Status>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800bdf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3710      	adds	r7, #16
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b084      	sub	sp, #16
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	4608      	mov	r0, r1
 800be0c:	4611      	mov	r1, r2
 800be0e:	461a      	mov	r2, r3
 800be10:	4603      	mov	r3, r0
 800be12:	70fb      	strb	r3, [r7, #3]
 800be14:	460b      	mov	r3, r1
 800be16:	70bb      	strb	r3, [r7, #2]
 800be18:	4613      	mov	r3, r2
 800be1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be20:	2300      	movs	r3, #0
 800be22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800be2a:	78bb      	ldrb	r3, [r7, #2]
 800be2c:	883a      	ldrh	r2, [r7, #0]
 800be2e:	78f9      	ldrb	r1, [r7, #3]
 800be30:	f7f7 fe30 	bl	8003a94 <HAL_PCD_EP_Open>
 800be34:	4603      	mov	r3, r0
 800be36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be38:	7bfb      	ldrb	r3, [r7, #15]
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 f908 	bl	800c050 <USBD_Get_USB_Status>
 800be40:	4603      	mov	r3, r0
 800be42:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800be44:	7bbb      	ldrb	r3, [r7, #14]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}

0800be4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b084      	sub	sp, #16
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
 800be56:	460b      	mov	r3, r1
 800be58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be5e:	2300      	movs	r3, #0
 800be60:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800be68:	78fa      	ldrb	r2, [r7, #3]
 800be6a:	4611      	mov	r1, r2
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7f7 fe79 	bl	8003b64 <HAL_PCD_EP_Close>
 800be72:	4603      	mov	r3, r0
 800be74:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800be76:	7bfb      	ldrb	r3, [r7, #15]
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 f8e9 	bl	800c050 <USBD_Get_USB_Status>
 800be7e:	4603      	mov	r3, r0
 800be80:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800be82:	7bbb      	ldrb	r3, [r7, #14]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}

0800be8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	460b      	mov	r3, r1
 800be96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be98:	2300      	movs	r3, #0
 800be9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be9c:	2300      	movs	r3, #0
 800be9e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bea6:	78fa      	ldrb	r2, [r7, #3]
 800bea8:	4611      	mov	r1, r2
 800beaa:	4618      	mov	r0, r3
 800beac:	f7f7 ff51 	bl	8003d52 <HAL_PCD_EP_SetStall>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beb4:	7bfb      	ldrb	r3, [r7, #15]
 800beb6:	4618      	mov	r0, r3
 800beb8:	f000 f8ca 	bl	800c050 <USBD_Get_USB_Status>
 800bebc:	4603      	mov	r3, r0
 800bebe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3710      	adds	r7, #16
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}

0800beca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800beca:	b580      	push	{r7, lr}
 800becc:	b084      	sub	sp, #16
 800bece:	af00      	add	r7, sp, #0
 800bed0:	6078      	str	r0, [r7, #4]
 800bed2:	460b      	mov	r3, r1
 800bed4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beda:	2300      	movs	r3, #0
 800bedc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bee4:	78fa      	ldrb	r2, [r7, #3]
 800bee6:	4611      	mov	r1, r2
 800bee8:	4618      	mov	r0, r3
 800beea:	f7f7 ff96 	bl	8003e1a <HAL_PCD_EP_ClrStall>
 800beee:	4603      	mov	r3, r0
 800bef0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
 800bef4:	4618      	mov	r0, r3
 800bef6:	f000 f8ab 	bl	800c050 <USBD_Get_USB_Status>
 800befa:	4603      	mov	r3, r0
 800befc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800befe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3710      	adds	r7, #16
 800bf04:	46bd      	mov	sp, r7
 800bf06:	bd80      	pop	{r7, pc}

0800bf08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b085      	sub	sp, #20
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bf1a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800bf1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	da0b      	bge.n	800bf3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf2a:	68f9      	ldr	r1, [r7, #12]
 800bf2c:	4613      	mov	r3, r2
 800bf2e:	00db      	lsls	r3, r3, #3
 800bf30:	1a9b      	subs	r3, r3, r2
 800bf32:	009b      	lsls	r3, r3, #2
 800bf34:	440b      	add	r3, r1
 800bf36:	333e      	adds	r3, #62	; 0x3e
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	e00b      	b.n	800bf54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800bf3c:	78fb      	ldrb	r3, [r7, #3]
 800bf3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf42:	68f9      	ldr	r1, [r7, #12]
 800bf44:	4613      	mov	r3, r2
 800bf46:	00db      	lsls	r3, r3, #3
 800bf48:	1a9b      	subs	r3, r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	440b      	add	r3, r1
 800bf4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5e:	4770      	bx	lr

0800bf60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800bf7a:	78fa      	ldrb	r2, [r7, #3]
 800bf7c:	4611      	mov	r1, r2
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7f7 fd63 	bl	8003a4a <HAL_PCD_SetAddress>
 800bf84:	4603      	mov	r3, r0
 800bf86:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf88:	7bfb      	ldrb	r3, [r7, #15]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f000 f860 	bl	800c050 <USBD_Get_USB_Status>
 800bf90:	4603      	mov	r3, r0
 800bf92:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800bf94:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b086      	sub	sp, #24
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	60f8      	str	r0, [r7, #12]
 800bfa6:	607a      	str	r2, [r7, #4]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	460b      	mov	r3, r1
 800bfac:	72fb      	strb	r3, [r7, #11]
 800bfae:	4613      	mov	r3, r2
 800bfb0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800bfc0:	893b      	ldrh	r3, [r7, #8]
 800bfc2:	7af9      	ldrb	r1, [r7, #11]
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	f7f7 fe7a 	bl	8003cbe <HAL_PCD_EP_Transmit>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f000 f83d 	bl	800c050 <USBD_Get_USB_Status>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800bfda:	7dbb      	ldrb	r3, [r7, #22]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3718      	adds	r7, #24
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	60f8      	str	r0, [r7, #12]
 800bfec:	607a      	str	r2, [r7, #4]
 800bfee:	461a      	mov	r2, r3
 800bff0:	460b      	mov	r3, r1
 800bff2:	72fb      	strb	r3, [r7, #11]
 800bff4:	4613      	mov	r3, r2
 800bff6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bff8:	2300      	movs	r3, #0
 800bffa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bffc:	2300      	movs	r3, #0
 800bffe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800c006:	893b      	ldrh	r3, [r7, #8]
 800c008:	7af9      	ldrb	r1, [r7, #11]
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	f7f7 fdf4 	bl	8003bf8 <HAL_PCD_EP_Receive>
 800c010:	4603      	mov	r3, r0
 800c012:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800c014:	7dfb      	ldrb	r3, [r7, #23]
 800c016:	4618      	mov	r0, r3
 800c018:	f000 f81a 	bl	800c050 <USBD_Get_USB_Status>
 800c01c:	4603      	mov	r3, r0
 800c01e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800c020:	7dbb      	ldrb	r3, [r7, #22]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3718      	adds	r7, #24
 800c026:	46bd      	mov	sp, r7
 800c028:	bd80      	pop	{r7, pc}

0800c02a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b082      	sub	sp, #8
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
 800c032:	460b      	mov	r3, r1
 800c034:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c03c:	78fa      	ldrb	r2, [r7, #3]
 800c03e:	4611      	mov	r1, r2
 800c040:	4618      	mov	r0, r3
 800c042:	f7f7 fe24 	bl	8003c8e <HAL_PCD_EP_GetRxCount>
 800c046:	4603      	mov	r3, r0
}
 800c048:	4618      	mov	r0, r3
 800c04a:	3708      	adds	r7, #8
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}

0800c050 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c050:	b480      	push	{r7}
 800c052:	b085      	sub	sp, #20
 800c054:	af00      	add	r7, sp, #0
 800c056:	4603      	mov	r3, r0
 800c058:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c05e:	79fb      	ldrb	r3, [r7, #7]
 800c060:	2b03      	cmp	r3, #3
 800c062:	d817      	bhi.n	800c094 <USBD_Get_USB_Status+0x44>
 800c064:	a201      	add	r2, pc, #4	; (adr r2, 800c06c <USBD_Get_USB_Status+0x1c>)
 800c066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c06a:	bf00      	nop
 800c06c:	0800c07d 	.word	0x0800c07d
 800c070:	0800c083 	.word	0x0800c083
 800c074:	0800c089 	.word	0x0800c089
 800c078:	0800c08f 	.word	0x0800c08f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c07c:	2300      	movs	r3, #0
 800c07e:	73fb      	strb	r3, [r7, #15]
    break;
 800c080:	e00b      	b.n	800c09a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c082:	2302      	movs	r3, #2
 800c084:	73fb      	strb	r3, [r7, #15]
    break;
 800c086:	e008      	b.n	800c09a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c088:	2301      	movs	r3, #1
 800c08a:	73fb      	strb	r3, [r7, #15]
    break;
 800c08c:	e005      	b.n	800c09a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c08e:	2302      	movs	r3, #2
 800c090:	73fb      	strb	r3, [r7, #15]
    break;
 800c092:	e002      	b.n	800c09a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c094:	2302      	movs	r3, #2
 800c096:	73fb      	strb	r3, [r7, #15]
    break;
 800c098:	bf00      	nop
  }
  return usb_status;
 800c09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <__libc_init_array>:
 800c0a8:	b570      	push	{r4, r5, r6, lr}
 800c0aa:	4e0d      	ldr	r6, [pc, #52]	; (800c0e0 <__libc_init_array+0x38>)
 800c0ac:	4c0d      	ldr	r4, [pc, #52]	; (800c0e4 <__libc_init_array+0x3c>)
 800c0ae:	1ba4      	subs	r4, r4, r6
 800c0b0:	10a4      	asrs	r4, r4, #2
 800c0b2:	2500      	movs	r5, #0
 800c0b4:	42a5      	cmp	r5, r4
 800c0b6:	d109      	bne.n	800c0cc <__libc_init_array+0x24>
 800c0b8:	4e0b      	ldr	r6, [pc, #44]	; (800c0e8 <__libc_init_array+0x40>)
 800c0ba:	4c0c      	ldr	r4, [pc, #48]	; (800c0ec <__libc_init_array+0x44>)
 800c0bc:	f003 fd6e 	bl	800fb9c <_init>
 800c0c0:	1ba4      	subs	r4, r4, r6
 800c0c2:	10a4      	asrs	r4, r4, #2
 800c0c4:	2500      	movs	r5, #0
 800c0c6:	42a5      	cmp	r5, r4
 800c0c8:	d105      	bne.n	800c0d6 <__libc_init_array+0x2e>
 800c0ca:	bd70      	pop	{r4, r5, r6, pc}
 800c0cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0d0:	4798      	blx	r3
 800c0d2:	3501      	adds	r5, #1
 800c0d4:	e7ee      	b.n	800c0b4 <__libc_init_array+0xc>
 800c0d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c0da:	4798      	blx	r3
 800c0dc:	3501      	adds	r5, #1
 800c0de:	e7f2      	b.n	800c0c6 <__libc_init_array+0x1e>
 800c0e0:	0800fee8 	.word	0x0800fee8
 800c0e4:	0800fee8 	.word	0x0800fee8
 800c0e8:	0800fee8 	.word	0x0800fee8
 800c0ec:	0800feec 	.word	0x0800feec

0800c0f0 <malloc>:
 800c0f0:	4b02      	ldr	r3, [pc, #8]	; (800c0fc <malloc+0xc>)
 800c0f2:	4601      	mov	r1, r0
 800c0f4:	6818      	ldr	r0, [r3, #0]
 800c0f6:	f000 b86d 	b.w	800c1d4 <_malloc_r>
 800c0fa:	bf00      	nop
 800c0fc:	20000180 	.word	0x20000180

0800c100 <free>:
 800c100:	4b02      	ldr	r3, [pc, #8]	; (800c10c <free+0xc>)
 800c102:	4601      	mov	r1, r0
 800c104:	6818      	ldr	r0, [r3, #0]
 800c106:	f000 b817 	b.w	800c138 <_free_r>
 800c10a:	bf00      	nop
 800c10c:	20000180 	.word	0x20000180

0800c110 <memcpy>:
 800c110:	b510      	push	{r4, lr}
 800c112:	1e43      	subs	r3, r0, #1
 800c114:	440a      	add	r2, r1
 800c116:	4291      	cmp	r1, r2
 800c118:	d100      	bne.n	800c11c <memcpy+0xc>
 800c11a:	bd10      	pop	{r4, pc}
 800c11c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c120:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c124:	e7f7      	b.n	800c116 <memcpy+0x6>

0800c126 <memset>:
 800c126:	4402      	add	r2, r0
 800c128:	4603      	mov	r3, r0
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d100      	bne.n	800c130 <memset+0xa>
 800c12e:	4770      	bx	lr
 800c130:	f803 1b01 	strb.w	r1, [r3], #1
 800c134:	e7f9      	b.n	800c12a <memset+0x4>
	...

0800c138 <_free_r>:
 800c138:	b538      	push	{r3, r4, r5, lr}
 800c13a:	4605      	mov	r5, r0
 800c13c:	2900      	cmp	r1, #0
 800c13e:	d045      	beq.n	800c1cc <_free_r+0x94>
 800c140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c144:	1f0c      	subs	r4, r1, #4
 800c146:	2b00      	cmp	r3, #0
 800c148:	bfb8      	it	lt
 800c14a:	18e4      	addlt	r4, r4, r3
 800c14c:	f002 ff50 	bl	800eff0 <__malloc_lock>
 800c150:	4a1f      	ldr	r2, [pc, #124]	; (800c1d0 <_free_r+0x98>)
 800c152:	6813      	ldr	r3, [r2, #0]
 800c154:	4610      	mov	r0, r2
 800c156:	b933      	cbnz	r3, 800c166 <_free_r+0x2e>
 800c158:	6063      	str	r3, [r4, #4]
 800c15a:	6014      	str	r4, [r2, #0]
 800c15c:	4628      	mov	r0, r5
 800c15e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c162:	f002 bf46 	b.w	800eff2 <__malloc_unlock>
 800c166:	42a3      	cmp	r3, r4
 800c168:	d90c      	bls.n	800c184 <_free_r+0x4c>
 800c16a:	6821      	ldr	r1, [r4, #0]
 800c16c:	1862      	adds	r2, r4, r1
 800c16e:	4293      	cmp	r3, r2
 800c170:	bf04      	itt	eq
 800c172:	681a      	ldreq	r2, [r3, #0]
 800c174:	685b      	ldreq	r3, [r3, #4]
 800c176:	6063      	str	r3, [r4, #4]
 800c178:	bf04      	itt	eq
 800c17a:	1852      	addeq	r2, r2, r1
 800c17c:	6022      	streq	r2, [r4, #0]
 800c17e:	6004      	str	r4, [r0, #0]
 800c180:	e7ec      	b.n	800c15c <_free_r+0x24>
 800c182:	4613      	mov	r3, r2
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	b10a      	cbz	r2, 800c18c <_free_r+0x54>
 800c188:	42a2      	cmp	r2, r4
 800c18a:	d9fa      	bls.n	800c182 <_free_r+0x4a>
 800c18c:	6819      	ldr	r1, [r3, #0]
 800c18e:	1858      	adds	r0, r3, r1
 800c190:	42a0      	cmp	r0, r4
 800c192:	d10b      	bne.n	800c1ac <_free_r+0x74>
 800c194:	6820      	ldr	r0, [r4, #0]
 800c196:	4401      	add	r1, r0
 800c198:	1858      	adds	r0, r3, r1
 800c19a:	4282      	cmp	r2, r0
 800c19c:	6019      	str	r1, [r3, #0]
 800c19e:	d1dd      	bne.n	800c15c <_free_r+0x24>
 800c1a0:	6810      	ldr	r0, [r2, #0]
 800c1a2:	6852      	ldr	r2, [r2, #4]
 800c1a4:	605a      	str	r2, [r3, #4]
 800c1a6:	4401      	add	r1, r0
 800c1a8:	6019      	str	r1, [r3, #0]
 800c1aa:	e7d7      	b.n	800c15c <_free_r+0x24>
 800c1ac:	d902      	bls.n	800c1b4 <_free_r+0x7c>
 800c1ae:	230c      	movs	r3, #12
 800c1b0:	602b      	str	r3, [r5, #0]
 800c1b2:	e7d3      	b.n	800c15c <_free_r+0x24>
 800c1b4:	6820      	ldr	r0, [r4, #0]
 800c1b6:	1821      	adds	r1, r4, r0
 800c1b8:	428a      	cmp	r2, r1
 800c1ba:	bf04      	itt	eq
 800c1bc:	6811      	ldreq	r1, [r2, #0]
 800c1be:	6852      	ldreq	r2, [r2, #4]
 800c1c0:	6062      	str	r2, [r4, #4]
 800c1c2:	bf04      	itt	eq
 800c1c4:	1809      	addeq	r1, r1, r0
 800c1c6:	6021      	streq	r1, [r4, #0]
 800c1c8:	605c      	str	r4, [r3, #4]
 800c1ca:	e7c7      	b.n	800c15c <_free_r+0x24>
 800c1cc:	bd38      	pop	{r3, r4, r5, pc}
 800c1ce:	bf00      	nop
 800c1d0:	20000588 	.word	0x20000588

0800c1d4 <_malloc_r>:
 800c1d4:	b570      	push	{r4, r5, r6, lr}
 800c1d6:	1ccd      	adds	r5, r1, #3
 800c1d8:	f025 0503 	bic.w	r5, r5, #3
 800c1dc:	3508      	adds	r5, #8
 800c1de:	2d0c      	cmp	r5, #12
 800c1e0:	bf38      	it	cc
 800c1e2:	250c      	movcc	r5, #12
 800c1e4:	2d00      	cmp	r5, #0
 800c1e6:	4606      	mov	r6, r0
 800c1e8:	db01      	blt.n	800c1ee <_malloc_r+0x1a>
 800c1ea:	42a9      	cmp	r1, r5
 800c1ec:	d903      	bls.n	800c1f6 <_malloc_r+0x22>
 800c1ee:	230c      	movs	r3, #12
 800c1f0:	6033      	str	r3, [r6, #0]
 800c1f2:	2000      	movs	r0, #0
 800c1f4:	bd70      	pop	{r4, r5, r6, pc}
 800c1f6:	f002 fefb 	bl	800eff0 <__malloc_lock>
 800c1fa:	4a21      	ldr	r2, [pc, #132]	; (800c280 <_malloc_r+0xac>)
 800c1fc:	6814      	ldr	r4, [r2, #0]
 800c1fe:	4621      	mov	r1, r4
 800c200:	b991      	cbnz	r1, 800c228 <_malloc_r+0x54>
 800c202:	4c20      	ldr	r4, [pc, #128]	; (800c284 <_malloc_r+0xb0>)
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	b91b      	cbnz	r3, 800c210 <_malloc_r+0x3c>
 800c208:	4630      	mov	r0, r6
 800c20a:	f000 fe7b 	bl	800cf04 <_sbrk_r>
 800c20e:	6020      	str	r0, [r4, #0]
 800c210:	4629      	mov	r1, r5
 800c212:	4630      	mov	r0, r6
 800c214:	f000 fe76 	bl	800cf04 <_sbrk_r>
 800c218:	1c43      	adds	r3, r0, #1
 800c21a:	d124      	bne.n	800c266 <_malloc_r+0x92>
 800c21c:	230c      	movs	r3, #12
 800c21e:	6033      	str	r3, [r6, #0]
 800c220:	4630      	mov	r0, r6
 800c222:	f002 fee6 	bl	800eff2 <__malloc_unlock>
 800c226:	e7e4      	b.n	800c1f2 <_malloc_r+0x1e>
 800c228:	680b      	ldr	r3, [r1, #0]
 800c22a:	1b5b      	subs	r3, r3, r5
 800c22c:	d418      	bmi.n	800c260 <_malloc_r+0x8c>
 800c22e:	2b0b      	cmp	r3, #11
 800c230:	d90f      	bls.n	800c252 <_malloc_r+0x7e>
 800c232:	600b      	str	r3, [r1, #0]
 800c234:	50cd      	str	r5, [r1, r3]
 800c236:	18cc      	adds	r4, r1, r3
 800c238:	4630      	mov	r0, r6
 800c23a:	f002 feda 	bl	800eff2 <__malloc_unlock>
 800c23e:	f104 000b 	add.w	r0, r4, #11
 800c242:	1d23      	adds	r3, r4, #4
 800c244:	f020 0007 	bic.w	r0, r0, #7
 800c248:	1ac3      	subs	r3, r0, r3
 800c24a:	d0d3      	beq.n	800c1f4 <_malloc_r+0x20>
 800c24c:	425a      	negs	r2, r3
 800c24e:	50e2      	str	r2, [r4, r3]
 800c250:	e7d0      	b.n	800c1f4 <_malloc_r+0x20>
 800c252:	428c      	cmp	r4, r1
 800c254:	684b      	ldr	r3, [r1, #4]
 800c256:	bf16      	itet	ne
 800c258:	6063      	strne	r3, [r4, #4]
 800c25a:	6013      	streq	r3, [r2, #0]
 800c25c:	460c      	movne	r4, r1
 800c25e:	e7eb      	b.n	800c238 <_malloc_r+0x64>
 800c260:	460c      	mov	r4, r1
 800c262:	6849      	ldr	r1, [r1, #4]
 800c264:	e7cc      	b.n	800c200 <_malloc_r+0x2c>
 800c266:	1cc4      	adds	r4, r0, #3
 800c268:	f024 0403 	bic.w	r4, r4, #3
 800c26c:	42a0      	cmp	r0, r4
 800c26e:	d005      	beq.n	800c27c <_malloc_r+0xa8>
 800c270:	1a21      	subs	r1, r4, r0
 800c272:	4630      	mov	r0, r6
 800c274:	f000 fe46 	bl	800cf04 <_sbrk_r>
 800c278:	3001      	adds	r0, #1
 800c27a:	d0cf      	beq.n	800c21c <_malloc_r+0x48>
 800c27c:	6025      	str	r5, [r4, #0]
 800c27e:	e7db      	b.n	800c238 <_malloc_r+0x64>
 800c280:	20000588 	.word	0x20000588
 800c284:	2000058c 	.word	0x2000058c

0800c288 <__cvt>:
 800c288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c28c:	ec55 4b10 	vmov	r4, r5, d0
 800c290:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c292:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c296:	2d00      	cmp	r5, #0
 800c298:	460e      	mov	r6, r1
 800c29a:	4691      	mov	r9, r2
 800c29c:	4619      	mov	r1, r3
 800c29e:	bfb8      	it	lt
 800c2a0:	4622      	movlt	r2, r4
 800c2a2:	462b      	mov	r3, r5
 800c2a4:	f027 0720 	bic.w	r7, r7, #32
 800c2a8:	bfbb      	ittet	lt
 800c2aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c2ae:	461d      	movlt	r5, r3
 800c2b0:	2300      	movge	r3, #0
 800c2b2:	232d      	movlt	r3, #45	; 0x2d
 800c2b4:	bfb8      	it	lt
 800c2b6:	4614      	movlt	r4, r2
 800c2b8:	2f46      	cmp	r7, #70	; 0x46
 800c2ba:	700b      	strb	r3, [r1, #0]
 800c2bc:	d004      	beq.n	800c2c8 <__cvt+0x40>
 800c2be:	2f45      	cmp	r7, #69	; 0x45
 800c2c0:	d100      	bne.n	800c2c4 <__cvt+0x3c>
 800c2c2:	3601      	adds	r6, #1
 800c2c4:	2102      	movs	r1, #2
 800c2c6:	e000      	b.n	800c2ca <__cvt+0x42>
 800c2c8:	2103      	movs	r1, #3
 800c2ca:	ab03      	add	r3, sp, #12
 800c2cc:	9301      	str	r3, [sp, #4]
 800c2ce:	ab02      	add	r3, sp, #8
 800c2d0:	9300      	str	r3, [sp, #0]
 800c2d2:	4632      	mov	r2, r6
 800c2d4:	4653      	mov	r3, sl
 800c2d6:	ec45 4b10 	vmov	d0, r4, r5
 800c2da:	f001 fd85 	bl	800dde8 <_dtoa_r>
 800c2de:	2f47      	cmp	r7, #71	; 0x47
 800c2e0:	4680      	mov	r8, r0
 800c2e2:	d102      	bne.n	800c2ea <__cvt+0x62>
 800c2e4:	f019 0f01 	tst.w	r9, #1
 800c2e8:	d026      	beq.n	800c338 <__cvt+0xb0>
 800c2ea:	2f46      	cmp	r7, #70	; 0x46
 800c2ec:	eb08 0906 	add.w	r9, r8, r6
 800c2f0:	d111      	bne.n	800c316 <__cvt+0x8e>
 800c2f2:	f898 3000 	ldrb.w	r3, [r8]
 800c2f6:	2b30      	cmp	r3, #48	; 0x30
 800c2f8:	d10a      	bne.n	800c310 <__cvt+0x88>
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4620      	mov	r0, r4
 800c300:	4629      	mov	r1, r5
 800c302:	f7f4 fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c306:	b918      	cbnz	r0, 800c310 <__cvt+0x88>
 800c308:	f1c6 0601 	rsb	r6, r6, #1
 800c30c:	f8ca 6000 	str.w	r6, [sl]
 800c310:	f8da 3000 	ldr.w	r3, [sl]
 800c314:	4499      	add	r9, r3
 800c316:	2200      	movs	r2, #0
 800c318:	2300      	movs	r3, #0
 800c31a:	4620      	mov	r0, r4
 800c31c:	4629      	mov	r1, r5
 800c31e:	f7f4 fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c322:	b938      	cbnz	r0, 800c334 <__cvt+0xac>
 800c324:	2230      	movs	r2, #48	; 0x30
 800c326:	9b03      	ldr	r3, [sp, #12]
 800c328:	454b      	cmp	r3, r9
 800c32a:	d205      	bcs.n	800c338 <__cvt+0xb0>
 800c32c:	1c59      	adds	r1, r3, #1
 800c32e:	9103      	str	r1, [sp, #12]
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	e7f8      	b.n	800c326 <__cvt+0x9e>
 800c334:	f8cd 900c 	str.w	r9, [sp, #12]
 800c338:	9b03      	ldr	r3, [sp, #12]
 800c33a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c33c:	eba3 0308 	sub.w	r3, r3, r8
 800c340:	4640      	mov	r0, r8
 800c342:	6013      	str	r3, [r2, #0]
 800c344:	b004      	add	sp, #16
 800c346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c34a <__exponent>:
 800c34a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c34c:	2900      	cmp	r1, #0
 800c34e:	4604      	mov	r4, r0
 800c350:	bfba      	itte	lt
 800c352:	4249      	neglt	r1, r1
 800c354:	232d      	movlt	r3, #45	; 0x2d
 800c356:	232b      	movge	r3, #43	; 0x2b
 800c358:	2909      	cmp	r1, #9
 800c35a:	f804 2b02 	strb.w	r2, [r4], #2
 800c35e:	7043      	strb	r3, [r0, #1]
 800c360:	dd20      	ble.n	800c3a4 <__exponent+0x5a>
 800c362:	f10d 0307 	add.w	r3, sp, #7
 800c366:	461f      	mov	r7, r3
 800c368:	260a      	movs	r6, #10
 800c36a:	fb91 f5f6 	sdiv	r5, r1, r6
 800c36e:	fb06 1115 	mls	r1, r6, r5, r1
 800c372:	3130      	adds	r1, #48	; 0x30
 800c374:	2d09      	cmp	r5, #9
 800c376:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c37a:	f103 32ff 	add.w	r2, r3, #4294967295
 800c37e:	4629      	mov	r1, r5
 800c380:	dc09      	bgt.n	800c396 <__exponent+0x4c>
 800c382:	3130      	adds	r1, #48	; 0x30
 800c384:	3b02      	subs	r3, #2
 800c386:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c38a:	42bb      	cmp	r3, r7
 800c38c:	4622      	mov	r2, r4
 800c38e:	d304      	bcc.n	800c39a <__exponent+0x50>
 800c390:	1a10      	subs	r0, r2, r0
 800c392:	b003      	add	sp, #12
 800c394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c396:	4613      	mov	r3, r2
 800c398:	e7e7      	b.n	800c36a <__exponent+0x20>
 800c39a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c39e:	f804 2b01 	strb.w	r2, [r4], #1
 800c3a2:	e7f2      	b.n	800c38a <__exponent+0x40>
 800c3a4:	2330      	movs	r3, #48	; 0x30
 800c3a6:	4419      	add	r1, r3
 800c3a8:	7083      	strb	r3, [r0, #2]
 800c3aa:	1d02      	adds	r2, r0, #4
 800c3ac:	70c1      	strb	r1, [r0, #3]
 800c3ae:	e7ef      	b.n	800c390 <__exponent+0x46>

0800c3b0 <_printf_float>:
 800c3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b4:	b08d      	sub	sp, #52	; 0x34
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c3bc:	4616      	mov	r6, r2
 800c3be:	461f      	mov	r7, r3
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	f002 fdf5 	bl	800efb0 <_localeconv_r>
 800c3c6:	6803      	ldr	r3, [r0, #0]
 800c3c8:	9304      	str	r3, [sp, #16]
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7f3 ff00 	bl	80001d0 <strlen>
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c3d8:	9005      	str	r0, [sp, #20]
 800c3da:	3307      	adds	r3, #7
 800c3dc:	f023 0307 	bic.w	r3, r3, #7
 800c3e0:	f103 0208 	add.w	r2, r3, #8
 800c3e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3e8:	f8d4 b000 	ldr.w	fp, [r4]
 800c3ec:	f8c8 2000 	str.w	r2, [r8]
 800c3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c3f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c3fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c400:	9307      	str	r3, [sp, #28]
 800c402:	f8cd 8018 	str.w	r8, [sp, #24]
 800c406:	f04f 32ff 	mov.w	r2, #4294967295
 800c40a:	4ba7      	ldr	r3, [pc, #668]	; (800c6a8 <_printf_float+0x2f8>)
 800c40c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c410:	f7f4 fb8c 	bl	8000b2c <__aeabi_dcmpun>
 800c414:	bb70      	cbnz	r0, 800c474 <_printf_float+0xc4>
 800c416:	f04f 32ff 	mov.w	r2, #4294967295
 800c41a:	4ba3      	ldr	r3, [pc, #652]	; (800c6a8 <_printf_float+0x2f8>)
 800c41c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c420:	f7f4 fb66 	bl	8000af0 <__aeabi_dcmple>
 800c424:	bb30      	cbnz	r0, 800c474 <_printf_float+0xc4>
 800c426:	2200      	movs	r2, #0
 800c428:	2300      	movs	r3, #0
 800c42a:	4640      	mov	r0, r8
 800c42c:	4649      	mov	r1, r9
 800c42e:	f7f4 fb55 	bl	8000adc <__aeabi_dcmplt>
 800c432:	b110      	cbz	r0, 800c43a <_printf_float+0x8a>
 800c434:	232d      	movs	r3, #45	; 0x2d
 800c436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c43a:	4a9c      	ldr	r2, [pc, #624]	; (800c6ac <_printf_float+0x2fc>)
 800c43c:	4b9c      	ldr	r3, [pc, #624]	; (800c6b0 <_printf_float+0x300>)
 800c43e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c442:	bf8c      	ite	hi
 800c444:	4690      	movhi	r8, r2
 800c446:	4698      	movls	r8, r3
 800c448:	2303      	movs	r3, #3
 800c44a:	f02b 0204 	bic.w	r2, fp, #4
 800c44e:	6123      	str	r3, [r4, #16]
 800c450:	6022      	str	r2, [r4, #0]
 800c452:	f04f 0900 	mov.w	r9, #0
 800c456:	9700      	str	r7, [sp, #0]
 800c458:	4633      	mov	r3, r6
 800c45a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c45c:	4621      	mov	r1, r4
 800c45e:	4628      	mov	r0, r5
 800c460:	f000 f9e6 	bl	800c830 <_printf_common>
 800c464:	3001      	adds	r0, #1
 800c466:	f040 808d 	bne.w	800c584 <_printf_float+0x1d4>
 800c46a:	f04f 30ff 	mov.w	r0, #4294967295
 800c46e:	b00d      	add	sp, #52	; 0x34
 800c470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c474:	4642      	mov	r2, r8
 800c476:	464b      	mov	r3, r9
 800c478:	4640      	mov	r0, r8
 800c47a:	4649      	mov	r1, r9
 800c47c:	f7f4 fb56 	bl	8000b2c <__aeabi_dcmpun>
 800c480:	b110      	cbz	r0, 800c488 <_printf_float+0xd8>
 800c482:	4a8c      	ldr	r2, [pc, #560]	; (800c6b4 <_printf_float+0x304>)
 800c484:	4b8c      	ldr	r3, [pc, #560]	; (800c6b8 <_printf_float+0x308>)
 800c486:	e7da      	b.n	800c43e <_printf_float+0x8e>
 800c488:	6861      	ldr	r1, [r4, #4]
 800c48a:	1c4b      	adds	r3, r1, #1
 800c48c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c490:	a80a      	add	r0, sp, #40	; 0x28
 800c492:	d13e      	bne.n	800c512 <_printf_float+0x162>
 800c494:	2306      	movs	r3, #6
 800c496:	6063      	str	r3, [r4, #4]
 800c498:	2300      	movs	r3, #0
 800c49a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c49e:	ab09      	add	r3, sp, #36	; 0x24
 800c4a0:	9300      	str	r3, [sp, #0]
 800c4a2:	ec49 8b10 	vmov	d0, r8, r9
 800c4a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c4aa:	6022      	str	r2, [r4, #0]
 800c4ac:	f8cd a004 	str.w	sl, [sp, #4]
 800c4b0:	6861      	ldr	r1, [r4, #4]
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f7ff fee8 	bl	800c288 <__cvt>
 800c4b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c4bc:	2b47      	cmp	r3, #71	; 0x47
 800c4be:	4680      	mov	r8, r0
 800c4c0:	d109      	bne.n	800c4d6 <_printf_float+0x126>
 800c4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4c4:	1cd8      	adds	r0, r3, #3
 800c4c6:	db02      	blt.n	800c4ce <_printf_float+0x11e>
 800c4c8:	6862      	ldr	r2, [r4, #4]
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	dd47      	ble.n	800c55e <_printf_float+0x1ae>
 800c4ce:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4d2:	fa5f fa8a 	uxtb.w	sl, sl
 800c4d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c4da:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4dc:	d824      	bhi.n	800c528 <_printf_float+0x178>
 800c4de:	3901      	subs	r1, #1
 800c4e0:	4652      	mov	r2, sl
 800c4e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4e6:	9109      	str	r1, [sp, #36]	; 0x24
 800c4e8:	f7ff ff2f 	bl	800c34a <__exponent>
 800c4ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ee:	1813      	adds	r3, r2, r0
 800c4f0:	2a01      	cmp	r2, #1
 800c4f2:	4681      	mov	r9, r0
 800c4f4:	6123      	str	r3, [r4, #16]
 800c4f6:	dc02      	bgt.n	800c4fe <_printf_float+0x14e>
 800c4f8:	6822      	ldr	r2, [r4, #0]
 800c4fa:	07d1      	lsls	r1, r2, #31
 800c4fc:	d501      	bpl.n	800c502 <_printf_float+0x152>
 800c4fe:	3301      	adds	r3, #1
 800c500:	6123      	str	r3, [r4, #16]
 800c502:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c506:	2b00      	cmp	r3, #0
 800c508:	d0a5      	beq.n	800c456 <_printf_float+0xa6>
 800c50a:	232d      	movs	r3, #45	; 0x2d
 800c50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c510:	e7a1      	b.n	800c456 <_printf_float+0xa6>
 800c512:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c516:	f000 8177 	beq.w	800c808 <_printf_float+0x458>
 800c51a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c51e:	d1bb      	bne.n	800c498 <_printf_float+0xe8>
 800c520:	2900      	cmp	r1, #0
 800c522:	d1b9      	bne.n	800c498 <_printf_float+0xe8>
 800c524:	2301      	movs	r3, #1
 800c526:	e7b6      	b.n	800c496 <_printf_float+0xe6>
 800c528:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c52c:	d119      	bne.n	800c562 <_printf_float+0x1b2>
 800c52e:	2900      	cmp	r1, #0
 800c530:	6863      	ldr	r3, [r4, #4]
 800c532:	dd0c      	ble.n	800c54e <_printf_float+0x19e>
 800c534:	6121      	str	r1, [r4, #16]
 800c536:	b913      	cbnz	r3, 800c53e <_printf_float+0x18e>
 800c538:	6822      	ldr	r2, [r4, #0]
 800c53a:	07d2      	lsls	r2, r2, #31
 800c53c:	d502      	bpl.n	800c544 <_printf_float+0x194>
 800c53e:	3301      	adds	r3, #1
 800c540:	440b      	add	r3, r1
 800c542:	6123      	str	r3, [r4, #16]
 800c544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c546:	65a3      	str	r3, [r4, #88]	; 0x58
 800c548:	f04f 0900 	mov.w	r9, #0
 800c54c:	e7d9      	b.n	800c502 <_printf_float+0x152>
 800c54e:	b913      	cbnz	r3, 800c556 <_printf_float+0x1a6>
 800c550:	6822      	ldr	r2, [r4, #0]
 800c552:	07d0      	lsls	r0, r2, #31
 800c554:	d501      	bpl.n	800c55a <_printf_float+0x1aa>
 800c556:	3302      	adds	r3, #2
 800c558:	e7f3      	b.n	800c542 <_printf_float+0x192>
 800c55a:	2301      	movs	r3, #1
 800c55c:	e7f1      	b.n	800c542 <_printf_float+0x192>
 800c55e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c562:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c566:	4293      	cmp	r3, r2
 800c568:	db05      	blt.n	800c576 <_printf_float+0x1c6>
 800c56a:	6822      	ldr	r2, [r4, #0]
 800c56c:	6123      	str	r3, [r4, #16]
 800c56e:	07d1      	lsls	r1, r2, #31
 800c570:	d5e8      	bpl.n	800c544 <_printf_float+0x194>
 800c572:	3301      	adds	r3, #1
 800c574:	e7e5      	b.n	800c542 <_printf_float+0x192>
 800c576:	2b00      	cmp	r3, #0
 800c578:	bfd4      	ite	le
 800c57a:	f1c3 0302 	rsble	r3, r3, #2
 800c57e:	2301      	movgt	r3, #1
 800c580:	4413      	add	r3, r2
 800c582:	e7de      	b.n	800c542 <_printf_float+0x192>
 800c584:	6823      	ldr	r3, [r4, #0]
 800c586:	055a      	lsls	r2, r3, #21
 800c588:	d407      	bmi.n	800c59a <_printf_float+0x1ea>
 800c58a:	6923      	ldr	r3, [r4, #16]
 800c58c:	4642      	mov	r2, r8
 800c58e:	4631      	mov	r1, r6
 800c590:	4628      	mov	r0, r5
 800c592:	47b8      	blx	r7
 800c594:	3001      	adds	r0, #1
 800c596:	d12b      	bne.n	800c5f0 <_printf_float+0x240>
 800c598:	e767      	b.n	800c46a <_printf_float+0xba>
 800c59a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c59e:	f240 80dc 	bls.w	800c75a <_printf_float+0x3aa>
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5aa:	f7f4 fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d033      	beq.n	800c61a <_printf_float+0x26a>
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	4a41      	ldr	r2, [pc, #260]	; (800c6bc <_printf_float+0x30c>)
 800c5b6:	4631      	mov	r1, r6
 800c5b8:	4628      	mov	r0, r5
 800c5ba:	47b8      	blx	r7
 800c5bc:	3001      	adds	r0, #1
 800c5be:	f43f af54 	beq.w	800c46a <_printf_float+0xba>
 800c5c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	db02      	blt.n	800c5d0 <_printf_float+0x220>
 800c5ca:	6823      	ldr	r3, [r4, #0]
 800c5cc:	07d8      	lsls	r0, r3, #31
 800c5ce:	d50f      	bpl.n	800c5f0 <_printf_float+0x240>
 800c5d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	4628      	mov	r0, r5
 800c5d8:	47b8      	blx	r7
 800c5da:	3001      	adds	r0, #1
 800c5dc:	f43f af45 	beq.w	800c46a <_printf_float+0xba>
 800c5e0:	f04f 0800 	mov.w	r8, #0
 800c5e4:	f104 091a 	add.w	r9, r4, #26
 800c5e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	4543      	cmp	r3, r8
 800c5ee:	dc09      	bgt.n	800c604 <_printf_float+0x254>
 800c5f0:	6823      	ldr	r3, [r4, #0]
 800c5f2:	079b      	lsls	r3, r3, #30
 800c5f4:	f100 8103 	bmi.w	800c7fe <_printf_float+0x44e>
 800c5f8:	68e0      	ldr	r0, [r4, #12]
 800c5fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5fc:	4298      	cmp	r0, r3
 800c5fe:	bfb8      	it	lt
 800c600:	4618      	movlt	r0, r3
 800c602:	e734      	b.n	800c46e <_printf_float+0xbe>
 800c604:	2301      	movs	r3, #1
 800c606:	464a      	mov	r2, r9
 800c608:	4631      	mov	r1, r6
 800c60a:	4628      	mov	r0, r5
 800c60c:	47b8      	blx	r7
 800c60e:	3001      	adds	r0, #1
 800c610:	f43f af2b 	beq.w	800c46a <_printf_float+0xba>
 800c614:	f108 0801 	add.w	r8, r8, #1
 800c618:	e7e6      	b.n	800c5e8 <_printf_float+0x238>
 800c61a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	dc2b      	bgt.n	800c678 <_printf_float+0x2c8>
 800c620:	2301      	movs	r3, #1
 800c622:	4a26      	ldr	r2, [pc, #152]	; (800c6bc <_printf_float+0x30c>)
 800c624:	4631      	mov	r1, r6
 800c626:	4628      	mov	r0, r5
 800c628:	47b8      	blx	r7
 800c62a:	3001      	adds	r0, #1
 800c62c:	f43f af1d 	beq.w	800c46a <_printf_float+0xba>
 800c630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c632:	b923      	cbnz	r3, 800c63e <_printf_float+0x28e>
 800c634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c636:	b913      	cbnz	r3, 800c63e <_printf_float+0x28e>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	07d9      	lsls	r1, r3, #31
 800c63c:	d5d8      	bpl.n	800c5f0 <_printf_float+0x240>
 800c63e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c642:	4631      	mov	r1, r6
 800c644:	4628      	mov	r0, r5
 800c646:	47b8      	blx	r7
 800c648:	3001      	adds	r0, #1
 800c64a:	f43f af0e 	beq.w	800c46a <_printf_float+0xba>
 800c64e:	f04f 0900 	mov.w	r9, #0
 800c652:	f104 0a1a 	add.w	sl, r4, #26
 800c656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c658:	425b      	negs	r3, r3
 800c65a:	454b      	cmp	r3, r9
 800c65c:	dc01      	bgt.n	800c662 <_printf_float+0x2b2>
 800c65e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c660:	e794      	b.n	800c58c <_printf_float+0x1dc>
 800c662:	2301      	movs	r3, #1
 800c664:	4652      	mov	r2, sl
 800c666:	4631      	mov	r1, r6
 800c668:	4628      	mov	r0, r5
 800c66a:	47b8      	blx	r7
 800c66c:	3001      	adds	r0, #1
 800c66e:	f43f aefc 	beq.w	800c46a <_printf_float+0xba>
 800c672:	f109 0901 	add.w	r9, r9, #1
 800c676:	e7ee      	b.n	800c656 <_printf_float+0x2a6>
 800c678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c67a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c67c:	429a      	cmp	r2, r3
 800c67e:	bfa8      	it	ge
 800c680:	461a      	movge	r2, r3
 800c682:	2a00      	cmp	r2, #0
 800c684:	4691      	mov	r9, r2
 800c686:	dd07      	ble.n	800c698 <_printf_float+0x2e8>
 800c688:	4613      	mov	r3, r2
 800c68a:	4631      	mov	r1, r6
 800c68c:	4642      	mov	r2, r8
 800c68e:	4628      	mov	r0, r5
 800c690:	47b8      	blx	r7
 800c692:	3001      	adds	r0, #1
 800c694:	f43f aee9 	beq.w	800c46a <_printf_float+0xba>
 800c698:	f104 031a 	add.w	r3, r4, #26
 800c69c:	f04f 0b00 	mov.w	fp, #0
 800c6a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6a4:	9306      	str	r3, [sp, #24]
 800c6a6:	e015      	b.n	800c6d4 <_printf_float+0x324>
 800c6a8:	7fefffff 	.word	0x7fefffff
 800c6ac:	0800fc2c 	.word	0x0800fc2c
 800c6b0:	0800fc28 	.word	0x0800fc28
 800c6b4:	0800fc34 	.word	0x0800fc34
 800c6b8:	0800fc30 	.word	0x0800fc30
 800c6bc:	0800fc38 	.word	0x0800fc38
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	9a06      	ldr	r2, [sp, #24]
 800c6c4:	4631      	mov	r1, r6
 800c6c6:	4628      	mov	r0, r5
 800c6c8:	47b8      	blx	r7
 800c6ca:	3001      	adds	r0, #1
 800c6cc:	f43f aecd 	beq.w	800c46a <_printf_float+0xba>
 800c6d0:	f10b 0b01 	add.w	fp, fp, #1
 800c6d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c6d8:	ebaa 0309 	sub.w	r3, sl, r9
 800c6dc:	455b      	cmp	r3, fp
 800c6de:	dcef      	bgt.n	800c6c0 <_printf_float+0x310>
 800c6e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	44d0      	add	r8, sl
 800c6e8:	db15      	blt.n	800c716 <_printf_float+0x366>
 800c6ea:	6823      	ldr	r3, [r4, #0]
 800c6ec:	07da      	lsls	r2, r3, #31
 800c6ee:	d412      	bmi.n	800c716 <_printf_float+0x366>
 800c6f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6f4:	eba3 020a 	sub.w	r2, r3, sl
 800c6f8:	eba3 0a01 	sub.w	sl, r3, r1
 800c6fc:	4592      	cmp	sl, r2
 800c6fe:	bfa8      	it	ge
 800c700:	4692      	movge	sl, r2
 800c702:	f1ba 0f00 	cmp.w	sl, #0
 800c706:	dc0e      	bgt.n	800c726 <_printf_float+0x376>
 800c708:	f04f 0800 	mov.w	r8, #0
 800c70c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c710:	f104 091a 	add.w	r9, r4, #26
 800c714:	e019      	b.n	800c74a <_printf_float+0x39a>
 800c716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	d1e5      	bne.n	800c6f0 <_printf_float+0x340>
 800c724:	e6a1      	b.n	800c46a <_printf_float+0xba>
 800c726:	4653      	mov	r3, sl
 800c728:	4642      	mov	r2, r8
 800c72a:	4631      	mov	r1, r6
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	d1e9      	bne.n	800c708 <_printf_float+0x358>
 800c734:	e699      	b.n	800c46a <_printf_float+0xba>
 800c736:	2301      	movs	r3, #1
 800c738:	464a      	mov	r2, r9
 800c73a:	4631      	mov	r1, r6
 800c73c:	4628      	mov	r0, r5
 800c73e:	47b8      	blx	r7
 800c740:	3001      	adds	r0, #1
 800c742:	f43f ae92 	beq.w	800c46a <_printf_float+0xba>
 800c746:	f108 0801 	add.w	r8, r8, #1
 800c74a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c74e:	1a9b      	subs	r3, r3, r2
 800c750:	eba3 030a 	sub.w	r3, r3, sl
 800c754:	4543      	cmp	r3, r8
 800c756:	dcee      	bgt.n	800c736 <_printf_float+0x386>
 800c758:	e74a      	b.n	800c5f0 <_printf_float+0x240>
 800c75a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c75c:	2a01      	cmp	r2, #1
 800c75e:	dc01      	bgt.n	800c764 <_printf_float+0x3b4>
 800c760:	07db      	lsls	r3, r3, #31
 800c762:	d53a      	bpl.n	800c7da <_printf_float+0x42a>
 800c764:	2301      	movs	r3, #1
 800c766:	4642      	mov	r2, r8
 800c768:	4631      	mov	r1, r6
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b8      	blx	r7
 800c76e:	3001      	adds	r0, #1
 800c770:	f43f ae7b 	beq.w	800c46a <_printf_float+0xba>
 800c774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c778:	4631      	mov	r1, r6
 800c77a:	4628      	mov	r0, r5
 800c77c:	47b8      	blx	r7
 800c77e:	3001      	adds	r0, #1
 800c780:	f108 0801 	add.w	r8, r8, #1
 800c784:	f43f ae71 	beq.w	800c46a <_printf_float+0xba>
 800c788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c78a:	2200      	movs	r2, #0
 800c78c:	f103 3aff 	add.w	sl, r3, #4294967295
 800c790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c794:	2300      	movs	r3, #0
 800c796:	f7f4 f997 	bl	8000ac8 <__aeabi_dcmpeq>
 800c79a:	b9c8      	cbnz	r0, 800c7d0 <_printf_float+0x420>
 800c79c:	4653      	mov	r3, sl
 800c79e:	4642      	mov	r2, r8
 800c7a0:	4631      	mov	r1, r6
 800c7a2:	4628      	mov	r0, r5
 800c7a4:	47b8      	blx	r7
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d10e      	bne.n	800c7c8 <_printf_float+0x418>
 800c7aa:	e65e      	b.n	800c46a <_printf_float+0xba>
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	4652      	mov	r2, sl
 800c7b0:	4631      	mov	r1, r6
 800c7b2:	4628      	mov	r0, r5
 800c7b4:	47b8      	blx	r7
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	f43f ae57 	beq.w	800c46a <_printf_float+0xba>
 800c7bc:	f108 0801 	add.w	r8, r8, #1
 800c7c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c7c2:	3b01      	subs	r3, #1
 800c7c4:	4543      	cmp	r3, r8
 800c7c6:	dcf1      	bgt.n	800c7ac <_printf_float+0x3fc>
 800c7c8:	464b      	mov	r3, r9
 800c7ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c7ce:	e6de      	b.n	800c58e <_printf_float+0x1de>
 800c7d0:	f04f 0800 	mov.w	r8, #0
 800c7d4:	f104 0a1a 	add.w	sl, r4, #26
 800c7d8:	e7f2      	b.n	800c7c0 <_printf_float+0x410>
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e7df      	b.n	800c79e <_printf_float+0x3ee>
 800c7de:	2301      	movs	r3, #1
 800c7e0:	464a      	mov	r2, r9
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	4628      	mov	r0, r5
 800c7e6:	47b8      	blx	r7
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	f43f ae3e 	beq.w	800c46a <_printf_float+0xba>
 800c7ee:	f108 0801 	add.w	r8, r8, #1
 800c7f2:	68e3      	ldr	r3, [r4, #12]
 800c7f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c7f6:	1a9b      	subs	r3, r3, r2
 800c7f8:	4543      	cmp	r3, r8
 800c7fa:	dcf0      	bgt.n	800c7de <_printf_float+0x42e>
 800c7fc:	e6fc      	b.n	800c5f8 <_printf_float+0x248>
 800c7fe:	f04f 0800 	mov.w	r8, #0
 800c802:	f104 0919 	add.w	r9, r4, #25
 800c806:	e7f4      	b.n	800c7f2 <_printf_float+0x442>
 800c808:	2900      	cmp	r1, #0
 800c80a:	f43f ae8b 	beq.w	800c524 <_printf_float+0x174>
 800c80e:	2300      	movs	r3, #0
 800c810:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c814:	ab09      	add	r3, sp, #36	; 0x24
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	ec49 8b10 	vmov	d0, r8, r9
 800c81c:	6022      	str	r2, [r4, #0]
 800c81e:	f8cd a004 	str.w	sl, [sp, #4]
 800c822:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c826:	4628      	mov	r0, r5
 800c828:	f7ff fd2e 	bl	800c288 <__cvt>
 800c82c:	4680      	mov	r8, r0
 800c82e:	e648      	b.n	800c4c2 <_printf_float+0x112>

0800c830 <_printf_common>:
 800c830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c834:	4691      	mov	r9, r2
 800c836:	461f      	mov	r7, r3
 800c838:	688a      	ldr	r2, [r1, #8]
 800c83a:	690b      	ldr	r3, [r1, #16]
 800c83c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c840:	4293      	cmp	r3, r2
 800c842:	bfb8      	it	lt
 800c844:	4613      	movlt	r3, r2
 800c846:	f8c9 3000 	str.w	r3, [r9]
 800c84a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c84e:	4606      	mov	r6, r0
 800c850:	460c      	mov	r4, r1
 800c852:	b112      	cbz	r2, 800c85a <_printf_common+0x2a>
 800c854:	3301      	adds	r3, #1
 800c856:	f8c9 3000 	str.w	r3, [r9]
 800c85a:	6823      	ldr	r3, [r4, #0]
 800c85c:	0699      	lsls	r1, r3, #26
 800c85e:	bf42      	ittt	mi
 800c860:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c864:	3302      	addmi	r3, #2
 800c866:	f8c9 3000 	strmi.w	r3, [r9]
 800c86a:	6825      	ldr	r5, [r4, #0]
 800c86c:	f015 0506 	ands.w	r5, r5, #6
 800c870:	d107      	bne.n	800c882 <_printf_common+0x52>
 800c872:	f104 0a19 	add.w	sl, r4, #25
 800c876:	68e3      	ldr	r3, [r4, #12]
 800c878:	f8d9 2000 	ldr.w	r2, [r9]
 800c87c:	1a9b      	subs	r3, r3, r2
 800c87e:	42ab      	cmp	r3, r5
 800c880:	dc28      	bgt.n	800c8d4 <_printf_common+0xa4>
 800c882:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c886:	6822      	ldr	r2, [r4, #0]
 800c888:	3300      	adds	r3, #0
 800c88a:	bf18      	it	ne
 800c88c:	2301      	movne	r3, #1
 800c88e:	0692      	lsls	r2, r2, #26
 800c890:	d42d      	bmi.n	800c8ee <_printf_common+0xbe>
 800c892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c896:	4639      	mov	r1, r7
 800c898:	4630      	mov	r0, r6
 800c89a:	47c0      	blx	r8
 800c89c:	3001      	adds	r0, #1
 800c89e:	d020      	beq.n	800c8e2 <_printf_common+0xb2>
 800c8a0:	6823      	ldr	r3, [r4, #0]
 800c8a2:	68e5      	ldr	r5, [r4, #12]
 800c8a4:	f8d9 2000 	ldr.w	r2, [r9]
 800c8a8:	f003 0306 	and.w	r3, r3, #6
 800c8ac:	2b04      	cmp	r3, #4
 800c8ae:	bf08      	it	eq
 800c8b0:	1aad      	subeq	r5, r5, r2
 800c8b2:	68a3      	ldr	r3, [r4, #8]
 800c8b4:	6922      	ldr	r2, [r4, #16]
 800c8b6:	bf0c      	ite	eq
 800c8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8bc:	2500      	movne	r5, #0
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	bfc4      	itt	gt
 800c8c2:	1a9b      	subgt	r3, r3, r2
 800c8c4:	18ed      	addgt	r5, r5, r3
 800c8c6:	f04f 0900 	mov.w	r9, #0
 800c8ca:	341a      	adds	r4, #26
 800c8cc:	454d      	cmp	r5, r9
 800c8ce:	d11a      	bne.n	800c906 <_printf_common+0xd6>
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	e008      	b.n	800c8e6 <_printf_common+0xb6>
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	4652      	mov	r2, sl
 800c8d8:	4639      	mov	r1, r7
 800c8da:	4630      	mov	r0, r6
 800c8dc:	47c0      	blx	r8
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d103      	bne.n	800c8ea <_printf_common+0xba>
 800c8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ea:	3501      	adds	r5, #1
 800c8ec:	e7c3      	b.n	800c876 <_printf_common+0x46>
 800c8ee:	18e1      	adds	r1, r4, r3
 800c8f0:	1c5a      	adds	r2, r3, #1
 800c8f2:	2030      	movs	r0, #48	; 0x30
 800c8f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8f8:	4422      	add	r2, r4
 800c8fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c902:	3302      	adds	r3, #2
 800c904:	e7c5      	b.n	800c892 <_printf_common+0x62>
 800c906:	2301      	movs	r3, #1
 800c908:	4622      	mov	r2, r4
 800c90a:	4639      	mov	r1, r7
 800c90c:	4630      	mov	r0, r6
 800c90e:	47c0      	blx	r8
 800c910:	3001      	adds	r0, #1
 800c912:	d0e6      	beq.n	800c8e2 <_printf_common+0xb2>
 800c914:	f109 0901 	add.w	r9, r9, #1
 800c918:	e7d8      	b.n	800c8cc <_printf_common+0x9c>
	...

0800c91c <_printf_i>:
 800c91c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c920:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c924:	460c      	mov	r4, r1
 800c926:	7e09      	ldrb	r1, [r1, #24]
 800c928:	b085      	sub	sp, #20
 800c92a:	296e      	cmp	r1, #110	; 0x6e
 800c92c:	4617      	mov	r7, r2
 800c92e:	4606      	mov	r6, r0
 800c930:	4698      	mov	r8, r3
 800c932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c934:	f000 80b3 	beq.w	800ca9e <_printf_i+0x182>
 800c938:	d822      	bhi.n	800c980 <_printf_i+0x64>
 800c93a:	2963      	cmp	r1, #99	; 0x63
 800c93c:	d036      	beq.n	800c9ac <_printf_i+0x90>
 800c93e:	d80a      	bhi.n	800c956 <_printf_i+0x3a>
 800c940:	2900      	cmp	r1, #0
 800c942:	f000 80b9 	beq.w	800cab8 <_printf_i+0x19c>
 800c946:	2958      	cmp	r1, #88	; 0x58
 800c948:	f000 8083 	beq.w	800ca52 <_printf_i+0x136>
 800c94c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c950:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c954:	e032      	b.n	800c9bc <_printf_i+0xa0>
 800c956:	2964      	cmp	r1, #100	; 0x64
 800c958:	d001      	beq.n	800c95e <_printf_i+0x42>
 800c95a:	2969      	cmp	r1, #105	; 0x69
 800c95c:	d1f6      	bne.n	800c94c <_printf_i+0x30>
 800c95e:	6820      	ldr	r0, [r4, #0]
 800c960:	6813      	ldr	r3, [r2, #0]
 800c962:	0605      	lsls	r5, r0, #24
 800c964:	f103 0104 	add.w	r1, r3, #4
 800c968:	d52a      	bpl.n	800c9c0 <_printf_i+0xa4>
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	6011      	str	r1, [r2, #0]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	da03      	bge.n	800c97a <_printf_i+0x5e>
 800c972:	222d      	movs	r2, #45	; 0x2d
 800c974:	425b      	negs	r3, r3
 800c976:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c97a:	486f      	ldr	r0, [pc, #444]	; (800cb38 <_printf_i+0x21c>)
 800c97c:	220a      	movs	r2, #10
 800c97e:	e039      	b.n	800c9f4 <_printf_i+0xd8>
 800c980:	2973      	cmp	r1, #115	; 0x73
 800c982:	f000 809d 	beq.w	800cac0 <_printf_i+0x1a4>
 800c986:	d808      	bhi.n	800c99a <_printf_i+0x7e>
 800c988:	296f      	cmp	r1, #111	; 0x6f
 800c98a:	d020      	beq.n	800c9ce <_printf_i+0xb2>
 800c98c:	2970      	cmp	r1, #112	; 0x70
 800c98e:	d1dd      	bne.n	800c94c <_printf_i+0x30>
 800c990:	6823      	ldr	r3, [r4, #0]
 800c992:	f043 0320 	orr.w	r3, r3, #32
 800c996:	6023      	str	r3, [r4, #0]
 800c998:	e003      	b.n	800c9a2 <_printf_i+0x86>
 800c99a:	2975      	cmp	r1, #117	; 0x75
 800c99c:	d017      	beq.n	800c9ce <_printf_i+0xb2>
 800c99e:	2978      	cmp	r1, #120	; 0x78
 800c9a0:	d1d4      	bne.n	800c94c <_printf_i+0x30>
 800c9a2:	2378      	movs	r3, #120	; 0x78
 800c9a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9a8:	4864      	ldr	r0, [pc, #400]	; (800cb3c <_printf_i+0x220>)
 800c9aa:	e055      	b.n	800ca58 <_printf_i+0x13c>
 800c9ac:	6813      	ldr	r3, [r2, #0]
 800c9ae:	1d19      	adds	r1, r3, #4
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	6011      	str	r1, [r2, #0]
 800c9b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e08c      	b.n	800cada <_printf_i+0x1be>
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6011      	str	r1, [r2, #0]
 800c9c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c9c8:	bf18      	it	ne
 800c9ca:	b21b      	sxthne	r3, r3
 800c9cc:	e7cf      	b.n	800c96e <_printf_i+0x52>
 800c9ce:	6813      	ldr	r3, [r2, #0]
 800c9d0:	6825      	ldr	r5, [r4, #0]
 800c9d2:	1d18      	adds	r0, r3, #4
 800c9d4:	6010      	str	r0, [r2, #0]
 800c9d6:	0628      	lsls	r0, r5, #24
 800c9d8:	d501      	bpl.n	800c9de <_printf_i+0xc2>
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	e002      	b.n	800c9e4 <_printf_i+0xc8>
 800c9de:	0668      	lsls	r0, r5, #25
 800c9e0:	d5fb      	bpl.n	800c9da <_printf_i+0xbe>
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	4854      	ldr	r0, [pc, #336]	; (800cb38 <_printf_i+0x21c>)
 800c9e6:	296f      	cmp	r1, #111	; 0x6f
 800c9e8:	bf14      	ite	ne
 800c9ea:	220a      	movne	r2, #10
 800c9ec:	2208      	moveq	r2, #8
 800c9ee:	2100      	movs	r1, #0
 800c9f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9f4:	6865      	ldr	r5, [r4, #4]
 800c9f6:	60a5      	str	r5, [r4, #8]
 800c9f8:	2d00      	cmp	r5, #0
 800c9fa:	f2c0 8095 	blt.w	800cb28 <_printf_i+0x20c>
 800c9fe:	6821      	ldr	r1, [r4, #0]
 800ca00:	f021 0104 	bic.w	r1, r1, #4
 800ca04:	6021      	str	r1, [r4, #0]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d13d      	bne.n	800ca86 <_printf_i+0x16a>
 800ca0a:	2d00      	cmp	r5, #0
 800ca0c:	f040 808e 	bne.w	800cb2c <_printf_i+0x210>
 800ca10:	4665      	mov	r5, ip
 800ca12:	2a08      	cmp	r2, #8
 800ca14:	d10b      	bne.n	800ca2e <_printf_i+0x112>
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	07db      	lsls	r3, r3, #31
 800ca1a:	d508      	bpl.n	800ca2e <_printf_i+0x112>
 800ca1c:	6923      	ldr	r3, [r4, #16]
 800ca1e:	6862      	ldr	r2, [r4, #4]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	bfde      	ittt	le
 800ca24:	2330      	movle	r3, #48	; 0x30
 800ca26:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca2e:	ebac 0305 	sub.w	r3, ip, r5
 800ca32:	6123      	str	r3, [r4, #16]
 800ca34:	f8cd 8000 	str.w	r8, [sp]
 800ca38:	463b      	mov	r3, r7
 800ca3a:	aa03      	add	r2, sp, #12
 800ca3c:	4621      	mov	r1, r4
 800ca3e:	4630      	mov	r0, r6
 800ca40:	f7ff fef6 	bl	800c830 <_printf_common>
 800ca44:	3001      	adds	r0, #1
 800ca46:	d14d      	bne.n	800cae4 <_printf_i+0x1c8>
 800ca48:	f04f 30ff 	mov.w	r0, #4294967295
 800ca4c:	b005      	add	sp, #20
 800ca4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca52:	4839      	ldr	r0, [pc, #228]	; (800cb38 <_printf_i+0x21c>)
 800ca54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ca58:	6813      	ldr	r3, [r2, #0]
 800ca5a:	6821      	ldr	r1, [r4, #0]
 800ca5c:	1d1d      	adds	r5, r3, #4
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	6015      	str	r5, [r2, #0]
 800ca62:	060a      	lsls	r2, r1, #24
 800ca64:	d50b      	bpl.n	800ca7e <_printf_i+0x162>
 800ca66:	07ca      	lsls	r2, r1, #31
 800ca68:	bf44      	itt	mi
 800ca6a:	f041 0120 	orrmi.w	r1, r1, #32
 800ca6e:	6021      	strmi	r1, [r4, #0]
 800ca70:	b91b      	cbnz	r3, 800ca7a <_printf_i+0x15e>
 800ca72:	6822      	ldr	r2, [r4, #0]
 800ca74:	f022 0220 	bic.w	r2, r2, #32
 800ca78:	6022      	str	r2, [r4, #0]
 800ca7a:	2210      	movs	r2, #16
 800ca7c:	e7b7      	b.n	800c9ee <_printf_i+0xd2>
 800ca7e:	064d      	lsls	r5, r1, #25
 800ca80:	bf48      	it	mi
 800ca82:	b29b      	uxthmi	r3, r3
 800ca84:	e7ef      	b.n	800ca66 <_printf_i+0x14a>
 800ca86:	4665      	mov	r5, ip
 800ca88:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca8c:	fb02 3311 	mls	r3, r2, r1, r3
 800ca90:	5cc3      	ldrb	r3, [r0, r3]
 800ca92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ca96:	460b      	mov	r3, r1
 800ca98:	2900      	cmp	r1, #0
 800ca9a:	d1f5      	bne.n	800ca88 <_printf_i+0x16c>
 800ca9c:	e7b9      	b.n	800ca12 <_printf_i+0xf6>
 800ca9e:	6813      	ldr	r3, [r2, #0]
 800caa0:	6825      	ldr	r5, [r4, #0]
 800caa2:	6961      	ldr	r1, [r4, #20]
 800caa4:	1d18      	adds	r0, r3, #4
 800caa6:	6010      	str	r0, [r2, #0]
 800caa8:	0628      	lsls	r0, r5, #24
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	d501      	bpl.n	800cab2 <_printf_i+0x196>
 800caae:	6019      	str	r1, [r3, #0]
 800cab0:	e002      	b.n	800cab8 <_printf_i+0x19c>
 800cab2:	066a      	lsls	r2, r5, #25
 800cab4:	d5fb      	bpl.n	800caae <_printf_i+0x192>
 800cab6:	8019      	strh	r1, [r3, #0]
 800cab8:	2300      	movs	r3, #0
 800caba:	6123      	str	r3, [r4, #16]
 800cabc:	4665      	mov	r5, ip
 800cabe:	e7b9      	b.n	800ca34 <_printf_i+0x118>
 800cac0:	6813      	ldr	r3, [r2, #0]
 800cac2:	1d19      	adds	r1, r3, #4
 800cac4:	6011      	str	r1, [r2, #0]
 800cac6:	681d      	ldr	r5, [r3, #0]
 800cac8:	6862      	ldr	r2, [r4, #4]
 800caca:	2100      	movs	r1, #0
 800cacc:	4628      	mov	r0, r5
 800cace:	f7f3 fb87 	bl	80001e0 <memchr>
 800cad2:	b108      	cbz	r0, 800cad8 <_printf_i+0x1bc>
 800cad4:	1b40      	subs	r0, r0, r5
 800cad6:	6060      	str	r0, [r4, #4]
 800cad8:	6863      	ldr	r3, [r4, #4]
 800cada:	6123      	str	r3, [r4, #16]
 800cadc:	2300      	movs	r3, #0
 800cade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cae2:	e7a7      	b.n	800ca34 <_printf_i+0x118>
 800cae4:	6923      	ldr	r3, [r4, #16]
 800cae6:	462a      	mov	r2, r5
 800cae8:	4639      	mov	r1, r7
 800caea:	4630      	mov	r0, r6
 800caec:	47c0      	blx	r8
 800caee:	3001      	adds	r0, #1
 800caf0:	d0aa      	beq.n	800ca48 <_printf_i+0x12c>
 800caf2:	6823      	ldr	r3, [r4, #0]
 800caf4:	079b      	lsls	r3, r3, #30
 800caf6:	d413      	bmi.n	800cb20 <_printf_i+0x204>
 800caf8:	68e0      	ldr	r0, [r4, #12]
 800cafa:	9b03      	ldr	r3, [sp, #12]
 800cafc:	4298      	cmp	r0, r3
 800cafe:	bfb8      	it	lt
 800cb00:	4618      	movlt	r0, r3
 800cb02:	e7a3      	b.n	800ca4c <_printf_i+0x130>
 800cb04:	2301      	movs	r3, #1
 800cb06:	464a      	mov	r2, r9
 800cb08:	4639      	mov	r1, r7
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	47c0      	blx	r8
 800cb0e:	3001      	adds	r0, #1
 800cb10:	d09a      	beq.n	800ca48 <_printf_i+0x12c>
 800cb12:	3501      	adds	r5, #1
 800cb14:	68e3      	ldr	r3, [r4, #12]
 800cb16:	9a03      	ldr	r2, [sp, #12]
 800cb18:	1a9b      	subs	r3, r3, r2
 800cb1a:	42ab      	cmp	r3, r5
 800cb1c:	dcf2      	bgt.n	800cb04 <_printf_i+0x1e8>
 800cb1e:	e7eb      	b.n	800caf8 <_printf_i+0x1dc>
 800cb20:	2500      	movs	r5, #0
 800cb22:	f104 0919 	add.w	r9, r4, #25
 800cb26:	e7f5      	b.n	800cb14 <_printf_i+0x1f8>
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d1ac      	bne.n	800ca86 <_printf_i+0x16a>
 800cb2c:	7803      	ldrb	r3, [r0, #0]
 800cb2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb36:	e76c      	b.n	800ca12 <_printf_i+0xf6>
 800cb38:	0800fc3a 	.word	0x0800fc3a
 800cb3c:	0800fc4b 	.word	0x0800fc4b

0800cb40 <_scanf_float>:
 800cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb44:	469a      	mov	sl, r3
 800cb46:	688b      	ldr	r3, [r1, #8]
 800cb48:	4616      	mov	r6, r2
 800cb4a:	1e5a      	subs	r2, r3, #1
 800cb4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cb50:	b087      	sub	sp, #28
 800cb52:	bf83      	ittte	hi
 800cb54:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800cb58:	189b      	addhi	r3, r3, r2
 800cb5a:	9301      	strhi	r3, [sp, #4]
 800cb5c:	2300      	movls	r3, #0
 800cb5e:	bf86      	itte	hi
 800cb60:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cb64:	608b      	strhi	r3, [r1, #8]
 800cb66:	9301      	strls	r3, [sp, #4]
 800cb68:	680b      	ldr	r3, [r1, #0]
 800cb6a:	4688      	mov	r8, r1
 800cb6c:	f04f 0b00 	mov.w	fp, #0
 800cb70:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cb74:	f848 3b1c 	str.w	r3, [r8], #28
 800cb78:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800cb7c:	4607      	mov	r7, r0
 800cb7e:	460c      	mov	r4, r1
 800cb80:	4645      	mov	r5, r8
 800cb82:	465a      	mov	r2, fp
 800cb84:	46d9      	mov	r9, fp
 800cb86:	f8cd b008 	str.w	fp, [sp, #8]
 800cb8a:	68a1      	ldr	r1, [r4, #8]
 800cb8c:	b181      	cbz	r1, 800cbb0 <_scanf_float+0x70>
 800cb8e:	6833      	ldr	r3, [r6, #0]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	2b49      	cmp	r3, #73	; 0x49
 800cb94:	d071      	beq.n	800cc7a <_scanf_float+0x13a>
 800cb96:	d84d      	bhi.n	800cc34 <_scanf_float+0xf4>
 800cb98:	2b39      	cmp	r3, #57	; 0x39
 800cb9a:	d840      	bhi.n	800cc1e <_scanf_float+0xde>
 800cb9c:	2b31      	cmp	r3, #49	; 0x31
 800cb9e:	f080 8088 	bcs.w	800ccb2 <_scanf_float+0x172>
 800cba2:	2b2d      	cmp	r3, #45	; 0x2d
 800cba4:	f000 8090 	beq.w	800ccc8 <_scanf_float+0x188>
 800cba8:	d815      	bhi.n	800cbd6 <_scanf_float+0x96>
 800cbaa:	2b2b      	cmp	r3, #43	; 0x2b
 800cbac:	f000 808c 	beq.w	800ccc8 <_scanf_float+0x188>
 800cbb0:	f1b9 0f00 	cmp.w	r9, #0
 800cbb4:	d003      	beq.n	800cbbe <_scanf_float+0x7e>
 800cbb6:	6823      	ldr	r3, [r4, #0]
 800cbb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbbc:	6023      	str	r3, [r4, #0]
 800cbbe:	3a01      	subs	r2, #1
 800cbc0:	2a01      	cmp	r2, #1
 800cbc2:	f200 80ea 	bhi.w	800cd9a <_scanf_float+0x25a>
 800cbc6:	4545      	cmp	r5, r8
 800cbc8:	f200 80dc 	bhi.w	800cd84 <_scanf_float+0x244>
 800cbcc:	2601      	movs	r6, #1
 800cbce:	4630      	mov	r0, r6
 800cbd0:	b007      	add	sp, #28
 800cbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd6:	2b2e      	cmp	r3, #46	; 0x2e
 800cbd8:	f000 809f 	beq.w	800cd1a <_scanf_float+0x1da>
 800cbdc:	2b30      	cmp	r3, #48	; 0x30
 800cbde:	d1e7      	bne.n	800cbb0 <_scanf_float+0x70>
 800cbe0:	6820      	ldr	r0, [r4, #0]
 800cbe2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800cbe6:	d064      	beq.n	800ccb2 <_scanf_float+0x172>
 800cbe8:	9b01      	ldr	r3, [sp, #4]
 800cbea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800cbee:	6020      	str	r0, [r4, #0]
 800cbf0:	f109 0901 	add.w	r9, r9, #1
 800cbf4:	b11b      	cbz	r3, 800cbfe <_scanf_float+0xbe>
 800cbf6:	3b01      	subs	r3, #1
 800cbf8:	3101      	adds	r1, #1
 800cbfa:	9301      	str	r3, [sp, #4]
 800cbfc:	60a1      	str	r1, [r4, #8]
 800cbfe:	68a3      	ldr	r3, [r4, #8]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	60a3      	str	r3, [r4, #8]
 800cc04:	6923      	ldr	r3, [r4, #16]
 800cc06:	3301      	adds	r3, #1
 800cc08:	6123      	str	r3, [r4, #16]
 800cc0a:	6873      	ldr	r3, [r6, #4]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	6073      	str	r3, [r6, #4]
 800cc12:	f340 80ac 	ble.w	800cd6e <_scanf_float+0x22e>
 800cc16:	6833      	ldr	r3, [r6, #0]
 800cc18:	3301      	adds	r3, #1
 800cc1a:	6033      	str	r3, [r6, #0]
 800cc1c:	e7b5      	b.n	800cb8a <_scanf_float+0x4a>
 800cc1e:	2b45      	cmp	r3, #69	; 0x45
 800cc20:	f000 8085 	beq.w	800cd2e <_scanf_float+0x1ee>
 800cc24:	2b46      	cmp	r3, #70	; 0x46
 800cc26:	d06a      	beq.n	800ccfe <_scanf_float+0x1be>
 800cc28:	2b41      	cmp	r3, #65	; 0x41
 800cc2a:	d1c1      	bne.n	800cbb0 <_scanf_float+0x70>
 800cc2c:	2a01      	cmp	r2, #1
 800cc2e:	d1bf      	bne.n	800cbb0 <_scanf_float+0x70>
 800cc30:	2202      	movs	r2, #2
 800cc32:	e046      	b.n	800ccc2 <_scanf_float+0x182>
 800cc34:	2b65      	cmp	r3, #101	; 0x65
 800cc36:	d07a      	beq.n	800cd2e <_scanf_float+0x1ee>
 800cc38:	d818      	bhi.n	800cc6c <_scanf_float+0x12c>
 800cc3a:	2b54      	cmp	r3, #84	; 0x54
 800cc3c:	d066      	beq.n	800cd0c <_scanf_float+0x1cc>
 800cc3e:	d811      	bhi.n	800cc64 <_scanf_float+0x124>
 800cc40:	2b4e      	cmp	r3, #78	; 0x4e
 800cc42:	d1b5      	bne.n	800cbb0 <_scanf_float+0x70>
 800cc44:	2a00      	cmp	r2, #0
 800cc46:	d146      	bne.n	800ccd6 <_scanf_float+0x196>
 800cc48:	f1b9 0f00 	cmp.w	r9, #0
 800cc4c:	d145      	bne.n	800ccda <_scanf_float+0x19a>
 800cc4e:	6821      	ldr	r1, [r4, #0]
 800cc50:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cc54:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cc58:	d13f      	bne.n	800ccda <_scanf_float+0x19a>
 800cc5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cc5e:	6021      	str	r1, [r4, #0]
 800cc60:	2201      	movs	r2, #1
 800cc62:	e02e      	b.n	800ccc2 <_scanf_float+0x182>
 800cc64:	2b59      	cmp	r3, #89	; 0x59
 800cc66:	d01e      	beq.n	800cca6 <_scanf_float+0x166>
 800cc68:	2b61      	cmp	r3, #97	; 0x61
 800cc6a:	e7de      	b.n	800cc2a <_scanf_float+0xea>
 800cc6c:	2b6e      	cmp	r3, #110	; 0x6e
 800cc6e:	d0e9      	beq.n	800cc44 <_scanf_float+0x104>
 800cc70:	d815      	bhi.n	800cc9e <_scanf_float+0x15e>
 800cc72:	2b66      	cmp	r3, #102	; 0x66
 800cc74:	d043      	beq.n	800ccfe <_scanf_float+0x1be>
 800cc76:	2b69      	cmp	r3, #105	; 0x69
 800cc78:	d19a      	bne.n	800cbb0 <_scanf_float+0x70>
 800cc7a:	f1bb 0f00 	cmp.w	fp, #0
 800cc7e:	d138      	bne.n	800ccf2 <_scanf_float+0x1b2>
 800cc80:	f1b9 0f00 	cmp.w	r9, #0
 800cc84:	d197      	bne.n	800cbb6 <_scanf_float+0x76>
 800cc86:	6821      	ldr	r1, [r4, #0]
 800cc88:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800cc8c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800cc90:	d195      	bne.n	800cbbe <_scanf_float+0x7e>
 800cc92:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cc96:	6021      	str	r1, [r4, #0]
 800cc98:	f04f 0b01 	mov.w	fp, #1
 800cc9c:	e011      	b.n	800ccc2 <_scanf_float+0x182>
 800cc9e:	2b74      	cmp	r3, #116	; 0x74
 800cca0:	d034      	beq.n	800cd0c <_scanf_float+0x1cc>
 800cca2:	2b79      	cmp	r3, #121	; 0x79
 800cca4:	d184      	bne.n	800cbb0 <_scanf_float+0x70>
 800cca6:	f1bb 0f07 	cmp.w	fp, #7
 800ccaa:	d181      	bne.n	800cbb0 <_scanf_float+0x70>
 800ccac:	f04f 0b08 	mov.w	fp, #8
 800ccb0:	e007      	b.n	800ccc2 <_scanf_float+0x182>
 800ccb2:	eb12 0f0b 	cmn.w	r2, fp
 800ccb6:	f47f af7b 	bne.w	800cbb0 <_scanf_float+0x70>
 800ccba:	6821      	ldr	r1, [r4, #0]
 800ccbc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ccc0:	6021      	str	r1, [r4, #0]
 800ccc2:	702b      	strb	r3, [r5, #0]
 800ccc4:	3501      	adds	r5, #1
 800ccc6:	e79a      	b.n	800cbfe <_scanf_float+0xbe>
 800ccc8:	6821      	ldr	r1, [r4, #0]
 800ccca:	0608      	lsls	r0, r1, #24
 800cccc:	f57f af70 	bpl.w	800cbb0 <_scanf_float+0x70>
 800ccd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ccd4:	e7f4      	b.n	800ccc0 <_scanf_float+0x180>
 800ccd6:	2a02      	cmp	r2, #2
 800ccd8:	d047      	beq.n	800cd6a <_scanf_float+0x22a>
 800ccda:	f1bb 0f01 	cmp.w	fp, #1
 800ccde:	d003      	beq.n	800cce8 <_scanf_float+0x1a8>
 800cce0:	f1bb 0f04 	cmp.w	fp, #4
 800cce4:	f47f af64 	bne.w	800cbb0 <_scanf_float+0x70>
 800cce8:	f10b 0b01 	add.w	fp, fp, #1
 800ccec:	fa5f fb8b 	uxtb.w	fp, fp
 800ccf0:	e7e7      	b.n	800ccc2 <_scanf_float+0x182>
 800ccf2:	f1bb 0f03 	cmp.w	fp, #3
 800ccf6:	d0f7      	beq.n	800cce8 <_scanf_float+0x1a8>
 800ccf8:	f1bb 0f05 	cmp.w	fp, #5
 800ccfc:	e7f2      	b.n	800cce4 <_scanf_float+0x1a4>
 800ccfe:	f1bb 0f02 	cmp.w	fp, #2
 800cd02:	f47f af55 	bne.w	800cbb0 <_scanf_float+0x70>
 800cd06:	f04f 0b03 	mov.w	fp, #3
 800cd0a:	e7da      	b.n	800ccc2 <_scanf_float+0x182>
 800cd0c:	f1bb 0f06 	cmp.w	fp, #6
 800cd10:	f47f af4e 	bne.w	800cbb0 <_scanf_float+0x70>
 800cd14:	f04f 0b07 	mov.w	fp, #7
 800cd18:	e7d3      	b.n	800ccc2 <_scanf_float+0x182>
 800cd1a:	6821      	ldr	r1, [r4, #0]
 800cd1c:	0588      	lsls	r0, r1, #22
 800cd1e:	f57f af47 	bpl.w	800cbb0 <_scanf_float+0x70>
 800cd22:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800cd26:	6021      	str	r1, [r4, #0]
 800cd28:	f8cd 9008 	str.w	r9, [sp, #8]
 800cd2c:	e7c9      	b.n	800ccc2 <_scanf_float+0x182>
 800cd2e:	6821      	ldr	r1, [r4, #0]
 800cd30:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800cd34:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800cd38:	d006      	beq.n	800cd48 <_scanf_float+0x208>
 800cd3a:	0548      	lsls	r0, r1, #21
 800cd3c:	f57f af38 	bpl.w	800cbb0 <_scanf_float+0x70>
 800cd40:	f1b9 0f00 	cmp.w	r9, #0
 800cd44:	f43f af3b 	beq.w	800cbbe <_scanf_float+0x7e>
 800cd48:	0588      	lsls	r0, r1, #22
 800cd4a:	bf58      	it	pl
 800cd4c:	9802      	ldrpl	r0, [sp, #8]
 800cd4e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800cd52:	bf58      	it	pl
 800cd54:	eba9 0000 	subpl.w	r0, r9, r0
 800cd58:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800cd5c:	bf58      	it	pl
 800cd5e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800cd62:	6021      	str	r1, [r4, #0]
 800cd64:	f04f 0900 	mov.w	r9, #0
 800cd68:	e7ab      	b.n	800ccc2 <_scanf_float+0x182>
 800cd6a:	2203      	movs	r2, #3
 800cd6c:	e7a9      	b.n	800ccc2 <_scanf_float+0x182>
 800cd6e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd72:	9205      	str	r2, [sp, #20]
 800cd74:	4631      	mov	r1, r6
 800cd76:	4638      	mov	r0, r7
 800cd78:	4798      	blx	r3
 800cd7a:	9a05      	ldr	r2, [sp, #20]
 800cd7c:	2800      	cmp	r0, #0
 800cd7e:	f43f af04 	beq.w	800cb8a <_scanf_float+0x4a>
 800cd82:	e715      	b.n	800cbb0 <_scanf_float+0x70>
 800cd84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800cd8c:	4632      	mov	r2, r6
 800cd8e:	4638      	mov	r0, r7
 800cd90:	4798      	blx	r3
 800cd92:	6923      	ldr	r3, [r4, #16]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	6123      	str	r3, [r4, #16]
 800cd98:	e715      	b.n	800cbc6 <_scanf_float+0x86>
 800cd9a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800cd9e:	2b06      	cmp	r3, #6
 800cda0:	d80a      	bhi.n	800cdb8 <_scanf_float+0x278>
 800cda2:	f1bb 0f02 	cmp.w	fp, #2
 800cda6:	d968      	bls.n	800ce7a <_scanf_float+0x33a>
 800cda8:	f1ab 0b03 	sub.w	fp, fp, #3
 800cdac:	fa5f fb8b 	uxtb.w	fp, fp
 800cdb0:	eba5 0b0b 	sub.w	fp, r5, fp
 800cdb4:	455d      	cmp	r5, fp
 800cdb6:	d14b      	bne.n	800ce50 <_scanf_float+0x310>
 800cdb8:	6823      	ldr	r3, [r4, #0]
 800cdba:	05da      	lsls	r2, r3, #23
 800cdbc:	d51f      	bpl.n	800cdfe <_scanf_float+0x2be>
 800cdbe:	055b      	lsls	r3, r3, #21
 800cdc0:	d468      	bmi.n	800ce94 <_scanf_float+0x354>
 800cdc2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cdc6:	6923      	ldr	r3, [r4, #16]
 800cdc8:	2965      	cmp	r1, #101	; 0x65
 800cdca:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdce:	f105 3bff 	add.w	fp, r5, #4294967295
 800cdd2:	6123      	str	r3, [r4, #16]
 800cdd4:	d00d      	beq.n	800cdf2 <_scanf_float+0x2b2>
 800cdd6:	2945      	cmp	r1, #69	; 0x45
 800cdd8:	d00b      	beq.n	800cdf2 <_scanf_float+0x2b2>
 800cdda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdde:	4632      	mov	r2, r6
 800cde0:	4638      	mov	r0, r7
 800cde2:	4798      	blx	r3
 800cde4:	6923      	ldr	r3, [r4, #16]
 800cde6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800cdea:	3b01      	subs	r3, #1
 800cdec:	f1a5 0b02 	sub.w	fp, r5, #2
 800cdf0:	6123      	str	r3, [r4, #16]
 800cdf2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cdf6:	4632      	mov	r2, r6
 800cdf8:	4638      	mov	r0, r7
 800cdfa:	4798      	blx	r3
 800cdfc:	465d      	mov	r5, fp
 800cdfe:	6826      	ldr	r6, [r4, #0]
 800ce00:	f016 0610 	ands.w	r6, r6, #16
 800ce04:	d17a      	bne.n	800cefc <_scanf_float+0x3bc>
 800ce06:	702e      	strb	r6, [r5, #0]
 800ce08:	6823      	ldr	r3, [r4, #0]
 800ce0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ce0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce12:	d142      	bne.n	800ce9a <_scanf_float+0x35a>
 800ce14:	9b02      	ldr	r3, [sp, #8]
 800ce16:	eba9 0303 	sub.w	r3, r9, r3
 800ce1a:	425a      	negs	r2, r3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d149      	bne.n	800ceb4 <_scanf_float+0x374>
 800ce20:	2200      	movs	r2, #0
 800ce22:	4641      	mov	r1, r8
 800ce24:	4638      	mov	r0, r7
 800ce26:	f000 feb3 	bl	800db90 <_strtod_r>
 800ce2a:	6825      	ldr	r5, [r4, #0]
 800ce2c:	f8da 3000 	ldr.w	r3, [sl]
 800ce30:	f015 0f02 	tst.w	r5, #2
 800ce34:	f103 0204 	add.w	r2, r3, #4
 800ce38:	ec59 8b10 	vmov	r8, r9, d0
 800ce3c:	f8ca 2000 	str.w	r2, [sl]
 800ce40:	d043      	beq.n	800ceca <_scanf_float+0x38a>
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	e9c3 8900 	strd	r8, r9, [r3]
 800ce48:	68e3      	ldr	r3, [r4, #12]
 800ce4a:	3301      	adds	r3, #1
 800ce4c:	60e3      	str	r3, [r4, #12]
 800ce4e:	e6be      	b.n	800cbce <_scanf_float+0x8e>
 800ce50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce58:	4632      	mov	r2, r6
 800ce5a:	4638      	mov	r0, r7
 800ce5c:	4798      	blx	r3
 800ce5e:	6923      	ldr	r3, [r4, #16]
 800ce60:	3b01      	subs	r3, #1
 800ce62:	6123      	str	r3, [r4, #16]
 800ce64:	e7a6      	b.n	800cdb4 <_scanf_float+0x274>
 800ce66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce6a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce6e:	4632      	mov	r2, r6
 800ce70:	4638      	mov	r0, r7
 800ce72:	4798      	blx	r3
 800ce74:	6923      	ldr	r3, [r4, #16]
 800ce76:	3b01      	subs	r3, #1
 800ce78:	6123      	str	r3, [r4, #16]
 800ce7a:	4545      	cmp	r5, r8
 800ce7c:	d8f3      	bhi.n	800ce66 <_scanf_float+0x326>
 800ce7e:	e6a5      	b.n	800cbcc <_scanf_float+0x8c>
 800ce80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ce84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ce88:	4632      	mov	r2, r6
 800ce8a:	4638      	mov	r0, r7
 800ce8c:	4798      	blx	r3
 800ce8e:	6923      	ldr	r3, [r4, #16]
 800ce90:	3b01      	subs	r3, #1
 800ce92:	6123      	str	r3, [r4, #16]
 800ce94:	4545      	cmp	r5, r8
 800ce96:	d8f3      	bhi.n	800ce80 <_scanf_float+0x340>
 800ce98:	e698      	b.n	800cbcc <_scanf_float+0x8c>
 800ce9a:	9b03      	ldr	r3, [sp, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d0bf      	beq.n	800ce20 <_scanf_float+0x2e0>
 800cea0:	9904      	ldr	r1, [sp, #16]
 800cea2:	230a      	movs	r3, #10
 800cea4:	4632      	mov	r2, r6
 800cea6:	3101      	adds	r1, #1
 800cea8:	4638      	mov	r0, r7
 800ceaa:	f000 fefd 	bl	800dca8 <_strtol_r>
 800ceae:	9b03      	ldr	r3, [sp, #12]
 800ceb0:	9d04      	ldr	r5, [sp, #16]
 800ceb2:	1ac2      	subs	r2, r0, r3
 800ceb4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ceb8:	429d      	cmp	r5, r3
 800ceba:	bf28      	it	cs
 800cebc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800cec0:	490f      	ldr	r1, [pc, #60]	; (800cf00 <_scanf_float+0x3c0>)
 800cec2:	4628      	mov	r0, r5
 800cec4:	f000 f834 	bl	800cf30 <siprintf>
 800cec8:	e7aa      	b.n	800ce20 <_scanf_float+0x2e0>
 800ceca:	f015 0504 	ands.w	r5, r5, #4
 800cece:	d1b8      	bne.n	800ce42 <_scanf_float+0x302>
 800ced0:	681f      	ldr	r7, [r3, #0]
 800ced2:	ee10 2a10 	vmov	r2, s0
 800ced6:	464b      	mov	r3, r9
 800ced8:	ee10 0a10 	vmov	r0, s0
 800cedc:	4649      	mov	r1, r9
 800cede:	f7f3 fe25 	bl	8000b2c <__aeabi_dcmpun>
 800cee2:	b128      	cbz	r0, 800cef0 <_scanf_float+0x3b0>
 800cee4:	4628      	mov	r0, r5
 800cee6:	f000 f81d 	bl	800cf24 <nanf>
 800ceea:	ed87 0a00 	vstr	s0, [r7]
 800ceee:	e7ab      	b.n	800ce48 <_scanf_float+0x308>
 800cef0:	4640      	mov	r0, r8
 800cef2:	4649      	mov	r1, r9
 800cef4:	f7f3 fe78 	bl	8000be8 <__aeabi_d2f>
 800cef8:	6038      	str	r0, [r7, #0]
 800cefa:	e7a5      	b.n	800ce48 <_scanf_float+0x308>
 800cefc:	2600      	movs	r6, #0
 800cefe:	e666      	b.n	800cbce <_scanf_float+0x8e>
 800cf00:	0800fc5c 	.word	0x0800fc5c

0800cf04 <_sbrk_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	4c06      	ldr	r4, [pc, #24]	; (800cf20 <_sbrk_r+0x1c>)
 800cf08:	2300      	movs	r3, #0
 800cf0a:	4605      	mov	r5, r0
 800cf0c:	4608      	mov	r0, r1
 800cf0e:	6023      	str	r3, [r4, #0]
 800cf10:	f002 fe36 	bl	800fb80 <_sbrk>
 800cf14:	1c43      	adds	r3, r0, #1
 800cf16:	d102      	bne.n	800cf1e <_sbrk_r+0x1a>
 800cf18:	6823      	ldr	r3, [r4, #0]
 800cf1a:	b103      	cbz	r3, 800cf1e <_sbrk_r+0x1a>
 800cf1c:	602b      	str	r3, [r5, #0]
 800cf1e:	bd38      	pop	{r3, r4, r5, pc}
 800cf20:	20002834 	.word	0x20002834

0800cf24 <nanf>:
 800cf24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cf2c <nanf+0x8>
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	7fc00000 	.word	0x7fc00000

0800cf30 <siprintf>:
 800cf30:	b40e      	push	{r1, r2, r3}
 800cf32:	b500      	push	{lr}
 800cf34:	b09c      	sub	sp, #112	; 0x70
 800cf36:	ab1d      	add	r3, sp, #116	; 0x74
 800cf38:	9002      	str	r0, [sp, #8]
 800cf3a:	9006      	str	r0, [sp, #24]
 800cf3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf40:	4809      	ldr	r0, [pc, #36]	; (800cf68 <siprintf+0x38>)
 800cf42:	9107      	str	r1, [sp, #28]
 800cf44:	9104      	str	r1, [sp, #16]
 800cf46:	4909      	ldr	r1, [pc, #36]	; (800cf6c <siprintf+0x3c>)
 800cf48:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf4c:	9105      	str	r1, [sp, #20]
 800cf4e:	6800      	ldr	r0, [r0, #0]
 800cf50:	9301      	str	r3, [sp, #4]
 800cf52:	a902      	add	r1, sp, #8
 800cf54:	f002 fcb6 	bl	800f8c4 <_svfiprintf_r>
 800cf58:	9b02      	ldr	r3, [sp, #8]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	701a      	strb	r2, [r3, #0]
 800cf5e:	b01c      	add	sp, #112	; 0x70
 800cf60:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf64:	b003      	add	sp, #12
 800cf66:	4770      	bx	lr
 800cf68:	20000180 	.word	0x20000180
 800cf6c:	ffff0208 	.word	0xffff0208

0800cf70 <sulp>:
 800cf70:	b570      	push	{r4, r5, r6, lr}
 800cf72:	4604      	mov	r4, r0
 800cf74:	460d      	mov	r5, r1
 800cf76:	ec45 4b10 	vmov	d0, r4, r5
 800cf7a:	4616      	mov	r6, r2
 800cf7c:	f002 fb06 	bl	800f58c <__ulp>
 800cf80:	ec51 0b10 	vmov	r0, r1, d0
 800cf84:	b17e      	cbz	r6, 800cfa6 <sulp+0x36>
 800cf86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cf8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	dd09      	ble.n	800cfa6 <sulp+0x36>
 800cf92:	051b      	lsls	r3, r3, #20
 800cf94:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cf98:	2400      	movs	r4, #0
 800cf9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cf9e:	4622      	mov	r2, r4
 800cfa0:	462b      	mov	r3, r5
 800cfa2:	f7f3 fb29 	bl	80005f8 <__aeabi_dmul>
 800cfa6:	bd70      	pop	{r4, r5, r6, pc}

0800cfa8 <_strtod_l>:
 800cfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfac:	461f      	mov	r7, r3
 800cfae:	b0a1      	sub	sp, #132	; 0x84
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	4681      	mov	r9, r0
 800cfb4:	4638      	mov	r0, r7
 800cfb6:	460e      	mov	r6, r1
 800cfb8:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfba:	931c      	str	r3, [sp, #112]	; 0x70
 800cfbc:	f001 fff5 	bl	800efaa <__localeconv_l>
 800cfc0:	4680      	mov	r8, r0
 800cfc2:	6800      	ldr	r0, [r0, #0]
 800cfc4:	f7f3 f904 	bl	80001d0 <strlen>
 800cfc8:	f04f 0a00 	mov.w	sl, #0
 800cfcc:	4604      	mov	r4, r0
 800cfce:	f04f 0b00 	mov.w	fp, #0
 800cfd2:	961b      	str	r6, [sp, #108]	; 0x6c
 800cfd4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cfd6:	781a      	ldrb	r2, [r3, #0]
 800cfd8:	2a0d      	cmp	r2, #13
 800cfda:	d832      	bhi.n	800d042 <_strtod_l+0x9a>
 800cfdc:	2a09      	cmp	r2, #9
 800cfde:	d236      	bcs.n	800d04e <_strtod_l+0xa6>
 800cfe0:	2a00      	cmp	r2, #0
 800cfe2:	d03e      	beq.n	800d062 <_strtod_l+0xba>
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	930d      	str	r3, [sp, #52]	; 0x34
 800cfe8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800cfea:	782b      	ldrb	r3, [r5, #0]
 800cfec:	2b30      	cmp	r3, #48	; 0x30
 800cfee:	f040 80ac 	bne.w	800d14a <_strtod_l+0x1a2>
 800cff2:	786b      	ldrb	r3, [r5, #1]
 800cff4:	2b58      	cmp	r3, #88	; 0x58
 800cff6:	d001      	beq.n	800cffc <_strtod_l+0x54>
 800cff8:	2b78      	cmp	r3, #120	; 0x78
 800cffa:	d167      	bne.n	800d0cc <_strtod_l+0x124>
 800cffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cffe:	9301      	str	r3, [sp, #4]
 800d000:	ab1c      	add	r3, sp, #112	; 0x70
 800d002:	9300      	str	r3, [sp, #0]
 800d004:	9702      	str	r7, [sp, #8]
 800d006:	ab1d      	add	r3, sp, #116	; 0x74
 800d008:	4a88      	ldr	r2, [pc, #544]	; (800d22c <_strtod_l+0x284>)
 800d00a:	a91b      	add	r1, sp, #108	; 0x6c
 800d00c:	4648      	mov	r0, r9
 800d00e:	f001 fcf2 	bl	800e9f6 <__gethex>
 800d012:	f010 0407 	ands.w	r4, r0, #7
 800d016:	4606      	mov	r6, r0
 800d018:	d005      	beq.n	800d026 <_strtod_l+0x7e>
 800d01a:	2c06      	cmp	r4, #6
 800d01c:	d12b      	bne.n	800d076 <_strtod_l+0xce>
 800d01e:	3501      	adds	r5, #1
 800d020:	2300      	movs	r3, #0
 800d022:	951b      	str	r5, [sp, #108]	; 0x6c
 800d024:	930d      	str	r3, [sp, #52]	; 0x34
 800d026:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f040 859a 	bne.w	800db62 <_strtod_l+0xbba>
 800d02e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d030:	b1e3      	cbz	r3, 800d06c <_strtod_l+0xc4>
 800d032:	4652      	mov	r2, sl
 800d034:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d038:	ec43 2b10 	vmov	d0, r2, r3
 800d03c:	b021      	add	sp, #132	; 0x84
 800d03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d042:	2a2b      	cmp	r2, #43	; 0x2b
 800d044:	d015      	beq.n	800d072 <_strtod_l+0xca>
 800d046:	2a2d      	cmp	r2, #45	; 0x2d
 800d048:	d004      	beq.n	800d054 <_strtod_l+0xac>
 800d04a:	2a20      	cmp	r2, #32
 800d04c:	d1ca      	bne.n	800cfe4 <_strtod_l+0x3c>
 800d04e:	3301      	adds	r3, #1
 800d050:	931b      	str	r3, [sp, #108]	; 0x6c
 800d052:	e7bf      	b.n	800cfd4 <_strtod_l+0x2c>
 800d054:	2201      	movs	r2, #1
 800d056:	920d      	str	r2, [sp, #52]	; 0x34
 800d058:	1c5a      	adds	r2, r3, #1
 800d05a:	921b      	str	r2, [sp, #108]	; 0x6c
 800d05c:	785b      	ldrb	r3, [r3, #1]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1c2      	bne.n	800cfe8 <_strtod_l+0x40>
 800d062:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d064:	961b      	str	r6, [sp, #108]	; 0x6c
 800d066:	2b00      	cmp	r3, #0
 800d068:	f040 8579 	bne.w	800db5e <_strtod_l+0xbb6>
 800d06c:	4652      	mov	r2, sl
 800d06e:	465b      	mov	r3, fp
 800d070:	e7e2      	b.n	800d038 <_strtod_l+0x90>
 800d072:	2200      	movs	r2, #0
 800d074:	e7ef      	b.n	800d056 <_strtod_l+0xae>
 800d076:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d078:	b13a      	cbz	r2, 800d08a <_strtod_l+0xe2>
 800d07a:	2135      	movs	r1, #53	; 0x35
 800d07c:	a81e      	add	r0, sp, #120	; 0x78
 800d07e:	f002 fb7d 	bl	800f77c <__copybits>
 800d082:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d084:	4648      	mov	r0, r9
 800d086:	f001 ffe9 	bl	800f05c <_Bfree>
 800d08a:	3c01      	subs	r4, #1
 800d08c:	2c04      	cmp	r4, #4
 800d08e:	d806      	bhi.n	800d09e <_strtod_l+0xf6>
 800d090:	e8df f004 	tbb	[pc, r4]
 800d094:	1714030a 	.word	0x1714030a
 800d098:	0a          	.byte	0x0a
 800d099:	00          	.byte	0x00
 800d09a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800d09e:	0730      	lsls	r0, r6, #28
 800d0a0:	d5c1      	bpl.n	800d026 <_strtod_l+0x7e>
 800d0a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d0a6:	e7be      	b.n	800d026 <_strtod_l+0x7e>
 800d0a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800d0ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800d0ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d0b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d0b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d0ba:	e7f0      	b.n	800d09e <_strtod_l+0xf6>
 800d0bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800d230 <_strtod_l+0x288>
 800d0c0:	e7ed      	b.n	800d09e <_strtod_l+0xf6>
 800d0c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d0c6:	f04f 3aff 	mov.w	sl, #4294967295
 800d0ca:	e7e8      	b.n	800d09e <_strtod_l+0xf6>
 800d0cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0ce:	1c5a      	adds	r2, r3, #1
 800d0d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800d0d2:	785b      	ldrb	r3, [r3, #1]
 800d0d4:	2b30      	cmp	r3, #48	; 0x30
 800d0d6:	d0f9      	beq.n	800d0cc <_strtod_l+0x124>
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d0a4      	beq.n	800d026 <_strtod_l+0x7e>
 800d0dc:	2301      	movs	r3, #1
 800d0de:	2500      	movs	r5, #0
 800d0e0:	9306      	str	r3, [sp, #24]
 800d0e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d0e4:	9308      	str	r3, [sp, #32]
 800d0e6:	9507      	str	r5, [sp, #28]
 800d0e8:	9505      	str	r5, [sp, #20]
 800d0ea:	220a      	movs	r2, #10
 800d0ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800d0ee:	7807      	ldrb	r7, [r0, #0]
 800d0f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800d0f4:	b2d9      	uxtb	r1, r3
 800d0f6:	2909      	cmp	r1, #9
 800d0f8:	d929      	bls.n	800d14e <_strtod_l+0x1a6>
 800d0fa:	4622      	mov	r2, r4
 800d0fc:	f8d8 1000 	ldr.w	r1, [r8]
 800d100:	f002 fcd8 	bl	800fab4 <strncmp>
 800d104:	2800      	cmp	r0, #0
 800d106:	d031      	beq.n	800d16c <_strtod_l+0x1c4>
 800d108:	2000      	movs	r0, #0
 800d10a:	9c05      	ldr	r4, [sp, #20]
 800d10c:	9004      	str	r0, [sp, #16]
 800d10e:	463b      	mov	r3, r7
 800d110:	4602      	mov	r2, r0
 800d112:	2b65      	cmp	r3, #101	; 0x65
 800d114:	d001      	beq.n	800d11a <_strtod_l+0x172>
 800d116:	2b45      	cmp	r3, #69	; 0x45
 800d118:	d114      	bne.n	800d144 <_strtod_l+0x19c>
 800d11a:	b924      	cbnz	r4, 800d126 <_strtod_l+0x17e>
 800d11c:	b910      	cbnz	r0, 800d124 <_strtod_l+0x17c>
 800d11e:	9b06      	ldr	r3, [sp, #24]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d09e      	beq.n	800d062 <_strtod_l+0xba>
 800d124:	2400      	movs	r4, #0
 800d126:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800d128:	1c73      	adds	r3, r6, #1
 800d12a:	931b      	str	r3, [sp, #108]	; 0x6c
 800d12c:	7873      	ldrb	r3, [r6, #1]
 800d12e:	2b2b      	cmp	r3, #43	; 0x2b
 800d130:	d078      	beq.n	800d224 <_strtod_l+0x27c>
 800d132:	2b2d      	cmp	r3, #45	; 0x2d
 800d134:	d070      	beq.n	800d218 <_strtod_l+0x270>
 800d136:	f04f 0c00 	mov.w	ip, #0
 800d13a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800d13e:	2f09      	cmp	r7, #9
 800d140:	d97c      	bls.n	800d23c <_strtod_l+0x294>
 800d142:	961b      	str	r6, [sp, #108]	; 0x6c
 800d144:	f04f 0e00 	mov.w	lr, #0
 800d148:	e09a      	b.n	800d280 <_strtod_l+0x2d8>
 800d14a:	2300      	movs	r3, #0
 800d14c:	e7c7      	b.n	800d0de <_strtod_l+0x136>
 800d14e:	9905      	ldr	r1, [sp, #20]
 800d150:	2908      	cmp	r1, #8
 800d152:	bfdd      	ittte	le
 800d154:	9907      	ldrle	r1, [sp, #28]
 800d156:	fb02 3301 	mlale	r3, r2, r1, r3
 800d15a:	9307      	strle	r3, [sp, #28]
 800d15c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800d160:	9b05      	ldr	r3, [sp, #20]
 800d162:	3001      	adds	r0, #1
 800d164:	3301      	adds	r3, #1
 800d166:	9305      	str	r3, [sp, #20]
 800d168:	901b      	str	r0, [sp, #108]	; 0x6c
 800d16a:	e7bf      	b.n	800d0ec <_strtod_l+0x144>
 800d16c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d16e:	191a      	adds	r2, r3, r4
 800d170:	921b      	str	r2, [sp, #108]	; 0x6c
 800d172:	9a05      	ldr	r2, [sp, #20]
 800d174:	5d1b      	ldrb	r3, [r3, r4]
 800d176:	2a00      	cmp	r2, #0
 800d178:	d037      	beq.n	800d1ea <_strtod_l+0x242>
 800d17a:	9c05      	ldr	r4, [sp, #20]
 800d17c:	4602      	mov	r2, r0
 800d17e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800d182:	2909      	cmp	r1, #9
 800d184:	d913      	bls.n	800d1ae <_strtod_l+0x206>
 800d186:	2101      	movs	r1, #1
 800d188:	9104      	str	r1, [sp, #16]
 800d18a:	e7c2      	b.n	800d112 <_strtod_l+0x16a>
 800d18c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d18e:	1c5a      	adds	r2, r3, #1
 800d190:	921b      	str	r2, [sp, #108]	; 0x6c
 800d192:	785b      	ldrb	r3, [r3, #1]
 800d194:	3001      	adds	r0, #1
 800d196:	2b30      	cmp	r3, #48	; 0x30
 800d198:	d0f8      	beq.n	800d18c <_strtod_l+0x1e4>
 800d19a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800d19e:	2a08      	cmp	r2, #8
 800d1a0:	f200 84e4 	bhi.w	800db6c <_strtod_l+0xbc4>
 800d1a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800d1a6:	9208      	str	r2, [sp, #32]
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800d1b2:	f100 0101 	add.w	r1, r0, #1
 800d1b6:	d012      	beq.n	800d1de <_strtod_l+0x236>
 800d1b8:	440a      	add	r2, r1
 800d1ba:	eb00 0c04 	add.w	ip, r0, r4
 800d1be:	4621      	mov	r1, r4
 800d1c0:	270a      	movs	r7, #10
 800d1c2:	458c      	cmp	ip, r1
 800d1c4:	d113      	bne.n	800d1ee <_strtod_l+0x246>
 800d1c6:	1821      	adds	r1, r4, r0
 800d1c8:	2908      	cmp	r1, #8
 800d1ca:	f104 0401 	add.w	r4, r4, #1
 800d1ce:	4404      	add	r4, r0
 800d1d0:	dc19      	bgt.n	800d206 <_strtod_l+0x25e>
 800d1d2:	9b07      	ldr	r3, [sp, #28]
 800d1d4:	210a      	movs	r1, #10
 800d1d6:	fb01 e303 	mla	r3, r1, r3, lr
 800d1da:	9307      	str	r3, [sp, #28]
 800d1dc:	2100      	movs	r1, #0
 800d1de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d1e0:	1c58      	adds	r0, r3, #1
 800d1e2:	901b      	str	r0, [sp, #108]	; 0x6c
 800d1e4:	785b      	ldrb	r3, [r3, #1]
 800d1e6:	4608      	mov	r0, r1
 800d1e8:	e7c9      	b.n	800d17e <_strtod_l+0x1d6>
 800d1ea:	9805      	ldr	r0, [sp, #20]
 800d1ec:	e7d3      	b.n	800d196 <_strtod_l+0x1ee>
 800d1ee:	2908      	cmp	r1, #8
 800d1f0:	f101 0101 	add.w	r1, r1, #1
 800d1f4:	dc03      	bgt.n	800d1fe <_strtod_l+0x256>
 800d1f6:	9b07      	ldr	r3, [sp, #28]
 800d1f8:	437b      	muls	r3, r7
 800d1fa:	9307      	str	r3, [sp, #28]
 800d1fc:	e7e1      	b.n	800d1c2 <_strtod_l+0x21a>
 800d1fe:	2910      	cmp	r1, #16
 800d200:	bfd8      	it	le
 800d202:	437d      	mulle	r5, r7
 800d204:	e7dd      	b.n	800d1c2 <_strtod_l+0x21a>
 800d206:	2c10      	cmp	r4, #16
 800d208:	bfdc      	itt	le
 800d20a:	210a      	movle	r1, #10
 800d20c:	fb01 e505 	mlale	r5, r1, r5, lr
 800d210:	e7e4      	b.n	800d1dc <_strtod_l+0x234>
 800d212:	2301      	movs	r3, #1
 800d214:	9304      	str	r3, [sp, #16]
 800d216:	e781      	b.n	800d11c <_strtod_l+0x174>
 800d218:	f04f 0c01 	mov.w	ip, #1
 800d21c:	1cb3      	adds	r3, r6, #2
 800d21e:	931b      	str	r3, [sp, #108]	; 0x6c
 800d220:	78b3      	ldrb	r3, [r6, #2]
 800d222:	e78a      	b.n	800d13a <_strtod_l+0x192>
 800d224:	f04f 0c00 	mov.w	ip, #0
 800d228:	e7f8      	b.n	800d21c <_strtod_l+0x274>
 800d22a:	bf00      	nop
 800d22c:	0800fc64 	.word	0x0800fc64
 800d230:	7ff00000 	.word	0x7ff00000
 800d234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d236:	1c5f      	adds	r7, r3, #1
 800d238:	971b      	str	r7, [sp, #108]	; 0x6c
 800d23a:	785b      	ldrb	r3, [r3, #1]
 800d23c:	2b30      	cmp	r3, #48	; 0x30
 800d23e:	d0f9      	beq.n	800d234 <_strtod_l+0x28c>
 800d240:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800d244:	2f08      	cmp	r7, #8
 800d246:	f63f af7d 	bhi.w	800d144 <_strtod_l+0x19c>
 800d24a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800d24e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d250:	930a      	str	r3, [sp, #40]	; 0x28
 800d252:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d254:	1c5f      	adds	r7, r3, #1
 800d256:	971b      	str	r7, [sp, #108]	; 0x6c
 800d258:	785b      	ldrb	r3, [r3, #1]
 800d25a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800d25e:	f1b8 0f09 	cmp.w	r8, #9
 800d262:	d937      	bls.n	800d2d4 <_strtod_l+0x32c>
 800d264:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d266:	1a7f      	subs	r7, r7, r1
 800d268:	2f08      	cmp	r7, #8
 800d26a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800d26e:	dc37      	bgt.n	800d2e0 <_strtod_l+0x338>
 800d270:	45be      	cmp	lr, r7
 800d272:	bfa8      	it	ge
 800d274:	46be      	movge	lr, r7
 800d276:	f1bc 0f00 	cmp.w	ip, #0
 800d27a:	d001      	beq.n	800d280 <_strtod_l+0x2d8>
 800d27c:	f1ce 0e00 	rsb	lr, lr, #0
 800d280:	2c00      	cmp	r4, #0
 800d282:	d151      	bne.n	800d328 <_strtod_l+0x380>
 800d284:	2800      	cmp	r0, #0
 800d286:	f47f aece 	bne.w	800d026 <_strtod_l+0x7e>
 800d28a:	9a06      	ldr	r2, [sp, #24]
 800d28c:	2a00      	cmp	r2, #0
 800d28e:	f47f aeca 	bne.w	800d026 <_strtod_l+0x7e>
 800d292:	9a04      	ldr	r2, [sp, #16]
 800d294:	2a00      	cmp	r2, #0
 800d296:	f47f aee4 	bne.w	800d062 <_strtod_l+0xba>
 800d29a:	2b4e      	cmp	r3, #78	; 0x4e
 800d29c:	d027      	beq.n	800d2ee <_strtod_l+0x346>
 800d29e:	dc21      	bgt.n	800d2e4 <_strtod_l+0x33c>
 800d2a0:	2b49      	cmp	r3, #73	; 0x49
 800d2a2:	f47f aede 	bne.w	800d062 <_strtod_l+0xba>
 800d2a6:	49a0      	ldr	r1, [pc, #640]	; (800d528 <_strtod_l+0x580>)
 800d2a8:	a81b      	add	r0, sp, #108	; 0x6c
 800d2aa:	f001 fdd7 	bl	800ee5c <__match>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	f43f aed7 	beq.w	800d062 <_strtod_l+0xba>
 800d2b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2b6:	499d      	ldr	r1, [pc, #628]	; (800d52c <_strtod_l+0x584>)
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	a81b      	add	r0, sp, #108	; 0x6c
 800d2bc:	931b      	str	r3, [sp, #108]	; 0x6c
 800d2be:	f001 fdcd 	bl	800ee5c <__match>
 800d2c2:	b910      	cbnz	r0, 800d2ca <_strtod_l+0x322>
 800d2c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2c6:	3301      	adds	r3, #1
 800d2c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800d2ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 800d540 <_strtod_l+0x598>
 800d2ce:	f04f 0a00 	mov.w	sl, #0
 800d2d2:	e6a8      	b.n	800d026 <_strtod_l+0x7e>
 800d2d4:	210a      	movs	r1, #10
 800d2d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800d2da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d2de:	e7b8      	b.n	800d252 <_strtod_l+0x2aa>
 800d2e0:	46be      	mov	lr, r7
 800d2e2:	e7c8      	b.n	800d276 <_strtod_l+0x2ce>
 800d2e4:	2b69      	cmp	r3, #105	; 0x69
 800d2e6:	d0de      	beq.n	800d2a6 <_strtod_l+0x2fe>
 800d2e8:	2b6e      	cmp	r3, #110	; 0x6e
 800d2ea:	f47f aeba 	bne.w	800d062 <_strtod_l+0xba>
 800d2ee:	4990      	ldr	r1, [pc, #576]	; (800d530 <_strtod_l+0x588>)
 800d2f0:	a81b      	add	r0, sp, #108	; 0x6c
 800d2f2:	f001 fdb3 	bl	800ee5c <__match>
 800d2f6:	2800      	cmp	r0, #0
 800d2f8:	f43f aeb3 	beq.w	800d062 <_strtod_l+0xba>
 800d2fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b28      	cmp	r3, #40	; 0x28
 800d302:	d10e      	bne.n	800d322 <_strtod_l+0x37a>
 800d304:	aa1e      	add	r2, sp, #120	; 0x78
 800d306:	498b      	ldr	r1, [pc, #556]	; (800d534 <_strtod_l+0x58c>)
 800d308:	a81b      	add	r0, sp, #108	; 0x6c
 800d30a:	f001 fdbb 	bl	800ee84 <__hexnan>
 800d30e:	2805      	cmp	r0, #5
 800d310:	d107      	bne.n	800d322 <_strtod_l+0x37a>
 800d312:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d314:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800d318:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d31c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d320:	e681      	b.n	800d026 <_strtod_l+0x7e>
 800d322:	f8df b224 	ldr.w	fp, [pc, #548]	; 800d548 <_strtod_l+0x5a0>
 800d326:	e7d2      	b.n	800d2ce <_strtod_l+0x326>
 800d328:	ebae 0302 	sub.w	r3, lr, r2
 800d32c:	9306      	str	r3, [sp, #24]
 800d32e:	9b05      	ldr	r3, [sp, #20]
 800d330:	9807      	ldr	r0, [sp, #28]
 800d332:	2b00      	cmp	r3, #0
 800d334:	bf08      	it	eq
 800d336:	4623      	moveq	r3, r4
 800d338:	2c10      	cmp	r4, #16
 800d33a:	9305      	str	r3, [sp, #20]
 800d33c:	46a0      	mov	r8, r4
 800d33e:	bfa8      	it	ge
 800d340:	f04f 0810 	movge.w	r8, #16
 800d344:	f7f3 f8de 	bl	8000504 <__aeabi_ui2d>
 800d348:	2c09      	cmp	r4, #9
 800d34a:	4682      	mov	sl, r0
 800d34c:	468b      	mov	fp, r1
 800d34e:	dc13      	bgt.n	800d378 <_strtod_l+0x3d0>
 800d350:	9b06      	ldr	r3, [sp, #24]
 800d352:	2b00      	cmp	r3, #0
 800d354:	f43f ae67 	beq.w	800d026 <_strtod_l+0x7e>
 800d358:	9b06      	ldr	r3, [sp, #24]
 800d35a:	dd7a      	ble.n	800d452 <_strtod_l+0x4aa>
 800d35c:	2b16      	cmp	r3, #22
 800d35e:	dc61      	bgt.n	800d424 <_strtod_l+0x47c>
 800d360:	4a75      	ldr	r2, [pc, #468]	; (800d538 <_strtod_l+0x590>)
 800d362:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800d366:	e9de 0100 	ldrd	r0, r1, [lr]
 800d36a:	4652      	mov	r2, sl
 800d36c:	465b      	mov	r3, fp
 800d36e:	f7f3 f943 	bl	80005f8 <__aeabi_dmul>
 800d372:	4682      	mov	sl, r0
 800d374:	468b      	mov	fp, r1
 800d376:	e656      	b.n	800d026 <_strtod_l+0x7e>
 800d378:	4b6f      	ldr	r3, [pc, #444]	; (800d538 <_strtod_l+0x590>)
 800d37a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d37e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d382:	f7f3 f939 	bl	80005f8 <__aeabi_dmul>
 800d386:	4606      	mov	r6, r0
 800d388:	4628      	mov	r0, r5
 800d38a:	460f      	mov	r7, r1
 800d38c:	f7f3 f8ba 	bl	8000504 <__aeabi_ui2d>
 800d390:	4602      	mov	r2, r0
 800d392:	460b      	mov	r3, r1
 800d394:	4630      	mov	r0, r6
 800d396:	4639      	mov	r1, r7
 800d398:	f7f2 ff78 	bl	800028c <__adddf3>
 800d39c:	2c0f      	cmp	r4, #15
 800d39e:	4682      	mov	sl, r0
 800d3a0:	468b      	mov	fp, r1
 800d3a2:	ddd5      	ble.n	800d350 <_strtod_l+0x3a8>
 800d3a4:	9b06      	ldr	r3, [sp, #24]
 800d3a6:	eba4 0808 	sub.w	r8, r4, r8
 800d3aa:	4498      	add	r8, r3
 800d3ac:	f1b8 0f00 	cmp.w	r8, #0
 800d3b0:	f340 8096 	ble.w	800d4e0 <_strtod_l+0x538>
 800d3b4:	f018 030f 	ands.w	r3, r8, #15
 800d3b8:	d00a      	beq.n	800d3d0 <_strtod_l+0x428>
 800d3ba:	495f      	ldr	r1, [pc, #380]	; (800d538 <_strtod_l+0x590>)
 800d3bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d3c0:	4652      	mov	r2, sl
 800d3c2:	465b      	mov	r3, fp
 800d3c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d3c8:	f7f3 f916 	bl	80005f8 <__aeabi_dmul>
 800d3cc:	4682      	mov	sl, r0
 800d3ce:	468b      	mov	fp, r1
 800d3d0:	f038 080f 	bics.w	r8, r8, #15
 800d3d4:	d073      	beq.n	800d4be <_strtod_l+0x516>
 800d3d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d3da:	dd47      	ble.n	800d46c <_strtod_l+0x4c4>
 800d3dc:	2400      	movs	r4, #0
 800d3de:	46a0      	mov	r8, r4
 800d3e0:	9407      	str	r4, [sp, #28]
 800d3e2:	9405      	str	r4, [sp, #20]
 800d3e4:	2322      	movs	r3, #34	; 0x22
 800d3e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800d540 <_strtod_l+0x598>
 800d3ea:	f8c9 3000 	str.w	r3, [r9]
 800d3ee:	f04f 0a00 	mov.w	sl, #0
 800d3f2:	9b07      	ldr	r3, [sp, #28]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f43f ae16 	beq.w	800d026 <_strtod_l+0x7e>
 800d3fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d3fc:	4648      	mov	r0, r9
 800d3fe:	f001 fe2d 	bl	800f05c <_Bfree>
 800d402:	9905      	ldr	r1, [sp, #20]
 800d404:	4648      	mov	r0, r9
 800d406:	f001 fe29 	bl	800f05c <_Bfree>
 800d40a:	4641      	mov	r1, r8
 800d40c:	4648      	mov	r0, r9
 800d40e:	f001 fe25 	bl	800f05c <_Bfree>
 800d412:	9907      	ldr	r1, [sp, #28]
 800d414:	4648      	mov	r0, r9
 800d416:	f001 fe21 	bl	800f05c <_Bfree>
 800d41a:	4621      	mov	r1, r4
 800d41c:	4648      	mov	r0, r9
 800d41e:	f001 fe1d 	bl	800f05c <_Bfree>
 800d422:	e600      	b.n	800d026 <_strtod_l+0x7e>
 800d424:	9a06      	ldr	r2, [sp, #24]
 800d426:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800d42a:	4293      	cmp	r3, r2
 800d42c:	dbba      	blt.n	800d3a4 <_strtod_l+0x3fc>
 800d42e:	4d42      	ldr	r5, [pc, #264]	; (800d538 <_strtod_l+0x590>)
 800d430:	f1c4 040f 	rsb	r4, r4, #15
 800d434:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800d438:	4652      	mov	r2, sl
 800d43a:	465b      	mov	r3, fp
 800d43c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d440:	f7f3 f8da 	bl	80005f8 <__aeabi_dmul>
 800d444:	9b06      	ldr	r3, [sp, #24]
 800d446:	1b1c      	subs	r4, r3, r4
 800d448:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800d44c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d450:	e78d      	b.n	800d36e <_strtod_l+0x3c6>
 800d452:	f113 0f16 	cmn.w	r3, #22
 800d456:	dba5      	blt.n	800d3a4 <_strtod_l+0x3fc>
 800d458:	4a37      	ldr	r2, [pc, #220]	; (800d538 <_strtod_l+0x590>)
 800d45a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800d45e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800d462:	4650      	mov	r0, sl
 800d464:	4659      	mov	r1, fp
 800d466:	f7f3 f9f1 	bl	800084c <__aeabi_ddiv>
 800d46a:	e782      	b.n	800d372 <_strtod_l+0x3ca>
 800d46c:	2300      	movs	r3, #0
 800d46e:	4e33      	ldr	r6, [pc, #204]	; (800d53c <_strtod_l+0x594>)
 800d470:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d474:	4650      	mov	r0, sl
 800d476:	4659      	mov	r1, fp
 800d478:	461d      	mov	r5, r3
 800d47a:	f1b8 0f01 	cmp.w	r8, #1
 800d47e:	dc21      	bgt.n	800d4c4 <_strtod_l+0x51c>
 800d480:	b10b      	cbz	r3, 800d486 <_strtod_l+0x4de>
 800d482:	4682      	mov	sl, r0
 800d484:	468b      	mov	fp, r1
 800d486:	4b2d      	ldr	r3, [pc, #180]	; (800d53c <_strtod_l+0x594>)
 800d488:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d48c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800d490:	4652      	mov	r2, sl
 800d492:	465b      	mov	r3, fp
 800d494:	e9d5 0100 	ldrd	r0, r1, [r5]
 800d498:	f7f3 f8ae 	bl	80005f8 <__aeabi_dmul>
 800d49c:	4b28      	ldr	r3, [pc, #160]	; (800d540 <_strtod_l+0x598>)
 800d49e:	460a      	mov	r2, r1
 800d4a0:	400b      	ands	r3, r1
 800d4a2:	4928      	ldr	r1, [pc, #160]	; (800d544 <_strtod_l+0x59c>)
 800d4a4:	428b      	cmp	r3, r1
 800d4a6:	4682      	mov	sl, r0
 800d4a8:	d898      	bhi.n	800d3dc <_strtod_l+0x434>
 800d4aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d4ae:	428b      	cmp	r3, r1
 800d4b0:	bf86      	itte	hi
 800d4b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800d54c <_strtod_l+0x5a4>
 800d4b6:	f04f 3aff 	movhi.w	sl, #4294967295
 800d4ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d4be:	2300      	movs	r3, #0
 800d4c0:	9304      	str	r3, [sp, #16]
 800d4c2:	e077      	b.n	800d5b4 <_strtod_l+0x60c>
 800d4c4:	f018 0f01 	tst.w	r8, #1
 800d4c8:	d006      	beq.n	800d4d8 <_strtod_l+0x530>
 800d4ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	f7f3 f891 	bl	80005f8 <__aeabi_dmul>
 800d4d6:	2301      	movs	r3, #1
 800d4d8:	3501      	adds	r5, #1
 800d4da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d4de:	e7cc      	b.n	800d47a <_strtod_l+0x4d2>
 800d4e0:	d0ed      	beq.n	800d4be <_strtod_l+0x516>
 800d4e2:	f1c8 0800 	rsb	r8, r8, #0
 800d4e6:	f018 020f 	ands.w	r2, r8, #15
 800d4ea:	d00a      	beq.n	800d502 <_strtod_l+0x55a>
 800d4ec:	4b12      	ldr	r3, [pc, #72]	; (800d538 <_strtod_l+0x590>)
 800d4ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d4f2:	4650      	mov	r0, sl
 800d4f4:	4659      	mov	r1, fp
 800d4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fa:	f7f3 f9a7 	bl	800084c <__aeabi_ddiv>
 800d4fe:	4682      	mov	sl, r0
 800d500:	468b      	mov	fp, r1
 800d502:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d506:	d0da      	beq.n	800d4be <_strtod_l+0x516>
 800d508:	f1b8 0f1f 	cmp.w	r8, #31
 800d50c:	dd20      	ble.n	800d550 <_strtod_l+0x5a8>
 800d50e:	2400      	movs	r4, #0
 800d510:	46a0      	mov	r8, r4
 800d512:	9407      	str	r4, [sp, #28]
 800d514:	9405      	str	r4, [sp, #20]
 800d516:	2322      	movs	r3, #34	; 0x22
 800d518:	f04f 0a00 	mov.w	sl, #0
 800d51c:	f04f 0b00 	mov.w	fp, #0
 800d520:	f8c9 3000 	str.w	r3, [r9]
 800d524:	e765      	b.n	800d3f2 <_strtod_l+0x44a>
 800d526:	bf00      	nop
 800d528:	0800fc2d 	.word	0x0800fc2d
 800d52c:	0800fcbb 	.word	0x0800fcbb
 800d530:	0800fc35 	.word	0x0800fc35
 800d534:	0800fc78 	.word	0x0800fc78
 800d538:	0800fcf8 	.word	0x0800fcf8
 800d53c:	0800fcd0 	.word	0x0800fcd0
 800d540:	7ff00000 	.word	0x7ff00000
 800d544:	7ca00000 	.word	0x7ca00000
 800d548:	fff80000 	.word	0xfff80000
 800d54c:	7fefffff 	.word	0x7fefffff
 800d550:	f018 0310 	ands.w	r3, r8, #16
 800d554:	bf18      	it	ne
 800d556:	236a      	movne	r3, #106	; 0x6a
 800d558:	4da0      	ldr	r5, [pc, #640]	; (800d7dc <_strtod_l+0x834>)
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	4650      	mov	r0, sl
 800d55e:	4659      	mov	r1, fp
 800d560:	2300      	movs	r3, #0
 800d562:	f1b8 0f00 	cmp.w	r8, #0
 800d566:	f300 810a 	bgt.w	800d77e <_strtod_l+0x7d6>
 800d56a:	b10b      	cbz	r3, 800d570 <_strtod_l+0x5c8>
 800d56c:	4682      	mov	sl, r0
 800d56e:	468b      	mov	fp, r1
 800d570:	9b04      	ldr	r3, [sp, #16]
 800d572:	b1bb      	cbz	r3, 800d5a4 <_strtod_l+0x5fc>
 800d574:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800d578:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	4659      	mov	r1, fp
 800d580:	dd10      	ble.n	800d5a4 <_strtod_l+0x5fc>
 800d582:	2b1f      	cmp	r3, #31
 800d584:	f340 8107 	ble.w	800d796 <_strtod_l+0x7ee>
 800d588:	2b34      	cmp	r3, #52	; 0x34
 800d58a:	bfde      	ittt	le
 800d58c:	3b20      	suble	r3, #32
 800d58e:	f04f 32ff 	movle.w	r2, #4294967295
 800d592:	fa02 f303 	lslle.w	r3, r2, r3
 800d596:	f04f 0a00 	mov.w	sl, #0
 800d59a:	bfcc      	ite	gt
 800d59c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d5a0:	ea03 0b01 	andle.w	fp, r3, r1
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	4650      	mov	r0, sl
 800d5aa:	4659      	mov	r1, fp
 800d5ac:	f7f3 fa8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	d1ac      	bne.n	800d50e <_strtod_l+0x566>
 800d5b4:	9b07      	ldr	r3, [sp, #28]
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	9a05      	ldr	r2, [sp, #20]
 800d5ba:	9908      	ldr	r1, [sp, #32]
 800d5bc:	4623      	mov	r3, r4
 800d5be:	4648      	mov	r0, r9
 800d5c0:	f001 fd9e 	bl	800f100 <__s2b>
 800d5c4:	9007      	str	r0, [sp, #28]
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	f43f af08 	beq.w	800d3dc <_strtod_l+0x434>
 800d5cc:	9a06      	ldr	r2, [sp, #24]
 800d5ce:	9b06      	ldr	r3, [sp, #24]
 800d5d0:	2a00      	cmp	r2, #0
 800d5d2:	f1c3 0300 	rsb	r3, r3, #0
 800d5d6:	bfa8      	it	ge
 800d5d8:	2300      	movge	r3, #0
 800d5da:	930e      	str	r3, [sp, #56]	; 0x38
 800d5dc:	2400      	movs	r4, #0
 800d5de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d5e2:	9316      	str	r3, [sp, #88]	; 0x58
 800d5e4:	46a0      	mov	r8, r4
 800d5e6:	9b07      	ldr	r3, [sp, #28]
 800d5e8:	4648      	mov	r0, r9
 800d5ea:	6859      	ldr	r1, [r3, #4]
 800d5ec:	f001 fd02 	bl	800eff4 <_Balloc>
 800d5f0:	9005      	str	r0, [sp, #20]
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	f43f aef6 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d5f8:	9b07      	ldr	r3, [sp, #28]
 800d5fa:	691a      	ldr	r2, [r3, #16]
 800d5fc:	3202      	adds	r2, #2
 800d5fe:	f103 010c 	add.w	r1, r3, #12
 800d602:	0092      	lsls	r2, r2, #2
 800d604:	300c      	adds	r0, #12
 800d606:	f7fe fd83 	bl	800c110 <memcpy>
 800d60a:	aa1e      	add	r2, sp, #120	; 0x78
 800d60c:	a91d      	add	r1, sp, #116	; 0x74
 800d60e:	ec4b ab10 	vmov	d0, sl, fp
 800d612:	4648      	mov	r0, r9
 800d614:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800d618:	f002 f82e 	bl	800f678 <__d2b>
 800d61c:	901c      	str	r0, [sp, #112]	; 0x70
 800d61e:	2800      	cmp	r0, #0
 800d620:	f43f aee0 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d624:	2101      	movs	r1, #1
 800d626:	4648      	mov	r0, r9
 800d628:	f001 fdf6 	bl	800f218 <__i2b>
 800d62c:	4680      	mov	r8, r0
 800d62e:	2800      	cmp	r0, #0
 800d630:	f43f aed8 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d634:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800d636:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d638:	2e00      	cmp	r6, #0
 800d63a:	bfab      	itete	ge
 800d63c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800d63e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800d640:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800d642:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800d644:	bfac      	ite	ge
 800d646:	18f7      	addge	r7, r6, r3
 800d648:	1b9d      	sublt	r5, r3, r6
 800d64a:	9b04      	ldr	r3, [sp, #16]
 800d64c:	1af6      	subs	r6, r6, r3
 800d64e:	4416      	add	r6, r2
 800d650:	4b63      	ldr	r3, [pc, #396]	; (800d7e0 <_strtod_l+0x838>)
 800d652:	3e01      	subs	r6, #1
 800d654:	429e      	cmp	r6, r3
 800d656:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d65a:	f280 80af 	bge.w	800d7bc <_strtod_l+0x814>
 800d65e:	1b9b      	subs	r3, r3, r6
 800d660:	2b1f      	cmp	r3, #31
 800d662:	eba2 0203 	sub.w	r2, r2, r3
 800d666:	f04f 0101 	mov.w	r1, #1
 800d66a:	f300 809b 	bgt.w	800d7a4 <_strtod_l+0x7fc>
 800d66e:	fa01 f303 	lsl.w	r3, r1, r3
 800d672:	930f      	str	r3, [sp, #60]	; 0x3c
 800d674:	2300      	movs	r3, #0
 800d676:	930a      	str	r3, [sp, #40]	; 0x28
 800d678:	18be      	adds	r6, r7, r2
 800d67a:	9b04      	ldr	r3, [sp, #16]
 800d67c:	42b7      	cmp	r7, r6
 800d67e:	4415      	add	r5, r2
 800d680:	441d      	add	r5, r3
 800d682:	463b      	mov	r3, r7
 800d684:	bfa8      	it	ge
 800d686:	4633      	movge	r3, r6
 800d688:	42ab      	cmp	r3, r5
 800d68a:	bfa8      	it	ge
 800d68c:	462b      	movge	r3, r5
 800d68e:	2b00      	cmp	r3, #0
 800d690:	bfc2      	ittt	gt
 800d692:	1af6      	subgt	r6, r6, r3
 800d694:	1aed      	subgt	r5, r5, r3
 800d696:	1aff      	subgt	r7, r7, r3
 800d698:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d69a:	b1bb      	cbz	r3, 800d6cc <_strtod_l+0x724>
 800d69c:	4641      	mov	r1, r8
 800d69e:	461a      	mov	r2, r3
 800d6a0:	4648      	mov	r0, r9
 800d6a2:	f001 fe59 	bl	800f358 <__pow5mult>
 800d6a6:	4680      	mov	r8, r0
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	f43f ae9b 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d6ae:	4601      	mov	r1, r0
 800d6b0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800d6b2:	4648      	mov	r0, r9
 800d6b4:	f001 fdb9 	bl	800f22a <__multiply>
 800d6b8:	900c      	str	r0, [sp, #48]	; 0x30
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	f43f ae92 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d6c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d6c2:	4648      	mov	r0, r9
 800d6c4:	f001 fcca 	bl	800f05c <_Bfree>
 800d6c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6ca:	931c      	str	r3, [sp, #112]	; 0x70
 800d6cc:	2e00      	cmp	r6, #0
 800d6ce:	dc7a      	bgt.n	800d7c6 <_strtod_l+0x81e>
 800d6d0:	9b06      	ldr	r3, [sp, #24]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	dd08      	ble.n	800d6e8 <_strtod_l+0x740>
 800d6d6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d6d8:	9905      	ldr	r1, [sp, #20]
 800d6da:	4648      	mov	r0, r9
 800d6dc:	f001 fe3c 	bl	800f358 <__pow5mult>
 800d6e0:	9005      	str	r0, [sp, #20]
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	f43f ae7e 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d6e8:	2d00      	cmp	r5, #0
 800d6ea:	dd08      	ble.n	800d6fe <_strtod_l+0x756>
 800d6ec:	462a      	mov	r2, r5
 800d6ee:	9905      	ldr	r1, [sp, #20]
 800d6f0:	4648      	mov	r0, r9
 800d6f2:	f001 fe7f 	bl	800f3f4 <__lshift>
 800d6f6:	9005      	str	r0, [sp, #20]
 800d6f8:	2800      	cmp	r0, #0
 800d6fa:	f43f ae73 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d6fe:	2f00      	cmp	r7, #0
 800d700:	dd08      	ble.n	800d714 <_strtod_l+0x76c>
 800d702:	4641      	mov	r1, r8
 800d704:	463a      	mov	r2, r7
 800d706:	4648      	mov	r0, r9
 800d708:	f001 fe74 	bl	800f3f4 <__lshift>
 800d70c:	4680      	mov	r8, r0
 800d70e:	2800      	cmp	r0, #0
 800d710:	f43f ae68 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d714:	9a05      	ldr	r2, [sp, #20]
 800d716:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d718:	4648      	mov	r0, r9
 800d71a:	f001 fed9 	bl	800f4d0 <__mdiff>
 800d71e:	4604      	mov	r4, r0
 800d720:	2800      	cmp	r0, #0
 800d722:	f43f ae5f 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d726:	68c3      	ldr	r3, [r0, #12]
 800d728:	930c      	str	r3, [sp, #48]	; 0x30
 800d72a:	2300      	movs	r3, #0
 800d72c:	60c3      	str	r3, [r0, #12]
 800d72e:	4641      	mov	r1, r8
 800d730:	f001 feb4 	bl	800f49c <__mcmp>
 800d734:	2800      	cmp	r0, #0
 800d736:	da55      	bge.n	800d7e4 <_strtod_l+0x83c>
 800d738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d73a:	b9e3      	cbnz	r3, 800d776 <_strtod_l+0x7ce>
 800d73c:	f1ba 0f00 	cmp.w	sl, #0
 800d740:	d119      	bne.n	800d776 <_strtod_l+0x7ce>
 800d742:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d746:	b9b3      	cbnz	r3, 800d776 <_strtod_l+0x7ce>
 800d748:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d74c:	0d1b      	lsrs	r3, r3, #20
 800d74e:	051b      	lsls	r3, r3, #20
 800d750:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d754:	d90f      	bls.n	800d776 <_strtod_l+0x7ce>
 800d756:	6963      	ldr	r3, [r4, #20]
 800d758:	b913      	cbnz	r3, 800d760 <_strtod_l+0x7b8>
 800d75a:	6923      	ldr	r3, [r4, #16]
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	dd0a      	ble.n	800d776 <_strtod_l+0x7ce>
 800d760:	4621      	mov	r1, r4
 800d762:	2201      	movs	r2, #1
 800d764:	4648      	mov	r0, r9
 800d766:	f001 fe45 	bl	800f3f4 <__lshift>
 800d76a:	4641      	mov	r1, r8
 800d76c:	4604      	mov	r4, r0
 800d76e:	f001 fe95 	bl	800f49c <__mcmp>
 800d772:	2800      	cmp	r0, #0
 800d774:	dc67      	bgt.n	800d846 <_strtod_l+0x89e>
 800d776:	9b04      	ldr	r3, [sp, #16]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d171      	bne.n	800d860 <_strtod_l+0x8b8>
 800d77c:	e63d      	b.n	800d3fa <_strtod_l+0x452>
 800d77e:	f018 0f01 	tst.w	r8, #1
 800d782:	d004      	beq.n	800d78e <_strtod_l+0x7e6>
 800d784:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d788:	f7f2 ff36 	bl	80005f8 <__aeabi_dmul>
 800d78c:	2301      	movs	r3, #1
 800d78e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d792:	3508      	adds	r5, #8
 800d794:	e6e5      	b.n	800d562 <_strtod_l+0x5ba>
 800d796:	f04f 32ff 	mov.w	r2, #4294967295
 800d79a:	fa02 f303 	lsl.w	r3, r2, r3
 800d79e:	ea03 0a0a 	and.w	sl, r3, sl
 800d7a2:	e6ff      	b.n	800d5a4 <_strtod_l+0x5fc>
 800d7a4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800d7a8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800d7ac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800d7b0:	36e2      	adds	r6, #226	; 0xe2
 800d7b2:	fa01 f306 	lsl.w	r3, r1, r6
 800d7b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d7b8:	910f      	str	r1, [sp, #60]	; 0x3c
 800d7ba:	e75d      	b.n	800d678 <_strtod_l+0x6d0>
 800d7bc:	2300      	movs	r3, #0
 800d7be:	930a      	str	r3, [sp, #40]	; 0x28
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7c4:	e758      	b.n	800d678 <_strtod_l+0x6d0>
 800d7c6:	4632      	mov	r2, r6
 800d7c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d7ca:	4648      	mov	r0, r9
 800d7cc:	f001 fe12 	bl	800f3f4 <__lshift>
 800d7d0:	901c      	str	r0, [sp, #112]	; 0x70
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	f47f af7c 	bne.w	800d6d0 <_strtod_l+0x728>
 800d7d8:	e604      	b.n	800d3e4 <_strtod_l+0x43c>
 800d7da:	bf00      	nop
 800d7dc:	0800fc90 	.word	0x0800fc90
 800d7e0:	fffffc02 	.word	0xfffffc02
 800d7e4:	465d      	mov	r5, fp
 800d7e6:	f040 8086 	bne.w	800d8f6 <_strtod_l+0x94e>
 800d7ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d7f0:	b32a      	cbz	r2, 800d83e <_strtod_l+0x896>
 800d7f2:	4aaf      	ldr	r2, [pc, #700]	; (800dab0 <_strtod_l+0xb08>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d153      	bne.n	800d8a0 <_strtod_l+0x8f8>
 800d7f8:	9b04      	ldr	r3, [sp, #16]
 800d7fa:	4650      	mov	r0, sl
 800d7fc:	b1d3      	cbz	r3, 800d834 <_strtod_l+0x88c>
 800d7fe:	4aad      	ldr	r2, [pc, #692]	; (800dab4 <_strtod_l+0xb0c>)
 800d800:	402a      	ands	r2, r5
 800d802:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d806:	f04f 31ff 	mov.w	r1, #4294967295
 800d80a:	d816      	bhi.n	800d83a <_strtod_l+0x892>
 800d80c:	0d12      	lsrs	r2, r2, #20
 800d80e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d812:	fa01 f303 	lsl.w	r3, r1, r3
 800d816:	4298      	cmp	r0, r3
 800d818:	d142      	bne.n	800d8a0 <_strtod_l+0x8f8>
 800d81a:	4ba7      	ldr	r3, [pc, #668]	; (800dab8 <_strtod_l+0xb10>)
 800d81c:	429d      	cmp	r5, r3
 800d81e:	d102      	bne.n	800d826 <_strtod_l+0x87e>
 800d820:	3001      	adds	r0, #1
 800d822:	f43f addf 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d826:	4ba3      	ldr	r3, [pc, #652]	; (800dab4 <_strtod_l+0xb0c>)
 800d828:	402b      	ands	r3, r5
 800d82a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d82e:	f04f 0a00 	mov.w	sl, #0
 800d832:	e7a0      	b.n	800d776 <_strtod_l+0x7ce>
 800d834:	f04f 33ff 	mov.w	r3, #4294967295
 800d838:	e7ed      	b.n	800d816 <_strtod_l+0x86e>
 800d83a:	460b      	mov	r3, r1
 800d83c:	e7eb      	b.n	800d816 <_strtod_l+0x86e>
 800d83e:	bb7b      	cbnz	r3, 800d8a0 <_strtod_l+0x8f8>
 800d840:	f1ba 0f00 	cmp.w	sl, #0
 800d844:	d12c      	bne.n	800d8a0 <_strtod_l+0x8f8>
 800d846:	9904      	ldr	r1, [sp, #16]
 800d848:	4a9a      	ldr	r2, [pc, #616]	; (800dab4 <_strtod_l+0xb0c>)
 800d84a:	465b      	mov	r3, fp
 800d84c:	b1f1      	cbz	r1, 800d88c <_strtod_l+0x8e4>
 800d84e:	ea02 010b 	and.w	r1, r2, fp
 800d852:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d856:	dc19      	bgt.n	800d88c <_strtod_l+0x8e4>
 800d858:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d85c:	f77f ae5b 	ble.w	800d516 <_strtod_l+0x56e>
 800d860:	4a96      	ldr	r2, [pc, #600]	; (800dabc <_strtod_l+0xb14>)
 800d862:	2300      	movs	r3, #0
 800d864:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800d868:	4650      	mov	r0, sl
 800d86a:	4659      	mov	r1, fp
 800d86c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d870:	f7f2 fec2 	bl	80005f8 <__aeabi_dmul>
 800d874:	4682      	mov	sl, r0
 800d876:	468b      	mov	fp, r1
 800d878:	2900      	cmp	r1, #0
 800d87a:	f47f adbe 	bne.w	800d3fa <_strtod_l+0x452>
 800d87e:	2800      	cmp	r0, #0
 800d880:	f47f adbb 	bne.w	800d3fa <_strtod_l+0x452>
 800d884:	2322      	movs	r3, #34	; 0x22
 800d886:	f8c9 3000 	str.w	r3, [r9]
 800d88a:	e5b6      	b.n	800d3fa <_strtod_l+0x452>
 800d88c:	4013      	ands	r3, r2
 800d88e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d892:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d896:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d89a:	f04f 3aff 	mov.w	sl, #4294967295
 800d89e:	e76a      	b.n	800d776 <_strtod_l+0x7ce>
 800d8a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8a2:	b193      	cbz	r3, 800d8ca <_strtod_l+0x922>
 800d8a4:	422b      	tst	r3, r5
 800d8a6:	f43f af66 	beq.w	800d776 <_strtod_l+0x7ce>
 800d8aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d8ac:	9a04      	ldr	r2, [sp, #16]
 800d8ae:	4650      	mov	r0, sl
 800d8b0:	4659      	mov	r1, fp
 800d8b2:	b173      	cbz	r3, 800d8d2 <_strtod_l+0x92a>
 800d8b4:	f7ff fb5c 	bl	800cf70 <sulp>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d8c0:	f7f2 fce4 	bl	800028c <__adddf3>
 800d8c4:	4682      	mov	sl, r0
 800d8c6:	468b      	mov	fp, r1
 800d8c8:	e755      	b.n	800d776 <_strtod_l+0x7ce>
 800d8ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8cc:	ea13 0f0a 	tst.w	r3, sl
 800d8d0:	e7e9      	b.n	800d8a6 <_strtod_l+0x8fe>
 800d8d2:	f7ff fb4d 	bl	800cf70 <sulp>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	460b      	mov	r3, r1
 800d8da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d8de:	f7f2 fcd3 	bl	8000288 <__aeabi_dsub>
 800d8e2:	2200      	movs	r2, #0
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	4682      	mov	sl, r0
 800d8e8:	468b      	mov	fp, r1
 800d8ea:	f7f3 f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 800d8ee:	2800      	cmp	r0, #0
 800d8f0:	f47f ae11 	bne.w	800d516 <_strtod_l+0x56e>
 800d8f4:	e73f      	b.n	800d776 <_strtod_l+0x7ce>
 800d8f6:	4641      	mov	r1, r8
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f001 ff0c 	bl	800f716 <__ratio>
 800d8fe:	ec57 6b10 	vmov	r6, r7, d0
 800d902:	2200      	movs	r2, #0
 800d904:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d908:	ee10 0a10 	vmov	r0, s0
 800d90c:	4639      	mov	r1, r7
 800d90e:	f7f3 f8ef 	bl	8000af0 <__aeabi_dcmple>
 800d912:	2800      	cmp	r0, #0
 800d914:	d077      	beq.n	800da06 <_strtod_l+0xa5e>
 800d916:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d04a      	beq.n	800d9b2 <_strtod_l+0xa0a>
 800d91c:	4b68      	ldr	r3, [pc, #416]	; (800dac0 <_strtod_l+0xb18>)
 800d91e:	2200      	movs	r2, #0
 800d920:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d924:	4f66      	ldr	r7, [pc, #408]	; (800dac0 <_strtod_l+0xb18>)
 800d926:	2600      	movs	r6, #0
 800d928:	4b62      	ldr	r3, [pc, #392]	; (800dab4 <_strtod_l+0xb0c>)
 800d92a:	402b      	ands	r3, r5
 800d92c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d92e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d930:	4b64      	ldr	r3, [pc, #400]	; (800dac4 <_strtod_l+0xb1c>)
 800d932:	429a      	cmp	r2, r3
 800d934:	f040 80ce 	bne.w	800dad4 <_strtod_l+0xb2c>
 800d938:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d93c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d940:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800d944:	ec4b ab10 	vmov	d0, sl, fp
 800d948:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800d94c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800d950:	f001 fe1c 	bl	800f58c <__ulp>
 800d954:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d958:	ec53 2b10 	vmov	r2, r3, d0
 800d95c:	f7f2 fe4c 	bl	80005f8 <__aeabi_dmul>
 800d960:	4652      	mov	r2, sl
 800d962:	465b      	mov	r3, fp
 800d964:	f7f2 fc92 	bl	800028c <__adddf3>
 800d968:	460b      	mov	r3, r1
 800d96a:	4952      	ldr	r1, [pc, #328]	; (800dab4 <_strtod_l+0xb0c>)
 800d96c:	4a56      	ldr	r2, [pc, #344]	; (800dac8 <_strtod_l+0xb20>)
 800d96e:	4019      	ands	r1, r3
 800d970:	4291      	cmp	r1, r2
 800d972:	4682      	mov	sl, r0
 800d974:	d95b      	bls.n	800da2e <_strtod_l+0xa86>
 800d976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d978:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d103      	bne.n	800d988 <_strtod_l+0x9e0>
 800d980:	9b08      	ldr	r3, [sp, #32]
 800d982:	3301      	adds	r3, #1
 800d984:	f43f ad2e 	beq.w	800d3e4 <_strtod_l+0x43c>
 800d988:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800dab8 <_strtod_l+0xb10>
 800d98c:	f04f 3aff 	mov.w	sl, #4294967295
 800d990:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d992:	4648      	mov	r0, r9
 800d994:	f001 fb62 	bl	800f05c <_Bfree>
 800d998:	9905      	ldr	r1, [sp, #20]
 800d99a:	4648      	mov	r0, r9
 800d99c:	f001 fb5e 	bl	800f05c <_Bfree>
 800d9a0:	4641      	mov	r1, r8
 800d9a2:	4648      	mov	r0, r9
 800d9a4:	f001 fb5a 	bl	800f05c <_Bfree>
 800d9a8:	4621      	mov	r1, r4
 800d9aa:	4648      	mov	r0, r9
 800d9ac:	f001 fb56 	bl	800f05c <_Bfree>
 800d9b0:	e619      	b.n	800d5e6 <_strtod_l+0x63e>
 800d9b2:	f1ba 0f00 	cmp.w	sl, #0
 800d9b6:	d11a      	bne.n	800d9ee <_strtod_l+0xa46>
 800d9b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d9bc:	b9eb      	cbnz	r3, 800d9fa <_strtod_l+0xa52>
 800d9be:	2200      	movs	r2, #0
 800d9c0:	4b3f      	ldr	r3, [pc, #252]	; (800dac0 <_strtod_l+0xb18>)
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	4639      	mov	r1, r7
 800d9c6:	f7f3 f889 	bl	8000adc <__aeabi_dcmplt>
 800d9ca:	b9c8      	cbnz	r0, 800da00 <_strtod_l+0xa58>
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	4639      	mov	r1, r7
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	4b3e      	ldr	r3, [pc, #248]	; (800dacc <_strtod_l+0xb24>)
 800d9d4:	f7f2 fe10 	bl	80005f8 <__aeabi_dmul>
 800d9d8:	4606      	mov	r6, r0
 800d9da:	460f      	mov	r7, r1
 800d9dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800d9e0:	9618      	str	r6, [sp, #96]	; 0x60
 800d9e2:	9319      	str	r3, [sp, #100]	; 0x64
 800d9e4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800d9e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800d9ec:	e79c      	b.n	800d928 <_strtod_l+0x980>
 800d9ee:	f1ba 0f01 	cmp.w	sl, #1
 800d9f2:	d102      	bne.n	800d9fa <_strtod_l+0xa52>
 800d9f4:	2d00      	cmp	r5, #0
 800d9f6:	f43f ad8e 	beq.w	800d516 <_strtod_l+0x56e>
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	4b34      	ldr	r3, [pc, #208]	; (800dad0 <_strtod_l+0xb28>)
 800d9fe:	e78f      	b.n	800d920 <_strtod_l+0x978>
 800da00:	2600      	movs	r6, #0
 800da02:	4f32      	ldr	r7, [pc, #200]	; (800dacc <_strtod_l+0xb24>)
 800da04:	e7ea      	b.n	800d9dc <_strtod_l+0xa34>
 800da06:	4b31      	ldr	r3, [pc, #196]	; (800dacc <_strtod_l+0xb24>)
 800da08:	4630      	mov	r0, r6
 800da0a:	4639      	mov	r1, r7
 800da0c:	2200      	movs	r2, #0
 800da0e:	f7f2 fdf3 	bl	80005f8 <__aeabi_dmul>
 800da12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da14:	4606      	mov	r6, r0
 800da16:	460f      	mov	r7, r1
 800da18:	b933      	cbnz	r3, 800da28 <_strtod_l+0xa80>
 800da1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da1e:	9010      	str	r0, [sp, #64]	; 0x40
 800da20:	9311      	str	r3, [sp, #68]	; 0x44
 800da22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800da26:	e7df      	b.n	800d9e8 <_strtod_l+0xa40>
 800da28:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800da2c:	e7f9      	b.n	800da22 <_strtod_l+0xa7a>
 800da2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800da32:	9b04      	ldr	r3, [sp, #16]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d1ab      	bne.n	800d990 <_strtod_l+0x9e8>
 800da38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800da3c:	0d1b      	lsrs	r3, r3, #20
 800da3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800da40:	051b      	lsls	r3, r3, #20
 800da42:	429a      	cmp	r2, r3
 800da44:	465d      	mov	r5, fp
 800da46:	d1a3      	bne.n	800d990 <_strtod_l+0x9e8>
 800da48:	4639      	mov	r1, r7
 800da4a:	4630      	mov	r0, r6
 800da4c:	f7f3 f884 	bl	8000b58 <__aeabi_d2iz>
 800da50:	f7f2 fd68 	bl	8000524 <__aeabi_i2d>
 800da54:	460b      	mov	r3, r1
 800da56:	4602      	mov	r2, r0
 800da58:	4639      	mov	r1, r7
 800da5a:	4630      	mov	r0, r6
 800da5c:	f7f2 fc14 	bl	8000288 <__aeabi_dsub>
 800da60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da62:	4606      	mov	r6, r0
 800da64:	460f      	mov	r7, r1
 800da66:	b933      	cbnz	r3, 800da76 <_strtod_l+0xace>
 800da68:	f1ba 0f00 	cmp.w	sl, #0
 800da6c:	d103      	bne.n	800da76 <_strtod_l+0xace>
 800da6e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800da72:	2d00      	cmp	r5, #0
 800da74:	d06d      	beq.n	800db52 <_strtod_l+0xbaa>
 800da76:	a30a      	add	r3, pc, #40	; (adr r3, 800daa0 <_strtod_l+0xaf8>)
 800da78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da7c:	4630      	mov	r0, r6
 800da7e:	4639      	mov	r1, r7
 800da80:	f7f3 f82c 	bl	8000adc <__aeabi_dcmplt>
 800da84:	2800      	cmp	r0, #0
 800da86:	f47f acb8 	bne.w	800d3fa <_strtod_l+0x452>
 800da8a:	a307      	add	r3, pc, #28	; (adr r3, 800daa8 <_strtod_l+0xb00>)
 800da8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da90:	4630      	mov	r0, r6
 800da92:	4639      	mov	r1, r7
 800da94:	f7f3 f840 	bl	8000b18 <__aeabi_dcmpgt>
 800da98:	2800      	cmp	r0, #0
 800da9a:	f43f af79 	beq.w	800d990 <_strtod_l+0x9e8>
 800da9e:	e4ac      	b.n	800d3fa <_strtod_l+0x452>
 800daa0:	94a03595 	.word	0x94a03595
 800daa4:	3fdfffff 	.word	0x3fdfffff
 800daa8:	35afe535 	.word	0x35afe535
 800daac:	3fe00000 	.word	0x3fe00000
 800dab0:	000fffff 	.word	0x000fffff
 800dab4:	7ff00000 	.word	0x7ff00000
 800dab8:	7fefffff 	.word	0x7fefffff
 800dabc:	39500000 	.word	0x39500000
 800dac0:	3ff00000 	.word	0x3ff00000
 800dac4:	7fe00000 	.word	0x7fe00000
 800dac8:	7c9fffff 	.word	0x7c9fffff
 800dacc:	3fe00000 	.word	0x3fe00000
 800dad0:	bff00000 	.word	0xbff00000
 800dad4:	9b04      	ldr	r3, [sp, #16]
 800dad6:	b333      	cbz	r3, 800db26 <_strtod_l+0xb7e>
 800dad8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dada:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dade:	d822      	bhi.n	800db26 <_strtod_l+0xb7e>
 800dae0:	a327      	add	r3, pc, #156	; (adr r3, 800db80 <_strtod_l+0xbd8>)
 800dae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae6:	4630      	mov	r0, r6
 800dae8:	4639      	mov	r1, r7
 800daea:	f7f3 f801 	bl	8000af0 <__aeabi_dcmple>
 800daee:	b1a0      	cbz	r0, 800db1a <_strtod_l+0xb72>
 800daf0:	4639      	mov	r1, r7
 800daf2:	4630      	mov	r0, r6
 800daf4:	f7f3 f858 	bl	8000ba8 <__aeabi_d2uiz>
 800daf8:	2800      	cmp	r0, #0
 800dafa:	bf08      	it	eq
 800dafc:	2001      	moveq	r0, #1
 800dafe:	f7f2 fd01 	bl	8000504 <__aeabi_ui2d>
 800db02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db04:	4606      	mov	r6, r0
 800db06:	460f      	mov	r7, r1
 800db08:	bb03      	cbnz	r3, 800db4c <_strtod_l+0xba4>
 800db0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800db0e:	9012      	str	r0, [sp, #72]	; 0x48
 800db10:	9313      	str	r3, [sp, #76]	; 0x4c
 800db12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800db16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800db1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800db1e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800db22:	1a9b      	subs	r3, r3, r2
 800db24:	930b      	str	r3, [sp, #44]	; 0x2c
 800db26:	ed9d 0b08 	vldr	d0, [sp, #32]
 800db2a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800db2e:	f001 fd2d 	bl	800f58c <__ulp>
 800db32:	4650      	mov	r0, sl
 800db34:	ec53 2b10 	vmov	r2, r3, d0
 800db38:	4659      	mov	r1, fp
 800db3a:	f7f2 fd5d 	bl	80005f8 <__aeabi_dmul>
 800db3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800db42:	f7f2 fba3 	bl	800028c <__adddf3>
 800db46:	4682      	mov	sl, r0
 800db48:	468b      	mov	fp, r1
 800db4a:	e772      	b.n	800da32 <_strtod_l+0xa8a>
 800db4c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800db50:	e7df      	b.n	800db12 <_strtod_l+0xb6a>
 800db52:	a30d      	add	r3, pc, #52	; (adr r3, 800db88 <_strtod_l+0xbe0>)
 800db54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db58:	f7f2 ffc0 	bl	8000adc <__aeabi_dcmplt>
 800db5c:	e79c      	b.n	800da98 <_strtod_l+0xaf0>
 800db5e:	2300      	movs	r3, #0
 800db60:	930d      	str	r3, [sp, #52]	; 0x34
 800db62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800db64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db66:	6013      	str	r3, [r2, #0]
 800db68:	f7ff ba61 	b.w	800d02e <_strtod_l+0x86>
 800db6c:	2b65      	cmp	r3, #101	; 0x65
 800db6e:	f04f 0200 	mov.w	r2, #0
 800db72:	f43f ab4e 	beq.w	800d212 <_strtod_l+0x26a>
 800db76:	2101      	movs	r1, #1
 800db78:	4614      	mov	r4, r2
 800db7a:	9104      	str	r1, [sp, #16]
 800db7c:	f7ff bacb 	b.w	800d116 <_strtod_l+0x16e>
 800db80:	ffc00000 	.word	0xffc00000
 800db84:	41dfffff 	.word	0x41dfffff
 800db88:	94a03595 	.word	0x94a03595
 800db8c:	3fcfffff 	.word	0x3fcfffff

0800db90 <_strtod_r>:
 800db90:	4b05      	ldr	r3, [pc, #20]	; (800dba8 <_strtod_r+0x18>)
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	b410      	push	{r4}
 800db96:	6a1b      	ldr	r3, [r3, #32]
 800db98:	4c04      	ldr	r4, [pc, #16]	; (800dbac <_strtod_r+0x1c>)
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	bf08      	it	eq
 800db9e:	4623      	moveq	r3, r4
 800dba0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dba4:	f7ff ba00 	b.w	800cfa8 <_strtod_l>
 800dba8:	20000180 	.word	0x20000180
 800dbac:	200001e4 	.word	0x200001e4

0800dbb0 <_strtol_l.isra.0>:
 800dbb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbb4:	4680      	mov	r8, r0
 800dbb6:	4689      	mov	r9, r1
 800dbb8:	4692      	mov	sl, r2
 800dbba:	461e      	mov	r6, r3
 800dbbc:	460f      	mov	r7, r1
 800dbbe:	463d      	mov	r5, r7
 800dbc0:	9808      	ldr	r0, [sp, #32]
 800dbc2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dbc6:	f001 f9ed 	bl	800efa4 <__locale_ctype_ptr_l>
 800dbca:	4420      	add	r0, r4
 800dbcc:	7843      	ldrb	r3, [r0, #1]
 800dbce:	f013 0308 	ands.w	r3, r3, #8
 800dbd2:	d132      	bne.n	800dc3a <_strtol_l.isra.0+0x8a>
 800dbd4:	2c2d      	cmp	r4, #45	; 0x2d
 800dbd6:	d132      	bne.n	800dc3e <_strtol_l.isra.0+0x8e>
 800dbd8:	787c      	ldrb	r4, [r7, #1]
 800dbda:	1cbd      	adds	r5, r7, #2
 800dbdc:	2201      	movs	r2, #1
 800dbde:	2e00      	cmp	r6, #0
 800dbe0:	d05d      	beq.n	800dc9e <_strtol_l.isra.0+0xee>
 800dbe2:	2e10      	cmp	r6, #16
 800dbe4:	d109      	bne.n	800dbfa <_strtol_l.isra.0+0x4a>
 800dbe6:	2c30      	cmp	r4, #48	; 0x30
 800dbe8:	d107      	bne.n	800dbfa <_strtol_l.isra.0+0x4a>
 800dbea:	782b      	ldrb	r3, [r5, #0]
 800dbec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800dbf0:	2b58      	cmp	r3, #88	; 0x58
 800dbf2:	d14f      	bne.n	800dc94 <_strtol_l.isra.0+0xe4>
 800dbf4:	786c      	ldrb	r4, [r5, #1]
 800dbf6:	2610      	movs	r6, #16
 800dbf8:	3502      	adds	r5, #2
 800dbfa:	2a00      	cmp	r2, #0
 800dbfc:	bf14      	ite	ne
 800dbfe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800dc02:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800dc06:	2700      	movs	r7, #0
 800dc08:	fbb1 fcf6 	udiv	ip, r1, r6
 800dc0c:	4638      	mov	r0, r7
 800dc0e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800dc12:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800dc16:	2b09      	cmp	r3, #9
 800dc18:	d817      	bhi.n	800dc4a <_strtol_l.isra.0+0x9a>
 800dc1a:	461c      	mov	r4, r3
 800dc1c:	42a6      	cmp	r6, r4
 800dc1e:	dd23      	ble.n	800dc68 <_strtol_l.isra.0+0xb8>
 800dc20:	1c7b      	adds	r3, r7, #1
 800dc22:	d007      	beq.n	800dc34 <_strtol_l.isra.0+0x84>
 800dc24:	4584      	cmp	ip, r0
 800dc26:	d31c      	bcc.n	800dc62 <_strtol_l.isra.0+0xb2>
 800dc28:	d101      	bne.n	800dc2e <_strtol_l.isra.0+0x7e>
 800dc2a:	45a6      	cmp	lr, r4
 800dc2c:	db19      	blt.n	800dc62 <_strtol_l.isra.0+0xb2>
 800dc2e:	fb00 4006 	mla	r0, r0, r6, r4
 800dc32:	2701      	movs	r7, #1
 800dc34:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dc38:	e7eb      	b.n	800dc12 <_strtol_l.isra.0+0x62>
 800dc3a:	462f      	mov	r7, r5
 800dc3c:	e7bf      	b.n	800dbbe <_strtol_l.isra.0+0xe>
 800dc3e:	2c2b      	cmp	r4, #43	; 0x2b
 800dc40:	bf04      	itt	eq
 800dc42:	1cbd      	addeq	r5, r7, #2
 800dc44:	787c      	ldrbeq	r4, [r7, #1]
 800dc46:	461a      	mov	r2, r3
 800dc48:	e7c9      	b.n	800dbde <_strtol_l.isra.0+0x2e>
 800dc4a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800dc4e:	2b19      	cmp	r3, #25
 800dc50:	d801      	bhi.n	800dc56 <_strtol_l.isra.0+0xa6>
 800dc52:	3c37      	subs	r4, #55	; 0x37
 800dc54:	e7e2      	b.n	800dc1c <_strtol_l.isra.0+0x6c>
 800dc56:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800dc5a:	2b19      	cmp	r3, #25
 800dc5c:	d804      	bhi.n	800dc68 <_strtol_l.isra.0+0xb8>
 800dc5e:	3c57      	subs	r4, #87	; 0x57
 800dc60:	e7dc      	b.n	800dc1c <_strtol_l.isra.0+0x6c>
 800dc62:	f04f 37ff 	mov.w	r7, #4294967295
 800dc66:	e7e5      	b.n	800dc34 <_strtol_l.isra.0+0x84>
 800dc68:	1c7b      	adds	r3, r7, #1
 800dc6a:	d108      	bne.n	800dc7e <_strtol_l.isra.0+0xce>
 800dc6c:	2322      	movs	r3, #34	; 0x22
 800dc6e:	f8c8 3000 	str.w	r3, [r8]
 800dc72:	4608      	mov	r0, r1
 800dc74:	f1ba 0f00 	cmp.w	sl, #0
 800dc78:	d107      	bne.n	800dc8a <_strtol_l.isra.0+0xda>
 800dc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc7e:	b102      	cbz	r2, 800dc82 <_strtol_l.isra.0+0xd2>
 800dc80:	4240      	negs	r0, r0
 800dc82:	f1ba 0f00 	cmp.w	sl, #0
 800dc86:	d0f8      	beq.n	800dc7a <_strtol_l.isra.0+0xca>
 800dc88:	b10f      	cbz	r7, 800dc8e <_strtol_l.isra.0+0xde>
 800dc8a:	f105 39ff 	add.w	r9, r5, #4294967295
 800dc8e:	f8ca 9000 	str.w	r9, [sl]
 800dc92:	e7f2      	b.n	800dc7a <_strtol_l.isra.0+0xca>
 800dc94:	2430      	movs	r4, #48	; 0x30
 800dc96:	2e00      	cmp	r6, #0
 800dc98:	d1af      	bne.n	800dbfa <_strtol_l.isra.0+0x4a>
 800dc9a:	2608      	movs	r6, #8
 800dc9c:	e7ad      	b.n	800dbfa <_strtol_l.isra.0+0x4a>
 800dc9e:	2c30      	cmp	r4, #48	; 0x30
 800dca0:	d0a3      	beq.n	800dbea <_strtol_l.isra.0+0x3a>
 800dca2:	260a      	movs	r6, #10
 800dca4:	e7a9      	b.n	800dbfa <_strtol_l.isra.0+0x4a>
	...

0800dca8 <_strtol_r>:
 800dca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dcaa:	4c06      	ldr	r4, [pc, #24]	; (800dcc4 <_strtol_r+0x1c>)
 800dcac:	4d06      	ldr	r5, [pc, #24]	; (800dcc8 <_strtol_r+0x20>)
 800dcae:	6824      	ldr	r4, [r4, #0]
 800dcb0:	6a24      	ldr	r4, [r4, #32]
 800dcb2:	2c00      	cmp	r4, #0
 800dcb4:	bf08      	it	eq
 800dcb6:	462c      	moveq	r4, r5
 800dcb8:	9400      	str	r4, [sp, #0]
 800dcba:	f7ff ff79 	bl	800dbb0 <_strtol_l.isra.0>
 800dcbe:	b003      	add	sp, #12
 800dcc0:	bd30      	pop	{r4, r5, pc}
 800dcc2:	bf00      	nop
 800dcc4:	20000180 	.word	0x20000180
 800dcc8:	200001e4 	.word	0x200001e4

0800dccc <quorem>:
 800dccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dcd0:	6903      	ldr	r3, [r0, #16]
 800dcd2:	690c      	ldr	r4, [r1, #16]
 800dcd4:	42a3      	cmp	r3, r4
 800dcd6:	4680      	mov	r8, r0
 800dcd8:	f2c0 8082 	blt.w	800dde0 <quorem+0x114>
 800dcdc:	3c01      	subs	r4, #1
 800dcde:	f101 0714 	add.w	r7, r1, #20
 800dce2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800dce6:	f100 0614 	add.w	r6, r0, #20
 800dcea:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800dcee:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800dcf2:	eb06 030c 	add.w	r3, r6, ip
 800dcf6:	3501      	adds	r5, #1
 800dcf8:	eb07 090c 	add.w	r9, r7, ip
 800dcfc:	9301      	str	r3, [sp, #4]
 800dcfe:	fbb0 f5f5 	udiv	r5, r0, r5
 800dd02:	b395      	cbz	r5, 800dd6a <quorem+0x9e>
 800dd04:	f04f 0a00 	mov.w	sl, #0
 800dd08:	4638      	mov	r0, r7
 800dd0a:	46b6      	mov	lr, r6
 800dd0c:	46d3      	mov	fp, sl
 800dd0e:	f850 2b04 	ldr.w	r2, [r0], #4
 800dd12:	b293      	uxth	r3, r2
 800dd14:	fb05 a303 	mla	r3, r5, r3, sl
 800dd18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dd1c:	b29b      	uxth	r3, r3
 800dd1e:	ebab 0303 	sub.w	r3, fp, r3
 800dd22:	0c12      	lsrs	r2, r2, #16
 800dd24:	f8de b000 	ldr.w	fp, [lr]
 800dd28:	fb05 a202 	mla	r2, r5, r2, sl
 800dd2c:	fa13 f38b 	uxtah	r3, r3, fp
 800dd30:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800dd34:	fa1f fb82 	uxth.w	fp, r2
 800dd38:	f8de 2000 	ldr.w	r2, [lr]
 800dd3c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800dd40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd4a:	4581      	cmp	r9, r0
 800dd4c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800dd50:	f84e 3b04 	str.w	r3, [lr], #4
 800dd54:	d2db      	bcs.n	800dd0e <quorem+0x42>
 800dd56:	f856 300c 	ldr.w	r3, [r6, ip]
 800dd5a:	b933      	cbnz	r3, 800dd6a <quorem+0x9e>
 800dd5c:	9b01      	ldr	r3, [sp, #4]
 800dd5e:	3b04      	subs	r3, #4
 800dd60:	429e      	cmp	r6, r3
 800dd62:	461a      	mov	r2, r3
 800dd64:	d330      	bcc.n	800ddc8 <quorem+0xfc>
 800dd66:	f8c8 4010 	str.w	r4, [r8, #16]
 800dd6a:	4640      	mov	r0, r8
 800dd6c:	f001 fb96 	bl	800f49c <__mcmp>
 800dd70:	2800      	cmp	r0, #0
 800dd72:	db25      	blt.n	800ddc0 <quorem+0xf4>
 800dd74:	3501      	adds	r5, #1
 800dd76:	4630      	mov	r0, r6
 800dd78:	f04f 0c00 	mov.w	ip, #0
 800dd7c:	f857 2b04 	ldr.w	r2, [r7], #4
 800dd80:	f8d0 e000 	ldr.w	lr, [r0]
 800dd84:	b293      	uxth	r3, r2
 800dd86:	ebac 0303 	sub.w	r3, ip, r3
 800dd8a:	0c12      	lsrs	r2, r2, #16
 800dd8c:	fa13 f38e 	uxtah	r3, r3, lr
 800dd90:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd9e:	45b9      	cmp	r9, r7
 800dda0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dda4:	f840 3b04 	str.w	r3, [r0], #4
 800dda8:	d2e8      	bcs.n	800dd7c <quorem+0xb0>
 800ddaa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ddae:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ddb2:	b92a      	cbnz	r2, 800ddc0 <quorem+0xf4>
 800ddb4:	3b04      	subs	r3, #4
 800ddb6:	429e      	cmp	r6, r3
 800ddb8:	461a      	mov	r2, r3
 800ddba:	d30b      	bcc.n	800ddd4 <quorem+0x108>
 800ddbc:	f8c8 4010 	str.w	r4, [r8, #16]
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	b003      	add	sp, #12
 800ddc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc8:	6812      	ldr	r2, [r2, #0]
 800ddca:	3b04      	subs	r3, #4
 800ddcc:	2a00      	cmp	r2, #0
 800ddce:	d1ca      	bne.n	800dd66 <quorem+0x9a>
 800ddd0:	3c01      	subs	r4, #1
 800ddd2:	e7c5      	b.n	800dd60 <quorem+0x94>
 800ddd4:	6812      	ldr	r2, [r2, #0]
 800ddd6:	3b04      	subs	r3, #4
 800ddd8:	2a00      	cmp	r2, #0
 800ddda:	d1ef      	bne.n	800ddbc <quorem+0xf0>
 800dddc:	3c01      	subs	r4, #1
 800ddde:	e7ea      	b.n	800ddb6 <quorem+0xea>
 800dde0:	2000      	movs	r0, #0
 800dde2:	e7ee      	b.n	800ddc2 <quorem+0xf6>
 800dde4:	0000      	movs	r0, r0
	...

0800dde8 <_dtoa_r>:
 800dde8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddec:	ec57 6b10 	vmov	r6, r7, d0
 800ddf0:	b097      	sub	sp, #92	; 0x5c
 800ddf2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddf4:	9106      	str	r1, [sp, #24]
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	920b      	str	r2, [sp, #44]	; 0x2c
 800ddfa:	9312      	str	r3, [sp, #72]	; 0x48
 800ddfc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800de00:	e9cd 6700 	strd	r6, r7, [sp]
 800de04:	b93d      	cbnz	r5, 800de16 <_dtoa_r+0x2e>
 800de06:	2010      	movs	r0, #16
 800de08:	f7fe f972 	bl	800c0f0 <malloc>
 800de0c:	6260      	str	r0, [r4, #36]	; 0x24
 800de0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800de12:	6005      	str	r5, [r0, #0]
 800de14:	60c5      	str	r5, [r0, #12]
 800de16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de18:	6819      	ldr	r1, [r3, #0]
 800de1a:	b151      	cbz	r1, 800de32 <_dtoa_r+0x4a>
 800de1c:	685a      	ldr	r2, [r3, #4]
 800de1e:	604a      	str	r2, [r1, #4]
 800de20:	2301      	movs	r3, #1
 800de22:	4093      	lsls	r3, r2
 800de24:	608b      	str	r3, [r1, #8]
 800de26:	4620      	mov	r0, r4
 800de28:	f001 f918 	bl	800f05c <_Bfree>
 800de2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de2e:	2200      	movs	r2, #0
 800de30:	601a      	str	r2, [r3, #0]
 800de32:	1e3b      	subs	r3, r7, #0
 800de34:	bfbb      	ittet	lt
 800de36:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800de3a:	9301      	strlt	r3, [sp, #4]
 800de3c:	2300      	movge	r3, #0
 800de3e:	2201      	movlt	r2, #1
 800de40:	bfac      	ite	ge
 800de42:	f8c8 3000 	strge.w	r3, [r8]
 800de46:	f8c8 2000 	strlt.w	r2, [r8]
 800de4a:	4baf      	ldr	r3, [pc, #700]	; (800e108 <_dtoa_r+0x320>)
 800de4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800de50:	ea33 0308 	bics.w	r3, r3, r8
 800de54:	d114      	bne.n	800de80 <_dtoa_r+0x98>
 800de56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de58:	f242 730f 	movw	r3, #9999	; 0x270f
 800de5c:	6013      	str	r3, [r2, #0]
 800de5e:	9b00      	ldr	r3, [sp, #0]
 800de60:	b923      	cbnz	r3, 800de6c <_dtoa_r+0x84>
 800de62:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800de66:	2800      	cmp	r0, #0
 800de68:	f000 8542 	beq.w	800e8f0 <_dtoa_r+0xb08>
 800de6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de6e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e11c <_dtoa_r+0x334>
 800de72:	2b00      	cmp	r3, #0
 800de74:	f000 8544 	beq.w	800e900 <_dtoa_r+0xb18>
 800de78:	f10b 0303 	add.w	r3, fp, #3
 800de7c:	f000 bd3e 	b.w	800e8fc <_dtoa_r+0xb14>
 800de80:	e9dd 6700 	ldrd	r6, r7, [sp]
 800de84:	2200      	movs	r2, #0
 800de86:	2300      	movs	r3, #0
 800de88:	4630      	mov	r0, r6
 800de8a:	4639      	mov	r1, r7
 800de8c:	f7f2 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 800de90:	4681      	mov	r9, r0
 800de92:	b168      	cbz	r0, 800deb0 <_dtoa_r+0xc8>
 800de94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de96:	2301      	movs	r3, #1
 800de98:	6013      	str	r3, [r2, #0]
 800de9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	f000 8524 	beq.w	800e8ea <_dtoa_r+0xb02>
 800dea2:	4b9a      	ldr	r3, [pc, #616]	; (800e10c <_dtoa_r+0x324>)
 800dea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dea6:	f103 3bff 	add.w	fp, r3, #4294967295
 800deaa:	6013      	str	r3, [r2, #0]
 800deac:	f000 bd28 	b.w	800e900 <_dtoa_r+0xb18>
 800deb0:	aa14      	add	r2, sp, #80	; 0x50
 800deb2:	a915      	add	r1, sp, #84	; 0x54
 800deb4:	ec47 6b10 	vmov	d0, r6, r7
 800deb8:	4620      	mov	r0, r4
 800deba:	f001 fbdd 	bl	800f678 <__d2b>
 800debe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800dec2:	9004      	str	r0, [sp, #16]
 800dec4:	2d00      	cmp	r5, #0
 800dec6:	d07c      	beq.n	800dfc2 <_dtoa_r+0x1da>
 800dec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800decc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ded0:	46b2      	mov	sl, r6
 800ded2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ded6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800deda:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800dede:	2200      	movs	r2, #0
 800dee0:	4b8b      	ldr	r3, [pc, #556]	; (800e110 <_dtoa_r+0x328>)
 800dee2:	4650      	mov	r0, sl
 800dee4:	4659      	mov	r1, fp
 800dee6:	f7f2 f9cf 	bl	8000288 <__aeabi_dsub>
 800deea:	a381      	add	r3, pc, #516	; (adr r3, 800e0f0 <_dtoa_r+0x308>)
 800deec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def0:	f7f2 fb82 	bl	80005f8 <__aeabi_dmul>
 800def4:	a380      	add	r3, pc, #512	; (adr r3, 800e0f8 <_dtoa_r+0x310>)
 800def6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800defa:	f7f2 f9c7 	bl	800028c <__adddf3>
 800defe:	4606      	mov	r6, r0
 800df00:	4628      	mov	r0, r5
 800df02:	460f      	mov	r7, r1
 800df04:	f7f2 fb0e 	bl	8000524 <__aeabi_i2d>
 800df08:	a37d      	add	r3, pc, #500	; (adr r3, 800e100 <_dtoa_r+0x318>)
 800df0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df0e:	f7f2 fb73 	bl	80005f8 <__aeabi_dmul>
 800df12:	4602      	mov	r2, r0
 800df14:	460b      	mov	r3, r1
 800df16:	4630      	mov	r0, r6
 800df18:	4639      	mov	r1, r7
 800df1a:	f7f2 f9b7 	bl	800028c <__adddf3>
 800df1e:	4606      	mov	r6, r0
 800df20:	460f      	mov	r7, r1
 800df22:	f7f2 fe19 	bl	8000b58 <__aeabi_d2iz>
 800df26:	2200      	movs	r2, #0
 800df28:	4682      	mov	sl, r0
 800df2a:	2300      	movs	r3, #0
 800df2c:	4630      	mov	r0, r6
 800df2e:	4639      	mov	r1, r7
 800df30:	f7f2 fdd4 	bl	8000adc <__aeabi_dcmplt>
 800df34:	b148      	cbz	r0, 800df4a <_dtoa_r+0x162>
 800df36:	4650      	mov	r0, sl
 800df38:	f7f2 faf4 	bl	8000524 <__aeabi_i2d>
 800df3c:	4632      	mov	r2, r6
 800df3e:	463b      	mov	r3, r7
 800df40:	f7f2 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800df44:	b908      	cbnz	r0, 800df4a <_dtoa_r+0x162>
 800df46:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df4a:	f1ba 0f16 	cmp.w	sl, #22
 800df4e:	d859      	bhi.n	800e004 <_dtoa_r+0x21c>
 800df50:	4970      	ldr	r1, [pc, #448]	; (800e114 <_dtoa_r+0x32c>)
 800df52:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800df56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800df5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df5e:	f7f2 fddb 	bl	8000b18 <__aeabi_dcmpgt>
 800df62:	2800      	cmp	r0, #0
 800df64:	d050      	beq.n	800e008 <_dtoa_r+0x220>
 800df66:	f10a 3aff 	add.w	sl, sl, #4294967295
 800df6a:	2300      	movs	r3, #0
 800df6c:	930f      	str	r3, [sp, #60]	; 0x3c
 800df6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df70:	1b5d      	subs	r5, r3, r5
 800df72:	f1b5 0801 	subs.w	r8, r5, #1
 800df76:	bf49      	itett	mi
 800df78:	f1c5 0301 	rsbmi	r3, r5, #1
 800df7c:	2300      	movpl	r3, #0
 800df7e:	9305      	strmi	r3, [sp, #20]
 800df80:	f04f 0800 	movmi.w	r8, #0
 800df84:	bf58      	it	pl
 800df86:	9305      	strpl	r3, [sp, #20]
 800df88:	f1ba 0f00 	cmp.w	sl, #0
 800df8c:	db3e      	blt.n	800e00c <_dtoa_r+0x224>
 800df8e:	2300      	movs	r3, #0
 800df90:	44d0      	add	r8, sl
 800df92:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800df96:	9307      	str	r3, [sp, #28]
 800df98:	9b06      	ldr	r3, [sp, #24]
 800df9a:	2b09      	cmp	r3, #9
 800df9c:	f200 8090 	bhi.w	800e0c0 <_dtoa_r+0x2d8>
 800dfa0:	2b05      	cmp	r3, #5
 800dfa2:	bfc4      	itt	gt
 800dfa4:	3b04      	subgt	r3, #4
 800dfa6:	9306      	strgt	r3, [sp, #24]
 800dfa8:	9b06      	ldr	r3, [sp, #24]
 800dfaa:	f1a3 0302 	sub.w	r3, r3, #2
 800dfae:	bfcc      	ite	gt
 800dfb0:	2500      	movgt	r5, #0
 800dfb2:	2501      	movle	r5, #1
 800dfb4:	2b03      	cmp	r3, #3
 800dfb6:	f200 808f 	bhi.w	800e0d8 <_dtoa_r+0x2f0>
 800dfba:	e8df f003 	tbb	[pc, r3]
 800dfbe:	7f7d      	.short	0x7f7d
 800dfc0:	7131      	.short	0x7131
 800dfc2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800dfc6:	441d      	add	r5, r3
 800dfc8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800dfcc:	2820      	cmp	r0, #32
 800dfce:	dd13      	ble.n	800dff8 <_dtoa_r+0x210>
 800dfd0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800dfd4:	9b00      	ldr	r3, [sp, #0]
 800dfd6:	fa08 f800 	lsl.w	r8, r8, r0
 800dfda:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800dfde:	fa23 f000 	lsr.w	r0, r3, r0
 800dfe2:	ea48 0000 	orr.w	r0, r8, r0
 800dfe6:	f7f2 fa8d 	bl	8000504 <__aeabi_ui2d>
 800dfea:	2301      	movs	r3, #1
 800dfec:	4682      	mov	sl, r0
 800dfee:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800dff2:	3d01      	subs	r5, #1
 800dff4:	9313      	str	r3, [sp, #76]	; 0x4c
 800dff6:	e772      	b.n	800dede <_dtoa_r+0xf6>
 800dff8:	9b00      	ldr	r3, [sp, #0]
 800dffa:	f1c0 0020 	rsb	r0, r0, #32
 800dffe:	fa03 f000 	lsl.w	r0, r3, r0
 800e002:	e7f0      	b.n	800dfe6 <_dtoa_r+0x1fe>
 800e004:	2301      	movs	r3, #1
 800e006:	e7b1      	b.n	800df6c <_dtoa_r+0x184>
 800e008:	900f      	str	r0, [sp, #60]	; 0x3c
 800e00a:	e7b0      	b.n	800df6e <_dtoa_r+0x186>
 800e00c:	9b05      	ldr	r3, [sp, #20]
 800e00e:	eba3 030a 	sub.w	r3, r3, sl
 800e012:	9305      	str	r3, [sp, #20]
 800e014:	f1ca 0300 	rsb	r3, sl, #0
 800e018:	9307      	str	r3, [sp, #28]
 800e01a:	2300      	movs	r3, #0
 800e01c:	930e      	str	r3, [sp, #56]	; 0x38
 800e01e:	e7bb      	b.n	800df98 <_dtoa_r+0x1b0>
 800e020:	2301      	movs	r3, #1
 800e022:	930a      	str	r3, [sp, #40]	; 0x28
 800e024:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e026:	2b00      	cmp	r3, #0
 800e028:	dd59      	ble.n	800e0de <_dtoa_r+0x2f6>
 800e02a:	9302      	str	r3, [sp, #8]
 800e02c:	4699      	mov	r9, r3
 800e02e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e030:	2200      	movs	r2, #0
 800e032:	6072      	str	r2, [r6, #4]
 800e034:	2204      	movs	r2, #4
 800e036:	f102 0014 	add.w	r0, r2, #20
 800e03a:	4298      	cmp	r0, r3
 800e03c:	6871      	ldr	r1, [r6, #4]
 800e03e:	d953      	bls.n	800e0e8 <_dtoa_r+0x300>
 800e040:	4620      	mov	r0, r4
 800e042:	f000 ffd7 	bl	800eff4 <_Balloc>
 800e046:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e048:	6030      	str	r0, [r6, #0]
 800e04a:	f1b9 0f0e 	cmp.w	r9, #14
 800e04e:	f8d3 b000 	ldr.w	fp, [r3]
 800e052:	f200 80e6 	bhi.w	800e222 <_dtoa_r+0x43a>
 800e056:	2d00      	cmp	r5, #0
 800e058:	f000 80e3 	beq.w	800e222 <_dtoa_r+0x43a>
 800e05c:	ed9d 7b00 	vldr	d7, [sp]
 800e060:	f1ba 0f00 	cmp.w	sl, #0
 800e064:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e068:	dd74      	ble.n	800e154 <_dtoa_r+0x36c>
 800e06a:	4a2a      	ldr	r2, [pc, #168]	; (800e114 <_dtoa_r+0x32c>)
 800e06c:	f00a 030f 	and.w	r3, sl, #15
 800e070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e074:	ed93 7b00 	vldr	d7, [r3]
 800e078:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e07c:	06f0      	lsls	r0, r6, #27
 800e07e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e082:	d565      	bpl.n	800e150 <_dtoa_r+0x368>
 800e084:	4b24      	ldr	r3, [pc, #144]	; (800e118 <_dtoa_r+0x330>)
 800e086:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e08a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e08e:	f7f2 fbdd 	bl	800084c <__aeabi_ddiv>
 800e092:	e9cd 0100 	strd	r0, r1, [sp]
 800e096:	f006 060f 	and.w	r6, r6, #15
 800e09a:	2503      	movs	r5, #3
 800e09c:	4f1e      	ldr	r7, [pc, #120]	; (800e118 <_dtoa_r+0x330>)
 800e09e:	e04c      	b.n	800e13a <_dtoa_r+0x352>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e0a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0a6:	4453      	add	r3, sl
 800e0a8:	f103 0901 	add.w	r9, r3, #1
 800e0ac:	9302      	str	r3, [sp, #8]
 800e0ae:	464b      	mov	r3, r9
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	bfb8      	it	lt
 800e0b4:	2301      	movlt	r3, #1
 800e0b6:	e7ba      	b.n	800e02e <_dtoa_r+0x246>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	e7b2      	b.n	800e022 <_dtoa_r+0x23a>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e7f0      	b.n	800e0a2 <_dtoa_r+0x2ba>
 800e0c0:	2501      	movs	r5, #1
 800e0c2:	2300      	movs	r3, #0
 800e0c4:	9306      	str	r3, [sp, #24]
 800e0c6:	950a      	str	r5, [sp, #40]	; 0x28
 800e0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0cc:	9302      	str	r3, [sp, #8]
 800e0ce:	4699      	mov	r9, r3
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	2312      	movs	r3, #18
 800e0d4:	920b      	str	r2, [sp, #44]	; 0x2c
 800e0d6:	e7aa      	b.n	800e02e <_dtoa_r+0x246>
 800e0d8:	2301      	movs	r3, #1
 800e0da:	930a      	str	r3, [sp, #40]	; 0x28
 800e0dc:	e7f4      	b.n	800e0c8 <_dtoa_r+0x2e0>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	9302      	str	r3, [sp, #8]
 800e0e2:	4699      	mov	r9, r3
 800e0e4:	461a      	mov	r2, r3
 800e0e6:	e7f5      	b.n	800e0d4 <_dtoa_r+0x2ec>
 800e0e8:	3101      	adds	r1, #1
 800e0ea:	6071      	str	r1, [r6, #4]
 800e0ec:	0052      	lsls	r2, r2, #1
 800e0ee:	e7a2      	b.n	800e036 <_dtoa_r+0x24e>
 800e0f0:	636f4361 	.word	0x636f4361
 800e0f4:	3fd287a7 	.word	0x3fd287a7
 800e0f8:	8b60c8b3 	.word	0x8b60c8b3
 800e0fc:	3fc68a28 	.word	0x3fc68a28
 800e100:	509f79fb 	.word	0x509f79fb
 800e104:	3fd34413 	.word	0x3fd34413
 800e108:	7ff00000 	.word	0x7ff00000
 800e10c:	0800fc39 	.word	0x0800fc39
 800e110:	3ff80000 	.word	0x3ff80000
 800e114:	0800fcf8 	.word	0x0800fcf8
 800e118:	0800fcd0 	.word	0x0800fcd0
 800e11c:	0800fcc1 	.word	0x0800fcc1
 800e120:	07f1      	lsls	r1, r6, #31
 800e122:	d508      	bpl.n	800e136 <_dtoa_r+0x34e>
 800e124:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e12c:	f7f2 fa64 	bl	80005f8 <__aeabi_dmul>
 800e130:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e134:	3501      	adds	r5, #1
 800e136:	1076      	asrs	r6, r6, #1
 800e138:	3708      	adds	r7, #8
 800e13a:	2e00      	cmp	r6, #0
 800e13c:	d1f0      	bne.n	800e120 <_dtoa_r+0x338>
 800e13e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e142:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e146:	f7f2 fb81 	bl	800084c <__aeabi_ddiv>
 800e14a:	e9cd 0100 	strd	r0, r1, [sp]
 800e14e:	e01a      	b.n	800e186 <_dtoa_r+0x39e>
 800e150:	2502      	movs	r5, #2
 800e152:	e7a3      	b.n	800e09c <_dtoa_r+0x2b4>
 800e154:	f000 80a0 	beq.w	800e298 <_dtoa_r+0x4b0>
 800e158:	f1ca 0600 	rsb	r6, sl, #0
 800e15c:	4b9f      	ldr	r3, [pc, #636]	; (800e3dc <_dtoa_r+0x5f4>)
 800e15e:	4fa0      	ldr	r7, [pc, #640]	; (800e3e0 <_dtoa_r+0x5f8>)
 800e160:	f006 020f 	and.w	r2, r6, #15
 800e164:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e170:	f7f2 fa42 	bl	80005f8 <__aeabi_dmul>
 800e174:	e9cd 0100 	strd	r0, r1, [sp]
 800e178:	1136      	asrs	r6, r6, #4
 800e17a:	2300      	movs	r3, #0
 800e17c:	2502      	movs	r5, #2
 800e17e:	2e00      	cmp	r6, #0
 800e180:	d17f      	bne.n	800e282 <_dtoa_r+0x49a>
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1e1      	bne.n	800e14a <_dtoa_r+0x362>
 800e186:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e188:	2b00      	cmp	r3, #0
 800e18a:	f000 8087 	beq.w	800e29c <_dtoa_r+0x4b4>
 800e18e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e192:	2200      	movs	r2, #0
 800e194:	4b93      	ldr	r3, [pc, #588]	; (800e3e4 <_dtoa_r+0x5fc>)
 800e196:	4630      	mov	r0, r6
 800e198:	4639      	mov	r1, r7
 800e19a:	f7f2 fc9f 	bl	8000adc <__aeabi_dcmplt>
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d07c      	beq.n	800e29c <_dtoa_r+0x4b4>
 800e1a2:	f1b9 0f00 	cmp.w	r9, #0
 800e1a6:	d079      	beq.n	800e29c <_dtoa_r+0x4b4>
 800e1a8:	9b02      	ldr	r3, [sp, #8]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	dd35      	ble.n	800e21a <_dtoa_r+0x432>
 800e1ae:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e1b2:	9308      	str	r3, [sp, #32]
 800e1b4:	4639      	mov	r1, r7
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	4b8b      	ldr	r3, [pc, #556]	; (800e3e8 <_dtoa_r+0x600>)
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	f7f2 fa1c 	bl	80005f8 <__aeabi_dmul>
 800e1c0:	e9cd 0100 	strd	r0, r1, [sp]
 800e1c4:	9f02      	ldr	r7, [sp, #8]
 800e1c6:	3501      	adds	r5, #1
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f7f2 f9ab 	bl	8000524 <__aeabi_i2d>
 800e1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1d2:	f7f2 fa11 	bl	80005f8 <__aeabi_dmul>
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	4b84      	ldr	r3, [pc, #528]	; (800e3ec <_dtoa_r+0x604>)
 800e1da:	f7f2 f857 	bl	800028c <__adddf3>
 800e1de:	4605      	mov	r5, r0
 800e1e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e1e4:	2f00      	cmp	r7, #0
 800e1e6:	d15d      	bne.n	800e2a4 <_dtoa_r+0x4bc>
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	4b81      	ldr	r3, [pc, #516]	; (800e3f0 <_dtoa_r+0x608>)
 800e1ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1f0:	f7f2 f84a 	bl	8000288 <__aeabi_dsub>
 800e1f4:	462a      	mov	r2, r5
 800e1f6:	4633      	mov	r3, r6
 800e1f8:	e9cd 0100 	strd	r0, r1, [sp]
 800e1fc:	f7f2 fc8c 	bl	8000b18 <__aeabi_dcmpgt>
 800e200:	2800      	cmp	r0, #0
 800e202:	f040 8288 	bne.w	800e716 <_dtoa_r+0x92e>
 800e206:	462a      	mov	r2, r5
 800e208:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e20c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e210:	f7f2 fc64 	bl	8000adc <__aeabi_dcmplt>
 800e214:	2800      	cmp	r0, #0
 800e216:	f040 827c 	bne.w	800e712 <_dtoa_r+0x92a>
 800e21a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e21e:	e9cd 2300 	strd	r2, r3, [sp]
 800e222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e224:	2b00      	cmp	r3, #0
 800e226:	f2c0 8150 	blt.w	800e4ca <_dtoa_r+0x6e2>
 800e22a:	f1ba 0f0e 	cmp.w	sl, #14
 800e22e:	f300 814c 	bgt.w	800e4ca <_dtoa_r+0x6e2>
 800e232:	4b6a      	ldr	r3, [pc, #424]	; (800e3dc <_dtoa_r+0x5f4>)
 800e234:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e238:	ed93 7b00 	vldr	d7, [r3]
 800e23c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e23e:	2b00      	cmp	r3, #0
 800e240:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e244:	f280 80d8 	bge.w	800e3f8 <_dtoa_r+0x610>
 800e248:	f1b9 0f00 	cmp.w	r9, #0
 800e24c:	f300 80d4 	bgt.w	800e3f8 <_dtoa_r+0x610>
 800e250:	f040 825e 	bne.w	800e710 <_dtoa_r+0x928>
 800e254:	2200      	movs	r2, #0
 800e256:	4b66      	ldr	r3, [pc, #408]	; (800e3f0 <_dtoa_r+0x608>)
 800e258:	ec51 0b17 	vmov	r0, r1, d7
 800e25c:	f7f2 f9cc 	bl	80005f8 <__aeabi_dmul>
 800e260:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e264:	f7f2 fc4e 	bl	8000b04 <__aeabi_dcmpge>
 800e268:	464f      	mov	r7, r9
 800e26a:	464e      	mov	r6, r9
 800e26c:	2800      	cmp	r0, #0
 800e26e:	f040 8234 	bne.w	800e6da <_dtoa_r+0x8f2>
 800e272:	2331      	movs	r3, #49	; 0x31
 800e274:	f10b 0501 	add.w	r5, fp, #1
 800e278:	f88b 3000 	strb.w	r3, [fp]
 800e27c:	f10a 0a01 	add.w	sl, sl, #1
 800e280:	e22f      	b.n	800e6e2 <_dtoa_r+0x8fa>
 800e282:	07f2      	lsls	r2, r6, #31
 800e284:	d505      	bpl.n	800e292 <_dtoa_r+0x4aa>
 800e286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e28a:	f7f2 f9b5 	bl	80005f8 <__aeabi_dmul>
 800e28e:	3501      	adds	r5, #1
 800e290:	2301      	movs	r3, #1
 800e292:	1076      	asrs	r6, r6, #1
 800e294:	3708      	adds	r7, #8
 800e296:	e772      	b.n	800e17e <_dtoa_r+0x396>
 800e298:	2502      	movs	r5, #2
 800e29a:	e774      	b.n	800e186 <_dtoa_r+0x39e>
 800e29c:	f8cd a020 	str.w	sl, [sp, #32]
 800e2a0:	464f      	mov	r7, r9
 800e2a2:	e791      	b.n	800e1c8 <_dtoa_r+0x3e0>
 800e2a4:	4b4d      	ldr	r3, [pc, #308]	; (800e3dc <_dtoa_r+0x5f4>)
 800e2a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2aa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d047      	beq.n	800e344 <_dtoa_r+0x55c>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	494e      	ldr	r1, [pc, #312]	; (800e3f4 <_dtoa_r+0x60c>)
 800e2bc:	f7f2 fac6 	bl	800084c <__aeabi_ddiv>
 800e2c0:	462a      	mov	r2, r5
 800e2c2:	4633      	mov	r3, r6
 800e2c4:	f7f1 ffe0 	bl	8000288 <__aeabi_dsub>
 800e2c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e2cc:	465d      	mov	r5, fp
 800e2ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2d2:	f7f2 fc41 	bl	8000b58 <__aeabi_d2iz>
 800e2d6:	4606      	mov	r6, r0
 800e2d8:	f7f2 f924 	bl	8000524 <__aeabi_i2d>
 800e2dc:	4602      	mov	r2, r0
 800e2de:	460b      	mov	r3, r1
 800e2e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e2e4:	f7f1 ffd0 	bl	8000288 <__aeabi_dsub>
 800e2e8:	3630      	adds	r6, #48	; 0x30
 800e2ea:	f805 6b01 	strb.w	r6, [r5], #1
 800e2ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e2f2:	e9cd 0100 	strd	r0, r1, [sp]
 800e2f6:	f7f2 fbf1 	bl	8000adc <__aeabi_dcmplt>
 800e2fa:	2800      	cmp	r0, #0
 800e2fc:	d163      	bne.n	800e3c6 <_dtoa_r+0x5de>
 800e2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e302:	2000      	movs	r0, #0
 800e304:	4937      	ldr	r1, [pc, #220]	; (800e3e4 <_dtoa_r+0x5fc>)
 800e306:	f7f1 ffbf 	bl	8000288 <__aeabi_dsub>
 800e30a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e30e:	f7f2 fbe5 	bl	8000adc <__aeabi_dcmplt>
 800e312:	2800      	cmp	r0, #0
 800e314:	f040 80b7 	bne.w	800e486 <_dtoa_r+0x69e>
 800e318:	eba5 030b 	sub.w	r3, r5, fp
 800e31c:	429f      	cmp	r7, r3
 800e31e:	f77f af7c 	ble.w	800e21a <_dtoa_r+0x432>
 800e322:	2200      	movs	r2, #0
 800e324:	4b30      	ldr	r3, [pc, #192]	; (800e3e8 <_dtoa_r+0x600>)
 800e326:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e32a:	f7f2 f965 	bl	80005f8 <__aeabi_dmul>
 800e32e:	2200      	movs	r2, #0
 800e330:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e334:	4b2c      	ldr	r3, [pc, #176]	; (800e3e8 <_dtoa_r+0x600>)
 800e336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e33a:	f7f2 f95d 	bl	80005f8 <__aeabi_dmul>
 800e33e:	e9cd 0100 	strd	r0, r1, [sp]
 800e342:	e7c4      	b.n	800e2ce <_dtoa_r+0x4e6>
 800e344:	462a      	mov	r2, r5
 800e346:	4633      	mov	r3, r6
 800e348:	f7f2 f956 	bl	80005f8 <__aeabi_dmul>
 800e34c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e350:	eb0b 0507 	add.w	r5, fp, r7
 800e354:	465e      	mov	r6, fp
 800e356:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e35a:	f7f2 fbfd 	bl	8000b58 <__aeabi_d2iz>
 800e35e:	4607      	mov	r7, r0
 800e360:	f7f2 f8e0 	bl	8000524 <__aeabi_i2d>
 800e364:	3730      	adds	r7, #48	; 0x30
 800e366:	4602      	mov	r2, r0
 800e368:	460b      	mov	r3, r1
 800e36a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e36e:	f7f1 ff8b 	bl	8000288 <__aeabi_dsub>
 800e372:	f806 7b01 	strb.w	r7, [r6], #1
 800e376:	42ae      	cmp	r6, r5
 800e378:	e9cd 0100 	strd	r0, r1, [sp]
 800e37c:	f04f 0200 	mov.w	r2, #0
 800e380:	d126      	bne.n	800e3d0 <_dtoa_r+0x5e8>
 800e382:	4b1c      	ldr	r3, [pc, #112]	; (800e3f4 <_dtoa_r+0x60c>)
 800e384:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e388:	f7f1 ff80 	bl	800028c <__adddf3>
 800e38c:	4602      	mov	r2, r0
 800e38e:	460b      	mov	r3, r1
 800e390:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e394:	f7f2 fbc0 	bl	8000b18 <__aeabi_dcmpgt>
 800e398:	2800      	cmp	r0, #0
 800e39a:	d174      	bne.n	800e486 <_dtoa_r+0x69e>
 800e39c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e3a0:	2000      	movs	r0, #0
 800e3a2:	4914      	ldr	r1, [pc, #80]	; (800e3f4 <_dtoa_r+0x60c>)
 800e3a4:	f7f1 ff70 	bl	8000288 <__aeabi_dsub>
 800e3a8:	4602      	mov	r2, r0
 800e3aa:	460b      	mov	r3, r1
 800e3ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3b0:	f7f2 fb94 	bl	8000adc <__aeabi_dcmplt>
 800e3b4:	2800      	cmp	r0, #0
 800e3b6:	f43f af30 	beq.w	800e21a <_dtoa_r+0x432>
 800e3ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e3be:	2b30      	cmp	r3, #48	; 0x30
 800e3c0:	f105 32ff 	add.w	r2, r5, #4294967295
 800e3c4:	d002      	beq.n	800e3cc <_dtoa_r+0x5e4>
 800e3c6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e3ca:	e04a      	b.n	800e462 <_dtoa_r+0x67a>
 800e3cc:	4615      	mov	r5, r2
 800e3ce:	e7f4      	b.n	800e3ba <_dtoa_r+0x5d2>
 800e3d0:	4b05      	ldr	r3, [pc, #20]	; (800e3e8 <_dtoa_r+0x600>)
 800e3d2:	f7f2 f911 	bl	80005f8 <__aeabi_dmul>
 800e3d6:	e9cd 0100 	strd	r0, r1, [sp]
 800e3da:	e7bc      	b.n	800e356 <_dtoa_r+0x56e>
 800e3dc:	0800fcf8 	.word	0x0800fcf8
 800e3e0:	0800fcd0 	.word	0x0800fcd0
 800e3e4:	3ff00000 	.word	0x3ff00000
 800e3e8:	40240000 	.word	0x40240000
 800e3ec:	401c0000 	.word	0x401c0000
 800e3f0:	40140000 	.word	0x40140000
 800e3f4:	3fe00000 	.word	0x3fe00000
 800e3f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e3fc:	465d      	mov	r5, fp
 800e3fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e402:	4630      	mov	r0, r6
 800e404:	4639      	mov	r1, r7
 800e406:	f7f2 fa21 	bl	800084c <__aeabi_ddiv>
 800e40a:	f7f2 fba5 	bl	8000b58 <__aeabi_d2iz>
 800e40e:	4680      	mov	r8, r0
 800e410:	f7f2 f888 	bl	8000524 <__aeabi_i2d>
 800e414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e418:	f7f2 f8ee 	bl	80005f8 <__aeabi_dmul>
 800e41c:	4602      	mov	r2, r0
 800e41e:	460b      	mov	r3, r1
 800e420:	4630      	mov	r0, r6
 800e422:	4639      	mov	r1, r7
 800e424:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e428:	f7f1 ff2e 	bl	8000288 <__aeabi_dsub>
 800e42c:	f805 6b01 	strb.w	r6, [r5], #1
 800e430:	eba5 060b 	sub.w	r6, r5, fp
 800e434:	45b1      	cmp	r9, r6
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	d139      	bne.n	800e4b0 <_dtoa_r+0x6c8>
 800e43c:	f7f1 ff26 	bl	800028c <__adddf3>
 800e440:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e444:	4606      	mov	r6, r0
 800e446:	460f      	mov	r7, r1
 800e448:	f7f2 fb66 	bl	8000b18 <__aeabi_dcmpgt>
 800e44c:	b9c8      	cbnz	r0, 800e482 <_dtoa_r+0x69a>
 800e44e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e452:	4630      	mov	r0, r6
 800e454:	4639      	mov	r1, r7
 800e456:	f7f2 fb37 	bl	8000ac8 <__aeabi_dcmpeq>
 800e45a:	b110      	cbz	r0, 800e462 <_dtoa_r+0x67a>
 800e45c:	f018 0f01 	tst.w	r8, #1
 800e460:	d10f      	bne.n	800e482 <_dtoa_r+0x69a>
 800e462:	9904      	ldr	r1, [sp, #16]
 800e464:	4620      	mov	r0, r4
 800e466:	f000 fdf9 	bl	800f05c <_Bfree>
 800e46a:	2300      	movs	r3, #0
 800e46c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e46e:	702b      	strb	r3, [r5, #0]
 800e470:	f10a 0301 	add.w	r3, sl, #1
 800e474:	6013      	str	r3, [r2, #0]
 800e476:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e478:	2b00      	cmp	r3, #0
 800e47a:	f000 8241 	beq.w	800e900 <_dtoa_r+0xb18>
 800e47e:	601d      	str	r5, [r3, #0]
 800e480:	e23e      	b.n	800e900 <_dtoa_r+0xb18>
 800e482:	f8cd a020 	str.w	sl, [sp, #32]
 800e486:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e48a:	2a39      	cmp	r2, #57	; 0x39
 800e48c:	f105 33ff 	add.w	r3, r5, #4294967295
 800e490:	d108      	bne.n	800e4a4 <_dtoa_r+0x6bc>
 800e492:	459b      	cmp	fp, r3
 800e494:	d10a      	bne.n	800e4ac <_dtoa_r+0x6c4>
 800e496:	9b08      	ldr	r3, [sp, #32]
 800e498:	3301      	adds	r3, #1
 800e49a:	9308      	str	r3, [sp, #32]
 800e49c:	2330      	movs	r3, #48	; 0x30
 800e49e:	f88b 3000 	strb.w	r3, [fp]
 800e4a2:	465b      	mov	r3, fp
 800e4a4:	781a      	ldrb	r2, [r3, #0]
 800e4a6:	3201      	adds	r2, #1
 800e4a8:	701a      	strb	r2, [r3, #0]
 800e4aa:	e78c      	b.n	800e3c6 <_dtoa_r+0x5de>
 800e4ac:	461d      	mov	r5, r3
 800e4ae:	e7ea      	b.n	800e486 <_dtoa_r+0x69e>
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	4b9b      	ldr	r3, [pc, #620]	; (800e720 <_dtoa_r+0x938>)
 800e4b4:	f7f2 f8a0 	bl	80005f8 <__aeabi_dmul>
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	4606      	mov	r6, r0
 800e4be:	460f      	mov	r7, r1
 800e4c0:	f7f2 fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 800e4c4:	2800      	cmp	r0, #0
 800e4c6:	d09a      	beq.n	800e3fe <_dtoa_r+0x616>
 800e4c8:	e7cb      	b.n	800e462 <_dtoa_r+0x67a>
 800e4ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4cc:	2a00      	cmp	r2, #0
 800e4ce:	f000 808b 	beq.w	800e5e8 <_dtoa_r+0x800>
 800e4d2:	9a06      	ldr	r2, [sp, #24]
 800e4d4:	2a01      	cmp	r2, #1
 800e4d6:	dc6e      	bgt.n	800e5b6 <_dtoa_r+0x7ce>
 800e4d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e4da:	2a00      	cmp	r2, #0
 800e4dc:	d067      	beq.n	800e5ae <_dtoa_r+0x7c6>
 800e4de:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e4e2:	9f07      	ldr	r7, [sp, #28]
 800e4e4:	9d05      	ldr	r5, [sp, #20]
 800e4e6:	9a05      	ldr	r2, [sp, #20]
 800e4e8:	2101      	movs	r1, #1
 800e4ea:	441a      	add	r2, r3
 800e4ec:	4620      	mov	r0, r4
 800e4ee:	9205      	str	r2, [sp, #20]
 800e4f0:	4498      	add	r8, r3
 800e4f2:	f000 fe91 	bl	800f218 <__i2b>
 800e4f6:	4606      	mov	r6, r0
 800e4f8:	2d00      	cmp	r5, #0
 800e4fa:	dd0c      	ble.n	800e516 <_dtoa_r+0x72e>
 800e4fc:	f1b8 0f00 	cmp.w	r8, #0
 800e500:	dd09      	ble.n	800e516 <_dtoa_r+0x72e>
 800e502:	4545      	cmp	r5, r8
 800e504:	9a05      	ldr	r2, [sp, #20]
 800e506:	462b      	mov	r3, r5
 800e508:	bfa8      	it	ge
 800e50a:	4643      	movge	r3, r8
 800e50c:	1ad2      	subs	r2, r2, r3
 800e50e:	9205      	str	r2, [sp, #20]
 800e510:	1aed      	subs	r5, r5, r3
 800e512:	eba8 0803 	sub.w	r8, r8, r3
 800e516:	9b07      	ldr	r3, [sp, #28]
 800e518:	b1eb      	cbz	r3, 800e556 <_dtoa_r+0x76e>
 800e51a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d067      	beq.n	800e5f0 <_dtoa_r+0x808>
 800e520:	b18f      	cbz	r7, 800e546 <_dtoa_r+0x75e>
 800e522:	4631      	mov	r1, r6
 800e524:	463a      	mov	r2, r7
 800e526:	4620      	mov	r0, r4
 800e528:	f000 ff16 	bl	800f358 <__pow5mult>
 800e52c:	9a04      	ldr	r2, [sp, #16]
 800e52e:	4601      	mov	r1, r0
 800e530:	4606      	mov	r6, r0
 800e532:	4620      	mov	r0, r4
 800e534:	f000 fe79 	bl	800f22a <__multiply>
 800e538:	9904      	ldr	r1, [sp, #16]
 800e53a:	9008      	str	r0, [sp, #32]
 800e53c:	4620      	mov	r0, r4
 800e53e:	f000 fd8d 	bl	800f05c <_Bfree>
 800e542:	9b08      	ldr	r3, [sp, #32]
 800e544:	9304      	str	r3, [sp, #16]
 800e546:	9b07      	ldr	r3, [sp, #28]
 800e548:	1bda      	subs	r2, r3, r7
 800e54a:	d004      	beq.n	800e556 <_dtoa_r+0x76e>
 800e54c:	9904      	ldr	r1, [sp, #16]
 800e54e:	4620      	mov	r0, r4
 800e550:	f000 ff02 	bl	800f358 <__pow5mult>
 800e554:	9004      	str	r0, [sp, #16]
 800e556:	2101      	movs	r1, #1
 800e558:	4620      	mov	r0, r4
 800e55a:	f000 fe5d 	bl	800f218 <__i2b>
 800e55e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e560:	4607      	mov	r7, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	f000 81d0 	beq.w	800e908 <_dtoa_r+0xb20>
 800e568:	461a      	mov	r2, r3
 800e56a:	4601      	mov	r1, r0
 800e56c:	4620      	mov	r0, r4
 800e56e:	f000 fef3 	bl	800f358 <__pow5mult>
 800e572:	9b06      	ldr	r3, [sp, #24]
 800e574:	2b01      	cmp	r3, #1
 800e576:	4607      	mov	r7, r0
 800e578:	dc40      	bgt.n	800e5fc <_dtoa_r+0x814>
 800e57a:	9b00      	ldr	r3, [sp, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d139      	bne.n	800e5f4 <_dtoa_r+0x80c>
 800e580:	9b01      	ldr	r3, [sp, #4]
 800e582:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e586:	2b00      	cmp	r3, #0
 800e588:	d136      	bne.n	800e5f8 <_dtoa_r+0x810>
 800e58a:	9b01      	ldr	r3, [sp, #4]
 800e58c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e590:	0d1b      	lsrs	r3, r3, #20
 800e592:	051b      	lsls	r3, r3, #20
 800e594:	b12b      	cbz	r3, 800e5a2 <_dtoa_r+0x7ba>
 800e596:	9b05      	ldr	r3, [sp, #20]
 800e598:	3301      	adds	r3, #1
 800e59a:	9305      	str	r3, [sp, #20]
 800e59c:	f108 0801 	add.w	r8, r8, #1
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	9307      	str	r3, [sp, #28]
 800e5a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d12a      	bne.n	800e600 <_dtoa_r+0x818>
 800e5aa:	2001      	movs	r0, #1
 800e5ac:	e030      	b.n	800e610 <_dtoa_r+0x828>
 800e5ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e5b0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e5b4:	e795      	b.n	800e4e2 <_dtoa_r+0x6fa>
 800e5b6:	9b07      	ldr	r3, [sp, #28]
 800e5b8:	f109 37ff 	add.w	r7, r9, #4294967295
 800e5bc:	42bb      	cmp	r3, r7
 800e5be:	bfbf      	itttt	lt
 800e5c0:	9b07      	ldrlt	r3, [sp, #28]
 800e5c2:	9707      	strlt	r7, [sp, #28]
 800e5c4:	1afa      	sublt	r2, r7, r3
 800e5c6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800e5c8:	bfbb      	ittet	lt
 800e5ca:	189b      	addlt	r3, r3, r2
 800e5cc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e5ce:	1bdf      	subge	r7, r3, r7
 800e5d0:	2700      	movlt	r7, #0
 800e5d2:	f1b9 0f00 	cmp.w	r9, #0
 800e5d6:	bfb5      	itete	lt
 800e5d8:	9b05      	ldrlt	r3, [sp, #20]
 800e5da:	9d05      	ldrge	r5, [sp, #20]
 800e5dc:	eba3 0509 	sublt.w	r5, r3, r9
 800e5e0:	464b      	movge	r3, r9
 800e5e2:	bfb8      	it	lt
 800e5e4:	2300      	movlt	r3, #0
 800e5e6:	e77e      	b.n	800e4e6 <_dtoa_r+0x6fe>
 800e5e8:	9f07      	ldr	r7, [sp, #28]
 800e5ea:	9d05      	ldr	r5, [sp, #20]
 800e5ec:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800e5ee:	e783      	b.n	800e4f8 <_dtoa_r+0x710>
 800e5f0:	9a07      	ldr	r2, [sp, #28]
 800e5f2:	e7ab      	b.n	800e54c <_dtoa_r+0x764>
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	e7d4      	b.n	800e5a2 <_dtoa_r+0x7ba>
 800e5f8:	9b00      	ldr	r3, [sp, #0]
 800e5fa:	e7d2      	b.n	800e5a2 <_dtoa_r+0x7ba>
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	9307      	str	r3, [sp, #28]
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e606:	6918      	ldr	r0, [r3, #16]
 800e608:	f000 fdb8 	bl	800f17c <__hi0bits>
 800e60c:	f1c0 0020 	rsb	r0, r0, #32
 800e610:	4440      	add	r0, r8
 800e612:	f010 001f 	ands.w	r0, r0, #31
 800e616:	d047      	beq.n	800e6a8 <_dtoa_r+0x8c0>
 800e618:	f1c0 0320 	rsb	r3, r0, #32
 800e61c:	2b04      	cmp	r3, #4
 800e61e:	dd3b      	ble.n	800e698 <_dtoa_r+0x8b0>
 800e620:	9b05      	ldr	r3, [sp, #20]
 800e622:	f1c0 001c 	rsb	r0, r0, #28
 800e626:	4403      	add	r3, r0
 800e628:	9305      	str	r3, [sp, #20]
 800e62a:	4405      	add	r5, r0
 800e62c:	4480      	add	r8, r0
 800e62e:	9b05      	ldr	r3, [sp, #20]
 800e630:	2b00      	cmp	r3, #0
 800e632:	dd05      	ble.n	800e640 <_dtoa_r+0x858>
 800e634:	461a      	mov	r2, r3
 800e636:	9904      	ldr	r1, [sp, #16]
 800e638:	4620      	mov	r0, r4
 800e63a:	f000 fedb 	bl	800f3f4 <__lshift>
 800e63e:	9004      	str	r0, [sp, #16]
 800e640:	f1b8 0f00 	cmp.w	r8, #0
 800e644:	dd05      	ble.n	800e652 <_dtoa_r+0x86a>
 800e646:	4639      	mov	r1, r7
 800e648:	4642      	mov	r2, r8
 800e64a:	4620      	mov	r0, r4
 800e64c:	f000 fed2 	bl	800f3f4 <__lshift>
 800e650:	4607      	mov	r7, r0
 800e652:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e654:	b353      	cbz	r3, 800e6ac <_dtoa_r+0x8c4>
 800e656:	4639      	mov	r1, r7
 800e658:	9804      	ldr	r0, [sp, #16]
 800e65a:	f000 ff1f 	bl	800f49c <__mcmp>
 800e65e:	2800      	cmp	r0, #0
 800e660:	da24      	bge.n	800e6ac <_dtoa_r+0x8c4>
 800e662:	2300      	movs	r3, #0
 800e664:	220a      	movs	r2, #10
 800e666:	9904      	ldr	r1, [sp, #16]
 800e668:	4620      	mov	r0, r4
 800e66a:	f000 fd0e 	bl	800f08a <__multadd>
 800e66e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e670:	9004      	str	r0, [sp, #16]
 800e672:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e676:	2b00      	cmp	r3, #0
 800e678:	f000 814d 	beq.w	800e916 <_dtoa_r+0xb2e>
 800e67c:	2300      	movs	r3, #0
 800e67e:	4631      	mov	r1, r6
 800e680:	220a      	movs	r2, #10
 800e682:	4620      	mov	r0, r4
 800e684:	f000 fd01 	bl	800f08a <__multadd>
 800e688:	9b02      	ldr	r3, [sp, #8]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	4606      	mov	r6, r0
 800e68e:	dc4f      	bgt.n	800e730 <_dtoa_r+0x948>
 800e690:	9b06      	ldr	r3, [sp, #24]
 800e692:	2b02      	cmp	r3, #2
 800e694:	dd4c      	ble.n	800e730 <_dtoa_r+0x948>
 800e696:	e011      	b.n	800e6bc <_dtoa_r+0x8d4>
 800e698:	d0c9      	beq.n	800e62e <_dtoa_r+0x846>
 800e69a:	9a05      	ldr	r2, [sp, #20]
 800e69c:	331c      	adds	r3, #28
 800e69e:	441a      	add	r2, r3
 800e6a0:	9205      	str	r2, [sp, #20]
 800e6a2:	441d      	add	r5, r3
 800e6a4:	4498      	add	r8, r3
 800e6a6:	e7c2      	b.n	800e62e <_dtoa_r+0x846>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	e7f6      	b.n	800e69a <_dtoa_r+0x8b2>
 800e6ac:	f1b9 0f00 	cmp.w	r9, #0
 800e6b0:	dc38      	bgt.n	800e724 <_dtoa_r+0x93c>
 800e6b2:	9b06      	ldr	r3, [sp, #24]
 800e6b4:	2b02      	cmp	r3, #2
 800e6b6:	dd35      	ble.n	800e724 <_dtoa_r+0x93c>
 800e6b8:	f8cd 9008 	str.w	r9, [sp, #8]
 800e6bc:	9b02      	ldr	r3, [sp, #8]
 800e6be:	b963      	cbnz	r3, 800e6da <_dtoa_r+0x8f2>
 800e6c0:	4639      	mov	r1, r7
 800e6c2:	2205      	movs	r2, #5
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	f000 fce0 	bl	800f08a <__multadd>
 800e6ca:	4601      	mov	r1, r0
 800e6cc:	4607      	mov	r7, r0
 800e6ce:	9804      	ldr	r0, [sp, #16]
 800e6d0:	f000 fee4 	bl	800f49c <__mcmp>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	f73f adcc 	bgt.w	800e272 <_dtoa_r+0x48a>
 800e6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6dc:	465d      	mov	r5, fp
 800e6de:	ea6f 0a03 	mvn.w	sl, r3
 800e6e2:	f04f 0900 	mov.w	r9, #0
 800e6e6:	4639      	mov	r1, r7
 800e6e8:	4620      	mov	r0, r4
 800e6ea:	f000 fcb7 	bl	800f05c <_Bfree>
 800e6ee:	2e00      	cmp	r6, #0
 800e6f0:	f43f aeb7 	beq.w	800e462 <_dtoa_r+0x67a>
 800e6f4:	f1b9 0f00 	cmp.w	r9, #0
 800e6f8:	d005      	beq.n	800e706 <_dtoa_r+0x91e>
 800e6fa:	45b1      	cmp	r9, r6
 800e6fc:	d003      	beq.n	800e706 <_dtoa_r+0x91e>
 800e6fe:	4649      	mov	r1, r9
 800e700:	4620      	mov	r0, r4
 800e702:	f000 fcab 	bl	800f05c <_Bfree>
 800e706:	4631      	mov	r1, r6
 800e708:	4620      	mov	r0, r4
 800e70a:	f000 fca7 	bl	800f05c <_Bfree>
 800e70e:	e6a8      	b.n	800e462 <_dtoa_r+0x67a>
 800e710:	2700      	movs	r7, #0
 800e712:	463e      	mov	r6, r7
 800e714:	e7e1      	b.n	800e6da <_dtoa_r+0x8f2>
 800e716:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e71a:	463e      	mov	r6, r7
 800e71c:	e5a9      	b.n	800e272 <_dtoa_r+0x48a>
 800e71e:	bf00      	nop
 800e720:	40240000 	.word	0x40240000
 800e724:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e726:	f8cd 9008 	str.w	r9, [sp, #8]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f000 80fa 	beq.w	800e924 <_dtoa_r+0xb3c>
 800e730:	2d00      	cmp	r5, #0
 800e732:	dd05      	ble.n	800e740 <_dtoa_r+0x958>
 800e734:	4631      	mov	r1, r6
 800e736:	462a      	mov	r2, r5
 800e738:	4620      	mov	r0, r4
 800e73a:	f000 fe5b 	bl	800f3f4 <__lshift>
 800e73e:	4606      	mov	r6, r0
 800e740:	9b07      	ldr	r3, [sp, #28]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d04c      	beq.n	800e7e0 <_dtoa_r+0x9f8>
 800e746:	6871      	ldr	r1, [r6, #4]
 800e748:	4620      	mov	r0, r4
 800e74a:	f000 fc53 	bl	800eff4 <_Balloc>
 800e74e:	6932      	ldr	r2, [r6, #16]
 800e750:	3202      	adds	r2, #2
 800e752:	4605      	mov	r5, r0
 800e754:	0092      	lsls	r2, r2, #2
 800e756:	f106 010c 	add.w	r1, r6, #12
 800e75a:	300c      	adds	r0, #12
 800e75c:	f7fd fcd8 	bl	800c110 <memcpy>
 800e760:	2201      	movs	r2, #1
 800e762:	4629      	mov	r1, r5
 800e764:	4620      	mov	r0, r4
 800e766:	f000 fe45 	bl	800f3f4 <__lshift>
 800e76a:	9b00      	ldr	r3, [sp, #0]
 800e76c:	f8cd b014 	str.w	fp, [sp, #20]
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	46b1      	mov	r9, r6
 800e776:	9307      	str	r3, [sp, #28]
 800e778:	4606      	mov	r6, r0
 800e77a:	4639      	mov	r1, r7
 800e77c:	9804      	ldr	r0, [sp, #16]
 800e77e:	f7ff faa5 	bl	800dccc <quorem>
 800e782:	4649      	mov	r1, r9
 800e784:	4605      	mov	r5, r0
 800e786:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e78a:	9804      	ldr	r0, [sp, #16]
 800e78c:	f000 fe86 	bl	800f49c <__mcmp>
 800e790:	4632      	mov	r2, r6
 800e792:	9000      	str	r0, [sp, #0]
 800e794:	4639      	mov	r1, r7
 800e796:	4620      	mov	r0, r4
 800e798:	f000 fe9a 	bl	800f4d0 <__mdiff>
 800e79c:	68c3      	ldr	r3, [r0, #12]
 800e79e:	4602      	mov	r2, r0
 800e7a0:	bb03      	cbnz	r3, 800e7e4 <_dtoa_r+0x9fc>
 800e7a2:	4601      	mov	r1, r0
 800e7a4:	9008      	str	r0, [sp, #32]
 800e7a6:	9804      	ldr	r0, [sp, #16]
 800e7a8:	f000 fe78 	bl	800f49c <__mcmp>
 800e7ac:	9a08      	ldr	r2, [sp, #32]
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	4611      	mov	r1, r2
 800e7b2:	4620      	mov	r0, r4
 800e7b4:	9308      	str	r3, [sp, #32]
 800e7b6:	f000 fc51 	bl	800f05c <_Bfree>
 800e7ba:	9b08      	ldr	r3, [sp, #32]
 800e7bc:	b9a3      	cbnz	r3, 800e7e8 <_dtoa_r+0xa00>
 800e7be:	9a06      	ldr	r2, [sp, #24]
 800e7c0:	b992      	cbnz	r2, 800e7e8 <_dtoa_r+0xa00>
 800e7c2:	9a07      	ldr	r2, [sp, #28]
 800e7c4:	b982      	cbnz	r2, 800e7e8 <_dtoa_r+0xa00>
 800e7c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e7ca:	d029      	beq.n	800e820 <_dtoa_r+0xa38>
 800e7cc:	9b00      	ldr	r3, [sp, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	dd01      	ble.n	800e7d6 <_dtoa_r+0x9ee>
 800e7d2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e7d6:	9b05      	ldr	r3, [sp, #20]
 800e7d8:	1c5d      	adds	r5, r3, #1
 800e7da:	f883 8000 	strb.w	r8, [r3]
 800e7de:	e782      	b.n	800e6e6 <_dtoa_r+0x8fe>
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	e7c2      	b.n	800e76a <_dtoa_r+0x982>
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	e7e3      	b.n	800e7b0 <_dtoa_r+0x9c8>
 800e7e8:	9a00      	ldr	r2, [sp, #0]
 800e7ea:	2a00      	cmp	r2, #0
 800e7ec:	db04      	blt.n	800e7f8 <_dtoa_r+0xa10>
 800e7ee:	d125      	bne.n	800e83c <_dtoa_r+0xa54>
 800e7f0:	9a06      	ldr	r2, [sp, #24]
 800e7f2:	bb1a      	cbnz	r2, 800e83c <_dtoa_r+0xa54>
 800e7f4:	9a07      	ldr	r2, [sp, #28]
 800e7f6:	bb0a      	cbnz	r2, 800e83c <_dtoa_r+0xa54>
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	ddec      	ble.n	800e7d6 <_dtoa_r+0x9ee>
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	9904      	ldr	r1, [sp, #16]
 800e800:	4620      	mov	r0, r4
 800e802:	f000 fdf7 	bl	800f3f4 <__lshift>
 800e806:	4639      	mov	r1, r7
 800e808:	9004      	str	r0, [sp, #16]
 800e80a:	f000 fe47 	bl	800f49c <__mcmp>
 800e80e:	2800      	cmp	r0, #0
 800e810:	dc03      	bgt.n	800e81a <_dtoa_r+0xa32>
 800e812:	d1e0      	bne.n	800e7d6 <_dtoa_r+0x9ee>
 800e814:	f018 0f01 	tst.w	r8, #1
 800e818:	d0dd      	beq.n	800e7d6 <_dtoa_r+0x9ee>
 800e81a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e81e:	d1d8      	bne.n	800e7d2 <_dtoa_r+0x9ea>
 800e820:	9b05      	ldr	r3, [sp, #20]
 800e822:	9a05      	ldr	r2, [sp, #20]
 800e824:	1c5d      	adds	r5, r3, #1
 800e826:	2339      	movs	r3, #57	; 0x39
 800e828:	7013      	strb	r3, [r2, #0]
 800e82a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e82e:	2b39      	cmp	r3, #57	; 0x39
 800e830:	f105 32ff 	add.w	r2, r5, #4294967295
 800e834:	d04f      	beq.n	800e8d6 <_dtoa_r+0xaee>
 800e836:	3301      	adds	r3, #1
 800e838:	7013      	strb	r3, [r2, #0]
 800e83a:	e754      	b.n	800e6e6 <_dtoa_r+0x8fe>
 800e83c:	9a05      	ldr	r2, [sp, #20]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f102 0501 	add.w	r5, r2, #1
 800e844:	dd06      	ble.n	800e854 <_dtoa_r+0xa6c>
 800e846:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e84a:	d0e9      	beq.n	800e820 <_dtoa_r+0xa38>
 800e84c:	f108 0801 	add.w	r8, r8, #1
 800e850:	9b05      	ldr	r3, [sp, #20]
 800e852:	e7c2      	b.n	800e7da <_dtoa_r+0x9f2>
 800e854:	9a02      	ldr	r2, [sp, #8]
 800e856:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e85a:	eba5 030b 	sub.w	r3, r5, fp
 800e85e:	4293      	cmp	r3, r2
 800e860:	d021      	beq.n	800e8a6 <_dtoa_r+0xabe>
 800e862:	2300      	movs	r3, #0
 800e864:	220a      	movs	r2, #10
 800e866:	9904      	ldr	r1, [sp, #16]
 800e868:	4620      	mov	r0, r4
 800e86a:	f000 fc0e 	bl	800f08a <__multadd>
 800e86e:	45b1      	cmp	r9, r6
 800e870:	9004      	str	r0, [sp, #16]
 800e872:	f04f 0300 	mov.w	r3, #0
 800e876:	f04f 020a 	mov.w	r2, #10
 800e87a:	4649      	mov	r1, r9
 800e87c:	4620      	mov	r0, r4
 800e87e:	d105      	bne.n	800e88c <_dtoa_r+0xaa4>
 800e880:	f000 fc03 	bl	800f08a <__multadd>
 800e884:	4681      	mov	r9, r0
 800e886:	4606      	mov	r6, r0
 800e888:	9505      	str	r5, [sp, #20]
 800e88a:	e776      	b.n	800e77a <_dtoa_r+0x992>
 800e88c:	f000 fbfd 	bl	800f08a <__multadd>
 800e890:	4631      	mov	r1, r6
 800e892:	4681      	mov	r9, r0
 800e894:	2300      	movs	r3, #0
 800e896:	220a      	movs	r2, #10
 800e898:	4620      	mov	r0, r4
 800e89a:	f000 fbf6 	bl	800f08a <__multadd>
 800e89e:	4606      	mov	r6, r0
 800e8a0:	e7f2      	b.n	800e888 <_dtoa_r+0xaa0>
 800e8a2:	f04f 0900 	mov.w	r9, #0
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	9904      	ldr	r1, [sp, #16]
 800e8aa:	4620      	mov	r0, r4
 800e8ac:	f000 fda2 	bl	800f3f4 <__lshift>
 800e8b0:	4639      	mov	r1, r7
 800e8b2:	9004      	str	r0, [sp, #16]
 800e8b4:	f000 fdf2 	bl	800f49c <__mcmp>
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	dcb6      	bgt.n	800e82a <_dtoa_r+0xa42>
 800e8bc:	d102      	bne.n	800e8c4 <_dtoa_r+0xadc>
 800e8be:	f018 0f01 	tst.w	r8, #1
 800e8c2:	d1b2      	bne.n	800e82a <_dtoa_r+0xa42>
 800e8c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e8c8:	2b30      	cmp	r3, #48	; 0x30
 800e8ca:	f105 32ff 	add.w	r2, r5, #4294967295
 800e8ce:	f47f af0a 	bne.w	800e6e6 <_dtoa_r+0x8fe>
 800e8d2:	4615      	mov	r5, r2
 800e8d4:	e7f6      	b.n	800e8c4 <_dtoa_r+0xadc>
 800e8d6:	4593      	cmp	fp, r2
 800e8d8:	d105      	bne.n	800e8e6 <_dtoa_r+0xafe>
 800e8da:	2331      	movs	r3, #49	; 0x31
 800e8dc:	f10a 0a01 	add.w	sl, sl, #1
 800e8e0:	f88b 3000 	strb.w	r3, [fp]
 800e8e4:	e6ff      	b.n	800e6e6 <_dtoa_r+0x8fe>
 800e8e6:	4615      	mov	r5, r2
 800e8e8:	e79f      	b.n	800e82a <_dtoa_r+0xa42>
 800e8ea:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e950 <_dtoa_r+0xb68>
 800e8ee:	e007      	b.n	800e900 <_dtoa_r+0xb18>
 800e8f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8f2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e954 <_dtoa_r+0xb6c>
 800e8f6:	b11b      	cbz	r3, 800e900 <_dtoa_r+0xb18>
 800e8f8:	f10b 0308 	add.w	r3, fp, #8
 800e8fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8fe:	6013      	str	r3, [r2, #0]
 800e900:	4658      	mov	r0, fp
 800e902:	b017      	add	sp, #92	; 0x5c
 800e904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e908:	9b06      	ldr	r3, [sp, #24]
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	f77f ae35 	ble.w	800e57a <_dtoa_r+0x792>
 800e910:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e912:	9307      	str	r3, [sp, #28]
 800e914:	e649      	b.n	800e5aa <_dtoa_r+0x7c2>
 800e916:	9b02      	ldr	r3, [sp, #8]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	dc03      	bgt.n	800e924 <_dtoa_r+0xb3c>
 800e91c:	9b06      	ldr	r3, [sp, #24]
 800e91e:	2b02      	cmp	r3, #2
 800e920:	f73f aecc 	bgt.w	800e6bc <_dtoa_r+0x8d4>
 800e924:	465d      	mov	r5, fp
 800e926:	4639      	mov	r1, r7
 800e928:	9804      	ldr	r0, [sp, #16]
 800e92a:	f7ff f9cf 	bl	800dccc <quorem>
 800e92e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e932:	f805 8b01 	strb.w	r8, [r5], #1
 800e936:	9a02      	ldr	r2, [sp, #8]
 800e938:	eba5 030b 	sub.w	r3, r5, fp
 800e93c:	429a      	cmp	r2, r3
 800e93e:	ddb0      	ble.n	800e8a2 <_dtoa_r+0xaba>
 800e940:	2300      	movs	r3, #0
 800e942:	220a      	movs	r2, #10
 800e944:	9904      	ldr	r1, [sp, #16]
 800e946:	4620      	mov	r0, r4
 800e948:	f000 fb9f 	bl	800f08a <__multadd>
 800e94c:	9004      	str	r0, [sp, #16]
 800e94e:	e7ea      	b.n	800e926 <_dtoa_r+0xb3e>
 800e950:	0800fc38 	.word	0x0800fc38
 800e954:	0800fcb8 	.word	0x0800fcb8

0800e958 <rshift>:
 800e958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e95a:	6906      	ldr	r6, [r0, #16]
 800e95c:	114b      	asrs	r3, r1, #5
 800e95e:	429e      	cmp	r6, r3
 800e960:	f100 0414 	add.w	r4, r0, #20
 800e964:	dd30      	ble.n	800e9c8 <rshift+0x70>
 800e966:	f011 011f 	ands.w	r1, r1, #31
 800e96a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e96e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e972:	d108      	bne.n	800e986 <rshift+0x2e>
 800e974:	4621      	mov	r1, r4
 800e976:	42b2      	cmp	r2, r6
 800e978:	460b      	mov	r3, r1
 800e97a:	d211      	bcs.n	800e9a0 <rshift+0x48>
 800e97c:	f852 3b04 	ldr.w	r3, [r2], #4
 800e980:	f841 3b04 	str.w	r3, [r1], #4
 800e984:	e7f7      	b.n	800e976 <rshift+0x1e>
 800e986:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e98a:	f1c1 0c20 	rsb	ip, r1, #32
 800e98e:	40cd      	lsrs	r5, r1
 800e990:	3204      	adds	r2, #4
 800e992:	4623      	mov	r3, r4
 800e994:	42b2      	cmp	r2, r6
 800e996:	4617      	mov	r7, r2
 800e998:	d30c      	bcc.n	800e9b4 <rshift+0x5c>
 800e99a:	601d      	str	r5, [r3, #0]
 800e99c:	b105      	cbz	r5, 800e9a0 <rshift+0x48>
 800e99e:	3304      	adds	r3, #4
 800e9a0:	1b1a      	subs	r2, r3, r4
 800e9a2:	42a3      	cmp	r3, r4
 800e9a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e9a8:	bf08      	it	eq
 800e9aa:	2300      	moveq	r3, #0
 800e9ac:	6102      	str	r2, [r0, #16]
 800e9ae:	bf08      	it	eq
 800e9b0:	6143      	streq	r3, [r0, #20]
 800e9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e9b4:	683f      	ldr	r7, [r7, #0]
 800e9b6:	fa07 f70c 	lsl.w	r7, r7, ip
 800e9ba:	433d      	orrs	r5, r7
 800e9bc:	f843 5b04 	str.w	r5, [r3], #4
 800e9c0:	f852 5b04 	ldr.w	r5, [r2], #4
 800e9c4:	40cd      	lsrs	r5, r1
 800e9c6:	e7e5      	b.n	800e994 <rshift+0x3c>
 800e9c8:	4623      	mov	r3, r4
 800e9ca:	e7e9      	b.n	800e9a0 <rshift+0x48>

0800e9cc <__hexdig_fun>:
 800e9cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e9d0:	2b09      	cmp	r3, #9
 800e9d2:	d802      	bhi.n	800e9da <__hexdig_fun+0xe>
 800e9d4:	3820      	subs	r0, #32
 800e9d6:	b2c0      	uxtb	r0, r0
 800e9d8:	4770      	bx	lr
 800e9da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e9de:	2b05      	cmp	r3, #5
 800e9e0:	d801      	bhi.n	800e9e6 <__hexdig_fun+0x1a>
 800e9e2:	3847      	subs	r0, #71	; 0x47
 800e9e4:	e7f7      	b.n	800e9d6 <__hexdig_fun+0xa>
 800e9e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e9ea:	2b05      	cmp	r3, #5
 800e9ec:	d801      	bhi.n	800e9f2 <__hexdig_fun+0x26>
 800e9ee:	3827      	subs	r0, #39	; 0x27
 800e9f0:	e7f1      	b.n	800e9d6 <__hexdig_fun+0xa>
 800e9f2:	2000      	movs	r0, #0
 800e9f4:	4770      	bx	lr

0800e9f6 <__gethex>:
 800e9f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fa:	b08b      	sub	sp, #44	; 0x2c
 800e9fc:	468a      	mov	sl, r1
 800e9fe:	9002      	str	r0, [sp, #8]
 800ea00:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ea02:	9306      	str	r3, [sp, #24]
 800ea04:	4690      	mov	r8, r2
 800ea06:	f000 fad0 	bl	800efaa <__localeconv_l>
 800ea0a:	6803      	ldr	r3, [r0, #0]
 800ea0c:	9303      	str	r3, [sp, #12]
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f7f1 fbde 	bl	80001d0 <strlen>
 800ea14:	9b03      	ldr	r3, [sp, #12]
 800ea16:	9001      	str	r0, [sp, #4]
 800ea18:	4403      	add	r3, r0
 800ea1a:	f04f 0b00 	mov.w	fp, #0
 800ea1e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ea22:	9307      	str	r3, [sp, #28]
 800ea24:	f8da 3000 	ldr.w	r3, [sl]
 800ea28:	3302      	adds	r3, #2
 800ea2a:	461f      	mov	r7, r3
 800ea2c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea30:	2830      	cmp	r0, #48	; 0x30
 800ea32:	d06c      	beq.n	800eb0e <__gethex+0x118>
 800ea34:	f7ff ffca 	bl	800e9cc <__hexdig_fun>
 800ea38:	4604      	mov	r4, r0
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d16a      	bne.n	800eb14 <__gethex+0x11e>
 800ea3e:	9a01      	ldr	r2, [sp, #4]
 800ea40:	9903      	ldr	r1, [sp, #12]
 800ea42:	4638      	mov	r0, r7
 800ea44:	f001 f836 	bl	800fab4 <strncmp>
 800ea48:	2800      	cmp	r0, #0
 800ea4a:	d166      	bne.n	800eb1a <__gethex+0x124>
 800ea4c:	9b01      	ldr	r3, [sp, #4]
 800ea4e:	5cf8      	ldrb	r0, [r7, r3]
 800ea50:	18fe      	adds	r6, r7, r3
 800ea52:	f7ff ffbb 	bl	800e9cc <__hexdig_fun>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d062      	beq.n	800eb20 <__gethex+0x12a>
 800ea5a:	4633      	mov	r3, r6
 800ea5c:	7818      	ldrb	r0, [r3, #0]
 800ea5e:	2830      	cmp	r0, #48	; 0x30
 800ea60:	461f      	mov	r7, r3
 800ea62:	f103 0301 	add.w	r3, r3, #1
 800ea66:	d0f9      	beq.n	800ea5c <__gethex+0x66>
 800ea68:	f7ff ffb0 	bl	800e9cc <__hexdig_fun>
 800ea6c:	fab0 f580 	clz	r5, r0
 800ea70:	096d      	lsrs	r5, r5, #5
 800ea72:	4634      	mov	r4, r6
 800ea74:	f04f 0b01 	mov.w	fp, #1
 800ea78:	463a      	mov	r2, r7
 800ea7a:	4616      	mov	r6, r2
 800ea7c:	3201      	adds	r2, #1
 800ea7e:	7830      	ldrb	r0, [r6, #0]
 800ea80:	f7ff ffa4 	bl	800e9cc <__hexdig_fun>
 800ea84:	2800      	cmp	r0, #0
 800ea86:	d1f8      	bne.n	800ea7a <__gethex+0x84>
 800ea88:	9a01      	ldr	r2, [sp, #4]
 800ea8a:	9903      	ldr	r1, [sp, #12]
 800ea8c:	4630      	mov	r0, r6
 800ea8e:	f001 f811 	bl	800fab4 <strncmp>
 800ea92:	b950      	cbnz	r0, 800eaaa <__gethex+0xb4>
 800ea94:	b954      	cbnz	r4, 800eaac <__gethex+0xb6>
 800ea96:	9b01      	ldr	r3, [sp, #4]
 800ea98:	18f4      	adds	r4, r6, r3
 800ea9a:	4622      	mov	r2, r4
 800ea9c:	4616      	mov	r6, r2
 800ea9e:	3201      	adds	r2, #1
 800eaa0:	7830      	ldrb	r0, [r6, #0]
 800eaa2:	f7ff ff93 	bl	800e9cc <__hexdig_fun>
 800eaa6:	2800      	cmp	r0, #0
 800eaa8:	d1f8      	bne.n	800ea9c <__gethex+0xa6>
 800eaaa:	b10c      	cbz	r4, 800eab0 <__gethex+0xba>
 800eaac:	1ba4      	subs	r4, r4, r6
 800eaae:	00a4      	lsls	r4, r4, #2
 800eab0:	7833      	ldrb	r3, [r6, #0]
 800eab2:	2b50      	cmp	r3, #80	; 0x50
 800eab4:	d001      	beq.n	800eaba <__gethex+0xc4>
 800eab6:	2b70      	cmp	r3, #112	; 0x70
 800eab8:	d140      	bne.n	800eb3c <__gethex+0x146>
 800eaba:	7873      	ldrb	r3, [r6, #1]
 800eabc:	2b2b      	cmp	r3, #43	; 0x2b
 800eabe:	d031      	beq.n	800eb24 <__gethex+0x12e>
 800eac0:	2b2d      	cmp	r3, #45	; 0x2d
 800eac2:	d033      	beq.n	800eb2c <__gethex+0x136>
 800eac4:	1c71      	adds	r1, r6, #1
 800eac6:	f04f 0900 	mov.w	r9, #0
 800eaca:	7808      	ldrb	r0, [r1, #0]
 800eacc:	f7ff ff7e 	bl	800e9cc <__hexdig_fun>
 800ead0:	1e43      	subs	r3, r0, #1
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	2b18      	cmp	r3, #24
 800ead6:	d831      	bhi.n	800eb3c <__gethex+0x146>
 800ead8:	f1a0 0210 	sub.w	r2, r0, #16
 800eadc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eae0:	f7ff ff74 	bl	800e9cc <__hexdig_fun>
 800eae4:	1e43      	subs	r3, r0, #1
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	2b18      	cmp	r3, #24
 800eaea:	d922      	bls.n	800eb32 <__gethex+0x13c>
 800eaec:	f1b9 0f00 	cmp.w	r9, #0
 800eaf0:	d000      	beq.n	800eaf4 <__gethex+0xfe>
 800eaf2:	4252      	negs	r2, r2
 800eaf4:	4414      	add	r4, r2
 800eaf6:	f8ca 1000 	str.w	r1, [sl]
 800eafa:	b30d      	cbz	r5, 800eb40 <__gethex+0x14a>
 800eafc:	f1bb 0f00 	cmp.w	fp, #0
 800eb00:	bf0c      	ite	eq
 800eb02:	2706      	moveq	r7, #6
 800eb04:	2700      	movne	r7, #0
 800eb06:	4638      	mov	r0, r7
 800eb08:	b00b      	add	sp, #44	; 0x2c
 800eb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb0e:	f10b 0b01 	add.w	fp, fp, #1
 800eb12:	e78a      	b.n	800ea2a <__gethex+0x34>
 800eb14:	2500      	movs	r5, #0
 800eb16:	462c      	mov	r4, r5
 800eb18:	e7ae      	b.n	800ea78 <__gethex+0x82>
 800eb1a:	463e      	mov	r6, r7
 800eb1c:	2501      	movs	r5, #1
 800eb1e:	e7c7      	b.n	800eab0 <__gethex+0xba>
 800eb20:	4604      	mov	r4, r0
 800eb22:	e7fb      	b.n	800eb1c <__gethex+0x126>
 800eb24:	f04f 0900 	mov.w	r9, #0
 800eb28:	1cb1      	adds	r1, r6, #2
 800eb2a:	e7ce      	b.n	800eaca <__gethex+0xd4>
 800eb2c:	f04f 0901 	mov.w	r9, #1
 800eb30:	e7fa      	b.n	800eb28 <__gethex+0x132>
 800eb32:	230a      	movs	r3, #10
 800eb34:	fb03 0202 	mla	r2, r3, r2, r0
 800eb38:	3a10      	subs	r2, #16
 800eb3a:	e7cf      	b.n	800eadc <__gethex+0xe6>
 800eb3c:	4631      	mov	r1, r6
 800eb3e:	e7da      	b.n	800eaf6 <__gethex+0x100>
 800eb40:	1bf3      	subs	r3, r6, r7
 800eb42:	3b01      	subs	r3, #1
 800eb44:	4629      	mov	r1, r5
 800eb46:	2b07      	cmp	r3, #7
 800eb48:	dc49      	bgt.n	800ebde <__gethex+0x1e8>
 800eb4a:	9802      	ldr	r0, [sp, #8]
 800eb4c:	f000 fa52 	bl	800eff4 <_Balloc>
 800eb50:	9b01      	ldr	r3, [sp, #4]
 800eb52:	f100 0914 	add.w	r9, r0, #20
 800eb56:	f04f 0b00 	mov.w	fp, #0
 800eb5a:	f1c3 0301 	rsb	r3, r3, #1
 800eb5e:	4605      	mov	r5, r0
 800eb60:	f8cd 9010 	str.w	r9, [sp, #16]
 800eb64:	46da      	mov	sl, fp
 800eb66:	9308      	str	r3, [sp, #32]
 800eb68:	42b7      	cmp	r7, r6
 800eb6a:	d33b      	bcc.n	800ebe4 <__gethex+0x1ee>
 800eb6c:	9804      	ldr	r0, [sp, #16]
 800eb6e:	f840 ab04 	str.w	sl, [r0], #4
 800eb72:	eba0 0009 	sub.w	r0, r0, r9
 800eb76:	1080      	asrs	r0, r0, #2
 800eb78:	6128      	str	r0, [r5, #16]
 800eb7a:	0147      	lsls	r7, r0, #5
 800eb7c:	4650      	mov	r0, sl
 800eb7e:	f000 fafd 	bl	800f17c <__hi0bits>
 800eb82:	f8d8 6000 	ldr.w	r6, [r8]
 800eb86:	1a3f      	subs	r7, r7, r0
 800eb88:	42b7      	cmp	r7, r6
 800eb8a:	dd64      	ble.n	800ec56 <__gethex+0x260>
 800eb8c:	1bbf      	subs	r7, r7, r6
 800eb8e:	4639      	mov	r1, r7
 800eb90:	4628      	mov	r0, r5
 800eb92:	f000 fe0d 	bl	800f7b0 <__any_on>
 800eb96:	4682      	mov	sl, r0
 800eb98:	b178      	cbz	r0, 800ebba <__gethex+0x1c4>
 800eb9a:	1e7b      	subs	r3, r7, #1
 800eb9c:	1159      	asrs	r1, r3, #5
 800eb9e:	f003 021f 	and.w	r2, r3, #31
 800eba2:	f04f 0a01 	mov.w	sl, #1
 800eba6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ebaa:	fa0a f202 	lsl.w	r2, sl, r2
 800ebae:	420a      	tst	r2, r1
 800ebb0:	d003      	beq.n	800ebba <__gethex+0x1c4>
 800ebb2:	4553      	cmp	r3, sl
 800ebb4:	dc46      	bgt.n	800ec44 <__gethex+0x24e>
 800ebb6:	f04f 0a02 	mov.w	sl, #2
 800ebba:	4639      	mov	r1, r7
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	f7ff fecb 	bl	800e958 <rshift>
 800ebc2:	443c      	add	r4, r7
 800ebc4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebc8:	42a3      	cmp	r3, r4
 800ebca:	da52      	bge.n	800ec72 <__gethex+0x27c>
 800ebcc:	4629      	mov	r1, r5
 800ebce:	9802      	ldr	r0, [sp, #8]
 800ebd0:	f000 fa44 	bl	800f05c <_Bfree>
 800ebd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	6013      	str	r3, [r2, #0]
 800ebda:	27a3      	movs	r7, #163	; 0xa3
 800ebdc:	e793      	b.n	800eb06 <__gethex+0x110>
 800ebde:	3101      	adds	r1, #1
 800ebe0:	105b      	asrs	r3, r3, #1
 800ebe2:	e7b0      	b.n	800eb46 <__gethex+0x150>
 800ebe4:	1e73      	subs	r3, r6, #1
 800ebe6:	9305      	str	r3, [sp, #20]
 800ebe8:	9a07      	ldr	r2, [sp, #28]
 800ebea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d018      	beq.n	800ec24 <__gethex+0x22e>
 800ebf2:	f1bb 0f20 	cmp.w	fp, #32
 800ebf6:	d107      	bne.n	800ec08 <__gethex+0x212>
 800ebf8:	9b04      	ldr	r3, [sp, #16]
 800ebfa:	f8c3 a000 	str.w	sl, [r3]
 800ebfe:	3304      	adds	r3, #4
 800ec00:	f04f 0a00 	mov.w	sl, #0
 800ec04:	9304      	str	r3, [sp, #16]
 800ec06:	46d3      	mov	fp, sl
 800ec08:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ec0c:	f7ff fede 	bl	800e9cc <__hexdig_fun>
 800ec10:	f000 000f 	and.w	r0, r0, #15
 800ec14:	fa00 f00b 	lsl.w	r0, r0, fp
 800ec18:	ea4a 0a00 	orr.w	sl, sl, r0
 800ec1c:	f10b 0b04 	add.w	fp, fp, #4
 800ec20:	9b05      	ldr	r3, [sp, #20]
 800ec22:	e00d      	b.n	800ec40 <__gethex+0x24a>
 800ec24:	9b05      	ldr	r3, [sp, #20]
 800ec26:	9a08      	ldr	r2, [sp, #32]
 800ec28:	4413      	add	r3, r2
 800ec2a:	42bb      	cmp	r3, r7
 800ec2c:	d3e1      	bcc.n	800ebf2 <__gethex+0x1fc>
 800ec2e:	4618      	mov	r0, r3
 800ec30:	9a01      	ldr	r2, [sp, #4]
 800ec32:	9903      	ldr	r1, [sp, #12]
 800ec34:	9309      	str	r3, [sp, #36]	; 0x24
 800ec36:	f000 ff3d 	bl	800fab4 <strncmp>
 800ec3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	d1d8      	bne.n	800ebf2 <__gethex+0x1fc>
 800ec40:	461e      	mov	r6, r3
 800ec42:	e791      	b.n	800eb68 <__gethex+0x172>
 800ec44:	1eb9      	subs	r1, r7, #2
 800ec46:	4628      	mov	r0, r5
 800ec48:	f000 fdb2 	bl	800f7b0 <__any_on>
 800ec4c:	2800      	cmp	r0, #0
 800ec4e:	d0b2      	beq.n	800ebb6 <__gethex+0x1c0>
 800ec50:	f04f 0a03 	mov.w	sl, #3
 800ec54:	e7b1      	b.n	800ebba <__gethex+0x1c4>
 800ec56:	da09      	bge.n	800ec6c <__gethex+0x276>
 800ec58:	1bf7      	subs	r7, r6, r7
 800ec5a:	4629      	mov	r1, r5
 800ec5c:	463a      	mov	r2, r7
 800ec5e:	9802      	ldr	r0, [sp, #8]
 800ec60:	f000 fbc8 	bl	800f3f4 <__lshift>
 800ec64:	1be4      	subs	r4, r4, r7
 800ec66:	4605      	mov	r5, r0
 800ec68:	f100 0914 	add.w	r9, r0, #20
 800ec6c:	f04f 0a00 	mov.w	sl, #0
 800ec70:	e7a8      	b.n	800ebc4 <__gethex+0x1ce>
 800ec72:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ec76:	42a0      	cmp	r0, r4
 800ec78:	dd6a      	ble.n	800ed50 <__gethex+0x35a>
 800ec7a:	1b04      	subs	r4, r0, r4
 800ec7c:	42a6      	cmp	r6, r4
 800ec7e:	dc2e      	bgt.n	800ecde <__gethex+0x2e8>
 800ec80:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ec84:	2b02      	cmp	r3, #2
 800ec86:	d022      	beq.n	800ecce <__gethex+0x2d8>
 800ec88:	2b03      	cmp	r3, #3
 800ec8a:	d024      	beq.n	800ecd6 <__gethex+0x2e0>
 800ec8c:	2b01      	cmp	r3, #1
 800ec8e:	d115      	bne.n	800ecbc <__gethex+0x2c6>
 800ec90:	42a6      	cmp	r6, r4
 800ec92:	d113      	bne.n	800ecbc <__gethex+0x2c6>
 800ec94:	2e01      	cmp	r6, #1
 800ec96:	dc0b      	bgt.n	800ecb0 <__gethex+0x2ba>
 800ec98:	9a06      	ldr	r2, [sp, #24]
 800ec9a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ec9e:	6013      	str	r3, [r2, #0]
 800eca0:	2301      	movs	r3, #1
 800eca2:	612b      	str	r3, [r5, #16]
 800eca4:	f8c9 3000 	str.w	r3, [r9]
 800eca8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ecaa:	2762      	movs	r7, #98	; 0x62
 800ecac:	601d      	str	r5, [r3, #0]
 800ecae:	e72a      	b.n	800eb06 <__gethex+0x110>
 800ecb0:	1e71      	subs	r1, r6, #1
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f000 fd7c 	bl	800f7b0 <__any_on>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d1ed      	bne.n	800ec98 <__gethex+0x2a2>
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	9802      	ldr	r0, [sp, #8]
 800ecc0:	f000 f9cc 	bl	800f05c <_Bfree>
 800ecc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	6013      	str	r3, [r2, #0]
 800ecca:	2750      	movs	r7, #80	; 0x50
 800eccc:	e71b      	b.n	800eb06 <__gethex+0x110>
 800ecce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d0e1      	beq.n	800ec98 <__gethex+0x2a2>
 800ecd4:	e7f2      	b.n	800ecbc <__gethex+0x2c6>
 800ecd6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1dd      	bne.n	800ec98 <__gethex+0x2a2>
 800ecdc:	e7ee      	b.n	800ecbc <__gethex+0x2c6>
 800ecde:	1e67      	subs	r7, r4, #1
 800ece0:	f1ba 0f00 	cmp.w	sl, #0
 800ece4:	d131      	bne.n	800ed4a <__gethex+0x354>
 800ece6:	b127      	cbz	r7, 800ecf2 <__gethex+0x2fc>
 800ece8:	4639      	mov	r1, r7
 800ecea:	4628      	mov	r0, r5
 800ecec:	f000 fd60 	bl	800f7b0 <__any_on>
 800ecf0:	4682      	mov	sl, r0
 800ecf2:	117a      	asrs	r2, r7, #5
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	f007 071f 	and.w	r7, r7, #31
 800ecfa:	fa03 f707 	lsl.w	r7, r3, r7
 800ecfe:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ed02:	4621      	mov	r1, r4
 800ed04:	421f      	tst	r7, r3
 800ed06:	4628      	mov	r0, r5
 800ed08:	bf18      	it	ne
 800ed0a:	f04a 0a02 	orrne.w	sl, sl, #2
 800ed0e:	1b36      	subs	r6, r6, r4
 800ed10:	f7ff fe22 	bl	800e958 <rshift>
 800ed14:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800ed18:	2702      	movs	r7, #2
 800ed1a:	f1ba 0f00 	cmp.w	sl, #0
 800ed1e:	d048      	beq.n	800edb2 <__gethex+0x3bc>
 800ed20:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d015      	beq.n	800ed54 <__gethex+0x35e>
 800ed28:	2b03      	cmp	r3, #3
 800ed2a:	d017      	beq.n	800ed5c <__gethex+0x366>
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d109      	bne.n	800ed44 <__gethex+0x34e>
 800ed30:	f01a 0f02 	tst.w	sl, #2
 800ed34:	d006      	beq.n	800ed44 <__gethex+0x34e>
 800ed36:	f8d9 3000 	ldr.w	r3, [r9]
 800ed3a:	ea4a 0a03 	orr.w	sl, sl, r3
 800ed3e:	f01a 0f01 	tst.w	sl, #1
 800ed42:	d10e      	bne.n	800ed62 <__gethex+0x36c>
 800ed44:	f047 0710 	orr.w	r7, r7, #16
 800ed48:	e033      	b.n	800edb2 <__gethex+0x3bc>
 800ed4a:	f04f 0a01 	mov.w	sl, #1
 800ed4e:	e7d0      	b.n	800ecf2 <__gethex+0x2fc>
 800ed50:	2701      	movs	r7, #1
 800ed52:	e7e2      	b.n	800ed1a <__gethex+0x324>
 800ed54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed56:	f1c3 0301 	rsb	r3, r3, #1
 800ed5a:	9315      	str	r3, [sp, #84]	; 0x54
 800ed5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d0f0      	beq.n	800ed44 <__gethex+0x34e>
 800ed62:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ed66:	f105 0314 	add.w	r3, r5, #20
 800ed6a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ed6e:	eb03 010a 	add.w	r1, r3, sl
 800ed72:	f04f 0c00 	mov.w	ip, #0
 800ed76:	4618      	mov	r0, r3
 800ed78:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed7c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ed80:	d01c      	beq.n	800edbc <__gethex+0x3c6>
 800ed82:	3201      	adds	r2, #1
 800ed84:	6002      	str	r2, [r0, #0]
 800ed86:	2f02      	cmp	r7, #2
 800ed88:	f105 0314 	add.w	r3, r5, #20
 800ed8c:	d138      	bne.n	800ee00 <__gethex+0x40a>
 800ed8e:	f8d8 2000 	ldr.w	r2, [r8]
 800ed92:	3a01      	subs	r2, #1
 800ed94:	42b2      	cmp	r2, r6
 800ed96:	d10a      	bne.n	800edae <__gethex+0x3b8>
 800ed98:	1171      	asrs	r1, r6, #5
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f006 061f 	and.w	r6, r6, #31
 800eda0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eda4:	fa02 f606 	lsl.w	r6, r2, r6
 800eda8:	421e      	tst	r6, r3
 800edaa:	bf18      	it	ne
 800edac:	4617      	movne	r7, r2
 800edae:	f047 0720 	orr.w	r7, r7, #32
 800edb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800edb4:	601d      	str	r5, [r3, #0]
 800edb6:	9b06      	ldr	r3, [sp, #24]
 800edb8:	601c      	str	r4, [r3, #0]
 800edba:	e6a4      	b.n	800eb06 <__gethex+0x110>
 800edbc:	4299      	cmp	r1, r3
 800edbe:	f843 cc04 	str.w	ip, [r3, #-4]
 800edc2:	d8d8      	bhi.n	800ed76 <__gethex+0x380>
 800edc4:	68ab      	ldr	r3, [r5, #8]
 800edc6:	4599      	cmp	r9, r3
 800edc8:	db12      	blt.n	800edf0 <__gethex+0x3fa>
 800edca:	6869      	ldr	r1, [r5, #4]
 800edcc:	9802      	ldr	r0, [sp, #8]
 800edce:	3101      	adds	r1, #1
 800edd0:	f000 f910 	bl	800eff4 <_Balloc>
 800edd4:	692a      	ldr	r2, [r5, #16]
 800edd6:	3202      	adds	r2, #2
 800edd8:	f105 010c 	add.w	r1, r5, #12
 800eddc:	4683      	mov	fp, r0
 800edde:	0092      	lsls	r2, r2, #2
 800ede0:	300c      	adds	r0, #12
 800ede2:	f7fd f995 	bl	800c110 <memcpy>
 800ede6:	4629      	mov	r1, r5
 800ede8:	9802      	ldr	r0, [sp, #8]
 800edea:	f000 f937 	bl	800f05c <_Bfree>
 800edee:	465d      	mov	r5, fp
 800edf0:	692b      	ldr	r3, [r5, #16]
 800edf2:	1c5a      	adds	r2, r3, #1
 800edf4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800edf8:	612a      	str	r2, [r5, #16]
 800edfa:	2201      	movs	r2, #1
 800edfc:	615a      	str	r2, [r3, #20]
 800edfe:	e7c2      	b.n	800ed86 <__gethex+0x390>
 800ee00:	692a      	ldr	r2, [r5, #16]
 800ee02:	454a      	cmp	r2, r9
 800ee04:	dd0b      	ble.n	800ee1e <__gethex+0x428>
 800ee06:	2101      	movs	r1, #1
 800ee08:	4628      	mov	r0, r5
 800ee0a:	f7ff fda5 	bl	800e958 <rshift>
 800ee0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ee12:	3401      	adds	r4, #1
 800ee14:	42a3      	cmp	r3, r4
 800ee16:	f6ff aed9 	blt.w	800ebcc <__gethex+0x1d6>
 800ee1a:	2701      	movs	r7, #1
 800ee1c:	e7c7      	b.n	800edae <__gethex+0x3b8>
 800ee1e:	f016 061f 	ands.w	r6, r6, #31
 800ee22:	d0fa      	beq.n	800ee1a <__gethex+0x424>
 800ee24:	449a      	add	sl, r3
 800ee26:	f1c6 0620 	rsb	r6, r6, #32
 800ee2a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ee2e:	f000 f9a5 	bl	800f17c <__hi0bits>
 800ee32:	42b0      	cmp	r0, r6
 800ee34:	dbe7      	blt.n	800ee06 <__gethex+0x410>
 800ee36:	e7f0      	b.n	800ee1a <__gethex+0x424>

0800ee38 <L_shift>:
 800ee38:	f1c2 0208 	rsb	r2, r2, #8
 800ee3c:	0092      	lsls	r2, r2, #2
 800ee3e:	b570      	push	{r4, r5, r6, lr}
 800ee40:	f1c2 0620 	rsb	r6, r2, #32
 800ee44:	6843      	ldr	r3, [r0, #4]
 800ee46:	6804      	ldr	r4, [r0, #0]
 800ee48:	fa03 f506 	lsl.w	r5, r3, r6
 800ee4c:	432c      	orrs	r4, r5
 800ee4e:	40d3      	lsrs	r3, r2
 800ee50:	6004      	str	r4, [r0, #0]
 800ee52:	f840 3f04 	str.w	r3, [r0, #4]!
 800ee56:	4288      	cmp	r0, r1
 800ee58:	d3f4      	bcc.n	800ee44 <L_shift+0xc>
 800ee5a:	bd70      	pop	{r4, r5, r6, pc}

0800ee5c <__match>:
 800ee5c:	b530      	push	{r4, r5, lr}
 800ee5e:	6803      	ldr	r3, [r0, #0]
 800ee60:	3301      	adds	r3, #1
 800ee62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee66:	b914      	cbnz	r4, 800ee6e <__match+0x12>
 800ee68:	6003      	str	r3, [r0, #0]
 800ee6a:	2001      	movs	r0, #1
 800ee6c:	bd30      	pop	{r4, r5, pc}
 800ee6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee72:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ee76:	2d19      	cmp	r5, #25
 800ee78:	bf98      	it	ls
 800ee7a:	3220      	addls	r2, #32
 800ee7c:	42a2      	cmp	r2, r4
 800ee7e:	d0f0      	beq.n	800ee62 <__match+0x6>
 800ee80:	2000      	movs	r0, #0
 800ee82:	e7f3      	b.n	800ee6c <__match+0x10>

0800ee84 <__hexnan>:
 800ee84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee88:	680b      	ldr	r3, [r1, #0]
 800ee8a:	6801      	ldr	r1, [r0, #0]
 800ee8c:	115f      	asrs	r7, r3, #5
 800ee8e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ee92:	f013 031f 	ands.w	r3, r3, #31
 800ee96:	b087      	sub	sp, #28
 800ee98:	bf18      	it	ne
 800ee9a:	3704      	addne	r7, #4
 800ee9c:	2500      	movs	r5, #0
 800ee9e:	1f3e      	subs	r6, r7, #4
 800eea0:	4682      	mov	sl, r0
 800eea2:	4690      	mov	r8, r2
 800eea4:	9301      	str	r3, [sp, #4]
 800eea6:	f847 5c04 	str.w	r5, [r7, #-4]
 800eeaa:	46b1      	mov	r9, r6
 800eeac:	4634      	mov	r4, r6
 800eeae:	9502      	str	r5, [sp, #8]
 800eeb0:	46ab      	mov	fp, r5
 800eeb2:	784a      	ldrb	r2, [r1, #1]
 800eeb4:	1c4b      	adds	r3, r1, #1
 800eeb6:	9303      	str	r3, [sp, #12]
 800eeb8:	b342      	cbz	r2, 800ef0c <__hexnan+0x88>
 800eeba:	4610      	mov	r0, r2
 800eebc:	9105      	str	r1, [sp, #20]
 800eebe:	9204      	str	r2, [sp, #16]
 800eec0:	f7ff fd84 	bl	800e9cc <__hexdig_fun>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	d143      	bne.n	800ef50 <__hexnan+0xcc>
 800eec8:	9a04      	ldr	r2, [sp, #16]
 800eeca:	9905      	ldr	r1, [sp, #20]
 800eecc:	2a20      	cmp	r2, #32
 800eece:	d818      	bhi.n	800ef02 <__hexnan+0x7e>
 800eed0:	9b02      	ldr	r3, [sp, #8]
 800eed2:	459b      	cmp	fp, r3
 800eed4:	dd13      	ble.n	800eefe <__hexnan+0x7a>
 800eed6:	454c      	cmp	r4, r9
 800eed8:	d206      	bcs.n	800eee8 <__hexnan+0x64>
 800eeda:	2d07      	cmp	r5, #7
 800eedc:	dc04      	bgt.n	800eee8 <__hexnan+0x64>
 800eede:	462a      	mov	r2, r5
 800eee0:	4649      	mov	r1, r9
 800eee2:	4620      	mov	r0, r4
 800eee4:	f7ff ffa8 	bl	800ee38 <L_shift>
 800eee8:	4544      	cmp	r4, r8
 800eeea:	d944      	bls.n	800ef76 <__hexnan+0xf2>
 800eeec:	2300      	movs	r3, #0
 800eeee:	f1a4 0904 	sub.w	r9, r4, #4
 800eef2:	f844 3c04 	str.w	r3, [r4, #-4]
 800eef6:	f8cd b008 	str.w	fp, [sp, #8]
 800eefa:	464c      	mov	r4, r9
 800eefc:	461d      	mov	r5, r3
 800eefe:	9903      	ldr	r1, [sp, #12]
 800ef00:	e7d7      	b.n	800eeb2 <__hexnan+0x2e>
 800ef02:	2a29      	cmp	r2, #41	; 0x29
 800ef04:	d14a      	bne.n	800ef9c <__hexnan+0x118>
 800ef06:	3102      	adds	r1, #2
 800ef08:	f8ca 1000 	str.w	r1, [sl]
 800ef0c:	f1bb 0f00 	cmp.w	fp, #0
 800ef10:	d044      	beq.n	800ef9c <__hexnan+0x118>
 800ef12:	454c      	cmp	r4, r9
 800ef14:	d206      	bcs.n	800ef24 <__hexnan+0xa0>
 800ef16:	2d07      	cmp	r5, #7
 800ef18:	dc04      	bgt.n	800ef24 <__hexnan+0xa0>
 800ef1a:	462a      	mov	r2, r5
 800ef1c:	4649      	mov	r1, r9
 800ef1e:	4620      	mov	r0, r4
 800ef20:	f7ff ff8a 	bl	800ee38 <L_shift>
 800ef24:	4544      	cmp	r4, r8
 800ef26:	d928      	bls.n	800ef7a <__hexnan+0xf6>
 800ef28:	4643      	mov	r3, r8
 800ef2a:	f854 2b04 	ldr.w	r2, [r4], #4
 800ef2e:	f843 2b04 	str.w	r2, [r3], #4
 800ef32:	42a6      	cmp	r6, r4
 800ef34:	d2f9      	bcs.n	800ef2a <__hexnan+0xa6>
 800ef36:	2200      	movs	r2, #0
 800ef38:	f843 2b04 	str.w	r2, [r3], #4
 800ef3c:	429e      	cmp	r6, r3
 800ef3e:	d2fb      	bcs.n	800ef38 <__hexnan+0xb4>
 800ef40:	6833      	ldr	r3, [r6, #0]
 800ef42:	b91b      	cbnz	r3, 800ef4c <__hexnan+0xc8>
 800ef44:	4546      	cmp	r6, r8
 800ef46:	d127      	bne.n	800ef98 <__hexnan+0x114>
 800ef48:	2301      	movs	r3, #1
 800ef4a:	6033      	str	r3, [r6, #0]
 800ef4c:	2005      	movs	r0, #5
 800ef4e:	e026      	b.n	800ef9e <__hexnan+0x11a>
 800ef50:	3501      	adds	r5, #1
 800ef52:	2d08      	cmp	r5, #8
 800ef54:	f10b 0b01 	add.w	fp, fp, #1
 800ef58:	dd06      	ble.n	800ef68 <__hexnan+0xe4>
 800ef5a:	4544      	cmp	r4, r8
 800ef5c:	d9cf      	bls.n	800eefe <__hexnan+0x7a>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	f844 3c04 	str.w	r3, [r4, #-4]
 800ef64:	2501      	movs	r5, #1
 800ef66:	3c04      	subs	r4, #4
 800ef68:	6822      	ldr	r2, [r4, #0]
 800ef6a:	f000 000f 	and.w	r0, r0, #15
 800ef6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ef72:	6020      	str	r0, [r4, #0]
 800ef74:	e7c3      	b.n	800eefe <__hexnan+0x7a>
 800ef76:	2508      	movs	r5, #8
 800ef78:	e7c1      	b.n	800eefe <__hexnan+0x7a>
 800ef7a:	9b01      	ldr	r3, [sp, #4]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d0df      	beq.n	800ef40 <__hexnan+0xbc>
 800ef80:	f04f 32ff 	mov.w	r2, #4294967295
 800ef84:	f1c3 0320 	rsb	r3, r3, #32
 800ef88:	fa22 f303 	lsr.w	r3, r2, r3
 800ef8c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800ef90:	401a      	ands	r2, r3
 800ef92:	f847 2c04 	str.w	r2, [r7, #-4]
 800ef96:	e7d3      	b.n	800ef40 <__hexnan+0xbc>
 800ef98:	3e04      	subs	r6, #4
 800ef9a:	e7d1      	b.n	800ef40 <__hexnan+0xbc>
 800ef9c:	2004      	movs	r0, #4
 800ef9e:	b007      	add	sp, #28
 800efa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800efa4 <__locale_ctype_ptr_l>:
 800efa4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800efa8:	4770      	bx	lr

0800efaa <__localeconv_l>:
 800efaa:	30f0      	adds	r0, #240	; 0xf0
 800efac:	4770      	bx	lr
	...

0800efb0 <_localeconv_r>:
 800efb0:	4b04      	ldr	r3, [pc, #16]	; (800efc4 <_localeconv_r+0x14>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	6a18      	ldr	r0, [r3, #32]
 800efb6:	4b04      	ldr	r3, [pc, #16]	; (800efc8 <_localeconv_r+0x18>)
 800efb8:	2800      	cmp	r0, #0
 800efba:	bf08      	it	eq
 800efbc:	4618      	moveq	r0, r3
 800efbe:	30f0      	adds	r0, #240	; 0xf0
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	20000180 	.word	0x20000180
 800efc8:	200001e4 	.word	0x200001e4

0800efcc <__ascii_mbtowc>:
 800efcc:	b082      	sub	sp, #8
 800efce:	b901      	cbnz	r1, 800efd2 <__ascii_mbtowc+0x6>
 800efd0:	a901      	add	r1, sp, #4
 800efd2:	b142      	cbz	r2, 800efe6 <__ascii_mbtowc+0x1a>
 800efd4:	b14b      	cbz	r3, 800efea <__ascii_mbtowc+0x1e>
 800efd6:	7813      	ldrb	r3, [r2, #0]
 800efd8:	600b      	str	r3, [r1, #0]
 800efda:	7812      	ldrb	r2, [r2, #0]
 800efdc:	1c10      	adds	r0, r2, #0
 800efde:	bf18      	it	ne
 800efe0:	2001      	movne	r0, #1
 800efe2:	b002      	add	sp, #8
 800efe4:	4770      	bx	lr
 800efe6:	4610      	mov	r0, r2
 800efe8:	e7fb      	b.n	800efe2 <__ascii_mbtowc+0x16>
 800efea:	f06f 0001 	mvn.w	r0, #1
 800efee:	e7f8      	b.n	800efe2 <__ascii_mbtowc+0x16>

0800eff0 <__malloc_lock>:
 800eff0:	4770      	bx	lr

0800eff2 <__malloc_unlock>:
 800eff2:	4770      	bx	lr

0800eff4 <_Balloc>:
 800eff4:	b570      	push	{r4, r5, r6, lr}
 800eff6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eff8:	4604      	mov	r4, r0
 800effa:	460e      	mov	r6, r1
 800effc:	b93d      	cbnz	r5, 800f00e <_Balloc+0x1a>
 800effe:	2010      	movs	r0, #16
 800f000:	f7fd f876 	bl	800c0f0 <malloc>
 800f004:	6260      	str	r0, [r4, #36]	; 0x24
 800f006:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f00a:	6005      	str	r5, [r0, #0]
 800f00c:	60c5      	str	r5, [r0, #12]
 800f00e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f010:	68eb      	ldr	r3, [r5, #12]
 800f012:	b183      	cbz	r3, 800f036 <_Balloc+0x42>
 800f014:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f01c:	b9b8      	cbnz	r0, 800f04e <_Balloc+0x5a>
 800f01e:	2101      	movs	r1, #1
 800f020:	fa01 f506 	lsl.w	r5, r1, r6
 800f024:	1d6a      	adds	r2, r5, #5
 800f026:	0092      	lsls	r2, r2, #2
 800f028:	4620      	mov	r0, r4
 800f02a:	f000 fbe2 	bl	800f7f2 <_calloc_r>
 800f02e:	b160      	cbz	r0, 800f04a <_Balloc+0x56>
 800f030:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f034:	e00e      	b.n	800f054 <_Balloc+0x60>
 800f036:	2221      	movs	r2, #33	; 0x21
 800f038:	2104      	movs	r1, #4
 800f03a:	4620      	mov	r0, r4
 800f03c:	f000 fbd9 	bl	800f7f2 <_calloc_r>
 800f040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f042:	60e8      	str	r0, [r5, #12]
 800f044:	68db      	ldr	r3, [r3, #12]
 800f046:	2b00      	cmp	r3, #0
 800f048:	d1e4      	bne.n	800f014 <_Balloc+0x20>
 800f04a:	2000      	movs	r0, #0
 800f04c:	bd70      	pop	{r4, r5, r6, pc}
 800f04e:	6802      	ldr	r2, [r0, #0]
 800f050:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f054:	2300      	movs	r3, #0
 800f056:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f05a:	e7f7      	b.n	800f04c <_Balloc+0x58>

0800f05c <_Bfree>:
 800f05c:	b570      	push	{r4, r5, r6, lr}
 800f05e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f060:	4606      	mov	r6, r0
 800f062:	460d      	mov	r5, r1
 800f064:	b93c      	cbnz	r4, 800f076 <_Bfree+0x1a>
 800f066:	2010      	movs	r0, #16
 800f068:	f7fd f842 	bl	800c0f0 <malloc>
 800f06c:	6270      	str	r0, [r6, #36]	; 0x24
 800f06e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f072:	6004      	str	r4, [r0, #0]
 800f074:	60c4      	str	r4, [r0, #12]
 800f076:	b13d      	cbz	r5, 800f088 <_Bfree+0x2c>
 800f078:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f07a:	686a      	ldr	r2, [r5, #4]
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f082:	6029      	str	r1, [r5, #0]
 800f084:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f088:	bd70      	pop	{r4, r5, r6, pc}

0800f08a <__multadd>:
 800f08a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f08e:	690d      	ldr	r5, [r1, #16]
 800f090:	461f      	mov	r7, r3
 800f092:	4606      	mov	r6, r0
 800f094:	460c      	mov	r4, r1
 800f096:	f101 0c14 	add.w	ip, r1, #20
 800f09a:	2300      	movs	r3, #0
 800f09c:	f8dc 0000 	ldr.w	r0, [ip]
 800f0a0:	b281      	uxth	r1, r0
 800f0a2:	fb02 7101 	mla	r1, r2, r1, r7
 800f0a6:	0c0f      	lsrs	r7, r1, #16
 800f0a8:	0c00      	lsrs	r0, r0, #16
 800f0aa:	fb02 7000 	mla	r0, r2, r0, r7
 800f0ae:	b289      	uxth	r1, r1
 800f0b0:	3301      	adds	r3, #1
 800f0b2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f0b6:	429d      	cmp	r5, r3
 800f0b8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f0bc:	f84c 1b04 	str.w	r1, [ip], #4
 800f0c0:	dcec      	bgt.n	800f09c <__multadd+0x12>
 800f0c2:	b1d7      	cbz	r7, 800f0fa <__multadd+0x70>
 800f0c4:	68a3      	ldr	r3, [r4, #8]
 800f0c6:	42ab      	cmp	r3, r5
 800f0c8:	dc12      	bgt.n	800f0f0 <__multadd+0x66>
 800f0ca:	6861      	ldr	r1, [r4, #4]
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	3101      	adds	r1, #1
 800f0d0:	f7ff ff90 	bl	800eff4 <_Balloc>
 800f0d4:	6922      	ldr	r2, [r4, #16]
 800f0d6:	3202      	adds	r2, #2
 800f0d8:	f104 010c 	add.w	r1, r4, #12
 800f0dc:	4680      	mov	r8, r0
 800f0de:	0092      	lsls	r2, r2, #2
 800f0e0:	300c      	adds	r0, #12
 800f0e2:	f7fd f815 	bl	800c110 <memcpy>
 800f0e6:	4621      	mov	r1, r4
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f7ff ffb7 	bl	800f05c <_Bfree>
 800f0ee:	4644      	mov	r4, r8
 800f0f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f0f4:	3501      	adds	r5, #1
 800f0f6:	615f      	str	r7, [r3, #20]
 800f0f8:	6125      	str	r5, [r4, #16]
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f100 <__s2b>:
 800f100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f104:	460c      	mov	r4, r1
 800f106:	4615      	mov	r5, r2
 800f108:	461f      	mov	r7, r3
 800f10a:	2209      	movs	r2, #9
 800f10c:	3308      	adds	r3, #8
 800f10e:	4606      	mov	r6, r0
 800f110:	fb93 f3f2 	sdiv	r3, r3, r2
 800f114:	2100      	movs	r1, #0
 800f116:	2201      	movs	r2, #1
 800f118:	429a      	cmp	r2, r3
 800f11a:	db20      	blt.n	800f15e <__s2b+0x5e>
 800f11c:	4630      	mov	r0, r6
 800f11e:	f7ff ff69 	bl	800eff4 <_Balloc>
 800f122:	9b08      	ldr	r3, [sp, #32]
 800f124:	6143      	str	r3, [r0, #20]
 800f126:	2d09      	cmp	r5, #9
 800f128:	f04f 0301 	mov.w	r3, #1
 800f12c:	6103      	str	r3, [r0, #16]
 800f12e:	dd19      	ble.n	800f164 <__s2b+0x64>
 800f130:	f104 0809 	add.w	r8, r4, #9
 800f134:	46c1      	mov	r9, r8
 800f136:	442c      	add	r4, r5
 800f138:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f13c:	4601      	mov	r1, r0
 800f13e:	3b30      	subs	r3, #48	; 0x30
 800f140:	220a      	movs	r2, #10
 800f142:	4630      	mov	r0, r6
 800f144:	f7ff ffa1 	bl	800f08a <__multadd>
 800f148:	45a1      	cmp	r9, r4
 800f14a:	d1f5      	bne.n	800f138 <__s2b+0x38>
 800f14c:	eb08 0405 	add.w	r4, r8, r5
 800f150:	3c08      	subs	r4, #8
 800f152:	1b2d      	subs	r5, r5, r4
 800f154:	1963      	adds	r3, r4, r5
 800f156:	42bb      	cmp	r3, r7
 800f158:	db07      	blt.n	800f16a <__s2b+0x6a>
 800f15a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f15e:	0052      	lsls	r2, r2, #1
 800f160:	3101      	adds	r1, #1
 800f162:	e7d9      	b.n	800f118 <__s2b+0x18>
 800f164:	340a      	adds	r4, #10
 800f166:	2509      	movs	r5, #9
 800f168:	e7f3      	b.n	800f152 <__s2b+0x52>
 800f16a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f16e:	4601      	mov	r1, r0
 800f170:	3b30      	subs	r3, #48	; 0x30
 800f172:	220a      	movs	r2, #10
 800f174:	4630      	mov	r0, r6
 800f176:	f7ff ff88 	bl	800f08a <__multadd>
 800f17a:	e7eb      	b.n	800f154 <__s2b+0x54>

0800f17c <__hi0bits>:
 800f17c:	0c02      	lsrs	r2, r0, #16
 800f17e:	0412      	lsls	r2, r2, #16
 800f180:	4603      	mov	r3, r0
 800f182:	b9b2      	cbnz	r2, 800f1b2 <__hi0bits+0x36>
 800f184:	0403      	lsls	r3, r0, #16
 800f186:	2010      	movs	r0, #16
 800f188:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f18c:	bf04      	itt	eq
 800f18e:	021b      	lsleq	r3, r3, #8
 800f190:	3008      	addeq	r0, #8
 800f192:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f196:	bf04      	itt	eq
 800f198:	011b      	lsleq	r3, r3, #4
 800f19a:	3004      	addeq	r0, #4
 800f19c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f1a0:	bf04      	itt	eq
 800f1a2:	009b      	lsleq	r3, r3, #2
 800f1a4:	3002      	addeq	r0, #2
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	db06      	blt.n	800f1b8 <__hi0bits+0x3c>
 800f1aa:	005b      	lsls	r3, r3, #1
 800f1ac:	d503      	bpl.n	800f1b6 <__hi0bits+0x3a>
 800f1ae:	3001      	adds	r0, #1
 800f1b0:	4770      	bx	lr
 800f1b2:	2000      	movs	r0, #0
 800f1b4:	e7e8      	b.n	800f188 <__hi0bits+0xc>
 800f1b6:	2020      	movs	r0, #32
 800f1b8:	4770      	bx	lr

0800f1ba <__lo0bits>:
 800f1ba:	6803      	ldr	r3, [r0, #0]
 800f1bc:	f013 0207 	ands.w	r2, r3, #7
 800f1c0:	4601      	mov	r1, r0
 800f1c2:	d00b      	beq.n	800f1dc <__lo0bits+0x22>
 800f1c4:	07da      	lsls	r2, r3, #31
 800f1c6:	d423      	bmi.n	800f210 <__lo0bits+0x56>
 800f1c8:	0798      	lsls	r0, r3, #30
 800f1ca:	bf49      	itett	mi
 800f1cc:	085b      	lsrmi	r3, r3, #1
 800f1ce:	089b      	lsrpl	r3, r3, #2
 800f1d0:	2001      	movmi	r0, #1
 800f1d2:	600b      	strmi	r3, [r1, #0]
 800f1d4:	bf5c      	itt	pl
 800f1d6:	600b      	strpl	r3, [r1, #0]
 800f1d8:	2002      	movpl	r0, #2
 800f1da:	4770      	bx	lr
 800f1dc:	b298      	uxth	r0, r3
 800f1de:	b9a8      	cbnz	r0, 800f20c <__lo0bits+0x52>
 800f1e0:	0c1b      	lsrs	r3, r3, #16
 800f1e2:	2010      	movs	r0, #16
 800f1e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f1e8:	bf04      	itt	eq
 800f1ea:	0a1b      	lsreq	r3, r3, #8
 800f1ec:	3008      	addeq	r0, #8
 800f1ee:	071a      	lsls	r2, r3, #28
 800f1f0:	bf04      	itt	eq
 800f1f2:	091b      	lsreq	r3, r3, #4
 800f1f4:	3004      	addeq	r0, #4
 800f1f6:	079a      	lsls	r2, r3, #30
 800f1f8:	bf04      	itt	eq
 800f1fa:	089b      	lsreq	r3, r3, #2
 800f1fc:	3002      	addeq	r0, #2
 800f1fe:	07da      	lsls	r2, r3, #31
 800f200:	d402      	bmi.n	800f208 <__lo0bits+0x4e>
 800f202:	085b      	lsrs	r3, r3, #1
 800f204:	d006      	beq.n	800f214 <__lo0bits+0x5a>
 800f206:	3001      	adds	r0, #1
 800f208:	600b      	str	r3, [r1, #0]
 800f20a:	4770      	bx	lr
 800f20c:	4610      	mov	r0, r2
 800f20e:	e7e9      	b.n	800f1e4 <__lo0bits+0x2a>
 800f210:	2000      	movs	r0, #0
 800f212:	4770      	bx	lr
 800f214:	2020      	movs	r0, #32
 800f216:	4770      	bx	lr

0800f218 <__i2b>:
 800f218:	b510      	push	{r4, lr}
 800f21a:	460c      	mov	r4, r1
 800f21c:	2101      	movs	r1, #1
 800f21e:	f7ff fee9 	bl	800eff4 <_Balloc>
 800f222:	2201      	movs	r2, #1
 800f224:	6144      	str	r4, [r0, #20]
 800f226:	6102      	str	r2, [r0, #16]
 800f228:	bd10      	pop	{r4, pc}

0800f22a <__multiply>:
 800f22a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22e:	4614      	mov	r4, r2
 800f230:	690a      	ldr	r2, [r1, #16]
 800f232:	6923      	ldr	r3, [r4, #16]
 800f234:	429a      	cmp	r2, r3
 800f236:	bfb8      	it	lt
 800f238:	460b      	movlt	r3, r1
 800f23a:	4688      	mov	r8, r1
 800f23c:	bfbc      	itt	lt
 800f23e:	46a0      	movlt	r8, r4
 800f240:	461c      	movlt	r4, r3
 800f242:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f246:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f24a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f24e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f252:	eb07 0609 	add.w	r6, r7, r9
 800f256:	42b3      	cmp	r3, r6
 800f258:	bfb8      	it	lt
 800f25a:	3101      	addlt	r1, #1
 800f25c:	f7ff feca 	bl	800eff4 <_Balloc>
 800f260:	f100 0514 	add.w	r5, r0, #20
 800f264:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f268:	462b      	mov	r3, r5
 800f26a:	2200      	movs	r2, #0
 800f26c:	4573      	cmp	r3, lr
 800f26e:	d316      	bcc.n	800f29e <__multiply+0x74>
 800f270:	f104 0214 	add.w	r2, r4, #20
 800f274:	f108 0114 	add.w	r1, r8, #20
 800f278:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f27c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	9b00      	ldr	r3, [sp, #0]
 800f284:	9201      	str	r2, [sp, #4]
 800f286:	4293      	cmp	r3, r2
 800f288:	d80c      	bhi.n	800f2a4 <__multiply+0x7a>
 800f28a:	2e00      	cmp	r6, #0
 800f28c:	dd03      	ble.n	800f296 <__multiply+0x6c>
 800f28e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f292:	2b00      	cmp	r3, #0
 800f294:	d05d      	beq.n	800f352 <__multiply+0x128>
 800f296:	6106      	str	r6, [r0, #16]
 800f298:	b003      	add	sp, #12
 800f29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29e:	f843 2b04 	str.w	r2, [r3], #4
 800f2a2:	e7e3      	b.n	800f26c <__multiply+0x42>
 800f2a4:	f8b2 b000 	ldrh.w	fp, [r2]
 800f2a8:	f1bb 0f00 	cmp.w	fp, #0
 800f2ac:	d023      	beq.n	800f2f6 <__multiply+0xcc>
 800f2ae:	4689      	mov	r9, r1
 800f2b0:	46ac      	mov	ip, r5
 800f2b2:	f04f 0800 	mov.w	r8, #0
 800f2b6:	f859 4b04 	ldr.w	r4, [r9], #4
 800f2ba:	f8dc a000 	ldr.w	sl, [ip]
 800f2be:	b2a3      	uxth	r3, r4
 800f2c0:	fa1f fa8a 	uxth.w	sl, sl
 800f2c4:	fb0b a303 	mla	r3, fp, r3, sl
 800f2c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f2cc:	f8dc 4000 	ldr.w	r4, [ip]
 800f2d0:	4443      	add	r3, r8
 800f2d2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f2d6:	fb0b 840a 	mla	r4, fp, sl, r8
 800f2da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f2de:	46e2      	mov	sl, ip
 800f2e0:	b29b      	uxth	r3, r3
 800f2e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f2e6:	454f      	cmp	r7, r9
 800f2e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f2ec:	f84a 3b04 	str.w	r3, [sl], #4
 800f2f0:	d82b      	bhi.n	800f34a <__multiply+0x120>
 800f2f2:	f8cc 8004 	str.w	r8, [ip, #4]
 800f2f6:	9b01      	ldr	r3, [sp, #4]
 800f2f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f2fc:	3204      	adds	r2, #4
 800f2fe:	f1ba 0f00 	cmp.w	sl, #0
 800f302:	d020      	beq.n	800f346 <__multiply+0x11c>
 800f304:	682b      	ldr	r3, [r5, #0]
 800f306:	4689      	mov	r9, r1
 800f308:	46a8      	mov	r8, r5
 800f30a:	f04f 0b00 	mov.w	fp, #0
 800f30e:	f8b9 c000 	ldrh.w	ip, [r9]
 800f312:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f316:	fb0a 440c 	mla	r4, sl, ip, r4
 800f31a:	445c      	add	r4, fp
 800f31c:	46c4      	mov	ip, r8
 800f31e:	b29b      	uxth	r3, r3
 800f320:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f324:	f84c 3b04 	str.w	r3, [ip], #4
 800f328:	f859 3b04 	ldr.w	r3, [r9], #4
 800f32c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f330:	0c1b      	lsrs	r3, r3, #16
 800f332:	fb0a b303 	mla	r3, sl, r3, fp
 800f336:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f33a:	454f      	cmp	r7, r9
 800f33c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f340:	d805      	bhi.n	800f34e <__multiply+0x124>
 800f342:	f8c8 3004 	str.w	r3, [r8, #4]
 800f346:	3504      	adds	r5, #4
 800f348:	e79b      	b.n	800f282 <__multiply+0x58>
 800f34a:	46d4      	mov	ip, sl
 800f34c:	e7b3      	b.n	800f2b6 <__multiply+0x8c>
 800f34e:	46e0      	mov	r8, ip
 800f350:	e7dd      	b.n	800f30e <__multiply+0xe4>
 800f352:	3e01      	subs	r6, #1
 800f354:	e799      	b.n	800f28a <__multiply+0x60>
	...

0800f358 <__pow5mult>:
 800f358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f35c:	4615      	mov	r5, r2
 800f35e:	f012 0203 	ands.w	r2, r2, #3
 800f362:	4606      	mov	r6, r0
 800f364:	460f      	mov	r7, r1
 800f366:	d007      	beq.n	800f378 <__pow5mult+0x20>
 800f368:	3a01      	subs	r2, #1
 800f36a:	4c21      	ldr	r4, [pc, #132]	; (800f3f0 <__pow5mult+0x98>)
 800f36c:	2300      	movs	r3, #0
 800f36e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f372:	f7ff fe8a 	bl	800f08a <__multadd>
 800f376:	4607      	mov	r7, r0
 800f378:	10ad      	asrs	r5, r5, #2
 800f37a:	d035      	beq.n	800f3e8 <__pow5mult+0x90>
 800f37c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f37e:	b93c      	cbnz	r4, 800f390 <__pow5mult+0x38>
 800f380:	2010      	movs	r0, #16
 800f382:	f7fc feb5 	bl	800c0f0 <malloc>
 800f386:	6270      	str	r0, [r6, #36]	; 0x24
 800f388:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f38c:	6004      	str	r4, [r0, #0]
 800f38e:	60c4      	str	r4, [r0, #12]
 800f390:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f394:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f398:	b94c      	cbnz	r4, 800f3ae <__pow5mult+0x56>
 800f39a:	f240 2171 	movw	r1, #625	; 0x271
 800f39e:	4630      	mov	r0, r6
 800f3a0:	f7ff ff3a 	bl	800f218 <__i2b>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3aa:	4604      	mov	r4, r0
 800f3ac:	6003      	str	r3, [r0, #0]
 800f3ae:	f04f 0800 	mov.w	r8, #0
 800f3b2:	07eb      	lsls	r3, r5, #31
 800f3b4:	d50a      	bpl.n	800f3cc <__pow5mult+0x74>
 800f3b6:	4639      	mov	r1, r7
 800f3b8:	4622      	mov	r2, r4
 800f3ba:	4630      	mov	r0, r6
 800f3bc:	f7ff ff35 	bl	800f22a <__multiply>
 800f3c0:	4639      	mov	r1, r7
 800f3c2:	4681      	mov	r9, r0
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f7ff fe49 	bl	800f05c <_Bfree>
 800f3ca:	464f      	mov	r7, r9
 800f3cc:	106d      	asrs	r5, r5, #1
 800f3ce:	d00b      	beq.n	800f3e8 <__pow5mult+0x90>
 800f3d0:	6820      	ldr	r0, [r4, #0]
 800f3d2:	b938      	cbnz	r0, 800f3e4 <__pow5mult+0x8c>
 800f3d4:	4622      	mov	r2, r4
 800f3d6:	4621      	mov	r1, r4
 800f3d8:	4630      	mov	r0, r6
 800f3da:	f7ff ff26 	bl	800f22a <__multiply>
 800f3de:	6020      	str	r0, [r4, #0]
 800f3e0:	f8c0 8000 	str.w	r8, [r0]
 800f3e4:	4604      	mov	r4, r0
 800f3e6:	e7e4      	b.n	800f3b2 <__pow5mult+0x5a>
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ee:	bf00      	nop
 800f3f0:	0800fdc0 	.word	0x0800fdc0

0800f3f4 <__lshift>:
 800f3f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3f8:	460c      	mov	r4, r1
 800f3fa:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f3fe:	6923      	ldr	r3, [r4, #16]
 800f400:	6849      	ldr	r1, [r1, #4]
 800f402:	eb0a 0903 	add.w	r9, sl, r3
 800f406:	68a3      	ldr	r3, [r4, #8]
 800f408:	4607      	mov	r7, r0
 800f40a:	4616      	mov	r6, r2
 800f40c:	f109 0501 	add.w	r5, r9, #1
 800f410:	42ab      	cmp	r3, r5
 800f412:	db32      	blt.n	800f47a <__lshift+0x86>
 800f414:	4638      	mov	r0, r7
 800f416:	f7ff fded 	bl	800eff4 <_Balloc>
 800f41a:	2300      	movs	r3, #0
 800f41c:	4680      	mov	r8, r0
 800f41e:	f100 0114 	add.w	r1, r0, #20
 800f422:	461a      	mov	r2, r3
 800f424:	4553      	cmp	r3, sl
 800f426:	db2b      	blt.n	800f480 <__lshift+0x8c>
 800f428:	6920      	ldr	r0, [r4, #16]
 800f42a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f42e:	f104 0314 	add.w	r3, r4, #20
 800f432:	f016 021f 	ands.w	r2, r6, #31
 800f436:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f43a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f43e:	d025      	beq.n	800f48c <__lshift+0x98>
 800f440:	f1c2 0e20 	rsb	lr, r2, #32
 800f444:	2000      	movs	r0, #0
 800f446:	681e      	ldr	r6, [r3, #0]
 800f448:	468a      	mov	sl, r1
 800f44a:	4096      	lsls	r6, r2
 800f44c:	4330      	orrs	r0, r6
 800f44e:	f84a 0b04 	str.w	r0, [sl], #4
 800f452:	f853 0b04 	ldr.w	r0, [r3], #4
 800f456:	459c      	cmp	ip, r3
 800f458:	fa20 f00e 	lsr.w	r0, r0, lr
 800f45c:	d814      	bhi.n	800f488 <__lshift+0x94>
 800f45e:	6048      	str	r0, [r1, #4]
 800f460:	b108      	cbz	r0, 800f466 <__lshift+0x72>
 800f462:	f109 0502 	add.w	r5, r9, #2
 800f466:	3d01      	subs	r5, #1
 800f468:	4638      	mov	r0, r7
 800f46a:	f8c8 5010 	str.w	r5, [r8, #16]
 800f46e:	4621      	mov	r1, r4
 800f470:	f7ff fdf4 	bl	800f05c <_Bfree>
 800f474:	4640      	mov	r0, r8
 800f476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f47a:	3101      	adds	r1, #1
 800f47c:	005b      	lsls	r3, r3, #1
 800f47e:	e7c7      	b.n	800f410 <__lshift+0x1c>
 800f480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f484:	3301      	adds	r3, #1
 800f486:	e7cd      	b.n	800f424 <__lshift+0x30>
 800f488:	4651      	mov	r1, sl
 800f48a:	e7dc      	b.n	800f446 <__lshift+0x52>
 800f48c:	3904      	subs	r1, #4
 800f48e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f492:	f841 2f04 	str.w	r2, [r1, #4]!
 800f496:	459c      	cmp	ip, r3
 800f498:	d8f9      	bhi.n	800f48e <__lshift+0x9a>
 800f49a:	e7e4      	b.n	800f466 <__lshift+0x72>

0800f49c <__mcmp>:
 800f49c:	6903      	ldr	r3, [r0, #16]
 800f49e:	690a      	ldr	r2, [r1, #16]
 800f4a0:	1a9b      	subs	r3, r3, r2
 800f4a2:	b530      	push	{r4, r5, lr}
 800f4a4:	d10c      	bne.n	800f4c0 <__mcmp+0x24>
 800f4a6:	0092      	lsls	r2, r2, #2
 800f4a8:	3014      	adds	r0, #20
 800f4aa:	3114      	adds	r1, #20
 800f4ac:	1884      	adds	r4, r0, r2
 800f4ae:	4411      	add	r1, r2
 800f4b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f4b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f4b8:	4295      	cmp	r5, r2
 800f4ba:	d003      	beq.n	800f4c4 <__mcmp+0x28>
 800f4bc:	d305      	bcc.n	800f4ca <__mcmp+0x2e>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	bd30      	pop	{r4, r5, pc}
 800f4c4:	42a0      	cmp	r0, r4
 800f4c6:	d3f3      	bcc.n	800f4b0 <__mcmp+0x14>
 800f4c8:	e7fa      	b.n	800f4c0 <__mcmp+0x24>
 800f4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ce:	e7f7      	b.n	800f4c0 <__mcmp+0x24>

0800f4d0 <__mdiff>:
 800f4d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4d4:	460d      	mov	r5, r1
 800f4d6:	4607      	mov	r7, r0
 800f4d8:	4611      	mov	r1, r2
 800f4da:	4628      	mov	r0, r5
 800f4dc:	4614      	mov	r4, r2
 800f4de:	f7ff ffdd 	bl	800f49c <__mcmp>
 800f4e2:	1e06      	subs	r6, r0, #0
 800f4e4:	d108      	bne.n	800f4f8 <__mdiff+0x28>
 800f4e6:	4631      	mov	r1, r6
 800f4e8:	4638      	mov	r0, r7
 800f4ea:	f7ff fd83 	bl	800eff4 <_Balloc>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f8:	bfa4      	itt	ge
 800f4fa:	4623      	movge	r3, r4
 800f4fc:	462c      	movge	r4, r5
 800f4fe:	4638      	mov	r0, r7
 800f500:	6861      	ldr	r1, [r4, #4]
 800f502:	bfa6      	itte	ge
 800f504:	461d      	movge	r5, r3
 800f506:	2600      	movge	r6, #0
 800f508:	2601      	movlt	r6, #1
 800f50a:	f7ff fd73 	bl	800eff4 <_Balloc>
 800f50e:	692b      	ldr	r3, [r5, #16]
 800f510:	60c6      	str	r6, [r0, #12]
 800f512:	6926      	ldr	r6, [r4, #16]
 800f514:	f105 0914 	add.w	r9, r5, #20
 800f518:	f104 0214 	add.w	r2, r4, #20
 800f51c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f520:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f524:	f100 0514 	add.w	r5, r0, #20
 800f528:	f04f 0e00 	mov.w	lr, #0
 800f52c:	f852 ab04 	ldr.w	sl, [r2], #4
 800f530:	f859 4b04 	ldr.w	r4, [r9], #4
 800f534:	fa1e f18a 	uxtah	r1, lr, sl
 800f538:	b2a3      	uxth	r3, r4
 800f53a:	1ac9      	subs	r1, r1, r3
 800f53c:	0c23      	lsrs	r3, r4, #16
 800f53e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f542:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f546:	b289      	uxth	r1, r1
 800f548:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f54c:	45c8      	cmp	r8, r9
 800f54e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f552:	4694      	mov	ip, r2
 800f554:	f845 3b04 	str.w	r3, [r5], #4
 800f558:	d8e8      	bhi.n	800f52c <__mdiff+0x5c>
 800f55a:	45bc      	cmp	ip, r7
 800f55c:	d304      	bcc.n	800f568 <__mdiff+0x98>
 800f55e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f562:	b183      	cbz	r3, 800f586 <__mdiff+0xb6>
 800f564:	6106      	str	r6, [r0, #16]
 800f566:	e7c5      	b.n	800f4f4 <__mdiff+0x24>
 800f568:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f56c:	fa1e f381 	uxtah	r3, lr, r1
 800f570:	141a      	asrs	r2, r3, #16
 800f572:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f576:	b29b      	uxth	r3, r3
 800f578:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f57c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f580:	f845 3b04 	str.w	r3, [r5], #4
 800f584:	e7e9      	b.n	800f55a <__mdiff+0x8a>
 800f586:	3e01      	subs	r6, #1
 800f588:	e7e9      	b.n	800f55e <__mdiff+0x8e>
	...

0800f58c <__ulp>:
 800f58c:	4b12      	ldr	r3, [pc, #72]	; (800f5d8 <__ulp+0x4c>)
 800f58e:	ee10 2a90 	vmov	r2, s1
 800f592:	401a      	ands	r2, r3
 800f594:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800f598:	2b00      	cmp	r3, #0
 800f59a:	dd04      	ble.n	800f5a6 <__ulp+0x1a>
 800f59c:	2000      	movs	r0, #0
 800f59e:	4619      	mov	r1, r3
 800f5a0:	ec41 0b10 	vmov	d0, r0, r1
 800f5a4:	4770      	bx	lr
 800f5a6:	425b      	negs	r3, r3
 800f5a8:	151b      	asrs	r3, r3, #20
 800f5aa:	2b13      	cmp	r3, #19
 800f5ac:	f04f 0000 	mov.w	r0, #0
 800f5b0:	f04f 0100 	mov.w	r1, #0
 800f5b4:	dc04      	bgt.n	800f5c0 <__ulp+0x34>
 800f5b6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f5ba:	fa42 f103 	asr.w	r1, r2, r3
 800f5be:	e7ef      	b.n	800f5a0 <__ulp+0x14>
 800f5c0:	3b14      	subs	r3, #20
 800f5c2:	2b1e      	cmp	r3, #30
 800f5c4:	f04f 0201 	mov.w	r2, #1
 800f5c8:	bfda      	itte	le
 800f5ca:	f1c3 031f 	rsble	r3, r3, #31
 800f5ce:	fa02 f303 	lslle.w	r3, r2, r3
 800f5d2:	4613      	movgt	r3, r2
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	e7e3      	b.n	800f5a0 <__ulp+0x14>
 800f5d8:	7ff00000 	.word	0x7ff00000

0800f5dc <__b2d>:
 800f5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5de:	6905      	ldr	r5, [r0, #16]
 800f5e0:	f100 0714 	add.w	r7, r0, #20
 800f5e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f5e8:	1f2e      	subs	r6, r5, #4
 800f5ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f7ff fdc4 	bl	800f17c <__hi0bits>
 800f5f4:	f1c0 0320 	rsb	r3, r0, #32
 800f5f8:	280a      	cmp	r0, #10
 800f5fa:	600b      	str	r3, [r1, #0]
 800f5fc:	f8df c074 	ldr.w	ip, [pc, #116]	; 800f674 <__b2d+0x98>
 800f600:	dc14      	bgt.n	800f62c <__b2d+0x50>
 800f602:	f1c0 0e0b 	rsb	lr, r0, #11
 800f606:	fa24 f10e 	lsr.w	r1, r4, lr
 800f60a:	42b7      	cmp	r7, r6
 800f60c:	ea41 030c 	orr.w	r3, r1, ip
 800f610:	bf34      	ite	cc
 800f612:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f616:	2100      	movcs	r1, #0
 800f618:	3015      	adds	r0, #21
 800f61a:	fa04 f000 	lsl.w	r0, r4, r0
 800f61e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f622:	ea40 0201 	orr.w	r2, r0, r1
 800f626:	ec43 2b10 	vmov	d0, r2, r3
 800f62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f62c:	42b7      	cmp	r7, r6
 800f62e:	bf3a      	itte	cc
 800f630:	f1a5 0608 	subcc.w	r6, r5, #8
 800f634:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f638:	2100      	movcs	r1, #0
 800f63a:	380b      	subs	r0, #11
 800f63c:	d015      	beq.n	800f66a <__b2d+0x8e>
 800f63e:	4084      	lsls	r4, r0
 800f640:	f1c0 0520 	rsb	r5, r0, #32
 800f644:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800f648:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800f64c:	42be      	cmp	r6, r7
 800f64e:	fa21 fc05 	lsr.w	ip, r1, r5
 800f652:	ea44 030c 	orr.w	r3, r4, ip
 800f656:	bf8c      	ite	hi
 800f658:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f65c:	2400      	movls	r4, #0
 800f65e:	fa01 f000 	lsl.w	r0, r1, r0
 800f662:	40ec      	lsrs	r4, r5
 800f664:	ea40 0204 	orr.w	r2, r0, r4
 800f668:	e7dd      	b.n	800f626 <__b2d+0x4a>
 800f66a:	ea44 030c 	orr.w	r3, r4, ip
 800f66e:	460a      	mov	r2, r1
 800f670:	e7d9      	b.n	800f626 <__b2d+0x4a>
 800f672:	bf00      	nop
 800f674:	3ff00000 	.word	0x3ff00000

0800f678 <__d2b>:
 800f678:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f67c:	460e      	mov	r6, r1
 800f67e:	2101      	movs	r1, #1
 800f680:	ec59 8b10 	vmov	r8, r9, d0
 800f684:	4615      	mov	r5, r2
 800f686:	f7ff fcb5 	bl	800eff4 <_Balloc>
 800f68a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f68e:	4607      	mov	r7, r0
 800f690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f694:	bb34      	cbnz	r4, 800f6e4 <__d2b+0x6c>
 800f696:	9301      	str	r3, [sp, #4]
 800f698:	f1b8 0300 	subs.w	r3, r8, #0
 800f69c:	d027      	beq.n	800f6ee <__d2b+0x76>
 800f69e:	a802      	add	r0, sp, #8
 800f6a0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f6a4:	f7ff fd89 	bl	800f1ba <__lo0bits>
 800f6a8:	9900      	ldr	r1, [sp, #0]
 800f6aa:	b1f0      	cbz	r0, 800f6ea <__d2b+0x72>
 800f6ac:	9a01      	ldr	r2, [sp, #4]
 800f6ae:	f1c0 0320 	rsb	r3, r0, #32
 800f6b2:	fa02 f303 	lsl.w	r3, r2, r3
 800f6b6:	430b      	orrs	r3, r1
 800f6b8:	40c2      	lsrs	r2, r0
 800f6ba:	617b      	str	r3, [r7, #20]
 800f6bc:	9201      	str	r2, [sp, #4]
 800f6be:	9b01      	ldr	r3, [sp, #4]
 800f6c0:	61bb      	str	r3, [r7, #24]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	bf14      	ite	ne
 800f6c6:	2102      	movne	r1, #2
 800f6c8:	2101      	moveq	r1, #1
 800f6ca:	6139      	str	r1, [r7, #16]
 800f6cc:	b1c4      	cbz	r4, 800f700 <__d2b+0x88>
 800f6ce:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f6d2:	4404      	add	r4, r0
 800f6d4:	6034      	str	r4, [r6, #0]
 800f6d6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f6da:	6028      	str	r0, [r5, #0]
 800f6dc:	4638      	mov	r0, r7
 800f6de:	b003      	add	sp, #12
 800f6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f6e8:	e7d5      	b.n	800f696 <__d2b+0x1e>
 800f6ea:	6179      	str	r1, [r7, #20]
 800f6ec:	e7e7      	b.n	800f6be <__d2b+0x46>
 800f6ee:	a801      	add	r0, sp, #4
 800f6f0:	f7ff fd63 	bl	800f1ba <__lo0bits>
 800f6f4:	9b01      	ldr	r3, [sp, #4]
 800f6f6:	617b      	str	r3, [r7, #20]
 800f6f8:	2101      	movs	r1, #1
 800f6fa:	6139      	str	r1, [r7, #16]
 800f6fc:	3020      	adds	r0, #32
 800f6fe:	e7e5      	b.n	800f6cc <__d2b+0x54>
 800f700:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f704:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f708:	6030      	str	r0, [r6, #0]
 800f70a:	6918      	ldr	r0, [r3, #16]
 800f70c:	f7ff fd36 	bl	800f17c <__hi0bits>
 800f710:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f714:	e7e1      	b.n	800f6da <__d2b+0x62>

0800f716 <__ratio>:
 800f716:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f71a:	4688      	mov	r8, r1
 800f71c:	4669      	mov	r1, sp
 800f71e:	4681      	mov	r9, r0
 800f720:	f7ff ff5c 	bl	800f5dc <__b2d>
 800f724:	a901      	add	r1, sp, #4
 800f726:	4640      	mov	r0, r8
 800f728:	ec57 6b10 	vmov	r6, r7, d0
 800f72c:	f7ff ff56 	bl	800f5dc <__b2d>
 800f730:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f734:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f738:	eba3 0c02 	sub.w	ip, r3, r2
 800f73c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f740:	1a9b      	subs	r3, r3, r2
 800f742:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f746:	ec5b ab10 	vmov	sl, fp, d0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	bfce      	itee	gt
 800f74e:	463a      	movgt	r2, r7
 800f750:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f754:	465a      	movle	r2, fp
 800f756:	4659      	mov	r1, fp
 800f758:	463d      	mov	r5, r7
 800f75a:	bfd4      	ite	le
 800f75c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800f760:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800f764:	4630      	mov	r0, r6
 800f766:	ee10 2a10 	vmov	r2, s0
 800f76a:	460b      	mov	r3, r1
 800f76c:	4629      	mov	r1, r5
 800f76e:	f7f1 f86d 	bl	800084c <__aeabi_ddiv>
 800f772:	ec41 0b10 	vmov	d0, r0, r1
 800f776:	b003      	add	sp, #12
 800f778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f77c <__copybits>:
 800f77c:	3901      	subs	r1, #1
 800f77e:	b510      	push	{r4, lr}
 800f780:	1149      	asrs	r1, r1, #5
 800f782:	6914      	ldr	r4, [r2, #16]
 800f784:	3101      	adds	r1, #1
 800f786:	f102 0314 	add.w	r3, r2, #20
 800f78a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f78e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f792:	42a3      	cmp	r3, r4
 800f794:	4602      	mov	r2, r0
 800f796:	d303      	bcc.n	800f7a0 <__copybits+0x24>
 800f798:	2300      	movs	r3, #0
 800f79a:	428a      	cmp	r2, r1
 800f79c:	d305      	bcc.n	800f7aa <__copybits+0x2e>
 800f79e:	bd10      	pop	{r4, pc}
 800f7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7a4:	f840 2b04 	str.w	r2, [r0], #4
 800f7a8:	e7f3      	b.n	800f792 <__copybits+0x16>
 800f7aa:	f842 3b04 	str.w	r3, [r2], #4
 800f7ae:	e7f4      	b.n	800f79a <__copybits+0x1e>

0800f7b0 <__any_on>:
 800f7b0:	f100 0214 	add.w	r2, r0, #20
 800f7b4:	6900      	ldr	r0, [r0, #16]
 800f7b6:	114b      	asrs	r3, r1, #5
 800f7b8:	4298      	cmp	r0, r3
 800f7ba:	b510      	push	{r4, lr}
 800f7bc:	db11      	blt.n	800f7e2 <__any_on+0x32>
 800f7be:	dd0a      	ble.n	800f7d6 <__any_on+0x26>
 800f7c0:	f011 011f 	ands.w	r1, r1, #31
 800f7c4:	d007      	beq.n	800f7d6 <__any_on+0x26>
 800f7c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f7ca:	fa24 f001 	lsr.w	r0, r4, r1
 800f7ce:	fa00 f101 	lsl.w	r1, r0, r1
 800f7d2:	428c      	cmp	r4, r1
 800f7d4:	d10b      	bne.n	800f7ee <__any_on+0x3e>
 800f7d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d803      	bhi.n	800f7e6 <__any_on+0x36>
 800f7de:	2000      	movs	r0, #0
 800f7e0:	bd10      	pop	{r4, pc}
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	e7f7      	b.n	800f7d6 <__any_on+0x26>
 800f7e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f7ea:	2900      	cmp	r1, #0
 800f7ec:	d0f5      	beq.n	800f7da <__any_on+0x2a>
 800f7ee:	2001      	movs	r0, #1
 800f7f0:	e7f6      	b.n	800f7e0 <__any_on+0x30>

0800f7f2 <_calloc_r>:
 800f7f2:	b538      	push	{r3, r4, r5, lr}
 800f7f4:	fb02 f401 	mul.w	r4, r2, r1
 800f7f8:	4621      	mov	r1, r4
 800f7fa:	f7fc fceb 	bl	800c1d4 <_malloc_r>
 800f7fe:	4605      	mov	r5, r0
 800f800:	b118      	cbz	r0, 800f80a <_calloc_r+0x18>
 800f802:	4622      	mov	r2, r4
 800f804:	2100      	movs	r1, #0
 800f806:	f7fc fc8e 	bl	800c126 <memset>
 800f80a:	4628      	mov	r0, r5
 800f80c:	bd38      	pop	{r3, r4, r5, pc}

0800f80e <__ssputs_r>:
 800f80e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f812:	688e      	ldr	r6, [r1, #8]
 800f814:	429e      	cmp	r6, r3
 800f816:	4682      	mov	sl, r0
 800f818:	460c      	mov	r4, r1
 800f81a:	4690      	mov	r8, r2
 800f81c:	4699      	mov	r9, r3
 800f81e:	d837      	bhi.n	800f890 <__ssputs_r+0x82>
 800f820:	898a      	ldrh	r2, [r1, #12]
 800f822:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f826:	d031      	beq.n	800f88c <__ssputs_r+0x7e>
 800f828:	6825      	ldr	r5, [r4, #0]
 800f82a:	6909      	ldr	r1, [r1, #16]
 800f82c:	1a6f      	subs	r7, r5, r1
 800f82e:	6965      	ldr	r5, [r4, #20]
 800f830:	2302      	movs	r3, #2
 800f832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f836:	fb95 f5f3 	sdiv	r5, r5, r3
 800f83a:	f109 0301 	add.w	r3, r9, #1
 800f83e:	443b      	add	r3, r7
 800f840:	429d      	cmp	r5, r3
 800f842:	bf38      	it	cc
 800f844:	461d      	movcc	r5, r3
 800f846:	0553      	lsls	r3, r2, #21
 800f848:	d530      	bpl.n	800f8ac <__ssputs_r+0x9e>
 800f84a:	4629      	mov	r1, r5
 800f84c:	f7fc fcc2 	bl	800c1d4 <_malloc_r>
 800f850:	4606      	mov	r6, r0
 800f852:	b950      	cbnz	r0, 800f86a <__ssputs_r+0x5c>
 800f854:	230c      	movs	r3, #12
 800f856:	f8ca 3000 	str.w	r3, [sl]
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f860:	81a3      	strh	r3, [r4, #12]
 800f862:	f04f 30ff 	mov.w	r0, #4294967295
 800f866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f86a:	463a      	mov	r2, r7
 800f86c:	6921      	ldr	r1, [r4, #16]
 800f86e:	f7fc fc4f 	bl	800c110 <memcpy>
 800f872:	89a3      	ldrh	r3, [r4, #12]
 800f874:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f87c:	81a3      	strh	r3, [r4, #12]
 800f87e:	6126      	str	r6, [r4, #16]
 800f880:	6165      	str	r5, [r4, #20]
 800f882:	443e      	add	r6, r7
 800f884:	1bed      	subs	r5, r5, r7
 800f886:	6026      	str	r6, [r4, #0]
 800f888:	60a5      	str	r5, [r4, #8]
 800f88a:	464e      	mov	r6, r9
 800f88c:	454e      	cmp	r6, r9
 800f88e:	d900      	bls.n	800f892 <__ssputs_r+0x84>
 800f890:	464e      	mov	r6, r9
 800f892:	4632      	mov	r2, r6
 800f894:	4641      	mov	r1, r8
 800f896:	6820      	ldr	r0, [r4, #0]
 800f898:	f000 f92b 	bl	800faf2 <memmove>
 800f89c:	68a3      	ldr	r3, [r4, #8]
 800f89e:	1b9b      	subs	r3, r3, r6
 800f8a0:	60a3      	str	r3, [r4, #8]
 800f8a2:	6823      	ldr	r3, [r4, #0]
 800f8a4:	441e      	add	r6, r3
 800f8a6:	6026      	str	r6, [r4, #0]
 800f8a8:	2000      	movs	r0, #0
 800f8aa:	e7dc      	b.n	800f866 <__ssputs_r+0x58>
 800f8ac:	462a      	mov	r2, r5
 800f8ae:	f000 f939 	bl	800fb24 <_realloc_r>
 800f8b2:	4606      	mov	r6, r0
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d1e2      	bne.n	800f87e <__ssputs_r+0x70>
 800f8b8:	6921      	ldr	r1, [r4, #16]
 800f8ba:	4650      	mov	r0, sl
 800f8bc:	f7fc fc3c 	bl	800c138 <_free_r>
 800f8c0:	e7c8      	b.n	800f854 <__ssputs_r+0x46>
	...

0800f8c4 <_svfiprintf_r>:
 800f8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8c8:	461d      	mov	r5, r3
 800f8ca:	898b      	ldrh	r3, [r1, #12]
 800f8cc:	061f      	lsls	r7, r3, #24
 800f8ce:	b09d      	sub	sp, #116	; 0x74
 800f8d0:	4680      	mov	r8, r0
 800f8d2:	460c      	mov	r4, r1
 800f8d4:	4616      	mov	r6, r2
 800f8d6:	d50f      	bpl.n	800f8f8 <_svfiprintf_r+0x34>
 800f8d8:	690b      	ldr	r3, [r1, #16]
 800f8da:	b96b      	cbnz	r3, 800f8f8 <_svfiprintf_r+0x34>
 800f8dc:	2140      	movs	r1, #64	; 0x40
 800f8de:	f7fc fc79 	bl	800c1d4 <_malloc_r>
 800f8e2:	6020      	str	r0, [r4, #0]
 800f8e4:	6120      	str	r0, [r4, #16]
 800f8e6:	b928      	cbnz	r0, 800f8f4 <_svfiprintf_r+0x30>
 800f8e8:	230c      	movs	r3, #12
 800f8ea:	f8c8 3000 	str.w	r3, [r8]
 800f8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f2:	e0c8      	b.n	800fa86 <_svfiprintf_r+0x1c2>
 800f8f4:	2340      	movs	r3, #64	; 0x40
 800f8f6:	6163      	str	r3, [r4, #20]
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f8fc:	2320      	movs	r3, #32
 800f8fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f902:	2330      	movs	r3, #48	; 0x30
 800f904:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f908:	9503      	str	r5, [sp, #12]
 800f90a:	f04f 0b01 	mov.w	fp, #1
 800f90e:	4637      	mov	r7, r6
 800f910:	463d      	mov	r5, r7
 800f912:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f916:	b10b      	cbz	r3, 800f91c <_svfiprintf_r+0x58>
 800f918:	2b25      	cmp	r3, #37	; 0x25
 800f91a:	d13e      	bne.n	800f99a <_svfiprintf_r+0xd6>
 800f91c:	ebb7 0a06 	subs.w	sl, r7, r6
 800f920:	d00b      	beq.n	800f93a <_svfiprintf_r+0x76>
 800f922:	4653      	mov	r3, sl
 800f924:	4632      	mov	r2, r6
 800f926:	4621      	mov	r1, r4
 800f928:	4640      	mov	r0, r8
 800f92a:	f7ff ff70 	bl	800f80e <__ssputs_r>
 800f92e:	3001      	adds	r0, #1
 800f930:	f000 80a4 	beq.w	800fa7c <_svfiprintf_r+0x1b8>
 800f934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f936:	4453      	add	r3, sl
 800f938:	9309      	str	r3, [sp, #36]	; 0x24
 800f93a:	783b      	ldrb	r3, [r7, #0]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	f000 809d 	beq.w	800fa7c <_svfiprintf_r+0x1b8>
 800f942:	2300      	movs	r3, #0
 800f944:	f04f 32ff 	mov.w	r2, #4294967295
 800f948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f94c:	9304      	str	r3, [sp, #16]
 800f94e:	9307      	str	r3, [sp, #28]
 800f950:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f954:	931a      	str	r3, [sp, #104]	; 0x68
 800f956:	462f      	mov	r7, r5
 800f958:	2205      	movs	r2, #5
 800f95a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f95e:	4850      	ldr	r0, [pc, #320]	; (800faa0 <_svfiprintf_r+0x1dc>)
 800f960:	f7f0 fc3e 	bl	80001e0 <memchr>
 800f964:	9b04      	ldr	r3, [sp, #16]
 800f966:	b9d0      	cbnz	r0, 800f99e <_svfiprintf_r+0xda>
 800f968:	06d9      	lsls	r1, r3, #27
 800f96a:	bf44      	itt	mi
 800f96c:	2220      	movmi	r2, #32
 800f96e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f972:	071a      	lsls	r2, r3, #28
 800f974:	bf44      	itt	mi
 800f976:	222b      	movmi	r2, #43	; 0x2b
 800f978:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f97c:	782a      	ldrb	r2, [r5, #0]
 800f97e:	2a2a      	cmp	r2, #42	; 0x2a
 800f980:	d015      	beq.n	800f9ae <_svfiprintf_r+0xea>
 800f982:	9a07      	ldr	r2, [sp, #28]
 800f984:	462f      	mov	r7, r5
 800f986:	2000      	movs	r0, #0
 800f988:	250a      	movs	r5, #10
 800f98a:	4639      	mov	r1, r7
 800f98c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f990:	3b30      	subs	r3, #48	; 0x30
 800f992:	2b09      	cmp	r3, #9
 800f994:	d94d      	bls.n	800fa32 <_svfiprintf_r+0x16e>
 800f996:	b1b8      	cbz	r0, 800f9c8 <_svfiprintf_r+0x104>
 800f998:	e00f      	b.n	800f9ba <_svfiprintf_r+0xf6>
 800f99a:	462f      	mov	r7, r5
 800f99c:	e7b8      	b.n	800f910 <_svfiprintf_r+0x4c>
 800f99e:	4a40      	ldr	r2, [pc, #256]	; (800faa0 <_svfiprintf_r+0x1dc>)
 800f9a0:	1a80      	subs	r0, r0, r2
 800f9a2:	fa0b f000 	lsl.w	r0, fp, r0
 800f9a6:	4318      	orrs	r0, r3
 800f9a8:	9004      	str	r0, [sp, #16]
 800f9aa:	463d      	mov	r5, r7
 800f9ac:	e7d3      	b.n	800f956 <_svfiprintf_r+0x92>
 800f9ae:	9a03      	ldr	r2, [sp, #12]
 800f9b0:	1d11      	adds	r1, r2, #4
 800f9b2:	6812      	ldr	r2, [r2, #0]
 800f9b4:	9103      	str	r1, [sp, #12]
 800f9b6:	2a00      	cmp	r2, #0
 800f9b8:	db01      	blt.n	800f9be <_svfiprintf_r+0xfa>
 800f9ba:	9207      	str	r2, [sp, #28]
 800f9bc:	e004      	b.n	800f9c8 <_svfiprintf_r+0x104>
 800f9be:	4252      	negs	r2, r2
 800f9c0:	f043 0302 	orr.w	r3, r3, #2
 800f9c4:	9207      	str	r2, [sp, #28]
 800f9c6:	9304      	str	r3, [sp, #16]
 800f9c8:	783b      	ldrb	r3, [r7, #0]
 800f9ca:	2b2e      	cmp	r3, #46	; 0x2e
 800f9cc:	d10c      	bne.n	800f9e8 <_svfiprintf_r+0x124>
 800f9ce:	787b      	ldrb	r3, [r7, #1]
 800f9d0:	2b2a      	cmp	r3, #42	; 0x2a
 800f9d2:	d133      	bne.n	800fa3c <_svfiprintf_r+0x178>
 800f9d4:	9b03      	ldr	r3, [sp, #12]
 800f9d6:	1d1a      	adds	r2, r3, #4
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	9203      	str	r2, [sp, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	bfb8      	it	lt
 800f9e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f9e4:	3702      	adds	r7, #2
 800f9e6:	9305      	str	r3, [sp, #20]
 800f9e8:	4d2e      	ldr	r5, [pc, #184]	; (800faa4 <_svfiprintf_r+0x1e0>)
 800f9ea:	7839      	ldrb	r1, [r7, #0]
 800f9ec:	2203      	movs	r2, #3
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	f7f0 fbf6 	bl	80001e0 <memchr>
 800f9f4:	b138      	cbz	r0, 800fa06 <_svfiprintf_r+0x142>
 800f9f6:	2340      	movs	r3, #64	; 0x40
 800f9f8:	1b40      	subs	r0, r0, r5
 800f9fa:	fa03 f000 	lsl.w	r0, r3, r0
 800f9fe:	9b04      	ldr	r3, [sp, #16]
 800fa00:	4303      	orrs	r3, r0
 800fa02:	3701      	adds	r7, #1
 800fa04:	9304      	str	r3, [sp, #16]
 800fa06:	7839      	ldrb	r1, [r7, #0]
 800fa08:	4827      	ldr	r0, [pc, #156]	; (800faa8 <_svfiprintf_r+0x1e4>)
 800fa0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fa0e:	2206      	movs	r2, #6
 800fa10:	1c7e      	adds	r6, r7, #1
 800fa12:	f7f0 fbe5 	bl	80001e0 <memchr>
 800fa16:	2800      	cmp	r0, #0
 800fa18:	d038      	beq.n	800fa8c <_svfiprintf_r+0x1c8>
 800fa1a:	4b24      	ldr	r3, [pc, #144]	; (800faac <_svfiprintf_r+0x1e8>)
 800fa1c:	bb13      	cbnz	r3, 800fa64 <_svfiprintf_r+0x1a0>
 800fa1e:	9b03      	ldr	r3, [sp, #12]
 800fa20:	3307      	adds	r3, #7
 800fa22:	f023 0307 	bic.w	r3, r3, #7
 800fa26:	3308      	adds	r3, #8
 800fa28:	9303      	str	r3, [sp, #12]
 800fa2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa2c:	444b      	add	r3, r9
 800fa2e:	9309      	str	r3, [sp, #36]	; 0x24
 800fa30:	e76d      	b.n	800f90e <_svfiprintf_r+0x4a>
 800fa32:	fb05 3202 	mla	r2, r5, r2, r3
 800fa36:	2001      	movs	r0, #1
 800fa38:	460f      	mov	r7, r1
 800fa3a:	e7a6      	b.n	800f98a <_svfiprintf_r+0xc6>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	3701      	adds	r7, #1
 800fa40:	9305      	str	r3, [sp, #20]
 800fa42:	4619      	mov	r1, r3
 800fa44:	250a      	movs	r5, #10
 800fa46:	4638      	mov	r0, r7
 800fa48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa4c:	3a30      	subs	r2, #48	; 0x30
 800fa4e:	2a09      	cmp	r2, #9
 800fa50:	d903      	bls.n	800fa5a <_svfiprintf_r+0x196>
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d0c8      	beq.n	800f9e8 <_svfiprintf_r+0x124>
 800fa56:	9105      	str	r1, [sp, #20]
 800fa58:	e7c6      	b.n	800f9e8 <_svfiprintf_r+0x124>
 800fa5a:	fb05 2101 	mla	r1, r5, r1, r2
 800fa5e:	2301      	movs	r3, #1
 800fa60:	4607      	mov	r7, r0
 800fa62:	e7f0      	b.n	800fa46 <_svfiprintf_r+0x182>
 800fa64:	ab03      	add	r3, sp, #12
 800fa66:	9300      	str	r3, [sp, #0]
 800fa68:	4622      	mov	r2, r4
 800fa6a:	4b11      	ldr	r3, [pc, #68]	; (800fab0 <_svfiprintf_r+0x1ec>)
 800fa6c:	a904      	add	r1, sp, #16
 800fa6e:	4640      	mov	r0, r8
 800fa70:	f7fc fc9e 	bl	800c3b0 <_printf_float>
 800fa74:	f1b0 3fff 	cmp.w	r0, #4294967295
 800fa78:	4681      	mov	r9, r0
 800fa7a:	d1d6      	bne.n	800fa2a <_svfiprintf_r+0x166>
 800fa7c:	89a3      	ldrh	r3, [r4, #12]
 800fa7e:	065b      	lsls	r3, r3, #25
 800fa80:	f53f af35 	bmi.w	800f8ee <_svfiprintf_r+0x2a>
 800fa84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa86:	b01d      	add	sp, #116	; 0x74
 800fa88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa8c:	ab03      	add	r3, sp, #12
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	4622      	mov	r2, r4
 800fa92:	4b07      	ldr	r3, [pc, #28]	; (800fab0 <_svfiprintf_r+0x1ec>)
 800fa94:	a904      	add	r1, sp, #16
 800fa96:	4640      	mov	r0, r8
 800fa98:	f7fc ff40 	bl	800c91c <_printf_i>
 800fa9c:	e7ea      	b.n	800fa74 <_svfiprintf_r+0x1b0>
 800fa9e:	bf00      	nop
 800faa0:	0800fdcc 	.word	0x0800fdcc
 800faa4:	0800fdd2 	.word	0x0800fdd2
 800faa8:	0800fdd6 	.word	0x0800fdd6
 800faac:	0800c3b1 	.word	0x0800c3b1
 800fab0:	0800f80f 	.word	0x0800f80f

0800fab4 <strncmp>:
 800fab4:	b510      	push	{r4, lr}
 800fab6:	b16a      	cbz	r2, 800fad4 <strncmp+0x20>
 800fab8:	3901      	subs	r1, #1
 800faba:	1884      	adds	r4, r0, r2
 800fabc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800fac0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fac4:	4293      	cmp	r3, r2
 800fac6:	d103      	bne.n	800fad0 <strncmp+0x1c>
 800fac8:	42a0      	cmp	r0, r4
 800faca:	d001      	beq.n	800fad0 <strncmp+0x1c>
 800facc:	2b00      	cmp	r3, #0
 800face:	d1f5      	bne.n	800fabc <strncmp+0x8>
 800fad0:	1a98      	subs	r0, r3, r2
 800fad2:	bd10      	pop	{r4, pc}
 800fad4:	4610      	mov	r0, r2
 800fad6:	e7fc      	b.n	800fad2 <strncmp+0x1e>

0800fad8 <__ascii_wctomb>:
 800fad8:	b149      	cbz	r1, 800faee <__ascii_wctomb+0x16>
 800fada:	2aff      	cmp	r2, #255	; 0xff
 800fadc:	bf85      	ittet	hi
 800fade:	238a      	movhi	r3, #138	; 0x8a
 800fae0:	6003      	strhi	r3, [r0, #0]
 800fae2:	700a      	strbls	r2, [r1, #0]
 800fae4:	f04f 30ff 	movhi.w	r0, #4294967295
 800fae8:	bf98      	it	ls
 800faea:	2001      	movls	r0, #1
 800faec:	4770      	bx	lr
 800faee:	4608      	mov	r0, r1
 800faf0:	4770      	bx	lr

0800faf2 <memmove>:
 800faf2:	4288      	cmp	r0, r1
 800faf4:	b510      	push	{r4, lr}
 800faf6:	eb01 0302 	add.w	r3, r1, r2
 800fafa:	d807      	bhi.n	800fb0c <memmove+0x1a>
 800fafc:	1e42      	subs	r2, r0, #1
 800fafe:	4299      	cmp	r1, r3
 800fb00:	d00a      	beq.n	800fb18 <memmove+0x26>
 800fb02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb06:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fb0a:	e7f8      	b.n	800fafe <memmove+0xc>
 800fb0c:	4283      	cmp	r3, r0
 800fb0e:	d9f5      	bls.n	800fafc <memmove+0xa>
 800fb10:	1881      	adds	r1, r0, r2
 800fb12:	1ad2      	subs	r2, r2, r3
 800fb14:	42d3      	cmn	r3, r2
 800fb16:	d100      	bne.n	800fb1a <memmove+0x28>
 800fb18:	bd10      	pop	{r4, pc}
 800fb1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fb1e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fb22:	e7f7      	b.n	800fb14 <memmove+0x22>

0800fb24 <_realloc_r>:
 800fb24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb26:	4607      	mov	r7, r0
 800fb28:	4614      	mov	r4, r2
 800fb2a:	460e      	mov	r6, r1
 800fb2c:	b921      	cbnz	r1, 800fb38 <_realloc_r+0x14>
 800fb2e:	4611      	mov	r1, r2
 800fb30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fb34:	f7fc bb4e 	b.w	800c1d4 <_malloc_r>
 800fb38:	b922      	cbnz	r2, 800fb44 <_realloc_r+0x20>
 800fb3a:	f7fc fafd 	bl	800c138 <_free_r>
 800fb3e:	4625      	mov	r5, r4
 800fb40:	4628      	mov	r0, r5
 800fb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb44:	f000 f814 	bl	800fb70 <_malloc_usable_size_r>
 800fb48:	42a0      	cmp	r0, r4
 800fb4a:	d20f      	bcs.n	800fb6c <_realloc_r+0x48>
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	4638      	mov	r0, r7
 800fb50:	f7fc fb40 	bl	800c1d4 <_malloc_r>
 800fb54:	4605      	mov	r5, r0
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d0f2      	beq.n	800fb40 <_realloc_r+0x1c>
 800fb5a:	4631      	mov	r1, r6
 800fb5c:	4622      	mov	r2, r4
 800fb5e:	f7fc fad7 	bl	800c110 <memcpy>
 800fb62:	4631      	mov	r1, r6
 800fb64:	4638      	mov	r0, r7
 800fb66:	f7fc fae7 	bl	800c138 <_free_r>
 800fb6a:	e7e9      	b.n	800fb40 <_realloc_r+0x1c>
 800fb6c:	4635      	mov	r5, r6
 800fb6e:	e7e7      	b.n	800fb40 <_realloc_r+0x1c>

0800fb70 <_malloc_usable_size_r>:
 800fb70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb74:	1f18      	subs	r0, r3, #4
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	bfbc      	itt	lt
 800fb7a:	580b      	ldrlt	r3, [r1, r0]
 800fb7c:	18c0      	addlt	r0, r0, r3
 800fb7e:	4770      	bx	lr

0800fb80 <_sbrk>:
 800fb80:	4b04      	ldr	r3, [pc, #16]	; (800fb94 <_sbrk+0x14>)
 800fb82:	6819      	ldr	r1, [r3, #0]
 800fb84:	4602      	mov	r2, r0
 800fb86:	b909      	cbnz	r1, 800fb8c <_sbrk+0xc>
 800fb88:	4903      	ldr	r1, [pc, #12]	; (800fb98 <_sbrk+0x18>)
 800fb8a:	6019      	str	r1, [r3, #0]
 800fb8c:	6818      	ldr	r0, [r3, #0]
 800fb8e:	4402      	add	r2, r0
 800fb90:	601a      	str	r2, [r3, #0]
 800fb92:	4770      	bx	lr
 800fb94:	20000590 	.word	0x20000590
 800fb98:	20002838 	.word	0x20002838

0800fb9c <_init>:
 800fb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb9e:	bf00      	nop
 800fba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fba2:	bc08      	pop	{r3}
 800fba4:	469e      	mov	lr, r3
 800fba6:	4770      	bx	lr

0800fba8 <_fini>:
 800fba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbaa:	bf00      	nop
 800fbac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbae:	bc08      	pop	{r3}
 800fbb0:	469e      	mov	lr, r3
 800fbb2:	4770      	bx	lr
