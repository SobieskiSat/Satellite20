
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000117d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08011968  08011968  00021968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011dd0  08011dd0  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  08011dd0  08011dd0  00021dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011dd8  08011dd8  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011dd8  08011dd8  00021dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ddc  08011ddc  00021ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08011de0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025f4  20000360  08012140  00030360  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002954  08012140  00032954  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024b90  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004cc1  00000000  00000000  00054f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001928  00000000  00000000  00059be8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001710  00000000  00000000  0005b510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000267c3  00000000  00000000  0005cc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a635  00000000  00000000  000833e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c7fa0  00000000  00000000  0009da18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001659b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a58  00000000  00000000  00165a34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011950 	.word	0x08011950

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	08011950 	.word	0x08011950

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <SX1278_write>:
#include "stm32f4xx_hal_spi.h"

//#### SPI communication with SX1278 ####

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 8001034:	1cf9      	adds	r1, r7, #3
 8001036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103a:	2201      	movs	r2, #1
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f006 ff51 	bl	8007ee4 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001042:	bf00      	nop
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f007 fa23 	bl	8008490 <HAL_SPI_GetState>
 800104a:	4603      	mov	r3, r0
 800104c:	2b01      	cmp	r3, #1
 800104e:	d1f9      	bne.n	8001044 <SX1278_write+0x1c>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
 8001064:	4613      	mov	r3, r2
 8001066:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69d8      	ldr	r0, [r3, #28]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	8a5b      	ldrh	r3, [r3, #18]
 8001070:	2200      	movs	r2, #0
 8001072:	4619      	mov	r1, r3
 8001074:	f002 fdf4 	bl	8003c60 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a1a      	ldr	r2, [r3, #32]
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001082:	b2db      	uxtb	r3, r3
 8001084:	4619      	mov	r1, r3
 8001086:	4610      	mov	r0, r2
 8001088:	f7ff ffce 	bl	8001028 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	78ba      	ldrb	r2, [r7, #2]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ffc7 	bl	8001028 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69d8      	ldr	r0, [r3, #28]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	8a5b      	ldrh	r3, [r3, #18]
 80010a2:	2201      	movs	r2, #1
 80010a4:	4619      	mov	r1, r3
 80010a6:	f002 fddb 	bl	8003c60 <HAL_GPIO_WritePin>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	461a      	mov	r2, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	72fb      	strb	r3, [r7, #11]
 80010c2:	4613      	mov	r3, r2
 80010c4:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80010c6:	7abb      	ldrb	r3, [r7, #10]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d92d      	bls.n	8001128 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	69d8      	ldr	r0, [r3, #28]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8a5b      	ldrh	r3, [r3, #18]
 80010d4:	2200      	movs	r2, #0
 80010d6:	4619      	mov	r1, r3
 80010d8:	f002 fdc2 	bl	8003c60 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	6a1a      	ldr	r2, [r3, #32]
 80010e0:	7afb      	ldrb	r3, [r7, #11]
 80010e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	4610      	mov	r0, r2
 80010ec:	f7ff ff9c 	bl	8001028 <SX1278_write>
	for (i = 0; i < len; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	75fb      	strb	r3, [r7, #23]
 80010f4:	e00b      	b.n	800110e <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a18      	ldr	r0, [r3, #32]
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4413      	add	r3, r2
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff ff90 	bl	8001028 <SX1278_write>
	for (i = 0; i < len; i++)
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	3301      	adds	r3, #1
 800110c:	75fb      	strb	r3, [r7, #23]
 800110e:	7dfa      	ldrb	r2, [r7, #23]
 8001110:	7abb      	ldrb	r3, [r7, #10]
 8001112:	429a      	cmp	r2, r3
 8001114:	d3ef      	bcc.n	80010f6 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	69d8      	ldr	r0, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	8a5b      	ldrh	r3, [r3, #18]
 800111e:	2201      	movs	r2, #1
 8001120:	4619      	mov	r1, r3
 8001122:	f002 fd9d 	bl	8003c60 <HAL_GPIO_WritePin>
 8001126:	e000      	b.n	800112a <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001128:	bf00      	nop
}
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 800113c:	2300      	movs	r3, #0
 800113e:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 8001140:	f107 020e 	add.w	r2, r7, #14
 8001144:	f107 010f 	add.w	r1, r7, #15
 8001148:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f006 fffb 	bl	800814c <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 8001156:	bf00      	nop
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f007 f999 	bl	8008490 <HAL_SPI_GetState>
 800115e:	4603      	mov	r3, r0
 8001160:	2b01      	cmp	r3, #1
 8001162:	d1f9      	bne.n	8001158 <SX1278_read+0x28>

	return rxByte;
 8001164:	7bbb      	ldrb	r3, [r7, #14]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b084      	sub	sp, #16
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69d8      	ldr	r0, [r3, #28]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	8a5b      	ldrh	r3, [r3, #18]
 8001182:	2200      	movs	r2, #0
 8001184:	4619      	mov	r1, r3
 8001186:	f002 fd6b 	bl	8003c60 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a1b      	ldr	r3, [r3, #32]
 800118e:	78fa      	ldrb	r2, [r7, #3]
 8001190:	4611      	mov	r1, r2
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ff48 	bl	8001028 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a1b      	ldr	r3, [r3, #32]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ffc7 	bl	8001130 <SX1278_read>
 80011a2:	4603      	mov	r3, r0
 80011a4:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69d8      	ldr	r0, [r3, #28]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	8a5b      	ldrh	r3, [r3, #18]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	f002 fd55 	bl	8003c60 <HAL_GPIO_WritePin>

	return recv;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	461a      	mov	r2, r3
 80011cc:	460b      	mov	r3, r1
 80011ce:	72fb      	strb	r3, [r7, #11]
 80011d0:	4613      	mov	r3, r2
 80011d2:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 80011d4:	7abb      	ldrb	r3, [r7, #10]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d92b      	bls.n	8001232 <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	69d8      	ldr	r0, [r3, #28]
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	8a5b      	ldrh	r3, [r3, #18]
 80011e2:	2200      	movs	r2, #0
 80011e4:	4619      	mov	r1, r3
 80011e6:	f002 fd3b 	bl	8003c60 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	7afa      	ldrb	r2, [r7, #11]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff18 	bl	8001028 <SX1278_write>
	for (i = 0; i < len; i++)
 80011f8:	2300      	movs	r3, #0
 80011fa:	75fb      	strb	r3, [r7, #23]
 80011fc:	e00c      	b.n	8001218 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6a19      	ldr	r1, [r3, #32]
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	18d4      	adds	r4, r2, r3
 8001208:	4608      	mov	r0, r1
 800120a:	f7ff ff91 	bl	8001130 <SX1278_read>
 800120e:	4603      	mov	r3, r0
 8001210:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 8001212:	7dfb      	ldrb	r3, [r7, #23]
 8001214:	3301      	adds	r3, #1
 8001216:	75fb      	strb	r3, [r7, #23]
 8001218:	7dfa      	ldrb	r2, [r7, #23]
 800121a:	7abb      	ldrb	r3, [r7, #10]
 800121c:	429a      	cmp	r2, r3
 800121e:	d3ee      	bcc.n	80011fe <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	69d8      	ldr	r0, [r3, #28]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	8a5b      	ldrh	r3, [r3, #18]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f002 fd18 	bl	8003c60 <HAL_GPIO_WritePin>
 8001230:	e000      	b.n	8001234 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 8001232:	bf00      	nop
}
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	bd90      	pop	{r4, r7, pc}

0800123a <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
	//default pin configuration
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69d8      	ldr	r0, [r3, #28]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	8a5b      	ldrh	r3, [r3, #18]
 800124a:	2201      	movs	r2, #1
 800124c:	4619      	mov	r1, r3
 800124e:	f002 fd07 	bl	8003c60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6958      	ldr	r0, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	89db      	ldrh	r3, [r3, #14]
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f002 fcff 	bl	8003c60 <HAL_GPIO_WritePin>

	//unable to establish the connection with module
	if (SX1278_read_address(inst, REG_LR_VERSION) != 0x12) return false;
 8001262:	2142      	movs	r1, #66	; 0x42
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff ff82 	bl	800116e <SX1278_read_address>
 800126a:	4603      	mov	r3, r0
 800126c:	2b12      	cmp	r3, #18
 800126e:	d001      	beq.n	8001274 <SX1278_init+0x3a>
 8001270:	2300      	movs	r3, #0
 8001272:	e0f0      	b.n	8001456 <SX1278_init+0x21c>

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f000 fa4d 	bl	8001714 <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 800127a:	2288      	movs	r2, #136	; 0x88
 800127c:	2101      	movs	r1, #1
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff feea 	bl	8001058 <SX1278_command>

	//Setting three frequency bytes
	//####################################
	//[!!!!] heavy low level shit going out there, must check if correct
	//####################################
	float step_in_mhz = 32/pow(2, 19);
 8001284:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
 8001288:	617b      	str	r3, [r7, #20]
	float multiplier = inst->config.frequency/step_in_mhz;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	edd3 6a00 	vldr	s13, [r3]
 8001290:	ed97 7a05 	vldr	s14, [r7, #20]
 8001294:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001298:	edc7 7a02 	vstr	s15, [r7, #8]
	uint8_t* multiplier_addr = &multiplier;
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	613b      	str	r3, [r7, #16]
	SX1278_command(inst, LR_RegFrMsb, *multiplier_addr);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	2106      	movs	r1, #6
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fed4 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, *(multiplier_addr + 1));
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	3301      	adds	r3, #1
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	2107      	movs	r1, #7
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fecc 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, *(multiplier_addr + 2));
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	3302      	adds	r3, #2
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	2108      	movs	r1, #8
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fec4 	bl	8001058 <SX1278_command>

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);				//Setting transmit power
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	791b      	ldrb	r3, [r3, #4]
 80012d4:	461a      	mov	r2, r3
 80012d6:	2109      	movs	r1, #9
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff febd 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 80012de:	222b      	movs	r2, #43	; 0x2b
 80012e0:	210b      	movs	r1, #11
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff feb8 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 80012e8:	2223      	movs	r2, #35	; 0x23
 80012ea:	210c      	movs	r1, #12
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff feb3 	bl	8001058 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 80012f2:	2287      	movs	r2, #135	; 0x87
 80012f4:	214d      	movs	r1, #77	; 0x4d
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff feae 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 80012fc:	2200      	movs	r2, #0
 80012fe:	2124      	movs	r1, #36	; 0x24
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff fea9 	bl	8001058 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	2b06      	cmp	r3, #6
 800130c:	d140      	bne.n	8001390 <SX1278_init+0x156>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	79db      	ldrb	r3, [r3, #7]
 8001312:	011b      	lsls	r3, r3, #4
 8001314:	b2da      	uxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	799b      	ldrb	r3, [r3, #6]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4413      	add	r3, r2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	3301      	adds	r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	461a      	mov	r2, r3
 8001328:	211d      	movs	r1, #29
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fe94 	bl	8001058 <SX1278_command>
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	795b      	ldrb	r3, [r3, #5]
 8001334:	011b      	lsls	r3, r3, #4
 8001336:	b2da      	uxtb	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7a1b      	ldrb	r3, [r3, #8]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	b2db      	uxtb	r3, r3
 8001340:	4413      	add	r3, r2
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	895b      	ldrh	r3, [r3, #10]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	b29b      	uxth	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	4413      	add	r3, r2
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	211e      	movs	r1, #30
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fe7e 	bl	8001058 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 800135c:	2131      	movs	r1, #49	; 0x31
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff05 	bl	800116e <SX1278_read_address>
 8001364:	4603      	mov	r3, r0
 8001366:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	f023 0307 	bic.w	r3, r3, #7
 800136e:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	f043 0305 	orr.w	r3, r3, #5
 8001376:	73fb      	strb	r3, [r7, #15]
		SX1278_command(inst, 0x31, tmp);
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	461a      	mov	r2, r3
 800137c:	2131      	movs	r1, #49	; 0x31
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fe6a 	bl	8001058 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 8001384:	220c      	movs	r2, #12
 8001386:	2137      	movs	r1, #55	; 0x37
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff fe65 	bl	8001058 <SX1278_command>
 800138e:	e024      	b.n	80013da <SX1278_init+0x1a0>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	79db      	ldrb	r3, [r3, #7]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	b2da      	uxtb	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	799b      	ldrb	r3, [r3, #6]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	4413      	add	r3, r2
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	211d      	movs	r1, #29
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fe55 	bl	8001058 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	795b      	ldrb	r3, [r3, #5]
 80013b2:	011b      	lsls	r3, r3, #4
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7a1b      	ldrb	r3, [r3, #8]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4413      	add	r3, r2
 80013c0:	b2da      	uxtb	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	895b      	ldrh	r3, [r3, #10]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	4413      	add	r3, r2
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	211e      	movs	r1, #30
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe3f 	bl	8001058 <SX1278_command>
	}

	SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	895b      	ldrh	r3, [r3, #10]
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	461a      	mov	r2, r3
 80013e2:	211f      	movs	r1, #31
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe37 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 80013ea:	2200      	movs	r2, #0
 80013ec:	2120      	movs	r1, #32
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fe32 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 80013f4:	220c      	movs	r2, #12
 80013f6:	2121      	movs	r1, #33	; 0x21
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff fe2d 	bl	8001058 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 80013fe:	2201      	movs	r2, #1
 8001400:	2141      	movs	r1, #65	; 0x41
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fe28 	bl	8001058 <SX1278_command>

	inst->newPacket = true;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2201      	movs	r2, #1
 800140c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxTimeout = false;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = false;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError = false;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rssi = 1;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->newPacket = false;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->pendingIRQ = false;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2200      	movs	r2, #0
 800143a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->txLen = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->rxLen = 0;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	SX1278_standby(inst);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f000 f970 	bl	8001734 <SX1278_standby>

	return true;
 8001454:	2301      	movs	r3, #1
}
 8001456:	4618      	mov	r0, r3
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	4613      	mov	r3, r2
 800146a:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	7b1b      	ldrb	r3, [r3, #12]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d127      	bne.n	80014c4 <SX1278_transmit+0x66>
	{
		SX1278_tx_mode(inst);
 8001474:	68f8      	ldr	r0, [r7, #12]
 8001476:	f000 f8f4 	bl	8001662 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	461a      	mov	r2, r3
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 f852 	bl	800152a <SX1278_tx_input>
		SX1278_tx_push(inst);
 8001486:	68f8      	ldr	r0, [r7, #12]
 8001488:	f000 f86a 	bl	8001560 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001492:	2b00      	cmp	r3, #0
 8001494:	d005      	beq.n	80014a2 <SX1278_transmit+0x44>
		{
			//waiting for interrupt
			inst->pendingIRQ = true;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 800149e:	2301      	movs	r3, #1
 80014a0:	e011      	b.n	80014c6 <SX1278_transmit+0x68>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 80014a2:	bf00      	nop
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	699a      	ldr	r2, [r3, #24]
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	8a1b      	ldrh	r3, [r3, #16]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f002 fbbe 	bl	8003c30 <HAL_GPIO_ReadPin>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f4      	beq.n	80014a4 <SX1278_transmit+0x46>
			return SX1278_tx_finish(inst);
 80014ba:	68f8      	ldr	r0, [r7, #12]
 80014bc:	f000 f85d 	bl	800157a <SX1278_tx_finish>
 80014c0:	4603      	mov	r3, r0
 80014c2:	e000      	b.n	80014c6 <SX1278_transmit+0x68>
	}
	else return false;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	7b1b      	ldrb	r3, [r3, #12]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d120      	bne.n	8001520 <SX1278_receive+0x52>
	{
		SX1278_rx_mode(inst);
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f000 f8e7 	bl	80016b2 <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <SX1278_receive+0x2c>
		{
			//waiting for interrupt
			inst->pendingIRQ = true;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e013      	b.n	8001522 <SX1278_receive+0x54>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 80014fa:	bf00      	nop
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	699a      	ldr	r2, [r3, #24]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	8a1b      	ldrh	r3, [r3, #16]
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f002 fb92 	bl	8003c30 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f4      	beq.n	80014fc <SX1278_receive+0x2e>
			SX1278_rx_get_packet(inst);
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 f856 	bl	80015c4 <SX1278_rx_get_packet>
			return inst->newPacket;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800151e:	e000      	b.n	8001522 <SX1278_receive+0x54>
	}
	else return false;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	60f8      	str	r0, [r7, #12]
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	4613      	mov	r3, r2
 8001536:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	461a      	mov	r2, r3
 800153c:	2122      	movs	r1, #34	; 0x22
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f7ff fd8a 	bl	8001058 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	2100      	movs	r1, #0
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f7ff fdb1 	bl	80010b2 <SX1278_command_burst>

	inst->txLen = length;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 8001568:	228b      	movs	r2, #139	; 0x8b
 800156a:	2101      	movs	r1, #1
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff fd73 	bl	8001058 <SX1278_command>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001582:	2112      	movs	r1, #18
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff fdf2 	bl	800116e <SX1278_read_address>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	bfcc      	ite	gt
 80015a2:	2301      	movgt	r3, #1
 80015a4:	2300      	movle	r3, #0
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SX1278_clearLoRaIrq(inst);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f000 f935 	bl	800181e <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f8bd 	bl	8001734 <SX1278_standby>
	return true;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 f8ee 	bl	80017ae <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3335      	adds	r3, #53	; 0x35
 80015d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00b ffe4 	bl	800d5aa <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 80015e2:	2110      	movs	r1, #16
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fdc2 	bl	800116e <SX1278_read_address>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	461a      	mov	r2, r3
 80015f2:	210d      	movs	r1, #13
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff fd2f 	bl	8001058 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	795b      	ldrb	r3, [r3, #5]
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d104      	bne.n	800160c <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001608:	73fb      	strb	r3, [r7, #15]
 800160a:	e005      	b.n	8001618 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 800160c:	2113      	movs	r1, #19
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fdad 	bl	800116e <SX1278_read_address>
 8001614:	4603      	mov	r3, r0
 8001616:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f103 0235 	add.w	r2, r3, #53	; 0x35
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2100      	movs	r1, #0
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fdcc 	bl	80011c0 <SX1278_read_burst>

	inst->newPacket = (inst->rxTimeout || (inst->crcError && LR_VALIDATE_CRCERROR));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = SX1278_getRSSI(inst);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 f8ff 	bl	8001838 <SX1278_getRSSI>
 800163a:	4602      	mov	r2, r0
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->rxLen = packet_size;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7bfa      	ldrb	r2, [r7, #15]
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	SX1278_clearLoRaIrq(inst);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f8e8 	bl	800181e <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f870 	bl	8001734 <SX1278_standby>

	return inst->newPacket;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f8d7 	bl	800181e <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001670:	2241      	movs	r2, #65	; 0x41
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fcef 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 800167a:	22f7      	movs	r2, #247	; 0xf7
 800167c:	2111      	movs	r1, #17
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fcea 	bl	8001058 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001684:	210e      	movs	r1, #14
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff fd71 	bl	800116e <SX1278_read_address>
 800168c:	4603      	mov	r3, r0
 800168e:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001690:	7bfb      	ldrb	r3, [r7, #15]
 8001692:	461a      	mov	r2, r3
 8001694:	210d      	movs	r1, #13
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff fcde 	bl	8001058 <SX1278_command>

	inst->txLen = 0;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->mode = TX;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2202      	movs	r2, #2
 80016a8:	731a      	strb	r2, [r3, #12]
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b084      	sub	sp, #16
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f000 f8af 	bl	800181e <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 80016c0:	2201      	movs	r2, #1
 80016c2:	2140      	movs	r1, #64	; 0x40
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff fcc7 	bl	8001058 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 80016ca:	221f      	movs	r2, #31
 80016cc:	2111      	movs	r1, #17
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff fcc2 	bl	8001058 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 80016d4:	210f      	movs	r1, #15
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fd49 	bl	800116e <SX1278_read_address>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	461a      	mov	r2, r3
 80016e4:	210d      	movs	r1, #13
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fcb6 	bl	8001058 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 80016ec:	228d      	movs	r2, #141	; 0x8d
 80016ee:	2101      	movs	r1, #1
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fcb1 	bl	8001058 <SX1278_command>

	inst->crcError = false;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rxLen = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->mode = RX;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	731a      	strb	r2, [r3, #12]
}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegOpMode, 0x08);
 800171c:	2208      	movs	r2, #8
 800171e:	2101      	movs	r1, #1
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fc99 	bl	8001058 <SX1278_command>
	inst->mode = SLEEP;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2200      	movs	r2, #0
 800172a:	731a      	strb	r2, [r3, #12]
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegOpMode, 0x09);
 800173c:	2209      	movs	r2, #9
 800173e:	2101      	movs	r1, #1
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff fc89 	bl	8001058 <SX1278_command>
	inst->mode = STANDBY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	731a      	strb	r2, [r3, #12]
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <SX1278_dio0_IRQ>:
}

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01e      	beq.n	80017a4 <SX1278_dio0_IRQ+0x50>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800176c:	2b00      	cmp	r3, #0
 800176e:	d019      	beq.n	80017a4 <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	7b1b      	ldrb	r3, [r3, #12]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d104      	bne.n	8001782 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff fefe 	bl	800157a <SX1278_tx_finish>
 800177e:	4603      	mov	r3, r0
 8001780:	e011      	b.n	80017a6 <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7b1b      	ldrb	r3, [r3, #12]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d104      	bne.n	8001794 <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ff1a 	bl	80015c4 <SX1278_rx_get_packet>
 8001790:	4603      	mov	r3, r0
 8001792:	e008      	b.n	80017a6 <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 f842 	bl	800181e <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffca 	bl	8001734 <SX1278_standby>
			return false;
 80017a0:	2300      	movs	r3, #0
 80017a2:	e000      	b.n	80017a6 <SX1278_dio0_IRQ+0x52>
		}

		inst->pendingIRQ = false;
		return true;
	}
	else return false;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 80017b6:	2112      	movs	r1, #18
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fcd8 	bl	800116e <SX1278_read_address>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	bfcc      	ite	gt
 80017d6:	2301      	movgt	r3, #1
 80017d8:	2300      	movle	r3, #0
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	bfcc      	ite	gt
 80017f0:	2301      	movgt	r3, #1
 80017f2:	2300      	movle	r3, #0
 80017f4:	b2da      	uxtb	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001802:	f003 0320 	and.w	r3, r3, #32
 8001806:	2b00      	cmp	r3, #0
 8001808:	bfcc      	ite	gt
 800180a:	2301      	movgt	r3, #1
 800180c:	2300      	movle	r3, #0
 800180e:	b2da      	uxtb	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001826:	22ff      	movs	r2, #255	; 0xff
 8001828:	2112      	movs	r1, #18
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff fc14 	bl	8001058 <SX1278_command>
}
 8001830:	bf00      	nop
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001840:	211a      	movs	r1, #26
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fc93 	bl	800116e <SX1278_read_address>
 8001848:	4603      	mov	r3, r0
 800184a:	3ba4      	subs	r3, #164	; 0xa4
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <read_data>:
#include "bmp280.h"

static inline int read_data(BMP280 *inst, uint8_t addr, uint8_t *value, uint8_t len) {
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b08b      	sub	sp, #44	; 0x2c
 8001858:	af04      	add	r7, sp, #16
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	461a      	mov	r2, r3
 8001860:	460b      	mov	r3, r1
 8001862:	72fb      	strb	r3, [r7, #11]
 8001864:	4613      	mov	r3, r2
 8001866:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (inst->addr << 1);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	889b      	ldrh	r3, [r3, #4]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK) return 0;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6818      	ldr	r0, [r3, #0]
 8001874:	7afb      	ldrb	r3, [r7, #11]
 8001876:	b29c      	uxth	r4, r3
 8001878:	7abb      	ldrb	r3, [r7, #10]
 800187a:	b29b      	uxth	r3, r3
 800187c:	8af9      	ldrh	r1, [r7, #22]
 800187e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001882:	9202      	str	r2, [sp, #8]
 8001884:	9301      	str	r3, [sp, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	2301      	movs	r3, #1
 800188c:	4622      	mov	r2, r4
 800188e:	f002 fc65 	bl	800415c <HAL_I2C_Mem_Read>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <read_data+0x48>
 8001898:	2300      	movs	r3, #0
 800189a:	e000      	b.n	800189e <read_data+0x4a>
	else return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}

080018a6 <write_register8>:

static int write_register8(BMP280 *inst, uint8_t addr, uint8_t value) {
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b088      	sub	sp, #32
 80018aa:	af04      	add	r7, sp, #16
 80018ac:	6078      	str	r0, [r7, #4]
 80018ae:	460b      	mov	r3, r1
 80018b0:	70fb      	strb	r3, [r7, #3]
 80018b2:	4613      	mov	r3, r2
 80018b4:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (inst->addr << 1);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	889b      	ldrh	r3, [r3, #4]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(inst->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK) return false;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	78fb      	ldrb	r3, [r7, #3]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	89f9      	ldrh	r1, [r7, #14]
 80018c8:	f242 7310 	movw	r3, #10000	; 0x2710
 80018cc:	9302      	str	r3, [sp, #8]
 80018ce:	2301      	movs	r3, #1
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	1cbb      	adds	r3, r7, #2
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	f002 fb46 	bl	8003f68 <HAL_I2C_Mem_Write>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d101      	bne.n	80018e6 <write_register8+0x40>
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <write_register8+0x42>
	else return true;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <read_register16>:

static bool read_register16(BMP280 *inst, uint8_t addr, uint16_t *value) {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af04      	add	r7, sp, #16
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	460b      	mov	r3, r1
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (inst->addr << 1);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	889b      	ldrh	r3, [r3, #4]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(inst->i2c, tx_buff, addr, 1, rx_buff, 2, 5000) == HAL_OK)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6818      	ldr	r0, [r3, #0]
 800190a:	7afb      	ldrb	r3, [r7, #11]
 800190c:	b29a      	uxth	r2, r3
 800190e:	8af9      	ldrh	r1, [r7, #22]
 8001910:	f241 3388 	movw	r3, #5000	; 0x1388
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	2302      	movs	r3, #2
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2301      	movs	r3, #1
 8001922:	f002 fc1b 	bl	800415c <HAL_I2C_Mem_Read>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10b      	bne.n	8001944 <read_register16+0x54>
	{
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800192c:	7d7b      	ldrb	r3, [r7, #21]
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	b21a      	sxth	r2, r3
 8001932:	7d3b      	ldrb	r3, [r7, #20]
 8001934:	b21b      	sxth	r3, r3
 8001936:	4313      	orrs	r3, r2
 8001938:	b21b      	sxth	r3, r3
 800193a:	b29a      	uxth	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	801a      	strh	r2, [r3, #0]
		return true;
 8001940:	2301      	movs	r3, #1
 8001942:	e000      	b.n	8001946 <read_register16+0x56>
	}
	else return false;
 8001944:	2300      	movs	r3, #0

}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <read_calibration_data>:

static bool read_calibration_data(BMP280 *inst)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	return (read_register16(inst, 0x88, &inst->dig_T1)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	330c      	adds	r3, #12
 800195a:	461a      	mov	r2, r3
 800195c:	2188      	movs	r1, #136	; 0x88
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ffc6 	bl	80018f0 <read_register16>
 8001964:	4603      	mov	r3, r0
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001966:	2b00      	cmp	r3, #0
 8001968:	d06f      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8a, (uint16_t *) &inst->dig_T2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	330e      	adds	r3, #14
 800196e:	461a      	mov	r2, r3
 8001970:	218a      	movs	r1, #138	; 0x8a
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffbc 	bl	80018f0 <read_register16>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d065      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8c, (uint16_t *) &inst->dig_T3)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3310      	adds	r3, #16
 8001982:	461a      	mov	r2, r3
 8001984:	218c      	movs	r1, #140	; 0x8c
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f7ff ffb2 	bl	80018f0 <read_register16>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d05b      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x8e, &inst->dig_P1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3312      	adds	r3, #18
 8001996:	461a      	mov	r2, r3
 8001998:	218e      	movs	r1, #142	; 0x8e
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa8 	bl	80018f0 <read_register16>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d051      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x90, (uint16_t *) &inst->dig_P2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	3314      	adds	r3, #20
 80019aa:	461a      	mov	r2, r3
 80019ac:	2190      	movs	r1, #144	; 0x90
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff9e 	bl	80018f0 <read_register16>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d047      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x92, (uint16_t *) &inst->dig_P3)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3316      	adds	r3, #22
 80019be:	461a      	mov	r2, r3
 80019c0:	2192      	movs	r1, #146	; 0x92
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ff94 	bl	80018f0 <read_register16>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d03d      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x94, (uint16_t *) &inst->dig_P4)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3318      	adds	r3, #24
 80019d2:	461a      	mov	r2, r3
 80019d4:	2194      	movs	r1, #148	; 0x94
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff8a 	bl	80018f0 <read_register16>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d033      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x96, (uint16_t *) &inst->dig_P5)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	331a      	adds	r3, #26
 80019e6:	461a      	mov	r2, r3
 80019e8:	2196      	movs	r1, #150	; 0x96
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff80 	bl	80018f0 <read_register16>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d029      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x98, (uint16_t *) &inst->dig_P6)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	331c      	adds	r3, #28
 80019fa:	461a      	mov	r2, r3
 80019fc:	2198      	movs	r1, #152	; 0x98
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff76 	bl	80018f0 <read_register16>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d01f      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9a, (uint16_t *) &inst->dig_P7)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	331e      	adds	r3, #30
 8001a0e:	461a      	mov	r2, r3
 8001a10:	219a      	movs	r1, #154	; 0x9a
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ff6c 	bl	80018f0 <read_register16>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d015      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9c, (uint16_t *) &inst->dig_P8)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3320      	adds	r3, #32
 8001a22:	461a      	mov	r2, r3
 8001a24:	219c      	movs	r1, #156	; 0x9c
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ff62 	bl	80018f0 <read_register16>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00b      	beq.n	8001a4a <read_calibration_data+0xfc>
	&& read_register16(inst, 0x9e, (uint16_t *) &inst->dig_P9));
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3322      	adds	r3, #34	; 0x22
 8001a36:	461a      	mov	r2, r3
 8001a38:	219e      	movs	r1, #158	; 0x9e
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff ff58 	bl	80018f0 <read_register16>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <read_calibration_data+0xfc>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <read_calibration_data+0xfe>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <bmp280_init>:

bool bmp280_init(BMP280 *inst, BMP280_config *params)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b084      	sub	sp, #16
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
 8001a62:	6039      	str	r1, [r7, #0]
	if (inst->addr != BMP280_I2C_ADDRESS_0 && inst->addr != BMP280_I2C_ADDRESS_1) return false;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	889b      	ldrh	r3, [r3, #4]
 8001a68:	2b76      	cmp	r3, #118	; 0x76
 8001a6a:	d005      	beq.n	8001a78 <bmp280_init+0x1e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	889b      	ldrh	r3, [r3, #4]
 8001a70:	2b77      	cmp	r3, #119	; 0x77
 8001a72:	d001      	beq.n	8001a78 <bmp280_init+0x1e>
 8001a74:	2300      	movs	r3, #0
 8001a76:	e06f      	b.n	8001b58 <bmp280_init+0xfe>
	if (read_data(inst, BMP280_REG_ID, &inst->id, 1)) return false;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	1d9a      	adds	r2, r3, #6
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	21d0      	movs	r1, #208	; 0xd0
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff fee7 	bl	8001854 <read_data>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <bmp280_init+0x36>
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	e063      	b.n	8001b58 <bmp280_init+0xfe>
	if (inst->id != BMP280_CHIP_ID) return false;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	799b      	ldrb	r3, [r3, #6]
 8001a94:	2b58      	cmp	r3, #88	; 0x58
 8001a96:	d001      	beq.n	8001a9c <bmp280_init+0x42>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	e05d      	b.n	8001b58 <bmp280_init+0xfe>

	// Soft reset.
	if (write_register8(inst, BMP280_REG_RESET, BMP280_RESET_VALUE)) return false;
 8001a9c:	22b6      	movs	r2, #182	; 0xb6
 8001a9e:	21e0      	movs	r1, #224	; 0xe0
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff00 	bl	80018a6 <write_register8>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <bmp280_init+0x56>
 8001aac:	2300      	movs	r3, #0
 8001aae:	e053      	b.n	8001b58 <bmp280_init+0xfe>

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(inst, BMP280_REG_STATUS, &status, 1) && (status & 1) == 0) break;
 8001ab0:	f107 020d 	add.w	r2, r7, #13
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	21f3      	movs	r1, #243	; 0xf3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fecb 	bl	8001854 <read_data>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1f5      	bne.n	8001ab0 <bmp280_init+0x56>
 8001ac4:	7b7b      	ldrb	r3, [r7, #13]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <bmp280_init+0x56>
	}

	if (!read_calibration_data(inst)) return false;
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ff3d 	bl	800194e <read_calibration_data>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f083 0301 	eor.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d100      	bne.n	8001ae2 <bmp280_init+0x88>
 8001ae0:	e001      	b.n	8001ae6 <bmp280_init+0x8c>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e038      	b.n	8001b58 <bmp280_init+0xfe>

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	791b      	ldrb	r3, [r3, #4]
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	b25a      	sxtb	r2, r3
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	785b      	ldrb	r3, [r3, #1]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	4313      	orrs	r3, r2
 8001af8:	b25b      	sxtb	r3, r3
 8001afa:	73fb      	strb	r3, [r7, #15]
	if (write_register8(inst, BMP280_REG_CONFIG, config)) return false;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	461a      	mov	r2, r3
 8001b00:	21f5      	movs	r1, #245	; 0xf5
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fecf 	bl	80018a6 <write_register8>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <bmp280_init+0xb8>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e022      	b.n	8001b58 <bmp280_init+0xfe>

	if (params->mode == BMP280_MODE_FORCED) {
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d102      	bne.n	8001b20 <bmp280_init+0xc6>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5) | (params->oversampling_pressure << 2) | (params->mode);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	78db      	ldrb	r3, [r3, #3]
 8001b24:	015b      	lsls	r3, r3, #5
 8001b26:	b25a      	sxtb	r2, r3
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	789b      	ldrb	r3, [r3, #2]
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	b25b      	sxtb	r3, r3
 8001b30:	4313      	orrs	r3, r2
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b25b      	sxtb	r3, r3
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	73bb      	strb	r3, [r7, #14]

	if (write_register8(inst, BMP280_REG_CTRL, ctrl)) return false;
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	461a      	mov	r2, r3
 8001b44:	21f4      	movs	r1, #244	; 0xf4
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fead 	bl	80018a6 <write_register8>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <bmp280_init+0xfc>
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <bmp280_init+0xfe>

	return true;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280 *inst, int32_t adc_temp,
		int32_t *fine_temp) {
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	10da      	asrs	r2, r3, #3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	899b      	ldrh	r3, [r3, #12]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	1ad3      	subs	r3, r2, r3
			* (int32_t) inst->dig_T2) >> 11;
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) inst->dig_T1 << 1)))
 8001b82:	12db      	asrs	r3, r3, #11
 8001b84:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	111b      	asrs	r3, r3, #4
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	8992      	ldrh	r2, [r2, #12]
 8001b8e:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) inst->dig_T1)) >> 12)
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	1112      	asrs	r2, r2, #4
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	8989      	ldrh	r1, [r1, #12]
 8001b98:	1a52      	subs	r2, r2, r1
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	131b      	asrs	r3, r3, #12
			* (int32_t) inst->dig_T3) >> 14;
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) inst->dig_T1)
 8001baa:	139b      	asrs	r3, r3, #14
 8001bac:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	441a      	add	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3380      	adds	r3, #128	; 0x80
 8001bc4:	121b      	asrs	r3, r3, #8
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	371c      	adds	r7, #28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280 *inst, int32_t adc_press,
		int32_t fine_temp) {
 8001bd2:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001bd6:	b08a      	sub	sp, #40	; 0x28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4619      	mov	r1, r3
 8001be4:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001be8:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001bec:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001bf0:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) inst->dig_P6;
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	6a3a      	ldr	r2, [r7, #32]
 8001bf8:	fb02 f203 	mul.w	r2, r2, r3
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	6a39      	ldr	r1, [r7, #32]
 8001c00:	fb01 f303 	mul.w	r3, r1, r3
 8001c04:	441a      	add	r2, r3
 8001c06:	6a39      	ldr	r1, [r7, #32]
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	fba1 3403 	umull	r3, r4, r1, r3
 8001c0e:	4422      	add	r2, r4
 8001c10:	4614      	mov	r4, r2
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	f9b2 201c 	ldrsh.w	r2, [r2, #28]
 8001c18:	b211      	sxth	r1, r2
 8001c1a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c1e:	fb01 f504 	mul.w	r5, r1, r4
 8001c22:	fb03 f002 	mul.w	r0, r3, r2
 8001c26:	4428      	add	r0, r5
 8001c28:	fba3 3401 	umull	r3, r4, r3, r1
 8001c2c:	1902      	adds	r2, r0, r4
 8001c2e:	4614      	mov	r4, r2
 8001c30:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8001c34:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) inst->dig_P5) << 17);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001c44:	6a3a      	ldr	r2, [r7, #32]
 8001c46:	fb04 f102 	mul.w	r1, r4, r2
 8001c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4c:	fb03 f202 	mul.w	r2, r3, r2
 8001c50:	1888      	adds	r0, r1, r2
 8001c52:	6a3a      	ldr	r2, [r7, #32]
 8001c54:	fba2 1203 	umull	r1, r2, r2, r3
 8001c58:	1883      	adds	r3, r0, r2
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f04f 0500 	mov.w	r5, #0
 8001c60:	f04f 0600 	mov.w	r6, #0
 8001c64:	0456      	lsls	r6, r2, #17
 8001c66:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001c6a:	044d      	lsls	r5, r1, #17
 8001c6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c70:	186b      	adds	r3, r5, r1
 8001c72:	eb46 0402 	adc.w	r4, r6, r2
 8001c76:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) inst->dig_P4) << 35);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001c80:	b219      	sxth	r1, r3
 8001c82:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001c86:	f04f 0500 	mov.w	r5, #0
 8001c8a:	f04f 0600 	mov.w	r6, #0
 8001c8e:	00ce      	lsls	r6, r1, #3
 8001c90:	2500      	movs	r5, #0
 8001c92:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001c96:	186b      	adds	r3, r5, r1
 8001c98:	eb46 0402 	adc.w	r4, r6, r2
 8001c9c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	6a3a      	ldr	r2, [r7, #32]
 8001ca4:	fb02 f203 	mul.w	r2, r2, r3
 8001ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001caa:	6a39      	ldr	r1, [r7, #32]
 8001cac:	fb01 f303 	mul.w	r3, r1, r3
 8001cb0:	441a      	add	r2, r3
 8001cb2:	6a39      	ldr	r1, [r7, #32]
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	fba1 3403 	umull	r3, r4, r1, r3
 8001cba:	4422      	add	r2, r4
 8001cbc:	4614      	mov	r4, r2
 8001cbe:	68fa      	ldr	r2, [r7, #12]
 8001cc0:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001cc4:	b211      	sxth	r1, r2
 8001cc6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001cca:	fb01 f504 	mul.w	r5, r1, r4
 8001cce:	fb03 f002 	mul.w	r0, r3, r2
 8001cd2:	4428      	add	r0, r5
 8001cd4:	fba3 3401 	umull	r3, r4, r3, r1
 8001cd8:	1902      	adds	r2, r0, r4
 8001cda:	4614      	mov	r4, r2
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	0a19      	lsrs	r1, r3, #8
 8001ce6:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001cea:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) inst->dig_P2) << 12);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cf2:	b21b      	sxth	r3, r3
 8001cf4:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001cf8:	6a38      	ldr	r0, [r7, #32]
 8001cfa:	fb04 f500 	mul.w	r5, r4, r0
 8001cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d00:	fb03 f000 	mul.w	r0, r3, r0
 8001d04:	4428      	add	r0, r5
 8001d06:	6a3d      	ldr	r5, [r7, #32]
 8001d08:	fba5 5603 	umull	r5, r6, r5, r3
 8001d0c:	1983      	adds	r3, r0, r6
 8001d0e:	461e      	mov	r6, r3
 8001d10:	f04f 0b00 	mov.w	fp, #0
 8001d14:	f04f 0c00 	mov.w	ip, #0
 8001d18:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001d1c:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001d20:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) inst->dig_P3) >> 8)
 8001d24:	eb1b 0301 	adds.w	r3, fp, r1
 8001d28:	eb4c 0402 	adc.w	r4, ip, r2
 8001d2c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) inst->dig_P1) >> 33;
 8001d30:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d34:	1c19      	adds	r1, r3, #0
 8001d36:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	8a5b      	ldrh	r3, [r3, #18]
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	f04f 0400 	mov.w	r4, #0
 8001d44:	fb03 f502 	mul.w	r5, r3, r2
 8001d48:	fb01 f004 	mul.w	r0, r1, r4
 8001d4c:	4428      	add	r0, r5
 8001d4e:	fba1 3403 	umull	r3, r4, r1, r3
 8001d52:	1902      	adds	r2, r0, r4
 8001d54:	4614      	mov	r4, r2
 8001d56:	f04f 0100 	mov.w	r1, #0
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	1061      	asrs	r1, r4, #1
 8001d60:	17e2      	asrs	r2, r4, #31
 8001d62:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 8001d66:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d6a:	4323      	orrs	r3, r4
 8001d6c:	d101      	bne.n	8001d72 <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e0d4      	b.n	8001f1c <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001d78:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001d7c:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	ea4f 0963 	mov.w	r9, r3, asr #1
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 8001d8c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001d90:	4645      	mov	r5, r8
 8001d92:	464e      	mov	r6, r9
 8001d94:	1aed      	subs	r5, r5, r3
 8001d96:	eb66 0604 	sbc.w	r6, r6, r4
 8001d9a:	46a8      	mov	r8, r5
 8001d9c:	46b1      	mov	r9, r6
 8001d9e:	eb18 0308 	adds.w	r3, r8, r8
 8001da2:	eb49 0409 	adc.w	r4, r9, r9
 8001da6:	4698      	mov	r8, r3
 8001da8:	46a1      	mov	r9, r4
 8001daa:	eb18 0805 	adds.w	r8, r8, r5
 8001dae:	eb49 0906 	adc.w	r9, r9, r6
 8001db2:	f04f 0100 	mov.w	r1, #0
 8001db6:	f04f 0200 	mov.w	r2, #0
 8001dba:	ea4f 1289 	mov.w	r2, r9, lsl #6
 8001dbe:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 8001dc2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8001dc6:	eb18 0801 	adds.w	r8, r8, r1
 8001dca:	eb49 0902 	adc.w	r9, r9, r2
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001dda:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001dde:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001de2:	4688      	mov	r8, r1
 8001de4:	4691      	mov	r9, r2
 8001de6:	eb18 0805 	adds.w	r8, r8, r5
 8001dea:	eb49 0906 	adc.w	r9, r9, r6
 8001dee:	f04f 0100 	mov.w	r1, #0
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001dfa:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001dfe:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8001e02:	4688      	mov	r8, r1
 8001e04:	4691      	mov	r9, r2
 8001e06:	eb18 0005 	adds.w	r0, r8, r5
 8001e0a:	eb49 0106 	adc.w	r1, r9, r6
 8001e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e12:	f7fe ff39 	bl	8000c88 <__aeabi_ldivmod>
 8001e16:	4603      	mov	r3, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) inst->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001e24:	b219      	sxth	r1, r3
 8001e26:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001e2a:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	f04f 0400 	mov.w	r4, #0
 8001e36:	0b6b      	lsrs	r3, r5, #13
 8001e38:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001e3c:	1374      	asrs	r4, r6, #13
 8001e3e:	fb03 f502 	mul.w	r5, r3, r2
 8001e42:	fb01 f004 	mul.w	r0, r1, r4
 8001e46:	4428      	add	r0, r5
 8001e48:	fba1 1203 	umull	r1, r2, r1, r3
 8001e4c:	1883      	adds	r3, r0, r2
 8001e4e:	461a      	mov	r2, r3
 8001e50:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	f04f 0400 	mov.w	r4, #0
 8001e5c:	0b6b      	lsrs	r3, r5, #13
 8001e5e:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001e62:	1374      	asrs	r4, r6, #13
 8001e64:	fb03 f502 	mul.w	r5, r3, r2
 8001e68:	fb01 f004 	mul.w	r0, r1, r4
 8001e6c:	4428      	add	r0, r5
 8001e6e:	fba1 1203 	umull	r1, r2, r1, r3
 8001e72:	1883      	adds	r3, r0, r2
 8001e74:	461a      	mov	r2, r3
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	f04f 0400 	mov.w	r4, #0
 8001e7e:	0e4b      	lsrs	r3, r1, #25
 8001e80:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8001e84:	1654      	asrs	r4, r2, #25
 8001e86:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) inst->dig_P8 * p) >> 19;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	fb04 f102 	mul.w	r1, r4, r2
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	fb03 f202 	mul.w	r2, r3, r2
 8001ea2:	1888      	adds	r0, r1, r2
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	fba2 1203 	umull	r1, r2, r2, r3
 8001eaa:	1883      	adds	r3, r0, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	f04f 0300 	mov.w	r3, #0
 8001eb2:	f04f 0400 	mov.w	r4, #0
 8001eb6:	0ccb      	lsrs	r3, r1, #19
 8001eb8:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8001ebc:	14d4      	asrs	r4, r2, #19
 8001ebe:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) inst->dig_P7 << 4);
 8001ec2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001ec6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001eca:	eb11 0803 	adds.w	r8, r1, r3
 8001ece:	eb42 0904 	adc.w	r9, r2, r4
 8001ed2:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001ed6:	eb13 0508 	adds.w	r5, r3, r8
 8001eda:	eb44 0609 	adc.w	r6, r4, r9
 8001ede:	f04f 0100 	mov.w	r1, #0
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	0a29      	lsrs	r1, r5, #8
 8001ee8:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001eec:	1232      	asrs	r2, r6, #8
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001ef4:	b21d      	sxth	r5, r3
 8001ef6:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001efa:	f04f 0800 	mov.w	r8, #0
 8001efe:	f04f 0900 	mov.w	r9, #0
 8001f02:	ea4f 1906 	mov.w	r9, r6, lsl #4
 8001f06:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001f0a:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001f0e:	eb18 0301 	adds.w	r3, r8, r1
 8001f12:	eb49 0402 	adc.w	r4, r9, r2
 8001f16:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001f1a:	693b      	ldr	r3, [r7, #16]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3728      	adds	r7, #40	; 0x28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

08001f26 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280 *inst, int32_t *temperature, uint32_t *pressure) {
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b08a      	sub	sp, #40	; 0x28
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	60f8      	str	r0, [r7, #12]
 8001f2e:	60b9      	str	r1, [r7, #8]
 8001f30:	607a      	str	r2, [r7, #4]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[6];

	// Need to read in one sequence to ensure they match.
	size_t size = 6;
 8001f32:	2306      	movs	r3, #6
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
	if (read_data(inst, 0xf7, data, size)) return false;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	f107 0214 	add.w	r2, r7, #20
 8001f3e:	21f7      	movs	r1, #247	; 0xf7
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f7ff fc87 	bl	8001854 <read_data>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <bmp280_read_fixed+0x2a>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e027      	b.n	8001fa0 <bmp280_read_fixed+0x7a>

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001f50:	7d3b      	ldrb	r3, [r7, #20]
 8001f52:	031a      	lsls	r2, r3, #12
 8001f54:	7d7b      	ldrb	r3, [r7, #21]
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	7dba      	ldrb	r2, [r7, #22]
 8001f5c:	0912      	lsrs	r2, r2, #4
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	4313      	orrs	r3, r2
 8001f62:	623b      	str	r3, [r7, #32]
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	031a      	lsls	r2, r3, #12
 8001f68:	7e3b      	ldrb	r3, [r7, #24]
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	7e7a      	ldrb	r2, [r7, #25]
 8001f70:	0912      	lsrs	r2, r2, #4
 8001f72:	b2d2      	uxtb	r2, r2
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61fb      	str	r3, [r7, #28]

	int32_t fine_temp;
	*temperature = compensate_temperature(inst, adc_temp, &fine_temp);
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	69f9      	ldr	r1, [r7, #28]
 8001f80:	68f8      	ldr	r0, [r7, #12]
 8001f82:	f7ff fded 	bl	8001b60 <compensate_temperature>
 8001f86:	4602      	mov	r2, r0
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(inst, adc_pressure, fine_temp);
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6a39      	ldr	r1, [r7, #32]
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff fe1d 	bl	8001bd2 <compensate_pressure>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	601a      	str	r2, [r3, #0]

	return true;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3728      	adds	r7, #40	; 0x28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <bmp280_read_float>:

bool bmp280_read_float(BMP280 *inst, float *temperature, float *pressure)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	60b9      	str	r1, [r7, #8]
 8001fb2:	607a      	str	r2, [r7, #4]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	if (bmp280_read_fixed(inst, &fixed_temperature, &fixed_pressure))
 8001fb4:	f107 0210 	add.w	r2, r7, #16
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7ff ffb1 	bl	8001f26 <bmp280_read_fixed>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <bmp280_read_float+0x56>
	{
		*temperature = (float) fixed_temperature / 100;
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	ee07 3a90 	vmov	s15, r3
 8001fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002008 <bmp280_read_float+0x60>
 8001fd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fec:	eddf 6a07 	vldr	s13, [pc, #28]	; 800200c <bmp280_read_float+0x64>
 8001ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	edc3 7a00 	vstr	s15, [r3]

		return true;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e000      	b.n	8002000 <bmp280_read_float+0x58>
	}

	return false;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	42c80000 	.word	0x42c80000
 800200c:	43800000 	.word	0x43800000

08002010 <print>:
static void setup();
static void loop();

static char printBuffer[512];
static inline void print(char* str)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) str, strlen(str));
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe f8d9 	bl	80001d0 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	b29b      	uxth	r3, r3
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f00a fe39 	bl	800cc9c <CDC_Transmit_FS>
};
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <setup>:
bool nextTX;
int message;
uint8_t message_length;

void setup()
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	if (bmp280_begin())
 8002038:	f000 f8d6 	bl	80021e8 <bmp280_begin>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <setup+0x28>
	{
		bmp280_read_float(&bmp280, &temperature, &pressure);
 8002042:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <setup+0x4c>)
 8002044:	490f      	ldr	r1, [pc, #60]	; (8002084 <setup+0x50>)
 8002046:	4810      	ldr	r0, [pc, #64]	; (8002088 <setup+0x54>)
 8002048:	f7ff ffae 	bl	8001fa8 <bmp280_read_float>
		HAL_GPIO_TogglePin(LEDA_GPIO_Port, LEDA_Pin);
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	480f      	ldr	r0, [pc, #60]	; (800208c <setup+0x58>)
 8002050:	f001 fe1f 	bl	8003c92 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002054:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002058:	f000 ff80 	bl	8002f5c <HAL_Delay>
	}

	if (radio_begin())
 800205c:	f000 f910 	bl	8002280 <radio_begin>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d009      	beq.n	800207a <setup+0x46>
	{
		radio_procedure();	//starts radio loop, now radio wokrs dependend on DIO0 interrupt in ping-pong mode
 8002066:	f000 f87f 	bl	8002168 <radio_procedure>
		HAL_GPIO_TogglePin(LEDB_GPIO_Port, LEDB_Pin);
 800206a:	2140      	movs	r1, #64	; 0x40
 800206c:	4807      	ldr	r0, [pc, #28]	; (800208c <setup+0x58>)
 800206e:	f001 fe10 	bl	8003c92 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002072:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002076:	f000 ff71 	bl	8002f5c <HAL_Delay>
	}
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200007ac 	.word	0x200007ac
 8002084:	200007a4 	.word	0x200007a4
 8002088:	200009ec 	.word	0x200009ec
 800208c:	40020800 	.word	0x40020800

08002090 <loop>:

void loop()
{
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	b083      	sub	sp, #12
 8002094:	af02      	add	r7, sp, #8
	if (bmp280_read_float(&bmp280, &temperature, &pressure))
 8002096:	4a29      	ldr	r2, [pc, #164]	; (800213c <loop+0xac>)
 8002098:	4929      	ldr	r1, [pc, #164]	; (8002140 <loop+0xb0>)
 800209a:	482a      	ldr	r0, [pc, #168]	; (8002144 <loop+0xb4>)
 800209c:	f7ff ff84 	bl	8001fa8 <bmp280_read_float>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d018      	beq.n	80020d8 <loop+0x48>
	{
		sprintf(printBuffer, "Pressure: %.2f Pa, Temperature: %.2f C\r\n", pressure, temperature);
 80020a6:	4b25      	ldr	r3, [pc, #148]	; (800213c <loop+0xac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe fa4c 	bl	8000548 <__aeabi_f2d>
 80020b0:	4605      	mov	r5, r0
 80020b2:	460e      	mov	r6, r1
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <loop+0xb0>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fa45 	bl	8000548 <__aeabi_f2d>
 80020be:	4603      	mov	r3, r0
 80020c0:	460c      	mov	r4, r1
 80020c2:	e9cd 3400 	strd	r3, r4, [sp]
 80020c6:	462a      	mov	r2, r5
 80020c8:	4633      	mov	r3, r6
 80020ca:	491f      	ldr	r1, [pc, #124]	; (8002148 <loop+0xb8>)
 80020cc:	481f      	ldr	r0, [pc, #124]	; (800214c <loop+0xbc>)
 80020ce:	f00c f989 	bl	800e3e4 <siprintf>
		print(printBuffer);
 80020d2:	481e      	ldr	r0, [pc, #120]	; (800214c <loop+0xbc>)
 80020d4:	f7ff ff9c 	bl	8002010 <print>
		//HAL_Delay(50);
	}
	if (radio.newPacket)
 80020d8:	4b1d      	ldr	r3, [pc, #116]	; (8002150 <loop+0xc0>)
 80020da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d015      	beq.n	800210e <loop+0x7e>
	{
		sprintf(printBuffer, "Received (%d @ %d):\t%s\r\n", radio.rxLen, radio.rssi, radio.rxBuffer);
 80020e2:	4b1b      	ldr	r3, [pc, #108]	; (8002150 <loop+0xc0>)
 80020e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020e8:	4619      	mov	r1, r3
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <loop+0xc0>)
 80020ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <loop+0xc4>)
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4613      	mov	r3, r2
 80020f4:	460a      	mov	r2, r1
 80020f6:	4918      	ldr	r1, [pc, #96]	; (8002158 <loop+0xc8>)
 80020f8:	4814      	ldr	r0, [pc, #80]	; (800214c <loop+0xbc>)
 80020fa:	f00c f973 	bl	800e3e4 <siprintf>
		print(printBuffer);
 80020fe:	4813      	ldr	r0, [pc, #76]	; (800214c <loop+0xbc>)
 8002100:	f7ff ff86 	bl	8002010 <print>
		radio.newPacket = false;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <loop+0xc0>)
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	{
		printf("Send: %s\r\n", sendBuffer);
		message += 1;
		radio.txDone = false;
	}
}
 800210c:	e011      	b.n	8002132 <loop+0xa2>
	else if (radio.txDone)
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <loop+0xc0>)
 8002110:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00c      	beq.n	8002132 <loop+0xa2>
		printf("Send: %s\r\n", sendBuffer);
 8002118:	4910      	ldr	r1, [pc, #64]	; (800215c <loop+0xcc>)
 800211a:	4811      	ldr	r0, [pc, #68]	; (8002160 <loop+0xd0>)
 800211c:	f00c f934 	bl	800e388 <iprintf>
		message += 1;
 8002120:	4b10      	ldr	r3, [pc, #64]	; (8002164 <loop+0xd4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3301      	adds	r3, #1
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <loop+0xd4>)
 8002128:	6013      	str	r3, [r2, #0]
		radio.txDone = false;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <loop+0xc0>)
 800212c:	2200      	movs	r2, #0
 800212e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8002132:	bf00      	nop
 8002134:	3704      	adds	r7, #4
 8002136:	46bd      	mov	sp, r7
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800213a:	bf00      	nop
 800213c:	200007ac 	.word	0x200007ac
 8002140:	200007a4 	.word	0x200007a4
 8002144:	200009ec 	.word	0x200009ec
 8002148:	08011968 	.word	0x08011968
 800214c:	2000037c 	.word	0x2000037c
 8002150:	200007b0 	.word	0x200007b0
 8002154:	200007e5 	.word	0x200007e5
 8002158:	08011994 	.word	0x08011994
 800215c:	200008e8 	.word	0x200008e8
 8002160:	080119b0 	.word	0x080119b0
 8002164:	200007a8 	.word	0x200007a8

08002168 <radio_procedure>:

void radio_procedure()
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	if (nextTX)
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <radio_procedure+0x60>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01e      	beq.n	80021b2 <radio_procedure+0x4a>
	{
		memset(sendBuffer, 0x00, SX1278_MAX_PACKET);
 8002174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002178:	2100      	movs	r1, #0
 800217a:	4814      	ldr	r0, [pc, #80]	; (80021cc <radio_procedure+0x64>)
 800217c:	f00b fa15 	bl	800d5aa <memset>
		message_length = sprintf(sendBuffer, "Hello %d", message);
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <radio_procedure+0x68>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	4913      	ldr	r1, [pc, #76]	; (80021d4 <radio_procedure+0x6c>)
 8002188:	4810      	ldr	r0, [pc, #64]	; (80021cc <radio_procedure+0x64>)
 800218a:	f00c f92b 	bl	800e3e4 <siprintf>
 800218e:	4603      	mov	r3, r0
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <radio_procedure+0x70>)
 8002194:	701a      	strb	r2, [r3, #0]
		SX1278_transmit(&radio, sendBuffer, message_length);
 8002196:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <radio_procedure+0x70>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	490b      	ldr	r1, [pc, #44]	; (80021cc <radio_procedure+0x64>)
 800219e:	480f      	ldr	r0, [pc, #60]	; (80021dc <radio_procedure+0x74>)
 80021a0:	f7ff f95d 	bl	800145e <SX1278_transmit>
		print("Sending...\n");
 80021a4:	480e      	ldr	r0, [pc, #56]	; (80021e0 <radio_procedure+0x78>)
 80021a6:	f7ff ff33 	bl	8002010 <print>
		nextTX = false;
 80021aa:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <radio_procedure+0x60>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
	{
		SX1278_receive(&radio);
		print("Receiving...\n");
		nextTX = true;
	}
}
 80021b0:	e008      	b.n	80021c4 <radio_procedure+0x5c>
		SX1278_receive(&radio);
 80021b2:	480a      	ldr	r0, [pc, #40]	; (80021dc <radio_procedure+0x74>)
 80021b4:	f7ff f98b 	bl	80014ce <SX1278_receive>
		print("Receiving...\n");
 80021b8:	480a      	ldr	r0, [pc, #40]	; (80021e4 <radio_procedure+0x7c>)
 80021ba:	f7ff ff29 	bl	8002010 <print>
		nextTX = true;
 80021be:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <radio_procedure+0x60>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	701a      	strb	r2, [r3, #0]
}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	200009e8 	.word	0x200009e8
 80021cc:	200008e8 	.word	0x200008e8
 80021d0:	200007a8 	.word	0x200007a8
 80021d4:	080119bc 	.word	0x080119bc
 80021d8:	200007a0 	.word	0x200007a0
 80021dc:	200007b0 	.word	0x200007b0
 80021e0:	080119c8 	.word	0x080119c8
 80021e4:	080119d4 	.word	0x080119d4

080021e8 <bmp280_begin>:

bool bmp280_begin()
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	bmp280.params = bmp280_default_config;
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <bmp280_begin+0x60>)
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <bmp280_begin+0x64>)
 80021f0:	3307      	adds	r3, #7
 80021f2:	6810      	ldr	r0, [r2, #0]
 80021f4:	6018      	str	r0, [r3, #0]
 80021f6:	7912      	ldrb	r2, [r2, #4]
 80021f8:	711a      	strb	r2, [r3, #4]
	bmp280.addr = BMP280_I2C_ADDRESS_0;
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <bmp280_begin+0x60>)
 80021fc:	2276      	movs	r2, #118	; 0x76
 80021fe:	809a      	strh	r2, [r3, #4]
	bmp280.i2c = Get_I2C1_Instance();
 8002200:	f000 fad8 	bl	80027b4 <Get_I2C1_Instance>
 8002204:	4602      	mov	r2, r0
 8002206:	4b10      	ldr	r3, [pc, #64]	; (8002248 <bmp280_begin+0x60>)
 8002208:	601a      	str	r2, [r3, #0]

	while (!bmp280_init(&bmp280, &bmp280.params)) {
 800220a:	bf00      	nop
 800220c:	4910      	ldr	r1, [pc, #64]	; (8002250 <bmp280_begin+0x68>)
 800220e:	480e      	ldr	r0, [pc, #56]	; (8002248 <bmp280_begin+0x60>)
 8002210:	f7ff fc23 	bl	8001a5a <bmp280_init>
 8002214:	4603      	mov	r3, r0
 8002216:	f083 0301 	eor.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00d      	beq.n	800223c <bmp280_begin+0x54>
		print("BMP280 initialization failed\n");
 8002220:	480c      	ldr	r0, [pc, #48]	; (8002254 <bmp280_begin+0x6c>)
 8002222:	f7ff fef5 	bl	8002010 <print>

		HAL_GPIO_TogglePin(LEDC_GPIO_Port, LEDC_Pin);
 8002226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800222a:	480b      	ldr	r0, [pc, #44]	; (8002258 <bmp280_begin+0x70>)
 800222c:	f001 fd31 	bl	8003c92 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8002230:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002234:	f000 fe92 	bl	8002f5c <HAL_Delay>
		return false;
 8002238:	2300      	movs	r3, #0
 800223a:	e003      	b.n	8002244 <bmp280_begin+0x5c>
	}

	print("BMP280 found!\n");
 800223c:	4807      	ldr	r0, [pc, #28]	; (800225c <bmp280_begin+0x74>)
 800223e:	f7ff fee7 	bl	8002010 <print>
	return true;
 8002242:	2301      	movs	r3, #1
}
 8002244:	4618      	mov	r0, r3
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200009ec 	.word	0x200009ec
 800224c:	20000000 	.word	0x20000000
 8002250:	200009f3 	.word	0x200009f3
 8002254:	080119e4 	.word	0x080119e4
 8002258:	40020400 	.word	0x40020400
 800225c:	08011a04 	.word	0x08011a04

08002260 <dio0_IRQ>:


void dio0_IRQ()
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
	if (radio.pendingIRQ)
 8002264:	4b05      	ldr	r3, [pc, #20]	; (800227c <dio0_IRQ+0x1c>)
 8002266:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <dio0_IRQ+0x18>
	{
		SX1278_dio0_IRQ(&radio);
 800226e:	4803      	ldr	r0, [pc, #12]	; (800227c <dio0_IRQ+0x1c>)
 8002270:	f7ff fa70 	bl	8001754 <SX1278_dio0_IRQ>
		radio_procedure();
 8002274:	f7ff ff78 	bl	8002168 <radio_procedure>
	}
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200007b0 	.word	0x200007b0

08002280 <radio_begin>:

bool radio_begin()
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
	radio.reset = LR_RESET_Pin;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <radio_begin+0x7c>)
 8002286:	2220      	movs	r2, #32
 8002288:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <radio_begin+0x7c>)
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <radio_begin+0x7c>)
 8002292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002296:	825a      	strh	r2, [r3, #18]
	radio.reset_port = LR_RESET_GPIO_Port;
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <radio_begin+0x7c>)
 800229a:	4a19      	ldr	r2, [pc, #100]	; (8002300 <radio_begin+0x80>)
 800229c:	615a      	str	r2, [r3, #20]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 800229e:	4b17      	ldr	r3, [pc, #92]	; (80022fc <radio_begin+0x7c>)
 80022a0:	4a18      	ldr	r2, [pc, #96]	; (8002304 <radio_begin+0x84>)
 80022a2:	619a      	str	r2, [r3, #24]
	radio.nss_port = LR_NSS_GPIO_Port;
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <radio_begin+0x7c>)
 80022a6:	4a18      	ldr	r2, [pc, #96]	; (8002308 <radio_begin+0x88>)
 80022a8:	61da      	str	r2, [r3, #28]
	radio.spi = Get_SPI1_Instance();
 80022aa:	f000 fa8d 	bl	80027c8 <Get_SPI1_Instance>
 80022ae:	4602      	mov	r2, r0
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <radio_begin+0x7c>)
 80022b2:	621a      	str	r2, [r3, #32]

	radio.config = sx1278_default_config;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <radio_begin+0x7c>)
 80022b6:	4a15      	ldr	r2, [pc, #84]	; (800230c <radio_begin+0x8c>)
 80022b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80022ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	radio.useDio0IRQ = true;
 80022be:	4b0f      	ldr	r3, [pc, #60]	; (80022fc <radio_begin+0x7c>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

	while (!SX1278_init(&radio))
 80022c6:	bf00      	nop
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <radio_begin+0x7c>)
 80022ca:	f7fe ffb6 	bl	800123a <SX1278_init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f083 0301 	eor.w	r3, r3, #1
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00d      	beq.n	80022f6 <radio_begin+0x76>
	{
		print("SX1278 initialization failed\n");
 80022da:	480d      	ldr	r0, [pc, #52]	; (8002310 <radio_begin+0x90>)
 80022dc:	f7ff fe98 	bl	8002010 <print>

		HAL_GPIO_TogglePin(LEDC_GPIO_Port, LEDC_Pin);
 80022e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022e4:	4808      	ldr	r0, [pc, #32]	; (8002308 <radio_begin+0x88>)
 80022e6:	f001 fcd4 	bl	8003c92 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80022ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80022ee:	f000 fe35 	bl	8002f5c <HAL_Delay>

		return false;
 80022f2:	2300      	movs	r3, #0
 80022f4:	e000      	b.n	80022f8 <radio_begin+0x78>
	}

	return true;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	200007b0 	.word	0x200007b0
 8002300:	40020800 	.word	0x40020800
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	20000008 	.word	0x20000008
 8002310:	08011a14 	.word	0x08011a14

08002314 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002318:	f000 fdae 	bl	8002e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800231c:	f000 f816 	bl	800234c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002320:	f000 f954 	bl	80025cc <MX_GPIO_Init>
  MX_DMA_Init();
 8002324:	f000 f92a 	bl	800257c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8002328:	f000 f8a8 	bl	800247c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800232c:	f008 fd74 	bl	800ae18 <MX_FATFS_Init>
  MX_I2C1_Init();
 8002330:	f000 f876 	bl	8002420 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8002334:	f00a fbbc 	bl	800cab0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8002338:	f000 f8c0 	bl	80024bc <MX_SPI1_Init>
  MX_USART3_UART_Init();
 800233c:	f000 f8f4 	bl	8002528 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8002340:	f7ff fe78 	bl	8002034 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8002344:	f7ff fea4 	bl	8002090 <loop>
 8002348:	e7fc      	b.n	8002344 <main+0x30>
	...

0800234c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b094      	sub	sp, #80	; 0x50
 8002350:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002352:	f107 0320 	add.w	r3, r7, #32
 8002356:	2230      	movs	r2, #48	; 0x30
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f00b f925 	bl	800d5aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002360:	f107 030c 	add.w	r3, r7, #12
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002370:	2300      	movs	r3, #0
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	4b28      	ldr	r3, [pc, #160]	; (8002418 <SystemClock_Config+0xcc>)
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	4a27      	ldr	r2, [pc, #156]	; (8002418 <SystemClock_Config+0xcc>)
 800237a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237e:	6413      	str	r3, [r2, #64]	; 0x40
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <SystemClock_Config+0xcc>)
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800238c:	2300      	movs	r3, #0
 800238e:	607b      	str	r3, [r7, #4]
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <SystemClock_Config+0xd0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a21      	ldr	r2, [pc, #132]	; (800241c <SystemClock_Config+0xd0>)
 8002396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239a:	6013      	str	r3, [r2, #0]
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <SystemClock_Config+0xd0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a4:	607b      	str	r3, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023a8:	2301      	movs	r3, #1
 80023aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023b2:	2302      	movs	r3, #2
 80023b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80023bc:	2306      	movs	r3, #6
 80023be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80023c0:	23a8      	movs	r3, #168	; 0xa8
 80023c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023c4:	2302      	movs	r3, #2
 80023c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023c8:	2307      	movs	r3, #7
 80023ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023cc:	f107 0320 	add.w	r3, r7, #32
 80023d0:	4618      	mov	r0, r3
 80023d2:	f003 fdcb 	bl	8005f6c <HAL_RCC_OscConfig>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023dc:	f000 fa0c 	bl	80027f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e0:	230f      	movs	r3, #15
 80023e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023e4:	2302      	movs	r3, #2
 80023e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	2105      	movs	r1, #5
 80023fe:	4618      	mov	r0, r3
 8002400:	f004 f824 	bl	800644c <HAL_RCC_ClockConfig>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800240a:	f000 f9f5 	bl	80027f8 <Error_Handler>
  }
}
 800240e:	bf00      	nop
 8002410:	3750      	adds	r7, #80	; 0x50
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	40007000 	.word	0x40007000

08002420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <MX_I2C1_Init+0x50>)
 8002426:	4a13      	ldr	r2, [pc, #76]	; (8002474 <MX_I2C1_Init+0x54>)
 8002428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_I2C1_Init+0x50>)
 800242c:	4a12      	ldr	r2, [pc, #72]	; (8002478 <MX_I2C1_Init+0x58>)
 800242e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MX_I2C1_Init+0x50>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_I2C1_Init+0x50>)
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_I2C1_Init+0x50>)
 800243e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <MX_I2C1_Init+0x50>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_I2C1_Init+0x50>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002450:	4b07      	ldr	r3, [pc, #28]	; (8002470 <MX_I2C1_Init+0x50>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002456:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_I2C1_Init+0x50>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800245c:	4804      	ldr	r0, [pc, #16]	; (8002470 <MX_I2C1_Init+0x50>)
 800245e:	f001 fc4b 	bl	8003cf8 <HAL_I2C_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002468:	f000 f9c6 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800246c:	bf00      	nop
 800246e:	bd80      	pop	{r7, pc}
 8002470:	20000ab0 	.word	0x20000ab0
 8002474:	40005400 	.word	0x40005400
 8002478:	000186a0 	.word	0x000186a0

0800247c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_SDIO_SD_Init+0x38>)
 8002482:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <MX_SDIO_SD_Init+0x3c>)
 8002484:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_SDIO_SD_Init+0x38>)
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_SDIO_SD_Init+0x38>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <MX_SDIO_SD_Init+0x38>)
 8002494:	2200      	movs	r2, #0
 8002496:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_SDIO_SD_Init+0x38>)
 800249a:	2200      	movs	r2, #0
 800249c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <MX_SDIO_SD_Init+0x38>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <MX_SDIO_SD_Init+0x38>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80024aa:	bf00      	nop
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	20000b64 	.word	0x20000b64
 80024b8:	40012c00 	.word	0x40012c00

080024bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80024c0:	4b17      	ldr	r3, [pc, #92]	; (8002520 <MX_SPI1_Init+0x64>)
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <MX_SPI1_Init+0x68>)
 80024c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80024c6:	4b16      	ldr	r3, [pc, #88]	; (8002520 <MX_SPI1_Init+0x64>)
 80024c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80024ce:	4b14      	ldr	r3, [pc, #80]	; (8002520 <MX_SPI1_Init+0x64>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <MX_SPI1_Init+0x64>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024da:	4b11      	ldr	r3, [pc, #68]	; (8002520 <MX_SPI1_Init+0x64>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <MX_SPI1_Init+0x64>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80024e6:	4b0e      	ldr	r3, [pc, #56]	; (8002520 <MX_SPI1_Init+0x64>)
 80024e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80024ee:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <MX_SPI1_Init+0x64>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024f4:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <MX_SPI1_Init+0x64>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <MX_SPI1_Init+0x64>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002500:	4b07      	ldr	r3, [pc, #28]	; (8002520 <MX_SPI1_Init+0x64>)
 8002502:	2200      	movs	r2, #0
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002506:	4b06      	ldr	r3, [pc, #24]	; (8002520 <MX_SPI1_Init+0x64>)
 8002508:	220a      	movs	r2, #10
 800250a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800250c:	4804      	ldr	r0, [pc, #16]	; (8002520 <MX_SPI1_Init+0x64>)
 800250e:	f005 fc85 	bl	8007e1c <HAL_SPI_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002518:	f000 f96e 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000be8 	.word	0x20000be8
 8002524:	40013000 	.word	0x40013000

08002528 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800252c:	4b11      	ldr	r3, [pc, #68]	; (8002574 <MX_USART3_UART_Init+0x4c>)
 800252e:	4a12      	ldr	r2, [pc, #72]	; (8002578 <MX_USART3_UART_Init+0x50>)
 8002530:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <MX_USART3_UART_Init+0x4c>)
 8002534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002538:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800253a:	4b0e      	ldr	r3, [pc, #56]	; (8002574 <MX_USART3_UART_Init+0x4c>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <MX_USART3_UART_Init+0x4c>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <MX_USART3_UART_Init+0x4c>)
 8002548:	2200      	movs	r2, #0
 800254a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <MX_USART3_UART_Init+0x4c>)
 800254e:	220c      	movs	r2, #12
 8002550:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <MX_USART3_UART_Init+0x4c>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002558:	4b06      	ldr	r3, [pc, #24]	; (8002574 <MX_USART3_UART_Init+0x4c>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800255e:	4805      	ldr	r0, [pc, #20]	; (8002574 <MX_USART3_UART_Init+0x4c>)
 8002560:	f006 f850 	bl	8008604 <HAL_UART_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800256a:	f000 f945 	bl	80027f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000a70 	.word	0x20000a70
 8002578:	40004800 	.word	0x40004800

0800257c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	607b      	str	r3, [r7, #4]
 8002586:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <MX_DMA_Init+0x4c>)
 8002588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258a:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <MX_DMA_Init+0x4c>)
 800258c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002590:	6313      	str	r3, [r2, #48]	; 0x30
 8002592:	4b0d      	ldr	r3, [pc, #52]	; (80025c8 <MX_DMA_Init+0x4c>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	203b      	movs	r0, #59	; 0x3b
 80025a4:	f000 fdd7 	bl	8003156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80025a8:	203b      	movs	r0, #59	; 0x3b
 80025aa:	f000 fdf0 	bl	800318e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	2045      	movs	r0, #69	; 0x45
 80025b4:	f000 fdcf 	bl	8003156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80025b8:	2045      	movs	r0, #69	; 0x45
 80025ba:	f000 fde8 	bl	800318e <HAL_NVIC_EnableIRQ>

}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800

080025cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	; 0x28
 80025d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	613b      	str	r3, [r7, #16]
 80025e6:	4b6e      	ldr	r3, [pc, #440]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a6d      	ldr	r2, [pc, #436]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b6b      	ldr	r3, [pc, #428]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	613b      	str	r3, [r7, #16]
 80025fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	4b67      	ldr	r3, [pc, #412]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a66      	ldr	r2, [pc, #408]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 8002608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b64      	ldr	r3, [pc, #400]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	60fb      	str	r3, [r7, #12]
 8002618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	4b60      	ldr	r3, [pc, #384]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a5f      	ldr	r2, [pc, #380]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b5d      	ldr	r3, [pc, #372]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]
 800263a:	4b59      	ldr	r3, [pc, #356]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	4a58      	ldr	r2, [pc, #352]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 8002640:	f043 0302 	orr.w	r3, r3, #2
 8002644:	6313      	str	r3, [r2, #48]	; 0x30
 8002646:	4b56      	ldr	r3, [pc, #344]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	607b      	str	r3, [r7, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	603b      	str	r3, [r7, #0]
 8002656:	4b52      	ldr	r3, [pc, #328]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <MX_GPIO_Init+0x1d4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800266e:	2200      	movs	r2, #0
 8002670:	21ef      	movs	r1, #239	; 0xef
 8002672:	484c      	ldr	r0, [pc, #304]	; (80027a4 <MX_GPIO_Init+0x1d8>)
 8002674:	f001 faf4 	bl	8003c60 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|EN_L_Pin|PH_R_Pin|EN_R_Pin 
 8002678:	2200      	movs	r2, #0
 800267a:	211f      	movs	r1, #31
 800267c:	484a      	ldr	r0, [pc, #296]	; (80027a8 <MX_GPIO_Init+0x1dc>)
 800267e:	f001 faef 	bl	8003c60 <HAL_GPIO_WritePin>
                          |P7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P6_Pin|P3_Pin|LEDD_Pin|LEDC_Pin 
 8002682:	2200      	movs	r2, #0
 8002684:	f243 2103 	movw	r1, #12803	; 0x3203
 8002688:	4848      	ldr	r0, [pc, #288]	; (80027ac <MX_GPIO_Init+0x1e0>)
 800268a:	f001 fae9 	bl	8003c60 <HAL_GPIO_WritePin>
                          |LR_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 800268e:	232f      	movs	r3, #47	; 0x2f
 8002690:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002692:	2301      	movs	r3, #1
 8002694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	483f      	ldr	r0, [pc, #252]	; (80027a4 <MX_GPIO_Init+0x1d8>)
 80026a6:	f001 f929 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin EN_L_Pin PH_R_Pin EN_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|EN_L_Pin|PH_R_Pin|EN_R_Pin;
 80026aa:	230f      	movs	r3, #15
 80026ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ae:	2301      	movs	r3, #1
 80026b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ba:	f107 0314 	add.w	r3, r7, #20
 80026be:	4619      	mov	r1, r3
 80026c0:	4839      	ldr	r0, [pc, #228]	; (80027a8 <MX_GPIO_Init+0x1dc>)
 80026c2:	f001 f91b 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 80026c6:	2310      	movs	r3, #16
 80026c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 80026d6:	f107 0314 	add.w	r3, r7, #20
 80026da:	4619      	mov	r1, r3
 80026dc:	4832      	ldr	r0, [pc, #200]	; (80027a8 <MX_GPIO_Init+0x1dc>)
 80026de:	f001 f90d 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 80026e2:	2340      	movs	r3, #64	; 0x40
 80026e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80026e6:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <MX_GPIO_Init+0x1e4>)
 80026e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026ea:	2302      	movs	r3, #2
 80026ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	482c      	ldr	r0, [pc, #176]	; (80027a8 <MX_GPIO_Init+0x1dc>)
 80026f6:	f001 f901 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pins : P6_Pin P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P6_Pin|P3_Pin|LR_NSS_Pin;
 80026fa:	f240 2303 	movw	r3, #515	; 0x203
 80026fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002700:	2301      	movs	r3, #1
 8002702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002708:	2300      	movs	r3, #0
 800270a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	4619      	mov	r1, r3
 8002712:	4826      	ldr	r0, [pc, #152]	; (80027ac <MX_GPIO_Init+0x1e0>)
 8002714:	f001 f8f2 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8002718:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800271c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271e:	2301      	movs	r3, #1
 8002720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002722:	2302      	movs	r3, #2
 8002724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4619      	mov	r1, r3
 8002730:	481e      	ldr	r0, [pc, #120]	; (80027ac <MX_GPIO_Init+0x1e0>)
 8002732:	f001 f8e3 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 8002736:	23c0      	movs	r3, #192	; 0xc0
 8002738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273a:	2301      	movs	r3, #1
 800273c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800273e:	2302      	movs	r3, #2
 8002740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002746:	f107 0314 	add.w	r3, r7, #20
 800274a:	4619      	mov	r1, r3
 800274c:	4815      	ldr	r0, [pc, #84]	; (80027a4 <MX_GPIO_Init+0x1d8>)
 800274e:	f001 f8d5 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 8002752:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	4619      	mov	r1, r3
 8002766:	4810      	ldr	r0, [pc, #64]	; (80027a8 <MX_GPIO_Init+0x1dc>)
 8002768:	f001 f8c8 	bl	80038fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 800276c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002776:	2301      	movs	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	4809      	ldr	r0, [pc, #36]	; (80027a8 <MX_GPIO_Init+0x1dc>)
 8002782:	f001 f8bb 	bl	80038fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002786:	2200      	movs	r2, #0
 8002788:	2100      	movs	r1, #0
 800278a:	2017      	movs	r0, #23
 800278c:	f000 fce3 	bl	8003156 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002790:	2017      	movs	r0, #23
 8002792:	f000 fcfc 	bl	800318e <HAL_NVIC_EnableIRQ>

}
 8002796:	bf00      	nop
 8002798:	3728      	adds	r7, #40	; 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40020000 	.word	0x40020000
 80027ac:	40020400 	.word	0x40020400
 80027b0:	10110000 	.word	0x10110000

080027b4 <Get_I2C1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance()
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
	return &hi2c1;
 80027b8:	4b02      	ldr	r3, [pc, #8]	; (80027c4 <Get_I2C1_Instance+0x10>)
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	20000ab0 	.word	0x20000ab0

080027c8 <Get_SPI1_Instance>:

SPI_HandleTypeDef* Get_SPI1_Instance()
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
	return &hspi1;
 80027cc:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <Get_SPI1_Instance+0x10>)
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	20000be8 	.word	0x20000be8

080027dc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LR_DIO0_Pin)
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d101      	bne.n	80027f0 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 80027ec:	f7ff fd38 	bl	8002260 <dio0_IRQ>
	}
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_MspInit+0x4c>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002816:	4a0f      	ldr	r2, [pc, #60]	; (8002854 <HAL_MspInit+0x4c>)
 8002818:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800281c:	6453      	str	r3, [r2, #68]	; 0x44
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <HAL_MspInit+0x4c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002826:	607b      	str	r3, [r7, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	2300      	movs	r3, #0
 800282c:	603b      	str	r3, [r7, #0]
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_MspInit+0x4c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	4a08      	ldr	r2, [pc, #32]	; (8002854 <HAL_MspInit+0x4c>)
 8002834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002838:	6413      	str	r3, [r2, #64]	; 0x40
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_MspInit+0x4c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40023800 	.word	0x40023800

08002858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 0314 	add.w	r3, r7, #20
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a19      	ldr	r2, [pc, #100]	; (80028dc <HAL_I2C_MspInit+0x84>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d12b      	bne.n	80028d2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_I2C_MspInit+0x88>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <HAL_I2C_MspInit+0x88>)
 8002884:	f043 0302 	orr.w	r3, r3, #2
 8002888:	6313      	str	r3, [r2, #48]	; 0x30
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_I2C_MspInit+0x88>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	613b      	str	r3, [r7, #16]
 8002894:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8002896:	23c0      	movs	r3, #192	; 0xc0
 8002898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800289a:	2312      	movs	r3, #18
 800289c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a2:	2303      	movs	r3, #3
 80028a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028a6:	2304      	movs	r3, #4
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	4619      	mov	r1, r3
 80028b0:	480c      	ldr	r0, [pc, #48]	; (80028e4 <HAL_I2C_MspInit+0x8c>)
 80028b2:	f001 f823 	bl	80038fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	4b09      	ldr	r3, [pc, #36]	; (80028e0 <HAL_I2C_MspInit+0x88>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	4a08      	ldr	r2, [pc, #32]	; (80028e0 <HAL_I2C_MspInit+0x88>)
 80028c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028c4:	6413      	str	r3, [r2, #64]	; 0x40
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_I2C_MspInit+0x88>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	; 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40005400 	.word	0x40005400
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020400 	.word	0x40020400

080028e8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a70      	ldr	r2, [pc, #448]	; (8002ac8 <HAL_SD_MspInit+0x1e0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	f040 80da 	bne.w	8002ac0 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800290c:	2300      	movs	r3, #0
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	4b6e      	ldr	r3, [pc, #440]	; (8002acc <HAL_SD_MspInit+0x1e4>)
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	4a6d      	ldr	r2, [pc, #436]	; (8002acc <HAL_SD_MspInit+0x1e4>)
 8002916:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800291a:	6453      	str	r3, [r2, #68]	; 0x44
 800291c:	4b6b      	ldr	r3, [pc, #428]	; (8002acc <HAL_SD_MspInit+0x1e4>)
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	4b67      	ldr	r3, [pc, #412]	; (8002acc <HAL_SD_MspInit+0x1e4>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4a66      	ldr	r2, [pc, #408]	; (8002acc <HAL_SD_MspInit+0x1e4>)
 8002932:	f043 0304 	orr.w	r3, r3, #4
 8002936:	6313      	str	r3, [r2, #48]	; 0x30
 8002938:	4b64      	ldr	r3, [pc, #400]	; (8002acc <HAL_SD_MspInit+0x1e4>)
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	4b60      	ldr	r3, [pc, #384]	; (8002acc <HAL_SD_MspInit+0x1e4>)
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	4a5f      	ldr	r2, [pc, #380]	; (8002acc <HAL_SD_MspInit+0x1e4>)
 800294e:	f043 0308 	orr.w	r3, r3, #8
 8002952:	6313      	str	r3, [r2, #48]	; 0x30
 8002954:	4b5d      	ldr	r3, [pc, #372]	; (8002acc <HAL_SD_MspInit+0x1e4>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002960:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800296a:	2301      	movs	r3, #1
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800296e:	2303      	movs	r3, #3
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002972:	230c      	movs	r3, #12
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4619      	mov	r1, r3
 800297c:	4854      	ldr	r0, [pc, #336]	; (8002ad0 <HAL_SD_MspInit+0x1e8>)
 800297e:	f000 ffbd 	bl	80038fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002982:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002988:	2302      	movs	r3, #2
 800298a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002990:	2303      	movs	r3, #3
 8002992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002994:	230c      	movs	r3, #12
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	4619      	mov	r1, r3
 800299e:	484c      	ldr	r0, [pc, #304]	; (8002ad0 <HAL_SD_MspInit+0x1e8>)
 80029a0:	f000 ffac 	bl	80038fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029a4:	2304      	movs	r3, #4
 80029a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ac:	2301      	movs	r3, #1
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80029b4:	230c      	movs	r3, #12
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	4845      	ldr	r0, [pc, #276]	; (8002ad4 <HAL_SD_MspInit+0x1ec>)
 80029c0:	f000 ff9c 	bl	80038fc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80029c4:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 80029c6:	4a45      	ldr	r2, [pc, #276]	; (8002adc <HAL_SD_MspInit+0x1f4>)
 80029c8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 80029cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80029d0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d2:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029d8:	4b3f      	ldr	r3, [pc, #252]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 80029da:	2200      	movs	r2, #0
 80029dc:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029de:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 80029e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029e6:	4b3c      	ldr	r3, [pc, #240]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 80029e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029ec:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029ee:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 80029f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029f4:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80029f6:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 80029f8:	2220      	movs	r2, #32
 80029fa:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029fc:	4b36      	ldr	r3, [pc, #216]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a02:	4b35      	ldr	r3, [pc, #212]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 8002a04:	2204      	movs	r2, #4
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a08:	4b33      	ldr	r3, [pc, #204]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002a0e:	4b32      	ldr	r3, [pc, #200]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 8002a10:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a14:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a16:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 8002a18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002a1e:	482e      	ldr	r0, [pc, #184]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 8002a20:	f000 fbd0 	bl	80031c4 <HAL_DMA_Init>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002a2a:	f7ff fee5 	bl	80027f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a29      	ldr	r2, [pc, #164]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 8002a32:	641a      	str	r2, [r3, #64]	; 0x40
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_SD_MspInit+0x1f0>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002a3a:	4b29      	ldr	r3, [pc, #164]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a3c:	4a29      	ldr	r2, [pc, #164]	; (8002ae4 <HAL_SD_MspInit+0x1fc>)
 8002a3e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002a40:	4b27      	ldr	r3, [pc, #156]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a46:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a48:	4b25      	ldr	r3, [pc, #148]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a4a:	2240      	movs	r2, #64	; 0x40
 8002a4c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4e:	4b24      	ldr	r3, [pc, #144]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a54:	4b22      	ldr	r3, [pc, #136]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a5a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a5c:	4b20      	ldr	r3, [pc, #128]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a62:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a64:	4b1e      	ldr	r3, [pc, #120]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a6a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a6e:	2220      	movs	r2, #32
 8002a70:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a78:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a7a:	2204      	movs	r2, #4
 8002a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a80:	2203      	movs	r2, #3
 8002a82:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002a84:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a86:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a8a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a8c:	4b14      	ldr	r3, [pc, #80]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002a94:	4812      	ldr	r0, [pc, #72]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002a96:	f000 fb95 	bl	80031c4 <HAL_DMA_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002aa0:	f7ff feaa 	bl	80027f8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002aa8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002aaa:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <HAL_SD_MspInit+0x1f8>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	2031      	movs	r0, #49	; 0x31
 8002ab6:	f000 fb4e 	bl	8003156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002aba:	2031      	movs	r0, #49	; 0x31
 8002abc:	f000 fb67 	bl	800318e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002ac0:	bf00      	nop
 8002ac2:	3728      	adds	r7, #40	; 0x28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40023800 	.word	0x40023800
 8002ad0:	40020800 	.word	0x40020800
 8002ad4:	40020c00 	.word	0x40020c00
 8002ad8:	20000a10 	.word	0x20000a10
 8002adc:	40026458 	.word	0x40026458
 8002ae0:	20000b04 	.word	0x20000b04
 8002ae4:	400264a0 	.word	0x400264a0

08002ae8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b08a      	sub	sp, #40	; 0x28
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af0:	f107 0314 	add.w	r3, r7, #20
 8002af4:	2200      	movs	r2, #0
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	609a      	str	r2, [r3, #8]
 8002afc:	60da      	str	r2, [r3, #12]
 8002afe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a19      	ldr	r2, [pc, #100]	; (8002b6c <HAL_SPI_MspInit+0x84>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d12b      	bne.n	8002b62 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_SPI_MspInit+0x88>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_SPI_MspInit+0x88>)
 8002b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b18:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_SPI_MspInit+0x88>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b22:	613b      	str	r3, [r7, #16]
 8002b24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_SPI_MspInit+0x88>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_SPI_MspInit+0x88>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_SPI_MspInit+0x88>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8002b42:	2338      	movs	r3, #56	; 0x38
 8002b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b52:	2305      	movs	r3, #5
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 0314 	add.w	r3, r7, #20
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4805      	ldr	r0, [pc, #20]	; (8002b74 <HAL_SPI_MspInit+0x8c>)
 8002b5e:	f000 fecd 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b62:	bf00      	nop
 8002b64:	3728      	adds	r7, #40	; 0x28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40013000 	.word	0x40013000
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40020400 	.word	0x40020400

08002b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	; 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a19      	ldr	r2, [pc, #100]	; (8002bfc <HAL_UART_MspInit+0x84>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d12c      	bne.n	8002bf4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	4b18      	ldr	r3, [pc, #96]	; (8002c00 <HAL_UART_MspInit+0x88>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <HAL_UART_MspInit+0x88>)
 8002ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <HAL_UART_MspInit+0x88>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <HAL_UART_MspInit+0x88>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a10      	ldr	r2, [pc, #64]	; (8002c00 <HAL_UART_MspInit+0x88>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <HAL_UART_MspInit+0x88>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 8002bd2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be0:	2303      	movs	r3, #3
 8002be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002be4:	2307      	movs	r3, #7
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	4619      	mov	r1, r3
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <HAL_UART_MspInit+0x8c>)
 8002bf0:	f000 fe84 	bl	80038fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002bf4:	bf00      	nop
 8002bf6:	3728      	adds	r7, #40	; 0x28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40004800 	.word	0x40004800
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020400 	.word	0x40020400

08002c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002c0c:	bf00      	nop
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c1a:	e7fe      	b.n	8002c1a <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	e7fe      	b.n	8002c20 <MemManage_Handler+0x4>

08002c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c22:	b480      	push	{r7}
 8002c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c26:	e7fe      	b.n	8002c26 <BusFault_Handler+0x4>

08002c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <UsageFault_Handler+0x4>

08002c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c32:	bf00      	nop
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c5c:	f000 f95e 	bl	8002f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002c68:	2040      	movs	r0, #64	; 0x40
 8002c6a:	f001 f82d 	bl	8003cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002c78:	4802      	ldr	r0, [pc, #8]	; (8002c84 <SDIO_IRQHandler+0x10>)
 8002c7a:	f004 f81d 	bl	8006cb8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000b64 	.word	0x20000b64

08002c88 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002c8c:	4802      	ldr	r0, [pc, #8]	; (8002c98 <DMA2_Stream3_IRQHandler+0x10>)
 8002c8e:	f000 fbc1 	bl	8003414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000a10 	.word	0x20000a10

08002c9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <OTG_FS_IRQHandler+0x10>)
 8002ca2:	f002 f928 	bl	8004ef6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20002548 	.word	0x20002548

08002cb0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <DMA2_Stream6_IRQHandler+0x10>)
 8002cb6:	f000 fbad 	bl	8003414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000b04 	.word	0x20000b04

08002cc4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b086      	sub	sp, #24
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	617b      	str	r3, [r7, #20]
 8002cd4:	e00a      	b.n	8002cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cd6:	f3af 8000 	nop.w
 8002cda:	4601      	mov	r1, r0
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	60ba      	str	r2, [r7, #8]
 8002ce2:	b2ca      	uxtb	r2, r1
 8002ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	dbf0      	blt.n	8002cd6 <_read+0x12>
	}

return len;
 8002cf4:	687b      	ldr	r3, [r7, #4]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e009      	b.n	8002d24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	60ba      	str	r2, [r7, #8]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	3301      	adds	r3, #1
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	dbf1      	blt.n	8002d10 <_write+0x12>
	}
	return len;
 8002d2c:	687b      	ldr	r3, [r7, #4]
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <_close>:

int _close(int file)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
	return -1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <_isatty>:

int _isatty(int file)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
	return 1;
 8002d76:	2301      	movs	r3, #1
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
	return 0;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
	...

08002da0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002da8:	4b11      	ldr	r3, [pc, #68]	; (8002df0 <_sbrk+0x50>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x16>
		heap_end = &end;
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <_sbrk+0x50>)
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <_sbrk+0x54>)
 8002db4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002db6:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <_sbrk+0x50>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <_sbrk+0x50>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	466a      	mov	r2, sp
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d907      	bls.n	8002dda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002dca:	f00a fba9 	bl	800d520 <__errno>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	230c      	movs	r3, #12
 8002dd2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd8:	e006      	b.n	8002de8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002dda:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <_sbrk+0x50>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <_sbrk+0x50>)
 8002de4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	2000057c 	.word	0x2000057c
 8002df4:	20002958 	.word	0x20002958

08002df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dfc:	4b08      	ldr	r3, [pc, #32]	; (8002e20 <SystemInit+0x28>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	4a07      	ldr	r2, [pc, #28]	; (8002e20 <SystemInit+0x28>)
 8002e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <SystemInit+0x28>)
 8002e0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e12:	609a      	str	r2, [r3, #8]
#endif
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e2a:	e003      	b.n	8002e34 <LoopCopyDataInit>

08002e2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e32:	3104      	adds	r1, #4

08002e34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e34:	480b      	ldr	r0, [pc, #44]	; (8002e64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e3c:	d3f6      	bcc.n	8002e2c <CopyDataInit>
  ldr  r2, =_sbss
 8002e3e:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e40:	e002      	b.n	8002e48 <LoopFillZerobss>

08002e42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e44:	f842 3b04 	str.w	r3, [r2], #4

08002e48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e4c:	d3f9      	bcc.n	8002e42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e4e:	f7ff ffd3 	bl	8002df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e52:	f00a fb6b 	bl	800d52c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e56:	f7ff fa5d 	bl	8002314 <main>
  bx  lr    
 8002e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e5c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e60:	08011de0 	.word	0x08011de0
  ldr  r0, =_sdata
 8002e64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e68:	20000360 	.word	0x20000360
  ldr  r2, =_sbss
 8002e6c:	20000360 	.word	0x20000360
  ldr  r3, = _ebss
 8002e70:	20002954 	.word	0x20002954

08002e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e74:	e7fe      	b.n	8002e74 <ADC_IRQHandler>
	...

08002e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e7c:	4b0e      	ldr	r3, [pc, #56]	; (8002eb8 <HAL_Init+0x40>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a0d      	ldr	r2, [pc, #52]	; (8002eb8 <HAL_Init+0x40>)
 8002e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_Init+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a0a      	ldr	r2, [pc, #40]	; (8002eb8 <HAL_Init+0x40>)
 8002e8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <HAL_Init+0x40>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <HAL_Init+0x40>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ea0:	2003      	movs	r0, #3
 8002ea2:	f000 f94d 	bl	8003140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f000 f808 	bl	8002ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002eac:	f7ff fcac 	bl	8002808 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023c00 	.word	0x40023c00

08002ebc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_InitTick+0x54>)
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <HAL_InitTick+0x58>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f965 	bl	80031aa <HAL_SYSTICK_Config>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e00e      	b.n	8002f08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b0f      	cmp	r3, #15
 8002eee:	d80a      	bhi.n	8002f06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	f000 f92d 	bl	8003156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002efc:	4a06      	ldr	r2, [pc, #24]	; (8002f18 <HAL_InitTick+0x5c>)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3708      	adds	r7, #8
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000014 	.word	0x20000014
 8002f14:	2000001c 	.word	0x2000001c
 8002f18:	20000018 	.word	0x20000018

08002f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_IncTick+0x20>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_IncTick+0x24>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_IncTick+0x24>)
 8002f2e:	6013      	str	r3, [r2, #0]
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	2000001c 	.word	0x2000001c
 8002f40:	20000c40 	.word	0x20000c40

08002f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  return uwTick;
 8002f48:	4b03      	ldr	r3, [pc, #12]	; (8002f58 <HAL_GetTick+0x14>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20000c40 	.word	0x20000c40

08002f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f64:	f7ff ffee 	bl	8002f44 <HAL_GetTick>
 8002f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f74:	d005      	beq.n	8002f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f76:	4b09      	ldr	r3, [pc, #36]	; (8002f9c <HAL_Delay+0x40>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f82:	bf00      	nop
 8002f84:	f7ff ffde 	bl	8002f44 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d8f7      	bhi.n	8002f84 <HAL_Delay+0x28>
  {
  }
}
 8002f94:	bf00      	nop
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	2000001c 	.word	0x2000001c

08002fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fd2:	4a04      	ldr	r2, [pc, #16]	; (8002fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	60d3      	str	r3, [r2, #12]
}
 8002fd8:	bf00      	nop
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <__NVIC_GetPriorityGrouping+0x18>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	0a1b      	lsrs	r3, r3, #8
 8002ff2:	f003 0307 	and.w	r3, r3, #7
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr
 8003000:	e000ed00 	.word	0xe000ed00

08003004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003012:	2b00      	cmp	r3, #0
 8003014:	db0b      	blt.n	800302e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003016:	79fb      	ldrb	r3, [r7, #7]
 8003018:	f003 021f 	and.w	r2, r3, #31
 800301c:	4907      	ldr	r1, [pc, #28]	; (800303c <__NVIC_EnableIRQ+0x38>)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	095b      	lsrs	r3, r3, #5
 8003024:	2001      	movs	r0, #1
 8003026:	fa00 f202 	lsl.w	r2, r0, r2
 800302a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	e000e100 	.word	0xe000e100

08003040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	4603      	mov	r3, r0
 8003048:	6039      	str	r1, [r7, #0]
 800304a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800304c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003050:	2b00      	cmp	r3, #0
 8003052:	db0a      	blt.n	800306a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	b2da      	uxtb	r2, r3
 8003058:	490c      	ldr	r1, [pc, #48]	; (800308c <__NVIC_SetPriority+0x4c>)
 800305a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305e:	0112      	lsls	r2, r2, #4
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	440b      	add	r3, r1
 8003064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003068:	e00a      	b.n	8003080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4908      	ldr	r1, [pc, #32]	; (8003090 <__NVIC_SetPriority+0x50>)
 8003070:	79fb      	ldrb	r3, [r7, #7]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	3b04      	subs	r3, #4
 8003078:	0112      	lsls	r2, r2, #4
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	440b      	add	r3, r1
 800307e:	761a      	strb	r2, [r3, #24]
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000e100 	.word	0xe000e100
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003094:	b480      	push	{r7}
 8003096:	b089      	sub	sp, #36	; 0x24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0307 	and.w	r3, r3, #7
 80030a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	f1c3 0307 	rsb	r3, r3, #7
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	bf28      	it	cs
 80030b2:	2304      	movcs	r3, #4
 80030b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	3304      	adds	r3, #4
 80030ba:	2b06      	cmp	r3, #6
 80030bc:	d902      	bls.n	80030c4 <NVIC_EncodePriority+0x30>
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	3b03      	subs	r3, #3
 80030c2:	e000      	b.n	80030c6 <NVIC_EncodePriority+0x32>
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c8:	f04f 32ff 	mov.w	r2, #4294967295
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43da      	mvns	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	401a      	ands	r2, r3
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030dc:	f04f 31ff 	mov.w	r1, #4294967295
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	fa01 f303 	lsl.w	r3, r1, r3
 80030e6:	43d9      	mvns	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ec:	4313      	orrs	r3, r2
         );
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3724      	adds	r7, #36	; 0x24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800310c:	d301      	bcc.n	8003112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310e:	2301      	movs	r3, #1
 8003110:	e00f      	b.n	8003132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003112:	4a0a      	ldr	r2, [pc, #40]	; (800313c <SysTick_Config+0x40>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3b01      	subs	r3, #1
 8003118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800311a:	210f      	movs	r1, #15
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	f7ff ff8e 	bl	8003040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003124:	4b05      	ldr	r3, [pc, #20]	; (800313c <SysTick_Config+0x40>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800312a:	4b04      	ldr	r3, [pc, #16]	; (800313c <SysTick_Config+0x40>)
 800312c:	2207      	movs	r2, #7
 800312e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	e000e010 	.word	0xe000e010

08003140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff ff29 	bl	8002fa0 <__NVIC_SetPriorityGrouping>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	4603      	mov	r3, r0
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
 8003162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003168:	f7ff ff3e 	bl	8002fe8 <__NVIC_GetPriorityGrouping>
 800316c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	6978      	ldr	r0, [r7, #20]
 8003174:	f7ff ff8e 	bl	8003094 <NVIC_EncodePriority>
 8003178:	4602      	mov	r2, r0
 800317a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800317e:	4611      	mov	r1, r2
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff ff5d 	bl	8003040 <__NVIC_SetPriority>
}
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b082      	sub	sp, #8
 8003192:	af00      	add	r7, sp, #0
 8003194:	4603      	mov	r3, r0
 8003196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff ff31 	bl	8003004 <__NVIC_EnableIRQ>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b082      	sub	sp, #8
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff ffa2 	bl	80030fc <SysTick_Config>
 80031b8:	4603      	mov	r3, r0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80031d0:	f7ff feb8 	bl	8002f44 <HAL_GetTick>
 80031d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e099      	b.n	8003314 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2202      	movs	r2, #2
 80031ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003200:	e00f      	b.n	8003222 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003202:	f7ff fe9f 	bl	8002f44 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b05      	cmp	r3, #5
 800320e:	d908      	bls.n	8003222 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2203      	movs	r2, #3
 800321a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e078      	b.n	8003314 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e8      	bne.n	8003202 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	4b38      	ldr	r3, [pc, #224]	; (800331c <HAL_DMA_Init+0x158>)
 800323c:	4013      	ands	r3, r2
 800323e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800324e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800325a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4313      	orrs	r3, r2
 8003272:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	2b04      	cmp	r3, #4
 800327a:	d107      	bne.n	800328c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	4313      	orrs	r3, r2
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f023 0307 	bic.w	r3, r3, #7
 80032a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d117      	bne.n	80032e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	4313      	orrs	r3, r2
 80032be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 fa9d 	bl	8003808 <DMA_CheckFifoParam>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2240      	movs	r2, #64	; 0x40
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80032e2:	2301      	movs	r3, #1
 80032e4:	e016      	b.n	8003314 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fa54 	bl	800379c <DMA_CalcBaseAndBitshift>
 80032f4:	4603      	mov	r3, r0
 80032f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	223f      	movs	r2, #63	; 0x3f
 80032fe:	409a      	lsls	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	f010803f 	.word	0xf010803f

08003320 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <HAL_DMA_Start_IT+0x26>
 8003342:	2302      	movs	r3, #2
 8003344:	e040      	b.n	80033c8 <HAL_DMA_Start_IT+0xa8>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b01      	cmp	r3, #1
 8003358:	d12f      	bne.n	80033ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f9e6 	bl	8003740 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003378:	223f      	movs	r2, #63	; 0x3f
 800337a:	409a      	lsls	r2, r3
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0216 	orr.w	r2, r2, #22
 800338e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0208 	orr.w	r2, r2, #8
 80033a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
 80033b8:	e005      	b.n	80033c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d004      	beq.n	80033ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2280      	movs	r2, #128	; 0x80
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e00c      	b.n	8003408 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2205      	movs	r2, #5
 80033f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0201 	bic.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800341c:	2300      	movs	r3, #0
 800341e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003420:	4b92      	ldr	r3, [pc, #584]	; (800366c <HAL_DMA_IRQHandler+0x258>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a92      	ldr	r2, [pc, #584]	; (8003670 <HAL_DMA_IRQHandler+0x25c>)
 8003426:	fba2 2303 	umull	r2, r3, r2, r3
 800342a:	0a9b      	lsrs	r3, r3, #10
 800342c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003432:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	2208      	movs	r2, #8
 8003440:	409a      	lsls	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4013      	ands	r3, r2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d01a      	beq.n	8003480 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d013      	beq.n	8003480 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f022 0204 	bic.w	r2, r2, #4
 8003466:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346c:	2208      	movs	r2, #8
 800346e:	409a      	lsls	r2, r3
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003478:	f043 0201 	orr.w	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	2201      	movs	r2, #1
 8003486:	409a      	lsls	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d012      	beq.n	80034b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a2:	2201      	movs	r2, #1
 80034a4:	409a      	lsls	r2, r3
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ae:	f043 0202 	orr.w	r2, r3, #2
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	2204      	movs	r2, #4
 80034bc:	409a      	lsls	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d012      	beq.n	80034ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00b      	beq.n	80034ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d8:	2204      	movs	r2, #4
 80034da:	409a      	lsls	r2, r3
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0204 	orr.w	r2, r3, #4
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	2210      	movs	r2, #16
 80034f2:	409a      	lsls	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4013      	ands	r3, r2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d043      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b00      	cmp	r3, #0
 8003508:	d03c      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350e:	2210      	movs	r2, #16
 8003510:	409a      	lsls	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d018      	beq.n	8003556 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d108      	bne.n	8003544 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d024      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
 8003542:	e01f      	b.n	8003584 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003548:	2b00      	cmp	r3, #0
 800354a:	d01b      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
 8003554:	e016      	b.n	8003584 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0208 	bic.w	r2, r2, #8
 8003572:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	2220      	movs	r2, #32
 800358a:	409a      	lsls	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 808e 	beq.w	80036b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0310 	and.w	r3, r3, #16
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 8086 	beq.w	80036b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2220      	movs	r2, #32
 80035ac:	409a      	lsls	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b05      	cmp	r3, #5
 80035bc:	d136      	bne.n	800362c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0216 	bic.w	r2, r2, #22
 80035cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <HAL_DMA_IRQHandler+0x1da>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0208 	bic.w	r2, r2, #8
 80035fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003602:	223f      	movs	r2, #63	; 0x3f
 8003604:	409a      	lsls	r2, r3
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800361e:	2b00      	cmp	r3, #0
 8003620:	d07d      	beq.n	800371e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
        }
        return;
 800362a:	e078      	b.n	800371e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01c      	beq.n	8003674 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d108      	bne.n	800365a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	2b00      	cmp	r3, #0
 800364e:	d030      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	4798      	blx	r3
 8003658:	e02b      	b.n	80036b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	4798      	blx	r3
 800366a:	e022      	b.n	80036b2 <HAL_DMA_IRQHandler+0x29e>
 800366c:	20000014 	.word	0x20000014
 8003670:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10f      	bne.n	80036a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0210 	bic.w	r2, r2, #16
 8003690:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d032      	beq.n	8003720 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d022      	beq.n	800370c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2205      	movs	r2, #5
 80036ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0201 	bic.w	r2, r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3301      	adds	r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d307      	bcc.n	80036fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f2      	bne.n	80036de <HAL_DMA_IRQHandler+0x2ca>
 80036f8:	e000      	b.n	80036fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80036fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d005      	beq.n	8003720 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	4798      	blx	r3
 800371c:	e000      	b.n	8003720 <HAL_DMA_IRQHandler+0x30c>
        return;
 800371e:	bf00      	nop
    }
  }
}
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop

08003728 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800375c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d108      	bne.n	8003780 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800377e:	e007      	b.n	8003790 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	3b10      	subs	r3, #16
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <DMA_CalcBaseAndBitshift+0x64>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037b6:	4a13      	ldr	r2, [pc, #76]	; (8003804 <DMA_CalcBaseAndBitshift+0x68>)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d909      	bls.n	80037de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	659a      	str	r2, [r3, #88]	; 0x58
 80037dc:	e007      	b.n	80037ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	aaaaaaab 	.word	0xaaaaaaab
 8003804:	08011a94 	.word	0x08011a94

08003808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11f      	bne.n	8003862 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d855      	bhi.n	80038d4 <DMA_CheckFifoParam+0xcc>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <DMA_CheckFifoParam+0x28>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003841 	.word	0x08003841
 8003834:	08003853 	.word	0x08003853
 8003838:	08003841 	.word	0x08003841
 800383c:	080038d5 	.word	0x080038d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d045      	beq.n	80038d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003850:	e042      	b.n	80038d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800385a:	d13f      	bne.n	80038dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003860:	e03c      	b.n	80038dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386a:	d121      	bne.n	80038b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b03      	cmp	r3, #3
 8003870:	d836      	bhi.n	80038e0 <DMA_CheckFifoParam+0xd8>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <DMA_CheckFifoParam+0x70>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	08003889 	.word	0x08003889
 800387c:	0800388f 	.word	0x0800388f
 8003880:	08003889 	.word	0x08003889
 8003884:	080038a1 	.word	0x080038a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e02f      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d024      	beq.n	80038e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389e:	e021      	b.n	80038e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a8:	d11e      	bne.n	80038e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ae:	e01b      	b.n	80038e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <DMA_CheckFifoParam+0xb4>
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d003      	beq.n	80038c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038ba:	e018      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e015      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00e      	beq.n	80038ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
      break;
 80038d2:	e00b      	b.n	80038ec <DMA_CheckFifoParam+0xe4>
      break;
 80038d4:	bf00      	nop
 80038d6:	e00a      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      break;
 80038d8:	bf00      	nop
 80038da:	e008      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      break;
 80038dc:	bf00      	nop
 80038de:	e006      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      break;
 80038e0:	bf00      	nop
 80038e2:	e004      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      break;
 80038e4:	bf00      	nop
 80038e6:	e002      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      break;   
 80038e8:	bf00      	nop
 80038ea:	e000      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      break;
 80038ec:	bf00      	nop
    }
  } 
  
  return status; 
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b089      	sub	sp, #36	; 0x24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	e16b      	b.n	8003bf0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003918:	2201      	movs	r2, #1
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	429a      	cmp	r2, r3
 8003932:	f040 815a 	bne.w	8003bea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d00b      	beq.n	8003956 <HAL_GPIO_Init+0x5a>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d007      	beq.n	8003956 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800394a:	2b11      	cmp	r3, #17
 800394c:	d003      	beq.n	8003956 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b12      	cmp	r3, #18
 8003954:	d130      	bne.n	80039b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	2203      	movs	r2, #3
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fa02 f303 	lsl.w	r3, r2, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800398c:	2201      	movs	r2, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	f003 0201 	and.w	r2, r3, #1
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	2203      	movs	r2, #3
 80039c4:	fa02 f303 	lsl.w	r3, r2, r3
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	fa02 f303 	lsl.w	r3, r2, r3
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	4313      	orrs	r3, r2
 80039e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0xfc>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b12      	cmp	r3, #18
 80039f6:	d123      	bne.n	8003a40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	220f      	movs	r2, #15
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	691a      	ldr	r2, [r3, #16]
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	08da      	lsrs	r2, r3, #3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3208      	adds	r2, #8
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 0203 	and.w	r2, r3, #3
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 80b4 	beq.w	8003bea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	4b5f      	ldr	r3, [pc, #380]	; (8003c04 <HAL_GPIO_Init+0x308>)
 8003a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8a:	4a5e      	ldr	r2, [pc, #376]	; (8003c04 <HAL_GPIO_Init+0x308>)
 8003a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a90:	6453      	str	r3, [r2, #68]	; 0x44
 8003a92:	4b5c      	ldr	r3, [pc, #368]	; (8003c04 <HAL_GPIO_Init+0x308>)
 8003a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a9e:	4a5a      	ldr	r2, [pc, #360]	; (8003c08 <HAL_GPIO_Init+0x30c>)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	089b      	lsrs	r3, r3, #2
 8003aa4:	3302      	adds	r3, #2
 8003aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	220f      	movs	r2, #15
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a51      	ldr	r2, [pc, #324]	; (8003c0c <HAL_GPIO_Init+0x310>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d02b      	beq.n	8003b22 <HAL_GPIO_Init+0x226>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a50      	ldr	r2, [pc, #320]	; (8003c10 <HAL_GPIO_Init+0x314>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d025      	beq.n	8003b1e <HAL_GPIO_Init+0x222>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4f      	ldr	r2, [pc, #316]	; (8003c14 <HAL_GPIO_Init+0x318>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01f      	beq.n	8003b1a <HAL_GPIO_Init+0x21e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4e      	ldr	r2, [pc, #312]	; (8003c18 <HAL_GPIO_Init+0x31c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d019      	beq.n	8003b16 <HAL_GPIO_Init+0x21a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4d      	ldr	r2, [pc, #308]	; (8003c1c <HAL_GPIO_Init+0x320>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_GPIO_Init+0x216>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4c      	ldr	r2, [pc, #304]	; (8003c20 <HAL_GPIO_Init+0x324>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00d      	beq.n	8003b0e <HAL_GPIO_Init+0x212>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a4b      	ldr	r2, [pc, #300]	; (8003c24 <HAL_GPIO_Init+0x328>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <HAL_GPIO_Init+0x20e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a4a      	ldr	r2, [pc, #296]	; (8003c28 <HAL_GPIO_Init+0x32c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_GPIO_Init+0x20a>
 8003b02:	2307      	movs	r3, #7
 8003b04:	e00e      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b06:	2308      	movs	r3, #8
 8003b08:	e00c      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b0a:	2306      	movs	r3, #6
 8003b0c:	e00a      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b0e:	2305      	movs	r3, #5
 8003b10:	e008      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b12:	2304      	movs	r3, #4
 8003b14:	e006      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b16:	2303      	movs	r3, #3
 8003b18:	e004      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b1a:	2302      	movs	r3, #2
 8003b1c:	e002      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <HAL_GPIO_Init+0x228>
 8003b22:	2300      	movs	r3, #0
 8003b24:	69fa      	ldr	r2, [r7, #28]
 8003b26:	f002 0203 	and.w	r2, r2, #3
 8003b2a:	0092      	lsls	r2, r2, #2
 8003b2c:	4093      	lsls	r3, r2
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b34:	4934      	ldr	r1, [pc, #208]	; (8003c08 <HAL_GPIO_Init+0x30c>)
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	089b      	lsrs	r3, r3, #2
 8003b3a:	3302      	adds	r3, #2
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b42:	4b3a      	ldr	r3, [pc, #232]	; (8003c2c <HAL_GPIO_Init+0x330>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d003      	beq.n	8003b66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b66:	4a31      	ldr	r2, [pc, #196]	; (8003c2c <HAL_GPIO_Init+0x330>)
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003b6c:	4b2f      	ldr	r3, [pc, #188]	; (8003c2c <HAL_GPIO_Init+0x330>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	43db      	mvns	r3, r3
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b90:	4a26      	ldr	r2, [pc, #152]	; (8003c2c <HAL_GPIO_Init+0x330>)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b96:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <HAL_GPIO_Init+0x330>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	43db      	mvns	r3, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_GPIO_Init+0x330>)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <HAL_GPIO_Init+0x330>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be4:	4a11      	ldr	r2, [pc, #68]	; (8003c2c <HAL_GPIO_Init+0x330>)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	3301      	adds	r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	2b0f      	cmp	r3, #15
 8003bf4:	f67f ae90 	bls.w	8003918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	3724      	adds	r7, #36	; 0x24
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40013800 	.word	0x40013800
 8003c0c:	40020000 	.word	0x40020000
 8003c10:	40020400 	.word	0x40020400
 8003c14:	40020800 	.word	0x40020800
 8003c18:	40020c00 	.word	0x40020c00
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40021400 	.word	0x40021400
 8003c24:	40021800 	.word	0x40021800
 8003c28:	40021c00 	.word	0x40021c00
 8003c2c:	40013c00 	.word	0x40013c00

08003c30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691a      	ldr	r2, [r3, #16]
 8003c40:	887b      	ldrh	r3, [r7, #2]
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	e001      	b.n	8003c52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c70:	787b      	ldrb	r3, [r7, #1]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c76:	887a      	ldrh	r2, [r7, #2]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c7c:	e003      	b.n	8003c86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	041a      	lsls	r2, r3, #16
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	619a      	str	r2, [r3, #24]
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695a      	ldr	r2, [r3, #20]
 8003ca2:	887b      	ldrh	r3, [r7, #2]
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	887b      	ldrh	r3, [r7, #2]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d104      	bne.n	8003cb6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003cac:	887b      	ldrh	r3, [r7, #2]
 8003cae:	041a      	lsls	r2, r3, #16
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003cb4:	e002      	b.n	8003cbc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	619a      	str	r2, [r3, #24]
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	4603      	mov	r3, r0
 8003cd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cd4:	695a      	ldr	r2, [r3, #20]
 8003cd6:	88fb      	ldrh	r3, [r7, #6]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d006      	beq.n	8003cec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003cde:	4a05      	ldr	r2, [pc, #20]	; (8003cf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce0:	88fb      	ldrh	r3, [r7, #6]
 8003ce2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ce4:	88fb      	ldrh	r3, [r7, #6]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fd78 	bl	80027dc <HAL_GPIO_EXTI_Callback>
  }
}
 8003cec:	bf00      	nop
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40013c00 	.word	0x40013c00

08003cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e11f      	b.n	8003f4a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fe fd9a 	bl	8002858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2224      	movs	r2, #36	; 0x24
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	681a      	ldr	r2, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d5c:	f002 fd1a 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 8003d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	4a7b      	ldr	r2, [pc, #492]	; (8003f54 <HAL_I2C_Init+0x25c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d807      	bhi.n	8003d7c <HAL_I2C_Init+0x84>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a7a      	ldr	r2, [pc, #488]	; (8003f58 <HAL_I2C_Init+0x260>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	bf94      	ite	ls
 8003d74:	2301      	movls	r3, #1
 8003d76:	2300      	movhi	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e006      	b.n	8003d8a <HAL_I2C_Init+0x92>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	4a77      	ldr	r2, [pc, #476]	; (8003f5c <HAL_I2C_Init+0x264>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	bf94      	ite	ls
 8003d84:	2301      	movls	r3, #1
 8003d86:	2300      	movhi	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e0db      	b.n	8003f4a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a72      	ldr	r2, [pc, #456]	; (8003f60 <HAL_I2C_Init+0x268>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0c9b      	lsrs	r3, r3, #18
 8003d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a64      	ldr	r2, [pc, #400]	; (8003f54 <HAL_I2C_Init+0x25c>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d802      	bhi.n	8003dcc <HAL_I2C_Init+0xd4>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	e009      	b.n	8003de0 <HAL_I2C_Init+0xe8>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dd2:	fb02 f303 	mul.w	r3, r2, r3
 8003dd6:	4a63      	ldr	r2, [pc, #396]	; (8003f64 <HAL_I2C_Init+0x26c>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	099b      	lsrs	r3, r3, #6
 8003dde:	3301      	adds	r3, #1
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6812      	ldr	r2, [r2, #0]
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4956      	ldr	r1, [pc, #344]	; (8003f54 <HAL_I2C_Init+0x25c>)
 8003dfc:	428b      	cmp	r3, r1
 8003dfe:	d80d      	bhi.n	8003e1c <HAL_I2C_Init+0x124>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	1e59      	subs	r1, r3, #1
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e0e:	3301      	adds	r3, #1
 8003e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	bf38      	it	cc
 8003e18:	2304      	movcc	r3, #4
 8003e1a:	e04f      	b.n	8003ebc <HAL_I2C_Init+0x1c4>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d111      	bne.n	8003e48 <HAL_I2C_Init+0x150>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	440b      	add	r3, r1
 8003e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e012      	b.n	8003e6e <HAL_I2C_Init+0x176>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	0099      	lsls	r1, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Init+0x17e>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e022      	b.n	8003ebc <HAL_I2C_Init+0x1c4>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10e      	bne.n	8003e9c <HAL_I2C_Init+0x1a4>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1e58      	subs	r0, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	440b      	add	r3, r1
 8003e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e9a:	e00f      	b.n	8003ebc <HAL_I2C_Init+0x1c4>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e58      	subs	r0, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	0099      	lsls	r1, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	6809      	ldr	r1, [r1, #0]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003eea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6911      	ldr	r1, [r2, #16]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68d2      	ldr	r2, [r2, #12]
 8003ef6:	4311      	orrs	r1, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	000186a0 	.word	0x000186a0
 8003f58:	001e847f 	.word	0x001e847f
 8003f5c:	003d08ff 	.word	0x003d08ff
 8003f60:	431bde83 	.word	0x431bde83
 8003f64:	10624dd3 	.word	0x10624dd3

08003f68 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	4608      	mov	r0, r1
 8003f72:	4611      	mov	r1, r2
 8003f74:	461a      	mov	r2, r3
 8003f76:	4603      	mov	r3, r0
 8003f78:	817b      	strh	r3, [r7, #10]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	813b      	strh	r3, [r7, #8]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f82:	f7fe ffdf 	bl	8002f44 <HAL_GetTick>
 8003f86:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	f040 80d9 	bne.w	8004148 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2319      	movs	r3, #25
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	496d      	ldr	r1, [pc, #436]	; (8004154 <HAL_I2C_Mem_Write+0x1ec>)
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fc7b 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fac:	2302      	movs	r3, #2
 8003fae:	e0cc      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d101      	bne.n	8003fbe <HAL_I2C_Mem_Write+0x56>
 8003fba:	2302      	movs	r3, #2
 8003fbc:	e0c5      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d007      	beq.n	8003fe4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f042 0201 	orr.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ff2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2221      	movs	r2, #33	; 0x21
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2240      	movs	r2, #64	; 0x40
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4a4d      	ldr	r2, [pc, #308]	; (8004158 <HAL_I2C_Mem_Write+0x1f0>)
 8004024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004026:	88f8      	ldrh	r0, [r7, #6]
 8004028:	893a      	ldrh	r2, [r7, #8]
 800402a:	8979      	ldrh	r1, [r7, #10]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	9301      	str	r3, [sp, #4]
 8004030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	4603      	mov	r3, r0
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f000 fab6 	bl	80045a8 <I2C_RequestMemoryWrite>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d052      	beq.n	80040e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e081      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 fcfc 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00d      	beq.n	8004072 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	2b04      	cmp	r3, #4
 800405c:	d107      	bne.n	800406e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800406c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e06b      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	781a      	ldrb	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408c:	3b01      	subs	r3, #1
 800408e:	b29a      	uxth	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004098:	b29b      	uxth	r3, r3
 800409a:	3b01      	subs	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d11b      	bne.n	80040e8 <HAL_I2C_Mem_Write+0x180>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d017      	beq.n	80040e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d2:	3b01      	subs	r3, #1
 80040d4:	b29a      	uxth	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1aa      	bne.n	8004046 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fce8 	bl	8004aca <I2C_WaitOnBTFFlagUntilTimeout>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00d      	beq.n	800411c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004104:	2b04      	cmp	r3, #4
 8004106:	d107      	bne.n	8004118 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e016      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e000      	b.n	800414a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004148:	2302      	movs	r3, #2
  }
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	00100002 	.word	0x00100002
 8004158:	ffff0000 	.word	0xffff0000

0800415c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08c      	sub	sp, #48	; 0x30
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	4608      	mov	r0, r1
 8004166:	4611      	mov	r1, r2
 8004168:	461a      	mov	r2, r3
 800416a:	4603      	mov	r3, r0
 800416c:	817b      	strh	r3, [r7, #10]
 800416e:	460b      	mov	r3, r1
 8004170:	813b      	strh	r3, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004176:	f7fe fee5 	bl	8002f44 <HAL_GetTick>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b20      	cmp	r3, #32
 8004186:	f040 8208 	bne.w	800459a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2319      	movs	r3, #25
 8004190:	2201      	movs	r2, #1
 8004192:	497b      	ldr	r1, [pc, #492]	; (8004380 <HAL_I2C_Mem_Read+0x224>)
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fb81 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	e1fb      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d101      	bne.n	80041b2 <HAL_I2C_Mem_Read+0x56>
 80041ae:	2302      	movs	r3, #2
 80041b0:	e1f4      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d007      	beq.n	80041d8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2222      	movs	r2, #34	; 0x22
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2240      	movs	r2, #64	; 0x40
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004208:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	4a5b      	ldr	r2, [pc, #364]	; (8004384 <HAL_I2C_Mem_Read+0x228>)
 8004218:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800421a:	88f8      	ldrh	r0, [r7, #6]
 800421c:	893a      	ldrh	r2, [r7, #8]
 800421e:	8979      	ldrh	r1, [r7, #10]
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	4603      	mov	r3, r0
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fa50 	bl	80046d0 <I2C_RequestMemoryRead>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e1b0      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d113      	bne.n	800426a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004242:	2300      	movs	r3, #0
 8004244:	623b      	str	r3, [r7, #32]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	623b      	str	r3, [r7, #32]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	623b      	str	r3, [r7, #32]
 8004256:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	e184      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426e:	2b01      	cmp	r3, #1
 8004270:	d11b      	bne.n	80042aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	61fb      	str	r3, [r7, #28]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	61fb      	str	r3, [r7, #28]
 8004296:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	e164      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d11b      	bne.n	80042ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042d2:	2300      	movs	r3, #0
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	61bb      	str	r3, [r7, #24]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	e144      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004300:	e138      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004306:	2b03      	cmp	r3, #3
 8004308:	f200 80f1 	bhi.w	80044ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004310:	2b01      	cmp	r3, #1
 8004312:	d123      	bne.n	800435c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 fc17 	bl	8004b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e139      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800435a:	e10b      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004360:	2b02      	cmp	r3, #2
 8004362:	d14e      	bne.n	8004402 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436a:	2200      	movs	r2, #0
 800436c:	4906      	ldr	r1, [pc, #24]	; (8004388 <HAL_I2C_Mem_Read+0x22c>)
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fa94 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e10e      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
 800437e:	bf00      	nop
 8004380:	00100002 	.word	0x00100002
 8004384:	ffff0000 	.word	0xffff0000
 8004388:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800439a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691a      	ldr	r2, [r3, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b8:	3b01      	subs	r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e0:	1c5a      	adds	r2, r3, #1
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ea:	3b01      	subs	r3, #1
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004400:	e0b8      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	2200      	movs	r2, #0
 800440a:	4966      	ldr	r1, [pc, #408]	; (80045a4 <HAL_I2C_Mem_Read+0x448>)
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 fa45 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e0bf      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800442a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691a      	ldr	r2, [r3, #16]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	b2d2      	uxtb	r2, r2
 8004438:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	3b01      	subs	r3, #1
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	2200      	movs	r2, #0
 8004466:	494f      	ldr	r1, [pc, #316]	; (80045a4 <HAL_I2C_Mem_Read+0x448>)
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 fa17 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d001      	beq.n	8004478 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e091      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004486:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	691a      	ldr	r2, [r3, #16]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	1c5a      	adds	r2, r3, #1
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	3b01      	subs	r3, #1
 80044a6:	b29a      	uxth	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	691a      	ldr	r2, [r3, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d6:	3b01      	subs	r3, #1
 80044d8:	b29a      	uxth	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b29a      	uxth	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044ec:	e042      	b.n	8004574 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	f000 fb2a 	bl	8004b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e04c      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	691a      	ldr	r2, [r3, #16]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	3b01      	subs	r3, #1
 800452e:	b29a      	uxth	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b04      	cmp	r3, #4
 8004540:	d118      	bne.n	8004574 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	691a      	ldr	r2, [r3, #16]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	1c5a      	adds	r2, r3, #1
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800456a:	b29b      	uxth	r3, r3
 800456c:	3b01      	subs	r3, #1
 800456e:	b29a      	uxth	r2, r3
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	f47f aec2 	bne.w	8004302 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2220      	movs	r2, #32
 8004582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004596:	2300      	movs	r3, #0
 8004598:	e000      	b.n	800459c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800459a:	2302      	movs	r3, #2
  }
}
 800459c:	4618      	mov	r0, r3
 800459e:	3728      	adds	r7, #40	; 0x28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	00010004 	.word	0x00010004

080045a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	4608      	mov	r0, r1
 80045b2:	4611      	mov	r1, r2
 80045b4:	461a      	mov	r2, r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	817b      	strh	r3, [r7, #10]
 80045ba:	460b      	mov	r3, r1
 80045bc:	813b      	strh	r3, [r7, #8]
 80045be:	4613      	mov	r3, r2
 80045c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	6a3b      	ldr	r3, [r7, #32]
 80045d8:	2200      	movs	r2, #0
 80045da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 f95c 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00c      	beq.n	8004604 <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d003      	beq.n	8004600 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e05f      	b.n	80046c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004604:	897b      	ldrh	r3, [r7, #10]
 8004606:	b2db      	uxtb	r3, r3
 8004608:	461a      	mov	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004612:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	6a3a      	ldr	r2, [r7, #32]
 8004618:	492c      	ldr	r1, [pc, #176]	; (80046cc <I2C_RequestMemoryWrite+0x124>)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f995 	bl	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e04c      	b.n	80046c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004642:	6a39      	ldr	r1, [r7, #32]
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f9ff 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00d      	beq.n	800466c <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	2b04      	cmp	r3, #4
 8004656:	d107      	bne.n	8004668 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e02b      	b.n	80046c4 <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800466c:	88fb      	ldrh	r3, [r7, #6]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d105      	bne.n	800467e <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004672:	893b      	ldrh	r3, [r7, #8]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	611a      	str	r2, [r3, #16]
 800467c:	e021      	b.n	80046c2 <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800467e:	893b      	ldrh	r3, [r7, #8]
 8004680:	0a1b      	lsrs	r3, r3, #8
 8004682:	b29b      	uxth	r3, r3
 8004684:	b2da      	uxtb	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800468c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800468e:	6a39      	ldr	r1, [r7, #32]
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f000 f9d9 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00d      	beq.n	80046b8 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d107      	bne.n	80046b4 <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e005      	b.n	80046c4 <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80046b8:	893b      	ldrh	r3, [r7, #8]
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	00010002 	.word	0x00010002

080046d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b088      	sub	sp, #32
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	461a      	mov	r2, r3
 80046de:	4603      	mov	r3, r0
 80046e0:	817b      	strh	r3, [r7, #10]
 80046e2:	460b      	mov	r3, r1
 80046e4:	813b      	strh	r3, [r7, #8]
 80046e6:	4613      	mov	r3, r2
 80046e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004708:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800470a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2200      	movs	r2, #0
 8004712:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 f8c0 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00c      	beq.n	800473c <I2C_RequestMemoryRead+0x6c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <I2C_RequestMemoryRead+0x68>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004736:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e0a9      	b.n	8004890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800473c:	897b      	ldrh	r3, [r7, #10]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800474a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	6a3a      	ldr	r2, [r7, #32]
 8004750:	4951      	ldr	r1, [pc, #324]	; (8004898 <I2C_RequestMemoryRead+0x1c8>)
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f8f9 	bl	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <I2C_RequestMemoryRead+0x92>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e096      	b.n	8004890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004762:	2300      	movs	r3, #0
 8004764:	617b      	str	r3, [r7, #20]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	695b      	ldr	r3, [r3, #20]
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	617b      	str	r3, [r7, #20]
 8004776:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800477a:	6a39      	ldr	r1, [r7, #32]
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f963 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00d      	beq.n	80047a4 <I2C_RequestMemoryRead+0xd4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	2b04      	cmp	r3, #4
 800478e:	d107      	bne.n	80047a0 <I2C_RequestMemoryRead+0xd0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e075      	b.n	8004890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047a4:	88fb      	ldrh	r3, [r7, #6]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d105      	bne.n	80047b6 <I2C_RequestMemoryRead+0xe6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047aa:	893b      	ldrh	r3, [r7, #8]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	611a      	str	r2, [r3, #16]
 80047b4:	e021      	b.n	80047fa <I2C_RequestMemoryRead+0x12a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047b6:	893b      	ldrh	r3, [r7, #8]
 80047b8:	0a1b      	lsrs	r3, r3, #8
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c6:	6a39      	ldr	r1, [r7, #32]
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f000 f93d 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00d      	beq.n	80047f0 <I2C_RequestMemoryRead+0x120>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d107      	bne.n	80047ec <I2C_RequestMemoryRead+0x11c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e04f      	b.n	8004890 <I2C_RequestMemoryRead+0x1c0>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047f0:	893b      	ldrh	r3, [r7, #8]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fc:	6a39      	ldr	r1, [r7, #32]
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f922 	bl	8004a48 <I2C_WaitOnTXEFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00d      	beq.n	8004826 <I2C_RequestMemoryRead+0x156>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b04      	cmp	r3, #4
 8004810:	d107      	bne.n	8004822 <I2C_RequestMemoryRead+0x152>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004820:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e034      	b.n	8004890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004834:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	2200      	movs	r2, #0
 800483e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 f82a 	bl	800489c <I2C_WaitOnFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00c      	beq.n	8004868 <I2C_RequestMemoryRead+0x198>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <I2C_RequestMemoryRead+0x194>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e013      	b.n	8004890 <I2C_RequestMemoryRead+0x1c0>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004868:	897b      	ldrh	r3, [r7, #10]
 800486a:	b2db      	uxtb	r3, r3
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487a:	6a3a      	ldr	r2, [r7, #32]
 800487c:	4906      	ldr	r1, [pc, #24]	; (8004898 <I2C_RequestMemoryRead+0x1c8>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f863 	bl	800494a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <I2C_RequestMemoryRead+0x1be>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <I2C_RequestMemoryRead+0x1c0>
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	00010002 	.word	0x00010002

0800489c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048ac:	e025      	b.n	80048fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d021      	beq.n	80048fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b6:	f7fe fb45 	bl	8002f44 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d116      	bne.n	80048fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e023      	b.n	8004942 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	0c1b      	lsrs	r3, r3, #16
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d10d      	bne.n	8004920 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	43da      	mvns	r2, r3
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4013      	ands	r3, r2
 8004910:	b29b      	uxth	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	bf0c      	ite	eq
 8004916:	2301      	moveq	r3, #1
 8004918:	2300      	movne	r3, #0
 800491a:	b2db      	uxtb	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	e00c      	b.n	800493a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	43da      	mvns	r2, r3
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	4013      	ands	r3, r2
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	79fb      	ldrb	r3, [r7, #7]
 800493c:	429a      	cmp	r2, r3
 800493e:	d0b6      	beq.n	80048ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b084      	sub	sp, #16
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
 8004956:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004958:	e051      	b.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004968:	d123      	bne.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004978:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004982:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	f043 0204 	orr.w	r2, r3, #4
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e046      	b.n	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d021      	beq.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fe fac3 	bl	8002f44 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d116      	bne.n	80049fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e020      	b.n	8004a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10c      	bne.n	8004a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf14      	ite	ne
 8004a1a:	2301      	movne	r3, #1
 8004a1c:	2300      	moveq	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	e00b      	b.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	43da      	mvns	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf14      	ite	ne
 8004a34:	2301      	movne	r3, #1
 8004a36:	2300      	moveq	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d18d      	bne.n	800495a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a54:	e02d      	b.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f8ce 	bl	8004bf8 <I2C_IsAcknowledgeFailed>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e02d      	b.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a6c:	d021      	beq.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a6e:	f7fe fa69 	bl	8002f44 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	68ba      	ldr	r2, [r7, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d302      	bcc.n	8004a84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d116      	bne.n	8004ab2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f043 0220 	orr.w	r2, r3, #32
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e007      	b.n	8004ac2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d1ca      	bne.n	8004a56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ad6:	e02d      	b.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ad8:	68f8      	ldr	r0, [r7, #12]
 8004ada:	f000 f88d 	bl	8004bf8 <I2C_IsAcknowledgeFailed>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e02d      	b.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d021      	beq.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af0:	f7fe fa28 	bl	8002f44 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d302      	bcc.n	8004b06 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d116      	bne.n	8004b34 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b20:	f043 0220 	orr.w	r2, r3, #32
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e007      	b.n	8004b44 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f003 0304 	and.w	r3, r3, #4
 8004b3e:	2b04      	cmp	r3, #4
 8004b40:	d1ca      	bne.n	8004ad8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b58:	e042      	b.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0310 	and.w	r3, r3, #16
 8004b64:	2b10      	cmp	r3, #16
 8004b66:	d119      	bne.n	8004b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f06f 0210 	mvn.w	r2, #16
 8004b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e029      	b.n	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9c:	f7fe f9d2 	bl	8002f44 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	68ba      	ldr	r2, [r7, #8]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d302      	bcc.n	8004bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d116      	bne.n	8004be0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2220      	movs	r2, #32
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bcc:	f043 0220 	orr.w	r2, r3, #32
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e007      	b.n	8004bf0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d1b5      	bne.n	8004b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0e:	d11b      	bne.n	8004c48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004c18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c34:	f043 0204 	orr.w	r2, r3, #4
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004c56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c58:	b08f      	sub	sp, #60	; 0x3c
 8004c5a:	af0a      	add	r7, sp, #40	; 0x28
 8004c5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e10f      	b.n	8004e88 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f008 f93e 	bl	800cf04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d102      	bne.n	8004ca2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f004 feef 	bl	8009a8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	603b      	str	r3, [r7, #0]
 8004cb2:	687e      	ldr	r6, [r7, #4]
 8004cb4:	466d      	mov	r5, sp
 8004cb6:	f106 0410 	add.w	r4, r6, #16
 8004cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cc2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cca:	1d33      	adds	r3, r6, #4
 8004ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cce:	6838      	ldr	r0, [r7, #0]
 8004cd0:	f004 fdc6 	bl	8009860 <USB_CoreInit>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e0d0      	b.n	8004e88 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2100      	movs	r1, #0
 8004cec:	4618      	mov	r0, r3
 8004cee:	f004 fedd 	bl	8009aac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	e04a      	b.n	8004d8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004cf8:	7bfa      	ldrb	r2, [r7, #15]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	333d      	adds	r3, #61	; 0x3d
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d0c:	7bfa      	ldrb	r2, [r7, #15]
 8004d0e:	6879      	ldr	r1, [r7, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	1a9b      	subs	r3, r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	440b      	add	r3, r1
 8004d1a:	333c      	adds	r3, #60	; 0x3c
 8004d1c:	7bfa      	ldrb	r2, [r7, #15]
 8004d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d20:	7bfa      	ldrb	r2, [r7, #15]
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
 8004d24:	b298      	uxth	r0, r3
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	440b      	add	r3, r1
 8004d32:	3342      	adds	r3, #66	; 0x42
 8004d34:	4602      	mov	r2, r0
 8004d36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	333f      	adds	r3, #63	; 0x3f
 8004d48:	2200      	movs	r2, #0
 8004d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d4c:	7bfa      	ldrb	r2, [r7, #15]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	00db      	lsls	r3, r3, #3
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	3344      	adds	r3, #68	; 0x44
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004d60:	7bfa      	ldrb	r2, [r7, #15]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	1a9b      	subs	r3, r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	3348      	adds	r3, #72	; 0x48
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004d74:	7bfa      	ldrb	r2, [r7, #15]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	440b      	add	r3, r1
 8004d82:	3350      	adds	r3, #80	; 0x50
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3af      	bcc.n	8004cf8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d98:	2300      	movs	r3, #0
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	e044      	b.n	8004e28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004d9e:	7bfa      	ldrb	r2, [r7, #15]
 8004da0:	6879      	ldr	r1, [r7, #4]
 8004da2:	4613      	mov	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	440b      	add	r3, r1
 8004dac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004db4:	7bfa      	ldrb	r2, [r7, #15]
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	1a9b      	subs	r3, r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004dc6:	7bfa      	ldrb	r2, [r7, #15]
 8004dc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ddc:	2200      	movs	r2, #0
 8004dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004de0:	7bfa      	ldrb	r2, [r7, #15]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004df2:	2200      	movs	r2, #0
 8004df4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004df6:	7bfa      	ldrb	r2, [r7, #15]
 8004df8:	6879      	ldr	r1, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e0c:	7bfa      	ldrb	r2, [r7, #15]
 8004e0e:	6879      	ldr	r1, [r7, #4]
 8004e10:	4613      	mov	r3, r2
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	1a9b      	subs	r3, r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	440b      	add	r3, r1
 8004e1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	3301      	adds	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
 8004e28:	7bfa      	ldrb	r2, [r7, #15]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d3b5      	bcc.n	8004d9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	603b      	str	r3, [r7, #0]
 8004e38:	687e      	ldr	r6, [r7, #4]
 8004e3a:	466d      	mov	r5, sp
 8004e3c:	f106 0410 	add.w	r4, r6, #16
 8004e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e50:	1d33      	adds	r3, r6, #4
 8004e52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e54:	6838      	ldr	r0, [r7, #0]
 8004e56:	f004 fe53 	bl	8009b00 <USB_DevInit>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2202      	movs	r2, #2
 8004e64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e00d      	b.n	8004e88 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f005 fe48 	bl	800ab16 <USB_DevDisconnect>

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d101      	bne.n	8004eac <HAL_PCD_Start+0x1c>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	e020      	b.n	8004eee <HAL_PCD_Start+0x5e>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d109      	bne.n	8004ed0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d005      	beq.n	8004ed0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f005 fe06 	bl	800aae6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f004 fdc2 	bl	8009a68 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ef6:	b590      	push	{r4, r7, lr}
 8004ef8:	b08d      	sub	sp, #52	; 0x34
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f005 fead 	bl	800ac6c <USB_GetMode>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 838e 	bne.w	8005636 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f005 fe11 	bl	800ab46 <USB_ReadInterrupts>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 8384 	beq.w	8005634 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f005 fe08 	bl	800ab46 <USB_ReadInterrupts>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d107      	bne.n	8004f50 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f002 0202 	and.w	r2, r2, #2
 8004f4e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f005 fdf6 	bl	800ab46 <USB_ReadInterrupts>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f60:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f64:	d17b      	bne.n	800505e <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f005 fdfc 	bl	800ab6c <USB_ReadDevAllOutEpInterrupt>
 8004f74:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f76:	e06f      	b.n	8005058 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	f003 0301 	and.w	r3, r3, #1
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d064      	beq.n	800504c <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f88:	b2d2      	uxtb	r2, r2
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f005 fe21 	bl	800abd4 <USB_ReadDevOutEPInterrupt>
 8004f92:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	461a      	mov	r2, r3
 8004fac:	2301      	movs	r3, #1
 8004fae:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004fb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fe0e 	bl	8005bd4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00c      	beq.n	8004fdc <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004fc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 ff0d 	bl	8005de4 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2308      	movs	r3, #8
 8004fda:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	f003 0310 	and.w	r3, r3, #16
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d008      	beq.n	8004ff8 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2310      	movs	r3, #16
 8004ff6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d015      	beq.n	800502e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	2b01      	cmp	r3, #1
 8005008:	d108      	bne.n	800501c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005014:	461a      	mov	r2, r3
 8005016:	2101      	movs	r1, #1
 8005018:	f005 fe6c 	bl	800acf4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005028:	461a      	mov	r2, r3
 800502a:	2320      	movs	r3, #32
 800502c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d009      	beq.n	800504c <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	461a      	mov	r2, r3
 8005046:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800504a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	3301      	adds	r3, #1
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	2b00      	cmp	r3, #0
 800505c:	d18c      	bne.n	8004f78 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f005 fd6f 	bl	800ab46 <USB_ReadInterrupts>
 8005068:	4603      	mov	r3, r0
 800506a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800506e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005072:	f040 80c4 	bne.w	80051fe <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f005 fd90 	bl	800aba0 <USB_ReadDevAllInEpInterrupt>
 8005080:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005086:	e0b6      	b.n	80051f6 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80ab 	beq.w	80051ea <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	4611      	mov	r1, r2
 800509e:	4618      	mov	r0, r3
 80050a0:	f005 fdb6 	bl	800ac10 <USB_ReadDevInEPInterrupt>
 80050a4:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d05b      	beq.n	8005168 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	2201      	movs	r2, #1
 80050b8:	fa02 f303 	lsl.w	r3, r2, r3
 80050bc:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050be:	69fb      	ldr	r3, [r7, #28]
 80050c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	43db      	mvns	r3, r3
 80050ca:	69f9      	ldr	r1, [r7, #28]
 80050cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050d0:	4013      	ands	r3, r2
 80050d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	015a      	lsls	r2, r3, #5
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	4413      	add	r3, r2
 80050dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e0:	461a      	mov	r2, r3
 80050e2:	2301      	movs	r3, #1
 80050e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d11b      	bne.n	8005126 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	1a9b      	subs	r3, r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	3348      	adds	r3, #72	; 0x48
 80050fe:	6819      	ldr	r1, [r3, #0]
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	1a9b      	subs	r3, r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4403      	add	r3, r0
 800510e:	3344      	adds	r3, #68	; 0x44
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4419      	add	r1, r3
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005118:	4613      	mov	r3, r2
 800511a:	00db      	lsls	r3, r3, #3
 800511c:	1a9b      	subs	r3, r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4403      	add	r3, r0
 8005122:	3348      	adds	r3, #72	; 0x48
 8005124:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005128:	b2db      	uxtb	r3, r3
 800512a:	4619      	mov	r1, r3
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f007 ff78 	bl	800d022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d116      	bne.n	8005168 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513c:	2b00      	cmp	r3, #0
 800513e:	d113      	bne.n	8005168 <HAL_PCD_IRQHandler+0x272>
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005144:	4613      	mov	r3, r2
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	1a9b      	subs	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	440b      	add	r3, r1
 800514e:	3350      	adds	r3, #80	; 0x50
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d108      	bne.n	8005168 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005160:	461a      	mov	r2, r3
 8005162:	2101      	movs	r1, #1
 8005164:	f005 fdc6 	bl	800acf4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d008      	beq.n	8005184 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517e:	461a      	mov	r2, r3
 8005180:	2308      	movs	r3, #8
 8005182:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800518e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519a:	461a      	mov	r2, r3
 800519c:	2310      	movs	r3, #16
 800519e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d008      	beq.n	80051bc <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	015a      	lsls	r2, r3, #5
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	4413      	add	r3, r2
 80051b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b6:	461a      	mov	r2, r3
 80051b8:	2340      	movs	r3, #64	; 0x40
 80051ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d008      	beq.n	80051d8 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d2:	461a      	mov	r2, r3
 80051d4:	2302      	movs	r3, #2
 80051d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80051e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fc67 	bl	8005ab8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	3301      	adds	r3, #1
 80051ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f47f af45 	bne.w	8005088 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4618      	mov	r0, r3
 8005204:	f005 fc9f 	bl	800ab46 <USB_ReadInterrupts>
 8005208:	4603      	mov	r3, r0
 800520a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800520e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005212:	d122      	bne.n	800525a <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	69fa      	ldr	r2, [r7, #28]
 800521e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005222:	f023 0301 	bic.w	r3, r3, #1
 8005226:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800522e:	2b01      	cmp	r3, #1
 8005230:	d108      	bne.n	8005244 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800523a:	2100      	movs	r1, #0
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fe89 	bl	8005f54 <HAL_PCDEx_LPM_Callback>
 8005242:	e002      	b.n	800524a <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f007 ff63 	bl	800d110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005258:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f005 fc71 	bl	800ab46 <USB_ReadInterrupts>
 8005264:	4603      	mov	r3, r0
 8005266:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800526a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800526e:	d112      	bne.n	8005296 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d102      	bne.n	8005286 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f007 ff1f 	bl	800d0c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695a      	ldr	r2, [r3, #20]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005294:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4618      	mov	r0, r3
 800529c:	f005 fc53 	bl	800ab46 <USB_ReadInterrupts>
 80052a0:	4603      	mov	r3, r0
 80052a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	f040 80a7 	bne.w	80053fc <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052bc:	f023 0301 	bic.w	r3, r3, #1
 80052c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2110      	movs	r1, #16
 80052c8:	4618      	mov	r0, r3
 80052ca:	f004 fd8b 	bl	8009de4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ce:	2300      	movs	r3, #0
 80052d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052d2:	e036      	b.n	8005342 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80052d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e0:	461a      	mov	r2, r3
 80052e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005302:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005306:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005314:	461a      	mov	r2, r3
 8005316:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800531a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800531c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005336:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800533a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800533c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533e:	3301      	adds	r3, #1
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005348:	429a      	cmp	r2, r3
 800534a:	d3c3      	bcc.n	80052d4 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800535a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800535e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	2b00      	cmp	r3, #0
 8005366:	d016      	beq.n	8005396 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005372:	69fa      	ldr	r2, [r7, #28]
 8005374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005378:	f043 030b 	orr.w	r3, r3, #11
 800537c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538e:	f043 030b 	orr.w	r3, r3, #11
 8005392:	6453      	str	r3, [r2, #68]	; 0x44
 8005394:	e015      	b.n	80053c2 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80053ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	69fa      	ldr	r2, [r7, #28]
 80053b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053bc:	f043 030b 	orr.w	r3, r3, #11
 80053c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69fa      	ldr	r2, [r7, #28]
 80053cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053e6:	461a      	mov	r2, r3
 80053e8:	f005 fc84 	bl	800acf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f005 fba0 	bl	800ab46 <USB_ReadInterrupts>
 8005406:	4603      	mov	r3, r0
 8005408:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005410:	d124      	bne.n	800545c <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4618      	mov	r0, r3
 8005418:	f005 fc36 	bl	800ac88 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4618      	mov	r0, r3
 8005422:	f004 fd40 	bl	8009ea6 <USB_GetDevSpeed>
 8005426:	4603      	mov	r3, r0
 8005428:	461a      	mov	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681c      	ldr	r4, [r3, #0]
 8005432:	f001 f9a3 	bl	800677c <HAL_RCC_GetHCLKFreq>
 8005436:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800543c:	b2db      	uxtb	r3, r3
 800543e:	461a      	mov	r2, r3
 8005440:	4620      	mov	r0, r4
 8005442:	f004 fa6f 	bl	8009924 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f007 fe13 	bl	800d072 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	695a      	ldr	r2, [r3, #20]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800545a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4618      	mov	r0, r3
 8005462:	f005 fb70 	bl	800ab46 <USB_ReadInterrupts>
 8005466:	4603      	mov	r3, r0
 8005468:	f003 0310 	and.w	r3, r3, #16
 800546c:	2b10      	cmp	r3, #16
 800546e:	d161      	bne.n	8005534 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0210 	bic.w	r2, r2, #16
 800547e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005480:	6a3b      	ldr	r3, [r7, #32]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	f003 020f 	and.w	r2, r3, #15
 800548c:	4613      	mov	r3, r2
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4413      	add	r3, r2
 800549c:	3304      	adds	r3, #4
 800549e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	0c5b      	lsrs	r3, r3, #17
 80054a4:	f003 030f 	and.w	r3, r3, #15
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d124      	bne.n	80054f6 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80054b2:	4013      	ands	r3, r2
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d035      	beq.n	8005524 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	091b      	lsrs	r3, r3, #4
 80054c0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	461a      	mov	r2, r3
 80054ca:	6a38      	ldr	r0, [r7, #32]
 80054cc:	f005 f9e8 	bl	800a8a0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	091b      	lsrs	r3, r3, #4
 80054d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ee:	441a      	add	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	619a      	str	r2, [r3, #24]
 80054f4:	e016      	b.n	8005524 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	0c5b      	lsrs	r3, r3, #17
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d110      	bne.n	8005524 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005508:	2208      	movs	r2, #8
 800550a:	4619      	mov	r1, r3
 800550c:	6a38      	ldr	r0, [r7, #32]
 800550e:	f005 f9c7 	bl	800a8a0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	699a      	ldr	r2, [r3, #24]
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	091b      	lsrs	r3, r3, #4
 800551a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800551e:	441a      	add	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0210 	orr.w	r2, r2, #16
 8005532:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f005 fb04 	bl	800ab46 <USB_ReadInterrupts>
 800553e:	4603      	mov	r3, r0
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b08      	cmp	r3, #8
 8005546:	d10a      	bne.n	800555e <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f007 fd84 	bl	800d056 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	695a      	ldr	r2, [r3, #20]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f002 0208 	and.w	r2, r2, #8
 800555c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4618      	mov	r0, r3
 8005564:	f005 faef 	bl	800ab46 <USB_ReadInterrupts>
 8005568:	4603      	mov	r3, r0
 800556a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800556e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005572:	d10f      	bne.n	8005594 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	b2db      	uxtb	r3, r3
 800557c:	4619      	mov	r1, r3
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f007 fde6 	bl	800d150 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f005 fad4 	bl	800ab46 <USB_ReadInterrupts>
 800559e:	4603      	mov	r3, r0
 80055a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055a8:	d10f      	bne.n	80055ca <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f007 fdb9 	bl	800d12c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80055c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f005 fab9 	bl	800ab46 <USB_ReadInterrupts>
 80055d4:	4603      	mov	r3, r0
 80055d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055de:	d10a      	bne.n	80055f6 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f007 fdc7 	bl	800d174 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	695a      	ldr	r2, [r3, #20]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f005 faa3 	bl	800ab46 <USB_ReadInterrupts>
 8005600:	4603      	mov	r3, r0
 8005602:	f003 0304 	and.w	r3, r3, #4
 8005606:	2b04      	cmp	r3, #4
 8005608:	d115      	bne.n	8005636 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f003 0304 	and.w	r3, r3, #4
 8005618:	2b00      	cmp	r3, #0
 800561a:	d002      	beq.n	8005622 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800561c:	6878      	ldr	r0, [r7, #4]
 800561e:	f007 fdb7 	bl	800d190 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6859      	ldr	r1, [r3, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	430a      	orrs	r2, r1
 8005630:	605a      	str	r2, [r3, #4]
 8005632:	e000      	b.n	8005636 <HAL_PCD_IRQHandler+0x740>
      return;
 8005634:	bf00      	nop
    }
  }
}
 8005636:	3734      	adds	r7, #52	; 0x34
 8005638:	46bd      	mov	sp, r7
 800563a:	bd90      	pop	{r4, r7, pc}

0800563c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_PCD_SetAddress+0x1a>
 8005652:	2302      	movs	r3, #2
 8005654:	e013      	b.n	800567e <HAL_PCD_SetAddress+0x42>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	78fa      	ldrb	r2, [r7, #3]
 800566c:	4611      	mov	r1, r2
 800566e:	4618      	mov	r0, r3
 8005670:	f005 fa13 	bl	800aa9a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3708      	adds	r7, #8
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	4608      	mov	r0, r1
 8005690:	4611      	mov	r1, r2
 8005692:	461a      	mov	r2, r3
 8005694:	4603      	mov	r3, r0
 8005696:	70fb      	strb	r3, [r7, #3]
 8005698:	460b      	mov	r3, r1
 800569a:	803b      	strh	r3, [r7, #0]
 800569c:	4613      	mov	r3, r2
 800569e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	da0f      	bge.n	80056cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056ac:	78fb      	ldrb	r3, [r7, #3]
 80056ae:	f003 020f 	and.w	r2, r3, #15
 80056b2:	4613      	mov	r3, r2
 80056b4:	00db      	lsls	r3, r3, #3
 80056b6:	1a9b      	subs	r3, r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	3338      	adds	r3, #56	; 0x38
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	4413      	add	r3, r2
 80056c0:	3304      	adds	r3, #4
 80056c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2201      	movs	r2, #1
 80056c8:	705a      	strb	r2, [r3, #1]
 80056ca:	e00f      	b.n	80056ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	f003 020f 	and.w	r2, r3, #15
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	4413      	add	r3, r2
 80056e2:	3304      	adds	r3, #4
 80056e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80056ec:	78fb      	ldrb	r3, [r7, #3]
 80056ee:	f003 030f 	and.w	r3, r3, #15
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80056f8:	883a      	ldrh	r2, [r7, #0]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	78ba      	ldrb	r2, [r7, #2]
 8005702:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	785b      	ldrb	r3, [r3, #1]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005716:	78bb      	ldrb	r3, [r7, #2]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d102      	bne.n	8005722 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_PCD_EP_Open+0xaa>
 800572c:	2302      	movs	r3, #2
 800572e:	e00e      	b.n	800574e <HAL_PCD_EP_Open+0xc8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68f9      	ldr	r1, [r7, #12]
 800573e:	4618      	mov	r0, r3
 8005740:	f004 fbd6 	bl	8009ef0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800574c:	7afb      	ldrb	r3, [r7, #11]
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b084      	sub	sp, #16
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	460b      	mov	r3, r1
 8005760:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005766:	2b00      	cmp	r3, #0
 8005768:	da0f      	bge.n	800578a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	f003 020f 	and.w	r2, r3, #15
 8005770:	4613      	mov	r3, r2
 8005772:	00db      	lsls	r3, r3, #3
 8005774:	1a9b      	subs	r3, r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	3338      	adds	r3, #56	; 0x38
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	3304      	adds	r3, #4
 8005780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	705a      	strb	r2, [r3, #1]
 8005788:	e00f      	b.n	80057aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	f003 020f 	and.w	r2, r3, #15
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	1a9b      	subs	r3, r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4413      	add	r3, r2
 80057a0:	3304      	adds	r3, #4
 80057a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80057aa:	78fb      	ldrb	r3, [r7, #3]
 80057ac:	f003 030f 	and.w	r3, r3, #15
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_PCD_EP_Close+0x6e>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e00e      	b.n	80057e2 <HAL_PCD_EP_Close+0x8c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68f9      	ldr	r1, [r7, #12]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f004 fc14 	bl	800a000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b086      	sub	sp, #24
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	607a      	str	r2, [r7, #4]
 80057f4:	603b      	str	r3, [r7, #0]
 80057f6:	460b      	mov	r3, r1
 80057f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057fa:	7afb      	ldrb	r3, [r7, #11]
 80057fc:	f003 020f 	and.w	r2, r3, #15
 8005800:	4613      	mov	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4413      	add	r3, r2
 8005810:	3304      	adds	r3, #4
 8005812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2200      	movs	r2, #0
 8005824:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2200      	movs	r2, #0
 800582a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800582c:	7afb      	ldrb	r3, [r7, #11]
 800582e:	f003 030f 	and.w	r3, r3, #15
 8005832:	b2da      	uxtb	r2, r3
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d102      	bne.n	8005846 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005846:	7afb      	ldrb	r3, [r7, #11]
 8005848:	f003 030f 	and.w	r3, r3, #15
 800584c:	2b00      	cmp	r3, #0
 800584e:	d109      	bne.n	8005864 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6818      	ldr	r0, [r3, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	461a      	mov	r2, r3
 800585c:	6979      	ldr	r1, [r7, #20]
 800585e:	f004 fe97 	bl	800a590 <USB_EP0StartXfer>
 8005862:	e008      	b.n	8005876 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	b2db      	uxtb	r3, r3
 800586e:	461a      	mov	r2, r3
 8005870:	6979      	ldr	r1, [r7, #20]
 8005872:	f004 fc49 	bl	800a108 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	f003 020f 	and.w	r2, r3, #15
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	4613      	mov	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	1a9b      	subs	r3, r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	440b      	add	r3, r1
 800589e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80058a2:	681b      	ldr	r3, [r3, #0]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	607a      	str	r2, [r7, #4]
 80058ba:	603b      	str	r3, [r7, #0]
 80058bc:	460b      	mov	r3, r1
 80058be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c0:	7afb      	ldrb	r3, [r7, #11]
 80058c2:	f003 020f 	and.w	r2, r3, #15
 80058c6:	4613      	mov	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	1a9b      	subs	r3, r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	3338      	adds	r3, #56	; 0x38
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4413      	add	r3, r2
 80058d4:	3304      	adds	r3, #4
 80058d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2200      	movs	r2, #0
 80058e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2201      	movs	r2, #1
 80058ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058f0:	7afb      	ldrb	r3, [r7, #11]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	b2da      	uxtb	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d102      	bne.n	800590a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800590a:	7afb      	ldrb	r3, [r7, #11]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	2b00      	cmp	r3, #0
 8005912:	d109      	bne.n	8005928 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	461a      	mov	r2, r3
 8005920:	6979      	ldr	r1, [r7, #20]
 8005922:	f004 fe35 	bl	800a590 <USB_EP0StartXfer>
 8005926:	e008      	b.n	800593a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6818      	ldr	r0, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	6979      	ldr	r1, [r7, #20]
 8005936:	f004 fbe7 	bl	800a108 <USB_EPStartXfer>
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3718      	adds	r7, #24
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	f003 020f 	and.w	r2, r3, #15
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	429a      	cmp	r2, r3
 800595c:	d901      	bls.n	8005962 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e050      	b.n	8005a04 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005962:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005966:	2b00      	cmp	r3, #0
 8005968:	da0f      	bge.n	800598a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	f003 020f 	and.w	r2, r3, #15
 8005970:	4613      	mov	r3, r2
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	3338      	adds	r3, #56	; 0x38
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	4413      	add	r3, r2
 800597e:	3304      	adds	r3, #4
 8005980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2201      	movs	r2, #1
 8005986:	705a      	strb	r2, [r3, #1]
 8005988:	e00d      	b.n	80059a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	4613      	mov	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	4413      	add	r3, r2
 800599c:	3304      	adds	r3, #4
 800599e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059ac:	78fb      	ldrb	r3, [r7, #3]
 80059ae:	f003 030f 	and.w	r3, r3, #15
 80059b2:	b2da      	uxtb	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_PCD_EP_SetStall+0x82>
 80059c2:	2302      	movs	r3, #2
 80059c4:	e01e      	b.n	8005a04 <HAL_PCD_EP_SetStall+0xc0>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68f9      	ldr	r1, [r7, #12]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f004 ff8c 	bl	800a8f2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059da:	78fb      	ldrb	r3, [r7, #3]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	b2d9      	uxtb	r1, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80059f4:	461a      	mov	r2, r3
 80059f6:	f005 f97d 	bl	800acf4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a18:	78fb      	ldrb	r3, [r7, #3]
 8005a1a:	f003 020f 	and.w	r2, r3, #15
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d901      	bls.n	8005a2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e042      	b.n	8005ab0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	da0f      	bge.n	8005a52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	f003 020f 	and.w	r2, r3, #15
 8005a38:	4613      	mov	r3, r2
 8005a3a:	00db      	lsls	r3, r3, #3
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	3338      	adds	r3, #56	; 0x38
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	3304      	adds	r3, #4
 8005a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	705a      	strb	r2, [r3, #1]
 8005a50:	e00f      	b.n	8005a72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	f003 020f 	and.w	r2, r3, #15
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	3304      	adds	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a78:	78fb      	ldrb	r3, [r7, #3]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <HAL_PCD_EP_ClrStall+0x86>
 8005a8e:	2302      	movs	r3, #2
 8005a90:	e00e      	b.n	8005ab0 <HAL_PCD_EP_ClrStall+0xa4>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68f9      	ldr	r1, [r7, #12]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f004 ff94 	bl	800a9ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af02      	add	r7, sp, #8
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	00db      	lsls	r3, r3, #3
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	3338      	adds	r3, #56	; 0x38
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	4413      	add	r3, r2
 8005adc:	3304      	adds	r3, #4
 8005ade:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d901      	bls.n	8005af0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e06c      	b.n	8005bca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	695a      	ldr	r2, [r3, #20]
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d902      	bls.n	8005b0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	3303      	adds	r3, #3
 8005b10:	089b      	lsrs	r3, r3, #2
 8005b12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b14:	e02b      	b.n	8005b6e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d902      	bls.n	8005b32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	3303      	adds	r3, #3
 8005b36:	089b      	lsrs	r3, r3, #2
 8005b38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	68d9      	ldr	r1, [r3, #12]
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	4603      	mov	r3, r0
 8005b50:	6978      	ldr	r0, [r7, #20]
 8005b52:	f004 fe70 	bl	800a836 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	441a      	add	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	441a      	add	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d809      	bhi.n	8005b98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	699a      	ldr	r2, [r3, #24]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d203      	bcs.n	8005b98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1be      	bne.n	8005b16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d811      	bhi.n	8005bc8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	2201      	movs	r2, #1
 8005bac:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	6939      	ldr	r1, [r7, #16]
 8005bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	333c      	adds	r3, #60	; 0x3c
 8005bec:	3304      	adds	r3, #4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	015a      	lsls	r2, r3, #5
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	f040 80b3 	bne.w	8005d72 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d028      	beq.n	8005c68 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	4a70      	ldr	r2, [pc, #448]	; (8005ddc <PCD_EP_OutXfrComplete_int+0x208>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d90e      	bls.n	8005c3c <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d009      	beq.n	8005c3c <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	015a      	lsls	r2, r3, #5
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	4413      	add	r3, r2
 8005c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c34:	461a      	mov	r2, r3
 8005c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c3a:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f007 f9c3 	bl	800cfc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6818      	ldr	r0, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	2101      	movs	r1, #1
 8005c50:	f005 f850 	bl	800acf4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c60:	461a      	mov	r2, r3
 8005c62:	2308      	movs	r3, #8
 8005c64:	6093      	str	r3, [r2, #8]
 8005c66:	e0b3      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d009      	beq.n	8005c86 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2320      	movs	r3, #32
 8005c82:	6093      	str	r3, [r2, #8]
 8005c84:	e0a4      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f040 809f 	bne.w	8005dd0 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	4a51      	ldr	r2, [pc, #324]	; (8005ddc <PCD_EP_OutXfrComplete_int+0x208>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d90f      	bls.n	8005cba <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00a      	beq.n	8005cba <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cb6:	6093      	str	r3, [r2, #8]
 8005cb8:	e08a      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	683a      	ldr	r2, [r7, #0]
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	1a9b      	subs	r3, r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005ccc:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	0159      	lsls	r1, r3, #5
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	440b      	add	r3, r1
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005ce0:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	00db      	lsls	r3, r3, #3
 8005cea:	1a9b      	subs	r3, r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4403      	add	r3, r0
 8005cf0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005cf4:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005cf6:	6879      	ldr	r1, [r7, #4]
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	00db      	lsls	r3, r3, #3
 8005cfe:	1a9b      	subs	r3, r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	440b      	add	r3, r1
 8005d04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d08:	6819      	ldr	r1, [r3, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	1a9b      	subs	r3, r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4403      	add	r3, r0
 8005d18:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4419      	add	r1, r3
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	1a9b      	subs	r3, r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4403      	add	r3, r0
 8005d2e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005d32:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	4619      	mov	r1, r3
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f007 f956 	bl	800cfec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d144      	bne.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1fc>
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d138      	bne.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6818      	ldr	r0, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	f004 ffc2 	bl	800acf4 <USB_EP0_OutStart>
 8005d70:	e02e      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4a1a      	ldr	r2, [pc, #104]	; (8005de0 <PCD_EP_OutXfrComplete_int+0x20c>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d124      	bne.n	8005dc4 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d00a      	beq.n	8005d9a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d90:	461a      	mov	r2, r3
 8005d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d96:	6093      	str	r3, [r2, #8]
 8005d98:	e01a      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005db0:	461a      	mov	r2, r3
 8005db2:	2320      	movs	r3, #32
 8005db4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	4619      	mov	r1, r3
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f007 f915 	bl	800cfec <HAL_PCD_DataOutStageCallback>
 8005dc2:	e005      	b.n	8005dd0 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f007 f90e 	bl	800cfec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	4f54300a 	.word	0x4f54300a
 8005de0:	4f54310a 	.word	0x4f54310a

08005de4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	333c      	adds	r3, #60	; 0x3c
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d113      	bne.n	8005e42 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4a1f      	ldr	r2, [pc, #124]	; (8005e9c <PCD_EP_OutSetupPacket_int+0xb8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d922      	bls.n	8005e68 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01d      	beq.n	8005e68 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e3e:	6093      	str	r3, [r2, #8]
 8005e40:	e012      	b.n	8005e68 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <PCD_EP_OutSetupPacket_int+0xbc>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d10e      	bne.n	8005e68 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	461a      	mov	r2, r3
 8005e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f007 f8ad 	bl	800cfc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <PCD_EP_OutSetupPacket_int+0xb8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d90c      	bls.n	8005e90 <PCD_EP_OutSetupPacket_int+0xac>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d108      	bne.n	8005e90 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6818      	ldr	r0, [r3, #0]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e88:	461a      	mov	r2, r3
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	f004 ff32 	bl	800acf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	4f54300a 	.word	0x4f54300a
 8005ea0:	4f54310a 	.word	0x4f54310a

08005ea4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	460b      	mov	r3, r1
 8005eae:	70fb      	strb	r3, [r7, #3]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ebc:	78fb      	ldrb	r3, [r7, #3]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d107      	bne.n	8005ed2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ec2:	883b      	ldrh	r3, [r7, #0]
 8005ec4:	0419      	lsls	r1, r3, #16
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28
 8005ed0:	e028      	b.n	8005f24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	0c1b      	lsrs	r3, r3, #16
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4413      	add	r3, r2
 8005ede:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]
 8005ee4:	e00d      	b.n	8005f02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	3340      	adds	r3, #64	; 0x40
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	0c1b      	lsrs	r3, r3, #16
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4413      	add	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	3301      	adds	r3, #1
 8005f00:	73fb      	strb	r3, [r7, #15]
 8005f02:	7bfa      	ldrb	r2, [r7, #15]
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	3b01      	subs	r3, #1
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d3ec      	bcc.n	8005ee6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f0c:	883b      	ldrh	r3, [r7, #0]
 8005f0e:	0418      	lsls	r0, r3, #16
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	78fb      	ldrb	r3, [r7, #3]
 8005f16:	3b01      	subs	r3, #1
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	4302      	orrs	r2, r0
 8005f1c:	3340      	adds	r3, #64	; 0x40
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3714      	adds	r7, #20
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	887a      	ldrh	r2, [r7, #2]
 8005f44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d101      	bne.n	8005f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e25b      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d075      	beq.n	8006076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f8a:	4ba3      	ldr	r3, [pc, #652]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 030c 	and.w	r3, r3, #12
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d00c      	beq.n	8005fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f96:	4ba0      	ldr	r3, [pc, #640]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	689b      	ldr	r3, [r3, #8]
 8005f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d112      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fa2:	4b9d      	ldr	r3, [pc, #628]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fae:	d10b      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fb0:	4b99      	ldr	r3, [pc, #612]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d05b      	beq.n	8006074 <HAL_RCC_OscConfig+0x108>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d157      	bne.n	8006074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e236      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fd0:	d106      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x74>
 8005fd2:	4b91      	ldr	r3, [pc, #580]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a90      	ldr	r2, [pc, #576]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	e01d      	b.n	800601c <HAL_RCC_OscConfig+0xb0>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005fe8:	d10c      	bne.n	8006004 <HAL_RCC_OscConfig+0x98>
 8005fea:	4b8b      	ldr	r3, [pc, #556]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a8a      	ldr	r2, [pc, #552]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	4b88      	ldr	r3, [pc, #544]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a87      	ldr	r2, [pc, #540]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8005ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006000:	6013      	str	r3, [r2, #0]
 8006002:	e00b      	b.n	800601c <HAL_RCC_OscConfig+0xb0>
 8006004:	4b84      	ldr	r3, [pc, #528]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a83      	ldr	r2, [pc, #524]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 800600a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800600e:	6013      	str	r3, [r2, #0]
 8006010:	4b81      	ldr	r3, [pc, #516]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a80      	ldr	r2, [pc, #512]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800601a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d013      	beq.n	800604c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006024:	f7fc ff8e 	bl	8002f44 <HAL_GetTick>
 8006028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800602a:	e008      	b.n	800603e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800602c:	f7fc ff8a 	bl	8002f44 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2b64      	cmp	r3, #100	; 0x64
 8006038:	d901      	bls.n	800603e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e1fb      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800603e:	4b76      	ldr	r3, [pc, #472]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0f0      	beq.n	800602c <HAL_RCC_OscConfig+0xc0>
 800604a:	e014      	b.n	8006076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604c:	f7fc ff7a 	bl	8002f44 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006054:	f7fc ff76 	bl	8002f44 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b64      	cmp	r3, #100	; 0x64
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e1e7      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006066:	4b6c      	ldr	r3, [pc, #432]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f0      	bne.n	8006054 <HAL_RCC_OscConfig+0xe8>
 8006072:	e000      	b.n	8006076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d063      	beq.n	800614a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006082:	4b65      	ldr	r3, [pc, #404]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 030c 	and.w	r3, r3, #12
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800608e:	4b62      	ldr	r3, [pc, #392]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006096:	2b08      	cmp	r3, #8
 8006098:	d11c      	bne.n	80060d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800609a:	4b5f      	ldr	r3, [pc, #380]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d116      	bne.n	80060d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060a6:	4b5c      	ldr	r3, [pc, #368]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d005      	beq.n	80060be <HAL_RCC_OscConfig+0x152>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d001      	beq.n	80060be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e1bb      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060be:	4b56      	ldr	r3, [pc, #344]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4952      	ldr	r1, [pc, #328]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060d2:	e03a      	b.n	800614a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d020      	beq.n	800611e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80060dc:	4b4f      	ldr	r3, [pc, #316]	; (800621c <HAL_RCC_OscConfig+0x2b0>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060e2:	f7fc ff2f 	bl	8002f44 <HAL_GetTick>
 80060e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060e8:	e008      	b.n	80060fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80060ea:	f7fc ff2b 	bl	8002f44 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e19c      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060fc:	4b46      	ldr	r3, [pc, #280]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006108:	4b43      	ldr	r3, [pc, #268]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	00db      	lsls	r3, r3, #3
 8006116:	4940      	ldr	r1, [pc, #256]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006118:	4313      	orrs	r3, r2
 800611a:	600b      	str	r3, [r1, #0]
 800611c:	e015      	b.n	800614a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800611e:	4b3f      	ldr	r3, [pc, #252]	; (800621c <HAL_RCC_OscConfig+0x2b0>)
 8006120:	2200      	movs	r2, #0
 8006122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006124:	f7fc ff0e 	bl	8002f44 <HAL_GetTick>
 8006128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800612a:	e008      	b.n	800613e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800612c:	f7fc ff0a 	bl	8002f44 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e17b      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800613e:	4b36      	ldr	r3, [pc, #216]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1f0      	bne.n	800612c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d030      	beq.n	80061b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d016      	beq.n	800618c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800615e:	4b30      	ldr	r3, [pc, #192]	; (8006220 <HAL_RCC_OscConfig+0x2b4>)
 8006160:	2201      	movs	r2, #1
 8006162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006164:	f7fc feee 	bl	8002f44 <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800616c:	f7fc feea 	bl	8002f44 <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e15b      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800617e:	4b26      	ldr	r3, [pc, #152]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 8006180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006182:	f003 0302 	and.w	r3, r3, #2
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0f0      	beq.n	800616c <HAL_RCC_OscConfig+0x200>
 800618a:	e015      	b.n	80061b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800618c:	4b24      	ldr	r3, [pc, #144]	; (8006220 <HAL_RCC_OscConfig+0x2b4>)
 800618e:	2200      	movs	r2, #0
 8006190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006192:	f7fc fed7 	bl	8002f44 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006198:	e008      	b.n	80061ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800619a:	f7fc fed3 	bl	8002f44 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e144      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061ac:	4b1a      	ldr	r3, [pc, #104]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 80061ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1f0      	bne.n	800619a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	f000 80a0 	beq.w	8006306 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061ca:	4b13      	ldr	r3, [pc, #76]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10f      	bne.n	80061f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	4b0f      	ldr	r3, [pc, #60]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	4a0e      	ldr	r2, [pc, #56]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 80061e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061e4:	6413      	str	r3, [r2, #64]	; 0x40
 80061e6:	4b0c      	ldr	r3, [pc, #48]	; (8006218 <HAL_RCC_OscConfig+0x2ac>)
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061ee:	60bb      	str	r3, [r7, #8]
 80061f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061f2:	2301      	movs	r3, #1
 80061f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061f6:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <HAL_RCC_OscConfig+0x2b8>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d121      	bne.n	8006246 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006202:	4b08      	ldr	r3, [pc, #32]	; (8006224 <HAL_RCC_OscConfig+0x2b8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <HAL_RCC_OscConfig+0x2b8>)
 8006208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800620c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800620e:	f7fc fe99 	bl	8002f44 <HAL_GetTick>
 8006212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006214:	e011      	b.n	800623a <HAL_RCC_OscConfig+0x2ce>
 8006216:	bf00      	nop
 8006218:	40023800 	.word	0x40023800
 800621c:	42470000 	.word	0x42470000
 8006220:	42470e80 	.word	0x42470e80
 8006224:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006228:	f7fc fe8c 	bl	8002f44 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e0fd      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623a:	4b81      	ldr	r3, [pc, #516]	; (8006440 <HAL_RCC_OscConfig+0x4d4>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b01      	cmp	r3, #1
 800624c:	d106      	bne.n	800625c <HAL_RCC_OscConfig+0x2f0>
 800624e:	4b7d      	ldr	r3, [pc, #500]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006252:	4a7c      	ldr	r2, [pc, #496]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	6713      	str	r3, [r2, #112]	; 0x70
 800625a:	e01c      	b.n	8006296 <HAL_RCC_OscConfig+0x32a>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b05      	cmp	r3, #5
 8006262:	d10c      	bne.n	800627e <HAL_RCC_OscConfig+0x312>
 8006264:	4b77      	ldr	r3, [pc, #476]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006268:	4a76      	ldr	r2, [pc, #472]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 800626a:	f043 0304 	orr.w	r3, r3, #4
 800626e:	6713      	str	r3, [r2, #112]	; 0x70
 8006270:	4b74      	ldr	r3, [pc, #464]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006274:	4a73      	ldr	r2, [pc, #460]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006276:	f043 0301 	orr.w	r3, r3, #1
 800627a:	6713      	str	r3, [r2, #112]	; 0x70
 800627c:	e00b      	b.n	8006296 <HAL_RCC_OscConfig+0x32a>
 800627e:	4b71      	ldr	r3, [pc, #452]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006282:	4a70      	ldr	r2, [pc, #448]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006284:	f023 0301 	bic.w	r3, r3, #1
 8006288:	6713      	str	r3, [r2, #112]	; 0x70
 800628a:	4b6e      	ldr	r3, [pc, #440]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 800628c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800628e:	4a6d      	ldr	r2, [pc, #436]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006290:	f023 0304 	bic.w	r3, r3, #4
 8006294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d015      	beq.n	80062ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800629e:	f7fc fe51 	bl	8002f44 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062a4:	e00a      	b.n	80062bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a6:	f7fc fe4d 	bl	8002f44 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e0bc      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062bc:	4b61      	ldr	r3, [pc, #388]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 80062be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c0:	f003 0302 	and.w	r3, r3, #2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0ee      	beq.n	80062a6 <HAL_RCC_OscConfig+0x33a>
 80062c8:	e014      	b.n	80062f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ca:	f7fc fe3b 	bl	8002f44 <HAL_GetTick>
 80062ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062d0:	e00a      	b.n	80062e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d2:	f7fc fe37 	bl	8002f44 <HAL_GetTick>
 80062d6:	4602      	mov	r2, r0
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e0a6      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062e8:	4b56      	ldr	r3, [pc, #344]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 80062ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1ee      	bne.n	80062d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d105      	bne.n	8006306 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062fa:	4b52      	ldr	r3, [pc, #328]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 80062fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fe:	4a51      	ldr	r2, [pc, #324]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006304:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 8092 	beq.w	8006434 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006310:	4b4c      	ldr	r3, [pc, #304]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 030c 	and.w	r3, r3, #12
 8006318:	2b08      	cmp	r3, #8
 800631a:	d05c      	beq.n	80063d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	699b      	ldr	r3, [r3, #24]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d141      	bne.n	80063a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006324:	4b48      	ldr	r3, [pc, #288]	; (8006448 <HAL_RCC_OscConfig+0x4dc>)
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800632a:	f7fc fe0b 	bl	8002f44 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006332:	f7fc fe07 	bl	8002f44 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e078      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006344:	4b3f      	ldr	r3, [pc, #252]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f0      	bne.n	8006332 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	69da      	ldr	r2, [r3, #28]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635e:	019b      	lsls	r3, r3, #6
 8006360:	431a      	orrs	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	085b      	lsrs	r3, r3, #1
 8006368:	3b01      	subs	r3, #1
 800636a:	041b      	lsls	r3, r3, #16
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006372:	061b      	lsls	r3, r3, #24
 8006374:	4933      	ldr	r1, [pc, #204]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 8006376:	4313      	orrs	r3, r2
 8006378:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800637a:	4b33      	ldr	r3, [pc, #204]	; (8006448 <HAL_RCC_OscConfig+0x4dc>)
 800637c:	2201      	movs	r2, #1
 800637e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006380:	f7fc fde0 	bl	8002f44 <HAL_GetTick>
 8006384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006386:	e008      	b.n	800639a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006388:	f7fc fddc 	bl	8002f44 <HAL_GetTick>
 800638c:	4602      	mov	r2, r0
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	1ad3      	subs	r3, r2, r3
 8006392:	2b02      	cmp	r3, #2
 8006394:	d901      	bls.n	800639a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e04d      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800639a:	4b2a      	ldr	r3, [pc, #168]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0f0      	beq.n	8006388 <HAL_RCC_OscConfig+0x41c>
 80063a6:	e045      	b.n	8006434 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a8:	4b27      	ldr	r3, [pc, #156]	; (8006448 <HAL_RCC_OscConfig+0x4dc>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ae:	f7fc fdc9 	bl	8002f44 <HAL_GetTick>
 80063b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b4:	e008      	b.n	80063c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b6:	f7fc fdc5 	bl	8002f44 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e036      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c8:	4b1e      	ldr	r3, [pc, #120]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1f0      	bne.n	80063b6 <HAL_RCC_OscConfig+0x44a>
 80063d4:	e02e      	b.n	8006434 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e029      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063e2:	4b18      	ldr	r3, [pc, #96]	; (8006444 <HAL_RCC_OscConfig+0x4d8>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d11c      	bne.n	8006430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006400:	429a      	cmp	r2, r3
 8006402:	d115      	bne.n	8006430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800640a:	4013      	ands	r3, r2
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006410:	4293      	cmp	r3, r2
 8006412:	d10d      	bne.n	8006430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800641e:	429a      	cmp	r2, r3
 8006420:	d106      	bne.n	8006430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e000      	b.n	8006436 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40007000 	.word	0x40007000
 8006444:	40023800 	.word	0x40023800
 8006448:	42470060 	.word	0x42470060

0800644c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d101      	bne.n	8006460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	e0cc      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006460:	4b68      	ldr	r3, [pc, #416]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 030f 	and.w	r3, r3, #15
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d90c      	bls.n	8006488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800646e:	4b65      	ldr	r3, [pc, #404]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006476:	4b63      	ldr	r3, [pc, #396]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	429a      	cmp	r2, r3
 8006482:	d001      	beq.n	8006488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e0b8      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f003 0302 	and.w	r3, r3, #2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d020      	beq.n	80064d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0304 	and.w	r3, r3, #4
 800649c:	2b00      	cmp	r3, #0
 800649e:	d005      	beq.n	80064ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064a0:	4b59      	ldr	r3, [pc, #356]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	4a58      	ldr	r2, [pc, #352]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80064b8:	4b53      	ldr	r3, [pc, #332]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	4a52      	ldr	r2, [pc, #328]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80064c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064c4:	4b50      	ldr	r3, [pc, #320]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	494d      	ldr	r1, [pc, #308]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064d2:	4313      	orrs	r3, r2
 80064d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d044      	beq.n	800656c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d107      	bne.n	80064fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064ea:	4b47      	ldr	r3, [pc, #284]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d119      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e07f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d003      	beq.n	800650a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006506:	2b03      	cmp	r3, #3
 8006508:	d107      	bne.n	800651a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650a:	4b3f      	ldr	r3, [pc, #252]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d109      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e06f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651a:	4b3b      	ldr	r3, [pc, #236]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e067      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800652a:	4b37      	ldr	r3, [pc, #220]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f023 0203 	bic.w	r2, r3, #3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	4934      	ldr	r1, [pc, #208]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	4313      	orrs	r3, r2
 800653a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800653c:	f7fc fd02 	bl	8002f44 <HAL_GetTick>
 8006540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006542:	e00a      	b.n	800655a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006544:	f7fc fcfe 	bl	8002f44 <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006552:	4293      	cmp	r3, r2
 8006554:	d901      	bls.n	800655a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006556:	2303      	movs	r3, #3
 8006558:	e04f      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800655a:	4b2b      	ldr	r3, [pc, #172]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 020c 	and.w	r2, r3, #12
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	429a      	cmp	r2, r3
 800656a:	d1eb      	bne.n	8006544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800656c:	4b25      	ldr	r3, [pc, #148]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	d20c      	bcs.n	8006594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800657a:	4b22      	ldr	r3, [pc, #136]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006582:	4b20      	ldr	r3, [pc, #128]	; (8006604 <HAL_RCC_ClockConfig+0x1b8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	429a      	cmp	r2, r3
 800658e:	d001      	beq.n	8006594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e032      	b.n	80065fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d008      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065a0:	4b19      	ldr	r3, [pc, #100]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4916      	ldr	r1, [pc, #88]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d009      	beq.n	80065d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065be:	4b12      	ldr	r3, [pc, #72]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	490e      	ldr	r1, [pc, #56]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065d2:	f000 f821 	bl	8006618 <HAL_RCC_GetSysClockFreq>
 80065d6:	4601      	mov	r1, r0
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	091b      	lsrs	r3, r3, #4
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	4a0a      	ldr	r2, [pc, #40]	; (800660c <HAL_RCC_ClockConfig+0x1c0>)
 80065e4:	5cd3      	ldrb	r3, [r2, r3]
 80065e6:	fa21 f303 	lsr.w	r3, r1, r3
 80065ea:	4a09      	ldr	r2, [pc, #36]	; (8006610 <HAL_RCC_ClockConfig+0x1c4>)
 80065ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80065ee:	4b09      	ldr	r3, [pc, #36]	; (8006614 <HAL_RCC_ClockConfig+0x1c8>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fc fc62 	bl	8002ebc <HAL_InitTick>

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	40023c00 	.word	0x40023c00
 8006608:	40023800 	.word	0x40023800
 800660c:	08011a7c 	.word	0x08011a7c
 8006610:	20000014 	.word	0x20000014
 8006614:	20000018 	.word	0x20000018

08006618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	607b      	str	r3, [r7, #4]
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	2300      	movs	r3, #0
 8006628:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800662e:	4b50      	ldr	r3, [pc, #320]	; (8006770 <HAL_RCC_GetSysClockFreq+0x158>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	2b04      	cmp	r3, #4
 8006638:	d007      	beq.n	800664a <HAL_RCC_GetSysClockFreq+0x32>
 800663a:	2b08      	cmp	r3, #8
 800663c:	d008      	beq.n	8006650 <HAL_RCC_GetSysClockFreq+0x38>
 800663e:	2b00      	cmp	r3, #0
 8006640:	f040 808d 	bne.w	800675e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006644:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006646:	60bb      	str	r3, [r7, #8]
       break;
 8006648:	e08c      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800664a:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <HAL_RCC_GetSysClockFreq+0x160>)
 800664c:	60bb      	str	r3, [r7, #8]
      break;
 800664e:	e089      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006650:	4b47      	ldr	r3, [pc, #284]	; (8006770 <HAL_RCC_GetSysClockFreq+0x158>)
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006658:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800665a:	4b45      	ldr	r3, [pc, #276]	; (8006770 <HAL_RCC_GetSysClockFreq+0x158>)
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d023      	beq.n	80066ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006666:	4b42      	ldr	r3, [pc, #264]	; (8006770 <HAL_RCC_GetSysClockFreq+0x158>)
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	099b      	lsrs	r3, r3, #6
 800666c:	f04f 0400 	mov.w	r4, #0
 8006670:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	ea03 0501 	and.w	r5, r3, r1
 800667c:	ea04 0602 	and.w	r6, r4, r2
 8006680:	4a3d      	ldr	r2, [pc, #244]	; (8006778 <HAL_RCC_GetSysClockFreq+0x160>)
 8006682:	fb02 f106 	mul.w	r1, r2, r6
 8006686:	2200      	movs	r2, #0
 8006688:	fb02 f205 	mul.w	r2, r2, r5
 800668c:	440a      	add	r2, r1
 800668e:	493a      	ldr	r1, [pc, #232]	; (8006778 <HAL_RCC_GetSysClockFreq+0x160>)
 8006690:	fba5 0101 	umull	r0, r1, r5, r1
 8006694:	1853      	adds	r3, r2, r1
 8006696:	4619      	mov	r1, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f04f 0400 	mov.w	r4, #0
 800669e:	461a      	mov	r2, r3
 80066a0:	4623      	mov	r3, r4
 80066a2:	f7fa fb41 	bl	8000d28 <__aeabi_uldivmod>
 80066a6:	4603      	mov	r3, r0
 80066a8:	460c      	mov	r4, r1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	e049      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ae:	4b30      	ldr	r3, [pc, #192]	; (8006770 <HAL_RCC_GetSysClockFreq+0x158>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	099b      	lsrs	r3, r3, #6
 80066b4:	f04f 0400 	mov.w	r4, #0
 80066b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	ea03 0501 	and.w	r5, r3, r1
 80066c4:	ea04 0602 	and.w	r6, r4, r2
 80066c8:	4629      	mov	r1, r5
 80066ca:	4632      	mov	r2, r6
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	f04f 0400 	mov.w	r4, #0
 80066d4:	0154      	lsls	r4, r2, #5
 80066d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80066da:	014b      	lsls	r3, r1, #5
 80066dc:	4619      	mov	r1, r3
 80066de:	4622      	mov	r2, r4
 80066e0:	1b49      	subs	r1, r1, r5
 80066e2:	eb62 0206 	sbc.w	r2, r2, r6
 80066e6:	f04f 0300 	mov.w	r3, #0
 80066ea:	f04f 0400 	mov.w	r4, #0
 80066ee:	0194      	lsls	r4, r2, #6
 80066f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80066f4:	018b      	lsls	r3, r1, #6
 80066f6:	1a5b      	subs	r3, r3, r1
 80066f8:	eb64 0402 	sbc.w	r4, r4, r2
 80066fc:	f04f 0100 	mov.w	r1, #0
 8006700:	f04f 0200 	mov.w	r2, #0
 8006704:	00e2      	lsls	r2, r4, #3
 8006706:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800670a:	00d9      	lsls	r1, r3, #3
 800670c:	460b      	mov	r3, r1
 800670e:	4614      	mov	r4, r2
 8006710:	195b      	adds	r3, r3, r5
 8006712:	eb44 0406 	adc.w	r4, r4, r6
 8006716:	f04f 0100 	mov.w	r1, #0
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	02a2      	lsls	r2, r4, #10
 8006720:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8006724:	0299      	lsls	r1, r3, #10
 8006726:	460b      	mov	r3, r1
 8006728:	4614      	mov	r4, r2
 800672a:	4618      	mov	r0, r3
 800672c:	4621      	mov	r1, r4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f04f 0400 	mov.w	r4, #0
 8006734:	461a      	mov	r2, r3
 8006736:	4623      	mov	r3, r4
 8006738:	f7fa faf6 	bl	8000d28 <__aeabi_uldivmod>
 800673c:	4603      	mov	r3, r0
 800673e:	460c      	mov	r4, r1
 8006740:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006742:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <HAL_RCC_GetSysClockFreq+0x158>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	0c1b      	lsrs	r3, r3, #16
 8006748:	f003 0303 	and.w	r3, r3, #3
 800674c:	3301      	adds	r3, #1
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	fbb2 f3f3 	udiv	r3, r2, r3
 800675a:	60bb      	str	r3, [r7, #8]
      break;
 800675c:	e002      	b.n	8006764 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800675e:	4b05      	ldr	r3, [pc, #20]	; (8006774 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006760:	60bb      	str	r3, [r7, #8]
      break;
 8006762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006764:	68bb      	ldr	r3, [r7, #8]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800676e:	bf00      	nop
 8006770:	40023800 	.word	0x40023800
 8006774:	00f42400 	.word	0x00f42400
 8006778:	00b71b00 	.word	0x00b71b00

0800677c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006780:	4b03      	ldr	r3, [pc, #12]	; (8006790 <HAL_RCC_GetHCLKFreq+0x14>)
 8006782:	681b      	ldr	r3, [r3, #0]
}
 8006784:	4618      	mov	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000014 	.word	0x20000014

08006794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006798:	f7ff fff0 	bl	800677c <HAL_RCC_GetHCLKFreq>
 800679c:	4601      	mov	r1, r0
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	0a9b      	lsrs	r3, r3, #10
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	4a03      	ldr	r2, [pc, #12]	; (80067b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067aa:	5cd3      	ldrb	r3, [r2, r3]
 80067ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40023800 	.word	0x40023800
 80067b8:	08011a8c 	.word	0x08011a8c

080067bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80067c0:	f7ff ffdc 	bl	800677c <HAL_RCC_GetHCLKFreq>
 80067c4:	4601      	mov	r1, r0
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	0b5b      	lsrs	r3, r3, #13
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	4a03      	ldr	r2, [pc, #12]	; (80067e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067d2:	5cd3      	ldrb	r3, [r2, r3]
 80067d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80067d8:	4618      	mov	r0, r3
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40023800 	.word	0x40023800
 80067e0:	08011a8c 	.word	0x08011a8c

080067e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d101      	bne.n	80067f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e022      	b.n	800683c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d105      	bne.n	800680e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fc f86d 	bl	80028e8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2203      	movs	r2, #3
 8006812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f814 	bl	8006844 <HAL_SD_InitCard>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e00a      	b.n	800683c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3708      	adds	r7, #8
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006844:	b5b0      	push	{r4, r5, r7, lr}
 8006846:	b08e      	sub	sp, #56	; 0x38
 8006848:	af04      	add	r7, sp, #16
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800684c:	2300      	movs	r3, #0
 800684e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006850:	2300      	movs	r3, #0
 8006852:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006854:	2300      	movs	r3, #0
 8006856:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006858:	2300      	movs	r3, #0
 800685a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800685c:	2300      	movs	r3, #0
 800685e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006860:	2376      	movs	r3, #118	; 0x76
 8006862:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681d      	ldr	r5, [r3, #0]
 8006868:	466c      	mov	r4, sp
 800686a:	f107 0314 	add.w	r3, r7, #20
 800686e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006876:	f107 0308 	add.w	r3, r7, #8
 800687a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800687c:	4628      	mov	r0, r5
 800687e:	f002 fa8b 	bl	8008d98 <SDIO_Init>
 8006882:	4603      	mov	r3, r0
 8006884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800688c:	2b00      	cmp	r3, #0
 800688e:	d001      	beq.n	8006894 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e031      	b.n	80068f8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006894:	4b1a      	ldr	r3, [pc, #104]	; (8006900 <HAL_SD_InitCard+0xbc>)
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f002 fac3 	bl	8008e2a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80068a4:	4b16      	ldr	r3, [pc, #88]	; (8006900 <HAL_SD_InitCard+0xbc>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fffa 	bl	80078a4 <SD_PowerON>
 80068b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00b      	beq.n	80068d0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e013      	b.n	80068f8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 ff19 	bl	8007708 <SD_InitCard>
 80068d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00b      	beq.n	80068f6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	431a      	orrs	r2, r3
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3728      	adds	r7, #40	; 0x28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006900:	422580a0 	.word	0x422580a0

08006904 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08c      	sub	sp, #48	; 0x30
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d107      	bne.n	800692c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e0c9      	b.n	8006ac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	f040 80c2 	bne.w	8006abe <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	441a      	add	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694a:	429a      	cmp	r2, r3
 800694c:	d907      	bls.n	800695e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006952:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e0b0      	b.n	8006ac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2203      	movs	r2, #3
 8006962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2200      	movs	r2, #0
 800696c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	6812      	ldr	r2, [r2, #0]
 8006978:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800697c:	f043 0302 	orr.w	r3, r3, #2
 8006980:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	4a50      	ldr	r2, [pc, #320]	; (8006ac8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8006988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698e:	4a4f      	ldr	r2, [pc, #316]	; (8006acc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8006990:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	2200      	movs	r2, #0
 8006998:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3380      	adds	r3, #128	; 0x80
 80069a4:	4619      	mov	r1, r3
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	025b      	lsls	r3, r3, #9
 80069ac:	089b      	lsrs	r3, r3, #2
 80069ae:	f7fc fcb7 	bl	8003320 <HAL_DMA_Start_IT>
 80069b2:	4603      	mov	r3, r0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d017      	beq.n	80069e8 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80069c6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a40      	ldr	r2, [pc, #256]	; (8006ad0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e06b      	b.n	8006ac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80069e8:	4b3a      	ldr	r3, [pc, #232]	; (8006ad4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d002      	beq.n	80069fc <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	025b      	lsls	r3, r3, #9
 80069fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a04:	4618      	mov	r0, r3
 8006a06:	f002 faa3 	bl	8008f50 <SDMMC_CmdBlockLength>
 8006a0a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00f      	beq.n	8006a32 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a2e      	ldr	r2, [pc, #184]	; (8006ad0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006a18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a20:	431a      	orrs	r2, r3
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e046      	b.n	8006ac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006a32:	f04f 33ff 	mov.w	r3, #4294967295
 8006a36:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	025b      	lsls	r3, r3, #9
 8006a3c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006a3e:	2390      	movs	r3, #144	; 0x90
 8006a40:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006a42:	2302      	movs	r3, #2
 8006a44:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f107 0210 	add.w	r2, r7, #16
 8006a56:	4611      	mov	r1, r2
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f002 fa4d 	bl	8008ef8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d90a      	bls.n	8006a7a <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2282      	movs	r2, #130	; 0x82
 8006a68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a70:	4618      	mov	r0, r3
 8006a72:	f002 fab1 	bl	8008fd8 <SDMMC_CmdReadMultiBlock>
 8006a76:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a78:	e009      	b.n	8006a8e <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2281      	movs	r2, #129	; 0x81
 8006a7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a86:	4618      	mov	r0, r3
 8006a88:	f002 fa84 	bl	8008f94 <SDMMC_CmdReadSingleBlock>
 8006a8c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d012      	beq.n	8006aba <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a0d      	ldr	r2, [pc, #52]	; (8006ad0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006a9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e002      	b.n	8006ac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8006aba:	2300      	movs	r3, #0
 8006abc:	e000      	b.n	8006ac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8006abe:	2302      	movs	r3, #2
  }
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3730      	adds	r7, #48	; 0x30
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	08007517 	.word	0x08007517
 8006acc:	08007589 	.word	0x08007589
 8006ad0:	004005ff 	.word	0x004005ff
 8006ad4:	4225858c 	.word	0x4225858c

08006ad8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	; 0x30
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d107      	bne.n	8006b00 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006afc:	2301      	movs	r3, #1
 8006afe:	e0ce      	b.n	8006c9e <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 80c7 	bne.w	8006c9c <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006b14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	441a      	add	r2, r3
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d907      	bls.n	8006b32 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e0b5      	b.n	8006c9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2203      	movs	r2, #3
 8006b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	6812      	ldr	r2, [r2, #0]
 8006b4c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006b50:	f043 0302 	orr.w	r3, r3, #2
 8006b54:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b5a:	4a53      	ldr	r2, [pc, #332]	; (8006ca8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8006b5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b62:	4a52      	ldr	r2, [pc, #328]	; (8006cac <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8006b64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d002      	beq.n	8006b7c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b78:	025b      	lsls	r3, r3, #9
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b84:	4618      	mov	r0, r3
 8006b86:	f002 f9e3 	bl	8008f50 <SDMMC_CmdBlockLength>
 8006b8a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00f      	beq.n	8006bb2 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a46      	ldr	r2, [pc, #280]	; (8006cb0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006b98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e075      	b.n	8006c9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d90a      	bls.n	8006bce <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	22a0      	movs	r2, #160	; 0xa0
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f002 fa4b 	bl	8009060 <SDMMC_CmdWriteMultiBlock>
 8006bca:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006bcc:	e009      	b.n	8006be2 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2290      	movs	r2, #144	; 0x90
 8006bd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f002 fa1e 	bl	800901c <SDMMC_CmdWriteSingleBlock>
 8006be0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d012      	beq.n	8006c0e <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a30      	ldr	r2, [pc, #192]	; (8006cb0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006bee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e047      	b.n	8006c9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006c0e:	4b29      	ldr	r3, [pc, #164]	; (8006cb4 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006c18:	68b9      	ldr	r1, [r7, #8]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3380      	adds	r3, #128	; 0x80
 8006c20:	461a      	mov	r2, r3
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	025b      	lsls	r3, r3, #9
 8006c26:	089b      	lsrs	r3, r3, #2
 8006c28:	f7fc fb7a 	bl	8003320 <HAL_DMA_Start_IT>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d01c      	beq.n	8006c6c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	6812      	ldr	r2, [r2, #0]
 8006c3c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006c40:	f023 0302 	bic.w	r3, r3, #2
 8006c44:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a19      	ldr	r2, [pc, #100]	; (8006cb0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8006c4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e018      	b.n	8006c9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c70:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	025b      	lsls	r3, r3, #9
 8006c76:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c78:	2390      	movs	r3, #144	; 0x90
 8006c7a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c80:	2300      	movs	r3, #0
 8006c82:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006c84:	2301      	movs	r3, #1
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f107 0210 	add.w	r2, r7, #16
 8006c90:	4611      	mov	r1, r2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f002 f930 	bl	8008ef8 <SDIO_ConfigData>

      return HAL_OK;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e000      	b.n	8006c9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
  }
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3730      	adds	r7, #48	; 0x30
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	080074ed 	.word	0x080074ed
 8006cac:	08007589 	.word	0x08007589
 8006cb0:	004005ff 	.word	0x004005ff
 8006cb4:	4225858c 	.word	0x4225858c

08006cb8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d008      	beq.n	8006ce6 <HAL_SD_IRQHandler+0x2e>
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f003 0308 	and.w	r3, r3, #8
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 fff6 	bl	8007cd0 <SD_Read_IT>
 8006ce4:	e165      	b.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 808f 	beq.w	8006e14 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cfe:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006d0e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006d12:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d039      	beq.n	8006da2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d104      	bne.n	8006d42 <HAL_SD_IRQHandler+0x8a>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d011      	beq.n	8006d66 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f002 f9ac 	bl	80090a4 <SDMMC_CmdStopTransfer>
 8006d4c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d008      	beq.n	8006d66 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f943 	bl	8006fec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d104      	bne.n	8006d92 <HAL_SD_IRQHandler+0xda>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 0302 	and.w	r3, r3, #2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f920 	bl	8006fd8 <HAL_SD_RxCpltCallback>
 8006d98:	e10b      	b.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f912 	bl	8006fc4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006da0:	e107      	b.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f000 8102 	beq.w	8006fb2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f003 0320 	and.w	r3, r3, #32
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d011      	beq.n	8006ddc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f002 f971 	bl	80090a4 <SDMMC_CmdStopTransfer>
 8006dc2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d008      	beq.n	8006ddc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	431a      	orrs	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f908 	bl	8006fec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f040 80e5 	bne.w	8006fb2 <HAL_SD_IRQHandler+0x2fa>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 80df 	bne.w	8006fb2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f022 0208 	bic.w	r2, r2, #8
 8006e02:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 f8d9 	bl	8006fc4 <HAL_SD_TxCpltCallback>
}
 8006e12:	e0ce      	b.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d008      	beq.n	8006e34 <HAL_SD_IRQHandler+0x17c>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f003 0308 	and.w	r3, r3, #8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d003      	beq.n	8006e34 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 ffa0 	bl	8007d72 <SD_Write_IT>
 8006e32:	e0be      	b.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e3a:	f240 233a 	movw	r3, #570	; 0x23a
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80b6 	beq.w	8006fb2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4c:	f003 0302 	and.w	r3, r3, #2
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	f043 0202 	orr.w	r2, r3, #2
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	f043 0208 	orr.w	r2, r3, #8
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d005      	beq.n	8006e94 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8c:	f043 0220 	orr.w	r2, r3, #32
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	f043 0210 	orr.w	r2, r3, #16
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d005      	beq.n	8006ec8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	f043 0208 	orr.w	r2, r3, #8
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f240 723a 	movw	r2, #1850	; 0x73a
 8006ed0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ed8:	687a      	ldr	r2, [r7, #4]
 8006eda:	6812      	ldr	r2, [r2, #0]
 8006edc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006ee0:	f023 0302 	bic.w	r3, r3, #2
 8006ee4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f002 f8da 	bl	80090a4 <SDMMC_CmdStopTransfer>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	431a      	orrs	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f003 0308 	and.w	r3, r3, #8
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00a      	beq.n	8006f1c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f869 	bl	8006fec <HAL_SD_ErrorCallback>
}
 8006f1a:	e04a      	b.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d045      	beq.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f003 0310 	and.w	r3, r3, #16
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d104      	bne.n	8006f3a <HAL_SD_IRQHandler+0x282>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f003 0320 	and.w	r3, r3, #32
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d011      	beq.n	8006f5e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f3e:	4a1f      	ldr	r2, [pc, #124]	; (8006fbc <HAL_SD_IRQHandler+0x304>)
 8006f40:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7fc fa42 	bl	80033d0 <HAL_DMA_Abort_IT>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d02f      	beq.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fb68 	bl	800762c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f5c:	e029      	b.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d104      	bne.n	8006f72 <HAL_SD_IRQHandler+0x2ba>
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d011      	beq.n	8006f96 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	4a12      	ldr	r2, [pc, #72]	; (8006fc0 <HAL_SD_IRQHandler+0x308>)
 8006f78:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7fc fa26 	bl	80033d0 <HAL_DMA_Abort_IT>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d013      	beq.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 fb83 	bl	800769a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f94:	e00d      	b.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 f828 	bl	8007000 <HAL_SD_AbortCallback>
}
 8006fb0:	e7ff      	b.n	8006fb2 <HAL_SD_IRQHandler+0x2fa>
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	0800762d 	.word	0x0800762d
 8006fc0:	0800769b 	.word	0x0800769b

08006fc4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007022:	0f9b      	lsrs	r3, r3, #30
 8007024:	b2da      	uxtb	r2, r3
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800702e:	0e9b      	lsrs	r3, r3, #26
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f003 030f 	and.w	r3, r3, #15
 8007036:	b2da      	uxtb	r2, r3
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007040:	0e1b      	lsrs	r3, r3, #24
 8007042:	b2db      	uxtb	r3, r3
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	b2da      	uxtb	r2, r3
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007052:	0c1b      	lsrs	r3, r3, #16
 8007054:	b2da      	uxtb	r2, r3
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800705e:	0a1b      	lsrs	r3, r3, #8
 8007060:	b2da      	uxtb	r2, r3
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800706a:	b2da      	uxtb	r2, r3
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007074:	0d1b      	lsrs	r3, r3, #20
 8007076:	b29a      	uxth	r2, r3
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007080:	0c1b      	lsrs	r3, r3, #16
 8007082:	b2db      	uxtb	r3, r3
 8007084:	f003 030f 	and.w	r3, r3, #15
 8007088:	b2da      	uxtb	r2, r3
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007092:	0bdb      	lsrs	r3, r3, #15
 8007094:	b2db      	uxtb	r3, r3
 8007096:	f003 0301 	and.w	r3, r3, #1
 800709a:	b2da      	uxtb	r2, r3
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070a4:	0b9b      	lsrs	r3, r3, #14
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070b6:	0b5b      	lsrs	r3, r3, #13
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070c8:	0b1b      	lsrs	r3, r3, #12
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2200      	movs	r2, #0
 80070da:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d163      	bne.n	80071ac <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070e8:	009a      	lsls	r2, r3, #2
 80070ea:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070ee:	4013      	ands	r3, r2
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80070f4:	0f92      	lsrs	r2, r2, #30
 80070f6:	431a      	orrs	r2, r3
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007100:	0edb      	lsrs	r3, r3, #27
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f003 0307 	and.w	r3, r3, #7
 8007108:	b2da      	uxtb	r2, r3
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007112:	0e1b      	lsrs	r3, r3, #24
 8007114:	b2db      	uxtb	r3, r3
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	b2da      	uxtb	r2, r3
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007124:	0d5b      	lsrs	r3, r3, #21
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	b2da      	uxtb	r2, r3
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007136:	0c9b      	lsrs	r3, r3, #18
 8007138:	b2db      	uxtb	r3, r3
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	b2da      	uxtb	r2, r3
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007148:	0bdb      	lsrs	r3, r3, #15
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	b2da      	uxtb	r2, r3
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	7e1b      	ldrb	r3, [r3, #24]
 8007164:	b2db      	uxtb	r3, r3
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	3302      	adds	r3, #2
 800716c:	2201      	movs	r2, #1
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007176:	fb02 f203 	mul.w	r2, r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	7a1b      	ldrb	r3, [r3, #8]
 8007182:	b2db      	uxtb	r3, r3
 8007184:	f003 030f 	and.w	r3, r3, #15
 8007188:	2201      	movs	r2, #1
 800718a:	409a      	lsls	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007198:	0a52      	lsrs	r2, r2, #9
 800719a:	fb02 f203 	mul.w	r2, r2, r3
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071a8:	661a      	str	r2, [r3, #96]	; 0x60
 80071aa:	e031      	b.n	8007210 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d11d      	bne.n	80071f0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071c2:	0c1b      	lsrs	r3, r3, #16
 80071c4:	431a      	orrs	r2, r3
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	3301      	adds	r3, #1
 80071d0:	029a      	lsls	r2, r3, #10
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	661a      	str	r2, [r3, #96]	; 0x60
 80071ee:	e00f      	b.n	8007210 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a58      	ldr	r2, [pc, #352]	; (8007358 <HAL_SD_GetCardCSD+0x344>)
 80071f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e09d      	b.n	800734c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007214:	0b9b      	lsrs	r3, r3, #14
 8007216:	b2db      	uxtb	r3, r3
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	b2da      	uxtb	r2, r3
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007226:	09db      	lsrs	r3, r3, #7
 8007228:	b2db      	uxtb	r3, r3
 800722a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800722e:	b2da      	uxtb	r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007238:	b2db      	uxtb	r3, r3
 800723a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800723e:	b2da      	uxtb	r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007248:	0fdb      	lsrs	r3, r3, #31
 800724a:	b2da      	uxtb	r2, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007254:	0f5b      	lsrs	r3, r3, #29
 8007256:	b2db      	uxtb	r3, r3
 8007258:	f003 0303 	and.w	r3, r3, #3
 800725c:	b2da      	uxtb	r2, r3
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	0e9b      	lsrs	r3, r3, #26
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f003 0307 	and.w	r3, r3, #7
 800726e:	b2da      	uxtb	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007278:	0d9b      	lsrs	r3, r3, #22
 800727a:	b2db      	uxtb	r3, r3
 800727c:	f003 030f 	and.w	r3, r3, #15
 8007280:	b2da      	uxtb	r2, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728a:	0d5b      	lsrs	r3, r3, #21
 800728c:	b2db      	uxtb	r3, r3
 800728e:	f003 0301 	and.w	r3, r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a6:	0c1b      	lsrs	r3, r3, #16
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ba:	0bdb      	lsrs	r3, r3, #15
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	0b9b      	lsrs	r3, r3, #14
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	0b5b      	lsrs	r3, r3, #13
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	b2da      	uxtb	r2, r3
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f6:	0b1b      	lsrs	r3, r3, #12
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	f003 0301 	and.w	r3, r3, #1
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800730a:	0a9b      	lsrs	r3, r3, #10
 800730c:	b2db      	uxtb	r3, r3
 800730e:	f003 0303 	and.w	r3, r3, #3
 8007312:	b2da      	uxtb	r2, r3
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	b2da      	uxtb	r2, r3
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007332:	085b      	lsrs	r3, r3, #1
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800733a:	b2da      	uxtb	r2, r3
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800734a:	2300      	movs	r3, #0
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	004005ff 	.word	0x004005ff

0800735c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80073a6:	2300      	movs	r3, #0
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80073b4:	b5b0      	push	{r4, r5, r7, lr}
 80073b6:	b08e      	sub	sp, #56	; 0x38
 80073b8:	af04      	add	r7, sp, #16
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2203      	movs	r2, #3
 80073c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d02e      	beq.n	800742c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073d4:	d106      	bne.n	80073e4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	639a      	str	r2, [r3, #56]	; 0x38
 80073e2:	e029      	b.n	8007438 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073ea:	d10a      	bne.n	8007402 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 fb0f 	bl	8007a10 <SD_WideBus_Enable>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	431a      	orrs	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38
 8007400:	e01a      	b.n	8007438 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10a      	bne.n	800741e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fb4c 	bl	8007aa6 <SD_WideBus_Disable>
 800740e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	; 0x38
 800741c:	e00c      	b.n	8007438 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007422:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	639a      	str	r2, [r3, #56]	; 0x38
 800742a:	e005      	b.n	8007438 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007430:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743c:	2b00      	cmp	r3, #0
 800743e:	d009      	beq.n	8007454 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a18      	ldr	r2, [pc, #96]	; (80074a8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007446:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e024      	b.n	800749e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681d      	ldr	r5, [r3, #0]
 800747a:	466c      	mov	r4, sp
 800747c:	f107 0318 	add.w	r3, r7, #24
 8007480:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007484:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007488:	f107 030c 	add.w	r3, r7, #12
 800748c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800748e:	4628      	mov	r0, r5
 8007490:	f001 fc82 	bl	8008d98 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3728      	adds	r7, #40	; 0x28
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bdb0      	pop	{r4, r5, r7, pc}
 80074a6:	bf00      	nop
 80074a8:	004005ff 	.word	0x004005ff

080074ac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80074b8:	f107 030c 	add.w	r3, r7, #12
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fa7e 	bl	80079c0 <SD_SendStatus>
 80074c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	431a      	orrs	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	0a5b      	lsrs	r3, r3, #9
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80074e2:	693b      	ldr	r3, [r7, #16]
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007508:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800750a:	bf00      	nop
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007522:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007528:	2b82      	cmp	r3, #130	; 0x82
 800752a:	d111      	bne.n	8007550 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4618      	mov	r0, r3
 8007532:	f001 fdb7 	bl	80090a4 <SDMMC_CmdStopTransfer>
 8007536:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d008      	beq.n	8007550 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f7ff fd4e 	bl	8006fec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0208 	bic.w	r2, r2, #8
 800755e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f240 523a 	movw	r2, #1338	; 0x53a
 8007568:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2201      	movs	r2, #1
 800756e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2200      	movs	r2, #0
 8007576:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7ff fd2d 	bl	8006fd8 <HAL_SD_RxCpltCallback>
#endif
}
 800757e:	bf00      	nop
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
	...

08007588 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fc f8c6 	bl	8003728 <HAL_DMA_GetError>
 800759c:	4603      	mov	r3, r0
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d03e      	beq.n	8007620 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d002      	beq.n	80075be <SD_DMAError+0x36>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d12d      	bne.n	800761a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a19      	ldr	r2, [pc, #100]	; (8007628 <SD_DMAError+0xa0>)
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80075d4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80075e2:	6978      	ldr	r0, [r7, #20]
 80075e4:	f7ff ff62 	bl	80074ac <HAL_SD_GetCardState>
 80075e8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b06      	cmp	r3, #6
 80075ee:	d002      	beq.n	80075f6 <SD_DMAError+0x6e>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	2b05      	cmp	r3, #5
 80075f4:	d10a      	bne.n	800760c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075f6:	697b      	ldr	r3, [r7, #20]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 fd52 	bl	80090a4 <SDMMC_CmdStopTransfer>
 8007600:	4602      	mov	r2, r0
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007606:	431a      	orrs	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2200      	movs	r2, #0
 8007618:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800761a:	6978      	ldr	r0, [r7, #20]
 800761c:	f7ff fce6 	bl	8006fec <HAL_SD_ErrorCallback>
#endif
  }
}
 8007620:	bf00      	nop
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	004005ff 	.word	0x004005ff

0800762c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007638:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007642:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff ff31 	bl	80074ac <HAL_SD_GetCardState>
 800764a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b06      	cmp	r3, #6
 800765e:	d002      	beq.n	8007666 <SD_DMATxAbort+0x3a>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2b05      	cmp	r3, #5
 8007664:	d10a      	bne.n	800767c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4618      	mov	r0, r3
 800766c:	f001 fd1a 	bl	80090a4 <SDMMC_CmdStopTransfer>
 8007670:	4602      	mov	r2, r0
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	431a      	orrs	r2, r3
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007680:	2b00      	cmp	r3, #0
 8007682:	d103      	bne.n	800768c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fcbb 	bl	8007000 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800768a:	e002      	b.n	8007692 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff fcad 	bl	8006fec <HAL_SD_ErrorCallback>
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f240 523a 	movw	r2, #1338	; 0x53a
 80076b0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f7ff fefa 	bl	80074ac <HAL_SD_GetCardState>
 80076b8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b06      	cmp	r3, #6
 80076cc:	d002      	beq.n	80076d4 <SD_DMARxAbort+0x3a>
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2b05      	cmp	r3, #5
 80076d2:	d10a      	bne.n	80076ea <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 fce3 	bl	80090a4 <SDMMC_CmdStopTransfer>
 80076de:	4602      	mov	r2, r0
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e4:	431a      	orrs	r2, r3
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f7ff fc84 	bl	8007000 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80076f8:	e002      	b.n	8007700 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f7ff fc76 	bl	8006fec <HAL_SD_ErrorCallback>
}
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007708:	b5b0      	push	{r4, r5, r7, lr}
 800770a:	b094      	sub	sp, #80	; 0x50
 800770c:	af04      	add	r7, sp, #16
 800770e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007710:	2301      	movs	r3, #1
 8007712:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f001 fb95 	bl	8008e48 <SDIO_GetPowerState>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d102      	bne.n	800772a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007724:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007728:	e0b7      	b.n	800789a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772e:	2b03      	cmp	r3, #3
 8007730:	d02f      	beq.n	8007792 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4618      	mov	r0, r3
 8007738:	f001 fdbe 	bl	80092b8 <SDMMC_CmdSendCID>
 800773c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800773e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007740:	2b00      	cmp	r3, #0
 8007742:	d001      	beq.n	8007748 <SD_InitCard+0x40>
    {
      return errorstate;
 8007744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007746:	e0a8      	b.n	800789a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2100      	movs	r1, #0
 800774e:	4618      	mov	r0, r3
 8007750:	f001 fbbf 	bl	8008ed2 <SDIO_GetResponse>
 8007754:	4602      	mov	r2, r0
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2104      	movs	r1, #4
 8007760:	4618      	mov	r0, r3
 8007762:	f001 fbb6 	bl	8008ed2 <SDIO_GetResponse>
 8007766:	4602      	mov	r2, r0
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2108      	movs	r1, #8
 8007772:	4618      	mov	r0, r3
 8007774:	f001 fbad 	bl	8008ed2 <SDIO_GetResponse>
 8007778:	4602      	mov	r2, r0
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	210c      	movs	r1, #12
 8007784:	4618      	mov	r0, r3
 8007786:	f001 fba4 	bl	8008ed2 <SDIO_GetResponse>
 800778a:	4602      	mov	r2, r0
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007796:	2b03      	cmp	r3, #3
 8007798:	d00d      	beq.n	80077b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f107 020e 	add.w	r2, r7, #14
 80077a2:	4611      	mov	r1, r2
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 fdc4 	bl	8009332 <SDMMC_CmdSetRelAdd>
 80077aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <SD_InitCard+0xae>
    {
      return errorstate;
 80077b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077b4:	e071      	b.n	800789a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d036      	beq.n	800782c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80077be:	89fb      	ldrh	r3, [r7, #14]
 80077c0:	461a      	mov	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ce:	041b      	lsls	r3, r3, #16
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f001 fd8e 	bl	80092f4 <SDMMC_CmdSendCSD>
 80077d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80077da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d001      	beq.n	80077e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80077e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e2:	e05a      	b.n	800789a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2100      	movs	r1, #0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f001 fb71 	bl	8008ed2 <SDIO_GetResponse>
 80077f0:	4602      	mov	r2, r0
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2104      	movs	r1, #4
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 fb68 	bl	8008ed2 <SDIO_GetResponse>
 8007802:	4602      	mov	r2, r0
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2108      	movs	r1, #8
 800780e:	4618      	mov	r0, r3
 8007810:	f001 fb5f 	bl	8008ed2 <SDIO_GetResponse>
 8007814:	4602      	mov	r2, r0
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	210c      	movs	r1, #12
 8007820:	4618      	mov	r0, r3
 8007822:	f001 fb56 	bl	8008ed2 <SDIO_GetResponse>
 8007826:	4602      	mov	r2, r0
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2104      	movs	r1, #4
 8007832:	4618      	mov	r0, r3
 8007834:	f001 fb4d 	bl	8008ed2 <SDIO_GetResponse>
 8007838:	4603      	mov	r3, r0
 800783a:	0d1a      	lsrs	r2, r3, #20
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007840:	f107 0310 	add.w	r3, r7, #16
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f7ff fbe4 	bl	8007014 <HAL_SD_GetCardCSD>
 800784c:	4603      	mov	r3, r0
 800784e:	2b00      	cmp	r3, #0
 8007850:	d002      	beq.n	8007858 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007852:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007856:	e020      	b.n	800789a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6819      	ldr	r1, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007860:	041b      	lsls	r3, r3, #16
 8007862:	f04f 0400 	mov.w	r4, #0
 8007866:	461a      	mov	r2, r3
 8007868:	4623      	mov	r3, r4
 800786a:	4608      	mov	r0, r1
 800786c:	f001 fc3c 	bl	80090e8 <SDMMC_CmdSelDesel>
 8007870:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d001      	beq.n	800787c <SD_InitCard+0x174>
  {
    return errorstate;
 8007878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800787a:	e00e      	b.n	800789a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681d      	ldr	r5, [r3, #0]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	466c      	mov	r4, sp
 8007884:	f103 0210 	add.w	r2, r3, #16
 8007888:	ca07      	ldmia	r2, {r0, r1, r2}
 800788a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800788e:	3304      	adds	r3, #4
 8007890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007892:	4628      	mov	r0, r5
 8007894:	f001 fa80 	bl	8008d98 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3740      	adds	r7, #64	; 0x40
 800789e:	46bd      	mov	sp, r7
 80078a0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080078a4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078ac:	2300      	movs	r3, #0
 80078ae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]
 80078b4:	2300      	movs	r3, #0
 80078b6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4618      	mov	r0, r3
 80078be:	f001 fc36 	bl	800912e <SDMMC_CmdGoIdleState>
 80078c2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <SD_PowerON+0x2a>
  {
    return errorstate;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	e072      	b.n	80079b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f001 fc49 	bl	800916a <SDMMC_CmdOperCond>
 80078d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00d      	beq.n	80078fc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f001 fc1f 	bl	800912e <SDMMC_CmdGoIdleState>
 80078f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d004      	beq.n	8007902 <SD_PowerON+0x5e>
    {
      return errorstate;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	e05b      	b.n	80079b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007906:	2b01      	cmp	r3, #1
 8007908:	d137      	bne.n	800797a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2100      	movs	r1, #0
 8007910:	4618      	mov	r0, r3
 8007912:	f001 fc49 	bl	80091a8 <SDMMC_CmdAppCommand>
 8007916:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d02d      	beq.n	800797a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800791e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007922:	e047      	b.n	80079b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2100      	movs	r1, #0
 800792a:	4618      	mov	r0, r3
 800792c:	f001 fc3c 	bl	80091a8 <SDMMC_CmdAppCommand>
 8007930:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d001      	beq.n	800793c <SD_PowerON+0x98>
    {
      return errorstate;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	e03b      	b.n	80079b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	491e      	ldr	r1, [pc, #120]	; (80079bc <SD_PowerON+0x118>)
 8007942:	4618      	mov	r0, r3
 8007944:	f001 fc52 	bl	80091ec <SDMMC_CmdAppOperCommand>
 8007948:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d002      	beq.n	8007956 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007950:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007954:	e02e      	b.n	80079b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2100      	movs	r1, #0
 800795c:	4618      	mov	r0, r3
 800795e:	f001 fab8 	bl	8008ed2 <SDIO_GetResponse>
 8007962:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	0fdb      	lsrs	r3, r3, #31
 8007968:	2b01      	cmp	r3, #1
 800796a:	d101      	bne.n	8007970 <SD_PowerON+0xcc>
 800796c:	2301      	movs	r3, #1
 800796e:	e000      	b.n	8007972 <SD_PowerON+0xce>
 8007970:	2300      	movs	r3, #0
 8007972:	613b      	str	r3, [r7, #16]

    count++;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	3301      	adds	r3, #1
 8007978:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007980:	4293      	cmp	r3, r2
 8007982:	d802      	bhi.n	800798a <SD_PowerON+0xe6>
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d0cc      	beq.n	8007924 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007990:	4293      	cmp	r3, r2
 8007992:	d902      	bls.n	800799a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007994:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007998:	e00c      	b.n	80079b4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	645a      	str	r2, [r3, #68]	; 0x44
 80079aa:	e002      	b.n	80079b2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	c1100000 	.word	0xc1100000

080079c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d102      	bne.n	80079d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80079d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079d4:	e018      	b.n	8007a08 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f001 fcc6 	bl	8009374 <SDMMC_CmdSendStatus>
 80079e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	e009      	b.n	8007a08 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f001 fa69 	bl	8008ed2 <SDIO_GetResponse>
 8007a00:	4602      	mov	r2, r0
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2100      	movs	r1, #0
 8007a26:	4618      	mov	r0, r3
 8007a28:	f001 fa53 	bl	8008ed2 <SDIO_GetResponse>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a36:	d102      	bne.n	8007a3e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a3c:	e02f      	b.n	8007a9e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a3e:	f107 030c 	add.w	r3, r7, #12
 8007a42:	4619      	mov	r1, r3
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f000 f879 	bl	8007b3c <SD_FindSCR>
 8007a4a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d001      	beq.n	8007a56 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	e023      	b.n	8007a9e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d01c      	beq.n	8007a9a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a68:	041b      	lsls	r3, r3, #16
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f001 fb9b 	bl	80091a8 <SDMMC_CmdAppCommand>
 8007a72:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	e00f      	b.n	8007a9e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2102      	movs	r1, #2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f001 fbd4 	bl	8009232 <SDMMC_CmdBusWidth>
 8007a8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	e003      	b.n	8007a9e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	e001      	b.n	8007a9e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b086      	sub	sp, #24
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2100      	movs	r1, #0
 8007abc:	4618      	mov	r0, r3
 8007abe:	f001 fa08 	bl	8008ed2 <SDIO_GetResponse>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007acc:	d102      	bne.n	8007ad4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007ace:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ad2:	e02f      	b.n	8007b34 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007ad4:	f107 030c 	add.w	r3, r7, #12
 8007ad8:	4619      	mov	r1, r3
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 f82e 	bl	8007b3c <SD_FindSCR>
 8007ae0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	e023      	b.n	8007b34 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d01c      	beq.n	8007b30 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	4619      	mov	r1, r3
 8007b02:	4610      	mov	r0, r2
 8007b04:	f001 fb50 	bl	80091a8 <SDMMC_CmdAppCommand>
 8007b08:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	e00f      	b.n	8007b34 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f001 fb89 	bl	8009232 <SDMMC_CmdBusWidth>
 8007b20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	e003      	b.n	8007b34 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e001      	b.n	8007b34 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b30:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3718      	adds	r7, #24
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007b3c:	b590      	push	{r4, r7, lr}
 8007b3e:	b08f      	sub	sp, #60	; 0x3c
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007b46:	f7fb f9fd 	bl	8002f44 <HAL_GetTick>
 8007b4a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007b50:	2300      	movs	r3, #0
 8007b52:	60bb      	str	r3, [r7, #8]
 8007b54:	2300      	movs	r3, #0
 8007b56:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2108      	movs	r1, #8
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 f9f4 	bl	8008f50 <SDMMC_CmdBlockLength>
 8007b68:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	e0a9      	b.n	8007cc8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7c:	041b      	lsls	r3, r3, #16
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4610      	mov	r0, r2
 8007b82:	f001 fb11 	bl	80091a8 <SDMMC_CmdAppCommand>
 8007b86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b90:	e09a      	b.n	8007cc8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295
 8007b96:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007b98:	2308      	movs	r3, #8
 8007b9a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007b9c:	2330      	movs	r3, #48	; 0x30
 8007b9e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f107 0210 	add.w	r2, r7, #16
 8007bb4:	4611      	mov	r1, r2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f001 f99e 	bl	8008ef8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 fb58 	bl	8009276 <SDMMC_CmdSendSCR>
 8007bc6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d022      	beq.n	8007c14 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	e07a      	b.n	8007cc8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00e      	beq.n	8007bfe <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6819      	ldr	r1, [r3, #0]
 8007be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	f107 0208 	add.w	r2, r7, #8
 8007bec:	18d4      	adds	r4, r2, r3
 8007bee:	4608      	mov	r0, r1
 8007bf0:	f001 f8fd 	bl	8008dee <SDIO_ReadFIFO>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	6023      	str	r3, [r4, #0]
      index++;
 8007bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007bfe:	f7fb f9a1 	bl	8002f44 <HAL_GetTick>
 8007c02:	4602      	mov	r2, r0
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	1ad3      	subs	r3, r2, r3
 8007c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0c:	d102      	bne.n	8007c14 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007c0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007c12:	e059      	b.n	8007cc8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c1a:	f240 432a 	movw	r3, #1066	; 0x42a
 8007c1e:	4013      	ands	r3, r2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0d6      	beq.n	8007bd2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d005      	beq.n	8007c3e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2208      	movs	r2, #8
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	e044      	b.n	8007cc8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c44:	f003 0302 	and.w	r3, r3, #2
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d005      	beq.n	8007c58 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2202      	movs	r2, #2
 8007c52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c54:	2302      	movs	r3, #2
 8007c56:	e037      	b.n	8007cc8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007c6e:	2320      	movs	r3, #32
 8007c70:	e02a      	b.n	8007cc8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c7a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	061a      	lsls	r2, r3, #24
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	021b      	lsls	r3, r3, #8
 8007c84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c88:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	0a1b      	lsrs	r3, r3, #8
 8007c8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c92:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	0e1b      	lsrs	r3, r3, #24
 8007c98:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	601a      	str	r2, [r3, #0]
    scr++;
 8007c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	061a      	lsls	r2, r3, #24
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	021b      	lsls	r3, r3, #8
 8007cac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007cb0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	0a1b      	lsrs	r3, r3, #8
 8007cb6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	0e1b      	lsrs	r3, r3, #24
 8007cc0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	373c      	adds	r7, #60	; 0x3c
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd90      	pop	{r4, r7, pc}

08007cd0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b086      	sub	sp, #24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cdc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d03f      	beq.n	8007d6a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007cea:	2300      	movs	r3, #0
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	e033      	b.n	8007d58 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f001 f87a 	bl	8008dee <SDIO_ReadFIFO>
 8007cfa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	0a1b      	lsrs	r3, r3, #8
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	0c1b      	lsrs	r3, r3, #16
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	0e1b      	lsrs	r3, r3, #24
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	3301      	adds	r3, #1
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2b07      	cmp	r3, #7
 8007d5c:	d9c8      	bls.n	8007cf0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	693a      	ldr	r2, [r7, #16]
 8007d68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007d6a:	bf00      	nop
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}

08007d72 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b086      	sub	sp, #24
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d043      	beq.n	8007e14 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e037      	b.n	8007e02 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	021a      	lsls	r2, r3, #8
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	3301      	adds	r3, #1
 8007db4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	041a      	lsls	r2, r3, #16
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	061a      	lsls	r2, r3, #24
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3301      	adds	r3, #1
 8007de4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f107 0208 	add.w	r2, r7, #8
 8007df4:	4611      	mov	r1, r2
 8007df6:	4618      	mov	r0, r3
 8007df8:	f001 f806 	bl	8008e08 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	617b      	str	r3, [r7, #20]
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	2b07      	cmp	r3, #7
 8007e06:	d9c4      	bls.n	8007d92 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007e14:	bf00      	nop
 8007e16:	3718      	adds	r7, #24
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e056      	b.n	8007edc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d106      	bne.n	8007e4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7fa fe4d 	bl	8002ae8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2202      	movs	r2, #2
 8007e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	695b      	ldr	r3, [r3, #20]
 8007e80:	431a      	orrs	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	ea42 0103 	orr.w	r1, r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	699b      	ldr	r3, [r3, #24]
 8007eaa:	0c1b      	lsrs	r3, r3, #16
 8007eac:	f003 0104 	and.w	r1, r3, #4
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	69da      	ldr	r2, [r3, #28]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b088      	sub	sp, #32
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	603b      	str	r3, [r7, #0]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d101      	bne.n	8007f06 <HAL_SPI_Transmit+0x22>
 8007f02:	2302      	movs	r3, #2
 8007f04:	e11e      	b.n	8008144 <HAL_SPI_Transmit+0x260>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f0e:	f7fb f819 	bl	8002f44 <HAL_GetTick>
 8007f12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f14:	88fb      	ldrh	r3, [r7, #6]
 8007f16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d002      	beq.n	8007f2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f24:	2302      	movs	r3, #2
 8007f26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f28:	e103      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d002      	beq.n	8007f36 <HAL_SPI_Transmit+0x52>
 8007f30:	88fb      	ldrh	r3, [r7, #6]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d102      	bne.n	8007f3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f3a:	e0fa      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2203      	movs	r2, #3
 8007f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2200      	movs	r2, #0
 8007f48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	68ba      	ldr	r2, [r7, #8]
 8007f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	88fa      	ldrh	r2, [r7, #6]
 8007f54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	88fa      	ldrh	r2, [r7, #6]
 8007f5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	2200      	movs	r2, #0
 8007f78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f82:	d107      	bne.n	8007f94 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b40      	cmp	r3, #64	; 0x40
 8007fa0:	d007      	beq.n	8007fb2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fba:	d14b      	bne.n	8008054 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d002      	beq.n	8007fca <HAL_SPI_Transmit+0xe6>
 8007fc4:	8afb      	ldrh	r3, [r7, #22]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d13e      	bne.n	8008048 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fce:	881a      	ldrh	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	1c9a      	adds	r2, r3, #2
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	b29a      	uxth	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fee:	e02b      	b.n	8008048 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 0302 	and.w	r3, r3, #2
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d112      	bne.n	8008024 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008002:	881a      	ldrh	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800800e:	1c9a      	adds	r2, r3, #2
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29a      	uxth	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	86da      	strh	r2, [r3, #54]	; 0x36
 8008022:	e011      	b.n	8008048 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008024:	f7fa ff8e 	bl	8002f44 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	429a      	cmp	r2, r3
 8008032:	d803      	bhi.n	800803c <HAL_SPI_Transmit+0x158>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800803a:	d102      	bne.n	8008042 <HAL_SPI_Transmit+0x15e>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008046:	e074      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1ce      	bne.n	8007ff0 <HAL_SPI_Transmit+0x10c>
 8008052:	e04c      	b.n	80080ee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <HAL_SPI_Transmit+0x17e>
 800805c:	8afb      	ldrh	r3, [r7, #22]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d140      	bne.n	80080e4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	330c      	adds	r3, #12
 800806c:	7812      	ldrb	r2, [r2, #0]
 800806e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008074:	1c5a      	adds	r2, r3, #1
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800807e:	b29b      	uxth	r3, r3
 8008080:	3b01      	subs	r3, #1
 8008082:	b29a      	uxth	r2, r3
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008088:	e02c      	b.n	80080e4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	689b      	ldr	r3, [r3, #8]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b02      	cmp	r3, #2
 8008096:	d113      	bne.n	80080c0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	330c      	adds	r3, #12
 80080a2:	7812      	ldrb	r2, [r2, #0]
 80080a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	3b01      	subs	r3, #1
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	86da      	strh	r2, [r3, #54]	; 0x36
 80080be:	e011      	b.n	80080e4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080c0:	f7fa ff40 	bl	8002f44 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	683a      	ldr	r2, [r7, #0]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d803      	bhi.n	80080d8 <HAL_SPI_Transmit+0x1f4>
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d6:	d102      	bne.n	80080de <HAL_SPI_Transmit+0x1fa>
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d102      	bne.n	80080e4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080e2:	e026      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1cd      	bne.n	800808a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fa44 	bl	8008580 <SPI_EndRxTxTransaction>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d002      	beq.n	8008104 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2220      	movs	r2, #32
 8008102:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800810c:	2300      	movs	r3, #0
 800810e:	613b      	str	r3, [r7, #16]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	613b      	str	r3, [r7, #16]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	613b      	str	r3, [r7, #16]
 8008120:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008126:	2b00      	cmp	r3, #0
 8008128:	d002      	beq.n	8008130 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	77fb      	strb	r3, [r7, #31]
 800812e:	e000      	b.n	8008132 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008130:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008142:	7ffb      	ldrb	r3, [r7, #31]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3720      	adds	r7, #32
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08c      	sub	sp, #48	; 0x30
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800815a:	2301      	movs	r3, #1
 800815c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_SPI_TransmitReceive+0x26>
 800816e:	2302      	movs	r3, #2
 8008170:	e18a      	b.n	8008488 <HAL_SPI_TransmitReceive+0x33c>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800817a:	f7fa fee3 	bl	8002f44 <HAL_GetTick>
 800817e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008190:	887b      	ldrh	r3, [r7, #2]
 8008192:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008194:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008198:	2b01      	cmp	r3, #1
 800819a:	d00f      	beq.n	80081bc <HAL_SPI_TransmitReceive+0x70>
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081a2:	d107      	bne.n	80081b4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d103      	bne.n	80081b4 <HAL_SPI_TransmitReceive+0x68>
 80081ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081b0:	2b04      	cmp	r3, #4
 80081b2:	d003      	beq.n	80081bc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80081b4:	2302      	movs	r3, #2
 80081b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081ba:	e15b      	b.n	8008474 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d005      	beq.n	80081ce <HAL_SPI_TransmitReceive+0x82>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d002      	beq.n	80081ce <HAL_SPI_TransmitReceive+0x82>
 80081c8:	887b      	ldrh	r3, [r7, #2]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d103      	bne.n	80081d6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80081ce:	2301      	movs	r3, #1
 80081d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80081d4:	e14e      	b.n	8008474 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d003      	beq.n	80081ea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2205      	movs	r2, #5
 80081e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	887a      	ldrh	r2, [r7, #2]
 80081fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	887a      	ldrh	r2, [r7, #2]
 8008200:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	68ba      	ldr	r2, [r7, #8]
 8008206:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	887a      	ldrh	r2, [r7, #2]
 800820c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	887a      	ldrh	r2, [r7, #2]
 8008212:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2200      	movs	r2, #0
 8008218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d007      	beq.n	800823e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800823c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008246:	d178      	bne.n	800833a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d002      	beq.n	8008256 <HAL_SPI_TransmitReceive+0x10a>
 8008250:	8b7b      	ldrh	r3, [r7, #26]
 8008252:	2b01      	cmp	r3, #1
 8008254:	d166      	bne.n	8008324 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008266:	1c9a      	adds	r2, r3, #2
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b01      	subs	r3, #1
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800827a:	e053      	b.n	8008324 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f003 0302 	and.w	r3, r3, #2
 8008286:	2b02      	cmp	r3, #2
 8008288:	d11b      	bne.n	80082c2 <HAL_SPI_TransmitReceive+0x176>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d016      	beq.n	80082c2 <HAL_SPI_TransmitReceive+0x176>
 8008294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008296:	2b01      	cmp	r3, #1
 8008298:	d113      	bne.n	80082c2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	881a      	ldrh	r2, [r3, #0]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082aa:	1c9a      	adds	r2, r3, #2
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d119      	bne.n	8008304 <HAL_SPI_TransmitReceive+0x1b8>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d014      	beq.n	8008304 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	b292      	uxth	r2, r2
 80082e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ec:	1c9a      	adds	r2, r3, #2
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	3b01      	subs	r3, #1
 80082fa:	b29a      	uxth	r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008300:	2301      	movs	r3, #1
 8008302:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008304:	f7fa fe1e 	bl	8002f44 <HAL_GetTick>
 8008308:	4602      	mov	r2, r0
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008310:	429a      	cmp	r2, r3
 8008312:	d807      	bhi.n	8008324 <HAL_SPI_TransmitReceive+0x1d8>
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800831a:	d003      	beq.n	8008324 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800831c:	2303      	movs	r3, #3
 800831e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008322:	e0a7      	b.n	8008474 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008328:	b29b      	uxth	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1a6      	bne.n	800827c <HAL_SPI_TransmitReceive+0x130>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008332:	b29b      	uxth	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1a1      	bne.n	800827c <HAL_SPI_TransmitReceive+0x130>
 8008338:	e07c      	b.n	8008434 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d002      	beq.n	8008348 <HAL_SPI_TransmitReceive+0x1fc>
 8008342:	8b7b      	ldrh	r3, [r7, #26]
 8008344:	2b01      	cmp	r3, #1
 8008346:	d16b      	bne.n	8008420 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	330c      	adds	r3, #12
 8008352:	7812      	ldrb	r2, [r2, #0]
 8008354:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835a:	1c5a      	adds	r2, r3, #1
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008364:	b29b      	uxth	r3, r3
 8008366:	3b01      	subs	r3, #1
 8008368:	b29a      	uxth	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800836e:	e057      	b.n	8008420 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b02      	cmp	r3, #2
 800837c:	d11c      	bne.n	80083b8 <HAL_SPI_TransmitReceive+0x26c>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008382:	b29b      	uxth	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d017      	beq.n	80083b8 <HAL_SPI_TransmitReceive+0x26c>
 8008388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838a:	2b01      	cmp	r3, #1
 800838c:	d114      	bne.n	80083b8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	330c      	adds	r3, #12
 8008398:	7812      	ldrb	r2, [r2, #0]
 800839a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a0:	1c5a      	adds	r2, r3, #1
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	3b01      	subs	r3, #1
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083b4:	2300      	movs	r3, #0
 80083b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d119      	bne.n	80083fa <HAL_SPI_TransmitReceive+0x2ae>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d014      	beq.n	80083fa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	68da      	ldr	r2, [r3, #12]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	b2d2      	uxtb	r2, r2
 80083dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	1c5a      	adds	r2, r3, #1
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	3b01      	subs	r3, #1
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083f6:	2301      	movs	r3, #1
 80083f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083fa:	f7fa fda3 	bl	8002f44 <HAL_GetTick>
 80083fe:	4602      	mov	r2, r0
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	1ad3      	subs	r3, r2, r3
 8008404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008406:	429a      	cmp	r2, r3
 8008408:	d803      	bhi.n	8008412 <HAL_SPI_TransmitReceive+0x2c6>
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008410:	d102      	bne.n	8008418 <HAL_SPI_TransmitReceive+0x2cc>
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	2b00      	cmp	r3, #0
 8008416:	d103      	bne.n	8008420 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800841e:	e029      	b.n	8008474 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1a2      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x224>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800842e:	b29b      	uxth	r3, r3
 8008430:	2b00      	cmp	r3, #0
 8008432:	d19d      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 f8a1 	bl	8008580 <SPI_EndRxTxTransaction>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d006      	beq.n	8008452 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2220      	movs	r2, #32
 800844e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008450:	e010      	b.n	8008474 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d10b      	bne.n	8008472 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800845a:	2300      	movs	r3, #0
 800845c:	617b      	str	r3, [r7, #20]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	e000      	b.n	8008474 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008484:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008488:	4618      	mov	r0, r3
 800848a:	3730      	adds	r7, #48	; 0x30
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800849e:	b2db      	uxtb	r3, r3
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	60f8      	str	r0, [r7, #12]
 80084b4:	60b9      	str	r1, [r7, #8]
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	4613      	mov	r3, r2
 80084ba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084bc:	e04c      	b.n	8008558 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084c4:	d048      	beq.n	8008558 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80084c6:	f7fa fd3d 	bl	8002f44 <HAL_GetTick>
 80084ca:	4602      	mov	r2, r0
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	1ad3      	subs	r3, r2, r3
 80084d0:	683a      	ldr	r2, [r7, #0]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d902      	bls.n	80084dc <SPI_WaitFlagStateUntilTimeout+0x30>
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d13d      	bne.n	8008558 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084f4:	d111      	bne.n	800851a <SPI_WaitFlagStateUntilTimeout+0x6e>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084fe:	d004      	beq.n	800850a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008508:	d107      	bne.n	800851a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008518:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008522:	d10f      	bne.n	8008544 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681a      	ldr	r2, [r3, #0]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	681a      	ldr	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008542:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008554:	2303      	movs	r3, #3
 8008556:	e00f      	b.n	8008578 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689a      	ldr	r2, [r3, #8]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	4013      	ands	r3, r2
 8008562:	68ba      	ldr	r2, [r7, #8]
 8008564:	429a      	cmp	r2, r3
 8008566:	bf0c      	ite	eq
 8008568:	2301      	moveq	r3, #1
 800856a:	2300      	movne	r3, #0
 800856c:	b2db      	uxtb	r3, r3
 800856e:	461a      	mov	r2, r3
 8008570:	79fb      	ldrb	r3, [r7, #7]
 8008572:	429a      	cmp	r2, r3
 8008574:	d1a3      	bne.n	80084be <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b088      	sub	sp, #32
 8008584:	af02      	add	r7, sp, #8
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800858c:	4b1b      	ldr	r3, [pc, #108]	; (80085fc <SPI_EndRxTxTransaction+0x7c>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1b      	ldr	r2, [pc, #108]	; (8008600 <SPI_EndRxTxTransaction+0x80>)
 8008592:	fba2 2303 	umull	r2, r3, r2, r3
 8008596:	0d5b      	lsrs	r3, r3, #21
 8008598:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800859c:	fb02 f303 	mul.w	r3, r2, r3
 80085a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085aa:	d112      	bne.n	80085d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	2200      	movs	r2, #0
 80085b4:	2180      	movs	r1, #128	; 0x80
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f7ff ff78 	bl	80084ac <SPI_WaitFlagStateUntilTimeout>
 80085bc:	4603      	mov	r3, r0
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d016      	beq.n	80085f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085c6:	f043 0220 	orr.w	r2, r3, #32
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e00f      	b.n	80085f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00a      	beq.n	80085ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	3b01      	subs	r3, #1
 80085dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085e8:	2b80      	cmp	r3, #128	; 0x80
 80085ea:	d0f2      	beq.n	80085d2 <SPI_EndRxTxTransaction+0x52>
 80085ec:	e000      	b.n	80085f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80085ee:	bf00      	nop
  }

  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	20000014 	.word	0x20000014
 8008600:	165e9f81 	.word	0x165e9f81

08008604 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d101      	bne.n	8008616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008612:	2301      	movs	r3, #1
 8008614:	e03f      	b.n	8008696 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800861c:	b2db      	uxtb	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d106      	bne.n	8008630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f7fa faa4 	bl	8002b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2224      	movs	r2, #36	; 0x24
 8008634:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	68da      	ldr	r2, [r3, #12]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008646:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f829 	bl	80086a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	691a      	ldr	r2, [r3, #16]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800865c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	695a      	ldr	r2, [r3, #20]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800866c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800867c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2220      	movs	r2, #32
 8008688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2220      	movs	r2, #32
 8008690:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
	...

080086a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a4:	b085      	sub	sp, #20
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	691b      	ldr	r3, [r3, #16]
 80086b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	689a      	ldr	r2, [r3, #8]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	691b      	ldr	r3, [r3, #16]
 80086c8:	431a      	orrs	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80086e2:	f023 030c 	bic.w	r3, r3, #12
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	6812      	ldr	r2, [r2, #0]
 80086ea:	68f9      	ldr	r1, [r7, #12]
 80086ec:	430b      	orrs	r3, r1
 80086ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	695b      	ldr	r3, [r3, #20]
 80086f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699a      	ldr	r2, [r3, #24]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800870e:	f040 818b 	bne.w	8008a28 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4ac1      	ldr	r2, [pc, #772]	; (8008a1c <UART_SetConfig+0x37c>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d005      	beq.n	8008728 <UART_SetConfig+0x88>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4abf      	ldr	r2, [pc, #764]	; (8008a20 <UART_SetConfig+0x380>)
 8008722:	4293      	cmp	r3, r2
 8008724:	f040 80bd 	bne.w	80088a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008728:	f7fe f848 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 800872c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	461d      	mov	r5, r3
 8008732:	f04f 0600 	mov.w	r6, #0
 8008736:	46a8      	mov	r8, r5
 8008738:	46b1      	mov	r9, r6
 800873a:	eb18 0308 	adds.w	r3, r8, r8
 800873e:	eb49 0409 	adc.w	r4, r9, r9
 8008742:	4698      	mov	r8, r3
 8008744:	46a1      	mov	r9, r4
 8008746:	eb18 0805 	adds.w	r8, r8, r5
 800874a:	eb49 0906 	adc.w	r9, r9, r6
 800874e:	f04f 0100 	mov.w	r1, #0
 8008752:	f04f 0200 	mov.w	r2, #0
 8008756:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800875a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800875e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008762:	4688      	mov	r8, r1
 8008764:	4691      	mov	r9, r2
 8008766:	eb18 0005 	adds.w	r0, r8, r5
 800876a:	eb49 0106 	adc.w	r1, r9, r6
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	461d      	mov	r5, r3
 8008774:	f04f 0600 	mov.w	r6, #0
 8008778:	196b      	adds	r3, r5, r5
 800877a:	eb46 0406 	adc.w	r4, r6, r6
 800877e:	461a      	mov	r2, r3
 8008780:	4623      	mov	r3, r4
 8008782:	f7f8 fad1 	bl	8000d28 <__aeabi_uldivmod>
 8008786:	4603      	mov	r3, r0
 8008788:	460c      	mov	r4, r1
 800878a:	461a      	mov	r2, r3
 800878c:	4ba5      	ldr	r3, [pc, #660]	; (8008a24 <UART_SetConfig+0x384>)
 800878e:	fba3 2302 	umull	r2, r3, r3, r2
 8008792:	095b      	lsrs	r3, r3, #5
 8008794:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	461d      	mov	r5, r3
 800879c:	f04f 0600 	mov.w	r6, #0
 80087a0:	46a9      	mov	r9, r5
 80087a2:	46b2      	mov	sl, r6
 80087a4:	eb19 0309 	adds.w	r3, r9, r9
 80087a8:	eb4a 040a 	adc.w	r4, sl, sl
 80087ac:	4699      	mov	r9, r3
 80087ae:	46a2      	mov	sl, r4
 80087b0:	eb19 0905 	adds.w	r9, r9, r5
 80087b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80087b8:	f04f 0100 	mov.w	r1, #0
 80087bc:	f04f 0200 	mov.w	r2, #0
 80087c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80087c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80087cc:	4689      	mov	r9, r1
 80087ce:	4692      	mov	sl, r2
 80087d0:	eb19 0005 	adds.w	r0, r9, r5
 80087d4:	eb4a 0106 	adc.w	r1, sl, r6
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	461d      	mov	r5, r3
 80087de:	f04f 0600 	mov.w	r6, #0
 80087e2:	196b      	adds	r3, r5, r5
 80087e4:	eb46 0406 	adc.w	r4, r6, r6
 80087e8:	461a      	mov	r2, r3
 80087ea:	4623      	mov	r3, r4
 80087ec:	f7f8 fa9c 	bl	8000d28 <__aeabi_uldivmod>
 80087f0:	4603      	mov	r3, r0
 80087f2:	460c      	mov	r4, r1
 80087f4:	461a      	mov	r2, r3
 80087f6:	4b8b      	ldr	r3, [pc, #556]	; (8008a24 <UART_SetConfig+0x384>)
 80087f8:	fba3 1302 	umull	r1, r3, r3, r2
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	2164      	movs	r1, #100	; 0x64
 8008800:	fb01 f303 	mul.w	r3, r1, r3
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	00db      	lsls	r3, r3, #3
 8008808:	3332      	adds	r3, #50	; 0x32
 800880a:	4a86      	ldr	r2, [pc, #536]	; (8008a24 <UART_SetConfig+0x384>)
 800880c:	fba2 2303 	umull	r2, r3, r2, r3
 8008810:	095b      	lsrs	r3, r3, #5
 8008812:	005b      	lsls	r3, r3, #1
 8008814:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008818:	4498      	add	r8, r3
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	461d      	mov	r5, r3
 800881e:	f04f 0600 	mov.w	r6, #0
 8008822:	46a9      	mov	r9, r5
 8008824:	46b2      	mov	sl, r6
 8008826:	eb19 0309 	adds.w	r3, r9, r9
 800882a:	eb4a 040a 	adc.w	r4, sl, sl
 800882e:	4699      	mov	r9, r3
 8008830:	46a2      	mov	sl, r4
 8008832:	eb19 0905 	adds.w	r9, r9, r5
 8008836:	eb4a 0a06 	adc.w	sl, sl, r6
 800883a:	f04f 0100 	mov.w	r1, #0
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008846:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800884a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800884e:	4689      	mov	r9, r1
 8008850:	4692      	mov	sl, r2
 8008852:	eb19 0005 	adds.w	r0, r9, r5
 8008856:	eb4a 0106 	adc.w	r1, sl, r6
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	461d      	mov	r5, r3
 8008860:	f04f 0600 	mov.w	r6, #0
 8008864:	196b      	adds	r3, r5, r5
 8008866:	eb46 0406 	adc.w	r4, r6, r6
 800886a:	461a      	mov	r2, r3
 800886c:	4623      	mov	r3, r4
 800886e:	f7f8 fa5b 	bl	8000d28 <__aeabi_uldivmod>
 8008872:	4603      	mov	r3, r0
 8008874:	460c      	mov	r4, r1
 8008876:	461a      	mov	r2, r3
 8008878:	4b6a      	ldr	r3, [pc, #424]	; (8008a24 <UART_SetConfig+0x384>)
 800887a:	fba3 1302 	umull	r1, r3, r3, r2
 800887e:	095b      	lsrs	r3, r3, #5
 8008880:	2164      	movs	r1, #100	; 0x64
 8008882:	fb01 f303 	mul.w	r3, r1, r3
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	3332      	adds	r3, #50	; 0x32
 800888c:	4a65      	ldr	r2, [pc, #404]	; (8008a24 <UART_SetConfig+0x384>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	095b      	lsrs	r3, r3, #5
 8008894:	f003 0207 	and.w	r2, r3, #7
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4442      	add	r2, r8
 800889e:	609a      	str	r2, [r3, #8]
 80088a0:	e26f      	b.n	8008d82 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80088a2:	f7fd ff77 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 80088a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	461d      	mov	r5, r3
 80088ac:	f04f 0600 	mov.w	r6, #0
 80088b0:	46a8      	mov	r8, r5
 80088b2:	46b1      	mov	r9, r6
 80088b4:	eb18 0308 	adds.w	r3, r8, r8
 80088b8:	eb49 0409 	adc.w	r4, r9, r9
 80088bc:	4698      	mov	r8, r3
 80088be:	46a1      	mov	r9, r4
 80088c0:	eb18 0805 	adds.w	r8, r8, r5
 80088c4:	eb49 0906 	adc.w	r9, r9, r6
 80088c8:	f04f 0100 	mov.w	r1, #0
 80088cc:	f04f 0200 	mov.w	r2, #0
 80088d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80088d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80088d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80088dc:	4688      	mov	r8, r1
 80088de:	4691      	mov	r9, r2
 80088e0:	eb18 0005 	adds.w	r0, r8, r5
 80088e4:	eb49 0106 	adc.w	r1, r9, r6
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	461d      	mov	r5, r3
 80088ee:	f04f 0600 	mov.w	r6, #0
 80088f2:	196b      	adds	r3, r5, r5
 80088f4:	eb46 0406 	adc.w	r4, r6, r6
 80088f8:	461a      	mov	r2, r3
 80088fa:	4623      	mov	r3, r4
 80088fc:	f7f8 fa14 	bl	8000d28 <__aeabi_uldivmod>
 8008900:	4603      	mov	r3, r0
 8008902:	460c      	mov	r4, r1
 8008904:	461a      	mov	r2, r3
 8008906:	4b47      	ldr	r3, [pc, #284]	; (8008a24 <UART_SetConfig+0x384>)
 8008908:	fba3 2302 	umull	r2, r3, r3, r2
 800890c:	095b      	lsrs	r3, r3, #5
 800890e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	461d      	mov	r5, r3
 8008916:	f04f 0600 	mov.w	r6, #0
 800891a:	46a9      	mov	r9, r5
 800891c:	46b2      	mov	sl, r6
 800891e:	eb19 0309 	adds.w	r3, r9, r9
 8008922:	eb4a 040a 	adc.w	r4, sl, sl
 8008926:	4699      	mov	r9, r3
 8008928:	46a2      	mov	sl, r4
 800892a:	eb19 0905 	adds.w	r9, r9, r5
 800892e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008932:	f04f 0100 	mov.w	r1, #0
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800893e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008942:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008946:	4689      	mov	r9, r1
 8008948:	4692      	mov	sl, r2
 800894a:	eb19 0005 	adds.w	r0, r9, r5
 800894e:	eb4a 0106 	adc.w	r1, sl, r6
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	461d      	mov	r5, r3
 8008958:	f04f 0600 	mov.w	r6, #0
 800895c:	196b      	adds	r3, r5, r5
 800895e:	eb46 0406 	adc.w	r4, r6, r6
 8008962:	461a      	mov	r2, r3
 8008964:	4623      	mov	r3, r4
 8008966:	f7f8 f9df 	bl	8000d28 <__aeabi_uldivmod>
 800896a:	4603      	mov	r3, r0
 800896c:	460c      	mov	r4, r1
 800896e:	461a      	mov	r2, r3
 8008970:	4b2c      	ldr	r3, [pc, #176]	; (8008a24 <UART_SetConfig+0x384>)
 8008972:	fba3 1302 	umull	r1, r3, r3, r2
 8008976:	095b      	lsrs	r3, r3, #5
 8008978:	2164      	movs	r1, #100	; 0x64
 800897a:	fb01 f303 	mul.w	r3, r1, r3
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	3332      	adds	r3, #50	; 0x32
 8008984:	4a27      	ldr	r2, [pc, #156]	; (8008a24 <UART_SetConfig+0x384>)
 8008986:	fba2 2303 	umull	r2, r3, r2, r3
 800898a:	095b      	lsrs	r3, r3, #5
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008992:	4498      	add	r8, r3
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	461d      	mov	r5, r3
 8008998:	f04f 0600 	mov.w	r6, #0
 800899c:	46a9      	mov	r9, r5
 800899e:	46b2      	mov	sl, r6
 80089a0:	eb19 0309 	adds.w	r3, r9, r9
 80089a4:	eb4a 040a 	adc.w	r4, sl, sl
 80089a8:	4699      	mov	r9, r3
 80089aa:	46a2      	mov	sl, r4
 80089ac:	eb19 0905 	adds.w	r9, r9, r5
 80089b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80089b4:	f04f 0100 	mov.w	r1, #0
 80089b8:	f04f 0200 	mov.w	r2, #0
 80089bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80089c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80089c8:	4689      	mov	r9, r1
 80089ca:	4692      	mov	sl, r2
 80089cc:	eb19 0005 	adds.w	r0, r9, r5
 80089d0:	eb4a 0106 	adc.w	r1, sl, r6
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	461d      	mov	r5, r3
 80089da:	f04f 0600 	mov.w	r6, #0
 80089de:	196b      	adds	r3, r5, r5
 80089e0:	eb46 0406 	adc.w	r4, r6, r6
 80089e4:	461a      	mov	r2, r3
 80089e6:	4623      	mov	r3, r4
 80089e8:	f7f8 f99e 	bl	8000d28 <__aeabi_uldivmod>
 80089ec:	4603      	mov	r3, r0
 80089ee:	460c      	mov	r4, r1
 80089f0:	461a      	mov	r2, r3
 80089f2:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <UART_SetConfig+0x384>)
 80089f4:	fba3 1302 	umull	r1, r3, r3, r2
 80089f8:	095b      	lsrs	r3, r3, #5
 80089fa:	2164      	movs	r1, #100	; 0x64
 80089fc:	fb01 f303 	mul.w	r3, r1, r3
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	3332      	adds	r3, #50	; 0x32
 8008a06:	4a07      	ldr	r2, [pc, #28]	; (8008a24 <UART_SetConfig+0x384>)
 8008a08:	fba2 2303 	umull	r2, r3, r2, r3
 8008a0c:	095b      	lsrs	r3, r3, #5
 8008a0e:	f003 0207 	and.w	r2, r3, #7
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4442      	add	r2, r8
 8008a18:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008a1a:	e1b2      	b.n	8008d82 <UART_SetConfig+0x6e2>
 8008a1c:	40011000 	.word	0x40011000
 8008a20:	40011400 	.word	0x40011400
 8008a24:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4ad7      	ldr	r2, [pc, #860]	; (8008d8c <UART_SetConfig+0x6ec>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d005      	beq.n	8008a3e <UART_SetConfig+0x39e>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4ad6      	ldr	r2, [pc, #856]	; (8008d90 <UART_SetConfig+0x6f0>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	f040 80d1 	bne.w	8008be0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a3e:	f7fd febd 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 8008a42:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	469a      	mov	sl, r3
 8008a48:	f04f 0b00 	mov.w	fp, #0
 8008a4c:	46d0      	mov	r8, sl
 8008a4e:	46d9      	mov	r9, fp
 8008a50:	eb18 0308 	adds.w	r3, r8, r8
 8008a54:	eb49 0409 	adc.w	r4, r9, r9
 8008a58:	4698      	mov	r8, r3
 8008a5a:	46a1      	mov	r9, r4
 8008a5c:	eb18 080a 	adds.w	r8, r8, sl
 8008a60:	eb49 090b 	adc.w	r9, r9, fp
 8008a64:	f04f 0100 	mov.w	r1, #0
 8008a68:	f04f 0200 	mov.w	r2, #0
 8008a6c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008a70:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008a74:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008a78:	4688      	mov	r8, r1
 8008a7a:	4691      	mov	r9, r2
 8008a7c:	eb1a 0508 	adds.w	r5, sl, r8
 8008a80:	eb4b 0609 	adc.w	r6, fp, r9
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f04f 0200 	mov.w	r2, #0
 8008a8e:	f04f 0300 	mov.w	r3, #0
 8008a92:	f04f 0400 	mov.w	r4, #0
 8008a96:	0094      	lsls	r4, r2, #2
 8008a98:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008a9c:	008b      	lsls	r3, r1, #2
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	4623      	mov	r3, r4
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	f7f8 f93f 	bl	8000d28 <__aeabi_uldivmod>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	460c      	mov	r4, r1
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4bb8      	ldr	r3, [pc, #736]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008ab2:	fba3 2302 	umull	r2, r3, r3, r2
 8008ab6:	095b      	lsrs	r3, r3, #5
 8008ab8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	469b      	mov	fp, r3
 8008ac0:	f04f 0c00 	mov.w	ip, #0
 8008ac4:	46d9      	mov	r9, fp
 8008ac6:	46e2      	mov	sl, ip
 8008ac8:	eb19 0309 	adds.w	r3, r9, r9
 8008acc:	eb4a 040a 	adc.w	r4, sl, sl
 8008ad0:	4699      	mov	r9, r3
 8008ad2:	46a2      	mov	sl, r4
 8008ad4:	eb19 090b 	adds.w	r9, r9, fp
 8008ad8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008adc:	f04f 0100 	mov.w	r1, #0
 8008ae0:	f04f 0200 	mov.w	r2, #0
 8008ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ae8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008aec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008af0:	4689      	mov	r9, r1
 8008af2:	4692      	mov	sl, r2
 8008af4:	eb1b 0509 	adds.w	r5, fp, r9
 8008af8:	eb4c 060a 	adc.w	r6, ip, sl
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	4619      	mov	r1, r3
 8008b02:	f04f 0200 	mov.w	r2, #0
 8008b06:	f04f 0300 	mov.w	r3, #0
 8008b0a:	f04f 0400 	mov.w	r4, #0
 8008b0e:	0094      	lsls	r4, r2, #2
 8008b10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008b14:	008b      	lsls	r3, r1, #2
 8008b16:	461a      	mov	r2, r3
 8008b18:	4623      	mov	r3, r4
 8008b1a:	4628      	mov	r0, r5
 8008b1c:	4631      	mov	r1, r6
 8008b1e:	f7f8 f903 	bl	8000d28 <__aeabi_uldivmod>
 8008b22:	4603      	mov	r3, r0
 8008b24:	460c      	mov	r4, r1
 8008b26:	461a      	mov	r2, r3
 8008b28:	4b9a      	ldr	r3, [pc, #616]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008b2a:	fba3 1302 	umull	r1, r3, r3, r2
 8008b2e:	095b      	lsrs	r3, r3, #5
 8008b30:	2164      	movs	r1, #100	; 0x64
 8008b32:	fb01 f303 	mul.w	r3, r1, r3
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	011b      	lsls	r3, r3, #4
 8008b3a:	3332      	adds	r3, #50	; 0x32
 8008b3c:	4a95      	ldr	r2, [pc, #596]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b42:	095b      	lsrs	r3, r3, #5
 8008b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b48:	4498      	add	r8, r3
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	469b      	mov	fp, r3
 8008b4e:	f04f 0c00 	mov.w	ip, #0
 8008b52:	46d9      	mov	r9, fp
 8008b54:	46e2      	mov	sl, ip
 8008b56:	eb19 0309 	adds.w	r3, r9, r9
 8008b5a:	eb4a 040a 	adc.w	r4, sl, sl
 8008b5e:	4699      	mov	r9, r3
 8008b60:	46a2      	mov	sl, r4
 8008b62:	eb19 090b 	adds.w	r9, r9, fp
 8008b66:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008b6a:	f04f 0100 	mov.w	r1, #0
 8008b6e:	f04f 0200 	mov.w	r2, #0
 8008b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008b7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008b7e:	4689      	mov	r9, r1
 8008b80:	4692      	mov	sl, r2
 8008b82:	eb1b 0509 	adds.w	r5, fp, r9
 8008b86:	eb4c 060a 	adc.w	r6, ip, sl
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	f04f 0200 	mov.w	r2, #0
 8008b94:	f04f 0300 	mov.w	r3, #0
 8008b98:	f04f 0400 	mov.w	r4, #0
 8008b9c:	0094      	lsls	r4, r2, #2
 8008b9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008ba2:	008b      	lsls	r3, r1, #2
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4623      	mov	r3, r4
 8008ba8:	4628      	mov	r0, r5
 8008baa:	4631      	mov	r1, r6
 8008bac:	f7f8 f8bc 	bl	8000d28 <__aeabi_uldivmod>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	4b77      	ldr	r3, [pc, #476]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008bbc:	095b      	lsrs	r3, r3, #5
 8008bbe:	2164      	movs	r1, #100	; 0x64
 8008bc0:	fb01 f303 	mul.w	r3, r1, r3
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	011b      	lsls	r3, r3, #4
 8008bc8:	3332      	adds	r3, #50	; 0x32
 8008bca:	4a72      	ldr	r2, [pc, #456]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd0:	095b      	lsrs	r3, r3, #5
 8008bd2:	f003 020f 	and.w	r2, r3, #15
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	4442      	add	r2, r8
 8008bdc:	609a      	str	r2, [r3, #8]
 8008bde:	e0d0      	b.n	8008d82 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008be0:	f7fd fdd8 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 8008be4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	469a      	mov	sl, r3
 8008bea:	f04f 0b00 	mov.w	fp, #0
 8008bee:	46d0      	mov	r8, sl
 8008bf0:	46d9      	mov	r9, fp
 8008bf2:	eb18 0308 	adds.w	r3, r8, r8
 8008bf6:	eb49 0409 	adc.w	r4, r9, r9
 8008bfa:	4698      	mov	r8, r3
 8008bfc:	46a1      	mov	r9, r4
 8008bfe:	eb18 080a 	adds.w	r8, r8, sl
 8008c02:	eb49 090b 	adc.w	r9, r9, fp
 8008c06:	f04f 0100 	mov.w	r1, #0
 8008c0a:	f04f 0200 	mov.w	r2, #0
 8008c0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008c12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008c16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008c1a:	4688      	mov	r8, r1
 8008c1c:	4691      	mov	r9, r2
 8008c1e:	eb1a 0508 	adds.w	r5, sl, r8
 8008c22:	eb4b 0609 	adc.w	r6, fp, r9
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	f04f 0200 	mov.w	r2, #0
 8008c30:	f04f 0300 	mov.w	r3, #0
 8008c34:	f04f 0400 	mov.w	r4, #0
 8008c38:	0094      	lsls	r4, r2, #2
 8008c3a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008c3e:	008b      	lsls	r3, r1, #2
 8008c40:	461a      	mov	r2, r3
 8008c42:	4623      	mov	r3, r4
 8008c44:	4628      	mov	r0, r5
 8008c46:	4631      	mov	r1, r6
 8008c48:	f7f8 f86e 	bl	8000d28 <__aeabi_uldivmod>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	461a      	mov	r2, r3
 8008c52:	4b50      	ldr	r3, [pc, #320]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008c54:	fba3 2302 	umull	r2, r3, r3, r2
 8008c58:	095b      	lsrs	r3, r3, #5
 8008c5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	469b      	mov	fp, r3
 8008c62:	f04f 0c00 	mov.w	ip, #0
 8008c66:	46d9      	mov	r9, fp
 8008c68:	46e2      	mov	sl, ip
 8008c6a:	eb19 0309 	adds.w	r3, r9, r9
 8008c6e:	eb4a 040a 	adc.w	r4, sl, sl
 8008c72:	4699      	mov	r9, r3
 8008c74:	46a2      	mov	sl, r4
 8008c76:	eb19 090b 	adds.w	r9, r9, fp
 8008c7a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008c7e:	f04f 0100 	mov.w	r1, #0
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008c8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008c92:	4689      	mov	r9, r1
 8008c94:	4692      	mov	sl, r2
 8008c96:	eb1b 0509 	adds.w	r5, fp, r9
 8008c9a:	eb4c 060a 	adc.w	r6, ip, sl
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	f04f 0200 	mov.w	r2, #0
 8008ca8:	f04f 0300 	mov.w	r3, #0
 8008cac:	f04f 0400 	mov.w	r4, #0
 8008cb0:	0094      	lsls	r4, r2, #2
 8008cb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008cb6:	008b      	lsls	r3, r1, #2
 8008cb8:	461a      	mov	r2, r3
 8008cba:	4623      	mov	r3, r4
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	4631      	mov	r1, r6
 8008cc0:	f7f8 f832 	bl	8000d28 <__aeabi_uldivmod>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	460c      	mov	r4, r1
 8008cc8:	461a      	mov	r2, r3
 8008cca:	4b32      	ldr	r3, [pc, #200]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8008cd0:	095b      	lsrs	r3, r3, #5
 8008cd2:	2164      	movs	r1, #100	; 0x64
 8008cd4:	fb01 f303 	mul.w	r3, r1, r3
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	011b      	lsls	r3, r3, #4
 8008cdc:	3332      	adds	r3, #50	; 0x32
 8008cde:	4a2d      	ldr	r2, [pc, #180]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce4:	095b      	lsrs	r3, r3, #5
 8008ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008cea:	4498      	add	r8, r3
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	469b      	mov	fp, r3
 8008cf0:	f04f 0c00 	mov.w	ip, #0
 8008cf4:	46d9      	mov	r9, fp
 8008cf6:	46e2      	mov	sl, ip
 8008cf8:	eb19 0309 	adds.w	r3, r9, r9
 8008cfc:	eb4a 040a 	adc.w	r4, sl, sl
 8008d00:	4699      	mov	r9, r3
 8008d02:	46a2      	mov	sl, r4
 8008d04:	eb19 090b 	adds.w	r9, r9, fp
 8008d08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008d0c:	f04f 0100 	mov.w	r1, #0
 8008d10:	f04f 0200 	mov.w	r2, #0
 8008d14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008d18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008d1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008d20:	4689      	mov	r9, r1
 8008d22:	4692      	mov	sl, r2
 8008d24:	eb1b 0509 	adds.w	r5, fp, r9
 8008d28:	eb4c 060a 	adc.w	r6, ip, sl
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	4619      	mov	r1, r3
 8008d32:	f04f 0200 	mov.w	r2, #0
 8008d36:	f04f 0300 	mov.w	r3, #0
 8008d3a:	f04f 0400 	mov.w	r4, #0
 8008d3e:	0094      	lsls	r4, r2, #2
 8008d40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008d44:	008b      	lsls	r3, r1, #2
 8008d46:	461a      	mov	r2, r3
 8008d48:	4623      	mov	r3, r4
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	4631      	mov	r1, r6
 8008d4e:	f7f7 ffeb 	bl	8000d28 <__aeabi_uldivmod>
 8008d52:	4603      	mov	r3, r0
 8008d54:	460c      	mov	r4, r1
 8008d56:	461a      	mov	r2, r3
 8008d58:	4b0e      	ldr	r3, [pc, #56]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8008d5e:	095b      	lsrs	r3, r3, #5
 8008d60:	2164      	movs	r1, #100	; 0x64
 8008d62:	fb01 f303 	mul.w	r3, r1, r3
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	011b      	lsls	r3, r3, #4
 8008d6a:	3332      	adds	r3, #50	; 0x32
 8008d6c:	4a09      	ldr	r2, [pc, #36]	; (8008d94 <UART_SetConfig+0x6f4>)
 8008d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008d72:	095b      	lsrs	r3, r3, #5
 8008d74:	f003 020f 	and.w	r2, r3, #15
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4442      	add	r2, r8
 8008d7e:	609a      	str	r2, [r3, #8]
}
 8008d80:	e7ff      	b.n	8008d82 <UART_SetConfig+0x6e2>
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	40011000 	.word	0x40011000
 8008d90:	40011400 	.word	0x40011400
 8008d94:	51eb851f 	.word	0x51eb851f

08008d98 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008d98:	b084      	sub	sp, #16
 8008d9a:	b480      	push	{r7}
 8008d9c:	b085      	sub	sp, #20
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	f107 001c 	add.w	r0, r7, #28
 8008da6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008dae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008db0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008db2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008db6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008dba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008dbe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008dc2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008dd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	431a      	orrs	r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	b004      	add	sp, #16
 8008dec:	4770      	bx	lr

08008dee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr

08008e08 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	370c      	adds	r7, #12
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008e2a:	b580      	push	{r7, lr}
 8008e2c:	b082      	sub	sp, #8
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2203      	movs	r2, #3
 8008e36:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008e38:	2002      	movs	r0, #2
 8008e3a:	f7fa f88f 	bl	8002f5c <HAL_Delay>
  
  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}

08008e48 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0303 	and.w	r3, r3, #3
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008e82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008e88:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008e8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008e9e:	f023 030f 	bic.w	r3, r3, #15
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008eaa:	2300      	movs	r3, #0
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	b2db      	uxtb	r3, r3
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	370c      	adds	r7, #12
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b085      	sub	sp, #20
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3314      	adds	r3, #20
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
}  
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685a      	ldr	r2, [r3, #4]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f1e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008f24:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008f2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008f42:	2300      	movs	r3, #0

}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b088      	sub	sp, #32
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008f5e:	2310      	movs	r3, #16
 8008f60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008f62:	2340      	movs	r3, #64	; 0x40
 8008f64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008f6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008f70:	f107 0308 	add.w	r3, r7, #8
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff ff74 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f80:	2110      	movs	r1, #16
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa40 	bl	8009408 <SDMMC_GetCmdResp1>
 8008f88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f8a:	69fb      	ldr	r3, [r7, #28]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3720      	adds	r7, #32
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b088      	sub	sp, #32
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008fa2:	2311      	movs	r3, #17
 8008fa4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fa6:	2340      	movs	r3, #64	; 0x40
 8008fa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008faa:	2300      	movs	r3, #0
 8008fac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008fae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008fb4:	f107 0308 	add.w	r3, r7, #8
 8008fb8:	4619      	mov	r1, r3
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7ff ff52 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc4:	2111      	movs	r1, #17
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa1e 	bl	8009408 <SDMMC_GetCmdResp1>
 8008fcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fce:	69fb      	ldr	r3, [r7, #28]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3720      	adds	r7, #32
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008fe6:	2312      	movs	r3, #18
 8008fe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008fea:	2340      	movs	r3, #64	; 0x40
 8008fec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008ff8:	f107 0308 	add.w	r3, r7, #8
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff ff30 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009004:	f241 3288 	movw	r2, #5000	; 0x1388
 8009008:	2112      	movs	r1, #18
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f9fc 	bl	8009408 <SDMMC_GetCmdResp1>
 8009010:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009012:	69fb      	ldr	r3, [r7, #28]
}
 8009014:	4618      	mov	r0, r3
 8009016:	3720      	adds	r7, #32
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b088      	sub	sp, #32
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800902a:	2318      	movs	r3, #24
 800902c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800902e:	2340      	movs	r3, #64	; 0x40
 8009030:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009032:	2300      	movs	r3, #0
 8009034:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800903a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800903c:	f107 0308 	add.w	r3, r7, #8
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7ff ff0e 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009048:	f241 3288 	movw	r2, #5000	; 0x1388
 800904c:	2118      	movs	r1, #24
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f9da 	bl	8009408 <SDMMC_GetCmdResp1>
 8009054:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009056:	69fb      	ldr	r3, [r7, #28]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3720      	adds	r7, #32
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800906e:	2319      	movs	r3, #25
 8009070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009072:	2340      	movs	r3, #64	; 0x40
 8009074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009076:	2300      	movs	r3, #0
 8009078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800907a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800907e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009080:	f107 0308 	add.w	r3, r7, #8
 8009084:	4619      	mov	r1, r3
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f7ff feec 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800908c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009090:	2119      	movs	r1, #25
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f9b8 	bl	8009408 <SDMMC_GetCmdResp1>
 8009098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800909a:	69fb      	ldr	r3, [r7, #28]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3720      	adds	r7, #32
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80090b0:	230c      	movs	r3, #12
 80090b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090b4:	2340      	movs	r3, #64	; 0x40
 80090b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090b8:	2300      	movs	r3, #0
 80090ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090c2:	f107 0308 	add.w	r3, r7, #8
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff fecb 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80090ce:	4a05      	ldr	r2, [pc, #20]	; (80090e4 <SDMMC_CmdStopTransfer+0x40>)
 80090d0:	210c      	movs	r1, #12
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 f998 	bl	8009408 <SDMMC_GetCmdResp1>
 80090d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090da:	69fb      	ldr	r3, [r7, #28]
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3720      	adds	r7, #32
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	05f5e100 	.word	0x05f5e100

080090e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b08a      	sub	sp, #40	; 0x28
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	60f8      	str	r0, [r7, #12]
 80090f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80090f8:	2307      	movs	r3, #7
 80090fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090fc:	2340      	movs	r3, #64	; 0x40
 80090fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009100:	2300      	movs	r3, #0
 8009102:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009108:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800910a:	f107 0310 	add.w	r3, r7, #16
 800910e:	4619      	mov	r1, r3
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f7ff fea7 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009116:	f241 3288 	movw	r2, #5000	; 0x1388
 800911a:	2107      	movs	r1, #7
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 f973 	bl	8009408 <SDMMC_GetCmdResp1>
 8009122:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009126:	4618      	mov	r0, r3
 8009128:	3728      	adds	r7, #40	; 0x28
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}

0800912e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800912e:	b580      	push	{r7, lr}
 8009130:	b088      	sub	sp, #32
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800913a:	2300      	movs	r3, #0
 800913c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800913e:	2300      	movs	r3, #0
 8009140:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009142:	2300      	movs	r3, #0
 8009144:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009146:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800914a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800914c:	f107 0308 	add.w	r3, r7, #8
 8009150:	4619      	mov	r1, r3
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff fe86 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f92d 	bl	80093b8 <SDMMC_GetCmdError>
 800915e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009160:	69fb      	ldr	r3, [r7, #28]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3720      	adds	r7, #32
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800916a:	b580      	push	{r7, lr}
 800916c:	b088      	sub	sp, #32
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009172:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009176:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009178:	2308      	movs	r3, #8
 800917a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800917c:	2340      	movs	r3, #64	; 0x40
 800917e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009180:	2300      	movs	r3, #0
 8009182:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009188:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800918a:	f107 0308 	add.w	r3, r7, #8
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7ff fe67 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fb16 	bl	80097c8 <SDMMC_GetCmdResp7>
 800919c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800919e:	69fb      	ldr	r3, [r7, #28]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3720      	adds	r7, #32
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80091b6:	2337      	movs	r3, #55	; 0x37
 80091b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091ba:	2340      	movs	r3, #64	; 0x40
 80091bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091be:	2300      	movs	r3, #0
 80091c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091c8:	f107 0308 	add.w	r3, r7, #8
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff fe48 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80091d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091d8:	2137      	movs	r1, #55	; 0x37
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f914 	bl	8009408 <SDMMC_GetCmdResp1>
 80091e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091e2:	69fb      	ldr	r3, [r7, #28]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3720      	adds	r7, #32
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b088      	sub	sp, #32
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80091fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009202:	2329      	movs	r3, #41	; 0x29
 8009204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009206:	2340      	movs	r3, #64	; 0x40
 8009208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800920a:	2300      	movs	r3, #0
 800920c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800920e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009214:	f107 0308 	add.w	r3, r7, #8
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7ff fe22 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fa23 	bl	800966c <SDMMC_GetCmdResp3>
 8009226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009228:	69fb      	ldr	r3, [r7, #28]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3720      	adds	r7, #32
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b088      	sub	sp, #32
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
 800923a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009240:	2306      	movs	r3, #6
 8009242:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800924c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009250:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009252:	f107 0308 	add.w	r3, r7, #8
 8009256:	4619      	mov	r1, r3
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f7ff fe03 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800925e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009262:	2106      	movs	r1, #6
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f8cf 	bl	8009408 <SDMMC_GetCmdResp1>
 800926a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800926c:	69fb      	ldr	r3, [r7, #28]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3720      	adds	r7, #32
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b088      	sub	sp, #32
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800927e:	2300      	movs	r3, #0
 8009280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009282:	2333      	movs	r3, #51	; 0x33
 8009284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009286:	2340      	movs	r3, #64	; 0x40
 8009288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800928e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009294:	f107 0308 	add.w	r3, r7, #8
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff fde2 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80092a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a4:	2133      	movs	r1, #51	; 0x33
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8ae 	bl	8009408 <SDMMC_GetCmdResp1>
 80092ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ae:	69fb      	ldr	r3, [r7, #28]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3720      	adds	r7, #32
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b088      	sub	sp, #32
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80092c4:	2302      	movs	r3, #2
 80092c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80092c8:	23c0      	movs	r3, #192	; 0xc0
 80092ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092cc:	2300      	movs	r3, #0
 80092ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092d6:	f107 0308 	add.w	r3, r7, #8
 80092da:	4619      	mov	r1, r3
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff fdc1 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f97c 	bl	80095e0 <SDMMC_GetCmdResp2>
 80092e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092ea:	69fb      	ldr	r3, [r7, #28]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	3720      	adds	r7, #32
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b088      	sub	sp, #32
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009302:	2309      	movs	r3, #9
 8009304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009306:	23c0      	movs	r3, #192	; 0xc0
 8009308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800930a:	2300      	movs	r3, #0
 800930c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800930e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009312:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009314:	f107 0308 	add.w	r3, r7, #8
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff fda2 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f95d 	bl	80095e0 <SDMMC_GetCmdResp2>
 8009326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009328:	69fb      	ldr	r3, [r7, #28]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b088      	sub	sp, #32
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
 800933a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009340:	2303      	movs	r3, #3
 8009342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009344:	2340      	movs	r3, #64	; 0x40
 8009346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009348:	2300      	movs	r3, #0
 800934a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800934c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009350:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009352:	f107 0308 	add.w	r3, r7, #8
 8009356:	4619      	mov	r1, r3
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f7ff fd83 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	2103      	movs	r1, #3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 f9bc 	bl	80096e0 <SDMMC_GetCmdResp6>
 8009368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800936a:	69fb      	ldr	r3, [r7, #28]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3720      	adds	r7, #32
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009382:	230d      	movs	r3, #13
 8009384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009386:	2340      	movs	r3, #64	; 0x40
 8009388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800938e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009392:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009394:	f107 0308 	add.w	r3, r7, #8
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff fd62 	bl	8008e64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80093a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a4:	210d      	movs	r1, #13
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f82e 	bl	8009408 <SDMMC_GetCmdResp1>
 80093ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ae:	69fb      	ldr	r3, [r7, #28]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80093b8:	b490      	push	{r4, r7}
 80093ba:	b082      	sub	sp, #8
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093c0:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <SDMMC_GetCmdError+0x48>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a0f      	ldr	r2, [pc, #60]	; (8009404 <SDMMC_GetCmdError+0x4c>)
 80093c6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ca:	0a5b      	lsrs	r3, r3, #9
 80093cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80093d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80093d4:	4623      	mov	r3, r4
 80093d6:	1e5c      	subs	r4, r3, #1
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d102      	bne.n	80093e2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80093e0:	e009      	b.n	80093f6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d0f2      	beq.n	80093d4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	22c5      	movs	r2, #197	; 0xc5
 80093f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bc90      	pop	{r4, r7}
 80093fe:	4770      	bx	lr
 8009400:	20000014 	.word	0x20000014
 8009404:	10624dd3 	.word	0x10624dd3

08009408 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009408:	b590      	push	{r4, r7, lr}
 800940a:	b087      	sub	sp, #28
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	460b      	mov	r3, r1
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009416:	4b6f      	ldr	r3, [pc, #444]	; (80095d4 <SDMMC_GetCmdResp1+0x1cc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a6f      	ldr	r2, [pc, #444]	; (80095d8 <SDMMC_GetCmdResp1+0x1d0>)
 800941c:	fba2 2303 	umull	r2, r3, r2, r3
 8009420:	0a5b      	lsrs	r3, r3, #9
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009428:	4623      	mov	r3, r4
 800942a:	1e5c      	subs	r4, r3, #1
 800942c:	2b00      	cmp	r3, #0
 800942e:	d102      	bne.n	8009436 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009434:	e0c9      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800943a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0f0      	beq.n	8009428 <SDMMC_GetCmdResp1+0x20>
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1eb      	bne.n	8009428 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009454:	f003 0304 	and.w	r3, r3, #4
 8009458:	2b00      	cmp	r3, #0
 800945a:	d004      	beq.n	8009466 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2204      	movs	r2, #4
 8009460:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009462:	2304      	movs	r3, #4
 8009464:	e0b1      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2201      	movs	r2, #1
 8009476:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009478:	2301      	movs	r3, #1
 800947a:	e0a6      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	22c5      	movs	r2, #197	; 0xc5
 8009480:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009482:	68f8      	ldr	r0, [r7, #12]
 8009484:	f7ff fd18 	bl	8008eb8 <SDIO_GetCommandResponse>
 8009488:	4603      	mov	r3, r0
 800948a:	461a      	mov	r2, r3
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	4293      	cmp	r3, r2
 8009490:	d001      	beq.n	8009496 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009492:	2301      	movs	r3, #1
 8009494:	e099      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009496:	2100      	movs	r1, #0
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f7ff fd1a 	bl	8008ed2 <SDIO_GetResponse>
 800949e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80094a0:	693a      	ldr	r2, [r7, #16]
 80094a2:	4b4e      	ldr	r3, [pc, #312]	; (80095dc <SDMMC_GetCmdResp1+0x1d4>)
 80094a4:	4013      	ands	r3, r2
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d101      	bne.n	80094ae <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80094aa:	2300      	movs	r3, #0
 80094ac:	e08d      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	da02      	bge.n	80094ba <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80094b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094b8:	e087      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d001      	beq.n	80094c8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80094c4:	2340      	movs	r3, #64	; 0x40
 80094c6:	e080      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d001      	beq.n	80094d6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80094d2:	2380      	movs	r3, #128	; 0x80
 80094d4:	e079      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80094e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094e4:	e071      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d002      	beq.n	80094f6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80094f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094f4:	e069      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d002      	beq.n	8009506 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009504:	e061      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009514:	e059      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009524:	e051      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009534:	e049      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009536:	693b      	ldr	r3, [r7, #16]
 8009538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009540:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009544:	e041      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800954c:	2b00      	cmp	r3, #0
 800954e:	d002      	beq.n	8009556 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009554:	e039      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d002      	beq.n	8009566 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009564:	e031      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d002      	beq.n	8009576 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009570:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009574:	e029      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d002      	beq.n	8009586 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009580:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009584:	e021      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d002      	beq.n	8009596 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009590:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009594:	e019      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800959c:	2b00      	cmp	r3, #0
 800959e:	d002      	beq.n	80095a6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80095a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80095a4:	e011      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d002      	beq.n	80095b6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80095b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80095b4:	e009      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	f003 0308 	and.w	r3, r3, #8
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80095c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80095c4:	e001      	b.n	80095ca <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	371c      	adds	r7, #28
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd90      	pop	{r4, r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20000014 	.word	0x20000014
 80095d8:	10624dd3 	.word	0x10624dd3
 80095dc:	fdffe008 	.word	0xfdffe008

080095e0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80095e0:	b490      	push	{r4, r7}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80095e8:	4b1e      	ldr	r3, [pc, #120]	; (8009664 <SDMMC_GetCmdResp2+0x84>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a1e      	ldr	r2, [pc, #120]	; (8009668 <SDMMC_GetCmdResp2+0x88>)
 80095ee:	fba2 2303 	umull	r2, r3, r2, r3
 80095f2:	0a5b      	lsrs	r3, r3, #9
 80095f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80095fc:	4623      	mov	r3, r4
 80095fe:	1e5c      	subs	r4, r3, #1
 8009600:	2b00      	cmp	r3, #0
 8009602:	d102      	bne.n	800960a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009604:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009608:	e026      	b.n	8009658 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009616:	2b00      	cmp	r3, #0
 8009618:	d0f0      	beq.n	80095fc <SDMMC_GetCmdResp2+0x1c>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009620:	2b00      	cmp	r3, #0
 8009622:	d1eb      	bne.n	80095fc <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009628:	f003 0304 	and.w	r3, r3, #4
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2204      	movs	r2, #4
 8009634:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009636:	2304      	movs	r3, #4
 8009638:	e00e      	b.n	8009658 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963e:	f003 0301 	and.w	r3, r3, #1
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800964c:	2301      	movs	r3, #1
 800964e:	e003      	b.n	8009658 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	22c5      	movs	r2, #197	; 0xc5
 8009654:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bc90      	pop	{r4, r7}
 8009660:	4770      	bx	lr
 8009662:	bf00      	nop
 8009664:	20000014 	.word	0x20000014
 8009668:	10624dd3 	.word	0x10624dd3

0800966c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800966c:	b490      	push	{r4, r7}
 800966e:	b084      	sub	sp, #16
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009674:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <SDMMC_GetCmdResp3+0x6c>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a18      	ldr	r2, [pc, #96]	; (80096dc <SDMMC_GetCmdResp3+0x70>)
 800967a:	fba2 2303 	umull	r2, r3, r2, r3
 800967e:	0a5b      	lsrs	r3, r3, #9
 8009680:	f241 3288 	movw	r2, #5000	; 0x1388
 8009684:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009688:	4623      	mov	r3, r4
 800968a:	1e5c      	subs	r4, r3, #1
 800968c:	2b00      	cmp	r3, #0
 800968e:	d102      	bne.n	8009696 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009690:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009694:	e01b      	b.n	80096ce <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800969a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d0f0      	beq.n	8009688 <SDMMC_GetCmdResp3+0x1c>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1eb      	bne.n	8009688 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d004      	beq.n	80096c6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2204      	movs	r2, #4
 80096c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096c2:	2304      	movs	r3, #4
 80096c4:	e003      	b.n	80096ce <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	22c5      	movs	r2, #197	; 0xc5
 80096ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3710      	adds	r7, #16
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bc90      	pop	{r4, r7}
 80096d6:	4770      	bx	lr
 80096d8:	20000014 	.word	0x20000014
 80096dc:	10624dd3 	.word	0x10624dd3

080096e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80096e0:	b590      	push	{r4, r7, lr}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	460b      	mov	r3, r1
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096ee:	4b34      	ldr	r3, [pc, #208]	; (80097c0 <SDMMC_GetCmdResp6+0xe0>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a34      	ldr	r2, [pc, #208]	; (80097c4 <SDMMC_GetCmdResp6+0xe4>)
 80096f4:	fba2 2303 	umull	r2, r3, r2, r3
 80096f8:	0a5b      	lsrs	r3, r3, #9
 80096fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80096fe:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009702:	4623      	mov	r3, r4
 8009704:	1e5c      	subs	r4, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d102      	bne.n	8009710 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800970a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800970e:	e052      	b.n	80097b6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009714:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0f0      	beq.n	8009702 <SDMMC_GetCmdResp6+0x22>
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1eb      	bne.n	8009702 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	2b00      	cmp	r3, #0
 8009734:	d004      	beq.n	8009740 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2204      	movs	r2, #4
 800973a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800973c:	2304      	movs	r3, #4
 800973e:	e03a      	b.n	80097b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009744:	f003 0301 	and.w	r3, r3, #1
 8009748:	2b00      	cmp	r3, #0
 800974a:	d004      	beq.n	8009756 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2201      	movs	r2, #1
 8009750:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009752:	2301      	movs	r3, #1
 8009754:	e02f      	b.n	80097b6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f7ff fbae 	bl	8008eb8 <SDIO_GetCommandResponse>
 800975c:	4603      	mov	r3, r0
 800975e:	461a      	mov	r2, r3
 8009760:	7afb      	ldrb	r3, [r7, #11]
 8009762:	4293      	cmp	r3, r2
 8009764:	d001      	beq.n	800976a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009766:	2301      	movs	r3, #1
 8009768:	e025      	b.n	80097b6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	22c5      	movs	r2, #197	; 0xc5
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009770:	2100      	movs	r1, #0
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f7ff fbad 	bl	8008ed2 <SDIO_GetResponse>
 8009778:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009780:	2b00      	cmp	r3, #0
 8009782:	d106      	bne.n	8009792 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	0c1b      	lsrs	r3, r3, #16
 8009788:	b29a      	uxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800978e:	2300      	movs	r3, #0
 8009790:	e011      	b.n	80097b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009798:	2b00      	cmp	r3, #0
 800979a:	d002      	beq.n	80097a2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800979c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097a0:	e009      	b.n	80097b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d002      	beq.n	80097b2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80097ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097b0:	e001      	b.n	80097b6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80097b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	371c      	adds	r7, #28
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd90      	pop	{r4, r7, pc}
 80097be:	bf00      	nop
 80097c0:	20000014 	.word	0x20000014
 80097c4:	10624dd3 	.word	0x10624dd3

080097c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80097c8:	b490      	push	{r4, r7}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097d0:	4b21      	ldr	r3, [pc, #132]	; (8009858 <SDMMC_GetCmdResp7+0x90>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a21      	ldr	r2, [pc, #132]	; (800985c <SDMMC_GetCmdResp7+0x94>)
 80097d6:	fba2 2303 	umull	r2, r3, r2, r3
 80097da:	0a5b      	lsrs	r3, r3, #9
 80097dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80097e4:	4623      	mov	r3, r4
 80097e6:	1e5c      	subs	r4, r3, #1
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d102      	bne.n	80097f2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097f0:	e02c      	b.n	800984c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d0f0      	beq.n	80097e4 <SDMMC_GetCmdResp7+0x1c>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1eb      	bne.n	80097e4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b00      	cmp	r3, #0
 8009816:	d004      	beq.n	8009822 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2204      	movs	r2, #4
 800981c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800981e:	2304      	movs	r3, #4
 8009820:	e014      	b.n	800984c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009826:	f003 0301 	and.w	r3, r3, #1
 800982a:	2b00      	cmp	r3, #0
 800982c:	d004      	beq.n	8009838 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	2201      	movs	r2, #1
 8009832:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009834:	2301      	movs	r3, #1
 8009836:	e009      	b.n	800984c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009840:	2b00      	cmp	r3, #0
 8009842:	d002      	beq.n	800984a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2240      	movs	r2, #64	; 0x40
 8009848:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800984a:	2300      	movs	r3, #0
  
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bc90      	pop	{r4, r7}
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	20000014 	.word	0x20000014
 800985c:	10624dd3 	.word	0x10624dd3

08009860 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009860:	b084      	sub	sp, #16
 8009862:	b580      	push	{r7, lr}
 8009864:	b084      	sub	sp, #16
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
 800986a:	f107 001c 	add.w	r0, r7, #28
 800986e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009874:	2b01      	cmp	r3, #1
 8009876:	d122      	bne.n	80098be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800988c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009890:	687a      	ldr	r2, [r7, #4]
 8009892:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d105      	bne.n	80098b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f001 fa7c 	bl	800adb0 <USB_CoreReset>
 80098b8:	4603      	mov	r3, r0
 80098ba:	73fb      	strb	r3, [r7, #15]
 80098bc:	e01a      	b.n	80098f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68db      	ldr	r3, [r3, #12]
 80098c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f001 fa70 	bl	800adb0 <USB_CoreReset>
 80098d0:	4603      	mov	r3, r0
 80098d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80098d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	639a      	str	r2, [r3, #56]	; 0x38
 80098e6:	e005      	b.n	80098f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80098f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	d10b      	bne.n	8009912 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f043 0206 	orr.w	r2, r3, #6
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	689b      	ldr	r3, [r3, #8]
 800990a:	f043 0220 	orr.w	r2, r3, #32
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009912:	7bfb      	ldrb	r3, [r7, #15]
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800991e:	b004      	add	sp, #16
 8009920:	4770      	bx	lr
	...

08009924 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009924:	b480      	push	{r7}
 8009926:	b087      	sub	sp, #28
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	4613      	mov	r3, r2
 8009930:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	2b02      	cmp	r3, #2
 8009936:	d165      	bne.n	8009a04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	4a41      	ldr	r2, [pc, #260]	; (8009a40 <USB_SetTurnaroundTime+0x11c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d906      	bls.n	800994e <USB_SetTurnaroundTime+0x2a>
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	4a40      	ldr	r2, [pc, #256]	; (8009a44 <USB_SetTurnaroundTime+0x120>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d802      	bhi.n	800994e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009948:	230f      	movs	r3, #15
 800994a:	617b      	str	r3, [r7, #20]
 800994c:	e062      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4a3c      	ldr	r2, [pc, #240]	; (8009a44 <USB_SetTurnaroundTime+0x120>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d906      	bls.n	8009964 <USB_SetTurnaroundTime+0x40>
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	4a3b      	ldr	r2, [pc, #236]	; (8009a48 <USB_SetTurnaroundTime+0x124>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d802      	bhi.n	8009964 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800995e:	230e      	movs	r3, #14
 8009960:	617b      	str	r3, [r7, #20]
 8009962:	e057      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	4a38      	ldr	r2, [pc, #224]	; (8009a48 <USB_SetTurnaroundTime+0x124>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d906      	bls.n	800997a <USB_SetTurnaroundTime+0x56>
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	4a37      	ldr	r2, [pc, #220]	; (8009a4c <USB_SetTurnaroundTime+0x128>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d802      	bhi.n	800997a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009974:	230d      	movs	r3, #13
 8009976:	617b      	str	r3, [r7, #20]
 8009978:	e04c      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	4a33      	ldr	r2, [pc, #204]	; (8009a4c <USB_SetTurnaroundTime+0x128>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d906      	bls.n	8009990 <USB_SetTurnaroundTime+0x6c>
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	4a32      	ldr	r2, [pc, #200]	; (8009a50 <USB_SetTurnaroundTime+0x12c>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d802      	bhi.n	8009990 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800998a:	230c      	movs	r3, #12
 800998c:	617b      	str	r3, [r7, #20]
 800998e:	e041      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	4a2f      	ldr	r2, [pc, #188]	; (8009a50 <USB_SetTurnaroundTime+0x12c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d906      	bls.n	80099a6 <USB_SetTurnaroundTime+0x82>
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	4a2e      	ldr	r2, [pc, #184]	; (8009a54 <USB_SetTurnaroundTime+0x130>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d802      	bhi.n	80099a6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80099a0:	230b      	movs	r3, #11
 80099a2:	617b      	str	r3, [r7, #20]
 80099a4:	e036      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80099a6:	68bb      	ldr	r3, [r7, #8]
 80099a8:	4a2a      	ldr	r2, [pc, #168]	; (8009a54 <USB_SetTurnaroundTime+0x130>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d906      	bls.n	80099bc <USB_SetTurnaroundTime+0x98>
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	4a29      	ldr	r2, [pc, #164]	; (8009a58 <USB_SetTurnaroundTime+0x134>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d802      	bhi.n	80099bc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80099b6:	230a      	movs	r3, #10
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e02b      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	4a26      	ldr	r2, [pc, #152]	; (8009a58 <USB_SetTurnaroundTime+0x134>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d906      	bls.n	80099d2 <USB_SetTurnaroundTime+0xae>
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	4a25      	ldr	r2, [pc, #148]	; (8009a5c <USB_SetTurnaroundTime+0x138>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d802      	bhi.n	80099d2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80099cc:	2309      	movs	r3, #9
 80099ce:	617b      	str	r3, [r7, #20]
 80099d0:	e020      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	4a21      	ldr	r2, [pc, #132]	; (8009a5c <USB_SetTurnaroundTime+0x138>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d906      	bls.n	80099e8 <USB_SetTurnaroundTime+0xc4>
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	4a20      	ldr	r2, [pc, #128]	; (8009a60 <USB_SetTurnaroundTime+0x13c>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d802      	bhi.n	80099e8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80099e2:	2308      	movs	r3, #8
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	e015      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	4a1d      	ldr	r2, [pc, #116]	; (8009a60 <USB_SetTurnaroundTime+0x13c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d906      	bls.n	80099fe <USB_SetTurnaroundTime+0xda>
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	4a1c      	ldr	r2, [pc, #112]	; (8009a64 <USB_SetTurnaroundTime+0x140>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d802      	bhi.n	80099fe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80099f8:	2307      	movs	r3, #7
 80099fa:	617b      	str	r3, [r7, #20]
 80099fc:	e00a      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80099fe:	2306      	movs	r3, #6
 8009a00:	617b      	str	r3, [r7, #20]
 8009a02:	e007      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d102      	bne.n	8009a10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009a0a:	2309      	movs	r3, #9
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	e001      	b.n	8009a14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009a10:	2309      	movs	r3, #9
 8009a12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	029b      	lsls	r3, r3, #10
 8009a28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	371c      	adds	r7, #28
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	00d8acbf 	.word	0x00d8acbf
 8009a44:	00e4e1bf 	.word	0x00e4e1bf
 8009a48:	00f423ff 	.word	0x00f423ff
 8009a4c:	0106737f 	.word	0x0106737f
 8009a50:	011a499f 	.word	0x011a499f
 8009a54:	01312cff 	.word	0x01312cff
 8009a58:	014ca43f 	.word	0x014ca43f
 8009a5c:	016e35ff 	.word	0x016e35ff
 8009a60:	01a6ab1f 	.word	0x01a6ab1f
 8009a64:	01e847ff 	.word	0x01e847ff

08009a68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b083      	sub	sp, #12
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	f043 0201 	orr.w	r2, r3, #1
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	370c      	adds	r7, #12
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f023 0201 	bic.w	r2, r3, #1
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	370c      	adds	r7, #12
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aaa:	4770      	bx	lr

08009aac <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ac4:	78fb      	ldrb	r3, [r7, #3]
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d106      	bne.n	8009ad8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	60da      	str	r2, [r3, #12]
 8009ad6:	e00b      	b.n	8009af0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ad8:	78fb      	ldrb	r3, [r7, #3]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d106      	bne.n	8009aec <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	60da      	str	r2, [r3, #12]
 8009aea:	e001      	b.n	8009af0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e003      	b.n	8009af8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009af0:	2032      	movs	r0, #50	; 0x32
 8009af2:	f7f9 fa33 	bl	8002f5c <HAL_Delay>

  return HAL_OK;
 8009af6:	2300      	movs	r3, #0
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3708      	adds	r7, #8
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b00:	b084      	sub	sp, #16
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b086      	sub	sp, #24
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009b0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b12:	2300      	movs	r3, #0
 8009b14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	613b      	str	r3, [r7, #16]
 8009b1e:	e009      	b.n	8009b34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	3340      	adds	r3, #64	; 0x40
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	3301      	adds	r3, #1
 8009b32:	613b      	str	r3, [r7, #16]
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	2b0e      	cmp	r3, #14
 8009b38:	d9f2      	bls.n	8009b20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d112      	bne.n	8009b66 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b44:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b50:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b5c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38
 8009b64:	e00b      	b.n	8009b7e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b76:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b84:	461a      	mov	r2, r3
 8009b86:	2300      	movs	r3, #0
 8009b88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b90:	4619      	mov	r1, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b98:	461a      	mov	r2, r3
 8009b9a:	680b      	ldr	r3, [r1, #0]
 8009b9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d10c      	bne.n	8009bbe <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d104      	bne.n	8009bb4 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009baa:	2100      	movs	r1, #0
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f961 	bl	8009e74 <USB_SetDevSpeed>
 8009bb2:	e008      	b.n	8009bc6 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009bb4:	2101      	movs	r1, #1
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f000 f95c 	bl	8009e74 <USB_SetDevSpeed>
 8009bbc:	e003      	b.n	8009bc6 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009bbe:	2103      	movs	r1, #3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 f957 	bl	8009e74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bc6:	2110      	movs	r1, #16
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f90b 	bl	8009de4 <USB_FlushTxFifo>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f929 	bl	8009e30 <USB_FlushRxFifo>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bee:	461a      	mov	r2, r3
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c06:	461a      	mov	r2, r3
 8009c08:	2300      	movs	r3, #0
 8009c0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	613b      	str	r3, [r7, #16]
 8009c10:	e043      	b.n	8009c9a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c28:	d118      	bne.n	8009c5c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10a      	bne.n	8009c46 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c42:	6013      	str	r3, [r2, #0]
 8009c44:	e013      	b.n	8009c6e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	015a      	lsls	r2, r3, #5
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c52:	461a      	mov	r2, r3
 8009c54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c58:	6013      	str	r3, [r2, #0]
 8009c5a:	e008      	b.n	8009c6e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	015a      	lsls	r2, r3, #5
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	4413      	add	r3, r2
 8009c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c68:	461a      	mov	r2, r3
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	015a      	lsls	r2, r3, #5
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	4413      	add	r3, r2
 8009c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	015a      	lsls	r2, r3, #5
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	4413      	add	r3, r2
 8009c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	3301      	adds	r3, #1
 8009c98:	613b      	str	r3, [r7, #16]
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d3b7      	bcc.n	8009c12 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	613b      	str	r3, [r7, #16]
 8009ca6:	e043      	b.n	8009d30 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	015a      	lsls	r2, r3, #5
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4413      	add	r3, r2
 8009cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009cbe:	d118      	bne.n	8009cf2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8009cc0:	693b      	ldr	r3, [r7, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d10a      	bne.n	8009cdc <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	015a      	lsls	r2, r3, #5
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009cd8:	6013      	str	r3, [r2, #0]
 8009cda:	e013      	b.n	8009d04 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce8:	461a      	mov	r2, r3
 8009cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009cee:	6013      	str	r3, [r2, #0]
 8009cf0:	e008      	b.n	8009d04 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfe:	461a      	mov	r2, r3
 8009d00:	2300      	movs	r3, #0
 8009d02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d10:	461a      	mov	r2, r3
 8009d12:	2300      	movs	r3, #0
 8009d14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d22:	461a      	mov	r2, r3
 8009d24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009d28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d2a:	693b      	ldr	r3, [r7, #16]
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d3b7      	bcc.n	8009ca8 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d4a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8009d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d111      	bne.n	8009d76 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d58:	461a      	mov	r2, r3
 8009d5a:	4b20      	ldr	r3, [pc, #128]	; (8009ddc <USB_DevInit+0x2dc>)
 8009d5c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d70:	f043 0303 	orr.w	r3, r3, #3
 8009d74:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009d82:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d105      	bne.n	8009d96 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	f043 0210 	orr.w	r2, r3, #16
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	699a      	ldr	r2, [r3, #24]
 8009d9a:	4b11      	ldr	r3, [pc, #68]	; (8009de0 <USB_DevInit+0x2e0>)
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d005      	beq.n	8009db4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	699b      	ldr	r3, [r3, #24]
 8009dac:	f043 0208 	orr.w	r2, r3, #8
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d107      	bne.n	8009dca <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dc2:	f043 0304 	orr.w	r3, r3, #4
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dd6:	b004      	add	sp, #16
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	00800100 	.word	0x00800100
 8009de0:	803c3800 	.word	0x803c3800

08009de4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	019b      	lsls	r3, r3, #6
 8009df6:	f043 0220 	orr.w	r2, r3, #32
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	3301      	adds	r3, #1
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <USB_FlushTxFifo+0x48>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d901      	bls.n	8009e10 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	e006      	b.n	8009e1e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f003 0320 	and.w	r3, r3, #32
 8009e18:	2b20      	cmp	r3, #32
 8009e1a:	d0f0      	beq.n	8009dfe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3714      	adds	r7, #20
 8009e22:	46bd      	mov	sp, r7
 8009e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e28:	4770      	bx	lr
 8009e2a:	bf00      	nop
 8009e2c:	00030d40 	.word	0x00030d40

08009e30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b085      	sub	sp, #20
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2210      	movs	r2, #16
 8009e40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	3301      	adds	r3, #1
 8009e46:	60fb      	str	r3, [r7, #12]
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	4a09      	ldr	r2, [pc, #36]	; (8009e70 <USB_FlushRxFifo+0x40>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d901      	bls.n	8009e54 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009e50:	2303      	movs	r3, #3
 8009e52:	e006      	b.n	8009e62 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	691b      	ldr	r3, [r3, #16]
 8009e58:	f003 0310 	and.w	r3, r3, #16
 8009e5c:	2b10      	cmp	r3, #16
 8009e5e:	d0f0      	beq.n	8009e42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	00030d40 	.word	0x00030d40

08009e74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	78fb      	ldrb	r3, [r7, #3]
 8009e8e:	68f9      	ldr	r1, [r7, #12]
 8009e90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e94:	4313      	orrs	r3, r2
 8009e96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b087      	sub	sp, #28
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f003 0306 	and.w	r3, r3, #6
 8009ebe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d102      	bne.n	8009ecc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	75fb      	strb	r3, [r7, #23]
 8009eca:	e00a      	b.n	8009ee2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	d002      	beq.n	8009ed8 <USB_GetDevSpeed+0x32>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	2b06      	cmp	r3, #6
 8009ed6:	d102      	bne.n	8009ede <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009ed8:	2302      	movs	r3, #2
 8009eda:	75fb      	strb	r3, [r7, #23]
 8009edc:	e001      	b.n	8009ee2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009ede:	230f      	movs	r3, #15
 8009ee0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	371c      	adds	r7, #28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	785b      	ldrb	r3, [r3, #1]
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d13a      	bne.n	8009f82 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f12:	69da      	ldr	r2, [r3, #28]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	781b      	ldrb	r3, [r3, #0]
 8009f18:	f003 030f 	and.w	r3, r3, #15
 8009f1c:	2101      	movs	r1, #1
 8009f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	68f9      	ldr	r1, [r7, #12]
 8009f26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d155      	bne.n	8009ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	015a      	lsls	r2, r3, #5
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	78db      	ldrb	r3, [r3, #3]
 8009f5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	059b      	lsls	r3, r3, #22
 8009f66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	68ba      	ldr	r2, [r7, #8]
 8009f6c:	0151      	lsls	r1, r2, #5
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	440a      	add	r2, r1
 8009f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	e036      	b.n	8009ff0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f88:	69da      	ldr	r2, [r3, #28]
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	781b      	ldrb	r3, [r3, #0]
 8009f8e:	f003 030f 	and.w	r3, r3, #15
 8009f92:	2101      	movs	r1, #1
 8009f94:	fa01 f303 	lsl.w	r3, r1, r3
 8009f98:	041b      	lsls	r3, r3, #16
 8009f9a:	68f9      	ldr	r1, [r7, #12]
 8009f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d11a      	bne.n	8009ff0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc6:	681a      	ldr	r2, [r3, #0]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	78db      	ldrb	r3, [r3, #3]
 8009fd4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009fd6:	430b      	orrs	r3, r1
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	0151      	lsls	r1, r2, #5
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	440a      	add	r2, r1
 8009fe2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
	...

0800a000 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	785b      	ldrb	r3, [r3, #1]
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d135      	bne.n	800a088 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	f003 030f 	and.w	r3, r3, #15
 800a02c:	2101      	movs	r1, #1
 800a02e:	fa01 f303 	lsl.w	r3, r1, r3
 800a032:	b29b      	uxth	r3, r3
 800a034:	43db      	mvns	r3, r3
 800a036:	68f9      	ldr	r1, [r7, #12]
 800a038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a03c:	4013      	ands	r3, r2
 800a03e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a046:	69da      	ldr	r2, [r3, #28]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	f003 030f 	and.w	r3, r3, #15
 800a050:	2101      	movs	r1, #1
 800a052:	fa01 f303 	lsl.w	r3, r1, r3
 800a056:	b29b      	uxth	r3, r3
 800a058:	43db      	mvns	r3, r3
 800a05a:	68f9      	ldr	r1, [r7, #12]
 800a05c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a060:	4013      	ands	r3, r2
 800a062:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a070:	681a      	ldr	r2, [r3, #0]
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	0159      	lsls	r1, r3, #5
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	440b      	add	r3, r1
 800a07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a07e:	4619      	mov	r1, r3
 800a080:	4b1f      	ldr	r3, [pc, #124]	; (800a100 <USB_DeactivateEndpoint+0x100>)
 800a082:	4013      	ands	r3, r2
 800a084:	600b      	str	r3, [r1, #0]
 800a086:	e034      	b.n	800a0f2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a08e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	f003 030f 	and.w	r3, r3, #15
 800a098:	2101      	movs	r1, #1
 800a09a:	fa01 f303 	lsl.w	r3, r1, r3
 800a09e:	041b      	lsls	r3, r3, #16
 800a0a0:	43db      	mvns	r3, r3
 800a0a2:	68f9      	ldr	r1, [r7, #12]
 800a0a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b2:	69da      	ldr	r2, [r3, #28]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	781b      	ldrb	r3, [r3, #0]
 800a0b8:	f003 030f 	and.w	r3, r3, #15
 800a0bc:	2101      	movs	r1, #1
 800a0be:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c2:	041b      	lsls	r3, r3, #16
 800a0c4:	43db      	mvns	r3, r3
 800a0c6:	68f9      	ldr	r1, [r7, #12]
 800a0c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	0159      	lsls	r1, r3, #5
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	440b      	add	r3, r1
 800a0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	4b05      	ldr	r3, [pc, #20]	; (800a104 <USB_DeactivateEndpoint+0x104>)
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr
 800a100:	ec337800 	.word	0xec337800
 800a104:	eff37800 	.word	0xeff37800

0800a108 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08a      	sub	sp, #40	; 0x28
 800a10c:	af02      	add	r7, sp, #8
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	4613      	mov	r3, r2
 800a114:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	785b      	ldrb	r3, [r3, #1]
 800a124:	2b01      	cmp	r3, #1
 800a126:	f040 815c 	bne.w	800a3e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d132      	bne.n	800a198 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	69ba      	ldr	r2, [r7, #24]
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	69fa      	ldr	r2, [r7, #28]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a150:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a154:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	015a      	lsls	r2, r3, #5
 800a15a:	69fb      	ldr	r3, [r7, #28]
 800a15c:	4413      	add	r3, r2
 800a15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	0151      	lsls	r1, r2, #5
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	440a      	add	r2, r1
 800a16c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a174:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a176:	69bb      	ldr	r3, [r7, #24]
 800a178:	015a      	lsls	r2, r3, #5
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	4413      	add	r3, r2
 800a17e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	0151      	lsls	r1, r2, #5
 800a188:	69fa      	ldr	r2, [r7, #28]
 800a18a:	440a      	add	r2, r1
 800a18c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a190:	0cdb      	lsrs	r3, r3, #19
 800a192:	04db      	lsls	r3, r3, #19
 800a194:	6113      	str	r3, [r2, #16]
 800a196:	e074      	b.n	800a282 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	69fb      	ldr	r3, [r7, #28]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a4:	691b      	ldr	r3, [r3, #16]
 800a1a6:	69ba      	ldr	r2, [r7, #24]
 800a1a8:	0151      	lsls	r1, r2, #5
 800a1aa:	69fa      	ldr	r2, [r7, #28]
 800a1ac:	440a      	add	r2, r1
 800a1ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1b2:	0cdb      	lsrs	r3, r3, #19
 800a1b4:	04db      	lsls	r3, r3, #19
 800a1b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c4:	691b      	ldr	r3, [r3, #16]
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	0151      	lsls	r1, r2, #5
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	440a      	add	r2, r1
 800a1ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a1d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a1da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	015a      	lsls	r2, r3, #5
 800a1e0:	69fb      	ldr	r3, [r7, #28]
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e8:	691a      	ldr	r2, [r3, #16]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	6959      	ldr	r1, [r3, #20]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	689b      	ldr	r3, [r3, #8]
 800a1f2:	440b      	add	r3, r1
 800a1f4:	1e59      	subs	r1, r3, #1
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1fe:	04d9      	lsls	r1, r3, #19
 800a200:	4b9d      	ldr	r3, [pc, #628]	; (800a478 <USB_EPStartXfer+0x370>)
 800a202:	400b      	ands	r3, r1
 800a204:	69b9      	ldr	r1, [r7, #24]
 800a206:	0148      	lsls	r0, r1, #5
 800a208:	69f9      	ldr	r1, [r7, #28]
 800a20a:	4401      	add	r1, r0
 800a20c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a210:	4313      	orrs	r3, r2
 800a212:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a220:	691a      	ldr	r2, [r3, #16]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a22a:	69b9      	ldr	r1, [r7, #24]
 800a22c:	0148      	lsls	r0, r1, #5
 800a22e:	69f9      	ldr	r1, [r7, #28]
 800a230:	4401      	add	r1, r0
 800a232:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a236:	4313      	orrs	r3, r2
 800a238:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	78db      	ldrb	r3, [r3, #3]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d11f      	bne.n	800a282 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	015a      	lsls	r2, r3, #5
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	4413      	add	r3, r2
 800a24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	69ba      	ldr	r2, [r7, #24]
 800a252:	0151      	lsls	r1, r2, #5
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	440a      	add	r2, r1
 800a258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a25c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a260:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	69ba      	ldr	r2, [r7, #24]
 800a272:	0151      	lsls	r1, r2, #5
 800a274:	69fa      	ldr	r2, [r7, #28]
 800a276:	440a      	add	r2, r1
 800a278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a27c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a280:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a282:	79fb      	ldrb	r3, [r7, #7]
 800a284:	2b01      	cmp	r3, #1
 800a286:	d14b      	bne.n	800a320 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	691b      	ldr	r3, [r3, #16]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d009      	beq.n	800a2a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a290:	69bb      	ldr	r3, [r7, #24]
 800a292:	015a      	lsls	r2, r3, #5
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	4413      	add	r3, r2
 800a298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a29c:	461a      	mov	r2, r3
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a2a4:	68bb      	ldr	r3, [r7, #8]
 800a2a6:	78db      	ldrb	r3, [r3, #3]
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	d128      	bne.n	800a2fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d110      	bne.n	800a2de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	015a      	lsls	r2, r3, #5
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	69ba      	ldr	r2, [r7, #24]
 800a2cc:	0151      	lsls	r1, r2, #5
 800a2ce:	69fa      	ldr	r2, [r7, #28]
 800a2d0:	440a      	add	r2, r1
 800a2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2da:	6013      	str	r3, [r2, #0]
 800a2dc:	e00f      	b.n	800a2fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	015a      	lsls	r2, r3, #5
 800a2e2:	69fb      	ldr	r3, [r7, #28]
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	69ba      	ldr	r2, [r7, #24]
 800a2ee:	0151      	lsls	r1, r2, #5
 800a2f0:	69fa      	ldr	r2, [r7, #28]
 800a2f2:	440a      	add	r2, r1
 800a2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2fe:	69bb      	ldr	r3, [r7, #24]
 800a300:	015a      	lsls	r2, r3, #5
 800a302:	69fb      	ldr	r3, [r7, #28]
 800a304:	4413      	add	r3, r2
 800a306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	0151      	lsls	r1, r2, #5
 800a310:	69fa      	ldr	r2, [r7, #28]
 800a312:	440a      	add	r2, r1
 800a314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	e12f      	b.n	800a580 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	015a      	lsls	r2, r3, #5
 800a324:	69fb      	ldr	r3, [r7, #28]
 800a326:	4413      	add	r3, r2
 800a328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	0151      	lsls	r1, r2, #5
 800a332:	69fa      	ldr	r2, [r7, #28]
 800a334:	440a      	add	r2, r1
 800a336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a33a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a33e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	78db      	ldrb	r3, [r3, #3]
 800a344:	2b01      	cmp	r3, #1
 800a346:	d015      	beq.n	800a374 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	695b      	ldr	r3, [r3, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	f000 8117 	beq.w	800a580 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	781b      	ldrb	r3, [r3, #0]
 800a35e:	f003 030f 	and.w	r3, r3, #15
 800a362:	2101      	movs	r1, #1
 800a364:	fa01 f303 	lsl.w	r3, r1, r3
 800a368:	69f9      	ldr	r1, [r7, #28]
 800a36a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a36e:	4313      	orrs	r3, r2
 800a370:	634b      	str	r3, [r1, #52]	; 0x34
 800a372:	e105      	b.n	800a580 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a380:	2b00      	cmp	r3, #0
 800a382:	d110      	bne.n	800a3a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a384:	69bb      	ldr	r3, [r7, #24]
 800a386:	015a      	lsls	r2, r3, #5
 800a388:	69fb      	ldr	r3, [r7, #28]
 800a38a:	4413      	add	r3, r2
 800a38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	69ba      	ldr	r2, [r7, #24]
 800a394:	0151      	lsls	r1, r2, #5
 800a396:	69fa      	ldr	r2, [r7, #28]
 800a398:	440a      	add	r2, r1
 800a39a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a39e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3a2:	6013      	str	r3, [r2, #0]
 800a3a4:	e00f      	b.n	800a3c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	0151      	lsls	r1, r2, #5
 800a3b8:	69fa      	ldr	r2, [r7, #28]
 800a3ba:	440a      	add	r2, r1
 800a3bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	68d9      	ldr	r1, [r3, #12]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	781a      	ldrb	r2, [r3, #0]
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	b298      	uxth	r0, r3
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	4603      	mov	r3, r0
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f000 fa2b 	bl	800a836 <USB_WritePacket>
 800a3e0:	e0ce      	b.n	800a580 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3e2:	69bb      	ldr	r3, [r7, #24]
 800a3e4:	015a      	lsls	r2, r3, #5
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	4413      	add	r3, r2
 800a3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	0151      	lsls	r1, r2, #5
 800a3f4:	69fa      	ldr	r2, [r7, #28]
 800a3f6:	440a      	add	r2, r1
 800a3f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3fc:	0cdb      	lsrs	r3, r3, #19
 800a3fe:	04db      	lsls	r3, r3, #19
 800a400:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	015a      	lsls	r2, r3, #5
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	4413      	add	r3, r2
 800a40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	0151      	lsls	r1, r2, #5
 800a414:	69fa      	ldr	r2, [r7, #28]
 800a416:	440a      	add	r2, r1
 800a418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a41c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a420:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a424:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	695b      	ldr	r3, [r3, #20]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d126      	bne.n	800a47c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	015a      	lsls	r2, r3, #5
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	4413      	add	r3, r2
 800a436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a43a:	691a      	ldr	r2, [r3, #16]
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	689b      	ldr	r3, [r3, #8]
 800a440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a444:	69b9      	ldr	r1, [r7, #24]
 800a446:	0148      	lsls	r0, r1, #5
 800a448:	69f9      	ldr	r1, [r7, #28]
 800a44a:	4401      	add	r1, r0
 800a44c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a450:	4313      	orrs	r3, r2
 800a452:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	69ba      	ldr	r2, [r7, #24]
 800a464:	0151      	lsls	r1, r2, #5
 800a466:	69fa      	ldr	r2, [r7, #28]
 800a468:	440a      	add	r2, r1
 800a46a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a46e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a472:	6113      	str	r3, [r2, #16]
 800a474:	e036      	b.n	800a4e4 <USB_EPStartXfer+0x3dc>
 800a476:	bf00      	nop
 800a478:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	695a      	ldr	r2, [r3, #20]
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	4413      	add	r3, r2
 800a486:	1e5a      	subs	r2, r3, #1
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a490:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	015a      	lsls	r2, r3, #5
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	4413      	add	r3, r2
 800a49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	8afb      	ldrh	r3, [r7, #22]
 800a4a2:	04d9      	lsls	r1, r3, #19
 800a4a4:	4b39      	ldr	r3, [pc, #228]	; (800a58c <USB_EPStartXfer+0x484>)
 800a4a6:	400b      	ands	r3, r1
 800a4a8:	69b9      	ldr	r1, [r7, #24]
 800a4aa:	0148      	lsls	r0, r1, #5
 800a4ac:	69f9      	ldr	r1, [r7, #28]
 800a4ae:	4401      	add	r1, r0
 800a4b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4b4:	4313      	orrs	r3, r2
 800a4b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a4b8:	69bb      	ldr	r3, [r7, #24]
 800a4ba:	015a      	lsls	r2, r3, #5
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	4413      	add	r3, r2
 800a4c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4c4:	691a      	ldr	r2, [r3, #16]
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	8af9      	ldrh	r1, [r7, #22]
 800a4cc:	fb01 f303 	mul.w	r3, r1, r3
 800a4d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4d4:	69b9      	ldr	r1, [r7, #24]
 800a4d6:	0148      	lsls	r0, r1, #5
 800a4d8:	69f9      	ldr	r1, [r7, #28]
 800a4da:	4401      	add	r1, r0
 800a4dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4e4:	79fb      	ldrb	r3, [r7, #7]
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d10d      	bne.n	800a506 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d009      	beq.n	800a506 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	68d9      	ldr	r1, [r3, #12]
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	015a      	lsls	r2, r3, #5
 800a4fa:	69fb      	ldr	r3, [r7, #28]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a502:	460a      	mov	r2, r1
 800a504:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	78db      	ldrb	r3, [r3, #3]
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d128      	bne.n	800a560 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d110      	bne.n	800a540 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	4413      	add	r3, r2
 800a526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	69ba      	ldr	r2, [r7, #24]
 800a52e:	0151      	lsls	r1, r2, #5
 800a530:	69fa      	ldr	r2, [r7, #28]
 800a532:	440a      	add	r2, r1
 800a534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a53c:	6013      	str	r3, [r2, #0]
 800a53e:	e00f      	b.n	800a560 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	015a      	lsls	r2, r3, #5
 800a544:	69fb      	ldr	r3, [r7, #28]
 800a546:	4413      	add	r3, r2
 800a548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	0151      	lsls	r1, r2, #5
 800a552:	69fa      	ldr	r2, [r7, #28]
 800a554:	440a      	add	r2, r1
 800a556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a55a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a55e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	015a      	lsls	r2, r3, #5
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	4413      	add	r3, r2
 800a568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	69ba      	ldr	r2, [r7, #24]
 800a570:	0151      	lsls	r1, r2, #5
 800a572:	69fa      	ldr	r2, [r7, #28]
 800a574:	440a      	add	r2, r1
 800a576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a57a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a57e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3720      	adds	r7, #32
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	1ff80000 	.word	0x1ff80000

0800a590 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a590:	b480      	push	{r7}
 800a592:	b087      	sub	sp, #28
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	4613      	mov	r3, r2
 800a59c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	781b      	ldrb	r3, [r3, #0]
 800a5a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	785b      	ldrb	r3, [r3, #1]
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	f040 80cd 	bne.w	800a74c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d132      	bne.n	800a620 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	693a      	ldr	r2, [r7, #16]
 800a5ca:	0151      	lsls	r1, r2, #5
 800a5cc:	697a      	ldr	r2, [r7, #20]
 800a5ce:	440a      	add	r2, r1
 800a5d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a5d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a5dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	0151      	lsls	r1, r2, #5
 800a5f0:	697a      	ldr	r2, [r7, #20]
 800a5f2:	440a      	add	r2, r1
 800a5f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	4413      	add	r3, r2
 800a606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	0151      	lsls	r1, r2, #5
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	440a      	add	r2, r1
 800a614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a618:	0cdb      	lsrs	r3, r3, #19
 800a61a:	04db      	lsls	r3, r3, #19
 800a61c:	6113      	str	r3, [r2, #16]
 800a61e:	e04e      	b.n	800a6be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	015a      	lsls	r2, r3, #5
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	4413      	add	r3, r2
 800a628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	693a      	ldr	r2, [r7, #16]
 800a630:	0151      	lsls	r1, r2, #5
 800a632:	697a      	ldr	r2, [r7, #20]
 800a634:	440a      	add	r2, r1
 800a636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a63a:	0cdb      	lsrs	r3, r3, #19
 800a63c:	04db      	lsls	r3, r3, #19
 800a63e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	693a      	ldr	r2, [r7, #16]
 800a650:	0151      	lsls	r1, r2, #5
 800a652:	697a      	ldr	r2, [r7, #20]
 800a654:	440a      	add	r2, r1
 800a656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a65a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a65e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a662:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	695a      	ldr	r2, [r3, #20]
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d903      	bls.n	800a678 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	689a      	ldr	r2, [r3, #8]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	015a      	lsls	r2, r3, #5
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	4413      	add	r3, r2
 800a680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	0151      	lsls	r1, r2, #5
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	440a      	add	r2, r1
 800a68e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a692:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a696:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a4:	691a      	ldr	r2, [r3, #16]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ae:	6939      	ldr	r1, [r7, #16]
 800a6b0:	0148      	lsls	r0, r1, #5
 800a6b2:	6979      	ldr	r1, [r7, #20]
 800a6b4:	4401      	add	r1, r0
 800a6b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a6be:	79fb      	ldrb	r3, [r7, #7]
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d11e      	bne.n	800a702 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d009      	beq.n	800a6e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6cc:	693b      	ldr	r3, [r7, #16]
 800a6ce:	015a      	lsls	r2, r3, #5
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d8:	461a      	mov	r2, r3
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	693a      	ldr	r2, [r7, #16]
 800a6f0:	0151      	lsls	r1, r2, #5
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	440a      	add	r2, r1
 800a6f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6fe:	6013      	str	r3, [r2, #0]
 800a700:	e092      	b.n	800a828 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	015a      	lsls	r2, r3, #5
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	4413      	add	r3, r2
 800a70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	0151      	lsls	r1, r2, #5
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	440a      	add	r2, r1
 800a718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a71c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a720:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	695b      	ldr	r3, [r3, #20]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d07e      	beq.n	800a828 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	f003 030f 	and.w	r3, r3, #15
 800a73a:	2101      	movs	r1, #1
 800a73c:	fa01 f303 	lsl.w	r3, r1, r3
 800a740:	6979      	ldr	r1, [r7, #20]
 800a742:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a746:	4313      	orrs	r3, r2
 800a748:	634b      	str	r3, [r1, #52]	; 0x34
 800a74a:	e06d      	b.n	800a828 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	0151      	lsls	r1, r2, #5
 800a75e:	697a      	ldr	r2, [r7, #20]
 800a760:	440a      	add	r2, r1
 800a762:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a766:	0cdb      	lsrs	r3, r3, #19
 800a768:	04db      	lsls	r3, r3, #19
 800a76a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	0151      	lsls	r1, r2, #5
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	440a      	add	r2, r1
 800a782:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a786:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a78a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a78e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	695b      	ldr	r3, [r3, #20]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d003      	beq.n	800a7a0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	689a      	ldr	r2, [r3, #8]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	0151      	lsls	r1, r2, #5
 800a7b2:	697a      	ldr	r2, [r7, #20]
 800a7b4:	440a      	add	r2, r1
 800a7b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7cc:	691a      	ldr	r2, [r3, #16]
 800a7ce:	68bb      	ldr	r3, [r7, #8]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7d6:	6939      	ldr	r1, [r7, #16]
 800a7d8:	0148      	lsls	r0, r1, #5
 800a7da:	6979      	ldr	r1, [r7, #20]
 800a7dc:	4401      	add	r1, r0
 800a7de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a7e6:	79fb      	ldrb	r3, [r7, #7]
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d10d      	bne.n	800a808 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d009      	beq.n	800a808 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	68d9      	ldr	r1, [r3, #12]
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a804:	460a      	mov	r2, r1
 800a806:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	015a      	lsls	r2, r3, #5
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	0151      	lsls	r1, r2, #5
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	440a      	add	r2, r1
 800a81e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a822:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a826:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a836:	b480      	push	{r7}
 800a838:	b089      	sub	sp, #36	; 0x24
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	60f8      	str	r0, [r7, #12]
 800a83e:	60b9      	str	r1, [r7, #8]
 800a840:	4611      	mov	r1, r2
 800a842:	461a      	mov	r2, r3
 800a844:	460b      	mov	r3, r1
 800a846:	71fb      	strb	r3, [r7, #7]
 800a848:	4613      	mov	r3, r2
 800a84a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a854:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d11a      	bne.n	800a892 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a85c:	88bb      	ldrh	r3, [r7, #4]
 800a85e:	3303      	adds	r3, #3
 800a860:	089b      	lsrs	r3, r3, #2
 800a862:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a864:	2300      	movs	r3, #0
 800a866:	61bb      	str	r3, [r7, #24]
 800a868:	e00f      	b.n	800a88a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a86a:	79fb      	ldrb	r3, [r7, #7]
 800a86c:	031a      	lsls	r2, r3, #12
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	4413      	add	r3, r2
 800a872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a876:	461a      	mov	r2, r3
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	3304      	adds	r3, #4
 800a882:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a884:	69bb      	ldr	r3, [r7, #24]
 800a886:	3301      	adds	r3, #1
 800a888:	61bb      	str	r3, [r7, #24]
 800a88a:	69ba      	ldr	r2, [r7, #24]
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d3eb      	bcc.n	800a86a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a892:	2300      	movs	r3, #0
}
 800a894:	4618      	mov	r0, r3
 800a896:	3724      	adds	r7, #36	; 0x24
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b089      	sub	sp, #36	; 0x24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	60f8      	str	r0, [r7, #12]
 800a8a8:	60b9      	str	r1, [r7, #8]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a8b6:	88fb      	ldrh	r3, [r7, #6]
 800a8b8:	3303      	adds	r3, #3
 800a8ba:	089b      	lsrs	r3, r3, #2
 800a8bc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a8be:	2300      	movs	r3, #0
 800a8c0:	61bb      	str	r3, [r7, #24]
 800a8c2:	e00b      	b.n	800a8dc <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	3304      	adds	r3, #4
 800a8d4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	61bb      	str	r3, [r7, #24]
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d3ef      	bcc.n	800a8c4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a8e4:	69fb      	ldr	r3, [r7, #28]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3724      	adds	r7, #36	; 0x24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b085      	sub	sp, #20
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	785b      	ldrb	r3, [r3, #1]
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d12c      	bne.n	800a968 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	db12      	blt.n	800a946 <USB_EPSetStall+0x54>
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00f      	beq.n	800a946 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	015a      	lsls	r2, r3, #5
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	4413      	add	r3, r2
 800a92e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	0151      	lsls	r1, r2, #5
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	440a      	add	r2, r1
 800a93c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a940:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a944:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	015a      	lsls	r2, r3, #5
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4413      	add	r3, r2
 800a94e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	0151      	lsls	r1, r2, #5
 800a958:	68fa      	ldr	r2, [r7, #12]
 800a95a:	440a      	add	r2, r1
 800a95c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a960:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a964:	6013      	str	r3, [r2, #0]
 800a966:	e02b      	b.n	800a9c0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	db12      	blt.n	800a9a0 <USB_EPSetStall+0xae>
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d00f      	beq.n	800a9a0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	015a      	lsls	r2, r3, #5
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	4413      	add	r3, r2
 800a988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	0151      	lsls	r1, r2, #5
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	440a      	add	r2, r1
 800a996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a99a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a99e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	015a      	lsls	r2, r3, #5
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	4413      	add	r3, r2
 800a9a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	0151      	lsls	r1, r2, #5
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	440a      	add	r2, r1
 800a9b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr

0800a9ce <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9ce:	b480      	push	{r7}
 800a9d0:	b085      	sub	sp, #20
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	785b      	ldrb	r3, [r3, #1]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d128      	bne.n	800aa3c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	015a      	lsls	r2, r3, #5
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	0151      	lsls	r1, r2, #5
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	440a      	add	r2, r1
 800aa00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	78db      	ldrb	r3, [r3, #3]
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d003      	beq.n	800aa1a <USB_EPClearStall+0x4c>
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	78db      	ldrb	r3, [r3, #3]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d138      	bne.n	800aa8c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68ba      	ldr	r2, [r7, #8]
 800aa2a:	0151      	lsls	r1, r2, #5
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	440a      	add	r2, r1
 800aa30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	e027      	b.n	800aa8c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	015a      	lsls	r2, r3, #5
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	4413      	add	r3, r2
 800aa44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	0151      	lsls	r1, r2, #5
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	440a      	add	r2, r1
 800aa52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa5a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	78db      	ldrb	r3, [r3, #3]
 800aa60:	2b03      	cmp	r3, #3
 800aa62:	d003      	beq.n	800aa6c <USB_EPClearStall+0x9e>
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	78db      	ldrb	r3, [r3, #3]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d10f      	bne.n	800aa8c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	015a      	lsls	r2, r3, #5
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	4413      	add	r3, r2
 800aa74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68ba      	ldr	r2, [r7, #8]
 800aa7c:	0151      	lsls	r1, r2, #5
 800aa7e:	68fa      	ldr	r2, [r7, #12]
 800aa80:	440a      	add	r2, r1
 800aa82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa8a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3714      	adds	r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b085      	sub	sp, #20
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	460b      	mov	r3, r1
 800aaa4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	68fa      	ldr	r2, [r7, #12]
 800aab4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aab8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aabc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac4:	681a      	ldr	r2, [r3, #0]
 800aac6:	78fb      	ldrb	r3, [r7, #3]
 800aac8:	011b      	lsls	r3, r3, #4
 800aaca:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800aace:	68f9      	ldr	r1, [r7, #12]
 800aad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aad4:	4313      	orrs	r3, r2
 800aad6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800aad8:	2300      	movs	r3, #0
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3714      	adds	r7, #20
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr

0800aae6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b084      	sub	sp, #16
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab00:	f023 0302 	bic.w	r3, r3, #2
 800ab04:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ab06:	2003      	movs	r0, #3
 800ab08:	f7f8 fa28 	bl	8002f5c <HAL_Delay>

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab30:	f043 0302 	orr.w	r3, r3, #2
 800ab34:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800ab36:	2003      	movs	r0, #3
 800ab38:	f7f8 fa10 	bl	8002f5c <HAL_Delay>

  return HAL_OK;
 800ab3c:	2300      	movs	r3, #0
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3710      	adds	r7, #16
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}

0800ab46 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab7e:	699b      	ldr	r3, [r3, #24]
 800ab80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	0c1b      	lsrs	r3, r3, #16
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3714      	adds	r7, #20
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b085      	sub	sp, #20
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abbc:	69db      	ldr	r3, [r3, #28]
 800abbe:	68ba      	ldr	r2, [r7, #8]
 800abc0:	4013      	ands	r3, r2
 800abc2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	b29b      	uxth	r3, r3
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3714      	adds	r7, #20
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800abe4:	78fb      	ldrb	r3, [r7, #3]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abfa:	695b      	ldr	r3, [r3, #20]
 800abfc:	68ba      	ldr	r2, [r7, #8]
 800abfe:	4013      	ands	r3, r2
 800ac00:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac02:	68bb      	ldr	r3, [r7, #8]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3714      	adds	r7, #20
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b087      	sub	sp, #28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	460b      	mov	r3, r1
 800ac1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac32:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ac34:	78fb      	ldrb	r3, [r7, #3]
 800ac36:	f003 030f 	and.w	r3, r3, #15
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ac40:	01db      	lsls	r3, r3, #7
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	693a      	ldr	r2, [r7, #16]
 800ac46:	4313      	orrs	r3, r2
 800ac48:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ac4a:	78fb      	ldrb	r3, [r7, #3]
 800ac4c:	015a      	lsls	r2, r3, #5
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	4413      	add	r3, r2
 800ac52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac56:	689b      	ldr	r3, [r3, #8]
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	4013      	ands	r3, r2
 800ac5c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ac5e:	68bb      	ldr	r3, [r7, #8]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	371c      	adds	r7, #28
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	695b      	ldr	r3, [r3, #20]
 800ac78:	f003 0301 	and.w	r3, r3, #1
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aca2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aca6:	f023 0307 	bic.w	r3, r3, #7
 800acaa:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acb2:	689b      	ldr	r3, [r3, #8]
 800acb4:	f003 0306 	and.w	r3, r3, #6
 800acb8:	2b04      	cmp	r3, #4
 800acba:	d109      	bne.n	800acd0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acca:	f043 0303 	orr.w	r3, r3, #3
 800acce:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ace2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
	...

0800acf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	460b      	mov	r3, r1
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	333c      	adds	r3, #60	; 0x3c
 800ad0a:	3304      	adds	r3, #4
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	4a26      	ldr	r2, [pc, #152]	; (800adac <USB_EP0_OutStart+0xb8>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d90a      	bls.n	800ad2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad28:	d101      	bne.n	800ad2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e037      	b.n	800ad9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad34:	461a      	mov	r2, r3
 800ad36:	2300      	movs	r3, #0
 800ad38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	697a      	ldr	r2, [r7, #20]
 800ad44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	697a      	ldr	r2, [r7, #20]
 800ad58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad5c:	f043 0318 	orr.w	r3, r3, #24
 800ad60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad68:	691b      	ldr	r3, [r3, #16]
 800ad6a:	697a      	ldr	r2, [r7, #20]
 800ad6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ad74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ad76:	7afb      	ldrb	r3, [r7, #11]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d10f      	bne.n	800ad9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad82:	461a      	mov	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	697a      	ldr	r2, [r7, #20]
 800ad92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ad9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	371c      	adds	r7, #28
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	4f54300a 	.word	0x4f54300a

0800adb0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800adb8:	2300      	movs	r3, #0
 800adba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3301      	adds	r3, #1
 800adc0:	60fb      	str	r3, [r7, #12]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	4a13      	ldr	r2, [pc, #76]	; (800ae14 <USB_CoreReset+0x64>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d901      	bls.n	800adce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800adca:	2303      	movs	r3, #3
 800adcc:	e01b      	b.n	800ae06 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	2b00      	cmp	r3, #0
 800add4:	daf2      	bge.n	800adbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800add6:	2300      	movs	r3, #0
 800add8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	f043 0201 	orr.w	r2, r3, #1
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3301      	adds	r3, #1
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	4a09      	ldr	r2, [pc, #36]	; (800ae14 <USB_CoreReset+0x64>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d901      	bls.n	800adf8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800adf4:	2303      	movs	r3, #3
 800adf6:	e006      	b.n	800ae06 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	f003 0301 	and.w	r3, r3, #1
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	d0f0      	beq.n	800ade6 <USB_CoreReset+0x36>

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	00030d40 	.word	0x00030d40

0800ae18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ae1c:	4904      	ldr	r1, [pc, #16]	; (800ae30 <MX_FATFS_Init+0x18>)
 800ae1e:	4805      	ldr	r0, [pc, #20]	; (800ae34 <MX_FATFS_Init+0x1c>)
 800ae20:	f001 fe36 	bl	800ca90 <FATFS_LinkDriver>
 800ae24:	4603      	mov	r3, r0
 800ae26:	461a      	mov	r2, r3
 800ae28:	4b03      	ldr	r3, [pc, #12]	; (800ae38 <MX_FATFS_Init+0x20>)
 800ae2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800ae2c:	bf00      	nop
 800ae2e:	bd80      	pop	{r7, pc}
 800ae30:	20000c48 	.word	0x20000c48
 800ae34:	08011a9c 	.word	0x08011a9c
 800ae38:	20000c44 	.word	0x20000c44

0800ae3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ae46:	f000 f871 	bl	800af2c <BSP_SD_IsDetected>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b01      	cmp	r3, #1
 800ae4e:	d001      	beq.n	800ae54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e012      	b.n	800ae7a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ae54:	480b      	ldr	r0, [pc, #44]	; (800ae84 <BSP_SD_Init+0x48>)
 800ae56:	f7fb fcc5 	bl	80067e4 <HAL_SD_Init>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ae5e:	79fb      	ldrb	r3, [r7, #7]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d109      	bne.n	800ae78 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ae64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ae68:	4806      	ldr	r0, [pc, #24]	; (800ae84 <BSP_SD_Init+0x48>)
 800ae6a:	f7fc faa3 	bl	80073b4 <HAL_SD_ConfigWideBusOperation>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d001      	beq.n	800ae78 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ae78:	79fb      	ldrb	r3, [r7, #7]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20000b64 	.word	0x20000b64

0800ae88 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b086      	sub	sp, #24
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ae94:	2300      	movs	r3, #0
 800ae96:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68ba      	ldr	r2, [r7, #8]
 800ae9c:	68f9      	ldr	r1, [r7, #12]
 800ae9e:	4806      	ldr	r0, [pc, #24]	; (800aeb8 <BSP_SD_ReadBlocks_DMA+0x30>)
 800aea0:	f7fb fd30 	bl	8006904 <HAL_SD_ReadBlocks_DMA>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d001      	beq.n	800aeae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800aeae:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3718      	adds	r7, #24
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	20000b64 	.word	0x20000b64

0800aebc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	60f8      	str	r0, [r7, #12]
 800aec4:	60b9      	str	r1, [r7, #8]
 800aec6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800aec8:	2300      	movs	r3, #0
 800aeca:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68ba      	ldr	r2, [r7, #8]
 800aed0:	68f9      	ldr	r1, [r7, #12]
 800aed2:	4806      	ldr	r0, [pc, #24]	; (800aeec <BSP_SD_WriteBlocks_DMA+0x30>)
 800aed4:	f7fb fe00 	bl	8006ad8 <HAL_SD_WriteBlocks_DMA>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d001      	beq.n	800aee2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800aee2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3718      	adds	r7, #24
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	20000b64 	.word	0x20000b64

0800aef0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800aef4:	4805      	ldr	r0, [pc, #20]	; (800af0c <BSP_SD_GetCardState+0x1c>)
 800aef6:	f7fc fad9 	bl	80074ac <HAL_SD_GetCardState>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b04      	cmp	r3, #4
 800aefe:	bf14      	ite	ne
 800af00:	2301      	movne	r3, #1
 800af02:	2300      	moveq	r3, #0
 800af04:	b2db      	uxtb	r3, r3
}
 800af06:	4618      	mov	r0, r3
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	20000b64 	.word	0x20000b64

0800af10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b082      	sub	sp, #8
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800af18:	6879      	ldr	r1, [r7, #4]
 800af1a:	4803      	ldr	r0, [pc, #12]	; (800af28 <BSP_SD_GetCardInfo+0x18>)
 800af1c:	f7fc fa1e 	bl	800735c <HAL_SD_GetCardInfo>
}
 800af20:	bf00      	nop
 800af22:	3708      	adds	r7, #8
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20000b64 	.word	0x20000b64

0800af2c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b082      	sub	sp, #8
 800af30:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800af32:	2301      	movs	r3, #1
 800af34:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800af36:	f000 f80b 	bl	800af50 <BSP_PlatformIsDetected>
 800af3a:	4603      	mov	r3, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800af40:	2300      	movs	r3, #0
 800af42:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800af44:	79fb      	ldrb	r3, [r7, #7]
 800af46:	b2db      	uxtb	r3, r3
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800af56:	2301      	movs	r3, #1
 800af58:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800af5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800af5e:	4806      	ldr	r0, [pc, #24]	; (800af78 <BSP_PlatformIsDetected+0x28>)
 800af60:	f7f8 fe66 	bl	8003c30 <HAL_GPIO_ReadPin>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	d001      	beq.n	800af6e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800af6a:	2300      	movs	r3, #0
 800af6c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800af6e:	79fb      	ldrb	r3, [r7, #7]
}  
 800af70:	4618      	mov	r0, r3
 800af72:	3708      	adds	r7, #8
 800af74:	46bd      	mov	sp, r7
 800af76:	bd80      	pop	{r7, pc}
 800af78:	40020000 	.word	0x40020000

0800af7c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800af84:	f7f7 ffde 	bl	8002f44 <HAL_GetTick>
 800af88:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800af8a:	e006      	b.n	800af9a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800af8c:	f7ff ffb0 	bl	800aef0 <BSP_SD_GetCardState>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d101      	bne.n	800af9a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800af96:	2300      	movs	r3, #0
 800af98:	e009      	b.n	800afae <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800af9a:	f7f7 ffd3 	bl	8002f44 <HAL_GetTick>
 800af9e:	4602      	mov	r2, r0
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d8f0      	bhi.n	800af8c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800afaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}
	...

0800afb8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	4603      	mov	r3, r0
 800afc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800afc2:	4b0b      	ldr	r3, [pc, #44]	; (800aff0 <SD_CheckStatus+0x38>)
 800afc4:	2201      	movs	r2, #1
 800afc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800afc8:	f7ff ff92 	bl	800aef0 <BSP_SD_GetCardState>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d107      	bne.n	800afe2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800afd2:	4b07      	ldr	r3, [pc, #28]	; (800aff0 <SD_CheckStatus+0x38>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	b2db      	uxtb	r3, r3
 800afd8:	f023 0301 	bic.w	r3, r3, #1
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <SD_CheckStatus+0x38>)
 800afe0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800afe2:	4b03      	ldr	r3, [pc, #12]	; (800aff0 <SD_CheckStatus+0x38>)
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	b2db      	uxtb	r3, r3
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	2000001d 	.word	0x2000001d

0800aff4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	4603      	mov	r3, r0
 800affc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800affe:	f7ff ff1d 	bl	800ae3c <BSP_SD_Init>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d107      	bne.n	800b018 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b008:	79fb      	ldrb	r3, [r7, #7]
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7ff ffd4 	bl	800afb8 <SD_CheckStatus>
 800b010:	4603      	mov	r3, r0
 800b012:	461a      	mov	r2, r3
 800b014:	4b04      	ldr	r3, [pc, #16]	; (800b028 <SD_initialize+0x34>)
 800b016:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800b018:	4b03      	ldr	r3, [pc, #12]	; (800b028 <SD_initialize+0x34>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	b2db      	uxtb	r3, r3
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	2000001d 	.word	0x2000001d

0800b02c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	4603      	mov	r3, r0
 800b034:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b036:	79fb      	ldrb	r3, [r7, #7]
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff ffbd 	bl	800afb8 <SD_CheckStatus>
 800b03e:	4603      	mov	r3, r0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60b9      	str	r1, [r7, #8]
 800b050:	607a      	str	r2, [r7, #4]
 800b052:	603b      	str	r3, [r7, #0]
 800b054:	4603      	mov	r3, r0
 800b056:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b058:	2301      	movs	r3, #1
 800b05a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b05c:	f247 5030 	movw	r0, #30000	; 0x7530
 800b060:	f7ff ff8c 	bl	800af7c <SD_CheckStatusWithTimeout>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	da01      	bge.n	800b06e <SD_read+0x26>
  {
    return res;
 800b06a:	7ffb      	ldrb	r3, [r7, #31]
 800b06c:	e08b      	b.n	800b186 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	f003 0303 	and.w	r3, r3, #3
 800b074:	2b00      	cmp	r3, #0
 800b076:	f040 8085 	bne.w	800b184 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b07a:	683a      	ldr	r2, [r7, #0]
 800b07c:	6879      	ldr	r1, [r7, #4]
 800b07e:	68b8      	ldr	r0, [r7, #8]
 800b080:	f7ff ff02 	bl	800ae88 <BSP_SD_ReadBlocks_DMA>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d133      	bne.n	800b0f2 <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b08a:	4b41      	ldr	r3, [pc, #260]	; (800b190 <SD_read+0x148>)
 800b08c:	2200      	movs	r2, #0
 800b08e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b090:	f7f7 ff58 	bl	8002f44 <HAL_GetTick>
 800b094:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b096:	bf00      	nop
 800b098:	4b3d      	ldr	r3, [pc, #244]	; (800b190 <SD_read+0x148>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d108      	bne.n	800b0b2 <SD_read+0x6a>
 800b0a0:	f7f7 ff50 	bl	8002f44 <HAL_GetTick>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	f247 522f 	movw	r2, #29999	; 0x752f
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d9f2      	bls.n	800b098 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800b0b2:	4b37      	ldr	r3, [pc, #220]	; (800b190 <SD_read+0x148>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d102      	bne.n	800b0c0 <SD_read+0x78>
      {
        res = RES_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	77fb      	strb	r3, [r7, #31]
 800b0be:	e061      	b.n	800b184 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800b0c0:	4b33      	ldr	r3, [pc, #204]	; (800b190 <SD_read+0x148>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b0c6:	f7f7 ff3d 	bl	8002f44 <HAL_GetTick>
 800b0ca:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b0cc:	e007      	b.n	800b0de <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b0ce:	f7ff ff0f 	bl	800aef0 <BSP_SD_GetCardState>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <SD_read+0x96>
          {
            res = RES_OK;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b0dc:	e052      	b.n	800b184 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b0de:	f7f7 ff31 	bl	8002f44 <HAL_GetTick>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	f247 522f 	movw	r2, #29999	; 0x752f
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d9ee      	bls.n	800b0ce <SD_read+0x86>
 800b0f0:	e048      	b.n	800b184 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	61bb      	str	r3, [r7, #24]
 800b0f6:	e034      	b.n	800b162 <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	1c5a      	adds	r2, r3, #1
 800b0fc:	607a      	str	r2, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	4619      	mov	r1, r3
 800b102:	4824      	ldr	r0, [pc, #144]	; (800b194 <SD_read+0x14c>)
 800b104:	f7ff fec0 	bl	800ae88 <BSP_SD_ReadBlocks_DMA>
 800b108:	4603      	mov	r3, r0
 800b10a:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b10c:	7fbb      	ldrb	r3, [r7, #30]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d12c      	bne.n	800b16c <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800b112:	4b1f      	ldr	r3, [pc, #124]	; (800b190 <SD_read+0x148>)
 800b114:	2200      	movs	r2, #0
 800b116:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800b118:	f7f7 ff14 	bl	8002f44 <HAL_GetTick>
 800b11c:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b11e:	bf00      	nop
 800b120:	4b1b      	ldr	r3, [pc, #108]	; (800b190 <SD_read+0x148>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d108      	bne.n	800b13a <SD_read+0xf2>
 800b128:	f7f7 ff0c 	bl	8002f44 <HAL_GetTick>
 800b12c:	4602      	mov	r2, r0
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	f247 522f 	movw	r2, #29999	; 0x752f
 800b136:	4293      	cmp	r3, r2
 800b138:	d9f2      	bls.n	800b120 <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800b13a:	4b15      	ldr	r3, [pc, #84]	; (800b190 <SD_read+0x148>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d016      	beq.n	800b170 <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	4a13      	ldr	r2, [pc, #76]	; (800b194 <SD_read+0x14c>)
 800b146:	4618      	mov	r0, r3
 800b148:	4611      	mov	r1, r2
 800b14a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b14e:	461a      	mov	r2, r3
 800b150:	f002 fa20 	bl	800d594 <memcpy>
          buff += BLOCKSIZE;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b15a:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800b15c:	69bb      	ldr	r3, [r7, #24]
 800b15e:	3301      	adds	r3, #1
 800b160:	61bb      	str	r3, [r7, #24]
 800b162:	69bb      	ldr	r3, [r7, #24]
 800b164:	683a      	ldr	r2, [r7, #0]
 800b166:	429a      	cmp	r2, r3
 800b168:	d8c6      	bhi.n	800b0f8 <SD_read+0xb0>
 800b16a:	e002      	b.n	800b172 <SD_read+0x12a>
        }
        else
        {
          break;
 800b16c:	bf00      	nop
 800b16e:	e000      	b.n	800b172 <SD_read+0x12a>
            break;
 800b170:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	683a      	ldr	r2, [r7, #0]
 800b176:	429a      	cmp	r2, r3
 800b178:	d104      	bne.n	800b184 <SD_read+0x13c>
 800b17a:	7fbb      	ldrb	r3, [r7, #30]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <SD_read+0x13c>
        res = RES_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800b184:	7ffb      	ldrb	r3, [r7, #31]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3720      	adds	r7, #32
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop
 800b190:	20000784 	.word	0x20000784
 800b194:	20000580 	.word	0x20000580

0800b198 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b088      	sub	sp, #32
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60b9      	str	r1, [r7, #8]
 800b1a0:	607a      	str	r2, [r7, #4]
 800b1a2:	603b      	str	r3, [r7, #0]
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800b1ac:	4b4c      	ldr	r3, [pc, #304]	; (800b2e0 <SD_write+0x148>)
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b1b2:	f247 5030 	movw	r0, #30000	; 0x7530
 800b1b6:	f7ff fee1 	bl	800af7c <SD_CheckStatusWithTimeout>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	da01      	bge.n	800b1c4 <SD_write+0x2c>
  {
    return res;
 800b1c0:	7ffb      	ldrb	r3, [r7, #31]
 800b1c2:	e088      	b.n	800b2d6 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	f003 0303 	and.w	r3, r3, #3
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f040 8082 	bne.w	800b2d4 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b1d0:	683a      	ldr	r2, [r7, #0]
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	68b8      	ldr	r0, [r7, #8]
 800b1d6:	f7ff fe71 	bl	800aebc <BSP_SD_WriteBlocks_DMA>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d130      	bne.n	800b242 <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b1e0:	f7f7 feb0 	bl	8002f44 <HAL_GetTick>
 800b1e4:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b1e6:	bf00      	nop
 800b1e8:	4b3d      	ldr	r3, [pc, #244]	; (800b2e0 <SD_write+0x148>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d108      	bne.n	800b202 <SD_write+0x6a>
 800b1f0:	f7f7 fea8 	bl	8002f44 <HAL_GetTick>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	f247 522f 	movw	r2, #29999	; 0x752f
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d9f2      	bls.n	800b1e8 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800b202:	4b37      	ldr	r3, [pc, #220]	; (800b2e0 <SD_write+0x148>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d102      	bne.n	800b210 <SD_write+0x78>
      {
        res = RES_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	77fb      	strb	r3, [r7, #31]
 800b20e:	e061      	b.n	800b2d4 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800b210:	4b33      	ldr	r3, [pc, #204]	; (800b2e0 <SD_write+0x148>)
 800b212:	2200      	movs	r2, #0
 800b214:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b216:	f7f7 fe95 	bl	8002f44 <HAL_GetTick>
 800b21a:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b21c:	e007      	b.n	800b22e <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b21e:	f7ff fe67 	bl	800aef0 <BSP_SD_GetCardState>
 800b222:	4603      	mov	r3, r0
 800b224:	2b00      	cmp	r3, #0
 800b226:	d102      	bne.n	800b22e <SD_write+0x96>
          {
            res = RES_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	77fb      	strb	r3, [r7, #31]
            break;
 800b22c:	e052      	b.n	800b2d4 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b22e:	f7f7 fe89 	bl	8002f44 <HAL_GetTick>
 800b232:	4602      	mov	r2, r0
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	1ad3      	subs	r3, r2, r3
 800b238:	f247 522f 	movw	r2, #29999	; 0x752f
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d9ee      	bls.n	800b21e <SD_write+0x86>
 800b240:	e048      	b.n	800b2d4 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800b242:	2300      	movs	r3, #0
 800b244:	61bb      	str	r3, [r7, #24]
 800b246:	e034      	b.n	800b2b2 <SD_write+0x11a>
      {
        WriteStatus = 0;
 800b248:	4b25      	ldr	r3, [pc, #148]	; (800b2e0 <SD_write+0x148>)
 800b24a:	2200      	movs	r2, #0
 800b24c:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	2201      	movs	r2, #1
 800b256:	4619      	mov	r1, r3
 800b258:	4822      	ldr	r0, [pc, #136]	; (800b2e4 <SD_write+0x14c>)
 800b25a:	f7ff fe2f 	bl	800aebc <BSP_SD_WriteBlocks_DMA>
 800b25e:	4603      	mov	r3, r0
 800b260:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800b262:	7fbb      	ldrb	r3, [r7, #30]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d129      	bne.n	800b2bc <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800b268:	f7f7 fe6c 	bl	8002f44 <HAL_GetTick>
 800b26c:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b26e:	bf00      	nop
 800b270:	4b1b      	ldr	r3, [pc, #108]	; (800b2e0 <SD_write+0x148>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d108      	bne.n	800b28a <SD_write+0xf2>
 800b278:	f7f7 fe64 	bl	8002f44 <HAL_GetTick>
 800b27c:	4602      	mov	r2, r0
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	f247 522f 	movw	r2, #29999	; 0x752f
 800b286:	4293      	cmp	r3, r2
 800b288:	d9f2      	bls.n	800b270 <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800b28a:	4b15      	ldr	r3, [pc, #84]	; (800b2e0 <SD_write+0x148>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d016      	beq.n	800b2c0 <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	4a13      	ldr	r2, [pc, #76]	; (800b2e4 <SD_write+0x14c>)
 800b296:	4618      	mov	r0, r3
 800b298:	4611      	mov	r1, r2
 800b29a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f002 f978 	bl	800d594 <memcpy>
          buff += BLOCKSIZE;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b2aa:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	61bb      	str	r3, [r7, #24]
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	683a      	ldr	r2, [r7, #0]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d8c6      	bhi.n	800b248 <SD_write+0xb0>
 800b2ba:	e002      	b.n	800b2c2 <SD_write+0x12a>
        }
        else
        {
          break;
 800b2bc:	bf00      	nop
 800b2be:	e000      	b.n	800b2c2 <SD_write+0x12a>
            break;
 800b2c0:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	683a      	ldr	r2, [r7, #0]
 800b2c6:	429a      	cmp	r2, r3
 800b2c8:	d104      	bne.n	800b2d4 <SD_write+0x13c>
 800b2ca:	7fbb      	ldrb	r3, [r7, #30]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <SD_write+0x13c>
        res = RES_OK;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800b2d4:	7ffb      	ldrb	r3, [r7, #31]
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3720      	adds	r7, #32
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20000780 	.word	0x20000780
 800b2e4:	20000580 	.word	0x20000580

0800b2e8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b08c      	sub	sp, #48	; 0x30
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	603a      	str	r2, [r7, #0]
 800b2f2:	71fb      	strb	r3, [r7, #7]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b2fe:	4b25      	ldr	r3, [pc, #148]	; (800b394 <SD_ioctl+0xac>)
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	b2db      	uxtb	r3, r3
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <SD_ioctl+0x28>
 800b30c:	2303      	movs	r3, #3
 800b30e:	e03c      	b.n	800b38a <SD_ioctl+0xa2>

  switch (cmd)
 800b310:	79bb      	ldrb	r3, [r7, #6]
 800b312:	2b03      	cmp	r3, #3
 800b314:	d834      	bhi.n	800b380 <SD_ioctl+0x98>
 800b316:	a201      	add	r2, pc, #4	; (adr r2, 800b31c <SD_ioctl+0x34>)
 800b318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b31c:	0800b32d 	.word	0x0800b32d
 800b320:	0800b335 	.word	0x0800b335
 800b324:	0800b34d 	.word	0x0800b34d
 800b328:	0800b367 	.word	0x0800b367
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b332:	e028      	b.n	800b386 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b334:	f107 030c 	add.w	r3, r7, #12
 800b338:	4618      	mov	r0, r3
 800b33a:	f7ff fde9 	bl	800af10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b33e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b344:	2300      	movs	r3, #0
 800b346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b34a:	e01c      	b.n	800b386 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b34c:	f107 030c 	add.w	r3, r7, #12
 800b350:	4618      	mov	r0, r3
 800b352:	f7ff fddd 	bl	800af10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b358:	b29a      	uxth	r2, r3
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b35e:	2300      	movs	r3, #0
 800b360:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b364:	e00f      	b.n	800b386 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b366:	f107 030c 	add.w	r3, r7, #12
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7ff fdd0 	bl	800af10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b372:	0a5a      	lsrs	r2, r3, #9
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b37e:	e002      	b.n	800b386 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b380:	2304      	movs	r3, #4
 800b382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3730      	adds	r7, #48	; 0x30
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	2000001d 	.word	0x2000001d

0800b398 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	7c1b      	ldrb	r3, [r3, #16]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d115      	bne.n	800b3dc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	2181      	movs	r1, #129	; 0x81
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f001 ff5e 	bl	800d27a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b3c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	2101      	movs	r1, #1
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f001 ff54 	bl	800d27a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800b3da:	e012      	b.n	800b402 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3dc:	2340      	movs	r3, #64	; 0x40
 800b3de:	2202      	movs	r2, #2
 800b3e0:	2181      	movs	r1, #129	; 0x81
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 ff49 	bl	800d27a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b3ee:	2340      	movs	r3, #64	; 0x40
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	2101      	movs	r1, #1
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f001 ff40 	bl	800d27a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b402:	2308      	movs	r3, #8
 800b404:	2203      	movs	r2, #3
 800b406:	2182      	movs	r1, #130	; 0x82
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f001 ff36 	bl	800d27a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2201      	movs	r2, #1
 800b412:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800b414:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b418:	f002 f8ac 	bl	800d574 <malloc>
 800b41c:	4603      	mov	r3, r0
 800b41e:	461a      	mov	r2, r3
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d102      	bne.n	800b436 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b430:	2301      	movs	r3, #1
 800b432:	73fb      	strb	r3, [r7, #15]
 800b434:	e026      	b.n	800b484 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b43c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	2200      	movs	r2, #0
 800b44c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	2200      	movs	r2, #0
 800b454:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	7c1b      	ldrb	r3, [r3, #16]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d109      	bne.n	800b474 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b466:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b46a:	2101      	movs	r1, #1
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f001 fff5 	bl	800d45c <USBD_LL_PrepareReceive>
 800b472:	e007      	b.n	800b484 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b47a:	2340      	movs	r3, #64	; 0x40
 800b47c:	2101      	movs	r1, #1
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f001 ffec 	bl	800d45c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b484:	7bfb      	ldrb	r3, [r7, #15]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	460b      	mov	r3, r1
 800b498:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b49a:	2300      	movs	r3, #0
 800b49c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b49e:	2181      	movs	r1, #129	; 0x81
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f001 ff10 	bl	800d2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b4ac:	2101      	movs	r1, #1
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f001 ff09 	bl	800d2c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b4bc:	2182      	movs	r1, #130	; 0x82
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f001 ff01 	bl	800d2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d00e      	beq.n	800b4f2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b4da:	685b      	ldr	r3, [r3, #4]
 800b4dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f002 f84d 	bl	800d584 <free>
    pdev->pClassData = NULL;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800b4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}

0800b4fc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b086      	sub	sp, #24
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b50c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b50e:	2300      	movs	r3, #0
 800b510:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b512:	2300      	movs	r3, #0
 800b514:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b522:	2b00      	cmp	r3, #0
 800b524:	d039      	beq.n	800b59a <USBD_CDC_Setup+0x9e>
 800b526:	2b20      	cmp	r3, #32
 800b528:	d17c      	bne.n	800b624 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	88db      	ldrh	r3, [r3, #6]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d029      	beq.n	800b586 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	b25b      	sxtb	r3, r3
 800b538:	2b00      	cmp	r3, #0
 800b53a:	da11      	bge.n	800b560 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b542:	689b      	ldr	r3, [r3, #8]
 800b544:	683a      	ldr	r2, [r7, #0]
 800b546:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800b548:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b54a:	683a      	ldr	r2, [r7, #0]
 800b54c:	88d2      	ldrh	r2, [r2, #6]
 800b54e:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b550:	6939      	ldr	r1, [r7, #16]
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	88db      	ldrh	r3, [r3, #6]
 800b556:	461a      	mov	r2, r3
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f001 f9c9 	bl	800c8f0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800b55e:	e068      	b.n	800b632 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	785a      	ldrb	r2, [r3, #1]
 800b564:	693b      	ldr	r3, [r7, #16]
 800b566:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	88db      	ldrh	r3, [r3, #6]
 800b56e:	b2da      	uxtb	r2, r3
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b576:	6939      	ldr	r1, [r7, #16]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	88db      	ldrh	r3, [r3, #6]
 800b57c:	461a      	mov	r2, r3
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f001 f9e4 	bl	800c94c <USBD_CtlPrepareRx>
    break;
 800b584:	e055      	b.n	800b632 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	7850      	ldrb	r0, [r2, #1]
 800b592:	2200      	movs	r2, #0
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	4798      	blx	r3
    break;
 800b598:	e04b      	b.n	800b632 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	785b      	ldrb	r3, [r3, #1]
 800b59e:	2b0a      	cmp	r3, #10
 800b5a0:	d017      	beq.n	800b5d2 <USBD_CDC_Setup+0xd6>
 800b5a2:	2b0b      	cmp	r3, #11
 800b5a4:	d029      	beq.n	800b5fa <USBD_CDC_Setup+0xfe>
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d133      	bne.n	800b612 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b5b0:	2b03      	cmp	r3, #3
 800b5b2:	d107      	bne.n	800b5c4 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800b5b4:	f107 030c 	add.w	r3, r7, #12
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f001 f997 	bl	800c8f0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b5c2:	e02e      	b.n	800b622 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f001 f927 	bl	800c81a <USBD_CtlError>
			  ret = USBD_FAIL;
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b5d0:	e027      	b.n	800b622 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b5d8:	2b03      	cmp	r3, #3
 800b5da:	d107      	bne.n	800b5ec <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800b5dc:	f107 030f 	add.w	r3, r7, #15
 800b5e0:	2201      	movs	r2, #1
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f001 f983 	bl	800c8f0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800b5ea:	e01a      	b.n	800b622 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800b5ec:	6839      	ldr	r1, [r7, #0]
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	f001 f913 	bl	800c81a <USBD_CtlError>
			  ret = USBD_FAIL;
 800b5f4:	2302      	movs	r3, #2
 800b5f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b5f8:	e013      	b.n	800b622 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b600:	2b03      	cmp	r3, #3
 800b602:	d00d      	beq.n	800b620 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f001 f907 	bl	800c81a <USBD_CtlError>
			  ret = USBD_FAIL;
 800b60c:	2302      	movs	r3, #2
 800b60e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b610:	e006      	b.n	800b620 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f001 f900 	bl	800c81a <USBD_CtlError>
      ret = USBD_FAIL;
 800b61a:	2302      	movs	r3, #2
 800b61c:	75fb      	strb	r3, [r7, #23]
      break;
 800b61e:	e000      	b.n	800b622 <USBD_CDC_Setup+0x126>
      break;
 800b620:	bf00      	nop
    }
    break;
 800b622:	e006      	b.n	800b632 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800b624:	6839      	ldr	r1, [r7, #0]
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f001 f8f7 	bl	800c81a <USBD_CtlError>
    ret = USBD_FAIL;
 800b62c:	2302      	movs	r3, #2
 800b62e:	75fb      	strb	r3, [r7, #23]
    break;
 800b630:	bf00      	nop
  }

  return ret;
 800b632:	7dfb      	ldrb	r3, [r7, #23]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}

0800b63c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	460b      	mov	r3, r1
 800b646:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b64e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800b656:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d03a      	beq.n	800b6d8 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	6879      	ldr	r1, [r7, #4]
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	440b      	add	r3, r1
 800b670:	331c      	adds	r3, #28
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d029      	beq.n	800b6cc <USBD_CDC_DataIn+0x90>
 800b678:	78fa      	ldrb	r2, [r7, #3]
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	4613      	mov	r3, r2
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	4413      	add	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	440b      	add	r3, r1
 800b686:	331c      	adds	r3, #28
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	78f9      	ldrb	r1, [r7, #3]
 800b68c:	68b8      	ldr	r0, [r7, #8]
 800b68e:	460b      	mov	r3, r1
 800b690:	00db      	lsls	r3, r3, #3
 800b692:	1a5b      	subs	r3, r3, r1
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4403      	add	r3, r0
 800b698:	3344      	adds	r3, #68	; 0x44
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6a0:	fb03 f301 	mul.w	r3, r3, r1
 800b6a4:	1ad3      	subs	r3, r2, r3
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d110      	bne.n	800b6cc <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b6aa:	78fa      	ldrb	r2, [r7, #3]
 800b6ac:	6879      	ldr	r1, [r7, #4]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	440b      	add	r3, r1
 800b6b8:	331c      	adds	r3, #28
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800b6be:	78f9      	ldrb	r1, [r7, #3]
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	6878      	ldr	r0, [r7, #4]
 800b6c6:	f001 fea6 	bl	800d416 <USBD_LL_Transmit>
 800b6ca:	e003      	b.n	800b6d4 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	e000      	b.n	800b6da <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b6d8:	2302      	movs	r3, #2
  }
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}

0800b6e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b6e2:	b580      	push	{r7, lr}
 800b6e4:	b084      	sub	sp, #16
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	6078      	str	r0, [r7, #4]
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b6f4:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800b6f6:	78fb      	ldrb	r3, [r7, #3]
 800b6f8:	4619      	mov	r1, r3
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f001 fed1 	bl	800d4a2 <USBD_LL_GetRxDataSize>
 800b700:	4602      	mov	r2, r0
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00d      	beq.n	800b72e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b718:	68db      	ldr	r3, [r3, #12]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b726:	4611      	mov	r1, r2
 800b728:	4798      	blx	r3

    return USBD_OK;
 800b72a:	2300      	movs	r3, #0
 800b72c:	e000      	b.n	800b730 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b72e:	2302      	movs	r3, #2
  }
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b746:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d015      	beq.n	800b77e <USBD_CDC_EP0_RxReady+0x46>
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b758:	2bff      	cmp	r3, #255	; 0xff
 800b75a:	d010      	beq.n	800b77e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b762:	689b      	ldr	r3, [r3, #8]
 800b764:	68fa      	ldr	r2, [r7, #12]
 800b766:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b76a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b772:	b292      	uxth	r2, r2
 800b774:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	22ff      	movs	r2, #255	; 0xff
 800b77a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3710      	adds	r7, #16
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}

0800b788 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800b788:	b480      	push	{r7}
 800b78a:	b083      	sub	sp, #12
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2243      	movs	r2, #67	; 0x43
 800b794:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b796:	4b03      	ldr	r3, [pc, #12]	; (800b7a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr
 800b7a4:	200000a8 	.word	0x200000a8

0800b7a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2243      	movs	r2, #67	; 0x43
 800b7b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b7b6:	4b03      	ldr	r3, [pc, #12]	; (800b7c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	20000064 	.word	0x20000064

0800b7c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2243      	movs	r2, #67	; 0x43
 800b7d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b7d6:	4b03      	ldr	r3, [pc, #12]	; (800b7e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr
 800b7e4:	200000ec 	.word	0x200000ec

0800b7e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	220a      	movs	r2, #10
 800b7f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b7f6:	4b03      	ldr	r3, [pc, #12]	; (800b804 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	370c      	adds	r7, #12
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b802:	4770      	bx	lr
 800b804:	20000020 	.word	0x20000020

0800b808 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b812:	2302      	movs	r3, #2
 800b814:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d005      	beq.n	800b828 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	683a      	ldr	r2, [r7, #0]
 800b820:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800b824:	2300      	movs	r3, #0
 800b826:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b828:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3714      	adds	r7, #20
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr

0800b836 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800b836:	b480      	push	{r7}
 800b838:	b087      	sub	sp, #28
 800b83a:	af00      	add	r7, sp, #0
 800b83c:	60f8      	str	r0, [r7, #12]
 800b83e:	60b9      	str	r1, [r7, #8]
 800b840:	4613      	mov	r3, r2
 800b842:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b84a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b84c:	697b      	ldr	r3, [r7, #20]
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b854:	88fa      	ldrh	r2, [r7, #6]
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	371c      	adds	r7, #28
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b085      	sub	sp, #20
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b87a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	683a      	ldr	r2, [r7, #0]
 800b880:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8a0:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d01c      	beq.n	800b8e6 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d115      	bne.n	800b8e2 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	2181      	movs	r1, #129	; 0x81
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 fd9c 	bl	800d416 <USBD_LL_Transmit>

      return USBD_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	e002      	b.n	800b8e8 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e000      	b.n	800b8e8 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800b8e6:	2302      	movs	r3, #2
  }
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b8fe:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800b906:	2b00      	cmp	r3, #0
 800b908:	d017      	beq.n	800b93a <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	7c1b      	ldrb	r3, [r3, #16]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d109      	bne.n	800b926 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b91c:	2101      	movs	r1, #1
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f001 fd9c 	bl	800d45c <USBD_LL_PrepareReceive>
 800b924:	e007      	b.n	800b936 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b92c:	2340      	movs	r3, #64	; 0x40
 800b92e:	2101      	movs	r1, #1
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f001 fd93 	bl	800d45c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b936:	2300      	movs	r3, #0
 800b938:	e000      	b.n	800b93c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b93a:	2302      	movs	r3, #2
  }
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b084      	sub	sp, #16
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	4613      	mov	r3, r2
 800b950:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b958:	2302      	movs	r3, #2
 800b95a:	e01a      	b.n	800b992 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800b962:	2b00      	cmp	r3, #0
 800b964:	d003      	beq.n	800b96e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d003      	beq.n	800b97c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	68ba      	ldr	r2, [r7, #8]
 800b978:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	79fa      	ldrb	r2, [r7, #7]
 800b988:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b98a:	68f8      	ldr	r0, [r7, #12]
 800b98c:	f001 fc0e 	bl	800d1ac <USBD_LL_Init>

  return USBD_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b99a:	b480      	push	{r7}
 800b99c:	b085      	sub	sp, #20
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d006      	beq.n	800b9bc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	683a      	ldr	r2, [r7, #0]
 800b9b2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73fb      	strb	r3, [r7, #15]
 800b9ba:	e001      	b.n	800b9c0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b9bc:	2302      	movs	r3, #2
 800b9be:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f001 fc34 	bl	800d244 <USBD_LL_Start>

  return USBD_OK;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800b9e6:	b480      	push	{r7}
 800b9e8:	b083      	sub	sp, #12
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b084      	sub	sp, #16
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800ba08:	2302      	movs	r3, #2
 800ba0a:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00c      	beq.n	800ba30 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	78fa      	ldrb	r2, [r7, #3]
 800ba20:	4611      	mov	r1, r2
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	4798      	blx	r3
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d101      	bne.n	800ba30 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3710      	adds	r7, #16
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bd80      	pop	{r7, pc}

0800ba3a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ba3a:	b580      	push	{r7, lr}
 800ba3c:	b082      	sub	sp, #8
 800ba3e:	af00      	add	r7, sp, #0
 800ba40:	6078      	str	r0, [r7, #4]
 800ba42:	460b      	mov	r3, r1
 800ba44:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	78fa      	ldrb	r2, [r7, #3]
 800ba50:	4611      	mov	r1, r2
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	4798      	blx	r3
  return USBD_OK;
 800ba56:	2300      	movs	r3, #0
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3708      	adds	r7, #8
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b082      	sub	sp, #8
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ba70:	6839      	ldr	r1, [r7, #0]
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 fe94 	bl	800c7a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800ba86:	461a      	mov	r2, r3
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800ba94:	f003 031f 	and.w	r3, r3, #31
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d00c      	beq.n	800bab6 <USBD_LL_SetupStage+0x56>
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d302      	bcc.n	800baa6 <USBD_LL_SetupStage+0x46>
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d010      	beq.n	800bac6 <USBD_LL_SetupStage+0x66>
 800baa4:	e017      	b.n	800bad6 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800baac:	4619      	mov	r1, r3
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fa04 	bl	800bebc <USBD_StdDevReq>
    break;
 800bab4:	e01a      	b.n	800baec <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fa66 	bl	800bf90 <USBD_StdItfReq>
    break;
 800bac4:	e012      	b.n	800baec <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800bacc:	4619      	mov	r1, r3
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 faa4 	bl	800c01c <USBD_StdEPReq>
    break;
 800bad4:	e00a      	b.n	800baec <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800badc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	4619      	mov	r1, r3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f001 fc0d 	bl	800d304 <USBD_LL_StallEP>
    break;
 800baea:	bf00      	nop
  }

  return USBD_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3708      	adds	r7, #8
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b086      	sub	sp, #24
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	460b      	mov	r3, r1
 800bb00:	607a      	str	r2, [r7, #4]
 800bb02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800bb04:	7afb      	ldrb	r3, [r7, #11]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d14b      	bne.n	800bba2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800bb10:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bb18:	2b03      	cmp	r3, #3
 800bb1a:	d134      	bne.n	800bb86 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	68da      	ldr	r2, [r3, #12]
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	691b      	ldr	r3, [r3, #16]
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d919      	bls.n	800bb5c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	68da      	ldr	r2, [r3, #12]
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	1ad2      	subs	r2, r2, r3
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	68da      	ldr	r2, [r3, #12]
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bb3e:	429a      	cmp	r2, r3
 800bb40:	d203      	bcs.n	800bb4a <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	e002      	b.n	800bb50 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	461a      	mov	r2, r3
 800bb52:	6879      	ldr	r1, [r7, #4]
 800bb54:	68f8      	ldr	r0, [r7, #12]
 800bb56:	f000 ff17 	bl	800c988 <USBD_CtlContinueRx>
 800bb5a:	e038      	b.n	800bbce <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00a      	beq.n	800bb7e <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d105      	bne.n	800bb7e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f000 ff14 	bl	800c9ac <USBD_CtlSendStatus>
 800bb84:	e023      	b.n	800bbce <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bb8c:	2b05      	cmp	r3, #5
 800bb8e:	d11e      	bne.n	800bbce <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800bb98:	2100      	movs	r1, #0
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	f001 fbb2 	bl	800d304 <USBD_LL_StallEP>
 800bba0:	e015      	b.n	800bbce <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bba8:	699b      	ldr	r3, [r3, #24]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d00d      	beq.n	800bbca <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800bbb4:	2b03      	cmp	r3, #3
 800bbb6:	d108      	bne.n	800bbca <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	7afa      	ldrb	r2, [r7, #11]
 800bbc2:	4611      	mov	r1, r2
 800bbc4:	68f8      	ldr	r0, [r7, #12]
 800bbc6:	4798      	blx	r3
 800bbc8:	e001      	b.n	800bbce <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bbca:	2302      	movs	r3, #2
 800bbcc:	e000      	b.n	800bbd0 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800bbce:	2300      	movs	r3, #0
}
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	3718      	adds	r7, #24
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	607a      	str	r2, [r7, #4]
 800bbe4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800bbe6:	7afb      	ldrb	r3, [r7, #11]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d17f      	bne.n	800bcec <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	3314      	adds	r3, #20
 800bbf0:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d15c      	bne.n	800bcb6 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	68da      	ldr	r2, [r3, #12]
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	691b      	ldr	r3, [r3, #16]
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d915      	bls.n	800bc34 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	68da      	ldr	r2, [r3, #12]
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	1ad2      	subs	r2, r2, r3
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	b29b      	uxth	r3, r3
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	f000 fe81 	bl	800c928 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800bc26:	2300      	movs	r3, #0
 800bc28:	2200      	movs	r2, #0
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f001 fc15 	bl	800d45c <USBD_LL_PrepareReceive>
 800bc32:	e04e      	b.n	800bcd2 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	697a      	ldr	r2, [r7, #20]
 800bc3a:	6912      	ldr	r2, [r2, #16]
 800bc3c:	fbb3 f1f2 	udiv	r1, r3, r2
 800bc40:	fb02 f201 	mul.w	r2, r2, r1
 800bc44:	1a9b      	subs	r3, r3, r2
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d11c      	bne.n	800bc84 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	689a      	ldr	r2, [r3, #8]
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800bc52:	429a      	cmp	r2, r3
 800bc54:	d316      	bcc.n	800bc84 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	689a      	ldr	r2, [r3, #8]
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d20f      	bcs.n	800bc84 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc64:	2200      	movs	r2, #0
 800bc66:	2100      	movs	r1, #0
 800bc68:	68f8      	ldr	r0, [r7, #12]
 800bc6a:	f000 fe5d 	bl	800c928 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800bc76:	2300      	movs	r3, #0
 800bc78:	2200      	movs	r2, #0
 800bc7a:	2100      	movs	r1, #0
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f001 fbed 	bl	800d45c <USBD_LL_PrepareReceive>
 800bc82:	e026      	b.n	800bcd2 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bc8a:	68db      	ldr	r3, [r3, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00a      	beq.n	800bca6 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800bc96:	2b03      	cmp	r3, #3
 800bc98:	d105      	bne.n	800bca6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bca0:	68db      	ldr	r3, [r3, #12]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bca6:	2180      	movs	r1, #128	; 0x80
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f001 fb2b 	bl	800d304 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 fe8f 	bl	800c9d2 <USBD_CtlReceiveStatus>
 800bcb4:	e00d      	b.n	800bcd2 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800bcbc:	2b04      	cmp	r3, #4
 800bcbe:	d004      	beq.n	800bcca <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d103      	bne.n	800bcd2 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bcca:	2180      	movs	r1, #128	; 0x80
 800bccc:	68f8      	ldr	r0, [r7, #12]
 800bcce:	f001 fb19 	bl	800d304 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d11d      	bne.n	800bd18 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f7ff fe82 	bl	800b9e6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2200      	movs	r2, #0
 800bce6:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800bcea:	e015      	b.n	800bd18 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bcf2:	695b      	ldr	r3, [r3, #20]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00d      	beq.n	800bd14 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800bcfe:	2b03      	cmp	r3, #3
 800bd00:	d108      	bne.n	800bd14 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bd08:	695b      	ldr	r3, [r3, #20]
 800bd0a:	7afa      	ldrb	r2, [r7, #11]
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	4798      	blx	r3
 800bd12:	e001      	b.n	800bd18 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bd14:	2302      	movs	r3, #2
 800bd16:	e000      	b.n	800bd1a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd2a:	2340      	movs	r3, #64	; 0x40
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2100      	movs	r1, #0
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f001 faa2 	bl	800d27a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2240      	movs	r2, #64	; 0x40
 800bd42:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd46:	2340      	movs	r3, #64	; 0x40
 800bd48:	2200      	movs	r2, #0
 800bd4a:	2180      	movs	r1, #128	; 0x80
 800bd4c:	6878      	ldr	r0, [r7, #4]
 800bd4e:	f001 fa94 	bl	800d27a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	2201      	movs	r2, #1
 800bd56:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2240      	movs	r2, #64	; 0x40
 800bd5c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2201      	movs	r2, #1
 800bd62:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d009      	beq.n	800bd9a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	687a      	ldr	r2, [r7, #4]
 800bd90:	6852      	ldr	r2, [r2, #4]
 800bd92:	b2d2      	uxtb	r2, r2
 800bd94:	4611      	mov	r1, r2
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
  }

  return USBD_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	78fa      	ldrb	r2, [r7, #3]
 800bdb4:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2204      	movs	r2, #4
 800bddc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800bdee:	b480      	push	{r7}
 800bdf0:	b083      	sub	sp, #12
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800be1e:	2b03      	cmp	r3, #3
 800be20:	d10b      	bne.n	800be3a <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be28:	69db      	ldr	r3, [r3, #28]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d005      	beq.n	800be3a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800be34:	69db      	ldr	r3, [r3, #28]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800be44:	b480      	push	{r7}
 800be46:	b083      	sub	sp, #12
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	460b      	mov	r3, r1
 800be4e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800be50:	2300      	movs	r3, #0
}
 800be52:	4618      	mov	r0, r3
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800be5e:	b480      	push	{r7}
 800be60:	b083      	sub	sp, #12
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	460b      	mov	r3, r1
 800be68:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800be80:	2300      	movs	r3, #0
}
 800be82:	4618      	mov	r0, r3
 800be84:	370c      	adds	r7, #12
 800be86:	46bd      	mov	sp, r7
 800be88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8c:	4770      	bx	lr

0800be8e <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800be8e:	b580      	push	{r7, lr}
 800be90:	b082      	sub	sp, #8
 800be92:	af00      	add	r7, sp, #0
 800be94:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bea4:	685b      	ldr	r3, [r3, #4]
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	6852      	ldr	r2, [r2, #4]
 800beaa:	b2d2      	uxtb	r2, r2
 800beac:	4611      	mov	r1, r2
 800beae:	6878      	ldr	r0, [r7, #4]
 800beb0:	4798      	blx	r3

  return USBD_OK;
 800beb2:	2300      	movs	r3, #0
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3708      	adds	r7, #8
 800beb8:	46bd      	mov	sp, r7
 800beba:	bd80      	pop	{r7, pc}

0800bebc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b084      	sub	sp, #16
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
 800bec4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bec6:	2300      	movs	r3, #0
 800bec8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bed2:	2b20      	cmp	r3, #32
 800bed4:	d004      	beq.n	800bee0 <USBD_StdDevReq+0x24>
 800bed6:	2b40      	cmp	r3, #64	; 0x40
 800bed8:	d002      	beq.n	800bee0 <USBD_StdDevReq+0x24>
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d008      	beq.n	800bef0 <USBD_StdDevReq+0x34>
 800bede:	e04c      	b.n	800bf7a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bee6:	689b      	ldr	r3, [r3, #8]
 800bee8:	6839      	ldr	r1, [r7, #0]
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	4798      	blx	r3
    break;
 800beee:	e049      	b.n	800bf84 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	785b      	ldrb	r3, [r3, #1]
 800bef4:	2b09      	cmp	r3, #9
 800bef6:	d83a      	bhi.n	800bf6e <USBD_StdDevReq+0xb2>
 800bef8:	a201      	add	r2, pc, #4	; (adr r2, 800bf00 <USBD_StdDevReq+0x44>)
 800befa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800befe:	bf00      	nop
 800bf00:	0800bf51 	.word	0x0800bf51
 800bf04:	0800bf65 	.word	0x0800bf65
 800bf08:	0800bf6f 	.word	0x0800bf6f
 800bf0c:	0800bf5b 	.word	0x0800bf5b
 800bf10:	0800bf6f 	.word	0x0800bf6f
 800bf14:	0800bf33 	.word	0x0800bf33
 800bf18:	0800bf29 	.word	0x0800bf29
 800bf1c:	0800bf6f 	.word	0x0800bf6f
 800bf20:	0800bf47 	.word	0x0800bf47
 800bf24:	0800bf3d 	.word	0x0800bf3d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800bf28:	6839      	ldr	r1, [r7, #0]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f000 f9d2 	bl	800c2d4 <USBD_GetDescriptor>
      break;
 800bf30:	e022      	b.n	800bf78 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fac7 	bl	800c4c8 <USBD_SetAddress>
      break;
 800bf3a:	e01d      	b.n	800bf78 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fb04 	bl	800c54c <USBD_SetConfig>
      break;
 800bf44:	e018      	b.n	800bf78 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fb8d 	bl	800c668 <USBD_GetConfig>
      break;
 800bf4e:	e013      	b.n	800bf78 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fbbc 	bl	800c6d0 <USBD_GetStatus>
      break;
 800bf58:	e00e      	b.n	800bf78 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fbea 	bl	800c736 <USBD_SetFeature>
      break;
 800bf62:	e009      	b.n	800bf78 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fbf9 	bl	800c75e <USBD_ClrFeature>
      break;
 800bf6c:	e004      	b.n	800bf78 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fc52 	bl	800c81a <USBD_CtlError>
      break;
 800bf76:	bf00      	nop
    }
    break;
 800bf78:	e004      	b.n	800bf84 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800bf7a:	6839      	ldr	r1, [r7, #0]
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f000 fc4c 	bl	800c81a <USBD_CtlError>
    break;
 800bf82:	bf00      	nop
  }

  return ret;
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3710      	adds	r7, #16
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop

0800bf90 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfa6:	2b20      	cmp	r3, #32
 800bfa8:	d003      	beq.n	800bfb2 <USBD_StdItfReq+0x22>
 800bfaa:	2b40      	cmp	r3, #64	; 0x40
 800bfac:	d001      	beq.n	800bfb2 <USBD_StdItfReq+0x22>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d12a      	bne.n	800c008 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d81d      	bhi.n	800bffa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	889b      	ldrh	r3, [r3, #4]
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d813      	bhi.n	800bff0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800bfce:	689b      	ldr	r3, [r3, #8]
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	4798      	blx	r3
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	88db      	ldrh	r3, [r3, #6]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d110      	bne.n	800c004 <USBD_StdItfReq+0x74>
 800bfe2:	7bfb      	ldrb	r3, [r7, #15]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10d      	bne.n	800c004 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f000 fcdf 	bl	800c9ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bfee:	e009      	b.n	800c004 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fc11 	bl	800c81a <USBD_CtlError>
      break;
 800bff8:	e004      	b.n	800c004 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fc0c 	bl	800c81a <USBD_CtlError>
      break;
 800c002:	e000      	b.n	800c006 <USBD_StdItfReq+0x76>
      break;
 800c004:	bf00      	nop
    }
    break;
 800c006:	e004      	b.n	800c012 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f000 fc05 	bl	800c81a <USBD_CtlError>
    break;
 800c010:	bf00      	nop
  }

  return USBD_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	889b      	ldrh	r3, [r3, #4]
 800c02e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c038:	2b20      	cmp	r3, #32
 800c03a:	d004      	beq.n	800c046 <USBD_StdEPReq+0x2a>
 800c03c:	2b40      	cmp	r3, #64	; 0x40
 800c03e:	d002      	beq.n	800c046 <USBD_StdEPReq+0x2a>
 800c040:	2b00      	cmp	r3, #0
 800c042:	d008      	beq.n	800c056 <USBD_StdEPReq+0x3a>
 800c044:	e13b      	b.n	800c2be <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c04c:	689b      	ldr	r3, [r3, #8]
 800c04e:	6839      	ldr	r1, [r7, #0]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	4798      	blx	r3
    break;
 800c054:	e138      	b.n	800c2c8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c05e:	2b20      	cmp	r3, #32
 800c060:	d10a      	bne.n	800c078 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c068:	689b      	ldr	r3, [r3, #8]
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	4798      	blx	r3
 800c070:	4603      	mov	r3, r0
 800c072:	73fb      	strb	r3, [r7, #15]

      return ret;
 800c074:	7bfb      	ldrb	r3, [r7, #15]
 800c076:	e128      	b.n	800c2ca <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	785b      	ldrb	r3, [r3, #1]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d03e      	beq.n	800c0fe <USBD_StdEPReq+0xe2>
 800c080:	2b03      	cmp	r3, #3
 800c082:	d002      	beq.n	800c08a <USBD_StdEPReq+0x6e>
 800c084:	2b00      	cmp	r3, #0
 800c086:	d070      	beq.n	800c16a <USBD_StdEPReq+0x14e>
 800c088:	e113      	b.n	800c2b2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c090:	2b02      	cmp	r3, #2
 800c092:	d002      	beq.n	800c09a <USBD_StdEPReq+0x7e>
 800c094:	2b03      	cmp	r3, #3
 800c096:	d015      	beq.n	800c0c4 <USBD_StdEPReq+0xa8>
 800c098:	e02b      	b.n	800c0f2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c09a:	7bbb      	ldrb	r3, [r7, #14]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d00c      	beq.n	800c0ba <USBD_StdEPReq+0x9e>
 800c0a0:	7bbb      	ldrb	r3, [r7, #14]
 800c0a2:	2b80      	cmp	r3, #128	; 0x80
 800c0a4:	d009      	beq.n	800c0ba <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c0a6:	7bbb      	ldrb	r3, [r7, #14]
 800c0a8:	4619      	mov	r1, r3
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f001 f92a 	bl	800d304 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c0b0:	2180      	movs	r1, #128	; 0x80
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f001 f926 	bl	800d304 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c0b8:	e020      	b.n	800c0fc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800c0ba:	6839      	ldr	r1, [r7, #0]
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f000 fbac 	bl	800c81a <USBD_CtlError>
        break;
 800c0c2:	e01b      	b.n	800c0fc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	885b      	ldrh	r3, [r3, #2]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10e      	bne.n	800c0ea <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0cc:	7bbb      	ldrb	r3, [r7, #14]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00b      	beq.n	800c0ea <USBD_StdEPReq+0xce>
 800c0d2:	7bbb      	ldrb	r3, [r7, #14]
 800c0d4:	2b80      	cmp	r3, #128	; 0x80
 800c0d6:	d008      	beq.n	800c0ea <USBD_StdEPReq+0xce>
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	88db      	ldrh	r3, [r3, #6]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d104      	bne.n	800c0ea <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f001 f90d 	bl	800d304 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 fc5e 	bl	800c9ac <USBD_CtlSendStatus>

        break;
 800c0f0:	e004      	b.n	800c0fc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fb90 	bl	800c81a <USBD_CtlError>
        break;
 800c0fa:	bf00      	nop
      }
      break;
 800c0fc:	e0de      	b.n	800c2bc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c104:	2b02      	cmp	r3, #2
 800c106:	d002      	beq.n	800c10e <USBD_StdEPReq+0xf2>
 800c108:	2b03      	cmp	r3, #3
 800c10a:	d015      	beq.n	800c138 <USBD_StdEPReq+0x11c>
 800c10c:	e026      	b.n	800c15c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c10e:	7bbb      	ldrb	r3, [r7, #14]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00c      	beq.n	800c12e <USBD_StdEPReq+0x112>
 800c114:	7bbb      	ldrb	r3, [r7, #14]
 800c116:	2b80      	cmp	r3, #128	; 0x80
 800c118:	d009      	beq.n	800c12e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800c11a:	7bbb      	ldrb	r3, [r7, #14]
 800c11c:	4619      	mov	r1, r3
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f001 f8f0 	bl	800d304 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800c124:	2180      	movs	r1, #128	; 0x80
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f001 f8ec 	bl	800d304 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c12c:	e01c      	b.n	800c168 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fb72 	bl	800c81a <USBD_CtlError>
        break;
 800c136:	e017      	b.n	800c168 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	885b      	ldrh	r3, [r3, #2]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d112      	bne.n	800c166 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c140:	7bbb      	ldrb	r3, [r7, #14]
 800c142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c146:	2b00      	cmp	r3, #0
 800c148:	d004      	beq.n	800c154 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800c14a:	7bbb      	ldrb	r3, [r7, #14]
 800c14c:	4619      	mov	r1, r3
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f001 f8f7 	bl	800d342 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fc29 	bl	800c9ac <USBD_CtlSendStatus>
        }
        break;
 800c15a:	e004      	b.n	800c166 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fb5b 	bl	800c81a <USBD_CtlError>
        break;
 800c164:	e000      	b.n	800c168 <USBD_StdEPReq+0x14c>
        break;
 800c166:	bf00      	nop
      }
      break;
 800c168:	e0a8      	b.n	800c2bc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c170:	2b02      	cmp	r3, #2
 800c172:	d002      	beq.n	800c17a <USBD_StdEPReq+0x15e>
 800c174:	2b03      	cmp	r3, #3
 800c176:	d031      	beq.n	800c1dc <USBD_StdEPReq+0x1c0>
 800c178:	e095      	b.n	800c2a6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c17a:	7bbb      	ldrb	r3, [r7, #14]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d007      	beq.n	800c190 <USBD_StdEPReq+0x174>
 800c180:	7bbb      	ldrb	r3, [r7, #14]
 800c182:	2b80      	cmp	r3, #128	; 0x80
 800c184:	d004      	beq.n	800c190 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fb46 	bl	800c81a <USBD_CtlError>
          break;
 800c18e:	e08f      	b.n	800c2b0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c194:	2b00      	cmp	r3, #0
 800c196:	da0b      	bge.n	800c1b0 <USBD_StdEPReq+0x194>
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c19e:	4613      	mov	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4413      	add	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	3310      	adds	r3, #16
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	e00a      	b.n	800c1c6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2202      	movs	r2, #2
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 fb8b 	bl	800c8f0 <USBD_CtlSendData>
          break;
 800c1da:	e069      	b.n	800c2b0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800c1dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	da11      	bge.n	800c208 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1e4:	7bbb      	ldrb	r3, [r7, #14]
 800c1e6:	f003 020f 	and.w	r2, r3, #15
 800c1ea:	6879      	ldr	r1, [r7, #4]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	440b      	add	r3, r1
 800c1f6:	3318      	adds	r3, #24
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d117      	bne.n	800c22e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	6878      	ldr	r0, [r7, #4]
 800c202:	f000 fb0a 	bl	800c81a <USBD_CtlError>
            break;
 800c206:	e053      	b.n	800c2b0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c208:	7bbb      	ldrb	r3, [r7, #14]
 800c20a:	f003 020f 	and.w	r2, r3, #15
 800c20e:	6879      	ldr	r1, [r7, #4]
 800c210:	4613      	mov	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	4413      	add	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	440b      	add	r3, r1
 800c21a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d104      	bne.n	800c22e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800c224:	6839      	ldr	r1, [r7, #0]
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 faf7 	bl	800c81a <USBD_CtlError>
            break;
 800c22c:	e040      	b.n	800c2b0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c22e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c232:	2b00      	cmp	r3, #0
 800c234:	da0b      	bge.n	800c24e <USBD_StdEPReq+0x232>
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c23c:	4613      	mov	r3, r2
 800c23e:	009b      	lsls	r3, r3, #2
 800c240:	4413      	add	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	3310      	adds	r3, #16
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	4413      	add	r3, r2
 800c24a:	3304      	adds	r3, #4
 800c24c:	e00a      	b.n	800c264 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800c24e:	7bbb      	ldrb	r3, [r7, #14]
 800c250:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800c254:	4613      	mov	r3, r2
 800c256:	009b      	lsls	r3, r3, #2
 800c258:	4413      	add	r3, r2
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	4413      	add	r3, r2
 800c264:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <USBD_StdEPReq+0x256>
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
 800c26e:	2b80      	cmp	r3, #128	; 0x80
 800c270:	d103      	bne.n	800c27a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2200      	movs	r2, #0
 800c276:	601a      	str	r2, [r3, #0]
 800c278:	e00e      	b.n	800c298 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800c27a:	7bbb      	ldrb	r3, [r7, #14]
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 f87e 	bl	800d380 <USBD_LL_IsStallEP>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2201      	movs	r2, #1
 800c28e:	601a      	str	r2, [r3, #0]
 800c290:	e002      	b.n	800c298 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2200      	movs	r2, #0
 800c296:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2202      	movs	r2, #2
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fb26 	bl	800c8f0 <USBD_CtlSendData>
          break;
 800c2a4:	e004      	b.n	800c2b0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fab6 	bl	800c81a <USBD_CtlError>
        break;
 800c2ae:	bf00      	nop
      }
      break;
 800c2b0:	e004      	b.n	800c2bc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fab0 	bl	800c81a <USBD_CtlError>
      break;
 800c2ba:	bf00      	nop
    }
    break;
 800c2bc:	e004      	b.n	800c2c8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 faaa 	bl	800c81a <USBD_CtlError>
    break;
 800c2c6:	bf00      	nop
  }

  return ret;
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
	...

0800c2d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	885b      	ldrh	r3, [r3, #2]
 800c2e2:	0a1b      	lsrs	r3, r3, #8
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	2b06      	cmp	r3, #6
 800c2ea:	f200 80c9 	bhi.w	800c480 <USBD_GetDescriptor+0x1ac>
 800c2ee:	a201      	add	r2, pc, #4	; (adr r2, 800c2f4 <USBD_GetDescriptor+0x20>)
 800c2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f4:	0800c311 	.word	0x0800c311
 800c2f8:	0800c329 	.word	0x0800c329
 800c2fc:	0800c369 	.word	0x0800c369
 800c300:	0800c481 	.word	0x0800c481
 800c304:	0800c481 	.word	0x0800c481
 800c308:	0800c42d 	.word	0x0800c42d
 800c30c:	0800c453 	.word	0x0800c453
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	7c12      	ldrb	r2, [r2, #16]
 800c31c:	f107 010a 	add.w	r1, r7, #10
 800c320:	4610      	mov	r0, r2
 800c322:	4798      	blx	r3
 800c324:	60f8      	str	r0, [r7, #12]
    break;
 800c326:	e0b0      	b.n	800c48a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	7c1b      	ldrb	r3, [r3, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10d      	bne.n	800c34c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c338:	f107 020a 	add.w	r2, r7, #10
 800c33c:	4610      	mov	r0, r2
 800c33e:	4798      	blx	r3
 800c340:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	3301      	adds	r3, #1
 800c346:	2202      	movs	r2, #2
 800c348:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c34a:	e09e      	b.n	800c48a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c354:	f107 020a 	add.w	r2, r7, #10
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	3301      	adds	r3, #1
 800c362:	2202      	movs	r2, #2
 800c364:	701a      	strb	r2, [r3, #0]
    break;
 800c366:	e090      	b.n	800c48a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	885b      	ldrh	r3, [r3, #2]
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	2b05      	cmp	r3, #5
 800c370:	d856      	bhi.n	800c420 <USBD_GetDescriptor+0x14c>
 800c372:	a201      	add	r2, pc, #4	; (adr r2, 800c378 <USBD_GetDescriptor+0xa4>)
 800c374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c378:	0800c391 	.word	0x0800c391
 800c37c:	0800c3a9 	.word	0x0800c3a9
 800c380:	0800c3c1 	.word	0x0800c3c1
 800c384:	0800c3d9 	.word	0x0800c3d9
 800c388:	0800c3f1 	.word	0x0800c3f1
 800c38c:	0800c409 	.word	0x0800c409
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	7c12      	ldrb	r2, [r2, #16]
 800c39c:	f107 010a 	add.w	r1, r7, #10
 800c3a0:	4610      	mov	r0, r2
 800c3a2:	4798      	blx	r3
 800c3a4:	60f8      	str	r0, [r7, #12]
      break;
 800c3a6:	e040      	b.n	800c42a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	7c12      	ldrb	r2, [r2, #16]
 800c3b4:	f107 010a 	add.w	r1, r7, #10
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	4798      	blx	r3
 800c3bc:	60f8      	str	r0, [r7, #12]
      break;
 800c3be:	e034      	b.n	800c42a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	7c12      	ldrb	r2, [r2, #16]
 800c3cc:	f107 010a 	add.w	r1, r7, #10
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	4798      	blx	r3
 800c3d4:	60f8      	str	r0, [r7, #12]
      break;
 800c3d6:	e028      	b.n	800c42a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	7c12      	ldrb	r2, [r2, #16]
 800c3e4:	f107 010a 	add.w	r1, r7, #10
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
      break;
 800c3ee:	e01c      	b.n	800c42a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c3f6:	695b      	ldr	r3, [r3, #20]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	7c12      	ldrb	r2, [r2, #16]
 800c3fc:	f107 010a 	add.w	r1, r7, #10
 800c400:	4610      	mov	r0, r2
 800c402:	4798      	blx	r3
 800c404:	60f8      	str	r0, [r7, #12]
      break;
 800c406:	e010      	b.n	800c42a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800c40e:	699b      	ldr	r3, [r3, #24]
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	7c12      	ldrb	r2, [r2, #16]
 800c414:	f107 010a 	add.w	r1, r7, #10
 800c418:	4610      	mov	r0, r2
 800c41a:	4798      	blx	r3
 800c41c:	60f8      	str	r0, [r7, #12]
      break;
 800c41e:	e004      	b.n	800c42a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800c420:	6839      	ldr	r1, [r7, #0]
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f9f9 	bl	800c81a <USBD_CtlError>
      return;
 800c428:	e04b      	b.n	800c4c2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800c42a:	e02e      	b.n	800c48a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	7c1b      	ldrb	r3, [r3, #16]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d109      	bne.n	800c448 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c43c:	f107 020a 	add.w	r2, r7, #10
 800c440:	4610      	mov	r0, r2
 800c442:	4798      	blx	r3
 800c444:	60f8      	str	r0, [r7, #12]
      break;
 800c446:	e020      	b.n	800c48a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c448:	6839      	ldr	r1, [r7, #0]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 f9e5 	bl	800c81a <USBD_CtlError>
      return;
 800c450:	e037      	b.n	800c4c2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	7c1b      	ldrb	r3, [r3, #16]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10d      	bne.n	800c476 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800c460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c462:	f107 020a 	add.w	r2, r7, #10
 800c466:	4610      	mov	r0, r2
 800c468:	4798      	blx	r3
 800c46a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	3301      	adds	r3, #1
 800c470:	2207      	movs	r2, #7
 800c472:	701a      	strb	r2, [r3, #0]
      break;
 800c474:	e009      	b.n	800c48a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800c476:	6839      	ldr	r1, [r7, #0]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	f000 f9ce 	bl	800c81a <USBD_CtlError>
      return;
 800c47e:	e020      	b.n	800c4c2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 f9c9 	bl	800c81a <USBD_CtlError>
    return;
 800c488:	e01b      	b.n	800c4c2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800c48a:	897b      	ldrh	r3, [r7, #10]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d011      	beq.n	800c4b4 <USBD_GetDescriptor+0x1e0>
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	88db      	ldrh	r3, [r3, #6]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00d      	beq.n	800c4b4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	88da      	ldrh	r2, [r3, #6]
 800c49c:	897b      	ldrh	r3, [r7, #10]
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	bf28      	it	cs
 800c4a2:	4613      	movcs	r3, r2
 800c4a4:	b29b      	uxth	r3, r3
 800c4a6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800c4a8:	897b      	ldrh	r3, [r7, #10]
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	68f9      	ldr	r1, [r7, #12]
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f000 fa1e 	bl	800c8f0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	88db      	ldrh	r3, [r3, #6]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800c4bc:	6878      	ldr	r0, [r7, #4]
 800c4be:	f000 fa75 	bl	800c9ac <USBD_CtlSendStatus>
  }
}
 800c4c2:	3710      	adds	r7, #16
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	889b      	ldrh	r3, [r3, #4]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d130      	bne.n	800c53c <USBD_SetAddress+0x74>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	88db      	ldrh	r3, [r3, #6]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d12c      	bne.n	800c53c <USBD_SetAddress+0x74>
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	885b      	ldrh	r3, [r3, #2]
 800c4e6:	2b7f      	cmp	r3, #127	; 0x7f
 800c4e8:	d828      	bhi.n	800c53c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	885b      	ldrh	r3, [r3, #2]
 800c4ee:	b2db      	uxtb	r3, r3
 800c4f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c4f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c4fc:	2b03      	cmp	r3, #3
 800c4fe:	d104      	bne.n	800c50a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 f989 	bl	800c81a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c508:	e01c      	b.n	800c544 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	7bfa      	ldrb	r2, [r7, #15]
 800c50e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c512:	7bfb      	ldrb	r3, [r7, #15]
 800c514:	4619      	mov	r1, r3
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 ff5e 	bl	800d3d8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fa45 	bl	800c9ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c522:	7bfb      	ldrb	r3, [r7, #15]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d004      	beq.n	800c532 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2202      	movs	r2, #2
 800c52c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c530:	e008      	b.n	800c544 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c53a:	e003      	b.n	800c544 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c53c:	6839      	ldr	r1, [r7, #0]
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f96b 	bl	800c81a <USBD_CtlError>
  }
}
 800c544:	bf00      	nop
 800c546:	3710      	adds	r7, #16
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	885b      	ldrh	r3, [r3, #2]
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	4b41      	ldr	r3, [pc, #260]	; (800c664 <USBD_SetConfig+0x118>)
 800c55e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c560:	4b40      	ldr	r3, [pc, #256]	; (800c664 <USBD_SetConfig+0x118>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d904      	bls.n	800c572 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c568:	6839      	ldr	r1, [r7, #0]
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f000 f955 	bl	800c81a <USBD_CtlError>
 800c570:	e075      	b.n	800c65e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d002      	beq.n	800c582 <USBD_SetConfig+0x36>
 800c57c:	2b03      	cmp	r3, #3
 800c57e:	d023      	beq.n	800c5c8 <USBD_SetConfig+0x7c>
 800c580:	e062      	b.n	800c648 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800c582:	4b38      	ldr	r3, [pc, #224]	; (800c664 <USBD_SetConfig+0x118>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d01a      	beq.n	800c5c0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800c58a:	4b36      	ldr	r3, [pc, #216]	; (800c664 <USBD_SetConfig+0x118>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	461a      	mov	r2, r3
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	2203      	movs	r2, #3
 800c598:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c59c:	4b31      	ldr	r3, [pc, #196]	; (800c664 <USBD_SetConfig+0x118>)
 800c59e:	781b      	ldrb	r3, [r3, #0]
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7ff fa2a 	bl	800b9fc <USBD_SetClassConfig>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d104      	bne.n	800c5b8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800c5ae:	6839      	ldr	r1, [r7, #0]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f932 	bl	800c81a <USBD_CtlError>
          return;
 800c5b6:	e052      	b.n	800c65e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f000 f9f7 	bl	800c9ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c5be:	e04e      	b.n	800c65e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 f9f3 	bl	800c9ac <USBD_CtlSendStatus>
      break;
 800c5c6:	e04a      	b.n	800c65e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c5c8:	4b26      	ldr	r3, [pc, #152]	; (800c664 <USBD_SetConfig+0x118>)
 800c5ca:	781b      	ldrb	r3, [r3, #0]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d112      	bne.n	800c5f6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	2202      	movs	r2, #2
 800c5d4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800c5d8:	4b22      	ldr	r3, [pc, #136]	; (800c664 <USBD_SetConfig+0x118>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800c5e2:	4b20      	ldr	r3, [pc, #128]	; (800c664 <USBD_SetConfig+0x118>)
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff fa26 	bl	800ba3a <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f9dc 	bl	800c9ac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800c5f4:	e033      	b.n	800c65e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800c5f6:	4b1b      	ldr	r3, [pc, #108]	; (800c664 <USBD_SetConfig+0x118>)
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	429a      	cmp	r2, r3
 800c602:	d01d      	beq.n	800c640 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	4619      	mov	r1, r3
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f7ff fa14 	bl	800ba3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c612:	4b14      	ldr	r3, [pc, #80]	; (800c664 <USBD_SetConfig+0x118>)
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	461a      	mov	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c61c:	4b11      	ldr	r3, [pc, #68]	; (800c664 <USBD_SetConfig+0x118>)
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	4619      	mov	r1, r3
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7ff f9ea 	bl	800b9fc <USBD_SetClassConfig>
 800c628:	4603      	mov	r3, r0
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d104      	bne.n	800c638 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800c62e:	6839      	ldr	r1, [r7, #0]
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f000 f8f2 	bl	800c81a <USBD_CtlError>
          return;
 800c636:	e012      	b.n	800c65e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f9b7 	bl	800c9ac <USBD_CtlSendStatus>
      break;
 800c63e:	e00e      	b.n	800c65e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f9b3 	bl	800c9ac <USBD_CtlSendStatus>
      break;
 800c646:	e00a      	b.n	800c65e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f8e5 	bl	800c81a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800c650:	4b04      	ldr	r3, [pc, #16]	; (800c664 <USBD_SetConfig+0x118>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	4619      	mov	r1, r3
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f7ff f9ef 	bl	800ba3a <USBD_ClrClassConfig>
      break;
 800c65c:	bf00      	nop
    }
  }
}
 800c65e:	3708      	adds	r7, #8
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	20000788 	.word	0x20000788

0800c668 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	88db      	ldrh	r3, [r3, #6]
 800c676:	2b01      	cmp	r3, #1
 800c678:	d004      	beq.n	800c684 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800c67a:	6839      	ldr	r1, [r7, #0]
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f000 f8cc 	bl	800c81a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800c682:	e021      	b.n	800c6c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	db17      	blt.n	800c6be <USBD_GetConfig+0x56>
 800c68e:	2b02      	cmp	r3, #2
 800c690:	dd02      	ble.n	800c698 <USBD_GetConfig+0x30>
 800c692:	2b03      	cmp	r3, #3
 800c694:	d00b      	beq.n	800c6ae <USBD_GetConfig+0x46>
 800c696:	e012      	b.n	800c6be <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2200      	movs	r2, #0
 800c69c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	3308      	adds	r3, #8
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	4619      	mov	r1, r3
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f922 	bl	800c8f0 <USBD_CtlSendData>
      break;
 800c6ac:	e00c      	b.n	800c6c8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	2201      	movs	r2, #1
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f91a 	bl	800c8f0 <USBD_CtlSendData>
      break;
 800c6bc:	e004      	b.n	800c6c8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800c6be:	6839      	ldr	r1, [r7, #0]
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 f8aa 	bl	800c81a <USBD_CtlError>
      break;
 800c6c6:	bf00      	nop
}
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d81e      	bhi.n	800c724 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	88db      	ldrh	r3, [r3, #6]
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d004      	beq.n	800c6f8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c6ee:	6839      	ldr	r1, [r7, #0]
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f892 	bl	800c81a <USBD_CtlError>
      break;
 800c6f6:	e01a      	b.n	800c72e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800c704:	2b00      	cmp	r3, #0
 800c706:	d005      	beq.n	800c714 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	f043 0202 	orr.w	r2, r3, #2
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	330c      	adds	r3, #12
 800c718:	2202      	movs	r2, #2
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f8e7 	bl	800c8f0 <USBD_CtlSendData>
    break;
 800c722:	e004      	b.n	800c72e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800c724:	6839      	ldr	r1, [r7, #0]
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f877 	bl	800c81a <USBD_CtlError>
    break;
 800c72c:	bf00      	nop
  }
}
 800c72e:	bf00      	nop
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b082      	sub	sp, #8
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
 800c73e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	885b      	ldrh	r3, [r3, #2]
 800c744:	2b01      	cmp	r3, #1
 800c746:	d106      	bne.n	800c756 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f000 f92b 	bl	800c9ac <USBD_CtlSendStatus>
  }

}
 800c756:	bf00      	nop
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b082      	sub	sp, #8
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c76e:	3b01      	subs	r3, #1
 800c770:	2b02      	cmp	r3, #2
 800c772:	d80b      	bhi.n	800c78c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	885b      	ldrh	r3, [r3, #2]
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d10c      	bne.n	800c796 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f911 	bl	800c9ac <USBD_CtlSendStatus>
    }
    break;
 800c78a:	e004      	b.n	800c796 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f843 	bl	800c81a <USBD_CtlError>
    break;
 800c794:	e000      	b.n	800c798 <USBD_ClrFeature+0x3a>
    break;
 800c796:	bf00      	nop
  }
}
 800c798:	bf00      	nop
 800c79a:	3708      	adds	r7, #8
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	b083      	sub	sp, #12
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	781a      	ldrb	r2, [r3, #0]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	785a      	ldrb	r2, [r3, #1]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	3302      	adds	r3, #2
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	b29a      	uxth	r2, r3
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	3303      	adds	r3, #3
 800c7c6:	781b      	ldrb	r3, [r3, #0]
 800c7c8:	b29b      	uxth	r3, r3
 800c7ca:	021b      	lsls	r3, r3, #8
 800c7cc:	b29b      	uxth	r3, r3
 800c7ce:	4413      	add	r3, r2
 800c7d0:	b29a      	uxth	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	3304      	adds	r3, #4
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	b29a      	uxth	r2, r3
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	3305      	adds	r3, #5
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	021b      	lsls	r3, r3, #8
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	4413      	add	r3, r2
 800c7ec:	b29a      	uxth	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	3306      	adds	r3, #6
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	b29a      	uxth	r2, r3
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	3307      	adds	r3, #7
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	b29b      	uxth	r3, r3
 800c802:	021b      	lsls	r3, r3, #8
 800c804:	b29b      	uxth	r3, r3
 800c806:	4413      	add	r3, r2
 800c808:	b29a      	uxth	r2, r3
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	80da      	strh	r2, [r3, #6]

}
 800c80e:	bf00      	nop
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b082      	sub	sp, #8
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800c824:	2180      	movs	r1, #128	; 0x80
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 fd6c 	bl	800d304 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800c82c:	2100      	movs	r1, #0
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 fd68 	bl	800d304 <USBD_LL_StallEP>
}
 800c834:	bf00      	nop
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c848:	2300      	movs	r3, #0
 800c84a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d032      	beq.n	800c8b8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f000 f834 	bl	800c8c0 <USBD_GetLen>
 800c858:	4603      	mov	r3, r0
 800c85a:	3301      	adds	r3, #1
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	005b      	lsls	r3, r3, #1
 800c860:	b29a      	uxth	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c866:	7dfb      	ldrb	r3, [r7, #23]
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	75fa      	strb	r2, [r7, #23]
 800c86c:	461a      	mov	r2, r3
 800c86e:	68bb      	ldr	r3, [r7, #8]
 800c870:	4413      	add	r3, r2
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	7812      	ldrb	r2, [r2, #0]
 800c876:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c878:	7dfb      	ldrb	r3, [r7, #23]
 800c87a:	1c5a      	adds	r2, r3, #1
 800c87c:	75fa      	strb	r2, [r7, #23]
 800c87e:	461a      	mov	r2, r3
 800c880:	68bb      	ldr	r3, [r7, #8]
 800c882:	4413      	add	r3, r2
 800c884:	2203      	movs	r2, #3
 800c886:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c888:	e012      	b.n	800c8b0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	1c5a      	adds	r2, r3, #1
 800c88e:	60fa      	str	r2, [r7, #12]
 800c890:	7dfa      	ldrb	r2, [r7, #23]
 800c892:	1c51      	adds	r1, r2, #1
 800c894:	75f9      	strb	r1, [r7, #23]
 800c896:	4611      	mov	r1, r2
 800c898:	68ba      	ldr	r2, [r7, #8]
 800c89a:	440a      	add	r2, r1
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
 800c8a2:	1c5a      	adds	r2, r3, #1
 800c8a4:	75fa      	strb	r2, [r7, #23]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	4413      	add	r3, r2
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e8      	bne.n	800c88a <USBD_GetString+0x4e>
    }
  }
}
 800c8b8:	bf00      	nop
 800c8ba:	3718      	adds	r7, #24
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800c8cc:	e005      	b.n	800c8da <USBD_GetLen+0x1a>
    {
        len++;
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	73fb      	strb	r3, [r7, #15]
        buf++;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1f5      	bne.n	800c8ce <USBD_GetLen+0xe>
    }

    return len;
 800c8e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	4613      	mov	r3, r2
 800c8fc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2202      	movs	r2, #2
 800c902:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800c906:	88fa      	ldrh	r2, [r7, #6]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c90c:	88fa      	ldrh	r2, [r7, #6]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c912:	88fb      	ldrh	r3, [r7, #6]
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	2100      	movs	r1, #0
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f000 fd7c 	bl	800d416 <USBD_LL_Transmit>

  return USBD_OK;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	4613      	mov	r3, r2
 800c934:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800c936:	88fb      	ldrh	r3, [r7, #6]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	2100      	movs	r1, #0
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f000 fd6a 	bl	800d416 <USBD_LL_Transmit>

  return USBD_OK;
 800c942:	2300      	movs	r3, #0
}
 800c944:	4618      	mov	r0, r3
 800c946:	3710      	adds	r7, #16
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	4613      	mov	r3, r2
 800c958:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2203      	movs	r2, #3
 800c95e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800c962:	88fa      	ldrh	r2, [r7, #6]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800c96a:	88fa      	ldrh	r2, [r7, #6]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800c972:	88fb      	ldrh	r3, [r7, #6]
 800c974:	68ba      	ldr	r2, [r7, #8]
 800c976:	2100      	movs	r1, #0
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f000 fd6f 	bl	800d45c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	4613      	mov	r3, r2
 800c994:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c996:	88fb      	ldrh	r3, [r7, #6]
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	2100      	movs	r1, #0
 800c99c:	68f8      	ldr	r0, [r7, #12]
 800c99e:	f000 fd5d 	bl	800d45c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9a2:	2300      	movs	r3, #0
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2204      	movs	r2, #4
 800c9b8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c9bc:	2300      	movs	r3, #0
 800c9be:	2200      	movs	r2, #0
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f000 fd27 	bl	800d416 <USBD_LL_Transmit>

  return USBD_OK;
 800c9c8:	2300      	movs	r3, #0
}
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	3708      	adds	r7, #8
 800c9ce:	46bd      	mov	sp, r7
 800c9d0:	bd80      	pop	{r7, pc}

0800c9d2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800c9d2:	b580      	push	{r7, lr}
 800c9d4:	b082      	sub	sp, #8
 800c9d6:	af00      	add	r7, sp, #0
 800c9d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2205      	movs	r2, #5
 800c9de:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2100      	movs	r1, #0
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f000 fd37 	bl	800d45c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9ee:	2300      	movs	r3, #0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b087      	sub	sp, #28
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	60f8      	str	r0, [r7, #12]
 800ca00:	60b9      	str	r1, [r7, #8]
 800ca02:	4613      	mov	r3, r2
 800ca04:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ca06:	2301      	movs	r3, #1
 800ca08:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ca0e:	4b1f      	ldr	r3, [pc, #124]	; (800ca8c <FATFS_LinkDriverEx+0x94>)
 800ca10:	7a5b      	ldrb	r3, [r3, #9]
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d131      	bne.n	800ca7c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ca18:	4b1c      	ldr	r3, [pc, #112]	; (800ca8c <FATFS_LinkDriverEx+0x94>)
 800ca1a:	7a5b      	ldrb	r3, [r3, #9]
 800ca1c:	b2db      	uxtb	r3, r3
 800ca1e:	461a      	mov	r2, r3
 800ca20:	4b1a      	ldr	r3, [pc, #104]	; (800ca8c <FATFS_LinkDriverEx+0x94>)
 800ca22:	2100      	movs	r1, #0
 800ca24:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ca26:	4b19      	ldr	r3, [pc, #100]	; (800ca8c <FATFS_LinkDriverEx+0x94>)
 800ca28:	7a5b      	ldrb	r3, [r3, #9]
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	4a17      	ldr	r2, [pc, #92]	; (800ca8c <FATFS_LinkDriverEx+0x94>)
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	4413      	add	r3, r2
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ca36:	4b15      	ldr	r3, [pc, #84]	; (800ca8c <FATFS_LinkDriverEx+0x94>)
 800ca38:	7a5b      	ldrb	r3, [r3, #9]
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	4b13      	ldr	r3, [pc, #76]	; (800ca8c <FATFS_LinkDriverEx+0x94>)
 800ca40:	4413      	add	r3, r2
 800ca42:	79fa      	ldrb	r2, [r7, #7]
 800ca44:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ca46:	4b11      	ldr	r3, [pc, #68]	; (800ca8c <FATFS_LinkDriverEx+0x94>)
 800ca48:	7a5b      	ldrb	r3, [r3, #9]
 800ca4a:	b2db      	uxtb	r3, r3
 800ca4c:	1c5a      	adds	r2, r3, #1
 800ca4e:	b2d1      	uxtb	r1, r2
 800ca50:	4a0e      	ldr	r2, [pc, #56]	; (800ca8c <FATFS_LinkDriverEx+0x94>)
 800ca52:	7251      	strb	r1, [r2, #9]
 800ca54:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ca56:	7dbb      	ldrb	r3, [r7, #22]
 800ca58:	3330      	adds	r3, #48	; 0x30
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	3301      	adds	r3, #1
 800ca64:	223a      	movs	r2, #58	; 0x3a
 800ca66:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	3302      	adds	r3, #2
 800ca6c:	222f      	movs	r2, #47	; 0x2f
 800ca6e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	3303      	adds	r3, #3
 800ca74:	2200      	movs	r2, #0
 800ca76:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ca7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	371c      	adds	r7, #28
 800ca82:	46bd      	mov	sp, r7
 800ca84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca88:	4770      	bx	lr
 800ca8a:	bf00      	nop
 800ca8c:	2000078c 	.word	0x2000078c

0800ca90 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b082      	sub	sp, #8
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	6839      	ldr	r1, [r7, #0]
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff ffaa 	bl	800c9f8 <FATFS_LinkDriverEx>
 800caa4:	4603      	mov	r3, r0
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
	...

0800cab0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cab0:	b580      	push	{r7, lr}
 800cab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cab4:	2200      	movs	r2, #0
 800cab6:	4912      	ldr	r1, [pc, #72]	; (800cb00 <MX_USB_DEVICE_Init+0x50>)
 800cab8:	4812      	ldr	r0, [pc, #72]	; (800cb04 <MX_USB_DEVICE_Init+0x54>)
 800caba:	f7fe ff43 	bl	800b944 <USBD_Init>
 800cabe:	4603      	mov	r3, r0
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d001      	beq.n	800cac8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cac4:	f7f5 fe98 	bl	80027f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cac8:	490f      	ldr	r1, [pc, #60]	; (800cb08 <MX_USB_DEVICE_Init+0x58>)
 800caca:	480e      	ldr	r0, [pc, #56]	; (800cb04 <MX_USB_DEVICE_Init+0x54>)
 800cacc:	f7fe ff65 	bl	800b99a <USBD_RegisterClass>
 800cad0:	4603      	mov	r3, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d001      	beq.n	800cada <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cad6:	f7f5 fe8f 	bl	80027f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cada:	490c      	ldr	r1, [pc, #48]	; (800cb0c <MX_USB_DEVICE_Init+0x5c>)
 800cadc:	4809      	ldr	r0, [pc, #36]	; (800cb04 <MX_USB_DEVICE_Init+0x54>)
 800cade:	f7fe fe93 	bl	800b808 <USBD_CDC_RegisterInterface>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d001      	beq.n	800caec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cae8:	f7f5 fe86 	bl	80027f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800caec:	4805      	ldr	r0, [pc, #20]	; (800cb04 <MX_USB_DEVICE_Init+0x54>)
 800caee:	f7fe ff6e 	bl	800b9ce <USBD_Start>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800caf8:	f7f5 fe7e 	bl	80027f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cafc:	bf00      	nop
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	20000140 	.word	0x20000140
 800cb04:	200010ac 	.word	0x200010ac
 800cb08:	2000002c 	.word	0x2000002c
 800cb0c:	20000130 	.word	0x20000130

0800cb10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cb14:	2200      	movs	r2, #0
 800cb16:	4905      	ldr	r1, [pc, #20]	; (800cb2c <CDC_Init_FS+0x1c>)
 800cb18:	4805      	ldr	r0, [pc, #20]	; (800cb30 <CDC_Init_FS+0x20>)
 800cb1a:	f7fe fe8c 	bl	800b836 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cb1e:	4905      	ldr	r1, [pc, #20]	; (800cb34 <CDC_Init_FS+0x24>)
 800cb20:	4803      	ldr	r0, [pc, #12]	; (800cb30 <CDC_Init_FS+0x20>)
 800cb22:	f7fe fea2 	bl	800b86a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cb26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	20001b48 	.word	0x20001b48
 800cb30:	200010ac 	.word	0x200010ac
 800cb34:	20001348 	.word	0x20001348

0800cb38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cb3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	46bd      	mov	sp, r7
 800cb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb46:	4770      	bx	lr

0800cb48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cb48:	b480      	push	{r7}
 800cb4a:	b085      	sub	sp, #20
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	6039      	str	r1, [r7, #0]
 800cb52:	71fb      	strb	r3, [r7, #7]
 800cb54:	4613      	mov	r3, r2
 800cb56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800cb58:	f107 0308 	add.w	r3, r7, #8
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	601a      	str	r2, [r3, #0]
 800cb60:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800cb64:	79fb      	ldrb	r3, [r7, #7]
 800cb66:	2b23      	cmp	r3, #35	; 0x23
 800cb68:	d87c      	bhi.n	800cc64 <CDC_Control_FS+0x11c>
 800cb6a:	a201      	add	r2, pc, #4	; (adr r2, 800cb70 <CDC_Control_FS+0x28>)
 800cb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb70:	0800cc65 	.word	0x0800cc65
 800cb74:	0800cc65 	.word	0x0800cc65
 800cb78:	0800cc65 	.word	0x0800cc65
 800cb7c:	0800cc65 	.word	0x0800cc65
 800cb80:	0800cc65 	.word	0x0800cc65
 800cb84:	0800cc65 	.word	0x0800cc65
 800cb88:	0800cc65 	.word	0x0800cc65
 800cb8c:	0800cc65 	.word	0x0800cc65
 800cb90:	0800cc65 	.word	0x0800cc65
 800cb94:	0800cc65 	.word	0x0800cc65
 800cb98:	0800cc65 	.word	0x0800cc65
 800cb9c:	0800cc65 	.word	0x0800cc65
 800cba0:	0800cc65 	.word	0x0800cc65
 800cba4:	0800cc65 	.word	0x0800cc65
 800cba8:	0800cc65 	.word	0x0800cc65
 800cbac:	0800cc65 	.word	0x0800cc65
 800cbb0:	0800cc65 	.word	0x0800cc65
 800cbb4:	0800cc65 	.word	0x0800cc65
 800cbb8:	0800cc65 	.word	0x0800cc65
 800cbbc:	0800cc65 	.word	0x0800cc65
 800cbc0:	0800cc65 	.word	0x0800cc65
 800cbc4:	0800cc65 	.word	0x0800cc65
 800cbc8:	0800cc65 	.word	0x0800cc65
 800cbcc:	0800cc65 	.word	0x0800cc65
 800cbd0:	0800cc65 	.word	0x0800cc65
 800cbd4:	0800cc65 	.word	0x0800cc65
 800cbd8:	0800cc65 	.word	0x0800cc65
 800cbdc:	0800cc65 	.word	0x0800cc65
 800cbe0:	0800cc65 	.word	0x0800cc65
 800cbe4:	0800cc65 	.word	0x0800cc65
 800cbe8:	0800cc65 	.word	0x0800cc65
 800cbec:	0800cc65 	.word	0x0800cc65
 800cbf0:	0800cc01 	.word	0x0800cc01
 800cbf4:	0800cc2d 	.word	0x0800cc2d
 800cbf8:	0800cc65 	.word	0x0800cc65
 800cbfc:	0800cc65 	.word	0x0800cc65
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	785b      	ldrb	r3, [r3, #1]
 800cc0a:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	789b      	ldrb	r3, [r3, #2]
 800cc10:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	78db      	ldrb	r3, [r3, #3]
 800cc16:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	791b      	ldrb	r3, [r3, #4]
 800cc1c:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	795b      	ldrb	r3, [r3, #5]
 800cc22:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	799b      	ldrb	r3, [r3, #6]
 800cc28:	73bb      	strb	r3, [r7, #14]
      	break;
 800cc2a:	e01c      	b.n	800cc66 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 800cc2c:	7a3a      	ldrb	r2, [r7, #8]
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	3301      	adds	r3, #1
 800cc36:	7a7a      	ldrb	r2, [r7, #9]
 800cc38:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	3302      	adds	r3, #2
 800cc3e:	7aba      	ldrb	r2, [r7, #10]
 800cc40:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	3303      	adds	r3, #3
 800cc46:	7afa      	ldrb	r2, [r7, #11]
 800cc48:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	3304      	adds	r3, #4
 800cc4e:	7b3a      	ldrb	r2, [r7, #12]
 800cc50:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	3305      	adds	r3, #5
 800cc56:	7b7a      	ldrb	r2, [r7, #13]
 800cc58:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	3306      	adds	r3, #6
 800cc5e:	7bba      	ldrb	r2, [r7, #14]
 800cc60:	701a      	strb	r2, [r3, #0]
      	break;
 800cc62:	e000      	b.n	800cc66 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc64:	bf00      	nop
  }

  return (USBD_OK);
 800cc66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3714      	adds	r7, #20
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cc7e:	6879      	ldr	r1, [r7, #4]
 800cc80:	4805      	ldr	r0, [pc, #20]	; (800cc98 <CDC_Receive_FS+0x24>)
 800cc82:	f7fe fdf2 	bl	800b86a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cc86:	4804      	ldr	r0, [pc, #16]	; (800cc98 <CDC_Receive_FS+0x24>)
 800cc88:	f7fe fe32 	bl	800b8f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cc8c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3708      	adds	r7, #8
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	200010ac 	.word	0x200010ac

0800cc9c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	460b      	mov	r3, r1
 800cca6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ccac:	4b0d      	ldr	r3, [pc, #52]	; (800cce4 <CDC_Transmit_FS+0x48>)
 800ccae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccb2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d001      	beq.n	800ccc2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	e00b      	b.n	800ccda <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ccc2:	887b      	ldrh	r3, [r7, #2]
 800ccc4:	461a      	mov	r2, r3
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	4806      	ldr	r0, [pc, #24]	; (800cce4 <CDC_Transmit_FS+0x48>)
 800ccca:	f7fe fdb4 	bl	800b836 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ccce:	4805      	ldr	r0, [pc, #20]	; (800cce4 <CDC_Transmit_FS+0x48>)
 800ccd0:	f7fe fddf 	bl	800b892 <USBD_CDC_TransmitPacket>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ccd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3710      	adds	r7, #16
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
 800cce2:	bf00      	nop
 800cce4:	200010ac 	.word	0x200010ac

0800cce8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	6039      	str	r1, [r7, #0]
 800ccf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2212      	movs	r2, #18
 800ccf8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ccfa:	4b03      	ldr	r3, [pc, #12]	; (800cd08 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr
 800cd08:	2000015c 	.word	0x2000015c

0800cd0c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd0c:	b480      	push	{r7}
 800cd0e:	b083      	sub	sp, #12
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	4603      	mov	r3, r0
 800cd14:	6039      	str	r1, [r7, #0]
 800cd16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	2204      	movs	r2, #4
 800cd1c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd1e:	4b03      	ldr	r3, [pc, #12]	; (800cd2c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr
 800cd2c:	20000170 	.word	0x20000170

0800cd30 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	4603      	mov	r3, r0
 800cd38:	6039      	str	r1, [r7, #0]
 800cd3a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd3c:	79fb      	ldrb	r3, [r7, #7]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d105      	bne.n	800cd4e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	4907      	ldr	r1, [pc, #28]	; (800cd64 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd46:	4808      	ldr	r0, [pc, #32]	; (800cd68 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd48:	f7ff fd78 	bl	800c83c <USBD_GetString>
 800cd4c:	e004      	b.n	800cd58 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	4904      	ldr	r1, [pc, #16]	; (800cd64 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd52:	4805      	ldr	r0, [pc, #20]	; (800cd68 <USBD_FS_ProductStrDescriptor+0x38>)
 800cd54:	f7ff fd72 	bl	800c83c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd58:	4b02      	ldr	r3, [pc, #8]	; (800cd64 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3708      	adds	r7, #8
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	20002348 	.word	0x20002348
 800cd68:	08011a34 	.word	0x08011a34

0800cd6c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	4603      	mov	r3, r0
 800cd74:	6039      	str	r1, [r7, #0]
 800cd76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	4904      	ldr	r1, [pc, #16]	; (800cd8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd7c:	4804      	ldr	r0, [pc, #16]	; (800cd90 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd7e:	f7ff fd5d 	bl	800c83c <USBD_GetString>
  return USBD_StrDesc;
 800cd82:	4b02      	ldr	r3, [pc, #8]	; (800cd8c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}
 800cd8c:	20002348 	.word	0x20002348
 800cd90:	08011a4c 	.word	0x08011a4c

0800cd94 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	6039      	str	r1, [r7, #0]
 800cd9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	221a      	movs	r2, #26
 800cda4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cda6:	f000 f843 	bl	800ce30 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cdaa:	4b02      	ldr	r3, [pc, #8]	; (800cdb4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}
 800cdb4:	20000174 	.word	0x20000174

0800cdb8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	6039      	str	r1, [r7, #0]
 800cdc2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d105      	bne.n	800cdd6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdca:	683a      	ldr	r2, [r7, #0]
 800cdcc:	4907      	ldr	r1, [pc, #28]	; (800cdec <USBD_FS_ConfigStrDescriptor+0x34>)
 800cdce:	4808      	ldr	r0, [pc, #32]	; (800cdf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cdd0:	f7ff fd34 	bl	800c83c <USBD_GetString>
 800cdd4:	e004      	b.n	800cde0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	4904      	ldr	r1, [pc, #16]	; (800cdec <USBD_FS_ConfigStrDescriptor+0x34>)
 800cdda:	4805      	ldr	r0, [pc, #20]	; (800cdf0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cddc:	f7ff fd2e 	bl	800c83c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cde0:	4b02      	ldr	r3, [pc, #8]	; (800cdec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}
 800cdea:	bf00      	nop
 800cdec:	20002348 	.word	0x20002348
 800cdf0:	08011a60 	.word	0x08011a60

0800cdf4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	6039      	str	r1, [r7, #0]
 800cdfe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d105      	bne.n	800ce12 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce06:	683a      	ldr	r2, [r7, #0]
 800ce08:	4907      	ldr	r1, [pc, #28]	; (800ce28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce0a:	4808      	ldr	r0, [pc, #32]	; (800ce2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce0c:	f7ff fd16 	bl	800c83c <USBD_GetString>
 800ce10:	e004      	b.n	800ce1c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce12:	683a      	ldr	r2, [r7, #0]
 800ce14:	4904      	ldr	r1, [pc, #16]	; (800ce28 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce16:	4805      	ldr	r0, [pc, #20]	; (800ce2c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce18:	f7ff fd10 	bl	800c83c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce1c:	4b02      	ldr	r3, [pc, #8]	; (800ce28 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	20002348 	.word	0x20002348
 800ce2c:	08011a6c 	.word	0x08011a6c

0800ce30 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce36:	4b0f      	ldr	r3, [pc, #60]	; (800ce74 <Get_SerialNum+0x44>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce3c:	4b0e      	ldr	r3, [pc, #56]	; (800ce78 <Get_SerialNum+0x48>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce42:	4b0e      	ldr	r3, [pc, #56]	; (800ce7c <Get_SerialNum+0x4c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d009      	beq.n	800ce6a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce56:	2208      	movs	r2, #8
 800ce58:	4909      	ldr	r1, [pc, #36]	; (800ce80 <Get_SerialNum+0x50>)
 800ce5a:	68f8      	ldr	r0, [r7, #12]
 800ce5c:	f000 f814 	bl	800ce88 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce60:	2204      	movs	r2, #4
 800ce62:	4908      	ldr	r1, [pc, #32]	; (800ce84 <Get_SerialNum+0x54>)
 800ce64:	68b8      	ldr	r0, [r7, #8]
 800ce66:	f000 f80f 	bl	800ce88 <IntToUnicode>
  }
}
 800ce6a:	bf00      	nop
 800ce6c:	3710      	adds	r7, #16
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	1fff7a10 	.word	0x1fff7a10
 800ce78:	1fff7a14 	.word	0x1fff7a14
 800ce7c:	1fff7a18 	.word	0x1fff7a18
 800ce80:	20000176 	.word	0x20000176
 800ce84:	20000186 	.word	0x20000186

0800ce88 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b087      	sub	sp, #28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	60f8      	str	r0, [r7, #12]
 800ce90:	60b9      	str	r1, [r7, #8]
 800ce92:	4613      	mov	r3, r2
 800ce94:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce96:	2300      	movs	r3, #0
 800ce98:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	75fb      	strb	r3, [r7, #23]
 800ce9e:	e027      	b.n	800cef0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	0f1b      	lsrs	r3, r3, #28
 800cea4:	2b09      	cmp	r3, #9
 800cea6:	d80b      	bhi.n	800cec0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	0f1b      	lsrs	r3, r3, #28
 800ceac:	b2da      	uxtb	r2, r3
 800ceae:	7dfb      	ldrb	r3, [r7, #23]
 800ceb0:	005b      	lsls	r3, r3, #1
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	440b      	add	r3, r1
 800ceb8:	3230      	adds	r2, #48	; 0x30
 800ceba:	b2d2      	uxtb	r2, r2
 800cebc:	701a      	strb	r2, [r3, #0]
 800cebe:	e00a      	b.n	800ced6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	0f1b      	lsrs	r3, r3, #28
 800cec4:	b2da      	uxtb	r2, r3
 800cec6:	7dfb      	ldrb	r3, [r7, #23]
 800cec8:	005b      	lsls	r3, r3, #1
 800ceca:	4619      	mov	r1, r3
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	440b      	add	r3, r1
 800ced0:	3237      	adds	r2, #55	; 0x37
 800ced2:	b2d2      	uxtb	r2, r2
 800ced4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	011b      	lsls	r3, r3, #4
 800ceda:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
 800cede:	005b      	lsls	r3, r3, #1
 800cee0:	3301      	adds	r3, #1
 800cee2:	68ba      	ldr	r2, [r7, #8]
 800cee4:	4413      	add	r3, r2
 800cee6:	2200      	movs	r2, #0
 800cee8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ceea:	7dfb      	ldrb	r3, [r7, #23]
 800ceec:	3301      	adds	r3, #1
 800ceee:	75fb      	strb	r3, [r7, #23]
 800cef0:	7dfa      	ldrb	r2, [r7, #23]
 800cef2:	79fb      	ldrb	r3, [r7, #7]
 800cef4:	429a      	cmp	r2, r3
 800cef6:	d3d3      	bcc.n	800cea0 <IntToUnicode+0x18>
  }
}
 800cef8:	bf00      	nop
 800cefa:	371c      	adds	r7, #28
 800cefc:	46bd      	mov	sp, r7
 800cefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf02:	4770      	bx	lr

0800cf04 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b08a      	sub	sp, #40	; 0x28
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf0c:	f107 0314 	add.w	r3, r7, #20
 800cf10:	2200      	movs	r2, #0
 800cf12:	601a      	str	r2, [r3, #0]
 800cf14:	605a      	str	r2, [r3, #4]
 800cf16:	609a      	str	r2, [r3, #8]
 800cf18:	60da      	str	r2, [r3, #12]
 800cf1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf24:	d147      	bne.n	800cfb6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf26:	2300      	movs	r3, #0
 800cf28:	613b      	str	r3, [r7, #16]
 800cf2a:	4b25      	ldr	r3, [pc, #148]	; (800cfc0 <HAL_PCD_MspInit+0xbc>)
 800cf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf2e:	4a24      	ldr	r2, [pc, #144]	; (800cfc0 <HAL_PCD_MspInit+0xbc>)
 800cf30:	f043 0301 	orr.w	r3, r3, #1
 800cf34:	6313      	str	r3, [r2, #48]	; 0x30
 800cf36:	4b22      	ldr	r3, [pc, #136]	; (800cfc0 <HAL_PCD_MspInit+0xbc>)
 800cf38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf3a:	f003 0301 	and.w	r3, r3, #1
 800cf3e:	613b      	str	r3, [r7, #16]
 800cf40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800cf42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf50:	f107 0314 	add.w	r3, r7, #20
 800cf54:	4619      	mov	r1, r3
 800cf56:	481b      	ldr	r0, [pc, #108]	; (800cfc4 <HAL_PCD_MspInit+0xc0>)
 800cf58:	f7f6 fcd0 	bl	80038fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800cf5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800cf60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf62:	2302      	movs	r3, #2
 800cf64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf66:	2300      	movs	r3, #0
 800cf68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf6a:	2303      	movs	r3, #3
 800cf6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf6e:	230a      	movs	r3, #10
 800cf70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf72:	f107 0314 	add.w	r3, r7, #20
 800cf76:	4619      	mov	r1, r3
 800cf78:	4812      	ldr	r0, [pc, #72]	; (800cfc4 <HAL_PCD_MspInit+0xc0>)
 800cf7a:	f7f6 fcbf 	bl	80038fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf7e:	4b10      	ldr	r3, [pc, #64]	; (800cfc0 <HAL_PCD_MspInit+0xbc>)
 800cf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf82:	4a0f      	ldr	r2, [pc, #60]	; (800cfc0 <HAL_PCD_MspInit+0xbc>)
 800cf84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf88:	6353      	str	r3, [r2, #52]	; 0x34
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	60fb      	str	r3, [r7, #12]
 800cf8e:	4b0c      	ldr	r3, [pc, #48]	; (800cfc0 <HAL_PCD_MspInit+0xbc>)
 800cf90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf92:	4a0b      	ldr	r2, [pc, #44]	; (800cfc0 <HAL_PCD_MspInit+0xbc>)
 800cf94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cf98:	6453      	str	r3, [r2, #68]	; 0x44
 800cf9a:	4b09      	ldr	r3, [pc, #36]	; (800cfc0 <HAL_PCD_MspInit+0xbc>)
 800cf9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfa2:	60fb      	str	r3, [r7, #12]
 800cfa4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	2043      	movs	r0, #67	; 0x43
 800cfac:	f7f6 f8d3 	bl	8003156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cfb0:	2043      	movs	r0, #67	; 0x43
 800cfb2:	f7f6 f8ec 	bl	800318e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cfb6:	bf00      	nop
 800cfb8:	3728      	adds	r7, #40	; 0x28
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	40023800 	.word	0x40023800
 800cfc4:	40020000 	.word	0x40020000

0800cfc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800cfdc:	4619      	mov	r1, r3
 800cfde:	4610      	mov	r0, r2
 800cfe0:	f7fe fd3e 	bl	800ba60 <USBD_LL_SetupStage>
}
 800cfe4:	bf00      	nop
 800cfe6:	3708      	adds	r7, #8
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800cffe:	78fa      	ldrb	r2, [r7, #3]
 800d000:	6879      	ldr	r1, [r7, #4]
 800d002:	4613      	mov	r3, r2
 800d004:	00db      	lsls	r3, r3, #3
 800d006:	1a9b      	subs	r3, r3, r2
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	440b      	add	r3, r1
 800d00c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d010:	681a      	ldr	r2, [r3, #0]
 800d012:	78fb      	ldrb	r3, [r7, #3]
 800d014:	4619      	mov	r1, r3
 800d016:	f7fe fd6e 	bl	800baf6 <USBD_LL_DataOutStage>
}
 800d01a:	bf00      	nop
 800d01c:	3708      	adds	r7, #8
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}

0800d022 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d022:	b580      	push	{r7, lr}
 800d024:	b082      	sub	sp, #8
 800d026:	af00      	add	r7, sp, #0
 800d028:	6078      	str	r0, [r7, #4]
 800d02a:	460b      	mov	r3, r1
 800d02c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d034:	78fa      	ldrb	r2, [r7, #3]
 800d036:	6879      	ldr	r1, [r7, #4]
 800d038:	4613      	mov	r3, r2
 800d03a:	00db      	lsls	r3, r3, #3
 800d03c:	1a9b      	subs	r3, r3, r2
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	440b      	add	r3, r1
 800d042:	3348      	adds	r3, #72	; 0x48
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	78fb      	ldrb	r3, [r7, #3]
 800d048:	4619      	mov	r1, r3
 800d04a:	f7fe fdc5 	bl	800bbd8 <USBD_LL_DataInStage>
}
 800d04e:	bf00      	nop
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}

0800d056 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d056:	b580      	push	{r7, lr}
 800d058:	b082      	sub	sp, #8
 800d05a:	af00      	add	r7, sp, #0
 800d05c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d064:	4618      	mov	r0, r3
 800d066:	f7fe fed3 	bl	800be10 <USBD_LL_SOF>
}
 800d06a:	bf00      	nop
 800d06c:	3708      	adds	r7, #8
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d072:	b580      	push	{r7, lr}
 800d074:	b084      	sub	sp, #16
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d07a:	2301      	movs	r3, #1
 800d07c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d102      	bne.n	800d08c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]
 800d08a:	e008      	b.n	800d09e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	68db      	ldr	r3, [r3, #12]
 800d090:	2b02      	cmp	r3, #2
 800d092:	d102      	bne.n	800d09a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d094:	2301      	movs	r3, #1
 800d096:	73fb      	strb	r3, [r7, #15]
 800d098:	e001      	b.n	800d09e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d09a:	f7f5 fbad 	bl	80027f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0a4:	7bfa      	ldrb	r2, [r7, #15]
 800d0a6:	4611      	mov	r1, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7fe fe7b 	bl	800bda4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f7fe fe34 	bl	800bd22 <USBD_LL_Reset>
}
 800d0ba:	bf00      	nop
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
	...

0800d0c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	f7fe fe76 	bl	800bdc4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	687a      	ldr	r2, [r7, #4]
 800d0e4:	6812      	ldr	r2, [r2, #0]
 800d0e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d0ea:	f043 0301 	orr.w	r3, r3, #1
 800d0ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a1b      	ldr	r3, [r3, #32]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d005      	beq.n	800d104 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0f8:	4b04      	ldr	r3, [pc, #16]	; (800d10c <HAL_PCD_SuspendCallback+0x48>)
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	4a03      	ldr	r2, [pc, #12]	; (800d10c <HAL_PCD_SuspendCallback+0x48>)
 800d0fe:	f043 0306 	orr.w	r3, r3, #6
 800d102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d104:	bf00      	nop
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	e000ed00 	.word	0xe000ed00

0800d110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b082      	sub	sp, #8
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fe65 	bl	800bdee <USBD_LL_Resume>
}
 800d124:	bf00      	nop
 800d126:	3708      	adds	r7, #8
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d13e:	78fa      	ldrb	r2, [r7, #3]
 800d140:	4611      	mov	r1, r2
 800d142:	4618      	mov	r0, r3
 800d144:	f7fe fe8b 	bl	800be5e <USBD_LL_IsoOUTIncomplete>
}
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	460b      	mov	r3, r1
 800d15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d162:	78fa      	ldrb	r2, [r7, #3]
 800d164:	4611      	mov	r1, r2
 800d166:	4618      	mov	r0, r3
 800d168:	f7fe fe6c 	bl	800be44 <USBD_LL_IsoINIncomplete>
}
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d182:	4618      	mov	r0, r3
 800d184:	f7fe fe78 	bl	800be78 <USBD_LL_DevConnected>
}
 800d188:	bf00      	nop
 800d18a:	3708      	adds	r7, #8
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}

0800d190 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f7fe fe75 	bl	800be8e <USBD_LL_DevDisconnected>
}
 800d1a4:	bf00      	nop
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d13c      	bne.n	800d236 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d1bc:	4a20      	ldr	r2, [pc, #128]	; (800d240 <USBD_LL_Init+0x94>)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a1e      	ldr	r2, [pc, #120]	; (800d240 <USBD_LL_Init+0x94>)
 800d1c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d1cc:	4b1c      	ldr	r3, [pc, #112]	; (800d240 <USBD_LL_Init+0x94>)
 800d1ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d1d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d1d4:	4b1a      	ldr	r3, [pc, #104]	; (800d240 <USBD_LL_Init+0x94>)
 800d1d6:	2204      	movs	r2, #4
 800d1d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d1da:	4b19      	ldr	r3, [pc, #100]	; (800d240 <USBD_LL_Init+0x94>)
 800d1dc:	2202      	movs	r2, #2
 800d1de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d1e0:	4b17      	ldr	r3, [pc, #92]	; (800d240 <USBD_LL_Init+0x94>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d1e6:	4b16      	ldr	r3, [pc, #88]	; (800d240 <USBD_LL_Init+0x94>)
 800d1e8:	2202      	movs	r2, #2
 800d1ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d1ec:	4b14      	ldr	r3, [pc, #80]	; (800d240 <USBD_LL_Init+0x94>)
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d1f2:	4b13      	ldr	r3, [pc, #76]	; (800d240 <USBD_LL_Init+0x94>)
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d1f8:	4b11      	ldr	r3, [pc, #68]	; (800d240 <USBD_LL_Init+0x94>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d1fe:	4b10      	ldr	r3, [pc, #64]	; (800d240 <USBD_LL_Init+0x94>)
 800d200:	2201      	movs	r2, #1
 800d202:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d204:	4b0e      	ldr	r3, [pc, #56]	; (800d240 <USBD_LL_Init+0x94>)
 800d206:	2200      	movs	r2, #0
 800d208:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d20a:	480d      	ldr	r0, [pc, #52]	; (800d240 <USBD_LL_Init+0x94>)
 800d20c:	f7f7 fd23 	bl	8004c56 <HAL_PCD_Init>
 800d210:	4603      	mov	r3, r0
 800d212:	2b00      	cmp	r3, #0
 800d214:	d001      	beq.n	800d21a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d216:	f7f5 faef 	bl	80027f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d21a:	2180      	movs	r1, #128	; 0x80
 800d21c:	4808      	ldr	r0, [pc, #32]	; (800d240 <USBD_LL_Init+0x94>)
 800d21e:	f7f8 fe88 	bl	8005f32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d222:	2240      	movs	r2, #64	; 0x40
 800d224:	2100      	movs	r1, #0
 800d226:	4806      	ldr	r0, [pc, #24]	; (800d240 <USBD_LL_Init+0x94>)
 800d228:	f7f8 fe3c 	bl	8005ea4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d22c:	2280      	movs	r2, #128	; 0x80
 800d22e:	2101      	movs	r1, #1
 800d230:	4803      	ldr	r0, [pc, #12]	; (800d240 <USBD_LL_Init+0x94>)
 800d232:	f7f8 fe37 	bl	8005ea4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	20002548 	.word	0x20002548

0800d244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b084      	sub	sp, #16
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d24c:	2300      	movs	r3, #0
 800d24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d250:	2300      	movs	r3, #0
 800d252:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d25a:	4618      	mov	r0, r3
 800d25c:	f7f7 fe18 	bl	8004e90 <HAL_PCD_Start>
 800d260:	4603      	mov	r3, r0
 800d262:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	4618      	mov	r0, r3
 800d268:	f000 f92e 	bl	800d4c8 <USBD_Get_USB_Status>
 800d26c:	4603      	mov	r3, r0
 800d26e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d270:	7bbb      	ldrb	r3, [r7, #14]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b084      	sub	sp, #16
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	4608      	mov	r0, r1
 800d284:	4611      	mov	r1, r2
 800d286:	461a      	mov	r2, r3
 800d288:	4603      	mov	r3, r0
 800d28a:	70fb      	strb	r3, [r7, #3]
 800d28c:	460b      	mov	r3, r1
 800d28e:	70bb      	strb	r3, [r7, #2]
 800d290:	4613      	mov	r3, r2
 800d292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d294:	2300      	movs	r3, #0
 800d296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d2a2:	78bb      	ldrb	r3, [r7, #2]
 800d2a4:	883a      	ldrh	r2, [r7, #0]
 800d2a6:	78f9      	ldrb	r1, [r7, #3]
 800d2a8:	f7f8 f9ed 	bl	8005686 <HAL_PCD_EP_Open>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2b0:	7bfb      	ldrb	r3, [r7, #15]
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f000 f908 	bl	800d4c8 <USBD_Get_USB_Status>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b084      	sub	sp, #16
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d2e0:	78fa      	ldrb	r2, [r7, #3]
 800d2e2:	4611      	mov	r1, r2
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f7f8 fa36 	bl	8005756 <HAL_PCD_EP_Close>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f000 f8e9 	bl	800d4c8 <USBD_Get_USB_Status>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	3710      	adds	r7, #16
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}

0800d304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	460b      	mov	r3, r1
 800d30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d310:	2300      	movs	r3, #0
 800d312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d314:	2300      	movs	r3, #0
 800d316:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d31e:	78fa      	ldrb	r2, [r7, #3]
 800d320:	4611      	mov	r1, r2
 800d322:	4618      	mov	r0, r3
 800d324:	f7f8 fb0e 	bl	8005944 <HAL_PCD_EP_SetStall>
 800d328:	4603      	mov	r3, r0
 800d32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d32c:	7bfb      	ldrb	r3, [r7, #15]
 800d32e:	4618      	mov	r0, r3
 800d330:	f000 f8ca 	bl	800d4c8 <USBD_Get_USB_Status>
 800d334:	4603      	mov	r3, r0
 800d336:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d338:	7bbb      	ldrb	r3, [r7, #14]
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b084      	sub	sp, #16
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	460b      	mov	r3, r1
 800d34c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d34e:	2300      	movs	r3, #0
 800d350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d352:	2300      	movs	r3, #0
 800d354:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d35c:	78fa      	ldrb	r2, [r7, #3]
 800d35e:	4611      	mov	r1, r2
 800d360:	4618      	mov	r0, r3
 800d362:	f7f8 fb53 	bl	8005a0c <HAL_PCD_EP_ClrStall>
 800d366:	4603      	mov	r3, r0
 800d368:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800d36a:	7bfb      	ldrb	r3, [r7, #15]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f000 f8ab 	bl	800d4c8 <USBD_Get_USB_Status>
 800d372:	4603      	mov	r3, r0
 800d374:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800d376:	7bbb      	ldrb	r3, [r7, #14]
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3710      	adds	r7, #16
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}

0800d380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	460b      	mov	r3, r1
 800d38a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d392:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	da0b      	bge.n	800d3b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d39c:	78fb      	ldrb	r3, [r7, #3]
 800d39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3a2:	68f9      	ldr	r1, [r7, #12]
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	00db      	lsls	r3, r3, #3
 800d3a8:	1a9b      	subs	r3, r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	440b      	add	r3, r1
 800d3ae:	333e      	adds	r3, #62	; 0x3e
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	e00b      	b.n	800d3cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d3b4:	78fb      	ldrb	r3, [r7, #3]
 800d3b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3ba:	68f9      	ldr	r1, [r7, #12]
 800d3bc:	4613      	mov	r3, r2
 800d3be:	00db      	lsls	r3, r3, #3
 800d3c0:	1a9b      	subs	r3, r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	440b      	add	r3, r1
 800d3c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d3ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3714      	adds	r7, #20
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d6:	4770      	bx	lr

0800d3d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d3f2:	78fa      	ldrb	r2, [r7, #3]
 800d3f4:	4611      	mov	r1, r2
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7f8 f920 	bl	800563c <HAL_PCD_SetAddress>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d400:	7bfb      	ldrb	r3, [r7, #15]
 800d402:	4618      	mov	r0, r3
 800d404:	f000 f860 	bl	800d4c8 <USBD_Get_USB_Status>
 800d408:	4603      	mov	r3, r0
 800d40a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3710      	adds	r7, #16
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b086      	sub	sp, #24
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	60f8      	str	r0, [r7, #12]
 800d41e:	607a      	str	r2, [r7, #4]
 800d420:	461a      	mov	r2, r3
 800d422:	460b      	mov	r3, r1
 800d424:	72fb      	strb	r3, [r7, #11]
 800d426:	4613      	mov	r3, r2
 800d428:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d42a:	2300      	movs	r3, #0
 800d42c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d42e:	2300      	movs	r3, #0
 800d430:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d438:	893b      	ldrh	r3, [r7, #8]
 800d43a:	7af9      	ldrb	r1, [r7, #11]
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	f7f8 fa37 	bl	80058b0 <HAL_PCD_EP_Transmit>
 800d442:	4603      	mov	r3, r0
 800d444:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800d446:	7dfb      	ldrb	r3, [r7, #23]
 800d448:	4618      	mov	r0, r3
 800d44a:	f000 f83d 	bl	800d4c8 <USBD_Get_USB_Status>
 800d44e:	4603      	mov	r3, r0
 800d450:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d452:	7dbb      	ldrb	r3, [r7, #22]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3718      	adds	r7, #24
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b086      	sub	sp, #24
 800d460:	af00      	add	r7, sp, #0
 800d462:	60f8      	str	r0, [r7, #12]
 800d464:	607a      	str	r2, [r7, #4]
 800d466:	461a      	mov	r2, r3
 800d468:	460b      	mov	r3, r1
 800d46a:	72fb      	strb	r3, [r7, #11]
 800d46c:	4613      	mov	r3, r2
 800d46e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d470:	2300      	movs	r3, #0
 800d472:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d474:	2300      	movs	r3, #0
 800d476:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 800d47e:	893b      	ldrh	r3, [r7, #8]
 800d480:	7af9      	ldrb	r1, [r7, #11]
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	f7f8 f9b1 	bl	80057ea <HAL_PCD_EP_Receive>
 800d488:	4603      	mov	r3, r0
 800d48a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 f81a 	bl	800d4c8 <USBD_Get_USB_Status>
 800d494:	4603      	mov	r3, r0
 800d496:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800d498:	7dbb      	ldrb	r3, [r7, #22]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}

0800d4a2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b082      	sub	sp, #8
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800d4b4:	78fa      	ldrb	r2, [r7, #3]
 800d4b6:	4611      	mov	r1, r2
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f7f8 f9e1 	bl	8005880 <HAL_PCD_EP_GetRxCount>
 800d4be:	4603      	mov	r3, r0
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b085      	sub	sp, #20
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	2b03      	cmp	r3, #3
 800d4da:	d817      	bhi.n	800d50c <USBD_Get_USB_Status+0x44>
 800d4dc:	a201      	add	r2, pc, #4	; (adr r2, 800d4e4 <USBD_Get_USB_Status+0x1c>)
 800d4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4e2:	bf00      	nop
 800d4e4:	0800d4f5 	.word	0x0800d4f5
 800d4e8:	0800d4fb 	.word	0x0800d4fb
 800d4ec:	0800d501 	.word	0x0800d501
 800d4f0:	0800d507 	.word	0x0800d507
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d4f8:	e00b      	b.n	800d512 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d4fa:	2302      	movs	r3, #2
 800d4fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d4fe:	e008      	b.n	800d512 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d500:	2301      	movs	r3, #1
 800d502:	73fb      	strb	r3, [r7, #15]
    break;
 800d504:	e005      	b.n	800d512 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d506:	2302      	movs	r3, #2
 800d508:	73fb      	strb	r3, [r7, #15]
    break;
 800d50a:	e002      	b.n	800d512 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d50c:	2302      	movs	r3, #2
 800d50e:	73fb      	strb	r3, [r7, #15]
    break;
 800d510:	bf00      	nop
  }
  return usb_status;
 800d512:	7bfb      	ldrb	r3, [r7, #15]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3714      	adds	r7, #20
 800d518:	46bd      	mov	sp, r7
 800d51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51e:	4770      	bx	lr

0800d520 <__errno>:
 800d520:	4b01      	ldr	r3, [pc, #4]	; (800d528 <__errno+0x8>)
 800d522:	6818      	ldr	r0, [r3, #0]
 800d524:	4770      	bx	lr
 800d526:	bf00      	nop
 800d528:	20000190 	.word	0x20000190

0800d52c <__libc_init_array>:
 800d52c:	b570      	push	{r4, r5, r6, lr}
 800d52e:	4e0d      	ldr	r6, [pc, #52]	; (800d564 <__libc_init_array+0x38>)
 800d530:	4c0d      	ldr	r4, [pc, #52]	; (800d568 <__libc_init_array+0x3c>)
 800d532:	1ba4      	subs	r4, r4, r6
 800d534:	10a4      	asrs	r4, r4, #2
 800d536:	2500      	movs	r5, #0
 800d538:	42a5      	cmp	r5, r4
 800d53a:	d109      	bne.n	800d550 <__libc_init_array+0x24>
 800d53c:	4e0b      	ldr	r6, [pc, #44]	; (800d56c <__libc_init_array+0x40>)
 800d53e:	4c0c      	ldr	r4, [pc, #48]	; (800d570 <__libc_init_array+0x44>)
 800d540:	f004 fa06 	bl	8011950 <_init>
 800d544:	1ba4      	subs	r4, r4, r6
 800d546:	10a4      	asrs	r4, r4, #2
 800d548:	2500      	movs	r5, #0
 800d54a:	42a5      	cmp	r5, r4
 800d54c:	d105      	bne.n	800d55a <__libc_init_array+0x2e>
 800d54e:	bd70      	pop	{r4, r5, r6, pc}
 800d550:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d554:	4798      	blx	r3
 800d556:	3501      	adds	r5, #1
 800d558:	e7ee      	b.n	800d538 <__libc_init_array+0xc>
 800d55a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d55e:	4798      	blx	r3
 800d560:	3501      	adds	r5, #1
 800d562:	e7f2      	b.n	800d54a <__libc_init_array+0x1e>
 800d564:	08011dd8 	.word	0x08011dd8
 800d568:	08011dd8 	.word	0x08011dd8
 800d56c:	08011dd8 	.word	0x08011dd8
 800d570:	08011ddc 	.word	0x08011ddc

0800d574 <malloc>:
 800d574:	4b02      	ldr	r3, [pc, #8]	; (800d580 <malloc+0xc>)
 800d576:	4601      	mov	r1, r0
 800d578:	6818      	ldr	r0, [r3, #0]
 800d57a:	f000 b86d 	b.w	800d658 <_malloc_r>
 800d57e:	bf00      	nop
 800d580:	20000190 	.word	0x20000190

0800d584 <free>:
 800d584:	4b02      	ldr	r3, [pc, #8]	; (800d590 <free+0xc>)
 800d586:	4601      	mov	r1, r0
 800d588:	6818      	ldr	r0, [r3, #0]
 800d58a:	f000 b817 	b.w	800d5bc <_free_r>
 800d58e:	bf00      	nop
 800d590:	20000190 	.word	0x20000190

0800d594 <memcpy>:
 800d594:	b510      	push	{r4, lr}
 800d596:	1e43      	subs	r3, r0, #1
 800d598:	440a      	add	r2, r1
 800d59a:	4291      	cmp	r1, r2
 800d59c:	d100      	bne.n	800d5a0 <memcpy+0xc>
 800d59e:	bd10      	pop	{r4, pc}
 800d5a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d5a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d5a8:	e7f7      	b.n	800d59a <memcpy+0x6>

0800d5aa <memset>:
 800d5aa:	4402      	add	r2, r0
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d100      	bne.n	800d5b4 <memset+0xa>
 800d5b2:	4770      	bx	lr
 800d5b4:	f803 1b01 	strb.w	r1, [r3], #1
 800d5b8:	e7f9      	b.n	800d5ae <memset+0x4>
	...

0800d5bc <_free_r>:
 800d5bc:	b538      	push	{r3, r4, r5, lr}
 800d5be:	4605      	mov	r5, r0
 800d5c0:	2900      	cmp	r1, #0
 800d5c2:	d045      	beq.n	800d650 <_free_r+0x94>
 800d5c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5c8:	1f0c      	subs	r4, r1, #4
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	bfb8      	it	lt
 800d5ce:	18e4      	addlt	r4, r4, r3
 800d5d0:	f003 f834 	bl	801063c <__malloc_lock>
 800d5d4:	4a1f      	ldr	r2, [pc, #124]	; (800d654 <_free_r+0x98>)
 800d5d6:	6813      	ldr	r3, [r2, #0]
 800d5d8:	4610      	mov	r0, r2
 800d5da:	b933      	cbnz	r3, 800d5ea <_free_r+0x2e>
 800d5dc:	6063      	str	r3, [r4, #4]
 800d5de:	6014      	str	r4, [r2, #0]
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5e6:	f003 b82a 	b.w	801063e <__malloc_unlock>
 800d5ea:	42a3      	cmp	r3, r4
 800d5ec:	d90c      	bls.n	800d608 <_free_r+0x4c>
 800d5ee:	6821      	ldr	r1, [r4, #0]
 800d5f0:	1862      	adds	r2, r4, r1
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	bf04      	itt	eq
 800d5f6:	681a      	ldreq	r2, [r3, #0]
 800d5f8:	685b      	ldreq	r3, [r3, #4]
 800d5fa:	6063      	str	r3, [r4, #4]
 800d5fc:	bf04      	itt	eq
 800d5fe:	1852      	addeq	r2, r2, r1
 800d600:	6022      	streq	r2, [r4, #0]
 800d602:	6004      	str	r4, [r0, #0]
 800d604:	e7ec      	b.n	800d5e0 <_free_r+0x24>
 800d606:	4613      	mov	r3, r2
 800d608:	685a      	ldr	r2, [r3, #4]
 800d60a:	b10a      	cbz	r2, 800d610 <_free_r+0x54>
 800d60c:	42a2      	cmp	r2, r4
 800d60e:	d9fa      	bls.n	800d606 <_free_r+0x4a>
 800d610:	6819      	ldr	r1, [r3, #0]
 800d612:	1858      	adds	r0, r3, r1
 800d614:	42a0      	cmp	r0, r4
 800d616:	d10b      	bne.n	800d630 <_free_r+0x74>
 800d618:	6820      	ldr	r0, [r4, #0]
 800d61a:	4401      	add	r1, r0
 800d61c:	1858      	adds	r0, r3, r1
 800d61e:	4282      	cmp	r2, r0
 800d620:	6019      	str	r1, [r3, #0]
 800d622:	d1dd      	bne.n	800d5e0 <_free_r+0x24>
 800d624:	6810      	ldr	r0, [r2, #0]
 800d626:	6852      	ldr	r2, [r2, #4]
 800d628:	605a      	str	r2, [r3, #4]
 800d62a:	4401      	add	r1, r0
 800d62c:	6019      	str	r1, [r3, #0]
 800d62e:	e7d7      	b.n	800d5e0 <_free_r+0x24>
 800d630:	d902      	bls.n	800d638 <_free_r+0x7c>
 800d632:	230c      	movs	r3, #12
 800d634:	602b      	str	r3, [r5, #0]
 800d636:	e7d3      	b.n	800d5e0 <_free_r+0x24>
 800d638:	6820      	ldr	r0, [r4, #0]
 800d63a:	1821      	adds	r1, r4, r0
 800d63c:	428a      	cmp	r2, r1
 800d63e:	bf04      	itt	eq
 800d640:	6811      	ldreq	r1, [r2, #0]
 800d642:	6852      	ldreq	r2, [r2, #4]
 800d644:	6062      	str	r2, [r4, #4]
 800d646:	bf04      	itt	eq
 800d648:	1809      	addeq	r1, r1, r0
 800d64a:	6021      	streq	r1, [r4, #0]
 800d64c:	605c      	str	r4, [r3, #4]
 800d64e:	e7c7      	b.n	800d5e0 <_free_r+0x24>
 800d650:	bd38      	pop	{r3, r4, r5, pc}
 800d652:	bf00      	nop
 800d654:	20000798 	.word	0x20000798

0800d658 <_malloc_r>:
 800d658:	b570      	push	{r4, r5, r6, lr}
 800d65a:	1ccd      	adds	r5, r1, #3
 800d65c:	f025 0503 	bic.w	r5, r5, #3
 800d660:	3508      	adds	r5, #8
 800d662:	2d0c      	cmp	r5, #12
 800d664:	bf38      	it	cc
 800d666:	250c      	movcc	r5, #12
 800d668:	2d00      	cmp	r5, #0
 800d66a:	4606      	mov	r6, r0
 800d66c:	db01      	blt.n	800d672 <_malloc_r+0x1a>
 800d66e:	42a9      	cmp	r1, r5
 800d670:	d903      	bls.n	800d67a <_malloc_r+0x22>
 800d672:	230c      	movs	r3, #12
 800d674:	6033      	str	r3, [r6, #0]
 800d676:	2000      	movs	r0, #0
 800d678:	bd70      	pop	{r4, r5, r6, pc}
 800d67a:	f002 ffdf 	bl	801063c <__malloc_lock>
 800d67e:	4a21      	ldr	r2, [pc, #132]	; (800d704 <_malloc_r+0xac>)
 800d680:	6814      	ldr	r4, [r2, #0]
 800d682:	4621      	mov	r1, r4
 800d684:	b991      	cbnz	r1, 800d6ac <_malloc_r+0x54>
 800d686:	4c20      	ldr	r4, [pc, #128]	; (800d708 <_malloc_r+0xb0>)
 800d688:	6823      	ldr	r3, [r4, #0]
 800d68a:	b91b      	cbnz	r3, 800d694 <_malloc_r+0x3c>
 800d68c:	4630      	mov	r0, r6
 800d68e:	f000 fe93 	bl	800e3b8 <_sbrk_r>
 800d692:	6020      	str	r0, [r4, #0]
 800d694:	4629      	mov	r1, r5
 800d696:	4630      	mov	r0, r6
 800d698:	f000 fe8e 	bl	800e3b8 <_sbrk_r>
 800d69c:	1c43      	adds	r3, r0, #1
 800d69e:	d124      	bne.n	800d6ea <_malloc_r+0x92>
 800d6a0:	230c      	movs	r3, #12
 800d6a2:	6033      	str	r3, [r6, #0]
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	f002 ffca 	bl	801063e <__malloc_unlock>
 800d6aa:	e7e4      	b.n	800d676 <_malloc_r+0x1e>
 800d6ac:	680b      	ldr	r3, [r1, #0]
 800d6ae:	1b5b      	subs	r3, r3, r5
 800d6b0:	d418      	bmi.n	800d6e4 <_malloc_r+0x8c>
 800d6b2:	2b0b      	cmp	r3, #11
 800d6b4:	d90f      	bls.n	800d6d6 <_malloc_r+0x7e>
 800d6b6:	600b      	str	r3, [r1, #0]
 800d6b8:	50cd      	str	r5, [r1, r3]
 800d6ba:	18cc      	adds	r4, r1, r3
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f002 ffbe 	bl	801063e <__malloc_unlock>
 800d6c2:	f104 000b 	add.w	r0, r4, #11
 800d6c6:	1d23      	adds	r3, r4, #4
 800d6c8:	f020 0007 	bic.w	r0, r0, #7
 800d6cc:	1ac3      	subs	r3, r0, r3
 800d6ce:	d0d3      	beq.n	800d678 <_malloc_r+0x20>
 800d6d0:	425a      	negs	r2, r3
 800d6d2:	50e2      	str	r2, [r4, r3]
 800d6d4:	e7d0      	b.n	800d678 <_malloc_r+0x20>
 800d6d6:	428c      	cmp	r4, r1
 800d6d8:	684b      	ldr	r3, [r1, #4]
 800d6da:	bf16      	itet	ne
 800d6dc:	6063      	strne	r3, [r4, #4]
 800d6de:	6013      	streq	r3, [r2, #0]
 800d6e0:	460c      	movne	r4, r1
 800d6e2:	e7eb      	b.n	800d6bc <_malloc_r+0x64>
 800d6e4:	460c      	mov	r4, r1
 800d6e6:	6849      	ldr	r1, [r1, #4]
 800d6e8:	e7cc      	b.n	800d684 <_malloc_r+0x2c>
 800d6ea:	1cc4      	adds	r4, r0, #3
 800d6ec:	f024 0403 	bic.w	r4, r4, #3
 800d6f0:	42a0      	cmp	r0, r4
 800d6f2:	d005      	beq.n	800d700 <_malloc_r+0xa8>
 800d6f4:	1a21      	subs	r1, r4, r0
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	f000 fe5e 	bl	800e3b8 <_sbrk_r>
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	d0cf      	beq.n	800d6a0 <_malloc_r+0x48>
 800d700:	6025      	str	r5, [r4, #0]
 800d702:	e7db      	b.n	800d6bc <_malloc_r+0x64>
 800d704:	20000798 	.word	0x20000798
 800d708:	2000079c 	.word	0x2000079c

0800d70c <__cvt>:
 800d70c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d710:	ec55 4b10 	vmov	r4, r5, d0
 800d714:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d716:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d71a:	2d00      	cmp	r5, #0
 800d71c:	460e      	mov	r6, r1
 800d71e:	4691      	mov	r9, r2
 800d720:	4619      	mov	r1, r3
 800d722:	bfb8      	it	lt
 800d724:	4622      	movlt	r2, r4
 800d726:	462b      	mov	r3, r5
 800d728:	f027 0720 	bic.w	r7, r7, #32
 800d72c:	bfbb      	ittet	lt
 800d72e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d732:	461d      	movlt	r5, r3
 800d734:	2300      	movge	r3, #0
 800d736:	232d      	movlt	r3, #45	; 0x2d
 800d738:	bfb8      	it	lt
 800d73a:	4614      	movlt	r4, r2
 800d73c:	2f46      	cmp	r7, #70	; 0x46
 800d73e:	700b      	strb	r3, [r1, #0]
 800d740:	d004      	beq.n	800d74c <__cvt+0x40>
 800d742:	2f45      	cmp	r7, #69	; 0x45
 800d744:	d100      	bne.n	800d748 <__cvt+0x3c>
 800d746:	3601      	adds	r6, #1
 800d748:	2102      	movs	r1, #2
 800d74a:	e000      	b.n	800d74e <__cvt+0x42>
 800d74c:	2103      	movs	r1, #3
 800d74e:	ab03      	add	r3, sp, #12
 800d750:	9301      	str	r3, [sp, #4]
 800d752:	ab02      	add	r3, sp, #8
 800d754:	9300      	str	r3, [sp, #0]
 800d756:	4632      	mov	r2, r6
 800d758:	4653      	mov	r3, sl
 800d75a:	ec45 4b10 	vmov	d0, r4, r5
 800d75e:	f001 fd9f 	bl	800f2a0 <_dtoa_r>
 800d762:	2f47      	cmp	r7, #71	; 0x47
 800d764:	4680      	mov	r8, r0
 800d766:	d102      	bne.n	800d76e <__cvt+0x62>
 800d768:	f019 0f01 	tst.w	r9, #1
 800d76c:	d026      	beq.n	800d7bc <__cvt+0xb0>
 800d76e:	2f46      	cmp	r7, #70	; 0x46
 800d770:	eb08 0906 	add.w	r9, r8, r6
 800d774:	d111      	bne.n	800d79a <__cvt+0x8e>
 800d776:	f898 3000 	ldrb.w	r3, [r8]
 800d77a:	2b30      	cmp	r3, #48	; 0x30
 800d77c:	d10a      	bne.n	800d794 <__cvt+0x88>
 800d77e:	2200      	movs	r2, #0
 800d780:	2300      	movs	r3, #0
 800d782:	4620      	mov	r0, r4
 800d784:	4629      	mov	r1, r5
 800d786:	f7f3 f99f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d78a:	b918      	cbnz	r0, 800d794 <__cvt+0x88>
 800d78c:	f1c6 0601 	rsb	r6, r6, #1
 800d790:	f8ca 6000 	str.w	r6, [sl]
 800d794:	f8da 3000 	ldr.w	r3, [sl]
 800d798:	4499      	add	r9, r3
 800d79a:	2200      	movs	r2, #0
 800d79c:	2300      	movs	r3, #0
 800d79e:	4620      	mov	r0, r4
 800d7a0:	4629      	mov	r1, r5
 800d7a2:	f7f3 f991 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7a6:	b938      	cbnz	r0, 800d7b8 <__cvt+0xac>
 800d7a8:	2230      	movs	r2, #48	; 0x30
 800d7aa:	9b03      	ldr	r3, [sp, #12]
 800d7ac:	454b      	cmp	r3, r9
 800d7ae:	d205      	bcs.n	800d7bc <__cvt+0xb0>
 800d7b0:	1c59      	adds	r1, r3, #1
 800d7b2:	9103      	str	r1, [sp, #12]
 800d7b4:	701a      	strb	r2, [r3, #0]
 800d7b6:	e7f8      	b.n	800d7aa <__cvt+0x9e>
 800d7b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7bc:	9b03      	ldr	r3, [sp, #12]
 800d7be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7c0:	eba3 0308 	sub.w	r3, r3, r8
 800d7c4:	4640      	mov	r0, r8
 800d7c6:	6013      	str	r3, [r2, #0]
 800d7c8:	b004      	add	sp, #16
 800d7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d7ce <__exponent>:
 800d7ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d7d0:	2900      	cmp	r1, #0
 800d7d2:	4604      	mov	r4, r0
 800d7d4:	bfba      	itte	lt
 800d7d6:	4249      	neglt	r1, r1
 800d7d8:	232d      	movlt	r3, #45	; 0x2d
 800d7da:	232b      	movge	r3, #43	; 0x2b
 800d7dc:	2909      	cmp	r1, #9
 800d7de:	f804 2b02 	strb.w	r2, [r4], #2
 800d7e2:	7043      	strb	r3, [r0, #1]
 800d7e4:	dd20      	ble.n	800d828 <__exponent+0x5a>
 800d7e6:	f10d 0307 	add.w	r3, sp, #7
 800d7ea:	461f      	mov	r7, r3
 800d7ec:	260a      	movs	r6, #10
 800d7ee:	fb91 f5f6 	sdiv	r5, r1, r6
 800d7f2:	fb06 1115 	mls	r1, r6, r5, r1
 800d7f6:	3130      	adds	r1, #48	; 0x30
 800d7f8:	2d09      	cmp	r5, #9
 800d7fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d7fe:	f103 32ff 	add.w	r2, r3, #4294967295
 800d802:	4629      	mov	r1, r5
 800d804:	dc09      	bgt.n	800d81a <__exponent+0x4c>
 800d806:	3130      	adds	r1, #48	; 0x30
 800d808:	3b02      	subs	r3, #2
 800d80a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d80e:	42bb      	cmp	r3, r7
 800d810:	4622      	mov	r2, r4
 800d812:	d304      	bcc.n	800d81e <__exponent+0x50>
 800d814:	1a10      	subs	r0, r2, r0
 800d816:	b003      	add	sp, #12
 800d818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d81a:	4613      	mov	r3, r2
 800d81c:	e7e7      	b.n	800d7ee <__exponent+0x20>
 800d81e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d822:	f804 2b01 	strb.w	r2, [r4], #1
 800d826:	e7f2      	b.n	800d80e <__exponent+0x40>
 800d828:	2330      	movs	r3, #48	; 0x30
 800d82a:	4419      	add	r1, r3
 800d82c:	7083      	strb	r3, [r0, #2]
 800d82e:	1d02      	adds	r2, r0, #4
 800d830:	70c1      	strb	r1, [r0, #3]
 800d832:	e7ef      	b.n	800d814 <__exponent+0x46>

0800d834 <_printf_float>:
 800d834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	b08d      	sub	sp, #52	; 0x34
 800d83a:	460c      	mov	r4, r1
 800d83c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d840:	4616      	mov	r6, r2
 800d842:	461f      	mov	r7, r3
 800d844:	4605      	mov	r5, r0
 800d846:	f002 fed9 	bl	80105fc <_localeconv_r>
 800d84a:	6803      	ldr	r3, [r0, #0]
 800d84c:	9304      	str	r3, [sp, #16]
 800d84e:	4618      	mov	r0, r3
 800d850:	f7f2 fcbe 	bl	80001d0 <strlen>
 800d854:	2300      	movs	r3, #0
 800d856:	930a      	str	r3, [sp, #40]	; 0x28
 800d858:	f8d8 3000 	ldr.w	r3, [r8]
 800d85c:	9005      	str	r0, [sp, #20]
 800d85e:	3307      	adds	r3, #7
 800d860:	f023 0307 	bic.w	r3, r3, #7
 800d864:	f103 0208 	add.w	r2, r3, #8
 800d868:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d86c:	f8d4 b000 	ldr.w	fp, [r4]
 800d870:	f8c8 2000 	str.w	r2, [r8]
 800d874:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d878:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d87c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d880:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d884:	9307      	str	r3, [sp, #28]
 800d886:	f8cd 8018 	str.w	r8, [sp, #24]
 800d88a:	f04f 32ff 	mov.w	r2, #4294967295
 800d88e:	4ba7      	ldr	r3, [pc, #668]	; (800db2c <_printf_float+0x2f8>)
 800d890:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d894:	f7f3 f94a 	bl	8000b2c <__aeabi_dcmpun>
 800d898:	bb70      	cbnz	r0, 800d8f8 <_printf_float+0xc4>
 800d89a:	f04f 32ff 	mov.w	r2, #4294967295
 800d89e:	4ba3      	ldr	r3, [pc, #652]	; (800db2c <_printf_float+0x2f8>)
 800d8a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8a4:	f7f3 f924 	bl	8000af0 <__aeabi_dcmple>
 800d8a8:	bb30      	cbnz	r0, 800d8f8 <_printf_float+0xc4>
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	4640      	mov	r0, r8
 800d8b0:	4649      	mov	r1, r9
 800d8b2:	f7f3 f913 	bl	8000adc <__aeabi_dcmplt>
 800d8b6:	b110      	cbz	r0, 800d8be <_printf_float+0x8a>
 800d8b8:	232d      	movs	r3, #45	; 0x2d
 800d8ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8be:	4a9c      	ldr	r2, [pc, #624]	; (800db30 <_printf_float+0x2fc>)
 800d8c0:	4b9c      	ldr	r3, [pc, #624]	; (800db34 <_printf_float+0x300>)
 800d8c2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d8c6:	bf8c      	ite	hi
 800d8c8:	4690      	movhi	r8, r2
 800d8ca:	4698      	movls	r8, r3
 800d8cc:	2303      	movs	r3, #3
 800d8ce:	f02b 0204 	bic.w	r2, fp, #4
 800d8d2:	6123      	str	r3, [r4, #16]
 800d8d4:	6022      	str	r2, [r4, #0]
 800d8d6:	f04f 0900 	mov.w	r9, #0
 800d8da:	9700      	str	r7, [sp, #0]
 800d8dc:	4633      	mov	r3, r6
 800d8de:	aa0b      	add	r2, sp, #44	; 0x2c
 800d8e0:	4621      	mov	r1, r4
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f000 f9e6 	bl	800dcb4 <_printf_common>
 800d8e8:	3001      	adds	r0, #1
 800d8ea:	f040 808d 	bne.w	800da08 <_printf_float+0x1d4>
 800d8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f2:	b00d      	add	sp, #52	; 0x34
 800d8f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8f8:	4642      	mov	r2, r8
 800d8fa:	464b      	mov	r3, r9
 800d8fc:	4640      	mov	r0, r8
 800d8fe:	4649      	mov	r1, r9
 800d900:	f7f3 f914 	bl	8000b2c <__aeabi_dcmpun>
 800d904:	b110      	cbz	r0, 800d90c <_printf_float+0xd8>
 800d906:	4a8c      	ldr	r2, [pc, #560]	; (800db38 <_printf_float+0x304>)
 800d908:	4b8c      	ldr	r3, [pc, #560]	; (800db3c <_printf_float+0x308>)
 800d90a:	e7da      	b.n	800d8c2 <_printf_float+0x8e>
 800d90c:	6861      	ldr	r1, [r4, #4]
 800d90e:	1c4b      	adds	r3, r1, #1
 800d910:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d914:	a80a      	add	r0, sp, #40	; 0x28
 800d916:	d13e      	bne.n	800d996 <_printf_float+0x162>
 800d918:	2306      	movs	r3, #6
 800d91a:	6063      	str	r3, [r4, #4]
 800d91c:	2300      	movs	r3, #0
 800d91e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d922:	ab09      	add	r3, sp, #36	; 0x24
 800d924:	9300      	str	r3, [sp, #0]
 800d926:	ec49 8b10 	vmov	d0, r8, r9
 800d92a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d92e:	6022      	str	r2, [r4, #0]
 800d930:	f8cd a004 	str.w	sl, [sp, #4]
 800d934:	6861      	ldr	r1, [r4, #4]
 800d936:	4628      	mov	r0, r5
 800d938:	f7ff fee8 	bl	800d70c <__cvt>
 800d93c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d940:	2b47      	cmp	r3, #71	; 0x47
 800d942:	4680      	mov	r8, r0
 800d944:	d109      	bne.n	800d95a <_printf_float+0x126>
 800d946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d948:	1cd8      	adds	r0, r3, #3
 800d94a:	db02      	blt.n	800d952 <_printf_float+0x11e>
 800d94c:	6862      	ldr	r2, [r4, #4]
 800d94e:	4293      	cmp	r3, r2
 800d950:	dd47      	ble.n	800d9e2 <_printf_float+0x1ae>
 800d952:	f1aa 0a02 	sub.w	sl, sl, #2
 800d956:	fa5f fa8a 	uxtb.w	sl, sl
 800d95a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d95e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d960:	d824      	bhi.n	800d9ac <_printf_float+0x178>
 800d962:	3901      	subs	r1, #1
 800d964:	4652      	mov	r2, sl
 800d966:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d96a:	9109      	str	r1, [sp, #36]	; 0x24
 800d96c:	f7ff ff2f 	bl	800d7ce <__exponent>
 800d970:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d972:	1813      	adds	r3, r2, r0
 800d974:	2a01      	cmp	r2, #1
 800d976:	4681      	mov	r9, r0
 800d978:	6123      	str	r3, [r4, #16]
 800d97a:	dc02      	bgt.n	800d982 <_printf_float+0x14e>
 800d97c:	6822      	ldr	r2, [r4, #0]
 800d97e:	07d1      	lsls	r1, r2, #31
 800d980:	d501      	bpl.n	800d986 <_printf_float+0x152>
 800d982:	3301      	adds	r3, #1
 800d984:	6123      	str	r3, [r4, #16]
 800d986:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d0a5      	beq.n	800d8da <_printf_float+0xa6>
 800d98e:	232d      	movs	r3, #45	; 0x2d
 800d990:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d994:	e7a1      	b.n	800d8da <_printf_float+0xa6>
 800d996:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d99a:	f000 8177 	beq.w	800dc8c <_printf_float+0x458>
 800d99e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d9a2:	d1bb      	bne.n	800d91c <_printf_float+0xe8>
 800d9a4:	2900      	cmp	r1, #0
 800d9a6:	d1b9      	bne.n	800d91c <_printf_float+0xe8>
 800d9a8:	2301      	movs	r3, #1
 800d9aa:	e7b6      	b.n	800d91a <_printf_float+0xe6>
 800d9ac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d9b0:	d119      	bne.n	800d9e6 <_printf_float+0x1b2>
 800d9b2:	2900      	cmp	r1, #0
 800d9b4:	6863      	ldr	r3, [r4, #4]
 800d9b6:	dd0c      	ble.n	800d9d2 <_printf_float+0x19e>
 800d9b8:	6121      	str	r1, [r4, #16]
 800d9ba:	b913      	cbnz	r3, 800d9c2 <_printf_float+0x18e>
 800d9bc:	6822      	ldr	r2, [r4, #0]
 800d9be:	07d2      	lsls	r2, r2, #31
 800d9c0:	d502      	bpl.n	800d9c8 <_printf_float+0x194>
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	440b      	add	r3, r1
 800d9c6:	6123      	str	r3, [r4, #16]
 800d9c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ca:	65a3      	str	r3, [r4, #88]	; 0x58
 800d9cc:	f04f 0900 	mov.w	r9, #0
 800d9d0:	e7d9      	b.n	800d986 <_printf_float+0x152>
 800d9d2:	b913      	cbnz	r3, 800d9da <_printf_float+0x1a6>
 800d9d4:	6822      	ldr	r2, [r4, #0]
 800d9d6:	07d0      	lsls	r0, r2, #31
 800d9d8:	d501      	bpl.n	800d9de <_printf_float+0x1aa>
 800d9da:	3302      	adds	r3, #2
 800d9dc:	e7f3      	b.n	800d9c6 <_printf_float+0x192>
 800d9de:	2301      	movs	r3, #1
 800d9e0:	e7f1      	b.n	800d9c6 <_printf_float+0x192>
 800d9e2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d9e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d9ea:	4293      	cmp	r3, r2
 800d9ec:	db05      	blt.n	800d9fa <_printf_float+0x1c6>
 800d9ee:	6822      	ldr	r2, [r4, #0]
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	07d1      	lsls	r1, r2, #31
 800d9f4:	d5e8      	bpl.n	800d9c8 <_printf_float+0x194>
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	e7e5      	b.n	800d9c6 <_printf_float+0x192>
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	bfd4      	ite	le
 800d9fe:	f1c3 0302 	rsble	r3, r3, #2
 800da02:	2301      	movgt	r3, #1
 800da04:	4413      	add	r3, r2
 800da06:	e7de      	b.n	800d9c6 <_printf_float+0x192>
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	055a      	lsls	r2, r3, #21
 800da0c:	d407      	bmi.n	800da1e <_printf_float+0x1ea>
 800da0e:	6923      	ldr	r3, [r4, #16]
 800da10:	4642      	mov	r2, r8
 800da12:	4631      	mov	r1, r6
 800da14:	4628      	mov	r0, r5
 800da16:	47b8      	blx	r7
 800da18:	3001      	adds	r0, #1
 800da1a:	d12b      	bne.n	800da74 <_printf_float+0x240>
 800da1c:	e767      	b.n	800d8ee <_printf_float+0xba>
 800da1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800da22:	f240 80dc 	bls.w	800dbde <_printf_float+0x3aa>
 800da26:	2200      	movs	r2, #0
 800da28:	2300      	movs	r3, #0
 800da2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da2e:	f7f3 f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 800da32:	2800      	cmp	r0, #0
 800da34:	d033      	beq.n	800da9e <_printf_float+0x26a>
 800da36:	2301      	movs	r3, #1
 800da38:	4a41      	ldr	r2, [pc, #260]	; (800db40 <_printf_float+0x30c>)
 800da3a:	4631      	mov	r1, r6
 800da3c:	4628      	mov	r0, r5
 800da3e:	47b8      	blx	r7
 800da40:	3001      	adds	r0, #1
 800da42:	f43f af54 	beq.w	800d8ee <_printf_float+0xba>
 800da46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da4a:	429a      	cmp	r2, r3
 800da4c:	db02      	blt.n	800da54 <_printf_float+0x220>
 800da4e:	6823      	ldr	r3, [r4, #0]
 800da50:	07d8      	lsls	r0, r3, #31
 800da52:	d50f      	bpl.n	800da74 <_printf_float+0x240>
 800da54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da58:	4631      	mov	r1, r6
 800da5a:	4628      	mov	r0, r5
 800da5c:	47b8      	blx	r7
 800da5e:	3001      	adds	r0, #1
 800da60:	f43f af45 	beq.w	800d8ee <_printf_float+0xba>
 800da64:	f04f 0800 	mov.w	r8, #0
 800da68:	f104 091a 	add.w	r9, r4, #26
 800da6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da6e:	3b01      	subs	r3, #1
 800da70:	4543      	cmp	r3, r8
 800da72:	dc09      	bgt.n	800da88 <_printf_float+0x254>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	079b      	lsls	r3, r3, #30
 800da78:	f100 8103 	bmi.w	800dc82 <_printf_float+0x44e>
 800da7c:	68e0      	ldr	r0, [r4, #12]
 800da7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da80:	4298      	cmp	r0, r3
 800da82:	bfb8      	it	lt
 800da84:	4618      	movlt	r0, r3
 800da86:	e734      	b.n	800d8f2 <_printf_float+0xbe>
 800da88:	2301      	movs	r3, #1
 800da8a:	464a      	mov	r2, r9
 800da8c:	4631      	mov	r1, r6
 800da8e:	4628      	mov	r0, r5
 800da90:	47b8      	blx	r7
 800da92:	3001      	adds	r0, #1
 800da94:	f43f af2b 	beq.w	800d8ee <_printf_float+0xba>
 800da98:	f108 0801 	add.w	r8, r8, #1
 800da9c:	e7e6      	b.n	800da6c <_printf_float+0x238>
 800da9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	dc2b      	bgt.n	800dafc <_printf_float+0x2c8>
 800daa4:	2301      	movs	r3, #1
 800daa6:	4a26      	ldr	r2, [pc, #152]	; (800db40 <_printf_float+0x30c>)
 800daa8:	4631      	mov	r1, r6
 800daaa:	4628      	mov	r0, r5
 800daac:	47b8      	blx	r7
 800daae:	3001      	adds	r0, #1
 800dab0:	f43f af1d 	beq.w	800d8ee <_printf_float+0xba>
 800dab4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dab6:	b923      	cbnz	r3, 800dac2 <_printf_float+0x28e>
 800dab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daba:	b913      	cbnz	r3, 800dac2 <_printf_float+0x28e>
 800dabc:	6823      	ldr	r3, [r4, #0]
 800dabe:	07d9      	lsls	r1, r3, #31
 800dac0:	d5d8      	bpl.n	800da74 <_printf_float+0x240>
 800dac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dac6:	4631      	mov	r1, r6
 800dac8:	4628      	mov	r0, r5
 800daca:	47b8      	blx	r7
 800dacc:	3001      	adds	r0, #1
 800dace:	f43f af0e 	beq.w	800d8ee <_printf_float+0xba>
 800dad2:	f04f 0900 	mov.w	r9, #0
 800dad6:	f104 0a1a 	add.w	sl, r4, #26
 800dada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dadc:	425b      	negs	r3, r3
 800dade:	454b      	cmp	r3, r9
 800dae0:	dc01      	bgt.n	800dae6 <_printf_float+0x2b2>
 800dae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dae4:	e794      	b.n	800da10 <_printf_float+0x1dc>
 800dae6:	2301      	movs	r3, #1
 800dae8:	4652      	mov	r2, sl
 800daea:	4631      	mov	r1, r6
 800daec:	4628      	mov	r0, r5
 800daee:	47b8      	blx	r7
 800daf0:	3001      	adds	r0, #1
 800daf2:	f43f aefc 	beq.w	800d8ee <_printf_float+0xba>
 800daf6:	f109 0901 	add.w	r9, r9, #1
 800dafa:	e7ee      	b.n	800dada <_printf_float+0x2a6>
 800dafc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db00:	429a      	cmp	r2, r3
 800db02:	bfa8      	it	ge
 800db04:	461a      	movge	r2, r3
 800db06:	2a00      	cmp	r2, #0
 800db08:	4691      	mov	r9, r2
 800db0a:	dd07      	ble.n	800db1c <_printf_float+0x2e8>
 800db0c:	4613      	mov	r3, r2
 800db0e:	4631      	mov	r1, r6
 800db10:	4642      	mov	r2, r8
 800db12:	4628      	mov	r0, r5
 800db14:	47b8      	blx	r7
 800db16:	3001      	adds	r0, #1
 800db18:	f43f aee9 	beq.w	800d8ee <_printf_float+0xba>
 800db1c:	f104 031a 	add.w	r3, r4, #26
 800db20:	f04f 0b00 	mov.w	fp, #0
 800db24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db28:	9306      	str	r3, [sp, #24]
 800db2a:	e015      	b.n	800db58 <_printf_float+0x324>
 800db2c:	7fefffff 	.word	0x7fefffff
 800db30:	08011ab8 	.word	0x08011ab8
 800db34:	08011ab4 	.word	0x08011ab4
 800db38:	08011ac0 	.word	0x08011ac0
 800db3c:	08011abc 	.word	0x08011abc
 800db40:	08011ac4 	.word	0x08011ac4
 800db44:	2301      	movs	r3, #1
 800db46:	9a06      	ldr	r2, [sp, #24]
 800db48:	4631      	mov	r1, r6
 800db4a:	4628      	mov	r0, r5
 800db4c:	47b8      	blx	r7
 800db4e:	3001      	adds	r0, #1
 800db50:	f43f aecd 	beq.w	800d8ee <_printf_float+0xba>
 800db54:	f10b 0b01 	add.w	fp, fp, #1
 800db58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800db5c:	ebaa 0309 	sub.w	r3, sl, r9
 800db60:	455b      	cmp	r3, fp
 800db62:	dcef      	bgt.n	800db44 <_printf_float+0x310>
 800db64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db68:	429a      	cmp	r2, r3
 800db6a:	44d0      	add	r8, sl
 800db6c:	db15      	blt.n	800db9a <_printf_float+0x366>
 800db6e:	6823      	ldr	r3, [r4, #0]
 800db70:	07da      	lsls	r2, r3, #31
 800db72:	d412      	bmi.n	800db9a <_printf_float+0x366>
 800db74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db78:	eba3 020a 	sub.w	r2, r3, sl
 800db7c:	eba3 0a01 	sub.w	sl, r3, r1
 800db80:	4592      	cmp	sl, r2
 800db82:	bfa8      	it	ge
 800db84:	4692      	movge	sl, r2
 800db86:	f1ba 0f00 	cmp.w	sl, #0
 800db8a:	dc0e      	bgt.n	800dbaa <_printf_float+0x376>
 800db8c:	f04f 0800 	mov.w	r8, #0
 800db90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db94:	f104 091a 	add.w	r9, r4, #26
 800db98:	e019      	b.n	800dbce <_printf_float+0x39a>
 800db9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db9e:	4631      	mov	r1, r6
 800dba0:	4628      	mov	r0, r5
 800dba2:	47b8      	blx	r7
 800dba4:	3001      	adds	r0, #1
 800dba6:	d1e5      	bne.n	800db74 <_printf_float+0x340>
 800dba8:	e6a1      	b.n	800d8ee <_printf_float+0xba>
 800dbaa:	4653      	mov	r3, sl
 800dbac:	4642      	mov	r2, r8
 800dbae:	4631      	mov	r1, r6
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	47b8      	blx	r7
 800dbb4:	3001      	adds	r0, #1
 800dbb6:	d1e9      	bne.n	800db8c <_printf_float+0x358>
 800dbb8:	e699      	b.n	800d8ee <_printf_float+0xba>
 800dbba:	2301      	movs	r3, #1
 800dbbc:	464a      	mov	r2, r9
 800dbbe:	4631      	mov	r1, r6
 800dbc0:	4628      	mov	r0, r5
 800dbc2:	47b8      	blx	r7
 800dbc4:	3001      	adds	r0, #1
 800dbc6:	f43f ae92 	beq.w	800d8ee <_printf_float+0xba>
 800dbca:	f108 0801 	add.w	r8, r8, #1
 800dbce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dbd2:	1a9b      	subs	r3, r3, r2
 800dbd4:	eba3 030a 	sub.w	r3, r3, sl
 800dbd8:	4543      	cmp	r3, r8
 800dbda:	dcee      	bgt.n	800dbba <_printf_float+0x386>
 800dbdc:	e74a      	b.n	800da74 <_printf_float+0x240>
 800dbde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbe0:	2a01      	cmp	r2, #1
 800dbe2:	dc01      	bgt.n	800dbe8 <_printf_float+0x3b4>
 800dbe4:	07db      	lsls	r3, r3, #31
 800dbe6:	d53a      	bpl.n	800dc5e <_printf_float+0x42a>
 800dbe8:	2301      	movs	r3, #1
 800dbea:	4642      	mov	r2, r8
 800dbec:	4631      	mov	r1, r6
 800dbee:	4628      	mov	r0, r5
 800dbf0:	47b8      	blx	r7
 800dbf2:	3001      	adds	r0, #1
 800dbf4:	f43f ae7b 	beq.w	800d8ee <_printf_float+0xba>
 800dbf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbfc:	4631      	mov	r1, r6
 800dbfe:	4628      	mov	r0, r5
 800dc00:	47b8      	blx	r7
 800dc02:	3001      	adds	r0, #1
 800dc04:	f108 0801 	add.w	r8, r8, #1
 800dc08:	f43f ae71 	beq.w	800d8ee <_printf_float+0xba>
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f103 3aff 	add.w	sl, r3, #4294967295
 800dc14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc18:	2300      	movs	r3, #0
 800dc1a:	f7f2 ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc1e:	b9c8      	cbnz	r0, 800dc54 <_printf_float+0x420>
 800dc20:	4653      	mov	r3, sl
 800dc22:	4642      	mov	r2, r8
 800dc24:	4631      	mov	r1, r6
 800dc26:	4628      	mov	r0, r5
 800dc28:	47b8      	blx	r7
 800dc2a:	3001      	adds	r0, #1
 800dc2c:	d10e      	bne.n	800dc4c <_printf_float+0x418>
 800dc2e:	e65e      	b.n	800d8ee <_printf_float+0xba>
 800dc30:	2301      	movs	r3, #1
 800dc32:	4652      	mov	r2, sl
 800dc34:	4631      	mov	r1, r6
 800dc36:	4628      	mov	r0, r5
 800dc38:	47b8      	blx	r7
 800dc3a:	3001      	adds	r0, #1
 800dc3c:	f43f ae57 	beq.w	800d8ee <_printf_float+0xba>
 800dc40:	f108 0801 	add.w	r8, r8, #1
 800dc44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc46:	3b01      	subs	r3, #1
 800dc48:	4543      	cmp	r3, r8
 800dc4a:	dcf1      	bgt.n	800dc30 <_printf_float+0x3fc>
 800dc4c:	464b      	mov	r3, r9
 800dc4e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc52:	e6de      	b.n	800da12 <_printf_float+0x1de>
 800dc54:	f04f 0800 	mov.w	r8, #0
 800dc58:	f104 0a1a 	add.w	sl, r4, #26
 800dc5c:	e7f2      	b.n	800dc44 <_printf_float+0x410>
 800dc5e:	2301      	movs	r3, #1
 800dc60:	e7df      	b.n	800dc22 <_printf_float+0x3ee>
 800dc62:	2301      	movs	r3, #1
 800dc64:	464a      	mov	r2, r9
 800dc66:	4631      	mov	r1, r6
 800dc68:	4628      	mov	r0, r5
 800dc6a:	47b8      	blx	r7
 800dc6c:	3001      	adds	r0, #1
 800dc6e:	f43f ae3e 	beq.w	800d8ee <_printf_float+0xba>
 800dc72:	f108 0801 	add.w	r8, r8, #1
 800dc76:	68e3      	ldr	r3, [r4, #12]
 800dc78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc7a:	1a9b      	subs	r3, r3, r2
 800dc7c:	4543      	cmp	r3, r8
 800dc7e:	dcf0      	bgt.n	800dc62 <_printf_float+0x42e>
 800dc80:	e6fc      	b.n	800da7c <_printf_float+0x248>
 800dc82:	f04f 0800 	mov.w	r8, #0
 800dc86:	f104 0919 	add.w	r9, r4, #25
 800dc8a:	e7f4      	b.n	800dc76 <_printf_float+0x442>
 800dc8c:	2900      	cmp	r1, #0
 800dc8e:	f43f ae8b 	beq.w	800d9a8 <_printf_float+0x174>
 800dc92:	2300      	movs	r3, #0
 800dc94:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dc98:	ab09      	add	r3, sp, #36	; 0x24
 800dc9a:	9300      	str	r3, [sp, #0]
 800dc9c:	ec49 8b10 	vmov	d0, r8, r9
 800dca0:	6022      	str	r2, [r4, #0]
 800dca2:	f8cd a004 	str.w	sl, [sp, #4]
 800dca6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dcaa:	4628      	mov	r0, r5
 800dcac:	f7ff fd2e 	bl	800d70c <__cvt>
 800dcb0:	4680      	mov	r8, r0
 800dcb2:	e648      	b.n	800d946 <_printf_float+0x112>

0800dcb4 <_printf_common>:
 800dcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcb8:	4691      	mov	r9, r2
 800dcba:	461f      	mov	r7, r3
 800dcbc:	688a      	ldr	r2, [r1, #8]
 800dcbe:	690b      	ldr	r3, [r1, #16]
 800dcc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	bfb8      	it	lt
 800dcc8:	4613      	movlt	r3, r2
 800dcca:	f8c9 3000 	str.w	r3, [r9]
 800dcce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dcd2:	4606      	mov	r6, r0
 800dcd4:	460c      	mov	r4, r1
 800dcd6:	b112      	cbz	r2, 800dcde <_printf_common+0x2a>
 800dcd8:	3301      	adds	r3, #1
 800dcda:	f8c9 3000 	str.w	r3, [r9]
 800dcde:	6823      	ldr	r3, [r4, #0]
 800dce0:	0699      	lsls	r1, r3, #26
 800dce2:	bf42      	ittt	mi
 800dce4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dce8:	3302      	addmi	r3, #2
 800dcea:	f8c9 3000 	strmi.w	r3, [r9]
 800dcee:	6825      	ldr	r5, [r4, #0]
 800dcf0:	f015 0506 	ands.w	r5, r5, #6
 800dcf4:	d107      	bne.n	800dd06 <_printf_common+0x52>
 800dcf6:	f104 0a19 	add.w	sl, r4, #25
 800dcfa:	68e3      	ldr	r3, [r4, #12]
 800dcfc:	f8d9 2000 	ldr.w	r2, [r9]
 800dd00:	1a9b      	subs	r3, r3, r2
 800dd02:	42ab      	cmp	r3, r5
 800dd04:	dc28      	bgt.n	800dd58 <_printf_common+0xa4>
 800dd06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dd0a:	6822      	ldr	r2, [r4, #0]
 800dd0c:	3300      	adds	r3, #0
 800dd0e:	bf18      	it	ne
 800dd10:	2301      	movne	r3, #1
 800dd12:	0692      	lsls	r2, r2, #26
 800dd14:	d42d      	bmi.n	800dd72 <_printf_common+0xbe>
 800dd16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd1a:	4639      	mov	r1, r7
 800dd1c:	4630      	mov	r0, r6
 800dd1e:	47c0      	blx	r8
 800dd20:	3001      	adds	r0, #1
 800dd22:	d020      	beq.n	800dd66 <_printf_common+0xb2>
 800dd24:	6823      	ldr	r3, [r4, #0]
 800dd26:	68e5      	ldr	r5, [r4, #12]
 800dd28:	f8d9 2000 	ldr.w	r2, [r9]
 800dd2c:	f003 0306 	and.w	r3, r3, #6
 800dd30:	2b04      	cmp	r3, #4
 800dd32:	bf08      	it	eq
 800dd34:	1aad      	subeq	r5, r5, r2
 800dd36:	68a3      	ldr	r3, [r4, #8]
 800dd38:	6922      	ldr	r2, [r4, #16]
 800dd3a:	bf0c      	ite	eq
 800dd3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd40:	2500      	movne	r5, #0
 800dd42:	4293      	cmp	r3, r2
 800dd44:	bfc4      	itt	gt
 800dd46:	1a9b      	subgt	r3, r3, r2
 800dd48:	18ed      	addgt	r5, r5, r3
 800dd4a:	f04f 0900 	mov.w	r9, #0
 800dd4e:	341a      	adds	r4, #26
 800dd50:	454d      	cmp	r5, r9
 800dd52:	d11a      	bne.n	800dd8a <_printf_common+0xd6>
 800dd54:	2000      	movs	r0, #0
 800dd56:	e008      	b.n	800dd6a <_printf_common+0xb6>
 800dd58:	2301      	movs	r3, #1
 800dd5a:	4652      	mov	r2, sl
 800dd5c:	4639      	mov	r1, r7
 800dd5e:	4630      	mov	r0, r6
 800dd60:	47c0      	blx	r8
 800dd62:	3001      	adds	r0, #1
 800dd64:	d103      	bne.n	800dd6e <_printf_common+0xba>
 800dd66:	f04f 30ff 	mov.w	r0, #4294967295
 800dd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd6e:	3501      	adds	r5, #1
 800dd70:	e7c3      	b.n	800dcfa <_printf_common+0x46>
 800dd72:	18e1      	adds	r1, r4, r3
 800dd74:	1c5a      	adds	r2, r3, #1
 800dd76:	2030      	movs	r0, #48	; 0x30
 800dd78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd7c:	4422      	add	r2, r4
 800dd7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd86:	3302      	adds	r3, #2
 800dd88:	e7c5      	b.n	800dd16 <_printf_common+0x62>
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	4622      	mov	r2, r4
 800dd8e:	4639      	mov	r1, r7
 800dd90:	4630      	mov	r0, r6
 800dd92:	47c0      	blx	r8
 800dd94:	3001      	adds	r0, #1
 800dd96:	d0e6      	beq.n	800dd66 <_printf_common+0xb2>
 800dd98:	f109 0901 	add.w	r9, r9, #1
 800dd9c:	e7d8      	b.n	800dd50 <_printf_common+0x9c>
	...

0800dda0 <_printf_i>:
 800dda0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dda4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dda8:	460c      	mov	r4, r1
 800ddaa:	7e09      	ldrb	r1, [r1, #24]
 800ddac:	b085      	sub	sp, #20
 800ddae:	296e      	cmp	r1, #110	; 0x6e
 800ddb0:	4617      	mov	r7, r2
 800ddb2:	4606      	mov	r6, r0
 800ddb4:	4698      	mov	r8, r3
 800ddb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ddb8:	f000 80b3 	beq.w	800df22 <_printf_i+0x182>
 800ddbc:	d822      	bhi.n	800de04 <_printf_i+0x64>
 800ddbe:	2963      	cmp	r1, #99	; 0x63
 800ddc0:	d036      	beq.n	800de30 <_printf_i+0x90>
 800ddc2:	d80a      	bhi.n	800ddda <_printf_i+0x3a>
 800ddc4:	2900      	cmp	r1, #0
 800ddc6:	f000 80b9 	beq.w	800df3c <_printf_i+0x19c>
 800ddca:	2958      	cmp	r1, #88	; 0x58
 800ddcc:	f000 8083 	beq.w	800ded6 <_printf_i+0x136>
 800ddd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ddd8:	e032      	b.n	800de40 <_printf_i+0xa0>
 800ddda:	2964      	cmp	r1, #100	; 0x64
 800dddc:	d001      	beq.n	800dde2 <_printf_i+0x42>
 800ddde:	2969      	cmp	r1, #105	; 0x69
 800dde0:	d1f6      	bne.n	800ddd0 <_printf_i+0x30>
 800dde2:	6820      	ldr	r0, [r4, #0]
 800dde4:	6813      	ldr	r3, [r2, #0]
 800dde6:	0605      	lsls	r5, r0, #24
 800dde8:	f103 0104 	add.w	r1, r3, #4
 800ddec:	d52a      	bpl.n	800de44 <_printf_i+0xa4>
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	6011      	str	r1, [r2, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	da03      	bge.n	800ddfe <_printf_i+0x5e>
 800ddf6:	222d      	movs	r2, #45	; 0x2d
 800ddf8:	425b      	negs	r3, r3
 800ddfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ddfe:	486f      	ldr	r0, [pc, #444]	; (800dfbc <_printf_i+0x21c>)
 800de00:	220a      	movs	r2, #10
 800de02:	e039      	b.n	800de78 <_printf_i+0xd8>
 800de04:	2973      	cmp	r1, #115	; 0x73
 800de06:	f000 809d 	beq.w	800df44 <_printf_i+0x1a4>
 800de0a:	d808      	bhi.n	800de1e <_printf_i+0x7e>
 800de0c:	296f      	cmp	r1, #111	; 0x6f
 800de0e:	d020      	beq.n	800de52 <_printf_i+0xb2>
 800de10:	2970      	cmp	r1, #112	; 0x70
 800de12:	d1dd      	bne.n	800ddd0 <_printf_i+0x30>
 800de14:	6823      	ldr	r3, [r4, #0]
 800de16:	f043 0320 	orr.w	r3, r3, #32
 800de1a:	6023      	str	r3, [r4, #0]
 800de1c:	e003      	b.n	800de26 <_printf_i+0x86>
 800de1e:	2975      	cmp	r1, #117	; 0x75
 800de20:	d017      	beq.n	800de52 <_printf_i+0xb2>
 800de22:	2978      	cmp	r1, #120	; 0x78
 800de24:	d1d4      	bne.n	800ddd0 <_printf_i+0x30>
 800de26:	2378      	movs	r3, #120	; 0x78
 800de28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de2c:	4864      	ldr	r0, [pc, #400]	; (800dfc0 <_printf_i+0x220>)
 800de2e:	e055      	b.n	800dedc <_printf_i+0x13c>
 800de30:	6813      	ldr	r3, [r2, #0]
 800de32:	1d19      	adds	r1, r3, #4
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	6011      	str	r1, [r2, #0]
 800de38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de40:	2301      	movs	r3, #1
 800de42:	e08c      	b.n	800df5e <_printf_i+0x1be>
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	6011      	str	r1, [r2, #0]
 800de48:	f010 0f40 	tst.w	r0, #64	; 0x40
 800de4c:	bf18      	it	ne
 800de4e:	b21b      	sxthne	r3, r3
 800de50:	e7cf      	b.n	800ddf2 <_printf_i+0x52>
 800de52:	6813      	ldr	r3, [r2, #0]
 800de54:	6825      	ldr	r5, [r4, #0]
 800de56:	1d18      	adds	r0, r3, #4
 800de58:	6010      	str	r0, [r2, #0]
 800de5a:	0628      	lsls	r0, r5, #24
 800de5c:	d501      	bpl.n	800de62 <_printf_i+0xc2>
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	e002      	b.n	800de68 <_printf_i+0xc8>
 800de62:	0668      	lsls	r0, r5, #25
 800de64:	d5fb      	bpl.n	800de5e <_printf_i+0xbe>
 800de66:	881b      	ldrh	r3, [r3, #0]
 800de68:	4854      	ldr	r0, [pc, #336]	; (800dfbc <_printf_i+0x21c>)
 800de6a:	296f      	cmp	r1, #111	; 0x6f
 800de6c:	bf14      	ite	ne
 800de6e:	220a      	movne	r2, #10
 800de70:	2208      	moveq	r2, #8
 800de72:	2100      	movs	r1, #0
 800de74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de78:	6865      	ldr	r5, [r4, #4]
 800de7a:	60a5      	str	r5, [r4, #8]
 800de7c:	2d00      	cmp	r5, #0
 800de7e:	f2c0 8095 	blt.w	800dfac <_printf_i+0x20c>
 800de82:	6821      	ldr	r1, [r4, #0]
 800de84:	f021 0104 	bic.w	r1, r1, #4
 800de88:	6021      	str	r1, [r4, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d13d      	bne.n	800df0a <_printf_i+0x16a>
 800de8e:	2d00      	cmp	r5, #0
 800de90:	f040 808e 	bne.w	800dfb0 <_printf_i+0x210>
 800de94:	4665      	mov	r5, ip
 800de96:	2a08      	cmp	r2, #8
 800de98:	d10b      	bne.n	800deb2 <_printf_i+0x112>
 800de9a:	6823      	ldr	r3, [r4, #0]
 800de9c:	07db      	lsls	r3, r3, #31
 800de9e:	d508      	bpl.n	800deb2 <_printf_i+0x112>
 800dea0:	6923      	ldr	r3, [r4, #16]
 800dea2:	6862      	ldr	r2, [r4, #4]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	bfde      	ittt	le
 800dea8:	2330      	movle	r3, #48	; 0x30
 800deaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800deae:	f105 35ff 	addle.w	r5, r5, #4294967295
 800deb2:	ebac 0305 	sub.w	r3, ip, r5
 800deb6:	6123      	str	r3, [r4, #16]
 800deb8:	f8cd 8000 	str.w	r8, [sp]
 800debc:	463b      	mov	r3, r7
 800debe:	aa03      	add	r2, sp, #12
 800dec0:	4621      	mov	r1, r4
 800dec2:	4630      	mov	r0, r6
 800dec4:	f7ff fef6 	bl	800dcb4 <_printf_common>
 800dec8:	3001      	adds	r0, #1
 800deca:	d14d      	bne.n	800df68 <_printf_i+0x1c8>
 800decc:	f04f 30ff 	mov.w	r0, #4294967295
 800ded0:	b005      	add	sp, #20
 800ded2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ded6:	4839      	ldr	r0, [pc, #228]	; (800dfbc <_printf_i+0x21c>)
 800ded8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dedc:	6813      	ldr	r3, [r2, #0]
 800dede:	6821      	ldr	r1, [r4, #0]
 800dee0:	1d1d      	adds	r5, r3, #4
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	6015      	str	r5, [r2, #0]
 800dee6:	060a      	lsls	r2, r1, #24
 800dee8:	d50b      	bpl.n	800df02 <_printf_i+0x162>
 800deea:	07ca      	lsls	r2, r1, #31
 800deec:	bf44      	itt	mi
 800deee:	f041 0120 	orrmi.w	r1, r1, #32
 800def2:	6021      	strmi	r1, [r4, #0]
 800def4:	b91b      	cbnz	r3, 800defe <_printf_i+0x15e>
 800def6:	6822      	ldr	r2, [r4, #0]
 800def8:	f022 0220 	bic.w	r2, r2, #32
 800defc:	6022      	str	r2, [r4, #0]
 800defe:	2210      	movs	r2, #16
 800df00:	e7b7      	b.n	800de72 <_printf_i+0xd2>
 800df02:	064d      	lsls	r5, r1, #25
 800df04:	bf48      	it	mi
 800df06:	b29b      	uxthmi	r3, r3
 800df08:	e7ef      	b.n	800deea <_printf_i+0x14a>
 800df0a:	4665      	mov	r5, ip
 800df0c:	fbb3 f1f2 	udiv	r1, r3, r2
 800df10:	fb02 3311 	mls	r3, r2, r1, r3
 800df14:	5cc3      	ldrb	r3, [r0, r3]
 800df16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800df1a:	460b      	mov	r3, r1
 800df1c:	2900      	cmp	r1, #0
 800df1e:	d1f5      	bne.n	800df0c <_printf_i+0x16c>
 800df20:	e7b9      	b.n	800de96 <_printf_i+0xf6>
 800df22:	6813      	ldr	r3, [r2, #0]
 800df24:	6825      	ldr	r5, [r4, #0]
 800df26:	6961      	ldr	r1, [r4, #20]
 800df28:	1d18      	adds	r0, r3, #4
 800df2a:	6010      	str	r0, [r2, #0]
 800df2c:	0628      	lsls	r0, r5, #24
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	d501      	bpl.n	800df36 <_printf_i+0x196>
 800df32:	6019      	str	r1, [r3, #0]
 800df34:	e002      	b.n	800df3c <_printf_i+0x19c>
 800df36:	066a      	lsls	r2, r5, #25
 800df38:	d5fb      	bpl.n	800df32 <_printf_i+0x192>
 800df3a:	8019      	strh	r1, [r3, #0]
 800df3c:	2300      	movs	r3, #0
 800df3e:	6123      	str	r3, [r4, #16]
 800df40:	4665      	mov	r5, ip
 800df42:	e7b9      	b.n	800deb8 <_printf_i+0x118>
 800df44:	6813      	ldr	r3, [r2, #0]
 800df46:	1d19      	adds	r1, r3, #4
 800df48:	6011      	str	r1, [r2, #0]
 800df4a:	681d      	ldr	r5, [r3, #0]
 800df4c:	6862      	ldr	r2, [r4, #4]
 800df4e:	2100      	movs	r1, #0
 800df50:	4628      	mov	r0, r5
 800df52:	f7f2 f945 	bl	80001e0 <memchr>
 800df56:	b108      	cbz	r0, 800df5c <_printf_i+0x1bc>
 800df58:	1b40      	subs	r0, r0, r5
 800df5a:	6060      	str	r0, [r4, #4]
 800df5c:	6863      	ldr	r3, [r4, #4]
 800df5e:	6123      	str	r3, [r4, #16]
 800df60:	2300      	movs	r3, #0
 800df62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df66:	e7a7      	b.n	800deb8 <_printf_i+0x118>
 800df68:	6923      	ldr	r3, [r4, #16]
 800df6a:	462a      	mov	r2, r5
 800df6c:	4639      	mov	r1, r7
 800df6e:	4630      	mov	r0, r6
 800df70:	47c0      	blx	r8
 800df72:	3001      	adds	r0, #1
 800df74:	d0aa      	beq.n	800decc <_printf_i+0x12c>
 800df76:	6823      	ldr	r3, [r4, #0]
 800df78:	079b      	lsls	r3, r3, #30
 800df7a:	d413      	bmi.n	800dfa4 <_printf_i+0x204>
 800df7c:	68e0      	ldr	r0, [r4, #12]
 800df7e:	9b03      	ldr	r3, [sp, #12]
 800df80:	4298      	cmp	r0, r3
 800df82:	bfb8      	it	lt
 800df84:	4618      	movlt	r0, r3
 800df86:	e7a3      	b.n	800ded0 <_printf_i+0x130>
 800df88:	2301      	movs	r3, #1
 800df8a:	464a      	mov	r2, r9
 800df8c:	4639      	mov	r1, r7
 800df8e:	4630      	mov	r0, r6
 800df90:	47c0      	blx	r8
 800df92:	3001      	adds	r0, #1
 800df94:	d09a      	beq.n	800decc <_printf_i+0x12c>
 800df96:	3501      	adds	r5, #1
 800df98:	68e3      	ldr	r3, [r4, #12]
 800df9a:	9a03      	ldr	r2, [sp, #12]
 800df9c:	1a9b      	subs	r3, r3, r2
 800df9e:	42ab      	cmp	r3, r5
 800dfa0:	dcf2      	bgt.n	800df88 <_printf_i+0x1e8>
 800dfa2:	e7eb      	b.n	800df7c <_printf_i+0x1dc>
 800dfa4:	2500      	movs	r5, #0
 800dfa6:	f104 0919 	add.w	r9, r4, #25
 800dfaa:	e7f5      	b.n	800df98 <_printf_i+0x1f8>
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1ac      	bne.n	800df0a <_printf_i+0x16a>
 800dfb0:	7803      	ldrb	r3, [r0, #0]
 800dfb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfba:	e76c      	b.n	800de96 <_printf_i+0xf6>
 800dfbc:	08011ac6 	.word	0x08011ac6
 800dfc0:	08011ad7 	.word	0x08011ad7

0800dfc4 <_scanf_float>:
 800dfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfc8:	469a      	mov	sl, r3
 800dfca:	688b      	ldr	r3, [r1, #8]
 800dfcc:	4616      	mov	r6, r2
 800dfce:	1e5a      	subs	r2, r3, #1
 800dfd0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dfd4:	b087      	sub	sp, #28
 800dfd6:	bf83      	ittte	hi
 800dfd8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800dfdc:	189b      	addhi	r3, r3, r2
 800dfde:	9301      	strhi	r3, [sp, #4]
 800dfe0:	2300      	movls	r3, #0
 800dfe2:	bf86      	itte	hi
 800dfe4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dfe8:	608b      	strhi	r3, [r1, #8]
 800dfea:	9301      	strls	r3, [sp, #4]
 800dfec:	680b      	ldr	r3, [r1, #0]
 800dfee:	4688      	mov	r8, r1
 800dff0:	f04f 0b00 	mov.w	fp, #0
 800dff4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dff8:	f848 3b1c 	str.w	r3, [r8], #28
 800dffc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e000:	4607      	mov	r7, r0
 800e002:	460c      	mov	r4, r1
 800e004:	4645      	mov	r5, r8
 800e006:	465a      	mov	r2, fp
 800e008:	46d9      	mov	r9, fp
 800e00a:	f8cd b008 	str.w	fp, [sp, #8]
 800e00e:	68a1      	ldr	r1, [r4, #8]
 800e010:	b181      	cbz	r1, 800e034 <_scanf_float+0x70>
 800e012:	6833      	ldr	r3, [r6, #0]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	2b49      	cmp	r3, #73	; 0x49
 800e018:	d071      	beq.n	800e0fe <_scanf_float+0x13a>
 800e01a:	d84d      	bhi.n	800e0b8 <_scanf_float+0xf4>
 800e01c:	2b39      	cmp	r3, #57	; 0x39
 800e01e:	d840      	bhi.n	800e0a2 <_scanf_float+0xde>
 800e020:	2b31      	cmp	r3, #49	; 0x31
 800e022:	f080 8088 	bcs.w	800e136 <_scanf_float+0x172>
 800e026:	2b2d      	cmp	r3, #45	; 0x2d
 800e028:	f000 8090 	beq.w	800e14c <_scanf_float+0x188>
 800e02c:	d815      	bhi.n	800e05a <_scanf_float+0x96>
 800e02e:	2b2b      	cmp	r3, #43	; 0x2b
 800e030:	f000 808c 	beq.w	800e14c <_scanf_float+0x188>
 800e034:	f1b9 0f00 	cmp.w	r9, #0
 800e038:	d003      	beq.n	800e042 <_scanf_float+0x7e>
 800e03a:	6823      	ldr	r3, [r4, #0]
 800e03c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e040:	6023      	str	r3, [r4, #0]
 800e042:	3a01      	subs	r2, #1
 800e044:	2a01      	cmp	r2, #1
 800e046:	f200 80ea 	bhi.w	800e21e <_scanf_float+0x25a>
 800e04a:	4545      	cmp	r5, r8
 800e04c:	f200 80dc 	bhi.w	800e208 <_scanf_float+0x244>
 800e050:	2601      	movs	r6, #1
 800e052:	4630      	mov	r0, r6
 800e054:	b007      	add	sp, #28
 800e056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e05a:	2b2e      	cmp	r3, #46	; 0x2e
 800e05c:	f000 809f 	beq.w	800e19e <_scanf_float+0x1da>
 800e060:	2b30      	cmp	r3, #48	; 0x30
 800e062:	d1e7      	bne.n	800e034 <_scanf_float+0x70>
 800e064:	6820      	ldr	r0, [r4, #0]
 800e066:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e06a:	d064      	beq.n	800e136 <_scanf_float+0x172>
 800e06c:	9b01      	ldr	r3, [sp, #4]
 800e06e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e072:	6020      	str	r0, [r4, #0]
 800e074:	f109 0901 	add.w	r9, r9, #1
 800e078:	b11b      	cbz	r3, 800e082 <_scanf_float+0xbe>
 800e07a:	3b01      	subs	r3, #1
 800e07c:	3101      	adds	r1, #1
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	60a1      	str	r1, [r4, #8]
 800e082:	68a3      	ldr	r3, [r4, #8]
 800e084:	3b01      	subs	r3, #1
 800e086:	60a3      	str	r3, [r4, #8]
 800e088:	6923      	ldr	r3, [r4, #16]
 800e08a:	3301      	adds	r3, #1
 800e08c:	6123      	str	r3, [r4, #16]
 800e08e:	6873      	ldr	r3, [r6, #4]
 800e090:	3b01      	subs	r3, #1
 800e092:	2b00      	cmp	r3, #0
 800e094:	6073      	str	r3, [r6, #4]
 800e096:	f340 80ac 	ble.w	800e1f2 <_scanf_float+0x22e>
 800e09a:	6833      	ldr	r3, [r6, #0]
 800e09c:	3301      	adds	r3, #1
 800e09e:	6033      	str	r3, [r6, #0]
 800e0a0:	e7b5      	b.n	800e00e <_scanf_float+0x4a>
 800e0a2:	2b45      	cmp	r3, #69	; 0x45
 800e0a4:	f000 8085 	beq.w	800e1b2 <_scanf_float+0x1ee>
 800e0a8:	2b46      	cmp	r3, #70	; 0x46
 800e0aa:	d06a      	beq.n	800e182 <_scanf_float+0x1be>
 800e0ac:	2b41      	cmp	r3, #65	; 0x41
 800e0ae:	d1c1      	bne.n	800e034 <_scanf_float+0x70>
 800e0b0:	2a01      	cmp	r2, #1
 800e0b2:	d1bf      	bne.n	800e034 <_scanf_float+0x70>
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	e046      	b.n	800e146 <_scanf_float+0x182>
 800e0b8:	2b65      	cmp	r3, #101	; 0x65
 800e0ba:	d07a      	beq.n	800e1b2 <_scanf_float+0x1ee>
 800e0bc:	d818      	bhi.n	800e0f0 <_scanf_float+0x12c>
 800e0be:	2b54      	cmp	r3, #84	; 0x54
 800e0c0:	d066      	beq.n	800e190 <_scanf_float+0x1cc>
 800e0c2:	d811      	bhi.n	800e0e8 <_scanf_float+0x124>
 800e0c4:	2b4e      	cmp	r3, #78	; 0x4e
 800e0c6:	d1b5      	bne.n	800e034 <_scanf_float+0x70>
 800e0c8:	2a00      	cmp	r2, #0
 800e0ca:	d146      	bne.n	800e15a <_scanf_float+0x196>
 800e0cc:	f1b9 0f00 	cmp.w	r9, #0
 800e0d0:	d145      	bne.n	800e15e <_scanf_float+0x19a>
 800e0d2:	6821      	ldr	r1, [r4, #0]
 800e0d4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e0d8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e0dc:	d13f      	bne.n	800e15e <_scanf_float+0x19a>
 800e0de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e0e2:	6021      	str	r1, [r4, #0]
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	e02e      	b.n	800e146 <_scanf_float+0x182>
 800e0e8:	2b59      	cmp	r3, #89	; 0x59
 800e0ea:	d01e      	beq.n	800e12a <_scanf_float+0x166>
 800e0ec:	2b61      	cmp	r3, #97	; 0x61
 800e0ee:	e7de      	b.n	800e0ae <_scanf_float+0xea>
 800e0f0:	2b6e      	cmp	r3, #110	; 0x6e
 800e0f2:	d0e9      	beq.n	800e0c8 <_scanf_float+0x104>
 800e0f4:	d815      	bhi.n	800e122 <_scanf_float+0x15e>
 800e0f6:	2b66      	cmp	r3, #102	; 0x66
 800e0f8:	d043      	beq.n	800e182 <_scanf_float+0x1be>
 800e0fa:	2b69      	cmp	r3, #105	; 0x69
 800e0fc:	d19a      	bne.n	800e034 <_scanf_float+0x70>
 800e0fe:	f1bb 0f00 	cmp.w	fp, #0
 800e102:	d138      	bne.n	800e176 <_scanf_float+0x1b2>
 800e104:	f1b9 0f00 	cmp.w	r9, #0
 800e108:	d197      	bne.n	800e03a <_scanf_float+0x76>
 800e10a:	6821      	ldr	r1, [r4, #0]
 800e10c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e110:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e114:	d195      	bne.n	800e042 <_scanf_float+0x7e>
 800e116:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e11a:	6021      	str	r1, [r4, #0]
 800e11c:	f04f 0b01 	mov.w	fp, #1
 800e120:	e011      	b.n	800e146 <_scanf_float+0x182>
 800e122:	2b74      	cmp	r3, #116	; 0x74
 800e124:	d034      	beq.n	800e190 <_scanf_float+0x1cc>
 800e126:	2b79      	cmp	r3, #121	; 0x79
 800e128:	d184      	bne.n	800e034 <_scanf_float+0x70>
 800e12a:	f1bb 0f07 	cmp.w	fp, #7
 800e12e:	d181      	bne.n	800e034 <_scanf_float+0x70>
 800e130:	f04f 0b08 	mov.w	fp, #8
 800e134:	e007      	b.n	800e146 <_scanf_float+0x182>
 800e136:	eb12 0f0b 	cmn.w	r2, fp
 800e13a:	f47f af7b 	bne.w	800e034 <_scanf_float+0x70>
 800e13e:	6821      	ldr	r1, [r4, #0]
 800e140:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e144:	6021      	str	r1, [r4, #0]
 800e146:	702b      	strb	r3, [r5, #0]
 800e148:	3501      	adds	r5, #1
 800e14a:	e79a      	b.n	800e082 <_scanf_float+0xbe>
 800e14c:	6821      	ldr	r1, [r4, #0]
 800e14e:	0608      	lsls	r0, r1, #24
 800e150:	f57f af70 	bpl.w	800e034 <_scanf_float+0x70>
 800e154:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e158:	e7f4      	b.n	800e144 <_scanf_float+0x180>
 800e15a:	2a02      	cmp	r2, #2
 800e15c:	d047      	beq.n	800e1ee <_scanf_float+0x22a>
 800e15e:	f1bb 0f01 	cmp.w	fp, #1
 800e162:	d003      	beq.n	800e16c <_scanf_float+0x1a8>
 800e164:	f1bb 0f04 	cmp.w	fp, #4
 800e168:	f47f af64 	bne.w	800e034 <_scanf_float+0x70>
 800e16c:	f10b 0b01 	add.w	fp, fp, #1
 800e170:	fa5f fb8b 	uxtb.w	fp, fp
 800e174:	e7e7      	b.n	800e146 <_scanf_float+0x182>
 800e176:	f1bb 0f03 	cmp.w	fp, #3
 800e17a:	d0f7      	beq.n	800e16c <_scanf_float+0x1a8>
 800e17c:	f1bb 0f05 	cmp.w	fp, #5
 800e180:	e7f2      	b.n	800e168 <_scanf_float+0x1a4>
 800e182:	f1bb 0f02 	cmp.w	fp, #2
 800e186:	f47f af55 	bne.w	800e034 <_scanf_float+0x70>
 800e18a:	f04f 0b03 	mov.w	fp, #3
 800e18e:	e7da      	b.n	800e146 <_scanf_float+0x182>
 800e190:	f1bb 0f06 	cmp.w	fp, #6
 800e194:	f47f af4e 	bne.w	800e034 <_scanf_float+0x70>
 800e198:	f04f 0b07 	mov.w	fp, #7
 800e19c:	e7d3      	b.n	800e146 <_scanf_float+0x182>
 800e19e:	6821      	ldr	r1, [r4, #0]
 800e1a0:	0588      	lsls	r0, r1, #22
 800e1a2:	f57f af47 	bpl.w	800e034 <_scanf_float+0x70>
 800e1a6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e1aa:	6021      	str	r1, [r4, #0]
 800e1ac:	f8cd 9008 	str.w	r9, [sp, #8]
 800e1b0:	e7c9      	b.n	800e146 <_scanf_float+0x182>
 800e1b2:	6821      	ldr	r1, [r4, #0]
 800e1b4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e1b8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e1bc:	d006      	beq.n	800e1cc <_scanf_float+0x208>
 800e1be:	0548      	lsls	r0, r1, #21
 800e1c0:	f57f af38 	bpl.w	800e034 <_scanf_float+0x70>
 800e1c4:	f1b9 0f00 	cmp.w	r9, #0
 800e1c8:	f43f af3b 	beq.w	800e042 <_scanf_float+0x7e>
 800e1cc:	0588      	lsls	r0, r1, #22
 800e1ce:	bf58      	it	pl
 800e1d0:	9802      	ldrpl	r0, [sp, #8]
 800e1d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e1d6:	bf58      	it	pl
 800e1d8:	eba9 0000 	subpl.w	r0, r9, r0
 800e1dc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e1e0:	bf58      	it	pl
 800e1e2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e1e6:	6021      	str	r1, [r4, #0]
 800e1e8:	f04f 0900 	mov.w	r9, #0
 800e1ec:	e7ab      	b.n	800e146 <_scanf_float+0x182>
 800e1ee:	2203      	movs	r2, #3
 800e1f0:	e7a9      	b.n	800e146 <_scanf_float+0x182>
 800e1f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e1f6:	9205      	str	r2, [sp, #20]
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4638      	mov	r0, r7
 800e1fc:	4798      	blx	r3
 800e1fe:	9a05      	ldr	r2, [sp, #20]
 800e200:	2800      	cmp	r0, #0
 800e202:	f43f af04 	beq.w	800e00e <_scanf_float+0x4a>
 800e206:	e715      	b.n	800e034 <_scanf_float+0x70>
 800e208:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e20c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e210:	4632      	mov	r2, r6
 800e212:	4638      	mov	r0, r7
 800e214:	4798      	blx	r3
 800e216:	6923      	ldr	r3, [r4, #16]
 800e218:	3b01      	subs	r3, #1
 800e21a:	6123      	str	r3, [r4, #16]
 800e21c:	e715      	b.n	800e04a <_scanf_float+0x86>
 800e21e:	f10b 33ff 	add.w	r3, fp, #4294967295
 800e222:	2b06      	cmp	r3, #6
 800e224:	d80a      	bhi.n	800e23c <_scanf_float+0x278>
 800e226:	f1bb 0f02 	cmp.w	fp, #2
 800e22a:	d968      	bls.n	800e2fe <_scanf_float+0x33a>
 800e22c:	f1ab 0b03 	sub.w	fp, fp, #3
 800e230:	fa5f fb8b 	uxtb.w	fp, fp
 800e234:	eba5 0b0b 	sub.w	fp, r5, fp
 800e238:	455d      	cmp	r5, fp
 800e23a:	d14b      	bne.n	800e2d4 <_scanf_float+0x310>
 800e23c:	6823      	ldr	r3, [r4, #0]
 800e23e:	05da      	lsls	r2, r3, #23
 800e240:	d51f      	bpl.n	800e282 <_scanf_float+0x2be>
 800e242:	055b      	lsls	r3, r3, #21
 800e244:	d468      	bmi.n	800e318 <_scanf_float+0x354>
 800e246:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e24a:	6923      	ldr	r3, [r4, #16]
 800e24c:	2965      	cmp	r1, #101	; 0x65
 800e24e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e252:	f105 3bff 	add.w	fp, r5, #4294967295
 800e256:	6123      	str	r3, [r4, #16]
 800e258:	d00d      	beq.n	800e276 <_scanf_float+0x2b2>
 800e25a:	2945      	cmp	r1, #69	; 0x45
 800e25c:	d00b      	beq.n	800e276 <_scanf_float+0x2b2>
 800e25e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e262:	4632      	mov	r2, r6
 800e264:	4638      	mov	r0, r7
 800e266:	4798      	blx	r3
 800e268:	6923      	ldr	r3, [r4, #16]
 800e26a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e26e:	3b01      	subs	r3, #1
 800e270:	f1a5 0b02 	sub.w	fp, r5, #2
 800e274:	6123      	str	r3, [r4, #16]
 800e276:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e27a:	4632      	mov	r2, r6
 800e27c:	4638      	mov	r0, r7
 800e27e:	4798      	blx	r3
 800e280:	465d      	mov	r5, fp
 800e282:	6826      	ldr	r6, [r4, #0]
 800e284:	f016 0610 	ands.w	r6, r6, #16
 800e288:	d17a      	bne.n	800e380 <_scanf_float+0x3bc>
 800e28a:	702e      	strb	r6, [r5, #0]
 800e28c:	6823      	ldr	r3, [r4, #0]
 800e28e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e296:	d142      	bne.n	800e31e <_scanf_float+0x35a>
 800e298:	9b02      	ldr	r3, [sp, #8]
 800e29a:	eba9 0303 	sub.w	r3, r9, r3
 800e29e:	425a      	negs	r2, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d149      	bne.n	800e338 <_scanf_float+0x374>
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	4641      	mov	r1, r8
 800e2a8:	4638      	mov	r0, r7
 800e2aa:	f000 fecd 	bl	800f048 <_strtod_r>
 800e2ae:	6825      	ldr	r5, [r4, #0]
 800e2b0:	f8da 3000 	ldr.w	r3, [sl]
 800e2b4:	f015 0f02 	tst.w	r5, #2
 800e2b8:	f103 0204 	add.w	r2, r3, #4
 800e2bc:	ec59 8b10 	vmov	r8, r9, d0
 800e2c0:	f8ca 2000 	str.w	r2, [sl]
 800e2c4:	d043      	beq.n	800e34e <_scanf_float+0x38a>
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	e9c3 8900 	strd	r8, r9, [r3]
 800e2cc:	68e3      	ldr	r3, [r4, #12]
 800e2ce:	3301      	adds	r3, #1
 800e2d0:	60e3      	str	r3, [r4, #12]
 800e2d2:	e6be      	b.n	800e052 <_scanf_float+0x8e>
 800e2d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e2dc:	4632      	mov	r2, r6
 800e2de:	4638      	mov	r0, r7
 800e2e0:	4798      	blx	r3
 800e2e2:	6923      	ldr	r3, [r4, #16]
 800e2e4:	3b01      	subs	r3, #1
 800e2e6:	6123      	str	r3, [r4, #16]
 800e2e8:	e7a6      	b.n	800e238 <_scanf_float+0x274>
 800e2ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2ee:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e2f2:	4632      	mov	r2, r6
 800e2f4:	4638      	mov	r0, r7
 800e2f6:	4798      	blx	r3
 800e2f8:	6923      	ldr	r3, [r4, #16]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	6123      	str	r3, [r4, #16]
 800e2fe:	4545      	cmp	r5, r8
 800e300:	d8f3      	bhi.n	800e2ea <_scanf_float+0x326>
 800e302:	e6a5      	b.n	800e050 <_scanf_float+0x8c>
 800e304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e308:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e30c:	4632      	mov	r2, r6
 800e30e:	4638      	mov	r0, r7
 800e310:	4798      	blx	r3
 800e312:	6923      	ldr	r3, [r4, #16]
 800e314:	3b01      	subs	r3, #1
 800e316:	6123      	str	r3, [r4, #16]
 800e318:	4545      	cmp	r5, r8
 800e31a:	d8f3      	bhi.n	800e304 <_scanf_float+0x340>
 800e31c:	e698      	b.n	800e050 <_scanf_float+0x8c>
 800e31e:	9b03      	ldr	r3, [sp, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d0bf      	beq.n	800e2a4 <_scanf_float+0x2e0>
 800e324:	9904      	ldr	r1, [sp, #16]
 800e326:	230a      	movs	r3, #10
 800e328:	4632      	mov	r2, r6
 800e32a:	3101      	adds	r1, #1
 800e32c:	4638      	mov	r0, r7
 800e32e:	f000 ff17 	bl	800f160 <_strtol_r>
 800e332:	9b03      	ldr	r3, [sp, #12]
 800e334:	9d04      	ldr	r5, [sp, #16]
 800e336:	1ac2      	subs	r2, r0, r3
 800e338:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e33c:	429d      	cmp	r5, r3
 800e33e:	bf28      	it	cs
 800e340:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e344:	490f      	ldr	r1, [pc, #60]	; (800e384 <_scanf_float+0x3c0>)
 800e346:	4628      	mov	r0, r5
 800e348:	f000 f84c 	bl	800e3e4 <siprintf>
 800e34c:	e7aa      	b.n	800e2a4 <_scanf_float+0x2e0>
 800e34e:	f015 0504 	ands.w	r5, r5, #4
 800e352:	d1b8      	bne.n	800e2c6 <_scanf_float+0x302>
 800e354:	681f      	ldr	r7, [r3, #0]
 800e356:	ee10 2a10 	vmov	r2, s0
 800e35a:	464b      	mov	r3, r9
 800e35c:	ee10 0a10 	vmov	r0, s0
 800e360:	4649      	mov	r1, r9
 800e362:	f7f2 fbe3 	bl	8000b2c <__aeabi_dcmpun>
 800e366:	b128      	cbz	r0, 800e374 <_scanf_float+0x3b0>
 800e368:	4628      	mov	r0, r5
 800e36a:	f000 f835 	bl	800e3d8 <nanf>
 800e36e:	ed87 0a00 	vstr	s0, [r7]
 800e372:	e7ab      	b.n	800e2cc <_scanf_float+0x308>
 800e374:	4640      	mov	r0, r8
 800e376:	4649      	mov	r1, r9
 800e378:	f7f2 fc36 	bl	8000be8 <__aeabi_d2f>
 800e37c:	6038      	str	r0, [r7, #0]
 800e37e:	e7a5      	b.n	800e2cc <_scanf_float+0x308>
 800e380:	2600      	movs	r6, #0
 800e382:	e666      	b.n	800e052 <_scanf_float+0x8e>
 800e384:	08011ae8 	.word	0x08011ae8

0800e388 <iprintf>:
 800e388:	b40f      	push	{r0, r1, r2, r3}
 800e38a:	4b0a      	ldr	r3, [pc, #40]	; (800e3b4 <iprintf+0x2c>)
 800e38c:	b513      	push	{r0, r1, r4, lr}
 800e38e:	681c      	ldr	r4, [r3, #0]
 800e390:	b124      	cbz	r4, 800e39c <iprintf+0x14>
 800e392:	69a3      	ldr	r3, [r4, #24]
 800e394:	b913      	cbnz	r3, 800e39c <iprintf+0x14>
 800e396:	4620      	mov	r0, r4
 800e398:	f001 fd7a 	bl	800fe90 <__sinit>
 800e39c:	ab05      	add	r3, sp, #20
 800e39e:	9a04      	ldr	r2, [sp, #16]
 800e3a0:	68a1      	ldr	r1, [r4, #8]
 800e3a2:	9301      	str	r3, [sp, #4]
 800e3a4:	4620      	mov	r0, r4
 800e3a6:	f002 fed5 	bl	8011154 <_vfiprintf_r>
 800e3aa:	b002      	add	sp, #8
 800e3ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3b0:	b004      	add	sp, #16
 800e3b2:	4770      	bx	lr
 800e3b4:	20000190 	.word	0x20000190

0800e3b8 <_sbrk_r>:
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	4c06      	ldr	r4, [pc, #24]	; (800e3d4 <_sbrk_r+0x1c>)
 800e3bc:	2300      	movs	r3, #0
 800e3be:	4605      	mov	r5, r0
 800e3c0:	4608      	mov	r0, r1
 800e3c2:	6023      	str	r3, [r4, #0]
 800e3c4:	f7f4 fcec 	bl	8002da0 <_sbrk>
 800e3c8:	1c43      	adds	r3, r0, #1
 800e3ca:	d102      	bne.n	800e3d2 <_sbrk_r+0x1a>
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	b103      	cbz	r3, 800e3d2 <_sbrk_r+0x1a>
 800e3d0:	602b      	str	r3, [r5, #0]
 800e3d2:	bd38      	pop	{r3, r4, r5, pc}
 800e3d4:	20002950 	.word	0x20002950

0800e3d8 <nanf>:
 800e3d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e3e0 <nanf+0x8>
 800e3dc:	4770      	bx	lr
 800e3de:	bf00      	nop
 800e3e0:	7fc00000 	.word	0x7fc00000

0800e3e4 <siprintf>:
 800e3e4:	b40e      	push	{r1, r2, r3}
 800e3e6:	b500      	push	{lr}
 800e3e8:	b09c      	sub	sp, #112	; 0x70
 800e3ea:	ab1d      	add	r3, sp, #116	; 0x74
 800e3ec:	9002      	str	r0, [sp, #8]
 800e3ee:	9006      	str	r0, [sp, #24]
 800e3f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e3f4:	4809      	ldr	r0, [pc, #36]	; (800e41c <siprintf+0x38>)
 800e3f6:	9107      	str	r1, [sp, #28]
 800e3f8:	9104      	str	r1, [sp, #16]
 800e3fa:	4909      	ldr	r1, [pc, #36]	; (800e420 <siprintf+0x3c>)
 800e3fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e400:	9105      	str	r1, [sp, #20]
 800e402:	6800      	ldr	r0, [r0, #0]
 800e404:	9301      	str	r3, [sp, #4]
 800e406:	a902      	add	r1, sp, #8
 800e408:	f002 fd82 	bl	8010f10 <_svfiprintf_r>
 800e40c:	9b02      	ldr	r3, [sp, #8]
 800e40e:	2200      	movs	r2, #0
 800e410:	701a      	strb	r2, [r3, #0]
 800e412:	b01c      	add	sp, #112	; 0x70
 800e414:	f85d eb04 	ldr.w	lr, [sp], #4
 800e418:	b003      	add	sp, #12
 800e41a:	4770      	bx	lr
 800e41c:	20000190 	.word	0x20000190
 800e420:	ffff0208 	.word	0xffff0208

0800e424 <sulp>:
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	4604      	mov	r4, r0
 800e428:	460d      	mov	r5, r1
 800e42a:	ec45 4b10 	vmov	d0, r4, r5
 800e42e:	4616      	mov	r6, r2
 800e430:	f002 fbd2 	bl	8010bd8 <__ulp>
 800e434:	ec51 0b10 	vmov	r0, r1, d0
 800e438:	b17e      	cbz	r6, 800e45a <sulp+0x36>
 800e43a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e43e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e442:	2b00      	cmp	r3, #0
 800e444:	dd09      	ble.n	800e45a <sulp+0x36>
 800e446:	051b      	lsls	r3, r3, #20
 800e448:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e44c:	2400      	movs	r4, #0
 800e44e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e452:	4622      	mov	r2, r4
 800e454:	462b      	mov	r3, r5
 800e456:	f7f2 f8cf 	bl	80005f8 <__aeabi_dmul>
 800e45a:	bd70      	pop	{r4, r5, r6, pc}
 800e45c:	0000      	movs	r0, r0
	...

0800e460 <_strtod_l>:
 800e460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e464:	461f      	mov	r7, r3
 800e466:	b0a1      	sub	sp, #132	; 0x84
 800e468:	2300      	movs	r3, #0
 800e46a:	4681      	mov	r9, r0
 800e46c:	4638      	mov	r0, r7
 800e46e:	460e      	mov	r6, r1
 800e470:	9217      	str	r2, [sp, #92]	; 0x5c
 800e472:	931c      	str	r3, [sp, #112]	; 0x70
 800e474:	f002 f8bf 	bl	80105f6 <__localeconv_l>
 800e478:	4680      	mov	r8, r0
 800e47a:	6800      	ldr	r0, [r0, #0]
 800e47c:	f7f1 fea8 	bl	80001d0 <strlen>
 800e480:	f04f 0a00 	mov.w	sl, #0
 800e484:	4604      	mov	r4, r0
 800e486:	f04f 0b00 	mov.w	fp, #0
 800e48a:	961b      	str	r6, [sp, #108]	; 0x6c
 800e48c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e48e:	781a      	ldrb	r2, [r3, #0]
 800e490:	2a0d      	cmp	r2, #13
 800e492:	d832      	bhi.n	800e4fa <_strtod_l+0x9a>
 800e494:	2a09      	cmp	r2, #9
 800e496:	d236      	bcs.n	800e506 <_strtod_l+0xa6>
 800e498:	2a00      	cmp	r2, #0
 800e49a:	d03e      	beq.n	800e51a <_strtod_l+0xba>
 800e49c:	2300      	movs	r3, #0
 800e49e:	930d      	str	r3, [sp, #52]	; 0x34
 800e4a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e4a2:	782b      	ldrb	r3, [r5, #0]
 800e4a4:	2b30      	cmp	r3, #48	; 0x30
 800e4a6:	f040 80ac 	bne.w	800e602 <_strtod_l+0x1a2>
 800e4aa:	786b      	ldrb	r3, [r5, #1]
 800e4ac:	2b58      	cmp	r3, #88	; 0x58
 800e4ae:	d001      	beq.n	800e4b4 <_strtod_l+0x54>
 800e4b0:	2b78      	cmp	r3, #120	; 0x78
 800e4b2:	d167      	bne.n	800e584 <_strtod_l+0x124>
 800e4b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4b6:	9301      	str	r3, [sp, #4]
 800e4b8:	ab1c      	add	r3, sp, #112	; 0x70
 800e4ba:	9300      	str	r3, [sp, #0]
 800e4bc:	9702      	str	r7, [sp, #8]
 800e4be:	ab1d      	add	r3, sp, #116	; 0x74
 800e4c0:	4a88      	ldr	r2, [pc, #544]	; (800e6e4 <_strtod_l+0x284>)
 800e4c2:	a91b      	add	r1, sp, #108	; 0x6c
 800e4c4:	4648      	mov	r0, r9
 800e4c6:	f001 fdbc 	bl	8010042 <__gethex>
 800e4ca:	f010 0407 	ands.w	r4, r0, #7
 800e4ce:	4606      	mov	r6, r0
 800e4d0:	d005      	beq.n	800e4de <_strtod_l+0x7e>
 800e4d2:	2c06      	cmp	r4, #6
 800e4d4:	d12b      	bne.n	800e52e <_strtod_l+0xce>
 800e4d6:	3501      	adds	r5, #1
 800e4d8:	2300      	movs	r3, #0
 800e4da:	951b      	str	r5, [sp, #108]	; 0x6c
 800e4dc:	930d      	str	r3, [sp, #52]	; 0x34
 800e4de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f040 859a 	bne.w	800f01a <_strtod_l+0xbba>
 800e4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e4e8:	b1e3      	cbz	r3, 800e524 <_strtod_l+0xc4>
 800e4ea:	4652      	mov	r2, sl
 800e4ec:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e4f0:	ec43 2b10 	vmov	d0, r2, r3
 800e4f4:	b021      	add	sp, #132	; 0x84
 800e4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4fa:	2a2b      	cmp	r2, #43	; 0x2b
 800e4fc:	d015      	beq.n	800e52a <_strtod_l+0xca>
 800e4fe:	2a2d      	cmp	r2, #45	; 0x2d
 800e500:	d004      	beq.n	800e50c <_strtod_l+0xac>
 800e502:	2a20      	cmp	r2, #32
 800e504:	d1ca      	bne.n	800e49c <_strtod_l+0x3c>
 800e506:	3301      	adds	r3, #1
 800e508:	931b      	str	r3, [sp, #108]	; 0x6c
 800e50a:	e7bf      	b.n	800e48c <_strtod_l+0x2c>
 800e50c:	2201      	movs	r2, #1
 800e50e:	920d      	str	r2, [sp, #52]	; 0x34
 800e510:	1c5a      	adds	r2, r3, #1
 800e512:	921b      	str	r2, [sp, #108]	; 0x6c
 800e514:	785b      	ldrb	r3, [r3, #1]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d1c2      	bne.n	800e4a0 <_strtod_l+0x40>
 800e51a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e51c:	961b      	str	r6, [sp, #108]	; 0x6c
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f040 8579 	bne.w	800f016 <_strtod_l+0xbb6>
 800e524:	4652      	mov	r2, sl
 800e526:	465b      	mov	r3, fp
 800e528:	e7e2      	b.n	800e4f0 <_strtod_l+0x90>
 800e52a:	2200      	movs	r2, #0
 800e52c:	e7ef      	b.n	800e50e <_strtod_l+0xae>
 800e52e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e530:	b13a      	cbz	r2, 800e542 <_strtod_l+0xe2>
 800e532:	2135      	movs	r1, #53	; 0x35
 800e534:	a81e      	add	r0, sp, #120	; 0x78
 800e536:	f002 fc47 	bl	8010dc8 <__copybits>
 800e53a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e53c:	4648      	mov	r0, r9
 800e53e:	f002 f8b3 	bl	80106a8 <_Bfree>
 800e542:	3c01      	subs	r4, #1
 800e544:	2c04      	cmp	r4, #4
 800e546:	d806      	bhi.n	800e556 <_strtod_l+0xf6>
 800e548:	e8df f004 	tbb	[pc, r4]
 800e54c:	1714030a 	.word	0x1714030a
 800e550:	0a          	.byte	0x0a
 800e551:	00          	.byte	0x00
 800e552:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e556:	0730      	lsls	r0, r6, #28
 800e558:	d5c1      	bpl.n	800e4de <_strtod_l+0x7e>
 800e55a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e55e:	e7be      	b.n	800e4de <_strtod_l+0x7e>
 800e560:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e564:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e566:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e56a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e56e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e572:	e7f0      	b.n	800e556 <_strtod_l+0xf6>
 800e574:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e6e8 <_strtod_l+0x288>
 800e578:	e7ed      	b.n	800e556 <_strtod_l+0xf6>
 800e57a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e57e:	f04f 3aff 	mov.w	sl, #4294967295
 800e582:	e7e8      	b.n	800e556 <_strtod_l+0xf6>
 800e584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e586:	1c5a      	adds	r2, r3, #1
 800e588:	921b      	str	r2, [sp, #108]	; 0x6c
 800e58a:	785b      	ldrb	r3, [r3, #1]
 800e58c:	2b30      	cmp	r3, #48	; 0x30
 800e58e:	d0f9      	beq.n	800e584 <_strtod_l+0x124>
 800e590:	2b00      	cmp	r3, #0
 800e592:	d0a4      	beq.n	800e4de <_strtod_l+0x7e>
 800e594:	2301      	movs	r3, #1
 800e596:	2500      	movs	r5, #0
 800e598:	9306      	str	r3, [sp, #24]
 800e59a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e59c:	9308      	str	r3, [sp, #32]
 800e59e:	9507      	str	r5, [sp, #28]
 800e5a0:	9505      	str	r5, [sp, #20]
 800e5a2:	220a      	movs	r2, #10
 800e5a4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e5a6:	7807      	ldrb	r7, [r0, #0]
 800e5a8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e5ac:	b2d9      	uxtb	r1, r3
 800e5ae:	2909      	cmp	r1, #9
 800e5b0:	d929      	bls.n	800e606 <_strtod_l+0x1a6>
 800e5b2:	4622      	mov	r2, r4
 800e5b4:	f8d8 1000 	ldr.w	r1, [r8]
 800e5b8:	f002 ff25 	bl	8011406 <strncmp>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d031      	beq.n	800e624 <_strtod_l+0x1c4>
 800e5c0:	2000      	movs	r0, #0
 800e5c2:	9c05      	ldr	r4, [sp, #20]
 800e5c4:	9004      	str	r0, [sp, #16]
 800e5c6:	463b      	mov	r3, r7
 800e5c8:	4602      	mov	r2, r0
 800e5ca:	2b65      	cmp	r3, #101	; 0x65
 800e5cc:	d001      	beq.n	800e5d2 <_strtod_l+0x172>
 800e5ce:	2b45      	cmp	r3, #69	; 0x45
 800e5d0:	d114      	bne.n	800e5fc <_strtod_l+0x19c>
 800e5d2:	b924      	cbnz	r4, 800e5de <_strtod_l+0x17e>
 800e5d4:	b910      	cbnz	r0, 800e5dc <_strtod_l+0x17c>
 800e5d6:	9b06      	ldr	r3, [sp, #24]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d09e      	beq.n	800e51a <_strtod_l+0xba>
 800e5dc:	2400      	movs	r4, #0
 800e5de:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e5e0:	1c73      	adds	r3, r6, #1
 800e5e2:	931b      	str	r3, [sp, #108]	; 0x6c
 800e5e4:	7873      	ldrb	r3, [r6, #1]
 800e5e6:	2b2b      	cmp	r3, #43	; 0x2b
 800e5e8:	d078      	beq.n	800e6dc <_strtod_l+0x27c>
 800e5ea:	2b2d      	cmp	r3, #45	; 0x2d
 800e5ec:	d070      	beq.n	800e6d0 <_strtod_l+0x270>
 800e5ee:	f04f 0c00 	mov.w	ip, #0
 800e5f2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e5f6:	2f09      	cmp	r7, #9
 800e5f8:	d97c      	bls.n	800e6f4 <_strtod_l+0x294>
 800e5fa:	961b      	str	r6, [sp, #108]	; 0x6c
 800e5fc:	f04f 0e00 	mov.w	lr, #0
 800e600:	e09a      	b.n	800e738 <_strtod_l+0x2d8>
 800e602:	2300      	movs	r3, #0
 800e604:	e7c7      	b.n	800e596 <_strtod_l+0x136>
 800e606:	9905      	ldr	r1, [sp, #20]
 800e608:	2908      	cmp	r1, #8
 800e60a:	bfdd      	ittte	le
 800e60c:	9907      	ldrle	r1, [sp, #28]
 800e60e:	fb02 3301 	mlale	r3, r2, r1, r3
 800e612:	9307      	strle	r3, [sp, #28]
 800e614:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e618:	9b05      	ldr	r3, [sp, #20]
 800e61a:	3001      	adds	r0, #1
 800e61c:	3301      	adds	r3, #1
 800e61e:	9305      	str	r3, [sp, #20]
 800e620:	901b      	str	r0, [sp, #108]	; 0x6c
 800e622:	e7bf      	b.n	800e5a4 <_strtod_l+0x144>
 800e624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e626:	191a      	adds	r2, r3, r4
 800e628:	921b      	str	r2, [sp, #108]	; 0x6c
 800e62a:	9a05      	ldr	r2, [sp, #20]
 800e62c:	5d1b      	ldrb	r3, [r3, r4]
 800e62e:	2a00      	cmp	r2, #0
 800e630:	d037      	beq.n	800e6a2 <_strtod_l+0x242>
 800e632:	9c05      	ldr	r4, [sp, #20]
 800e634:	4602      	mov	r2, r0
 800e636:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e63a:	2909      	cmp	r1, #9
 800e63c:	d913      	bls.n	800e666 <_strtod_l+0x206>
 800e63e:	2101      	movs	r1, #1
 800e640:	9104      	str	r1, [sp, #16]
 800e642:	e7c2      	b.n	800e5ca <_strtod_l+0x16a>
 800e644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e646:	1c5a      	adds	r2, r3, #1
 800e648:	921b      	str	r2, [sp, #108]	; 0x6c
 800e64a:	785b      	ldrb	r3, [r3, #1]
 800e64c:	3001      	adds	r0, #1
 800e64e:	2b30      	cmp	r3, #48	; 0x30
 800e650:	d0f8      	beq.n	800e644 <_strtod_l+0x1e4>
 800e652:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e656:	2a08      	cmp	r2, #8
 800e658:	f200 84e4 	bhi.w	800f024 <_strtod_l+0xbc4>
 800e65c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e65e:	9208      	str	r2, [sp, #32]
 800e660:	4602      	mov	r2, r0
 800e662:	2000      	movs	r0, #0
 800e664:	4604      	mov	r4, r0
 800e666:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e66a:	f100 0101 	add.w	r1, r0, #1
 800e66e:	d012      	beq.n	800e696 <_strtod_l+0x236>
 800e670:	440a      	add	r2, r1
 800e672:	eb00 0c04 	add.w	ip, r0, r4
 800e676:	4621      	mov	r1, r4
 800e678:	270a      	movs	r7, #10
 800e67a:	458c      	cmp	ip, r1
 800e67c:	d113      	bne.n	800e6a6 <_strtod_l+0x246>
 800e67e:	1821      	adds	r1, r4, r0
 800e680:	2908      	cmp	r1, #8
 800e682:	f104 0401 	add.w	r4, r4, #1
 800e686:	4404      	add	r4, r0
 800e688:	dc19      	bgt.n	800e6be <_strtod_l+0x25e>
 800e68a:	9b07      	ldr	r3, [sp, #28]
 800e68c:	210a      	movs	r1, #10
 800e68e:	fb01 e303 	mla	r3, r1, r3, lr
 800e692:	9307      	str	r3, [sp, #28]
 800e694:	2100      	movs	r1, #0
 800e696:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e698:	1c58      	adds	r0, r3, #1
 800e69a:	901b      	str	r0, [sp, #108]	; 0x6c
 800e69c:	785b      	ldrb	r3, [r3, #1]
 800e69e:	4608      	mov	r0, r1
 800e6a0:	e7c9      	b.n	800e636 <_strtod_l+0x1d6>
 800e6a2:	9805      	ldr	r0, [sp, #20]
 800e6a4:	e7d3      	b.n	800e64e <_strtod_l+0x1ee>
 800e6a6:	2908      	cmp	r1, #8
 800e6a8:	f101 0101 	add.w	r1, r1, #1
 800e6ac:	dc03      	bgt.n	800e6b6 <_strtod_l+0x256>
 800e6ae:	9b07      	ldr	r3, [sp, #28]
 800e6b0:	437b      	muls	r3, r7
 800e6b2:	9307      	str	r3, [sp, #28]
 800e6b4:	e7e1      	b.n	800e67a <_strtod_l+0x21a>
 800e6b6:	2910      	cmp	r1, #16
 800e6b8:	bfd8      	it	le
 800e6ba:	437d      	mulle	r5, r7
 800e6bc:	e7dd      	b.n	800e67a <_strtod_l+0x21a>
 800e6be:	2c10      	cmp	r4, #16
 800e6c0:	bfdc      	itt	le
 800e6c2:	210a      	movle	r1, #10
 800e6c4:	fb01 e505 	mlale	r5, r1, r5, lr
 800e6c8:	e7e4      	b.n	800e694 <_strtod_l+0x234>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	9304      	str	r3, [sp, #16]
 800e6ce:	e781      	b.n	800e5d4 <_strtod_l+0x174>
 800e6d0:	f04f 0c01 	mov.w	ip, #1
 800e6d4:	1cb3      	adds	r3, r6, #2
 800e6d6:	931b      	str	r3, [sp, #108]	; 0x6c
 800e6d8:	78b3      	ldrb	r3, [r6, #2]
 800e6da:	e78a      	b.n	800e5f2 <_strtod_l+0x192>
 800e6dc:	f04f 0c00 	mov.w	ip, #0
 800e6e0:	e7f8      	b.n	800e6d4 <_strtod_l+0x274>
 800e6e2:	bf00      	nop
 800e6e4:	08011af0 	.word	0x08011af0
 800e6e8:	7ff00000 	.word	0x7ff00000
 800e6ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6ee:	1c5f      	adds	r7, r3, #1
 800e6f0:	971b      	str	r7, [sp, #108]	; 0x6c
 800e6f2:	785b      	ldrb	r3, [r3, #1]
 800e6f4:	2b30      	cmp	r3, #48	; 0x30
 800e6f6:	d0f9      	beq.n	800e6ec <_strtod_l+0x28c>
 800e6f8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e6fc:	2f08      	cmp	r7, #8
 800e6fe:	f63f af7d 	bhi.w	800e5fc <_strtod_l+0x19c>
 800e702:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e706:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e708:	930a      	str	r3, [sp, #40]	; 0x28
 800e70a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e70c:	1c5f      	adds	r7, r3, #1
 800e70e:	971b      	str	r7, [sp, #108]	; 0x6c
 800e710:	785b      	ldrb	r3, [r3, #1]
 800e712:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e716:	f1b8 0f09 	cmp.w	r8, #9
 800e71a:	d937      	bls.n	800e78c <_strtod_l+0x32c>
 800e71c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e71e:	1a7f      	subs	r7, r7, r1
 800e720:	2f08      	cmp	r7, #8
 800e722:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e726:	dc37      	bgt.n	800e798 <_strtod_l+0x338>
 800e728:	45be      	cmp	lr, r7
 800e72a:	bfa8      	it	ge
 800e72c:	46be      	movge	lr, r7
 800e72e:	f1bc 0f00 	cmp.w	ip, #0
 800e732:	d001      	beq.n	800e738 <_strtod_l+0x2d8>
 800e734:	f1ce 0e00 	rsb	lr, lr, #0
 800e738:	2c00      	cmp	r4, #0
 800e73a:	d151      	bne.n	800e7e0 <_strtod_l+0x380>
 800e73c:	2800      	cmp	r0, #0
 800e73e:	f47f aece 	bne.w	800e4de <_strtod_l+0x7e>
 800e742:	9a06      	ldr	r2, [sp, #24]
 800e744:	2a00      	cmp	r2, #0
 800e746:	f47f aeca 	bne.w	800e4de <_strtod_l+0x7e>
 800e74a:	9a04      	ldr	r2, [sp, #16]
 800e74c:	2a00      	cmp	r2, #0
 800e74e:	f47f aee4 	bne.w	800e51a <_strtod_l+0xba>
 800e752:	2b4e      	cmp	r3, #78	; 0x4e
 800e754:	d027      	beq.n	800e7a6 <_strtod_l+0x346>
 800e756:	dc21      	bgt.n	800e79c <_strtod_l+0x33c>
 800e758:	2b49      	cmp	r3, #73	; 0x49
 800e75a:	f47f aede 	bne.w	800e51a <_strtod_l+0xba>
 800e75e:	49a0      	ldr	r1, [pc, #640]	; (800e9e0 <_strtod_l+0x580>)
 800e760:	a81b      	add	r0, sp, #108	; 0x6c
 800e762:	f001 fea1 	bl	80104a8 <__match>
 800e766:	2800      	cmp	r0, #0
 800e768:	f43f aed7 	beq.w	800e51a <_strtod_l+0xba>
 800e76c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e76e:	499d      	ldr	r1, [pc, #628]	; (800e9e4 <_strtod_l+0x584>)
 800e770:	3b01      	subs	r3, #1
 800e772:	a81b      	add	r0, sp, #108	; 0x6c
 800e774:	931b      	str	r3, [sp, #108]	; 0x6c
 800e776:	f001 fe97 	bl	80104a8 <__match>
 800e77a:	b910      	cbnz	r0, 800e782 <_strtod_l+0x322>
 800e77c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e77e:	3301      	adds	r3, #1
 800e780:	931b      	str	r3, [sp, #108]	; 0x6c
 800e782:	f8df b274 	ldr.w	fp, [pc, #628]	; 800e9f8 <_strtod_l+0x598>
 800e786:	f04f 0a00 	mov.w	sl, #0
 800e78a:	e6a8      	b.n	800e4de <_strtod_l+0x7e>
 800e78c:	210a      	movs	r1, #10
 800e78e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e792:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e796:	e7b8      	b.n	800e70a <_strtod_l+0x2aa>
 800e798:	46be      	mov	lr, r7
 800e79a:	e7c8      	b.n	800e72e <_strtod_l+0x2ce>
 800e79c:	2b69      	cmp	r3, #105	; 0x69
 800e79e:	d0de      	beq.n	800e75e <_strtod_l+0x2fe>
 800e7a0:	2b6e      	cmp	r3, #110	; 0x6e
 800e7a2:	f47f aeba 	bne.w	800e51a <_strtod_l+0xba>
 800e7a6:	4990      	ldr	r1, [pc, #576]	; (800e9e8 <_strtod_l+0x588>)
 800e7a8:	a81b      	add	r0, sp, #108	; 0x6c
 800e7aa:	f001 fe7d 	bl	80104a8 <__match>
 800e7ae:	2800      	cmp	r0, #0
 800e7b0:	f43f aeb3 	beq.w	800e51a <_strtod_l+0xba>
 800e7b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	2b28      	cmp	r3, #40	; 0x28
 800e7ba:	d10e      	bne.n	800e7da <_strtod_l+0x37a>
 800e7bc:	aa1e      	add	r2, sp, #120	; 0x78
 800e7be:	498b      	ldr	r1, [pc, #556]	; (800e9ec <_strtod_l+0x58c>)
 800e7c0:	a81b      	add	r0, sp, #108	; 0x6c
 800e7c2:	f001 fe85 	bl	80104d0 <__hexnan>
 800e7c6:	2805      	cmp	r0, #5
 800e7c8:	d107      	bne.n	800e7da <_strtod_l+0x37a>
 800e7ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e7cc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e7d0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e7d4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e7d8:	e681      	b.n	800e4de <_strtod_l+0x7e>
 800e7da:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ea00 <_strtod_l+0x5a0>
 800e7de:	e7d2      	b.n	800e786 <_strtod_l+0x326>
 800e7e0:	ebae 0302 	sub.w	r3, lr, r2
 800e7e4:	9306      	str	r3, [sp, #24]
 800e7e6:	9b05      	ldr	r3, [sp, #20]
 800e7e8:	9807      	ldr	r0, [sp, #28]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	bf08      	it	eq
 800e7ee:	4623      	moveq	r3, r4
 800e7f0:	2c10      	cmp	r4, #16
 800e7f2:	9305      	str	r3, [sp, #20]
 800e7f4:	46a0      	mov	r8, r4
 800e7f6:	bfa8      	it	ge
 800e7f8:	f04f 0810 	movge.w	r8, #16
 800e7fc:	f7f1 fe82 	bl	8000504 <__aeabi_ui2d>
 800e800:	2c09      	cmp	r4, #9
 800e802:	4682      	mov	sl, r0
 800e804:	468b      	mov	fp, r1
 800e806:	dc13      	bgt.n	800e830 <_strtod_l+0x3d0>
 800e808:	9b06      	ldr	r3, [sp, #24]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	f43f ae67 	beq.w	800e4de <_strtod_l+0x7e>
 800e810:	9b06      	ldr	r3, [sp, #24]
 800e812:	dd7a      	ble.n	800e90a <_strtod_l+0x4aa>
 800e814:	2b16      	cmp	r3, #22
 800e816:	dc61      	bgt.n	800e8dc <_strtod_l+0x47c>
 800e818:	4a75      	ldr	r2, [pc, #468]	; (800e9f0 <_strtod_l+0x590>)
 800e81a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e81e:	e9de 0100 	ldrd	r0, r1, [lr]
 800e822:	4652      	mov	r2, sl
 800e824:	465b      	mov	r3, fp
 800e826:	f7f1 fee7 	bl	80005f8 <__aeabi_dmul>
 800e82a:	4682      	mov	sl, r0
 800e82c:	468b      	mov	fp, r1
 800e82e:	e656      	b.n	800e4de <_strtod_l+0x7e>
 800e830:	4b6f      	ldr	r3, [pc, #444]	; (800e9f0 <_strtod_l+0x590>)
 800e832:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e836:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e83a:	f7f1 fedd 	bl	80005f8 <__aeabi_dmul>
 800e83e:	4606      	mov	r6, r0
 800e840:	4628      	mov	r0, r5
 800e842:	460f      	mov	r7, r1
 800e844:	f7f1 fe5e 	bl	8000504 <__aeabi_ui2d>
 800e848:	4602      	mov	r2, r0
 800e84a:	460b      	mov	r3, r1
 800e84c:	4630      	mov	r0, r6
 800e84e:	4639      	mov	r1, r7
 800e850:	f7f1 fd1c 	bl	800028c <__adddf3>
 800e854:	2c0f      	cmp	r4, #15
 800e856:	4682      	mov	sl, r0
 800e858:	468b      	mov	fp, r1
 800e85a:	ddd5      	ble.n	800e808 <_strtod_l+0x3a8>
 800e85c:	9b06      	ldr	r3, [sp, #24]
 800e85e:	eba4 0808 	sub.w	r8, r4, r8
 800e862:	4498      	add	r8, r3
 800e864:	f1b8 0f00 	cmp.w	r8, #0
 800e868:	f340 8096 	ble.w	800e998 <_strtod_l+0x538>
 800e86c:	f018 030f 	ands.w	r3, r8, #15
 800e870:	d00a      	beq.n	800e888 <_strtod_l+0x428>
 800e872:	495f      	ldr	r1, [pc, #380]	; (800e9f0 <_strtod_l+0x590>)
 800e874:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e878:	4652      	mov	r2, sl
 800e87a:	465b      	mov	r3, fp
 800e87c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e880:	f7f1 feba 	bl	80005f8 <__aeabi_dmul>
 800e884:	4682      	mov	sl, r0
 800e886:	468b      	mov	fp, r1
 800e888:	f038 080f 	bics.w	r8, r8, #15
 800e88c:	d073      	beq.n	800e976 <_strtod_l+0x516>
 800e88e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e892:	dd47      	ble.n	800e924 <_strtod_l+0x4c4>
 800e894:	2400      	movs	r4, #0
 800e896:	46a0      	mov	r8, r4
 800e898:	9407      	str	r4, [sp, #28]
 800e89a:	9405      	str	r4, [sp, #20]
 800e89c:	2322      	movs	r3, #34	; 0x22
 800e89e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800e9f8 <_strtod_l+0x598>
 800e8a2:	f8c9 3000 	str.w	r3, [r9]
 800e8a6:	f04f 0a00 	mov.w	sl, #0
 800e8aa:	9b07      	ldr	r3, [sp, #28]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	f43f ae16 	beq.w	800e4de <_strtod_l+0x7e>
 800e8b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e8b4:	4648      	mov	r0, r9
 800e8b6:	f001 fef7 	bl	80106a8 <_Bfree>
 800e8ba:	9905      	ldr	r1, [sp, #20]
 800e8bc:	4648      	mov	r0, r9
 800e8be:	f001 fef3 	bl	80106a8 <_Bfree>
 800e8c2:	4641      	mov	r1, r8
 800e8c4:	4648      	mov	r0, r9
 800e8c6:	f001 feef 	bl	80106a8 <_Bfree>
 800e8ca:	9907      	ldr	r1, [sp, #28]
 800e8cc:	4648      	mov	r0, r9
 800e8ce:	f001 feeb 	bl	80106a8 <_Bfree>
 800e8d2:	4621      	mov	r1, r4
 800e8d4:	4648      	mov	r0, r9
 800e8d6:	f001 fee7 	bl	80106a8 <_Bfree>
 800e8da:	e600      	b.n	800e4de <_strtod_l+0x7e>
 800e8dc:	9a06      	ldr	r2, [sp, #24]
 800e8de:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	dbba      	blt.n	800e85c <_strtod_l+0x3fc>
 800e8e6:	4d42      	ldr	r5, [pc, #264]	; (800e9f0 <_strtod_l+0x590>)
 800e8e8:	f1c4 040f 	rsb	r4, r4, #15
 800e8ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e8f0:	4652      	mov	r2, sl
 800e8f2:	465b      	mov	r3, fp
 800e8f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8f8:	f7f1 fe7e 	bl	80005f8 <__aeabi_dmul>
 800e8fc:	9b06      	ldr	r3, [sp, #24]
 800e8fe:	1b1c      	subs	r4, r3, r4
 800e900:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e904:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e908:	e78d      	b.n	800e826 <_strtod_l+0x3c6>
 800e90a:	f113 0f16 	cmn.w	r3, #22
 800e90e:	dba5      	blt.n	800e85c <_strtod_l+0x3fc>
 800e910:	4a37      	ldr	r2, [pc, #220]	; (800e9f0 <_strtod_l+0x590>)
 800e912:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800e916:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e91a:	4650      	mov	r0, sl
 800e91c:	4659      	mov	r1, fp
 800e91e:	f7f1 ff95 	bl	800084c <__aeabi_ddiv>
 800e922:	e782      	b.n	800e82a <_strtod_l+0x3ca>
 800e924:	2300      	movs	r3, #0
 800e926:	4e33      	ldr	r6, [pc, #204]	; (800e9f4 <_strtod_l+0x594>)
 800e928:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e92c:	4650      	mov	r0, sl
 800e92e:	4659      	mov	r1, fp
 800e930:	461d      	mov	r5, r3
 800e932:	f1b8 0f01 	cmp.w	r8, #1
 800e936:	dc21      	bgt.n	800e97c <_strtod_l+0x51c>
 800e938:	b10b      	cbz	r3, 800e93e <_strtod_l+0x4de>
 800e93a:	4682      	mov	sl, r0
 800e93c:	468b      	mov	fp, r1
 800e93e:	4b2d      	ldr	r3, [pc, #180]	; (800e9f4 <_strtod_l+0x594>)
 800e940:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e944:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e948:	4652      	mov	r2, sl
 800e94a:	465b      	mov	r3, fp
 800e94c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e950:	f7f1 fe52 	bl	80005f8 <__aeabi_dmul>
 800e954:	4b28      	ldr	r3, [pc, #160]	; (800e9f8 <_strtod_l+0x598>)
 800e956:	460a      	mov	r2, r1
 800e958:	400b      	ands	r3, r1
 800e95a:	4928      	ldr	r1, [pc, #160]	; (800e9fc <_strtod_l+0x59c>)
 800e95c:	428b      	cmp	r3, r1
 800e95e:	4682      	mov	sl, r0
 800e960:	d898      	bhi.n	800e894 <_strtod_l+0x434>
 800e962:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e966:	428b      	cmp	r3, r1
 800e968:	bf86      	itte	hi
 800e96a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ea04 <_strtod_l+0x5a4>
 800e96e:	f04f 3aff 	movhi.w	sl, #4294967295
 800e972:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e976:	2300      	movs	r3, #0
 800e978:	9304      	str	r3, [sp, #16]
 800e97a:	e077      	b.n	800ea6c <_strtod_l+0x60c>
 800e97c:	f018 0f01 	tst.w	r8, #1
 800e980:	d006      	beq.n	800e990 <_strtod_l+0x530>
 800e982:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800e986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98a:	f7f1 fe35 	bl	80005f8 <__aeabi_dmul>
 800e98e:	2301      	movs	r3, #1
 800e990:	3501      	adds	r5, #1
 800e992:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e996:	e7cc      	b.n	800e932 <_strtod_l+0x4d2>
 800e998:	d0ed      	beq.n	800e976 <_strtod_l+0x516>
 800e99a:	f1c8 0800 	rsb	r8, r8, #0
 800e99e:	f018 020f 	ands.w	r2, r8, #15
 800e9a2:	d00a      	beq.n	800e9ba <_strtod_l+0x55a>
 800e9a4:	4b12      	ldr	r3, [pc, #72]	; (800e9f0 <_strtod_l+0x590>)
 800e9a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e9aa:	4650      	mov	r0, sl
 800e9ac:	4659      	mov	r1, fp
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	f7f1 ff4b 	bl	800084c <__aeabi_ddiv>
 800e9b6:	4682      	mov	sl, r0
 800e9b8:	468b      	mov	fp, r1
 800e9ba:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e9be:	d0da      	beq.n	800e976 <_strtod_l+0x516>
 800e9c0:	f1b8 0f1f 	cmp.w	r8, #31
 800e9c4:	dd20      	ble.n	800ea08 <_strtod_l+0x5a8>
 800e9c6:	2400      	movs	r4, #0
 800e9c8:	46a0      	mov	r8, r4
 800e9ca:	9407      	str	r4, [sp, #28]
 800e9cc:	9405      	str	r4, [sp, #20]
 800e9ce:	2322      	movs	r3, #34	; 0x22
 800e9d0:	f04f 0a00 	mov.w	sl, #0
 800e9d4:	f04f 0b00 	mov.w	fp, #0
 800e9d8:	f8c9 3000 	str.w	r3, [r9]
 800e9dc:	e765      	b.n	800e8aa <_strtod_l+0x44a>
 800e9de:	bf00      	nop
 800e9e0:	08011ab9 	.word	0x08011ab9
 800e9e4:	08011b43 	.word	0x08011b43
 800e9e8:	08011ac1 	.word	0x08011ac1
 800e9ec:	08011b04 	.word	0x08011b04
 800e9f0:	08011be8 	.word	0x08011be8
 800e9f4:	08011bc0 	.word	0x08011bc0
 800e9f8:	7ff00000 	.word	0x7ff00000
 800e9fc:	7ca00000 	.word	0x7ca00000
 800ea00:	fff80000 	.word	0xfff80000
 800ea04:	7fefffff 	.word	0x7fefffff
 800ea08:	f018 0310 	ands.w	r3, r8, #16
 800ea0c:	bf18      	it	ne
 800ea0e:	236a      	movne	r3, #106	; 0x6a
 800ea10:	4da0      	ldr	r5, [pc, #640]	; (800ec94 <_strtod_l+0x834>)
 800ea12:	9304      	str	r3, [sp, #16]
 800ea14:	4650      	mov	r0, sl
 800ea16:	4659      	mov	r1, fp
 800ea18:	2300      	movs	r3, #0
 800ea1a:	f1b8 0f00 	cmp.w	r8, #0
 800ea1e:	f300 810a 	bgt.w	800ec36 <_strtod_l+0x7d6>
 800ea22:	b10b      	cbz	r3, 800ea28 <_strtod_l+0x5c8>
 800ea24:	4682      	mov	sl, r0
 800ea26:	468b      	mov	fp, r1
 800ea28:	9b04      	ldr	r3, [sp, #16]
 800ea2a:	b1bb      	cbz	r3, 800ea5c <_strtod_l+0x5fc>
 800ea2c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ea30:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	4659      	mov	r1, fp
 800ea38:	dd10      	ble.n	800ea5c <_strtod_l+0x5fc>
 800ea3a:	2b1f      	cmp	r3, #31
 800ea3c:	f340 8107 	ble.w	800ec4e <_strtod_l+0x7ee>
 800ea40:	2b34      	cmp	r3, #52	; 0x34
 800ea42:	bfde      	ittt	le
 800ea44:	3b20      	suble	r3, #32
 800ea46:	f04f 32ff 	movle.w	r2, #4294967295
 800ea4a:	fa02 f303 	lslle.w	r3, r2, r3
 800ea4e:	f04f 0a00 	mov.w	sl, #0
 800ea52:	bfcc      	ite	gt
 800ea54:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ea58:	ea03 0b01 	andle.w	fp, r3, r1
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	2300      	movs	r3, #0
 800ea60:	4650      	mov	r0, sl
 800ea62:	4659      	mov	r1, fp
 800ea64:	f7f2 f830 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d1ac      	bne.n	800e9c6 <_strtod_l+0x566>
 800ea6c:	9b07      	ldr	r3, [sp, #28]
 800ea6e:	9300      	str	r3, [sp, #0]
 800ea70:	9a05      	ldr	r2, [sp, #20]
 800ea72:	9908      	ldr	r1, [sp, #32]
 800ea74:	4623      	mov	r3, r4
 800ea76:	4648      	mov	r0, r9
 800ea78:	f001 fe68 	bl	801074c <__s2b>
 800ea7c:	9007      	str	r0, [sp, #28]
 800ea7e:	2800      	cmp	r0, #0
 800ea80:	f43f af08 	beq.w	800e894 <_strtod_l+0x434>
 800ea84:	9a06      	ldr	r2, [sp, #24]
 800ea86:	9b06      	ldr	r3, [sp, #24]
 800ea88:	2a00      	cmp	r2, #0
 800ea8a:	f1c3 0300 	rsb	r3, r3, #0
 800ea8e:	bfa8      	it	ge
 800ea90:	2300      	movge	r3, #0
 800ea92:	930e      	str	r3, [sp, #56]	; 0x38
 800ea94:	2400      	movs	r4, #0
 800ea96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ea9a:	9316      	str	r3, [sp, #88]	; 0x58
 800ea9c:	46a0      	mov	r8, r4
 800ea9e:	9b07      	ldr	r3, [sp, #28]
 800eaa0:	4648      	mov	r0, r9
 800eaa2:	6859      	ldr	r1, [r3, #4]
 800eaa4:	f001 fdcc 	bl	8010640 <_Balloc>
 800eaa8:	9005      	str	r0, [sp, #20]
 800eaaa:	2800      	cmp	r0, #0
 800eaac:	f43f aef6 	beq.w	800e89c <_strtod_l+0x43c>
 800eab0:	9b07      	ldr	r3, [sp, #28]
 800eab2:	691a      	ldr	r2, [r3, #16]
 800eab4:	3202      	adds	r2, #2
 800eab6:	f103 010c 	add.w	r1, r3, #12
 800eaba:	0092      	lsls	r2, r2, #2
 800eabc:	300c      	adds	r0, #12
 800eabe:	f7fe fd69 	bl	800d594 <memcpy>
 800eac2:	aa1e      	add	r2, sp, #120	; 0x78
 800eac4:	a91d      	add	r1, sp, #116	; 0x74
 800eac6:	ec4b ab10 	vmov	d0, sl, fp
 800eaca:	4648      	mov	r0, r9
 800eacc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ead0:	f002 f8f8 	bl	8010cc4 <__d2b>
 800ead4:	901c      	str	r0, [sp, #112]	; 0x70
 800ead6:	2800      	cmp	r0, #0
 800ead8:	f43f aee0 	beq.w	800e89c <_strtod_l+0x43c>
 800eadc:	2101      	movs	r1, #1
 800eade:	4648      	mov	r0, r9
 800eae0:	f001 fec0 	bl	8010864 <__i2b>
 800eae4:	4680      	mov	r8, r0
 800eae6:	2800      	cmp	r0, #0
 800eae8:	f43f aed8 	beq.w	800e89c <_strtod_l+0x43c>
 800eaec:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800eaee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eaf0:	2e00      	cmp	r6, #0
 800eaf2:	bfab      	itete	ge
 800eaf4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800eaf6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800eaf8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800eafa:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800eafc:	bfac      	ite	ge
 800eafe:	18f7      	addge	r7, r6, r3
 800eb00:	1b9d      	sublt	r5, r3, r6
 800eb02:	9b04      	ldr	r3, [sp, #16]
 800eb04:	1af6      	subs	r6, r6, r3
 800eb06:	4416      	add	r6, r2
 800eb08:	4b63      	ldr	r3, [pc, #396]	; (800ec98 <_strtod_l+0x838>)
 800eb0a:	3e01      	subs	r6, #1
 800eb0c:	429e      	cmp	r6, r3
 800eb0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb12:	f280 80af 	bge.w	800ec74 <_strtod_l+0x814>
 800eb16:	1b9b      	subs	r3, r3, r6
 800eb18:	2b1f      	cmp	r3, #31
 800eb1a:	eba2 0203 	sub.w	r2, r2, r3
 800eb1e:	f04f 0101 	mov.w	r1, #1
 800eb22:	f300 809b 	bgt.w	800ec5c <_strtod_l+0x7fc>
 800eb26:	fa01 f303 	lsl.w	r3, r1, r3
 800eb2a:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	930a      	str	r3, [sp, #40]	; 0x28
 800eb30:	18be      	adds	r6, r7, r2
 800eb32:	9b04      	ldr	r3, [sp, #16]
 800eb34:	42b7      	cmp	r7, r6
 800eb36:	4415      	add	r5, r2
 800eb38:	441d      	add	r5, r3
 800eb3a:	463b      	mov	r3, r7
 800eb3c:	bfa8      	it	ge
 800eb3e:	4633      	movge	r3, r6
 800eb40:	42ab      	cmp	r3, r5
 800eb42:	bfa8      	it	ge
 800eb44:	462b      	movge	r3, r5
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	bfc2      	ittt	gt
 800eb4a:	1af6      	subgt	r6, r6, r3
 800eb4c:	1aed      	subgt	r5, r5, r3
 800eb4e:	1aff      	subgt	r7, r7, r3
 800eb50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eb52:	b1bb      	cbz	r3, 800eb84 <_strtod_l+0x724>
 800eb54:	4641      	mov	r1, r8
 800eb56:	461a      	mov	r2, r3
 800eb58:	4648      	mov	r0, r9
 800eb5a:	f001 ff23 	bl	80109a4 <__pow5mult>
 800eb5e:	4680      	mov	r8, r0
 800eb60:	2800      	cmp	r0, #0
 800eb62:	f43f ae9b 	beq.w	800e89c <_strtod_l+0x43c>
 800eb66:	4601      	mov	r1, r0
 800eb68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800eb6a:	4648      	mov	r0, r9
 800eb6c:	f001 fe83 	bl	8010876 <__multiply>
 800eb70:	900c      	str	r0, [sp, #48]	; 0x30
 800eb72:	2800      	cmp	r0, #0
 800eb74:	f43f ae92 	beq.w	800e89c <_strtod_l+0x43c>
 800eb78:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eb7a:	4648      	mov	r0, r9
 800eb7c:	f001 fd94 	bl	80106a8 <_Bfree>
 800eb80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb82:	931c      	str	r3, [sp, #112]	; 0x70
 800eb84:	2e00      	cmp	r6, #0
 800eb86:	dc7a      	bgt.n	800ec7e <_strtod_l+0x81e>
 800eb88:	9b06      	ldr	r3, [sp, #24]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	dd08      	ble.n	800eba0 <_strtod_l+0x740>
 800eb8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800eb90:	9905      	ldr	r1, [sp, #20]
 800eb92:	4648      	mov	r0, r9
 800eb94:	f001 ff06 	bl	80109a4 <__pow5mult>
 800eb98:	9005      	str	r0, [sp, #20]
 800eb9a:	2800      	cmp	r0, #0
 800eb9c:	f43f ae7e 	beq.w	800e89c <_strtod_l+0x43c>
 800eba0:	2d00      	cmp	r5, #0
 800eba2:	dd08      	ble.n	800ebb6 <_strtod_l+0x756>
 800eba4:	462a      	mov	r2, r5
 800eba6:	9905      	ldr	r1, [sp, #20]
 800eba8:	4648      	mov	r0, r9
 800ebaa:	f001 ff49 	bl	8010a40 <__lshift>
 800ebae:	9005      	str	r0, [sp, #20]
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	f43f ae73 	beq.w	800e89c <_strtod_l+0x43c>
 800ebb6:	2f00      	cmp	r7, #0
 800ebb8:	dd08      	ble.n	800ebcc <_strtod_l+0x76c>
 800ebba:	4641      	mov	r1, r8
 800ebbc:	463a      	mov	r2, r7
 800ebbe:	4648      	mov	r0, r9
 800ebc0:	f001 ff3e 	bl	8010a40 <__lshift>
 800ebc4:	4680      	mov	r8, r0
 800ebc6:	2800      	cmp	r0, #0
 800ebc8:	f43f ae68 	beq.w	800e89c <_strtod_l+0x43c>
 800ebcc:	9a05      	ldr	r2, [sp, #20]
 800ebce:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ebd0:	4648      	mov	r0, r9
 800ebd2:	f001 ffa3 	bl	8010b1c <__mdiff>
 800ebd6:	4604      	mov	r4, r0
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	f43f ae5f 	beq.w	800e89c <_strtod_l+0x43c>
 800ebde:	68c3      	ldr	r3, [r0, #12]
 800ebe0:	930c      	str	r3, [sp, #48]	; 0x30
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	60c3      	str	r3, [r0, #12]
 800ebe6:	4641      	mov	r1, r8
 800ebe8:	f001 ff7e 	bl	8010ae8 <__mcmp>
 800ebec:	2800      	cmp	r0, #0
 800ebee:	da55      	bge.n	800ec9c <_strtod_l+0x83c>
 800ebf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebf2:	b9e3      	cbnz	r3, 800ec2e <_strtod_l+0x7ce>
 800ebf4:	f1ba 0f00 	cmp.w	sl, #0
 800ebf8:	d119      	bne.n	800ec2e <_strtod_l+0x7ce>
 800ebfa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebfe:	b9b3      	cbnz	r3, 800ec2e <_strtod_l+0x7ce>
 800ec00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec04:	0d1b      	lsrs	r3, r3, #20
 800ec06:	051b      	lsls	r3, r3, #20
 800ec08:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ec0c:	d90f      	bls.n	800ec2e <_strtod_l+0x7ce>
 800ec0e:	6963      	ldr	r3, [r4, #20]
 800ec10:	b913      	cbnz	r3, 800ec18 <_strtod_l+0x7b8>
 800ec12:	6923      	ldr	r3, [r4, #16]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	dd0a      	ble.n	800ec2e <_strtod_l+0x7ce>
 800ec18:	4621      	mov	r1, r4
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	4648      	mov	r0, r9
 800ec1e:	f001 ff0f 	bl	8010a40 <__lshift>
 800ec22:	4641      	mov	r1, r8
 800ec24:	4604      	mov	r4, r0
 800ec26:	f001 ff5f 	bl	8010ae8 <__mcmp>
 800ec2a:	2800      	cmp	r0, #0
 800ec2c:	dc67      	bgt.n	800ecfe <_strtod_l+0x89e>
 800ec2e:	9b04      	ldr	r3, [sp, #16]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d171      	bne.n	800ed18 <_strtod_l+0x8b8>
 800ec34:	e63d      	b.n	800e8b2 <_strtod_l+0x452>
 800ec36:	f018 0f01 	tst.w	r8, #1
 800ec3a:	d004      	beq.n	800ec46 <_strtod_l+0x7e6>
 800ec3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec40:	f7f1 fcda 	bl	80005f8 <__aeabi_dmul>
 800ec44:	2301      	movs	r3, #1
 800ec46:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ec4a:	3508      	adds	r5, #8
 800ec4c:	e6e5      	b.n	800ea1a <_strtod_l+0x5ba>
 800ec4e:	f04f 32ff 	mov.w	r2, #4294967295
 800ec52:	fa02 f303 	lsl.w	r3, r2, r3
 800ec56:	ea03 0a0a 	and.w	sl, r3, sl
 800ec5a:	e6ff      	b.n	800ea5c <_strtod_l+0x5fc>
 800ec5c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ec60:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ec64:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ec68:	36e2      	adds	r6, #226	; 0xe2
 800ec6a:	fa01 f306 	lsl.w	r3, r1, r6
 800ec6e:	930a      	str	r3, [sp, #40]	; 0x28
 800ec70:	910f      	str	r1, [sp, #60]	; 0x3c
 800ec72:	e75d      	b.n	800eb30 <_strtod_l+0x6d0>
 800ec74:	2300      	movs	r3, #0
 800ec76:	930a      	str	r3, [sp, #40]	; 0x28
 800ec78:	2301      	movs	r3, #1
 800ec7a:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec7c:	e758      	b.n	800eb30 <_strtod_l+0x6d0>
 800ec7e:	4632      	mov	r2, r6
 800ec80:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ec82:	4648      	mov	r0, r9
 800ec84:	f001 fedc 	bl	8010a40 <__lshift>
 800ec88:	901c      	str	r0, [sp, #112]	; 0x70
 800ec8a:	2800      	cmp	r0, #0
 800ec8c:	f47f af7c 	bne.w	800eb88 <_strtod_l+0x728>
 800ec90:	e604      	b.n	800e89c <_strtod_l+0x43c>
 800ec92:	bf00      	nop
 800ec94:	08011b18 	.word	0x08011b18
 800ec98:	fffffc02 	.word	0xfffffc02
 800ec9c:	465d      	mov	r5, fp
 800ec9e:	f040 8086 	bne.w	800edae <_strtod_l+0x94e>
 800eca2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800eca4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eca8:	b32a      	cbz	r2, 800ecf6 <_strtod_l+0x896>
 800ecaa:	4aaf      	ldr	r2, [pc, #700]	; (800ef68 <_strtod_l+0xb08>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d153      	bne.n	800ed58 <_strtod_l+0x8f8>
 800ecb0:	9b04      	ldr	r3, [sp, #16]
 800ecb2:	4650      	mov	r0, sl
 800ecb4:	b1d3      	cbz	r3, 800ecec <_strtod_l+0x88c>
 800ecb6:	4aad      	ldr	r2, [pc, #692]	; (800ef6c <_strtod_l+0xb0c>)
 800ecb8:	402a      	ands	r2, r5
 800ecba:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ecbe:	f04f 31ff 	mov.w	r1, #4294967295
 800ecc2:	d816      	bhi.n	800ecf2 <_strtod_l+0x892>
 800ecc4:	0d12      	lsrs	r2, r2, #20
 800ecc6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ecca:	fa01 f303 	lsl.w	r3, r1, r3
 800ecce:	4298      	cmp	r0, r3
 800ecd0:	d142      	bne.n	800ed58 <_strtod_l+0x8f8>
 800ecd2:	4ba7      	ldr	r3, [pc, #668]	; (800ef70 <_strtod_l+0xb10>)
 800ecd4:	429d      	cmp	r5, r3
 800ecd6:	d102      	bne.n	800ecde <_strtod_l+0x87e>
 800ecd8:	3001      	adds	r0, #1
 800ecda:	f43f addf 	beq.w	800e89c <_strtod_l+0x43c>
 800ecde:	4ba3      	ldr	r3, [pc, #652]	; (800ef6c <_strtod_l+0xb0c>)
 800ece0:	402b      	ands	r3, r5
 800ece2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ece6:	f04f 0a00 	mov.w	sl, #0
 800ecea:	e7a0      	b.n	800ec2e <_strtod_l+0x7ce>
 800ecec:	f04f 33ff 	mov.w	r3, #4294967295
 800ecf0:	e7ed      	b.n	800ecce <_strtod_l+0x86e>
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	e7eb      	b.n	800ecce <_strtod_l+0x86e>
 800ecf6:	bb7b      	cbnz	r3, 800ed58 <_strtod_l+0x8f8>
 800ecf8:	f1ba 0f00 	cmp.w	sl, #0
 800ecfc:	d12c      	bne.n	800ed58 <_strtod_l+0x8f8>
 800ecfe:	9904      	ldr	r1, [sp, #16]
 800ed00:	4a9a      	ldr	r2, [pc, #616]	; (800ef6c <_strtod_l+0xb0c>)
 800ed02:	465b      	mov	r3, fp
 800ed04:	b1f1      	cbz	r1, 800ed44 <_strtod_l+0x8e4>
 800ed06:	ea02 010b 	and.w	r1, r2, fp
 800ed0a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ed0e:	dc19      	bgt.n	800ed44 <_strtod_l+0x8e4>
 800ed10:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ed14:	f77f ae5b 	ble.w	800e9ce <_strtod_l+0x56e>
 800ed18:	4a96      	ldr	r2, [pc, #600]	; (800ef74 <_strtod_l+0xb14>)
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ed20:	4650      	mov	r0, sl
 800ed22:	4659      	mov	r1, fp
 800ed24:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ed28:	f7f1 fc66 	bl	80005f8 <__aeabi_dmul>
 800ed2c:	4682      	mov	sl, r0
 800ed2e:	468b      	mov	fp, r1
 800ed30:	2900      	cmp	r1, #0
 800ed32:	f47f adbe 	bne.w	800e8b2 <_strtod_l+0x452>
 800ed36:	2800      	cmp	r0, #0
 800ed38:	f47f adbb 	bne.w	800e8b2 <_strtod_l+0x452>
 800ed3c:	2322      	movs	r3, #34	; 0x22
 800ed3e:	f8c9 3000 	str.w	r3, [r9]
 800ed42:	e5b6      	b.n	800e8b2 <_strtod_l+0x452>
 800ed44:	4013      	ands	r3, r2
 800ed46:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ed4a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ed4e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ed52:	f04f 3aff 	mov.w	sl, #4294967295
 800ed56:	e76a      	b.n	800ec2e <_strtod_l+0x7ce>
 800ed58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed5a:	b193      	cbz	r3, 800ed82 <_strtod_l+0x922>
 800ed5c:	422b      	tst	r3, r5
 800ed5e:	f43f af66 	beq.w	800ec2e <_strtod_l+0x7ce>
 800ed62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed64:	9a04      	ldr	r2, [sp, #16]
 800ed66:	4650      	mov	r0, sl
 800ed68:	4659      	mov	r1, fp
 800ed6a:	b173      	cbz	r3, 800ed8a <_strtod_l+0x92a>
 800ed6c:	f7ff fb5a 	bl	800e424 <sulp>
 800ed70:	4602      	mov	r2, r0
 800ed72:	460b      	mov	r3, r1
 800ed74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ed78:	f7f1 fa88 	bl	800028c <__adddf3>
 800ed7c:	4682      	mov	sl, r0
 800ed7e:	468b      	mov	fp, r1
 800ed80:	e755      	b.n	800ec2e <_strtod_l+0x7ce>
 800ed82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ed84:	ea13 0f0a 	tst.w	r3, sl
 800ed88:	e7e9      	b.n	800ed5e <_strtod_l+0x8fe>
 800ed8a:	f7ff fb4b 	bl	800e424 <sulp>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	460b      	mov	r3, r1
 800ed92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ed96:	f7f1 fa77 	bl	8000288 <__aeabi_dsub>
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	4682      	mov	sl, r0
 800eda0:	468b      	mov	fp, r1
 800eda2:	f7f1 fe91 	bl	8000ac8 <__aeabi_dcmpeq>
 800eda6:	2800      	cmp	r0, #0
 800eda8:	f47f ae11 	bne.w	800e9ce <_strtod_l+0x56e>
 800edac:	e73f      	b.n	800ec2e <_strtod_l+0x7ce>
 800edae:	4641      	mov	r1, r8
 800edb0:	4620      	mov	r0, r4
 800edb2:	f001 ffd6 	bl	8010d62 <__ratio>
 800edb6:	ec57 6b10 	vmov	r6, r7, d0
 800edba:	2200      	movs	r2, #0
 800edbc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800edc0:	ee10 0a10 	vmov	r0, s0
 800edc4:	4639      	mov	r1, r7
 800edc6:	f7f1 fe93 	bl	8000af0 <__aeabi_dcmple>
 800edca:	2800      	cmp	r0, #0
 800edcc:	d077      	beq.n	800eebe <_strtod_l+0xa5e>
 800edce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d04a      	beq.n	800ee6a <_strtod_l+0xa0a>
 800edd4:	4b68      	ldr	r3, [pc, #416]	; (800ef78 <_strtod_l+0xb18>)
 800edd6:	2200      	movs	r2, #0
 800edd8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800eddc:	4f66      	ldr	r7, [pc, #408]	; (800ef78 <_strtod_l+0xb18>)
 800edde:	2600      	movs	r6, #0
 800ede0:	4b62      	ldr	r3, [pc, #392]	; (800ef6c <_strtod_l+0xb0c>)
 800ede2:	402b      	ands	r3, r5
 800ede4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ede6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ede8:	4b64      	ldr	r3, [pc, #400]	; (800ef7c <_strtod_l+0xb1c>)
 800edea:	429a      	cmp	r2, r3
 800edec:	f040 80ce 	bne.w	800ef8c <_strtod_l+0xb2c>
 800edf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800edf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800edf8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800edfc:	ec4b ab10 	vmov	d0, sl, fp
 800ee00:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ee04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ee08:	f001 fee6 	bl	8010bd8 <__ulp>
 800ee0c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee10:	ec53 2b10 	vmov	r2, r3, d0
 800ee14:	f7f1 fbf0 	bl	80005f8 <__aeabi_dmul>
 800ee18:	4652      	mov	r2, sl
 800ee1a:	465b      	mov	r3, fp
 800ee1c:	f7f1 fa36 	bl	800028c <__adddf3>
 800ee20:	460b      	mov	r3, r1
 800ee22:	4952      	ldr	r1, [pc, #328]	; (800ef6c <_strtod_l+0xb0c>)
 800ee24:	4a56      	ldr	r2, [pc, #344]	; (800ef80 <_strtod_l+0xb20>)
 800ee26:	4019      	ands	r1, r3
 800ee28:	4291      	cmp	r1, r2
 800ee2a:	4682      	mov	sl, r0
 800ee2c:	d95b      	bls.n	800eee6 <_strtod_l+0xa86>
 800ee2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee30:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d103      	bne.n	800ee40 <_strtod_l+0x9e0>
 800ee38:	9b08      	ldr	r3, [sp, #32]
 800ee3a:	3301      	adds	r3, #1
 800ee3c:	f43f ad2e 	beq.w	800e89c <_strtod_l+0x43c>
 800ee40:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800ef70 <_strtod_l+0xb10>
 800ee44:	f04f 3aff 	mov.w	sl, #4294967295
 800ee48:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ee4a:	4648      	mov	r0, r9
 800ee4c:	f001 fc2c 	bl	80106a8 <_Bfree>
 800ee50:	9905      	ldr	r1, [sp, #20]
 800ee52:	4648      	mov	r0, r9
 800ee54:	f001 fc28 	bl	80106a8 <_Bfree>
 800ee58:	4641      	mov	r1, r8
 800ee5a:	4648      	mov	r0, r9
 800ee5c:	f001 fc24 	bl	80106a8 <_Bfree>
 800ee60:	4621      	mov	r1, r4
 800ee62:	4648      	mov	r0, r9
 800ee64:	f001 fc20 	bl	80106a8 <_Bfree>
 800ee68:	e619      	b.n	800ea9e <_strtod_l+0x63e>
 800ee6a:	f1ba 0f00 	cmp.w	sl, #0
 800ee6e:	d11a      	bne.n	800eea6 <_strtod_l+0xa46>
 800ee70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee74:	b9eb      	cbnz	r3, 800eeb2 <_strtod_l+0xa52>
 800ee76:	2200      	movs	r2, #0
 800ee78:	4b3f      	ldr	r3, [pc, #252]	; (800ef78 <_strtod_l+0xb18>)
 800ee7a:	4630      	mov	r0, r6
 800ee7c:	4639      	mov	r1, r7
 800ee7e:	f7f1 fe2d 	bl	8000adc <__aeabi_dcmplt>
 800ee82:	b9c8      	cbnz	r0, 800eeb8 <_strtod_l+0xa58>
 800ee84:	4630      	mov	r0, r6
 800ee86:	4639      	mov	r1, r7
 800ee88:	2200      	movs	r2, #0
 800ee8a:	4b3e      	ldr	r3, [pc, #248]	; (800ef84 <_strtod_l+0xb24>)
 800ee8c:	f7f1 fbb4 	bl	80005f8 <__aeabi_dmul>
 800ee90:	4606      	mov	r6, r0
 800ee92:	460f      	mov	r7, r1
 800ee94:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ee98:	9618      	str	r6, [sp, #96]	; 0x60
 800ee9a:	9319      	str	r3, [sp, #100]	; 0x64
 800ee9c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800eea0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800eea4:	e79c      	b.n	800ede0 <_strtod_l+0x980>
 800eea6:	f1ba 0f01 	cmp.w	sl, #1
 800eeaa:	d102      	bne.n	800eeb2 <_strtod_l+0xa52>
 800eeac:	2d00      	cmp	r5, #0
 800eeae:	f43f ad8e 	beq.w	800e9ce <_strtod_l+0x56e>
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	4b34      	ldr	r3, [pc, #208]	; (800ef88 <_strtod_l+0xb28>)
 800eeb6:	e78f      	b.n	800edd8 <_strtod_l+0x978>
 800eeb8:	2600      	movs	r6, #0
 800eeba:	4f32      	ldr	r7, [pc, #200]	; (800ef84 <_strtod_l+0xb24>)
 800eebc:	e7ea      	b.n	800ee94 <_strtod_l+0xa34>
 800eebe:	4b31      	ldr	r3, [pc, #196]	; (800ef84 <_strtod_l+0xb24>)
 800eec0:	4630      	mov	r0, r6
 800eec2:	4639      	mov	r1, r7
 800eec4:	2200      	movs	r2, #0
 800eec6:	f7f1 fb97 	bl	80005f8 <__aeabi_dmul>
 800eeca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eecc:	4606      	mov	r6, r0
 800eece:	460f      	mov	r7, r1
 800eed0:	b933      	cbnz	r3, 800eee0 <_strtod_l+0xa80>
 800eed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eed6:	9010      	str	r0, [sp, #64]	; 0x40
 800eed8:	9311      	str	r3, [sp, #68]	; 0x44
 800eeda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eede:	e7df      	b.n	800eea0 <_strtod_l+0xa40>
 800eee0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800eee4:	e7f9      	b.n	800eeda <_strtod_l+0xa7a>
 800eee6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800eeea:	9b04      	ldr	r3, [sp, #16]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d1ab      	bne.n	800ee48 <_strtod_l+0x9e8>
 800eef0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eef4:	0d1b      	lsrs	r3, r3, #20
 800eef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800eef8:	051b      	lsls	r3, r3, #20
 800eefa:	429a      	cmp	r2, r3
 800eefc:	465d      	mov	r5, fp
 800eefe:	d1a3      	bne.n	800ee48 <_strtod_l+0x9e8>
 800ef00:	4639      	mov	r1, r7
 800ef02:	4630      	mov	r0, r6
 800ef04:	f7f1 fe28 	bl	8000b58 <__aeabi_d2iz>
 800ef08:	f7f1 fb0c 	bl	8000524 <__aeabi_i2d>
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	4602      	mov	r2, r0
 800ef10:	4639      	mov	r1, r7
 800ef12:	4630      	mov	r0, r6
 800ef14:	f7f1 f9b8 	bl	8000288 <__aeabi_dsub>
 800ef18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	460f      	mov	r7, r1
 800ef1e:	b933      	cbnz	r3, 800ef2e <_strtod_l+0xace>
 800ef20:	f1ba 0f00 	cmp.w	sl, #0
 800ef24:	d103      	bne.n	800ef2e <_strtod_l+0xace>
 800ef26:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ef2a:	2d00      	cmp	r5, #0
 800ef2c:	d06d      	beq.n	800f00a <_strtod_l+0xbaa>
 800ef2e:	a30a      	add	r3, pc, #40	; (adr r3, 800ef58 <_strtod_l+0xaf8>)
 800ef30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef34:	4630      	mov	r0, r6
 800ef36:	4639      	mov	r1, r7
 800ef38:	f7f1 fdd0 	bl	8000adc <__aeabi_dcmplt>
 800ef3c:	2800      	cmp	r0, #0
 800ef3e:	f47f acb8 	bne.w	800e8b2 <_strtod_l+0x452>
 800ef42:	a307      	add	r3, pc, #28	; (adr r3, 800ef60 <_strtod_l+0xb00>)
 800ef44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef48:	4630      	mov	r0, r6
 800ef4a:	4639      	mov	r1, r7
 800ef4c:	f7f1 fde4 	bl	8000b18 <__aeabi_dcmpgt>
 800ef50:	2800      	cmp	r0, #0
 800ef52:	f43f af79 	beq.w	800ee48 <_strtod_l+0x9e8>
 800ef56:	e4ac      	b.n	800e8b2 <_strtod_l+0x452>
 800ef58:	94a03595 	.word	0x94a03595
 800ef5c:	3fdfffff 	.word	0x3fdfffff
 800ef60:	35afe535 	.word	0x35afe535
 800ef64:	3fe00000 	.word	0x3fe00000
 800ef68:	000fffff 	.word	0x000fffff
 800ef6c:	7ff00000 	.word	0x7ff00000
 800ef70:	7fefffff 	.word	0x7fefffff
 800ef74:	39500000 	.word	0x39500000
 800ef78:	3ff00000 	.word	0x3ff00000
 800ef7c:	7fe00000 	.word	0x7fe00000
 800ef80:	7c9fffff 	.word	0x7c9fffff
 800ef84:	3fe00000 	.word	0x3fe00000
 800ef88:	bff00000 	.word	0xbff00000
 800ef8c:	9b04      	ldr	r3, [sp, #16]
 800ef8e:	b333      	cbz	r3, 800efde <_strtod_l+0xb7e>
 800ef90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef92:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ef96:	d822      	bhi.n	800efde <_strtod_l+0xb7e>
 800ef98:	a327      	add	r3, pc, #156	; (adr r3, 800f038 <_strtod_l+0xbd8>)
 800ef9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9e:	4630      	mov	r0, r6
 800efa0:	4639      	mov	r1, r7
 800efa2:	f7f1 fda5 	bl	8000af0 <__aeabi_dcmple>
 800efa6:	b1a0      	cbz	r0, 800efd2 <_strtod_l+0xb72>
 800efa8:	4639      	mov	r1, r7
 800efaa:	4630      	mov	r0, r6
 800efac:	f7f1 fdfc 	bl	8000ba8 <__aeabi_d2uiz>
 800efb0:	2800      	cmp	r0, #0
 800efb2:	bf08      	it	eq
 800efb4:	2001      	moveq	r0, #1
 800efb6:	f7f1 faa5 	bl	8000504 <__aeabi_ui2d>
 800efba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efbc:	4606      	mov	r6, r0
 800efbe:	460f      	mov	r7, r1
 800efc0:	bb03      	cbnz	r3, 800f004 <_strtod_l+0xba4>
 800efc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efc6:	9012      	str	r0, [sp, #72]	; 0x48
 800efc8:	9313      	str	r3, [sp, #76]	; 0x4c
 800efca:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800efce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800efd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efd4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800efd6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800efda:	1a9b      	subs	r3, r3, r2
 800efdc:	930b      	str	r3, [sp, #44]	; 0x2c
 800efde:	ed9d 0b08 	vldr	d0, [sp, #32]
 800efe2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800efe6:	f001 fdf7 	bl	8010bd8 <__ulp>
 800efea:	4650      	mov	r0, sl
 800efec:	ec53 2b10 	vmov	r2, r3, d0
 800eff0:	4659      	mov	r1, fp
 800eff2:	f7f1 fb01 	bl	80005f8 <__aeabi_dmul>
 800eff6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800effa:	f7f1 f947 	bl	800028c <__adddf3>
 800effe:	4682      	mov	sl, r0
 800f000:	468b      	mov	fp, r1
 800f002:	e772      	b.n	800eeea <_strtod_l+0xa8a>
 800f004:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f008:	e7df      	b.n	800efca <_strtod_l+0xb6a>
 800f00a:	a30d      	add	r3, pc, #52	; (adr r3, 800f040 <_strtod_l+0xbe0>)
 800f00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f010:	f7f1 fd64 	bl	8000adc <__aeabi_dcmplt>
 800f014:	e79c      	b.n	800ef50 <_strtod_l+0xaf0>
 800f016:	2300      	movs	r3, #0
 800f018:	930d      	str	r3, [sp, #52]	; 0x34
 800f01a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f01c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f01e:	6013      	str	r3, [r2, #0]
 800f020:	f7ff ba61 	b.w	800e4e6 <_strtod_l+0x86>
 800f024:	2b65      	cmp	r3, #101	; 0x65
 800f026:	f04f 0200 	mov.w	r2, #0
 800f02a:	f43f ab4e 	beq.w	800e6ca <_strtod_l+0x26a>
 800f02e:	2101      	movs	r1, #1
 800f030:	4614      	mov	r4, r2
 800f032:	9104      	str	r1, [sp, #16]
 800f034:	f7ff bacb 	b.w	800e5ce <_strtod_l+0x16e>
 800f038:	ffc00000 	.word	0xffc00000
 800f03c:	41dfffff 	.word	0x41dfffff
 800f040:	94a03595 	.word	0x94a03595
 800f044:	3fcfffff 	.word	0x3fcfffff

0800f048 <_strtod_r>:
 800f048:	4b05      	ldr	r3, [pc, #20]	; (800f060 <_strtod_r+0x18>)
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	b410      	push	{r4}
 800f04e:	6a1b      	ldr	r3, [r3, #32]
 800f050:	4c04      	ldr	r4, [pc, #16]	; (800f064 <_strtod_r+0x1c>)
 800f052:	2b00      	cmp	r3, #0
 800f054:	bf08      	it	eq
 800f056:	4623      	moveq	r3, r4
 800f058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f05c:	f7ff ba00 	b.w	800e460 <_strtod_l>
 800f060:	20000190 	.word	0x20000190
 800f064:	200001f4 	.word	0x200001f4

0800f068 <_strtol_l.isra.0>:
 800f068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f06c:	4680      	mov	r8, r0
 800f06e:	4689      	mov	r9, r1
 800f070:	4692      	mov	sl, r2
 800f072:	461e      	mov	r6, r3
 800f074:	460f      	mov	r7, r1
 800f076:	463d      	mov	r5, r7
 800f078:	9808      	ldr	r0, [sp, #32]
 800f07a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f07e:	f001 fab7 	bl	80105f0 <__locale_ctype_ptr_l>
 800f082:	4420      	add	r0, r4
 800f084:	7843      	ldrb	r3, [r0, #1]
 800f086:	f013 0308 	ands.w	r3, r3, #8
 800f08a:	d132      	bne.n	800f0f2 <_strtol_l.isra.0+0x8a>
 800f08c:	2c2d      	cmp	r4, #45	; 0x2d
 800f08e:	d132      	bne.n	800f0f6 <_strtol_l.isra.0+0x8e>
 800f090:	787c      	ldrb	r4, [r7, #1]
 800f092:	1cbd      	adds	r5, r7, #2
 800f094:	2201      	movs	r2, #1
 800f096:	2e00      	cmp	r6, #0
 800f098:	d05d      	beq.n	800f156 <_strtol_l.isra.0+0xee>
 800f09a:	2e10      	cmp	r6, #16
 800f09c:	d109      	bne.n	800f0b2 <_strtol_l.isra.0+0x4a>
 800f09e:	2c30      	cmp	r4, #48	; 0x30
 800f0a0:	d107      	bne.n	800f0b2 <_strtol_l.isra.0+0x4a>
 800f0a2:	782b      	ldrb	r3, [r5, #0]
 800f0a4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f0a8:	2b58      	cmp	r3, #88	; 0x58
 800f0aa:	d14f      	bne.n	800f14c <_strtol_l.isra.0+0xe4>
 800f0ac:	786c      	ldrb	r4, [r5, #1]
 800f0ae:	2610      	movs	r6, #16
 800f0b0:	3502      	adds	r5, #2
 800f0b2:	2a00      	cmp	r2, #0
 800f0b4:	bf14      	ite	ne
 800f0b6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f0ba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f0be:	2700      	movs	r7, #0
 800f0c0:	fbb1 fcf6 	udiv	ip, r1, r6
 800f0c4:	4638      	mov	r0, r7
 800f0c6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f0ca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f0ce:	2b09      	cmp	r3, #9
 800f0d0:	d817      	bhi.n	800f102 <_strtol_l.isra.0+0x9a>
 800f0d2:	461c      	mov	r4, r3
 800f0d4:	42a6      	cmp	r6, r4
 800f0d6:	dd23      	ble.n	800f120 <_strtol_l.isra.0+0xb8>
 800f0d8:	1c7b      	adds	r3, r7, #1
 800f0da:	d007      	beq.n	800f0ec <_strtol_l.isra.0+0x84>
 800f0dc:	4584      	cmp	ip, r0
 800f0de:	d31c      	bcc.n	800f11a <_strtol_l.isra.0+0xb2>
 800f0e0:	d101      	bne.n	800f0e6 <_strtol_l.isra.0+0x7e>
 800f0e2:	45a6      	cmp	lr, r4
 800f0e4:	db19      	blt.n	800f11a <_strtol_l.isra.0+0xb2>
 800f0e6:	fb00 4006 	mla	r0, r0, r6, r4
 800f0ea:	2701      	movs	r7, #1
 800f0ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0f0:	e7eb      	b.n	800f0ca <_strtol_l.isra.0+0x62>
 800f0f2:	462f      	mov	r7, r5
 800f0f4:	e7bf      	b.n	800f076 <_strtol_l.isra.0+0xe>
 800f0f6:	2c2b      	cmp	r4, #43	; 0x2b
 800f0f8:	bf04      	itt	eq
 800f0fa:	1cbd      	addeq	r5, r7, #2
 800f0fc:	787c      	ldrbeq	r4, [r7, #1]
 800f0fe:	461a      	mov	r2, r3
 800f100:	e7c9      	b.n	800f096 <_strtol_l.isra.0+0x2e>
 800f102:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f106:	2b19      	cmp	r3, #25
 800f108:	d801      	bhi.n	800f10e <_strtol_l.isra.0+0xa6>
 800f10a:	3c37      	subs	r4, #55	; 0x37
 800f10c:	e7e2      	b.n	800f0d4 <_strtol_l.isra.0+0x6c>
 800f10e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f112:	2b19      	cmp	r3, #25
 800f114:	d804      	bhi.n	800f120 <_strtol_l.isra.0+0xb8>
 800f116:	3c57      	subs	r4, #87	; 0x57
 800f118:	e7dc      	b.n	800f0d4 <_strtol_l.isra.0+0x6c>
 800f11a:	f04f 37ff 	mov.w	r7, #4294967295
 800f11e:	e7e5      	b.n	800f0ec <_strtol_l.isra.0+0x84>
 800f120:	1c7b      	adds	r3, r7, #1
 800f122:	d108      	bne.n	800f136 <_strtol_l.isra.0+0xce>
 800f124:	2322      	movs	r3, #34	; 0x22
 800f126:	f8c8 3000 	str.w	r3, [r8]
 800f12a:	4608      	mov	r0, r1
 800f12c:	f1ba 0f00 	cmp.w	sl, #0
 800f130:	d107      	bne.n	800f142 <_strtol_l.isra.0+0xda>
 800f132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f136:	b102      	cbz	r2, 800f13a <_strtol_l.isra.0+0xd2>
 800f138:	4240      	negs	r0, r0
 800f13a:	f1ba 0f00 	cmp.w	sl, #0
 800f13e:	d0f8      	beq.n	800f132 <_strtol_l.isra.0+0xca>
 800f140:	b10f      	cbz	r7, 800f146 <_strtol_l.isra.0+0xde>
 800f142:	f105 39ff 	add.w	r9, r5, #4294967295
 800f146:	f8ca 9000 	str.w	r9, [sl]
 800f14a:	e7f2      	b.n	800f132 <_strtol_l.isra.0+0xca>
 800f14c:	2430      	movs	r4, #48	; 0x30
 800f14e:	2e00      	cmp	r6, #0
 800f150:	d1af      	bne.n	800f0b2 <_strtol_l.isra.0+0x4a>
 800f152:	2608      	movs	r6, #8
 800f154:	e7ad      	b.n	800f0b2 <_strtol_l.isra.0+0x4a>
 800f156:	2c30      	cmp	r4, #48	; 0x30
 800f158:	d0a3      	beq.n	800f0a2 <_strtol_l.isra.0+0x3a>
 800f15a:	260a      	movs	r6, #10
 800f15c:	e7a9      	b.n	800f0b2 <_strtol_l.isra.0+0x4a>
	...

0800f160 <_strtol_r>:
 800f160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f162:	4c06      	ldr	r4, [pc, #24]	; (800f17c <_strtol_r+0x1c>)
 800f164:	4d06      	ldr	r5, [pc, #24]	; (800f180 <_strtol_r+0x20>)
 800f166:	6824      	ldr	r4, [r4, #0]
 800f168:	6a24      	ldr	r4, [r4, #32]
 800f16a:	2c00      	cmp	r4, #0
 800f16c:	bf08      	it	eq
 800f16e:	462c      	moveq	r4, r5
 800f170:	9400      	str	r4, [sp, #0]
 800f172:	f7ff ff79 	bl	800f068 <_strtol_l.isra.0>
 800f176:	b003      	add	sp, #12
 800f178:	bd30      	pop	{r4, r5, pc}
 800f17a:	bf00      	nop
 800f17c:	20000190 	.word	0x20000190
 800f180:	200001f4 	.word	0x200001f4

0800f184 <quorem>:
 800f184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f188:	6903      	ldr	r3, [r0, #16]
 800f18a:	690c      	ldr	r4, [r1, #16]
 800f18c:	42a3      	cmp	r3, r4
 800f18e:	4680      	mov	r8, r0
 800f190:	f2c0 8082 	blt.w	800f298 <quorem+0x114>
 800f194:	3c01      	subs	r4, #1
 800f196:	f101 0714 	add.w	r7, r1, #20
 800f19a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f19e:	f100 0614 	add.w	r6, r0, #20
 800f1a2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f1a6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f1aa:	eb06 030c 	add.w	r3, r6, ip
 800f1ae:	3501      	adds	r5, #1
 800f1b0:	eb07 090c 	add.w	r9, r7, ip
 800f1b4:	9301      	str	r3, [sp, #4]
 800f1b6:	fbb0 f5f5 	udiv	r5, r0, r5
 800f1ba:	b395      	cbz	r5, 800f222 <quorem+0x9e>
 800f1bc:	f04f 0a00 	mov.w	sl, #0
 800f1c0:	4638      	mov	r0, r7
 800f1c2:	46b6      	mov	lr, r6
 800f1c4:	46d3      	mov	fp, sl
 800f1c6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f1ca:	b293      	uxth	r3, r2
 800f1cc:	fb05 a303 	mla	r3, r5, r3, sl
 800f1d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	ebab 0303 	sub.w	r3, fp, r3
 800f1da:	0c12      	lsrs	r2, r2, #16
 800f1dc:	f8de b000 	ldr.w	fp, [lr]
 800f1e0:	fb05 a202 	mla	r2, r5, r2, sl
 800f1e4:	fa13 f38b 	uxtah	r3, r3, fp
 800f1e8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f1ec:	fa1f fb82 	uxth.w	fp, r2
 800f1f0:	f8de 2000 	ldr.w	r2, [lr]
 800f1f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f1f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f202:	4581      	cmp	r9, r0
 800f204:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f208:	f84e 3b04 	str.w	r3, [lr], #4
 800f20c:	d2db      	bcs.n	800f1c6 <quorem+0x42>
 800f20e:	f856 300c 	ldr.w	r3, [r6, ip]
 800f212:	b933      	cbnz	r3, 800f222 <quorem+0x9e>
 800f214:	9b01      	ldr	r3, [sp, #4]
 800f216:	3b04      	subs	r3, #4
 800f218:	429e      	cmp	r6, r3
 800f21a:	461a      	mov	r2, r3
 800f21c:	d330      	bcc.n	800f280 <quorem+0xfc>
 800f21e:	f8c8 4010 	str.w	r4, [r8, #16]
 800f222:	4640      	mov	r0, r8
 800f224:	f001 fc60 	bl	8010ae8 <__mcmp>
 800f228:	2800      	cmp	r0, #0
 800f22a:	db25      	blt.n	800f278 <quorem+0xf4>
 800f22c:	3501      	adds	r5, #1
 800f22e:	4630      	mov	r0, r6
 800f230:	f04f 0c00 	mov.w	ip, #0
 800f234:	f857 2b04 	ldr.w	r2, [r7], #4
 800f238:	f8d0 e000 	ldr.w	lr, [r0]
 800f23c:	b293      	uxth	r3, r2
 800f23e:	ebac 0303 	sub.w	r3, ip, r3
 800f242:	0c12      	lsrs	r2, r2, #16
 800f244:	fa13 f38e 	uxtah	r3, r3, lr
 800f248:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f24c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f250:	b29b      	uxth	r3, r3
 800f252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f256:	45b9      	cmp	r9, r7
 800f258:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f25c:	f840 3b04 	str.w	r3, [r0], #4
 800f260:	d2e8      	bcs.n	800f234 <quorem+0xb0>
 800f262:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f266:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f26a:	b92a      	cbnz	r2, 800f278 <quorem+0xf4>
 800f26c:	3b04      	subs	r3, #4
 800f26e:	429e      	cmp	r6, r3
 800f270:	461a      	mov	r2, r3
 800f272:	d30b      	bcc.n	800f28c <quorem+0x108>
 800f274:	f8c8 4010 	str.w	r4, [r8, #16]
 800f278:	4628      	mov	r0, r5
 800f27a:	b003      	add	sp, #12
 800f27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f280:	6812      	ldr	r2, [r2, #0]
 800f282:	3b04      	subs	r3, #4
 800f284:	2a00      	cmp	r2, #0
 800f286:	d1ca      	bne.n	800f21e <quorem+0x9a>
 800f288:	3c01      	subs	r4, #1
 800f28a:	e7c5      	b.n	800f218 <quorem+0x94>
 800f28c:	6812      	ldr	r2, [r2, #0]
 800f28e:	3b04      	subs	r3, #4
 800f290:	2a00      	cmp	r2, #0
 800f292:	d1ef      	bne.n	800f274 <quorem+0xf0>
 800f294:	3c01      	subs	r4, #1
 800f296:	e7ea      	b.n	800f26e <quorem+0xea>
 800f298:	2000      	movs	r0, #0
 800f29a:	e7ee      	b.n	800f27a <quorem+0xf6>
 800f29c:	0000      	movs	r0, r0
	...

0800f2a0 <_dtoa_r>:
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	ec57 6b10 	vmov	r6, r7, d0
 800f2a8:	b097      	sub	sp, #92	; 0x5c
 800f2aa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f2ac:	9106      	str	r1, [sp, #24]
 800f2ae:	4604      	mov	r4, r0
 800f2b0:	920b      	str	r2, [sp, #44]	; 0x2c
 800f2b2:	9312      	str	r3, [sp, #72]	; 0x48
 800f2b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f2b8:	e9cd 6700 	strd	r6, r7, [sp]
 800f2bc:	b93d      	cbnz	r5, 800f2ce <_dtoa_r+0x2e>
 800f2be:	2010      	movs	r0, #16
 800f2c0:	f7fe f958 	bl	800d574 <malloc>
 800f2c4:	6260      	str	r0, [r4, #36]	; 0x24
 800f2c6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f2ca:	6005      	str	r5, [r0, #0]
 800f2cc:	60c5      	str	r5, [r0, #12]
 800f2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2d0:	6819      	ldr	r1, [r3, #0]
 800f2d2:	b151      	cbz	r1, 800f2ea <_dtoa_r+0x4a>
 800f2d4:	685a      	ldr	r2, [r3, #4]
 800f2d6:	604a      	str	r2, [r1, #4]
 800f2d8:	2301      	movs	r3, #1
 800f2da:	4093      	lsls	r3, r2
 800f2dc:	608b      	str	r3, [r1, #8]
 800f2de:	4620      	mov	r0, r4
 800f2e0:	f001 f9e2 	bl	80106a8 <_Bfree>
 800f2e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	601a      	str	r2, [r3, #0]
 800f2ea:	1e3b      	subs	r3, r7, #0
 800f2ec:	bfbb      	ittet	lt
 800f2ee:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f2f2:	9301      	strlt	r3, [sp, #4]
 800f2f4:	2300      	movge	r3, #0
 800f2f6:	2201      	movlt	r2, #1
 800f2f8:	bfac      	ite	ge
 800f2fa:	f8c8 3000 	strge.w	r3, [r8]
 800f2fe:	f8c8 2000 	strlt.w	r2, [r8]
 800f302:	4baf      	ldr	r3, [pc, #700]	; (800f5c0 <_dtoa_r+0x320>)
 800f304:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f308:	ea33 0308 	bics.w	r3, r3, r8
 800f30c:	d114      	bne.n	800f338 <_dtoa_r+0x98>
 800f30e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f310:	f242 730f 	movw	r3, #9999	; 0x270f
 800f314:	6013      	str	r3, [r2, #0]
 800f316:	9b00      	ldr	r3, [sp, #0]
 800f318:	b923      	cbnz	r3, 800f324 <_dtoa_r+0x84>
 800f31a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f31e:	2800      	cmp	r0, #0
 800f320:	f000 8542 	beq.w	800fda8 <_dtoa_r+0xb08>
 800f324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f326:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f5d4 <_dtoa_r+0x334>
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	f000 8544 	beq.w	800fdb8 <_dtoa_r+0xb18>
 800f330:	f10b 0303 	add.w	r3, fp, #3
 800f334:	f000 bd3e 	b.w	800fdb4 <_dtoa_r+0xb14>
 800f338:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f33c:	2200      	movs	r2, #0
 800f33e:	2300      	movs	r3, #0
 800f340:	4630      	mov	r0, r6
 800f342:	4639      	mov	r1, r7
 800f344:	f7f1 fbc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800f348:	4681      	mov	r9, r0
 800f34a:	b168      	cbz	r0, 800f368 <_dtoa_r+0xc8>
 800f34c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f34e:	2301      	movs	r3, #1
 800f350:	6013      	str	r3, [r2, #0]
 800f352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f354:	2b00      	cmp	r3, #0
 800f356:	f000 8524 	beq.w	800fda2 <_dtoa_r+0xb02>
 800f35a:	4b9a      	ldr	r3, [pc, #616]	; (800f5c4 <_dtoa_r+0x324>)
 800f35c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f35e:	f103 3bff 	add.w	fp, r3, #4294967295
 800f362:	6013      	str	r3, [r2, #0]
 800f364:	f000 bd28 	b.w	800fdb8 <_dtoa_r+0xb18>
 800f368:	aa14      	add	r2, sp, #80	; 0x50
 800f36a:	a915      	add	r1, sp, #84	; 0x54
 800f36c:	ec47 6b10 	vmov	d0, r6, r7
 800f370:	4620      	mov	r0, r4
 800f372:	f001 fca7 	bl	8010cc4 <__d2b>
 800f376:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f37a:	9004      	str	r0, [sp, #16]
 800f37c:	2d00      	cmp	r5, #0
 800f37e:	d07c      	beq.n	800f47a <_dtoa_r+0x1da>
 800f380:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f384:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f388:	46b2      	mov	sl, r6
 800f38a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f38e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f392:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f396:	2200      	movs	r2, #0
 800f398:	4b8b      	ldr	r3, [pc, #556]	; (800f5c8 <_dtoa_r+0x328>)
 800f39a:	4650      	mov	r0, sl
 800f39c:	4659      	mov	r1, fp
 800f39e:	f7f0 ff73 	bl	8000288 <__aeabi_dsub>
 800f3a2:	a381      	add	r3, pc, #516	; (adr r3, 800f5a8 <_dtoa_r+0x308>)
 800f3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a8:	f7f1 f926 	bl	80005f8 <__aeabi_dmul>
 800f3ac:	a380      	add	r3, pc, #512	; (adr r3, 800f5b0 <_dtoa_r+0x310>)
 800f3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3b2:	f7f0 ff6b 	bl	800028c <__adddf3>
 800f3b6:	4606      	mov	r6, r0
 800f3b8:	4628      	mov	r0, r5
 800f3ba:	460f      	mov	r7, r1
 800f3bc:	f7f1 f8b2 	bl	8000524 <__aeabi_i2d>
 800f3c0:	a37d      	add	r3, pc, #500	; (adr r3, 800f5b8 <_dtoa_r+0x318>)
 800f3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3c6:	f7f1 f917 	bl	80005f8 <__aeabi_dmul>
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	4630      	mov	r0, r6
 800f3d0:	4639      	mov	r1, r7
 800f3d2:	f7f0 ff5b 	bl	800028c <__adddf3>
 800f3d6:	4606      	mov	r6, r0
 800f3d8:	460f      	mov	r7, r1
 800f3da:	f7f1 fbbd 	bl	8000b58 <__aeabi_d2iz>
 800f3de:	2200      	movs	r2, #0
 800f3e0:	4682      	mov	sl, r0
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	4630      	mov	r0, r6
 800f3e6:	4639      	mov	r1, r7
 800f3e8:	f7f1 fb78 	bl	8000adc <__aeabi_dcmplt>
 800f3ec:	b148      	cbz	r0, 800f402 <_dtoa_r+0x162>
 800f3ee:	4650      	mov	r0, sl
 800f3f0:	f7f1 f898 	bl	8000524 <__aeabi_i2d>
 800f3f4:	4632      	mov	r2, r6
 800f3f6:	463b      	mov	r3, r7
 800f3f8:	f7f1 fb66 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3fc:	b908      	cbnz	r0, 800f402 <_dtoa_r+0x162>
 800f3fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f402:	f1ba 0f16 	cmp.w	sl, #22
 800f406:	d859      	bhi.n	800f4bc <_dtoa_r+0x21c>
 800f408:	4970      	ldr	r1, [pc, #448]	; (800f5cc <_dtoa_r+0x32c>)
 800f40a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f40e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f412:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f416:	f7f1 fb7f 	bl	8000b18 <__aeabi_dcmpgt>
 800f41a:	2800      	cmp	r0, #0
 800f41c:	d050      	beq.n	800f4c0 <_dtoa_r+0x220>
 800f41e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f422:	2300      	movs	r3, #0
 800f424:	930f      	str	r3, [sp, #60]	; 0x3c
 800f426:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f428:	1b5d      	subs	r5, r3, r5
 800f42a:	f1b5 0801 	subs.w	r8, r5, #1
 800f42e:	bf49      	itett	mi
 800f430:	f1c5 0301 	rsbmi	r3, r5, #1
 800f434:	2300      	movpl	r3, #0
 800f436:	9305      	strmi	r3, [sp, #20]
 800f438:	f04f 0800 	movmi.w	r8, #0
 800f43c:	bf58      	it	pl
 800f43e:	9305      	strpl	r3, [sp, #20]
 800f440:	f1ba 0f00 	cmp.w	sl, #0
 800f444:	db3e      	blt.n	800f4c4 <_dtoa_r+0x224>
 800f446:	2300      	movs	r3, #0
 800f448:	44d0      	add	r8, sl
 800f44a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f44e:	9307      	str	r3, [sp, #28]
 800f450:	9b06      	ldr	r3, [sp, #24]
 800f452:	2b09      	cmp	r3, #9
 800f454:	f200 8090 	bhi.w	800f578 <_dtoa_r+0x2d8>
 800f458:	2b05      	cmp	r3, #5
 800f45a:	bfc4      	itt	gt
 800f45c:	3b04      	subgt	r3, #4
 800f45e:	9306      	strgt	r3, [sp, #24]
 800f460:	9b06      	ldr	r3, [sp, #24]
 800f462:	f1a3 0302 	sub.w	r3, r3, #2
 800f466:	bfcc      	ite	gt
 800f468:	2500      	movgt	r5, #0
 800f46a:	2501      	movle	r5, #1
 800f46c:	2b03      	cmp	r3, #3
 800f46e:	f200 808f 	bhi.w	800f590 <_dtoa_r+0x2f0>
 800f472:	e8df f003 	tbb	[pc, r3]
 800f476:	7f7d      	.short	0x7f7d
 800f478:	7131      	.short	0x7131
 800f47a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f47e:	441d      	add	r5, r3
 800f480:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f484:	2820      	cmp	r0, #32
 800f486:	dd13      	ble.n	800f4b0 <_dtoa_r+0x210>
 800f488:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f48c:	9b00      	ldr	r3, [sp, #0]
 800f48e:	fa08 f800 	lsl.w	r8, r8, r0
 800f492:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f496:	fa23 f000 	lsr.w	r0, r3, r0
 800f49a:	ea48 0000 	orr.w	r0, r8, r0
 800f49e:	f7f1 f831 	bl	8000504 <__aeabi_ui2d>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	4682      	mov	sl, r0
 800f4a6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f4aa:	3d01      	subs	r5, #1
 800f4ac:	9313      	str	r3, [sp, #76]	; 0x4c
 800f4ae:	e772      	b.n	800f396 <_dtoa_r+0xf6>
 800f4b0:	9b00      	ldr	r3, [sp, #0]
 800f4b2:	f1c0 0020 	rsb	r0, r0, #32
 800f4b6:	fa03 f000 	lsl.w	r0, r3, r0
 800f4ba:	e7f0      	b.n	800f49e <_dtoa_r+0x1fe>
 800f4bc:	2301      	movs	r3, #1
 800f4be:	e7b1      	b.n	800f424 <_dtoa_r+0x184>
 800f4c0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f4c2:	e7b0      	b.n	800f426 <_dtoa_r+0x186>
 800f4c4:	9b05      	ldr	r3, [sp, #20]
 800f4c6:	eba3 030a 	sub.w	r3, r3, sl
 800f4ca:	9305      	str	r3, [sp, #20]
 800f4cc:	f1ca 0300 	rsb	r3, sl, #0
 800f4d0:	9307      	str	r3, [sp, #28]
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	930e      	str	r3, [sp, #56]	; 0x38
 800f4d6:	e7bb      	b.n	800f450 <_dtoa_r+0x1b0>
 800f4d8:	2301      	movs	r3, #1
 800f4da:	930a      	str	r3, [sp, #40]	; 0x28
 800f4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	dd59      	ble.n	800f596 <_dtoa_r+0x2f6>
 800f4e2:	9302      	str	r3, [sp, #8]
 800f4e4:	4699      	mov	r9, r3
 800f4e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	6072      	str	r2, [r6, #4]
 800f4ec:	2204      	movs	r2, #4
 800f4ee:	f102 0014 	add.w	r0, r2, #20
 800f4f2:	4298      	cmp	r0, r3
 800f4f4:	6871      	ldr	r1, [r6, #4]
 800f4f6:	d953      	bls.n	800f5a0 <_dtoa_r+0x300>
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f001 f8a1 	bl	8010640 <_Balloc>
 800f4fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f500:	6030      	str	r0, [r6, #0]
 800f502:	f1b9 0f0e 	cmp.w	r9, #14
 800f506:	f8d3 b000 	ldr.w	fp, [r3]
 800f50a:	f200 80e6 	bhi.w	800f6da <_dtoa_r+0x43a>
 800f50e:	2d00      	cmp	r5, #0
 800f510:	f000 80e3 	beq.w	800f6da <_dtoa_r+0x43a>
 800f514:	ed9d 7b00 	vldr	d7, [sp]
 800f518:	f1ba 0f00 	cmp.w	sl, #0
 800f51c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f520:	dd74      	ble.n	800f60c <_dtoa_r+0x36c>
 800f522:	4a2a      	ldr	r2, [pc, #168]	; (800f5cc <_dtoa_r+0x32c>)
 800f524:	f00a 030f 	and.w	r3, sl, #15
 800f528:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f52c:	ed93 7b00 	vldr	d7, [r3]
 800f530:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f534:	06f0      	lsls	r0, r6, #27
 800f536:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f53a:	d565      	bpl.n	800f608 <_dtoa_r+0x368>
 800f53c:	4b24      	ldr	r3, [pc, #144]	; (800f5d0 <_dtoa_r+0x330>)
 800f53e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f542:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f546:	f7f1 f981 	bl	800084c <__aeabi_ddiv>
 800f54a:	e9cd 0100 	strd	r0, r1, [sp]
 800f54e:	f006 060f 	and.w	r6, r6, #15
 800f552:	2503      	movs	r5, #3
 800f554:	4f1e      	ldr	r7, [pc, #120]	; (800f5d0 <_dtoa_r+0x330>)
 800f556:	e04c      	b.n	800f5f2 <_dtoa_r+0x352>
 800f558:	2301      	movs	r3, #1
 800f55a:	930a      	str	r3, [sp, #40]	; 0x28
 800f55c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f55e:	4453      	add	r3, sl
 800f560:	f103 0901 	add.w	r9, r3, #1
 800f564:	9302      	str	r3, [sp, #8]
 800f566:	464b      	mov	r3, r9
 800f568:	2b01      	cmp	r3, #1
 800f56a:	bfb8      	it	lt
 800f56c:	2301      	movlt	r3, #1
 800f56e:	e7ba      	b.n	800f4e6 <_dtoa_r+0x246>
 800f570:	2300      	movs	r3, #0
 800f572:	e7b2      	b.n	800f4da <_dtoa_r+0x23a>
 800f574:	2300      	movs	r3, #0
 800f576:	e7f0      	b.n	800f55a <_dtoa_r+0x2ba>
 800f578:	2501      	movs	r5, #1
 800f57a:	2300      	movs	r3, #0
 800f57c:	9306      	str	r3, [sp, #24]
 800f57e:	950a      	str	r5, [sp, #40]	; 0x28
 800f580:	f04f 33ff 	mov.w	r3, #4294967295
 800f584:	9302      	str	r3, [sp, #8]
 800f586:	4699      	mov	r9, r3
 800f588:	2200      	movs	r2, #0
 800f58a:	2312      	movs	r3, #18
 800f58c:	920b      	str	r2, [sp, #44]	; 0x2c
 800f58e:	e7aa      	b.n	800f4e6 <_dtoa_r+0x246>
 800f590:	2301      	movs	r3, #1
 800f592:	930a      	str	r3, [sp, #40]	; 0x28
 800f594:	e7f4      	b.n	800f580 <_dtoa_r+0x2e0>
 800f596:	2301      	movs	r3, #1
 800f598:	9302      	str	r3, [sp, #8]
 800f59a:	4699      	mov	r9, r3
 800f59c:	461a      	mov	r2, r3
 800f59e:	e7f5      	b.n	800f58c <_dtoa_r+0x2ec>
 800f5a0:	3101      	adds	r1, #1
 800f5a2:	6071      	str	r1, [r6, #4]
 800f5a4:	0052      	lsls	r2, r2, #1
 800f5a6:	e7a2      	b.n	800f4ee <_dtoa_r+0x24e>
 800f5a8:	636f4361 	.word	0x636f4361
 800f5ac:	3fd287a7 	.word	0x3fd287a7
 800f5b0:	8b60c8b3 	.word	0x8b60c8b3
 800f5b4:	3fc68a28 	.word	0x3fc68a28
 800f5b8:	509f79fb 	.word	0x509f79fb
 800f5bc:	3fd34413 	.word	0x3fd34413
 800f5c0:	7ff00000 	.word	0x7ff00000
 800f5c4:	08011ac5 	.word	0x08011ac5
 800f5c8:	3ff80000 	.word	0x3ff80000
 800f5cc:	08011be8 	.word	0x08011be8
 800f5d0:	08011bc0 	.word	0x08011bc0
 800f5d4:	08011b49 	.word	0x08011b49
 800f5d8:	07f1      	lsls	r1, r6, #31
 800f5da:	d508      	bpl.n	800f5ee <_dtoa_r+0x34e>
 800f5dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f5e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5e4:	f7f1 f808 	bl	80005f8 <__aeabi_dmul>
 800f5e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f5ec:	3501      	adds	r5, #1
 800f5ee:	1076      	asrs	r6, r6, #1
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	2e00      	cmp	r6, #0
 800f5f4:	d1f0      	bne.n	800f5d8 <_dtoa_r+0x338>
 800f5f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f5fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5fe:	f7f1 f925 	bl	800084c <__aeabi_ddiv>
 800f602:	e9cd 0100 	strd	r0, r1, [sp]
 800f606:	e01a      	b.n	800f63e <_dtoa_r+0x39e>
 800f608:	2502      	movs	r5, #2
 800f60a:	e7a3      	b.n	800f554 <_dtoa_r+0x2b4>
 800f60c:	f000 80a0 	beq.w	800f750 <_dtoa_r+0x4b0>
 800f610:	f1ca 0600 	rsb	r6, sl, #0
 800f614:	4b9f      	ldr	r3, [pc, #636]	; (800f894 <_dtoa_r+0x5f4>)
 800f616:	4fa0      	ldr	r7, [pc, #640]	; (800f898 <_dtoa_r+0x5f8>)
 800f618:	f006 020f 	and.w	r2, r6, #15
 800f61c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f624:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f628:	f7f0 ffe6 	bl	80005f8 <__aeabi_dmul>
 800f62c:	e9cd 0100 	strd	r0, r1, [sp]
 800f630:	1136      	asrs	r6, r6, #4
 800f632:	2300      	movs	r3, #0
 800f634:	2502      	movs	r5, #2
 800f636:	2e00      	cmp	r6, #0
 800f638:	d17f      	bne.n	800f73a <_dtoa_r+0x49a>
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d1e1      	bne.n	800f602 <_dtoa_r+0x362>
 800f63e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f640:	2b00      	cmp	r3, #0
 800f642:	f000 8087 	beq.w	800f754 <_dtoa_r+0x4b4>
 800f646:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f64a:	2200      	movs	r2, #0
 800f64c:	4b93      	ldr	r3, [pc, #588]	; (800f89c <_dtoa_r+0x5fc>)
 800f64e:	4630      	mov	r0, r6
 800f650:	4639      	mov	r1, r7
 800f652:	f7f1 fa43 	bl	8000adc <__aeabi_dcmplt>
 800f656:	2800      	cmp	r0, #0
 800f658:	d07c      	beq.n	800f754 <_dtoa_r+0x4b4>
 800f65a:	f1b9 0f00 	cmp.w	r9, #0
 800f65e:	d079      	beq.n	800f754 <_dtoa_r+0x4b4>
 800f660:	9b02      	ldr	r3, [sp, #8]
 800f662:	2b00      	cmp	r3, #0
 800f664:	dd35      	ble.n	800f6d2 <_dtoa_r+0x432>
 800f666:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f66a:	9308      	str	r3, [sp, #32]
 800f66c:	4639      	mov	r1, r7
 800f66e:	2200      	movs	r2, #0
 800f670:	4b8b      	ldr	r3, [pc, #556]	; (800f8a0 <_dtoa_r+0x600>)
 800f672:	4630      	mov	r0, r6
 800f674:	f7f0 ffc0 	bl	80005f8 <__aeabi_dmul>
 800f678:	e9cd 0100 	strd	r0, r1, [sp]
 800f67c:	9f02      	ldr	r7, [sp, #8]
 800f67e:	3501      	adds	r5, #1
 800f680:	4628      	mov	r0, r5
 800f682:	f7f0 ff4f 	bl	8000524 <__aeabi_i2d>
 800f686:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f68a:	f7f0 ffb5 	bl	80005f8 <__aeabi_dmul>
 800f68e:	2200      	movs	r2, #0
 800f690:	4b84      	ldr	r3, [pc, #528]	; (800f8a4 <_dtoa_r+0x604>)
 800f692:	f7f0 fdfb 	bl	800028c <__adddf3>
 800f696:	4605      	mov	r5, r0
 800f698:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f69c:	2f00      	cmp	r7, #0
 800f69e:	d15d      	bne.n	800f75c <_dtoa_r+0x4bc>
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	4b81      	ldr	r3, [pc, #516]	; (800f8a8 <_dtoa_r+0x608>)
 800f6a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6a8:	f7f0 fdee 	bl	8000288 <__aeabi_dsub>
 800f6ac:	462a      	mov	r2, r5
 800f6ae:	4633      	mov	r3, r6
 800f6b0:	e9cd 0100 	strd	r0, r1, [sp]
 800f6b4:	f7f1 fa30 	bl	8000b18 <__aeabi_dcmpgt>
 800f6b8:	2800      	cmp	r0, #0
 800f6ba:	f040 8288 	bne.w	800fbce <_dtoa_r+0x92e>
 800f6be:	462a      	mov	r2, r5
 800f6c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f6c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6c8:	f7f1 fa08 	bl	8000adc <__aeabi_dcmplt>
 800f6cc:	2800      	cmp	r0, #0
 800f6ce:	f040 827c 	bne.w	800fbca <_dtoa_r+0x92a>
 800f6d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f6d6:	e9cd 2300 	strd	r2, r3, [sp]
 800f6da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f2c0 8150 	blt.w	800f982 <_dtoa_r+0x6e2>
 800f6e2:	f1ba 0f0e 	cmp.w	sl, #14
 800f6e6:	f300 814c 	bgt.w	800f982 <_dtoa_r+0x6e2>
 800f6ea:	4b6a      	ldr	r3, [pc, #424]	; (800f894 <_dtoa_r+0x5f4>)
 800f6ec:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f6f0:	ed93 7b00 	vldr	d7, [r3]
 800f6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f6fc:	f280 80d8 	bge.w	800f8b0 <_dtoa_r+0x610>
 800f700:	f1b9 0f00 	cmp.w	r9, #0
 800f704:	f300 80d4 	bgt.w	800f8b0 <_dtoa_r+0x610>
 800f708:	f040 825e 	bne.w	800fbc8 <_dtoa_r+0x928>
 800f70c:	2200      	movs	r2, #0
 800f70e:	4b66      	ldr	r3, [pc, #408]	; (800f8a8 <_dtoa_r+0x608>)
 800f710:	ec51 0b17 	vmov	r0, r1, d7
 800f714:	f7f0 ff70 	bl	80005f8 <__aeabi_dmul>
 800f718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f71c:	f7f1 f9f2 	bl	8000b04 <__aeabi_dcmpge>
 800f720:	464f      	mov	r7, r9
 800f722:	464e      	mov	r6, r9
 800f724:	2800      	cmp	r0, #0
 800f726:	f040 8234 	bne.w	800fb92 <_dtoa_r+0x8f2>
 800f72a:	2331      	movs	r3, #49	; 0x31
 800f72c:	f10b 0501 	add.w	r5, fp, #1
 800f730:	f88b 3000 	strb.w	r3, [fp]
 800f734:	f10a 0a01 	add.w	sl, sl, #1
 800f738:	e22f      	b.n	800fb9a <_dtoa_r+0x8fa>
 800f73a:	07f2      	lsls	r2, r6, #31
 800f73c:	d505      	bpl.n	800f74a <_dtoa_r+0x4aa>
 800f73e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f742:	f7f0 ff59 	bl	80005f8 <__aeabi_dmul>
 800f746:	3501      	adds	r5, #1
 800f748:	2301      	movs	r3, #1
 800f74a:	1076      	asrs	r6, r6, #1
 800f74c:	3708      	adds	r7, #8
 800f74e:	e772      	b.n	800f636 <_dtoa_r+0x396>
 800f750:	2502      	movs	r5, #2
 800f752:	e774      	b.n	800f63e <_dtoa_r+0x39e>
 800f754:	f8cd a020 	str.w	sl, [sp, #32]
 800f758:	464f      	mov	r7, r9
 800f75a:	e791      	b.n	800f680 <_dtoa_r+0x3e0>
 800f75c:	4b4d      	ldr	r3, [pc, #308]	; (800f894 <_dtoa_r+0x5f4>)
 800f75e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f762:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d047      	beq.n	800f7fc <_dtoa_r+0x55c>
 800f76c:	4602      	mov	r2, r0
 800f76e:	460b      	mov	r3, r1
 800f770:	2000      	movs	r0, #0
 800f772:	494e      	ldr	r1, [pc, #312]	; (800f8ac <_dtoa_r+0x60c>)
 800f774:	f7f1 f86a 	bl	800084c <__aeabi_ddiv>
 800f778:	462a      	mov	r2, r5
 800f77a:	4633      	mov	r3, r6
 800f77c:	f7f0 fd84 	bl	8000288 <__aeabi_dsub>
 800f780:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f784:	465d      	mov	r5, fp
 800f786:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f78a:	f7f1 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800f78e:	4606      	mov	r6, r0
 800f790:	f7f0 fec8 	bl	8000524 <__aeabi_i2d>
 800f794:	4602      	mov	r2, r0
 800f796:	460b      	mov	r3, r1
 800f798:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f79c:	f7f0 fd74 	bl	8000288 <__aeabi_dsub>
 800f7a0:	3630      	adds	r6, #48	; 0x30
 800f7a2:	f805 6b01 	strb.w	r6, [r5], #1
 800f7a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f7aa:	e9cd 0100 	strd	r0, r1, [sp]
 800f7ae:	f7f1 f995 	bl	8000adc <__aeabi_dcmplt>
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	d163      	bne.n	800f87e <_dtoa_r+0x5de>
 800f7b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7ba:	2000      	movs	r0, #0
 800f7bc:	4937      	ldr	r1, [pc, #220]	; (800f89c <_dtoa_r+0x5fc>)
 800f7be:	f7f0 fd63 	bl	8000288 <__aeabi_dsub>
 800f7c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f7c6:	f7f1 f989 	bl	8000adc <__aeabi_dcmplt>
 800f7ca:	2800      	cmp	r0, #0
 800f7cc:	f040 80b7 	bne.w	800f93e <_dtoa_r+0x69e>
 800f7d0:	eba5 030b 	sub.w	r3, r5, fp
 800f7d4:	429f      	cmp	r7, r3
 800f7d6:	f77f af7c 	ble.w	800f6d2 <_dtoa_r+0x432>
 800f7da:	2200      	movs	r2, #0
 800f7dc:	4b30      	ldr	r3, [pc, #192]	; (800f8a0 <_dtoa_r+0x600>)
 800f7de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7e2:	f7f0 ff09 	bl	80005f8 <__aeabi_dmul>
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f7ec:	4b2c      	ldr	r3, [pc, #176]	; (800f8a0 <_dtoa_r+0x600>)
 800f7ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7f2:	f7f0 ff01 	bl	80005f8 <__aeabi_dmul>
 800f7f6:	e9cd 0100 	strd	r0, r1, [sp]
 800f7fa:	e7c4      	b.n	800f786 <_dtoa_r+0x4e6>
 800f7fc:	462a      	mov	r2, r5
 800f7fe:	4633      	mov	r3, r6
 800f800:	f7f0 fefa 	bl	80005f8 <__aeabi_dmul>
 800f804:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f808:	eb0b 0507 	add.w	r5, fp, r7
 800f80c:	465e      	mov	r6, fp
 800f80e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f812:	f7f1 f9a1 	bl	8000b58 <__aeabi_d2iz>
 800f816:	4607      	mov	r7, r0
 800f818:	f7f0 fe84 	bl	8000524 <__aeabi_i2d>
 800f81c:	3730      	adds	r7, #48	; 0x30
 800f81e:	4602      	mov	r2, r0
 800f820:	460b      	mov	r3, r1
 800f822:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f826:	f7f0 fd2f 	bl	8000288 <__aeabi_dsub>
 800f82a:	f806 7b01 	strb.w	r7, [r6], #1
 800f82e:	42ae      	cmp	r6, r5
 800f830:	e9cd 0100 	strd	r0, r1, [sp]
 800f834:	f04f 0200 	mov.w	r2, #0
 800f838:	d126      	bne.n	800f888 <_dtoa_r+0x5e8>
 800f83a:	4b1c      	ldr	r3, [pc, #112]	; (800f8ac <_dtoa_r+0x60c>)
 800f83c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f840:	f7f0 fd24 	bl	800028c <__adddf3>
 800f844:	4602      	mov	r2, r0
 800f846:	460b      	mov	r3, r1
 800f848:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f84c:	f7f1 f964 	bl	8000b18 <__aeabi_dcmpgt>
 800f850:	2800      	cmp	r0, #0
 800f852:	d174      	bne.n	800f93e <_dtoa_r+0x69e>
 800f854:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f858:	2000      	movs	r0, #0
 800f85a:	4914      	ldr	r1, [pc, #80]	; (800f8ac <_dtoa_r+0x60c>)
 800f85c:	f7f0 fd14 	bl	8000288 <__aeabi_dsub>
 800f860:	4602      	mov	r2, r0
 800f862:	460b      	mov	r3, r1
 800f864:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f868:	f7f1 f938 	bl	8000adc <__aeabi_dcmplt>
 800f86c:	2800      	cmp	r0, #0
 800f86e:	f43f af30 	beq.w	800f6d2 <_dtoa_r+0x432>
 800f872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f876:	2b30      	cmp	r3, #48	; 0x30
 800f878:	f105 32ff 	add.w	r2, r5, #4294967295
 800f87c:	d002      	beq.n	800f884 <_dtoa_r+0x5e4>
 800f87e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f882:	e04a      	b.n	800f91a <_dtoa_r+0x67a>
 800f884:	4615      	mov	r5, r2
 800f886:	e7f4      	b.n	800f872 <_dtoa_r+0x5d2>
 800f888:	4b05      	ldr	r3, [pc, #20]	; (800f8a0 <_dtoa_r+0x600>)
 800f88a:	f7f0 feb5 	bl	80005f8 <__aeabi_dmul>
 800f88e:	e9cd 0100 	strd	r0, r1, [sp]
 800f892:	e7bc      	b.n	800f80e <_dtoa_r+0x56e>
 800f894:	08011be8 	.word	0x08011be8
 800f898:	08011bc0 	.word	0x08011bc0
 800f89c:	3ff00000 	.word	0x3ff00000
 800f8a0:	40240000 	.word	0x40240000
 800f8a4:	401c0000 	.word	0x401c0000
 800f8a8:	40140000 	.word	0x40140000
 800f8ac:	3fe00000 	.word	0x3fe00000
 800f8b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f8b4:	465d      	mov	r5, fp
 800f8b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	4639      	mov	r1, r7
 800f8be:	f7f0 ffc5 	bl	800084c <__aeabi_ddiv>
 800f8c2:	f7f1 f949 	bl	8000b58 <__aeabi_d2iz>
 800f8c6:	4680      	mov	r8, r0
 800f8c8:	f7f0 fe2c 	bl	8000524 <__aeabi_i2d>
 800f8cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8d0:	f7f0 fe92 	bl	80005f8 <__aeabi_dmul>
 800f8d4:	4602      	mov	r2, r0
 800f8d6:	460b      	mov	r3, r1
 800f8d8:	4630      	mov	r0, r6
 800f8da:	4639      	mov	r1, r7
 800f8dc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f8e0:	f7f0 fcd2 	bl	8000288 <__aeabi_dsub>
 800f8e4:	f805 6b01 	strb.w	r6, [r5], #1
 800f8e8:	eba5 060b 	sub.w	r6, r5, fp
 800f8ec:	45b1      	cmp	r9, r6
 800f8ee:	4602      	mov	r2, r0
 800f8f0:	460b      	mov	r3, r1
 800f8f2:	d139      	bne.n	800f968 <_dtoa_r+0x6c8>
 800f8f4:	f7f0 fcca 	bl	800028c <__adddf3>
 800f8f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8fc:	4606      	mov	r6, r0
 800f8fe:	460f      	mov	r7, r1
 800f900:	f7f1 f90a 	bl	8000b18 <__aeabi_dcmpgt>
 800f904:	b9c8      	cbnz	r0, 800f93a <_dtoa_r+0x69a>
 800f906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f90a:	4630      	mov	r0, r6
 800f90c:	4639      	mov	r1, r7
 800f90e:	f7f1 f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 800f912:	b110      	cbz	r0, 800f91a <_dtoa_r+0x67a>
 800f914:	f018 0f01 	tst.w	r8, #1
 800f918:	d10f      	bne.n	800f93a <_dtoa_r+0x69a>
 800f91a:	9904      	ldr	r1, [sp, #16]
 800f91c:	4620      	mov	r0, r4
 800f91e:	f000 fec3 	bl	80106a8 <_Bfree>
 800f922:	2300      	movs	r3, #0
 800f924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f926:	702b      	strb	r3, [r5, #0]
 800f928:	f10a 0301 	add.w	r3, sl, #1
 800f92c:	6013      	str	r3, [r2, #0]
 800f92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f930:	2b00      	cmp	r3, #0
 800f932:	f000 8241 	beq.w	800fdb8 <_dtoa_r+0xb18>
 800f936:	601d      	str	r5, [r3, #0]
 800f938:	e23e      	b.n	800fdb8 <_dtoa_r+0xb18>
 800f93a:	f8cd a020 	str.w	sl, [sp, #32]
 800f93e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f942:	2a39      	cmp	r2, #57	; 0x39
 800f944:	f105 33ff 	add.w	r3, r5, #4294967295
 800f948:	d108      	bne.n	800f95c <_dtoa_r+0x6bc>
 800f94a:	459b      	cmp	fp, r3
 800f94c:	d10a      	bne.n	800f964 <_dtoa_r+0x6c4>
 800f94e:	9b08      	ldr	r3, [sp, #32]
 800f950:	3301      	adds	r3, #1
 800f952:	9308      	str	r3, [sp, #32]
 800f954:	2330      	movs	r3, #48	; 0x30
 800f956:	f88b 3000 	strb.w	r3, [fp]
 800f95a:	465b      	mov	r3, fp
 800f95c:	781a      	ldrb	r2, [r3, #0]
 800f95e:	3201      	adds	r2, #1
 800f960:	701a      	strb	r2, [r3, #0]
 800f962:	e78c      	b.n	800f87e <_dtoa_r+0x5de>
 800f964:	461d      	mov	r5, r3
 800f966:	e7ea      	b.n	800f93e <_dtoa_r+0x69e>
 800f968:	2200      	movs	r2, #0
 800f96a:	4b9b      	ldr	r3, [pc, #620]	; (800fbd8 <_dtoa_r+0x938>)
 800f96c:	f7f0 fe44 	bl	80005f8 <__aeabi_dmul>
 800f970:	2200      	movs	r2, #0
 800f972:	2300      	movs	r3, #0
 800f974:	4606      	mov	r6, r0
 800f976:	460f      	mov	r7, r1
 800f978:	f7f1 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800f97c:	2800      	cmp	r0, #0
 800f97e:	d09a      	beq.n	800f8b6 <_dtoa_r+0x616>
 800f980:	e7cb      	b.n	800f91a <_dtoa_r+0x67a>
 800f982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f984:	2a00      	cmp	r2, #0
 800f986:	f000 808b 	beq.w	800faa0 <_dtoa_r+0x800>
 800f98a:	9a06      	ldr	r2, [sp, #24]
 800f98c:	2a01      	cmp	r2, #1
 800f98e:	dc6e      	bgt.n	800fa6e <_dtoa_r+0x7ce>
 800f990:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f992:	2a00      	cmp	r2, #0
 800f994:	d067      	beq.n	800fa66 <_dtoa_r+0x7c6>
 800f996:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f99a:	9f07      	ldr	r7, [sp, #28]
 800f99c:	9d05      	ldr	r5, [sp, #20]
 800f99e:	9a05      	ldr	r2, [sp, #20]
 800f9a0:	2101      	movs	r1, #1
 800f9a2:	441a      	add	r2, r3
 800f9a4:	4620      	mov	r0, r4
 800f9a6:	9205      	str	r2, [sp, #20]
 800f9a8:	4498      	add	r8, r3
 800f9aa:	f000 ff5b 	bl	8010864 <__i2b>
 800f9ae:	4606      	mov	r6, r0
 800f9b0:	2d00      	cmp	r5, #0
 800f9b2:	dd0c      	ble.n	800f9ce <_dtoa_r+0x72e>
 800f9b4:	f1b8 0f00 	cmp.w	r8, #0
 800f9b8:	dd09      	ble.n	800f9ce <_dtoa_r+0x72e>
 800f9ba:	4545      	cmp	r5, r8
 800f9bc:	9a05      	ldr	r2, [sp, #20]
 800f9be:	462b      	mov	r3, r5
 800f9c0:	bfa8      	it	ge
 800f9c2:	4643      	movge	r3, r8
 800f9c4:	1ad2      	subs	r2, r2, r3
 800f9c6:	9205      	str	r2, [sp, #20]
 800f9c8:	1aed      	subs	r5, r5, r3
 800f9ca:	eba8 0803 	sub.w	r8, r8, r3
 800f9ce:	9b07      	ldr	r3, [sp, #28]
 800f9d0:	b1eb      	cbz	r3, 800fa0e <_dtoa_r+0x76e>
 800f9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d067      	beq.n	800faa8 <_dtoa_r+0x808>
 800f9d8:	b18f      	cbz	r7, 800f9fe <_dtoa_r+0x75e>
 800f9da:	4631      	mov	r1, r6
 800f9dc:	463a      	mov	r2, r7
 800f9de:	4620      	mov	r0, r4
 800f9e0:	f000 ffe0 	bl	80109a4 <__pow5mult>
 800f9e4:	9a04      	ldr	r2, [sp, #16]
 800f9e6:	4601      	mov	r1, r0
 800f9e8:	4606      	mov	r6, r0
 800f9ea:	4620      	mov	r0, r4
 800f9ec:	f000 ff43 	bl	8010876 <__multiply>
 800f9f0:	9904      	ldr	r1, [sp, #16]
 800f9f2:	9008      	str	r0, [sp, #32]
 800f9f4:	4620      	mov	r0, r4
 800f9f6:	f000 fe57 	bl	80106a8 <_Bfree>
 800f9fa:	9b08      	ldr	r3, [sp, #32]
 800f9fc:	9304      	str	r3, [sp, #16]
 800f9fe:	9b07      	ldr	r3, [sp, #28]
 800fa00:	1bda      	subs	r2, r3, r7
 800fa02:	d004      	beq.n	800fa0e <_dtoa_r+0x76e>
 800fa04:	9904      	ldr	r1, [sp, #16]
 800fa06:	4620      	mov	r0, r4
 800fa08:	f000 ffcc 	bl	80109a4 <__pow5mult>
 800fa0c:	9004      	str	r0, [sp, #16]
 800fa0e:	2101      	movs	r1, #1
 800fa10:	4620      	mov	r0, r4
 800fa12:	f000 ff27 	bl	8010864 <__i2b>
 800fa16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa18:	4607      	mov	r7, r0
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	f000 81d0 	beq.w	800fdc0 <_dtoa_r+0xb20>
 800fa20:	461a      	mov	r2, r3
 800fa22:	4601      	mov	r1, r0
 800fa24:	4620      	mov	r0, r4
 800fa26:	f000 ffbd 	bl	80109a4 <__pow5mult>
 800fa2a:	9b06      	ldr	r3, [sp, #24]
 800fa2c:	2b01      	cmp	r3, #1
 800fa2e:	4607      	mov	r7, r0
 800fa30:	dc40      	bgt.n	800fab4 <_dtoa_r+0x814>
 800fa32:	9b00      	ldr	r3, [sp, #0]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d139      	bne.n	800faac <_dtoa_r+0x80c>
 800fa38:	9b01      	ldr	r3, [sp, #4]
 800fa3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d136      	bne.n	800fab0 <_dtoa_r+0x810>
 800fa42:	9b01      	ldr	r3, [sp, #4]
 800fa44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa48:	0d1b      	lsrs	r3, r3, #20
 800fa4a:	051b      	lsls	r3, r3, #20
 800fa4c:	b12b      	cbz	r3, 800fa5a <_dtoa_r+0x7ba>
 800fa4e:	9b05      	ldr	r3, [sp, #20]
 800fa50:	3301      	adds	r3, #1
 800fa52:	9305      	str	r3, [sp, #20]
 800fa54:	f108 0801 	add.w	r8, r8, #1
 800fa58:	2301      	movs	r3, #1
 800fa5a:	9307      	str	r3, [sp, #28]
 800fa5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d12a      	bne.n	800fab8 <_dtoa_r+0x818>
 800fa62:	2001      	movs	r0, #1
 800fa64:	e030      	b.n	800fac8 <_dtoa_r+0x828>
 800fa66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa68:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fa6c:	e795      	b.n	800f99a <_dtoa_r+0x6fa>
 800fa6e:	9b07      	ldr	r3, [sp, #28]
 800fa70:	f109 37ff 	add.w	r7, r9, #4294967295
 800fa74:	42bb      	cmp	r3, r7
 800fa76:	bfbf      	itttt	lt
 800fa78:	9b07      	ldrlt	r3, [sp, #28]
 800fa7a:	9707      	strlt	r7, [sp, #28]
 800fa7c:	1afa      	sublt	r2, r7, r3
 800fa7e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fa80:	bfbb      	ittet	lt
 800fa82:	189b      	addlt	r3, r3, r2
 800fa84:	930e      	strlt	r3, [sp, #56]	; 0x38
 800fa86:	1bdf      	subge	r7, r3, r7
 800fa88:	2700      	movlt	r7, #0
 800fa8a:	f1b9 0f00 	cmp.w	r9, #0
 800fa8e:	bfb5      	itete	lt
 800fa90:	9b05      	ldrlt	r3, [sp, #20]
 800fa92:	9d05      	ldrge	r5, [sp, #20]
 800fa94:	eba3 0509 	sublt.w	r5, r3, r9
 800fa98:	464b      	movge	r3, r9
 800fa9a:	bfb8      	it	lt
 800fa9c:	2300      	movlt	r3, #0
 800fa9e:	e77e      	b.n	800f99e <_dtoa_r+0x6fe>
 800faa0:	9f07      	ldr	r7, [sp, #28]
 800faa2:	9d05      	ldr	r5, [sp, #20]
 800faa4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800faa6:	e783      	b.n	800f9b0 <_dtoa_r+0x710>
 800faa8:	9a07      	ldr	r2, [sp, #28]
 800faaa:	e7ab      	b.n	800fa04 <_dtoa_r+0x764>
 800faac:	2300      	movs	r3, #0
 800faae:	e7d4      	b.n	800fa5a <_dtoa_r+0x7ba>
 800fab0:	9b00      	ldr	r3, [sp, #0]
 800fab2:	e7d2      	b.n	800fa5a <_dtoa_r+0x7ba>
 800fab4:	2300      	movs	r3, #0
 800fab6:	9307      	str	r3, [sp, #28]
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fabe:	6918      	ldr	r0, [r3, #16]
 800fac0:	f000 fe82 	bl	80107c8 <__hi0bits>
 800fac4:	f1c0 0020 	rsb	r0, r0, #32
 800fac8:	4440      	add	r0, r8
 800faca:	f010 001f 	ands.w	r0, r0, #31
 800face:	d047      	beq.n	800fb60 <_dtoa_r+0x8c0>
 800fad0:	f1c0 0320 	rsb	r3, r0, #32
 800fad4:	2b04      	cmp	r3, #4
 800fad6:	dd3b      	ble.n	800fb50 <_dtoa_r+0x8b0>
 800fad8:	9b05      	ldr	r3, [sp, #20]
 800fada:	f1c0 001c 	rsb	r0, r0, #28
 800fade:	4403      	add	r3, r0
 800fae0:	9305      	str	r3, [sp, #20]
 800fae2:	4405      	add	r5, r0
 800fae4:	4480      	add	r8, r0
 800fae6:	9b05      	ldr	r3, [sp, #20]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	dd05      	ble.n	800faf8 <_dtoa_r+0x858>
 800faec:	461a      	mov	r2, r3
 800faee:	9904      	ldr	r1, [sp, #16]
 800faf0:	4620      	mov	r0, r4
 800faf2:	f000 ffa5 	bl	8010a40 <__lshift>
 800faf6:	9004      	str	r0, [sp, #16]
 800faf8:	f1b8 0f00 	cmp.w	r8, #0
 800fafc:	dd05      	ble.n	800fb0a <_dtoa_r+0x86a>
 800fafe:	4639      	mov	r1, r7
 800fb00:	4642      	mov	r2, r8
 800fb02:	4620      	mov	r0, r4
 800fb04:	f000 ff9c 	bl	8010a40 <__lshift>
 800fb08:	4607      	mov	r7, r0
 800fb0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb0c:	b353      	cbz	r3, 800fb64 <_dtoa_r+0x8c4>
 800fb0e:	4639      	mov	r1, r7
 800fb10:	9804      	ldr	r0, [sp, #16]
 800fb12:	f000 ffe9 	bl	8010ae8 <__mcmp>
 800fb16:	2800      	cmp	r0, #0
 800fb18:	da24      	bge.n	800fb64 <_dtoa_r+0x8c4>
 800fb1a:	2300      	movs	r3, #0
 800fb1c:	220a      	movs	r2, #10
 800fb1e:	9904      	ldr	r1, [sp, #16]
 800fb20:	4620      	mov	r0, r4
 800fb22:	f000 fdd8 	bl	80106d6 <__multadd>
 800fb26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb28:	9004      	str	r0, [sp, #16]
 800fb2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f000 814d 	beq.w	800fdce <_dtoa_r+0xb2e>
 800fb34:	2300      	movs	r3, #0
 800fb36:	4631      	mov	r1, r6
 800fb38:	220a      	movs	r2, #10
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	f000 fdcb 	bl	80106d6 <__multadd>
 800fb40:	9b02      	ldr	r3, [sp, #8]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	4606      	mov	r6, r0
 800fb46:	dc4f      	bgt.n	800fbe8 <_dtoa_r+0x948>
 800fb48:	9b06      	ldr	r3, [sp, #24]
 800fb4a:	2b02      	cmp	r3, #2
 800fb4c:	dd4c      	ble.n	800fbe8 <_dtoa_r+0x948>
 800fb4e:	e011      	b.n	800fb74 <_dtoa_r+0x8d4>
 800fb50:	d0c9      	beq.n	800fae6 <_dtoa_r+0x846>
 800fb52:	9a05      	ldr	r2, [sp, #20]
 800fb54:	331c      	adds	r3, #28
 800fb56:	441a      	add	r2, r3
 800fb58:	9205      	str	r2, [sp, #20]
 800fb5a:	441d      	add	r5, r3
 800fb5c:	4498      	add	r8, r3
 800fb5e:	e7c2      	b.n	800fae6 <_dtoa_r+0x846>
 800fb60:	4603      	mov	r3, r0
 800fb62:	e7f6      	b.n	800fb52 <_dtoa_r+0x8b2>
 800fb64:	f1b9 0f00 	cmp.w	r9, #0
 800fb68:	dc38      	bgt.n	800fbdc <_dtoa_r+0x93c>
 800fb6a:	9b06      	ldr	r3, [sp, #24]
 800fb6c:	2b02      	cmp	r3, #2
 800fb6e:	dd35      	ble.n	800fbdc <_dtoa_r+0x93c>
 800fb70:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb74:	9b02      	ldr	r3, [sp, #8]
 800fb76:	b963      	cbnz	r3, 800fb92 <_dtoa_r+0x8f2>
 800fb78:	4639      	mov	r1, r7
 800fb7a:	2205      	movs	r2, #5
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f000 fdaa 	bl	80106d6 <__multadd>
 800fb82:	4601      	mov	r1, r0
 800fb84:	4607      	mov	r7, r0
 800fb86:	9804      	ldr	r0, [sp, #16]
 800fb88:	f000 ffae 	bl	8010ae8 <__mcmp>
 800fb8c:	2800      	cmp	r0, #0
 800fb8e:	f73f adcc 	bgt.w	800f72a <_dtoa_r+0x48a>
 800fb92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb94:	465d      	mov	r5, fp
 800fb96:	ea6f 0a03 	mvn.w	sl, r3
 800fb9a:	f04f 0900 	mov.w	r9, #0
 800fb9e:	4639      	mov	r1, r7
 800fba0:	4620      	mov	r0, r4
 800fba2:	f000 fd81 	bl	80106a8 <_Bfree>
 800fba6:	2e00      	cmp	r6, #0
 800fba8:	f43f aeb7 	beq.w	800f91a <_dtoa_r+0x67a>
 800fbac:	f1b9 0f00 	cmp.w	r9, #0
 800fbb0:	d005      	beq.n	800fbbe <_dtoa_r+0x91e>
 800fbb2:	45b1      	cmp	r9, r6
 800fbb4:	d003      	beq.n	800fbbe <_dtoa_r+0x91e>
 800fbb6:	4649      	mov	r1, r9
 800fbb8:	4620      	mov	r0, r4
 800fbba:	f000 fd75 	bl	80106a8 <_Bfree>
 800fbbe:	4631      	mov	r1, r6
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f000 fd71 	bl	80106a8 <_Bfree>
 800fbc6:	e6a8      	b.n	800f91a <_dtoa_r+0x67a>
 800fbc8:	2700      	movs	r7, #0
 800fbca:	463e      	mov	r6, r7
 800fbcc:	e7e1      	b.n	800fb92 <_dtoa_r+0x8f2>
 800fbce:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fbd2:	463e      	mov	r6, r7
 800fbd4:	e5a9      	b.n	800f72a <_dtoa_r+0x48a>
 800fbd6:	bf00      	nop
 800fbd8:	40240000 	.word	0x40240000
 800fbdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fbde:	f8cd 9008 	str.w	r9, [sp, #8]
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	f000 80fa 	beq.w	800fddc <_dtoa_r+0xb3c>
 800fbe8:	2d00      	cmp	r5, #0
 800fbea:	dd05      	ble.n	800fbf8 <_dtoa_r+0x958>
 800fbec:	4631      	mov	r1, r6
 800fbee:	462a      	mov	r2, r5
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f000 ff25 	bl	8010a40 <__lshift>
 800fbf6:	4606      	mov	r6, r0
 800fbf8:	9b07      	ldr	r3, [sp, #28]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d04c      	beq.n	800fc98 <_dtoa_r+0x9f8>
 800fbfe:	6871      	ldr	r1, [r6, #4]
 800fc00:	4620      	mov	r0, r4
 800fc02:	f000 fd1d 	bl	8010640 <_Balloc>
 800fc06:	6932      	ldr	r2, [r6, #16]
 800fc08:	3202      	adds	r2, #2
 800fc0a:	4605      	mov	r5, r0
 800fc0c:	0092      	lsls	r2, r2, #2
 800fc0e:	f106 010c 	add.w	r1, r6, #12
 800fc12:	300c      	adds	r0, #12
 800fc14:	f7fd fcbe 	bl	800d594 <memcpy>
 800fc18:	2201      	movs	r2, #1
 800fc1a:	4629      	mov	r1, r5
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	f000 ff0f 	bl	8010a40 <__lshift>
 800fc22:	9b00      	ldr	r3, [sp, #0]
 800fc24:	f8cd b014 	str.w	fp, [sp, #20]
 800fc28:	f003 0301 	and.w	r3, r3, #1
 800fc2c:	46b1      	mov	r9, r6
 800fc2e:	9307      	str	r3, [sp, #28]
 800fc30:	4606      	mov	r6, r0
 800fc32:	4639      	mov	r1, r7
 800fc34:	9804      	ldr	r0, [sp, #16]
 800fc36:	f7ff faa5 	bl	800f184 <quorem>
 800fc3a:	4649      	mov	r1, r9
 800fc3c:	4605      	mov	r5, r0
 800fc3e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fc42:	9804      	ldr	r0, [sp, #16]
 800fc44:	f000 ff50 	bl	8010ae8 <__mcmp>
 800fc48:	4632      	mov	r2, r6
 800fc4a:	9000      	str	r0, [sp, #0]
 800fc4c:	4639      	mov	r1, r7
 800fc4e:	4620      	mov	r0, r4
 800fc50:	f000 ff64 	bl	8010b1c <__mdiff>
 800fc54:	68c3      	ldr	r3, [r0, #12]
 800fc56:	4602      	mov	r2, r0
 800fc58:	bb03      	cbnz	r3, 800fc9c <_dtoa_r+0x9fc>
 800fc5a:	4601      	mov	r1, r0
 800fc5c:	9008      	str	r0, [sp, #32]
 800fc5e:	9804      	ldr	r0, [sp, #16]
 800fc60:	f000 ff42 	bl	8010ae8 <__mcmp>
 800fc64:	9a08      	ldr	r2, [sp, #32]
 800fc66:	4603      	mov	r3, r0
 800fc68:	4611      	mov	r1, r2
 800fc6a:	4620      	mov	r0, r4
 800fc6c:	9308      	str	r3, [sp, #32]
 800fc6e:	f000 fd1b 	bl	80106a8 <_Bfree>
 800fc72:	9b08      	ldr	r3, [sp, #32]
 800fc74:	b9a3      	cbnz	r3, 800fca0 <_dtoa_r+0xa00>
 800fc76:	9a06      	ldr	r2, [sp, #24]
 800fc78:	b992      	cbnz	r2, 800fca0 <_dtoa_r+0xa00>
 800fc7a:	9a07      	ldr	r2, [sp, #28]
 800fc7c:	b982      	cbnz	r2, 800fca0 <_dtoa_r+0xa00>
 800fc7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fc82:	d029      	beq.n	800fcd8 <_dtoa_r+0xa38>
 800fc84:	9b00      	ldr	r3, [sp, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	dd01      	ble.n	800fc8e <_dtoa_r+0x9ee>
 800fc8a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fc8e:	9b05      	ldr	r3, [sp, #20]
 800fc90:	1c5d      	adds	r5, r3, #1
 800fc92:	f883 8000 	strb.w	r8, [r3]
 800fc96:	e782      	b.n	800fb9e <_dtoa_r+0x8fe>
 800fc98:	4630      	mov	r0, r6
 800fc9a:	e7c2      	b.n	800fc22 <_dtoa_r+0x982>
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	e7e3      	b.n	800fc68 <_dtoa_r+0x9c8>
 800fca0:	9a00      	ldr	r2, [sp, #0]
 800fca2:	2a00      	cmp	r2, #0
 800fca4:	db04      	blt.n	800fcb0 <_dtoa_r+0xa10>
 800fca6:	d125      	bne.n	800fcf4 <_dtoa_r+0xa54>
 800fca8:	9a06      	ldr	r2, [sp, #24]
 800fcaa:	bb1a      	cbnz	r2, 800fcf4 <_dtoa_r+0xa54>
 800fcac:	9a07      	ldr	r2, [sp, #28]
 800fcae:	bb0a      	cbnz	r2, 800fcf4 <_dtoa_r+0xa54>
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	ddec      	ble.n	800fc8e <_dtoa_r+0x9ee>
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	9904      	ldr	r1, [sp, #16]
 800fcb8:	4620      	mov	r0, r4
 800fcba:	f000 fec1 	bl	8010a40 <__lshift>
 800fcbe:	4639      	mov	r1, r7
 800fcc0:	9004      	str	r0, [sp, #16]
 800fcc2:	f000 ff11 	bl	8010ae8 <__mcmp>
 800fcc6:	2800      	cmp	r0, #0
 800fcc8:	dc03      	bgt.n	800fcd2 <_dtoa_r+0xa32>
 800fcca:	d1e0      	bne.n	800fc8e <_dtoa_r+0x9ee>
 800fccc:	f018 0f01 	tst.w	r8, #1
 800fcd0:	d0dd      	beq.n	800fc8e <_dtoa_r+0x9ee>
 800fcd2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fcd6:	d1d8      	bne.n	800fc8a <_dtoa_r+0x9ea>
 800fcd8:	9b05      	ldr	r3, [sp, #20]
 800fcda:	9a05      	ldr	r2, [sp, #20]
 800fcdc:	1c5d      	adds	r5, r3, #1
 800fcde:	2339      	movs	r3, #57	; 0x39
 800fce0:	7013      	strb	r3, [r2, #0]
 800fce2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fce6:	2b39      	cmp	r3, #57	; 0x39
 800fce8:	f105 32ff 	add.w	r2, r5, #4294967295
 800fcec:	d04f      	beq.n	800fd8e <_dtoa_r+0xaee>
 800fcee:	3301      	adds	r3, #1
 800fcf0:	7013      	strb	r3, [r2, #0]
 800fcf2:	e754      	b.n	800fb9e <_dtoa_r+0x8fe>
 800fcf4:	9a05      	ldr	r2, [sp, #20]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	f102 0501 	add.w	r5, r2, #1
 800fcfc:	dd06      	ble.n	800fd0c <_dtoa_r+0xa6c>
 800fcfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fd02:	d0e9      	beq.n	800fcd8 <_dtoa_r+0xa38>
 800fd04:	f108 0801 	add.w	r8, r8, #1
 800fd08:	9b05      	ldr	r3, [sp, #20]
 800fd0a:	e7c2      	b.n	800fc92 <_dtoa_r+0x9f2>
 800fd0c:	9a02      	ldr	r2, [sp, #8]
 800fd0e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fd12:	eba5 030b 	sub.w	r3, r5, fp
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d021      	beq.n	800fd5e <_dtoa_r+0xabe>
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	220a      	movs	r2, #10
 800fd1e:	9904      	ldr	r1, [sp, #16]
 800fd20:	4620      	mov	r0, r4
 800fd22:	f000 fcd8 	bl	80106d6 <__multadd>
 800fd26:	45b1      	cmp	r9, r6
 800fd28:	9004      	str	r0, [sp, #16]
 800fd2a:	f04f 0300 	mov.w	r3, #0
 800fd2e:	f04f 020a 	mov.w	r2, #10
 800fd32:	4649      	mov	r1, r9
 800fd34:	4620      	mov	r0, r4
 800fd36:	d105      	bne.n	800fd44 <_dtoa_r+0xaa4>
 800fd38:	f000 fccd 	bl	80106d6 <__multadd>
 800fd3c:	4681      	mov	r9, r0
 800fd3e:	4606      	mov	r6, r0
 800fd40:	9505      	str	r5, [sp, #20]
 800fd42:	e776      	b.n	800fc32 <_dtoa_r+0x992>
 800fd44:	f000 fcc7 	bl	80106d6 <__multadd>
 800fd48:	4631      	mov	r1, r6
 800fd4a:	4681      	mov	r9, r0
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	220a      	movs	r2, #10
 800fd50:	4620      	mov	r0, r4
 800fd52:	f000 fcc0 	bl	80106d6 <__multadd>
 800fd56:	4606      	mov	r6, r0
 800fd58:	e7f2      	b.n	800fd40 <_dtoa_r+0xaa0>
 800fd5a:	f04f 0900 	mov.w	r9, #0
 800fd5e:	2201      	movs	r2, #1
 800fd60:	9904      	ldr	r1, [sp, #16]
 800fd62:	4620      	mov	r0, r4
 800fd64:	f000 fe6c 	bl	8010a40 <__lshift>
 800fd68:	4639      	mov	r1, r7
 800fd6a:	9004      	str	r0, [sp, #16]
 800fd6c:	f000 febc 	bl	8010ae8 <__mcmp>
 800fd70:	2800      	cmp	r0, #0
 800fd72:	dcb6      	bgt.n	800fce2 <_dtoa_r+0xa42>
 800fd74:	d102      	bne.n	800fd7c <_dtoa_r+0xadc>
 800fd76:	f018 0f01 	tst.w	r8, #1
 800fd7a:	d1b2      	bne.n	800fce2 <_dtoa_r+0xa42>
 800fd7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd80:	2b30      	cmp	r3, #48	; 0x30
 800fd82:	f105 32ff 	add.w	r2, r5, #4294967295
 800fd86:	f47f af0a 	bne.w	800fb9e <_dtoa_r+0x8fe>
 800fd8a:	4615      	mov	r5, r2
 800fd8c:	e7f6      	b.n	800fd7c <_dtoa_r+0xadc>
 800fd8e:	4593      	cmp	fp, r2
 800fd90:	d105      	bne.n	800fd9e <_dtoa_r+0xafe>
 800fd92:	2331      	movs	r3, #49	; 0x31
 800fd94:	f10a 0a01 	add.w	sl, sl, #1
 800fd98:	f88b 3000 	strb.w	r3, [fp]
 800fd9c:	e6ff      	b.n	800fb9e <_dtoa_r+0x8fe>
 800fd9e:	4615      	mov	r5, r2
 800fda0:	e79f      	b.n	800fce2 <_dtoa_r+0xa42>
 800fda2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fe08 <_dtoa_r+0xb68>
 800fda6:	e007      	b.n	800fdb8 <_dtoa_r+0xb18>
 800fda8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdaa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fe0c <_dtoa_r+0xb6c>
 800fdae:	b11b      	cbz	r3, 800fdb8 <_dtoa_r+0xb18>
 800fdb0:	f10b 0308 	add.w	r3, fp, #8
 800fdb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fdb6:	6013      	str	r3, [r2, #0]
 800fdb8:	4658      	mov	r0, fp
 800fdba:	b017      	add	sp, #92	; 0x5c
 800fdbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdc0:	9b06      	ldr	r3, [sp, #24]
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	f77f ae35 	ble.w	800fa32 <_dtoa_r+0x792>
 800fdc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdca:	9307      	str	r3, [sp, #28]
 800fdcc:	e649      	b.n	800fa62 <_dtoa_r+0x7c2>
 800fdce:	9b02      	ldr	r3, [sp, #8]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	dc03      	bgt.n	800fddc <_dtoa_r+0xb3c>
 800fdd4:	9b06      	ldr	r3, [sp, #24]
 800fdd6:	2b02      	cmp	r3, #2
 800fdd8:	f73f aecc 	bgt.w	800fb74 <_dtoa_r+0x8d4>
 800fddc:	465d      	mov	r5, fp
 800fdde:	4639      	mov	r1, r7
 800fde0:	9804      	ldr	r0, [sp, #16]
 800fde2:	f7ff f9cf 	bl	800f184 <quorem>
 800fde6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fdea:	f805 8b01 	strb.w	r8, [r5], #1
 800fdee:	9a02      	ldr	r2, [sp, #8]
 800fdf0:	eba5 030b 	sub.w	r3, r5, fp
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	ddb0      	ble.n	800fd5a <_dtoa_r+0xaba>
 800fdf8:	2300      	movs	r3, #0
 800fdfa:	220a      	movs	r2, #10
 800fdfc:	9904      	ldr	r1, [sp, #16]
 800fdfe:	4620      	mov	r0, r4
 800fe00:	f000 fc69 	bl	80106d6 <__multadd>
 800fe04:	9004      	str	r0, [sp, #16]
 800fe06:	e7ea      	b.n	800fdde <_dtoa_r+0xb3e>
 800fe08:	08011ac4 	.word	0x08011ac4
 800fe0c:	08011b40 	.word	0x08011b40

0800fe10 <std>:
 800fe10:	2300      	movs	r3, #0
 800fe12:	b510      	push	{r4, lr}
 800fe14:	4604      	mov	r4, r0
 800fe16:	e9c0 3300 	strd	r3, r3, [r0]
 800fe1a:	6083      	str	r3, [r0, #8]
 800fe1c:	8181      	strh	r1, [r0, #12]
 800fe1e:	6643      	str	r3, [r0, #100]	; 0x64
 800fe20:	81c2      	strh	r2, [r0, #14]
 800fe22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fe26:	6183      	str	r3, [r0, #24]
 800fe28:	4619      	mov	r1, r3
 800fe2a:	2208      	movs	r2, #8
 800fe2c:	305c      	adds	r0, #92	; 0x5c
 800fe2e:	f7fd fbbc 	bl	800d5aa <memset>
 800fe32:	4b05      	ldr	r3, [pc, #20]	; (800fe48 <std+0x38>)
 800fe34:	6263      	str	r3, [r4, #36]	; 0x24
 800fe36:	4b05      	ldr	r3, [pc, #20]	; (800fe4c <std+0x3c>)
 800fe38:	62a3      	str	r3, [r4, #40]	; 0x28
 800fe3a:	4b05      	ldr	r3, [pc, #20]	; (800fe50 <std+0x40>)
 800fe3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fe3e:	4b05      	ldr	r3, [pc, #20]	; (800fe54 <std+0x44>)
 800fe40:	6224      	str	r4, [r4, #32]
 800fe42:	6323      	str	r3, [r4, #48]	; 0x30
 800fe44:	bd10      	pop	{r4, pc}
 800fe46:	bf00      	nop
 800fe48:	08011381 	.word	0x08011381
 800fe4c:	080113a3 	.word	0x080113a3
 800fe50:	080113db 	.word	0x080113db
 800fe54:	080113ff 	.word	0x080113ff

0800fe58 <_cleanup_r>:
 800fe58:	4901      	ldr	r1, [pc, #4]	; (800fe60 <_cleanup_r+0x8>)
 800fe5a:	f000 b885 	b.w	800ff68 <_fwalk_reent>
 800fe5e:	bf00      	nop
 800fe60:	08011719 	.word	0x08011719

0800fe64 <__sfmoreglue>:
 800fe64:	b570      	push	{r4, r5, r6, lr}
 800fe66:	1e4a      	subs	r2, r1, #1
 800fe68:	2568      	movs	r5, #104	; 0x68
 800fe6a:	4355      	muls	r5, r2
 800fe6c:	460e      	mov	r6, r1
 800fe6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe72:	f7fd fbf1 	bl	800d658 <_malloc_r>
 800fe76:	4604      	mov	r4, r0
 800fe78:	b140      	cbz	r0, 800fe8c <__sfmoreglue+0x28>
 800fe7a:	2100      	movs	r1, #0
 800fe7c:	e9c0 1600 	strd	r1, r6, [r0]
 800fe80:	300c      	adds	r0, #12
 800fe82:	60a0      	str	r0, [r4, #8]
 800fe84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe88:	f7fd fb8f 	bl	800d5aa <memset>
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	bd70      	pop	{r4, r5, r6, pc}

0800fe90 <__sinit>:
 800fe90:	6983      	ldr	r3, [r0, #24]
 800fe92:	b510      	push	{r4, lr}
 800fe94:	4604      	mov	r4, r0
 800fe96:	bb33      	cbnz	r3, 800fee6 <__sinit+0x56>
 800fe98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fe9c:	6503      	str	r3, [r0, #80]	; 0x50
 800fe9e:	4b12      	ldr	r3, [pc, #72]	; (800fee8 <__sinit+0x58>)
 800fea0:	4a12      	ldr	r2, [pc, #72]	; (800feec <__sinit+0x5c>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	6282      	str	r2, [r0, #40]	; 0x28
 800fea6:	4298      	cmp	r0, r3
 800fea8:	bf04      	itt	eq
 800feaa:	2301      	moveq	r3, #1
 800feac:	6183      	streq	r3, [r0, #24]
 800feae:	f000 f81f 	bl	800fef0 <__sfp>
 800feb2:	6060      	str	r0, [r4, #4]
 800feb4:	4620      	mov	r0, r4
 800feb6:	f000 f81b 	bl	800fef0 <__sfp>
 800feba:	60a0      	str	r0, [r4, #8]
 800febc:	4620      	mov	r0, r4
 800febe:	f000 f817 	bl	800fef0 <__sfp>
 800fec2:	2200      	movs	r2, #0
 800fec4:	60e0      	str	r0, [r4, #12]
 800fec6:	2104      	movs	r1, #4
 800fec8:	6860      	ldr	r0, [r4, #4]
 800feca:	f7ff ffa1 	bl	800fe10 <std>
 800fece:	2201      	movs	r2, #1
 800fed0:	2109      	movs	r1, #9
 800fed2:	68a0      	ldr	r0, [r4, #8]
 800fed4:	f7ff ff9c 	bl	800fe10 <std>
 800fed8:	2202      	movs	r2, #2
 800feda:	2112      	movs	r1, #18
 800fedc:	68e0      	ldr	r0, [r4, #12]
 800fede:	f7ff ff97 	bl	800fe10 <std>
 800fee2:	2301      	movs	r3, #1
 800fee4:	61a3      	str	r3, [r4, #24]
 800fee6:	bd10      	pop	{r4, pc}
 800fee8:	08011ab0 	.word	0x08011ab0
 800feec:	0800fe59 	.word	0x0800fe59

0800fef0 <__sfp>:
 800fef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fef2:	4b1b      	ldr	r3, [pc, #108]	; (800ff60 <__sfp+0x70>)
 800fef4:	681e      	ldr	r6, [r3, #0]
 800fef6:	69b3      	ldr	r3, [r6, #24]
 800fef8:	4607      	mov	r7, r0
 800fefa:	b913      	cbnz	r3, 800ff02 <__sfp+0x12>
 800fefc:	4630      	mov	r0, r6
 800fefe:	f7ff ffc7 	bl	800fe90 <__sinit>
 800ff02:	3648      	adds	r6, #72	; 0x48
 800ff04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ff08:	3b01      	subs	r3, #1
 800ff0a:	d503      	bpl.n	800ff14 <__sfp+0x24>
 800ff0c:	6833      	ldr	r3, [r6, #0]
 800ff0e:	b133      	cbz	r3, 800ff1e <__sfp+0x2e>
 800ff10:	6836      	ldr	r6, [r6, #0]
 800ff12:	e7f7      	b.n	800ff04 <__sfp+0x14>
 800ff14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ff18:	b16d      	cbz	r5, 800ff36 <__sfp+0x46>
 800ff1a:	3468      	adds	r4, #104	; 0x68
 800ff1c:	e7f4      	b.n	800ff08 <__sfp+0x18>
 800ff1e:	2104      	movs	r1, #4
 800ff20:	4638      	mov	r0, r7
 800ff22:	f7ff ff9f 	bl	800fe64 <__sfmoreglue>
 800ff26:	6030      	str	r0, [r6, #0]
 800ff28:	2800      	cmp	r0, #0
 800ff2a:	d1f1      	bne.n	800ff10 <__sfp+0x20>
 800ff2c:	230c      	movs	r3, #12
 800ff2e:	603b      	str	r3, [r7, #0]
 800ff30:	4604      	mov	r4, r0
 800ff32:	4620      	mov	r0, r4
 800ff34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff36:	4b0b      	ldr	r3, [pc, #44]	; (800ff64 <__sfp+0x74>)
 800ff38:	6665      	str	r5, [r4, #100]	; 0x64
 800ff3a:	e9c4 5500 	strd	r5, r5, [r4]
 800ff3e:	60a5      	str	r5, [r4, #8]
 800ff40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ff44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ff48:	2208      	movs	r2, #8
 800ff4a:	4629      	mov	r1, r5
 800ff4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff50:	f7fd fb2b 	bl	800d5aa <memset>
 800ff54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff5c:	e7e9      	b.n	800ff32 <__sfp+0x42>
 800ff5e:	bf00      	nop
 800ff60:	08011ab0 	.word	0x08011ab0
 800ff64:	ffff0001 	.word	0xffff0001

0800ff68 <_fwalk_reent>:
 800ff68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff6c:	4680      	mov	r8, r0
 800ff6e:	4689      	mov	r9, r1
 800ff70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff74:	2600      	movs	r6, #0
 800ff76:	b914      	cbnz	r4, 800ff7e <_fwalk_reent+0x16>
 800ff78:	4630      	mov	r0, r6
 800ff7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ff82:	3f01      	subs	r7, #1
 800ff84:	d501      	bpl.n	800ff8a <_fwalk_reent+0x22>
 800ff86:	6824      	ldr	r4, [r4, #0]
 800ff88:	e7f5      	b.n	800ff76 <_fwalk_reent+0xe>
 800ff8a:	89ab      	ldrh	r3, [r5, #12]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d907      	bls.n	800ffa0 <_fwalk_reent+0x38>
 800ff90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff94:	3301      	adds	r3, #1
 800ff96:	d003      	beq.n	800ffa0 <_fwalk_reent+0x38>
 800ff98:	4629      	mov	r1, r5
 800ff9a:	4640      	mov	r0, r8
 800ff9c:	47c8      	blx	r9
 800ff9e:	4306      	orrs	r6, r0
 800ffa0:	3568      	adds	r5, #104	; 0x68
 800ffa2:	e7ee      	b.n	800ff82 <_fwalk_reent+0x1a>

0800ffa4 <rshift>:
 800ffa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffa6:	6906      	ldr	r6, [r0, #16]
 800ffa8:	114b      	asrs	r3, r1, #5
 800ffaa:	429e      	cmp	r6, r3
 800ffac:	f100 0414 	add.w	r4, r0, #20
 800ffb0:	dd30      	ble.n	8010014 <rshift+0x70>
 800ffb2:	f011 011f 	ands.w	r1, r1, #31
 800ffb6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ffba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ffbe:	d108      	bne.n	800ffd2 <rshift+0x2e>
 800ffc0:	4621      	mov	r1, r4
 800ffc2:	42b2      	cmp	r2, r6
 800ffc4:	460b      	mov	r3, r1
 800ffc6:	d211      	bcs.n	800ffec <rshift+0x48>
 800ffc8:	f852 3b04 	ldr.w	r3, [r2], #4
 800ffcc:	f841 3b04 	str.w	r3, [r1], #4
 800ffd0:	e7f7      	b.n	800ffc2 <rshift+0x1e>
 800ffd2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800ffd6:	f1c1 0c20 	rsb	ip, r1, #32
 800ffda:	40cd      	lsrs	r5, r1
 800ffdc:	3204      	adds	r2, #4
 800ffde:	4623      	mov	r3, r4
 800ffe0:	42b2      	cmp	r2, r6
 800ffe2:	4617      	mov	r7, r2
 800ffe4:	d30c      	bcc.n	8010000 <rshift+0x5c>
 800ffe6:	601d      	str	r5, [r3, #0]
 800ffe8:	b105      	cbz	r5, 800ffec <rshift+0x48>
 800ffea:	3304      	adds	r3, #4
 800ffec:	1b1a      	subs	r2, r3, r4
 800ffee:	42a3      	cmp	r3, r4
 800fff0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fff4:	bf08      	it	eq
 800fff6:	2300      	moveq	r3, #0
 800fff8:	6102      	str	r2, [r0, #16]
 800fffa:	bf08      	it	eq
 800fffc:	6143      	streq	r3, [r0, #20]
 800fffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010000:	683f      	ldr	r7, [r7, #0]
 8010002:	fa07 f70c 	lsl.w	r7, r7, ip
 8010006:	433d      	orrs	r5, r7
 8010008:	f843 5b04 	str.w	r5, [r3], #4
 801000c:	f852 5b04 	ldr.w	r5, [r2], #4
 8010010:	40cd      	lsrs	r5, r1
 8010012:	e7e5      	b.n	800ffe0 <rshift+0x3c>
 8010014:	4623      	mov	r3, r4
 8010016:	e7e9      	b.n	800ffec <rshift+0x48>

08010018 <__hexdig_fun>:
 8010018:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801001c:	2b09      	cmp	r3, #9
 801001e:	d802      	bhi.n	8010026 <__hexdig_fun+0xe>
 8010020:	3820      	subs	r0, #32
 8010022:	b2c0      	uxtb	r0, r0
 8010024:	4770      	bx	lr
 8010026:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801002a:	2b05      	cmp	r3, #5
 801002c:	d801      	bhi.n	8010032 <__hexdig_fun+0x1a>
 801002e:	3847      	subs	r0, #71	; 0x47
 8010030:	e7f7      	b.n	8010022 <__hexdig_fun+0xa>
 8010032:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010036:	2b05      	cmp	r3, #5
 8010038:	d801      	bhi.n	801003e <__hexdig_fun+0x26>
 801003a:	3827      	subs	r0, #39	; 0x27
 801003c:	e7f1      	b.n	8010022 <__hexdig_fun+0xa>
 801003e:	2000      	movs	r0, #0
 8010040:	4770      	bx	lr

08010042 <__gethex>:
 8010042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010046:	b08b      	sub	sp, #44	; 0x2c
 8010048:	468a      	mov	sl, r1
 801004a:	9002      	str	r0, [sp, #8]
 801004c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801004e:	9306      	str	r3, [sp, #24]
 8010050:	4690      	mov	r8, r2
 8010052:	f000 fad0 	bl	80105f6 <__localeconv_l>
 8010056:	6803      	ldr	r3, [r0, #0]
 8010058:	9303      	str	r3, [sp, #12]
 801005a:	4618      	mov	r0, r3
 801005c:	f7f0 f8b8 	bl	80001d0 <strlen>
 8010060:	9b03      	ldr	r3, [sp, #12]
 8010062:	9001      	str	r0, [sp, #4]
 8010064:	4403      	add	r3, r0
 8010066:	f04f 0b00 	mov.w	fp, #0
 801006a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801006e:	9307      	str	r3, [sp, #28]
 8010070:	f8da 3000 	ldr.w	r3, [sl]
 8010074:	3302      	adds	r3, #2
 8010076:	461f      	mov	r7, r3
 8010078:	f813 0b01 	ldrb.w	r0, [r3], #1
 801007c:	2830      	cmp	r0, #48	; 0x30
 801007e:	d06c      	beq.n	801015a <__gethex+0x118>
 8010080:	f7ff ffca 	bl	8010018 <__hexdig_fun>
 8010084:	4604      	mov	r4, r0
 8010086:	2800      	cmp	r0, #0
 8010088:	d16a      	bne.n	8010160 <__gethex+0x11e>
 801008a:	9a01      	ldr	r2, [sp, #4]
 801008c:	9903      	ldr	r1, [sp, #12]
 801008e:	4638      	mov	r0, r7
 8010090:	f001 f9b9 	bl	8011406 <strncmp>
 8010094:	2800      	cmp	r0, #0
 8010096:	d166      	bne.n	8010166 <__gethex+0x124>
 8010098:	9b01      	ldr	r3, [sp, #4]
 801009a:	5cf8      	ldrb	r0, [r7, r3]
 801009c:	18fe      	adds	r6, r7, r3
 801009e:	f7ff ffbb 	bl	8010018 <__hexdig_fun>
 80100a2:	2800      	cmp	r0, #0
 80100a4:	d062      	beq.n	801016c <__gethex+0x12a>
 80100a6:	4633      	mov	r3, r6
 80100a8:	7818      	ldrb	r0, [r3, #0]
 80100aa:	2830      	cmp	r0, #48	; 0x30
 80100ac:	461f      	mov	r7, r3
 80100ae:	f103 0301 	add.w	r3, r3, #1
 80100b2:	d0f9      	beq.n	80100a8 <__gethex+0x66>
 80100b4:	f7ff ffb0 	bl	8010018 <__hexdig_fun>
 80100b8:	fab0 f580 	clz	r5, r0
 80100bc:	096d      	lsrs	r5, r5, #5
 80100be:	4634      	mov	r4, r6
 80100c0:	f04f 0b01 	mov.w	fp, #1
 80100c4:	463a      	mov	r2, r7
 80100c6:	4616      	mov	r6, r2
 80100c8:	3201      	adds	r2, #1
 80100ca:	7830      	ldrb	r0, [r6, #0]
 80100cc:	f7ff ffa4 	bl	8010018 <__hexdig_fun>
 80100d0:	2800      	cmp	r0, #0
 80100d2:	d1f8      	bne.n	80100c6 <__gethex+0x84>
 80100d4:	9a01      	ldr	r2, [sp, #4]
 80100d6:	9903      	ldr	r1, [sp, #12]
 80100d8:	4630      	mov	r0, r6
 80100da:	f001 f994 	bl	8011406 <strncmp>
 80100de:	b950      	cbnz	r0, 80100f6 <__gethex+0xb4>
 80100e0:	b954      	cbnz	r4, 80100f8 <__gethex+0xb6>
 80100e2:	9b01      	ldr	r3, [sp, #4]
 80100e4:	18f4      	adds	r4, r6, r3
 80100e6:	4622      	mov	r2, r4
 80100e8:	4616      	mov	r6, r2
 80100ea:	3201      	adds	r2, #1
 80100ec:	7830      	ldrb	r0, [r6, #0]
 80100ee:	f7ff ff93 	bl	8010018 <__hexdig_fun>
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d1f8      	bne.n	80100e8 <__gethex+0xa6>
 80100f6:	b10c      	cbz	r4, 80100fc <__gethex+0xba>
 80100f8:	1ba4      	subs	r4, r4, r6
 80100fa:	00a4      	lsls	r4, r4, #2
 80100fc:	7833      	ldrb	r3, [r6, #0]
 80100fe:	2b50      	cmp	r3, #80	; 0x50
 8010100:	d001      	beq.n	8010106 <__gethex+0xc4>
 8010102:	2b70      	cmp	r3, #112	; 0x70
 8010104:	d140      	bne.n	8010188 <__gethex+0x146>
 8010106:	7873      	ldrb	r3, [r6, #1]
 8010108:	2b2b      	cmp	r3, #43	; 0x2b
 801010a:	d031      	beq.n	8010170 <__gethex+0x12e>
 801010c:	2b2d      	cmp	r3, #45	; 0x2d
 801010e:	d033      	beq.n	8010178 <__gethex+0x136>
 8010110:	1c71      	adds	r1, r6, #1
 8010112:	f04f 0900 	mov.w	r9, #0
 8010116:	7808      	ldrb	r0, [r1, #0]
 8010118:	f7ff ff7e 	bl	8010018 <__hexdig_fun>
 801011c:	1e43      	subs	r3, r0, #1
 801011e:	b2db      	uxtb	r3, r3
 8010120:	2b18      	cmp	r3, #24
 8010122:	d831      	bhi.n	8010188 <__gethex+0x146>
 8010124:	f1a0 0210 	sub.w	r2, r0, #16
 8010128:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801012c:	f7ff ff74 	bl	8010018 <__hexdig_fun>
 8010130:	1e43      	subs	r3, r0, #1
 8010132:	b2db      	uxtb	r3, r3
 8010134:	2b18      	cmp	r3, #24
 8010136:	d922      	bls.n	801017e <__gethex+0x13c>
 8010138:	f1b9 0f00 	cmp.w	r9, #0
 801013c:	d000      	beq.n	8010140 <__gethex+0xfe>
 801013e:	4252      	negs	r2, r2
 8010140:	4414      	add	r4, r2
 8010142:	f8ca 1000 	str.w	r1, [sl]
 8010146:	b30d      	cbz	r5, 801018c <__gethex+0x14a>
 8010148:	f1bb 0f00 	cmp.w	fp, #0
 801014c:	bf0c      	ite	eq
 801014e:	2706      	moveq	r7, #6
 8010150:	2700      	movne	r7, #0
 8010152:	4638      	mov	r0, r7
 8010154:	b00b      	add	sp, #44	; 0x2c
 8010156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801015a:	f10b 0b01 	add.w	fp, fp, #1
 801015e:	e78a      	b.n	8010076 <__gethex+0x34>
 8010160:	2500      	movs	r5, #0
 8010162:	462c      	mov	r4, r5
 8010164:	e7ae      	b.n	80100c4 <__gethex+0x82>
 8010166:	463e      	mov	r6, r7
 8010168:	2501      	movs	r5, #1
 801016a:	e7c7      	b.n	80100fc <__gethex+0xba>
 801016c:	4604      	mov	r4, r0
 801016e:	e7fb      	b.n	8010168 <__gethex+0x126>
 8010170:	f04f 0900 	mov.w	r9, #0
 8010174:	1cb1      	adds	r1, r6, #2
 8010176:	e7ce      	b.n	8010116 <__gethex+0xd4>
 8010178:	f04f 0901 	mov.w	r9, #1
 801017c:	e7fa      	b.n	8010174 <__gethex+0x132>
 801017e:	230a      	movs	r3, #10
 8010180:	fb03 0202 	mla	r2, r3, r2, r0
 8010184:	3a10      	subs	r2, #16
 8010186:	e7cf      	b.n	8010128 <__gethex+0xe6>
 8010188:	4631      	mov	r1, r6
 801018a:	e7da      	b.n	8010142 <__gethex+0x100>
 801018c:	1bf3      	subs	r3, r6, r7
 801018e:	3b01      	subs	r3, #1
 8010190:	4629      	mov	r1, r5
 8010192:	2b07      	cmp	r3, #7
 8010194:	dc49      	bgt.n	801022a <__gethex+0x1e8>
 8010196:	9802      	ldr	r0, [sp, #8]
 8010198:	f000 fa52 	bl	8010640 <_Balloc>
 801019c:	9b01      	ldr	r3, [sp, #4]
 801019e:	f100 0914 	add.w	r9, r0, #20
 80101a2:	f04f 0b00 	mov.w	fp, #0
 80101a6:	f1c3 0301 	rsb	r3, r3, #1
 80101aa:	4605      	mov	r5, r0
 80101ac:	f8cd 9010 	str.w	r9, [sp, #16]
 80101b0:	46da      	mov	sl, fp
 80101b2:	9308      	str	r3, [sp, #32]
 80101b4:	42b7      	cmp	r7, r6
 80101b6:	d33b      	bcc.n	8010230 <__gethex+0x1ee>
 80101b8:	9804      	ldr	r0, [sp, #16]
 80101ba:	f840 ab04 	str.w	sl, [r0], #4
 80101be:	eba0 0009 	sub.w	r0, r0, r9
 80101c2:	1080      	asrs	r0, r0, #2
 80101c4:	6128      	str	r0, [r5, #16]
 80101c6:	0147      	lsls	r7, r0, #5
 80101c8:	4650      	mov	r0, sl
 80101ca:	f000 fafd 	bl	80107c8 <__hi0bits>
 80101ce:	f8d8 6000 	ldr.w	r6, [r8]
 80101d2:	1a3f      	subs	r7, r7, r0
 80101d4:	42b7      	cmp	r7, r6
 80101d6:	dd64      	ble.n	80102a2 <__gethex+0x260>
 80101d8:	1bbf      	subs	r7, r7, r6
 80101da:	4639      	mov	r1, r7
 80101dc:	4628      	mov	r0, r5
 80101de:	f000 fe0d 	bl	8010dfc <__any_on>
 80101e2:	4682      	mov	sl, r0
 80101e4:	b178      	cbz	r0, 8010206 <__gethex+0x1c4>
 80101e6:	1e7b      	subs	r3, r7, #1
 80101e8:	1159      	asrs	r1, r3, #5
 80101ea:	f003 021f 	and.w	r2, r3, #31
 80101ee:	f04f 0a01 	mov.w	sl, #1
 80101f2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80101f6:	fa0a f202 	lsl.w	r2, sl, r2
 80101fa:	420a      	tst	r2, r1
 80101fc:	d003      	beq.n	8010206 <__gethex+0x1c4>
 80101fe:	4553      	cmp	r3, sl
 8010200:	dc46      	bgt.n	8010290 <__gethex+0x24e>
 8010202:	f04f 0a02 	mov.w	sl, #2
 8010206:	4639      	mov	r1, r7
 8010208:	4628      	mov	r0, r5
 801020a:	f7ff fecb 	bl	800ffa4 <rshift>
 801020e:	443c      	add	r4, r7
 8010210:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010214:	42a3      	cmp	r3, r4
 8010216:	da52      	bge.n	80102be <__gethex+0x27c>
 8010218:	4629      	mov	r1, r5
 801021a:	9802      	ldr	r0, [sp, #8]
 801021c:	f000 fa44 	bl	80106a8 <_Bfree>
 8010220:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010222:	2300      	movs	r3, #0
 8010224:	6013      	str	r3, [r2, #0]
 8010226:	27a3      	movs	r7, #163	; 0xa3
 8010228:	e793      	b.n	8010152 <__gethex+0x110>
 801022a:	3101      	adds	r1, #1
 801022c:	105b      	asrs	r3, r3, #1
 801022e:	e7b0      	b.n	8010192 <__gethex+0x150>
 8010230:	1e73      	subs	r3, r6, #1
 8010232:	9305      	str	r3, [sp, #20]
 8010234:	9a07      	ldr	r2, [sp, #28]
 8010236:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801023a:	4293      	cmp	r3, r2
 801023c:	d018      	beq.n	8010270 <__gethex+0x22e>
 801023e:	f1bb 0f20 	cmp.w	fp, #32
 8010242:	d107      	bne.n	8010254 <__gethex+0x212>
 8010244:	9b04      	ldr	r3, [sp, #16]
 8010246:	f8c3 a000 	str.w	sl, [r3]
 801024a:	3304      	adds	r3, #4
 801024c:	f04f 0a00 	mov.w	sl, #0
 8010250:	9304      	str	r3, [sp, #16]
 8010252:	46d3      	mov	fp, sl
 8010254:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010258:	f7ff fede 	bl	8010018 <__hexdig_fun>
 801025c:	f000 000f 	and.w	r0, r0, #15
 8010260:	fa00 f00b 	lsl.w	r0, r0, fp
 8010264:	ea4a 0a00 	orr.w	sl, sl, r0
 8010268:	f10b 0b04 	add.w	fp, fp, #4
 801026c:	9b05      	ldr	r3, [sp, #20]
 801026e:	e00d      	b.n	801028c <__gethex+0x24a>
 8010270:	9b05      	ldr	r3, [sp, #20]
 8010272:	9a08      	ldr	r2, [sp, #32]
 8010274:	4413      	add	r3, r2
 8010276:	42bb      	cmp	r3, r7
 8010278:	d3e1      	bcc.n	801023e <__gethex+0x1fc>
 801027a:	4618      	mov	r0, r3
 801027c:	9a01      	ldr	r2, [sp, #4]
 801027e:	9903      	ldr	r1, [sp, #12]
 8010280:	9309      	str	r3, [sp, #36]	; 0x24
 8010282:	f001 f8c0 	bl	8011406 <strncmp>
 8010286:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010288:	2800      	cmp	r0, #0
 801028a:	d1d8      	bne.n	801023e <__gethex+0x1fc>
 801028c:	461e      	mov	r6, r3
 801028e:	e791      	b.n	80101b4 <__gethex+0x172>
 8010290:	1eb9      	subs	r1, r7, #2
 8010292:	4628      	mov	r0, r5
 8010294:	f000 fdb2 	bl	8010dfc <__any_on>
 8010298:	2800      	cmp	r0, #0
 801029a:	d0b2      	beq.n	8010202 <__gethex+0x1c0>
 801029c:	f04f 0a03 	mov.w	sl, #3
 80102a0:	e7b1      	b.n	8010206 <__gethex+0x1c4>
 80102a2:	da09      	bge.n	80102b8 <__gethex+0x276>
 80102a4:	1bf7      	subs	r7, r6, r7
 80102a6:	4629      	mov	r1, r5
 80102a8:	463a      	mov	r2, r7
 80102aa:	9802      	ldr	r0, [sp, #8]
 80102ac:	f000 fbc8 	bl	8010a40 <__lshift>
 80102b0:	1be4      	subs	r4, r4, r7
 80102b2:	4605      	mov	r5, r0
 80102b4:	f100 0914 	add.w	r9, r0, #20
 80102b8:	f04f 0a00 	mov.w	sl, #0
 80102bc:	e7a8      	b.n	8010210 <__gethex+0x1ce>
 80102be:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80102c2:	42a0      	cmp	r0, r4
 80102c4:	dd6a      	ble.n	801039c <__gethex+0x35a>
 80102c6:	1b04      	subs	r4, r0, r4
 80102c8:	42a6      	cmp	r6, r4
 80102ca:	dc2e      	bgt.n	801032a <__gethex+0x2e8>
 80102cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80102d0:	2b02      	cmp	r3, #2
 80102d2:	d022      	beq.n	801031a <__gethex+0x2d8>
 80102d4:	2b03      	cmp	r3, #3
 80102d6:	d024      	beq.n	8010322 <__gethex+0x2e0>
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d115      	bne.n	8010308 <__gethex+0x2c6>
 80102dc:	42a6      	cmp	r6, r4
 80102de:	d113      	bne.n	8010308 <__gethex+0x2c6>
 80102e0:	2e01      	cmp	r6, #1
 80102e2:	dc0b      	bgt.n	80102fc <__gethex+0x2ba>
 80102e4:	9a06      	ldr	r2, [sp, #24]
 80102e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80102ea:	6013      	str	r3, [r2, #0]
 80102ec:	2301      	movs	r3, #1
 80102ee:	612b      	str	r3, [r5, #16]
 80102f0:	f8c9 3000 	str.w	r3, [r9]
 80102f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80102f6:	2762      	movs	r7, #98	; 0x62
 80102f8:	601d      	str	r5, [r3, #0]
 80102fa:	e72a      	b.n	8010152 <__gethex+0x110>
 80102fc:	1e71      	subs	r1, r6, #1
 80102fe:	4628      	mov	r0, r5
 8010300:	f000 fd7c 	bl	8010dfc <__any_on>
 8010304:	2800      	cmp	r0, #0
 8010306:	d1ed      	bne.n	80102e4 <__gethex+0x2a2>
 8010308:	4629      	mov	r1, r5
 801030a:	9802      	ldr	r0, [sp, #8]
 801030c:	f000 f9cc 	bl	80106a8 <_Bfree>
 8010310:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010312:	2300      	movs	r3, #0
 8010314:	6013      	str	r3, [r2, #0]
 8010316:	2750      	movs	r7, #80	; 0x50
 8010318:	e71b      	b.n	8010152 <__gethex+0x110>
 801031a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801031c:	2b00      	cmp	r3, #0
 801031e:	d0e1      	beq.n	80102e4 <__gethex+0x2a2>
 8010320:	e7f2      	b.n	8010308 <__gethex+0x2c6>
 8010322:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010324:	2b00      	cmp	r3, #0
 8010326:	d1dd      	bne.n	80102e4 <__gethex+0x2a2>
 8010328:	e7ee      	b.n	8010308 <__gethex+0x2c6>
 801032a:	1e67      	subs	r7, r4, #1
 801032c:	f1ba 0f00 	cmp.w	sl, #0
 8010330:	d131      	bne.n	8010396 <__gethex+0x354>
 8010332:	b127      	cbz	r7, 801033e <__gethex+0x2fc>
 8010334:	4639      	mov	r1, r7
 8010336:	4628      	mov	r0, r5
 8010338:	f000 fd60 	bl	8010dfc <__any_on>
 801033c:	4682      	mov	sl, r0
 801033e:	117a      	asrs	r2, r7, #5
 8010340:	2301      	movs	r3, #1
 8010342:	f007 071f 	and.w	r7, r7, #31
 8010346:	fa03 f707 	lsl.w	r7, r3, r7
 801034a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801034e:	4621      	mov	r1, r4
 8010350:	421f      	tst	r7, r3
 8010352:	4628      	mov	r0, r5
 8010354:	bf18      	it	ne
 8010356:	f04a 0a02 	orrne.w	sl, sl, #2
 801035a:	1b36      	subs	r6, r6, r4
 801035c:	f7ff fe22 	bl	800ffa4 <rshift>
 8010360:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010364:	2702      	movs	r7, #2
 8010366:	f1ba 0f00 	cmp.w	sl, #0
 801036a:	d048      	beq.n	80103fe <__gethex+0x3bc>
 801036c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010370:	2b02      	cmp	r3, #2
 8010372:	d015      	beq.n	80103a0 <__gethex+0x35e>
 8010374:	2b03      	cmp	r3, #3
 8010376:	d017      	beq.n	80103a8 <__gethex+0x366>
 8010378:	2b01      	cmp	r3, #1
 801037a:	d109      	bne.n	8010390 <__gethex+0x34e>
 801037c:	f01a 0f02 	tst.w	sl, #2
 8010380:	d006      	beq.n	8010390 <__gethex+0x34e>
 8010382:	f8d9 3000 	ldr.w	r3, [r9]
 8010386:	ea4a 0a03 	orr.w	sl, sl, r3
 801038a:	f01a 0f01 	tst.w	sl, #1
 801038e:	d10e      	bne.n	80103ae <__gethex+0x36c>
 8010390:	f047 0710 	orr.w	r7, r7, #16
 8010394:	e033      	b.n	80103fe <__gethex+0x3bc>
 8010396:	f04f 0a01 	mov.w	sl, #1
 801039a:	e7d0      	b.n	801033e <__gethex+0x2fc>
 801039c:	2701      	movs	r7, #1
 801039e:	e7e2      	b.n	8010366 <__gethex+0x324>
 80103a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103a2:	f1c3 0301 	rsb	r3, r3, #1
 80103a6:	9315      	str	r3, [sp, #84]	; 0x54
 80103a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d0f0      	beq.n	8010390 <__gethex+0x34e>
 80103ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80103b2:	f105 0314 	add.w	r3, r5, #20
 80103b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80103ba:	eb03 010a 	add.w	r1, r3, sl
 80103be:	f04f 0c00 	mov.w	ip, #0
 80103c2:	4618      	mov	r0, r3
 80103c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80103c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80103cc:	d01c      	beq.n	8010408 <__gethex+0x3c6>
 80103ce:	3201      	adds	r2, #1
 80103d0:	6002      	str	r2, [r0, #0]
 80103d2:	2f02      	cmp	r7, #2
 80103d4:	f105 0314 	add.w	r3, r5, #20
 80103d8:	d138      	bne.n	801044c <__gethex+0x40a>
 80103da:	f8d8 2000 	ldr.w	r2, [r8]
 80103de:	3a01      	subs	r2, #1
 80103e0:	42b2      	cmp	r2, r6
 80103e2:	d10a      	bne.n	80103fa <__gethex+0x3b8>
 80103e4:	1171      	asrs	r1, r6, #5
 80103e6:	2201      	movs	r2, #1
 80103e8:	f006 061f 	and.w	r6, r6, #31
 80103ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80103f0:	fa02 f606 	lsl.w	r6, r2, r6
 80103f4:	421e      	tst	r6, r3
 80103f6:	bf18      	it	ne
 80103f8:	4617      	movne	r7, r2
 80103fa:	f047 0720 	orr.w	r7, r7, #32
 80103fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010400:	601d      	str	r5, [r3, #0]
 8010402:	9b06      	ldr	r3, [sp, #24]
 8010404:	601c      	str	r4, [r3, #0]
 8010406:	e6a4      	b.n	8010152 <__gethex+0x110>
 8010408:	4299      	cmp	r1, r3
 801040a:	f843 cc04 	str.w	ip, [r3, #-4]
 801040e:	d8d8      	bhi.n	80103c2 <__gethex+0x380>
 8010410:	68ab      	ldr	r3, [r5, #8]
 8010412:	4599      	cmp	r9, r3
 8010414:	db12      	blt.n	801043c <__gethex+0x3fa>
 8010416:	6869      	ldr	r1, [r5, #4]
 8010418:	9802      	ldr	r0, [sp, #8]
 801041a:	3101      	adds	r1, #1
 801041c:	f000 f910 	bl	8010640 <_Balloc>
 8010420:	692a      	ldr	r2, [r5, #16]
 8010422:	3202      	adds	r2, #2
 8010424:	f105 010c 	add.w	r1, r5, #12
 8010428:	4683      	mov	fp, r0
 801042a:	0092      	lsls	r2, r2, #2
 801042c:	300c      	adds	r0, #12
 801042e:	f7fd f8b1 	bl	800d594 <memcpy>
 8010432:	4629      	mov	r1, r5
 8010434:	9802      	ldr	r0, [sp, #8]
 8010436:	f000 f937 	bl	80106a8 <_Bfree>
 801043a:	465d      	mov	r5, fp
 801043c:	692b      	ldr	r3, [r5, #16]
 801043e:	1c5a      	adds	r2, r3, #1
 8010440:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010444:	612a      	str	r2, [r5, #16]
 8010446:	2201      	movs	r2, #1
 8010448:	615a      	str	r2, [r3, #20]
 801044a:	e7c2      	b.n	80103d2 <__gethex+0x390>
 801044c:	692a      	ldr	r2, [r5, #16]
 801044e:	454a      	cmp	r2, r9
 8010450:	dd0b      	ble.n	801046a <__gethex+0x428>
 8010452:	2101      	movs	r1, #1
 8010454:	4628      	mov	r0, r5
 8010456:	f7ff fda5 	bl	800ffa4 <rshift>
 801045a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801045e:	3401      	adds	r4, #1
 8010460:	42a3      	cmp	r3, r4
 8010462:	f6ff aed9 	blt.w	8010218 <__gethex+0x1d6>
 8010466:	2701      	movs	r7, #1
 8010468:	e7c7      	b.n	80103fa <__gethex+0x3b8>
 801046a:	f016 061f 	ands.w	r6, r6, #31
 801046e:	d0fa      	beq.n	8010466 <__gethex+0x424>
 8010470:	449a      	add	sl, r3
 8010472:	f1c6 0620 	rsb	r6, r6, #32
 8010476:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801047a:	f000 f9a5 	bl	80107c8 <__hi0bits>
 801047e:	42b0      	cmp	r0, r6
 8010480:	dbe7      	blt.n	8010452 <__gethex+0x410>
 8010482:	e7f0      	b.n	8010466 <__gethex+0x424>

08010484 <L_shift>:
 8010484:	f1c2 0208 	rsb	r2, r2, #8
 8010488:	0092      	lsls	r2, r2, #2
 801048a:	b570      	push	{r4, r5, r6, lr}
 801048c:	f1c2 0620 	rsb	r6, r2, #32
 8010490:	6843      	ldr	r3, [r0, #4]
 8010492:	6804      	ldr	r4, [r0, #0]
 8010494:	fa03 f506 	lsl.w	r5, r3, r6
 8010498:	432c      	orrs	r4, r5
 801049a:	40d3      	lsrs	r3, r2
 801049c:	6004      	str	r4, [r0, #0]
 801049e:	f840 3f04 	str.w	r3, [r0, #4]!
 80104a2:	4288      	cmp	r0, r1
 80104a4:	d3f4      	bcc.n	8010490 <L_shift+0xc>
 80104a6:	bd70      	pop	{r4, r5, r6, pc}

080104a8 <__match>:
 80104a8:	b530      	push	{r4, r5, lr}
 80104aa:	6803      	ldr	r3, [r0, #0]
 80104ac:	3301      	adds	r3, #1
 80104ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80104b2:	b914      	cbnz	r4, 80104ba <__match+0x12>
 80104b4:	6003      	str	r3, [r0, #0]
 80104b6:	2001      	movs	r0, #1
 80104b8:	bd30      	pop	{r4, r5, pc}
 80104ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80104c2:	2d19      	cmp	r5, #25
 80104c4:	bf98      	it	ls
 80104c6:	3220      	addls	r2, #32
 80104c8:	42a2      	cmp	r2, r4
 80104ca:	d0f0      	beq.n	80104ae <__match+0x6>
 80104cc:	2000      	movs	r0, #0
 80104ce:	e7f3      	b.n	80104b8 <__match+0x10>

080104d0 <__hexnan>:
 80104d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d4:	680b      	ldr	r3, [r1, #0]
 80104d6:	6801      	ldr	r1, [r0, #0]
 80104d8:	115f      	asrs	r7, r3, #5
 80104da:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80104de:	f013 031f 	ands.w	r3, r3, #31
 80104e2:	b087      	sub	sp, #28
 80104e4:	bf18      	it	ne
 80104e6:	3704      	addne	r7, #4
 80104e8:	2500      	movs	r5, #0
 80104ea:	1f3e      	subs	r6, r7, #4
 80104ec:	4682      	mov	sl, r0
 80104ee:	4690      	mov	r8, r2
 80104f0:	9301      	str	r3, [sp, #4]
 80104f2:	f847 5c04 	str.w	r5, [r7, #-4]
 80104f6:	46b1      	mov	r9, r6
 80104f8:	4634      	mov	r4, r6
 80104fa:	9502      	str	r5, [sp, #8]
 80104fc:	46ab      	mov	fp, r5
 80104fe:	784a      	ldrb	r2, [r1, #1]
 8010500:	1c4b      	adds	r3, r1, #1
 8010502:	9303      	str	r3, [sp, #12]
 8010504:	b342      	cbz	r2, 8010558 <__hexnan+0x88>
 8010506:	4610      	mov	r0, r2
 8010508:	9105      	str	r1, [sp, #20]
 801050a:	9204      	str	r2, [sp, #16]
 801050c:	f7ff fd84 	bl	8010018 <__hexdig_fun>
 8010510:	2800      	cmp	r0, #0
 8010512:	d143      	bne.n	801059c <__hexnan+0xcc>
 8010514:	9a04      	ldr	r2, [sp, #16]
 8010516:	9905      	ldr	r1, [sp, #20]
 8010518:	2a20      	cmp	r2, #32
 801051a:	d818      	bhi.n	801054e <__hexnan+0x7e>
 801051c:	9b02      	ldr	r3, [sp, #8]
 801051e:	459b      	cmp	fp, r3
 8010520:	dd13      	ble.n	801054a <__hexnan+0x7a>
 8010522:	454c      	cmp	r4, r9
 8010524:	d206      	bcs.n	8010534 <__hexnan+0x64>
 8010526:	2d07      	cmp	r5, #7
 8010528:	dc04      	bgt.n	8010534 <__hexnan+0x64>
 801052a:	462a      	mov	r2, r5
 801052c:	4649      	mov	r1, r9
 801052e:	4620      	mov	r0, r4
 8010530:	f7ff ffa8 	bl	8010484 <L_shift>
 8010534:	4544      	cmp	r4, r8
 8010536:	d944      	bls.n	80105c2 <__hexnan+0xf2>
 8010538:	2300      	movs	r3, #0
 801053a:	f1a4 0904 	sub.w	r9, r4, #4
 801053e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010542:	f8cd b008 	str.w	fp, [sp, #8]
 8010546:	464c      	mov	r4, r9
 8010548:	461d      	mov	r5, r3
 801054a:	9903      	ldr	r1, [sp, #12]
 801054c:	e7d7      	b.n	80104fe <__hexnan+0x2e>
 801054e:	2a29      	cmp	r2, #41	; 0x29
 8010550:	d14a      	bne.n	80105e8 <__hexnan+0x118>
 8010552:	3102      	adds	r1, #2
 8010554:	f8ca 1000 	str.w	r1, [sl]
 8010558:	f1bb 0f00 	cmp.w	fp, #0
 801055c:	d044      	beq.n	80105e8 <__hexnan+0x118>
 801055e:	454c      	cmp	r4, r9
 8010560:	d206      	bcs.n	8010570 <__hexnan+0xa0>
 8010562:	2d07      	cmp	r5, #7
 8010564:	dc04      	bgt.n	8010570 <__hexnan+0xa0>
 8010566:	462a      	mov	r2, r5
 8010568:	4649      	mov	r1, r9
 801056a:	4620      	mov	r0, r4
 801056c:	f7ff ff8a 	bl	8010484 <L_shift>
 8010570:	4544      	cmp	r4, r8
 8010572:	d928      	bls.n	80105c6 <__hexnan+0xf6>
 8010574:	4643      	mov	r3, r8
 8010576:	f854 2b04 	ldr.w	r2, [r4], #4
 801057a:	f843 2b04 	str.w	r2, [r3], #4
 801057e:	42a6      	cmp	r6, r4
 8010580:	d2f9      	bcs.n	8010576 <__hexnan+0xa6>
 8010582:	2200      	movs	r2, #0
 8010584:	f843 2b04 	str.w	r2, [r3], #4
 8010588:	429e      	cmp	r6, r3
 801058a:	d2fb      	bcs.n	8010584 <__hexnan+0xb4>
 801058c:	6833      	ldr	r3, [r6, #0]
 801058e:	b91b      	cbnz	r3, 8010598 <__hexnan+0xc8>
 8010590:	4546      	cmp	r6, r8
 8010592:	d127      	bne.n	80105e4 <__hexnan+0x114>
 8010594:	2301      	movs	r3, #1
 8010596:	6033      	str	r3, [r6, #0]
 8010598:	2005      	movs	r0, #5
 801059a:	e026      	b.n	80105ea <__hexnan+0x11a>
 801059c:	3501      	adds	r5, #1
 801059e:	2d08      	cmp	r5, #8
 80105a0:	f10b 0b01 	add.w	fp, fp, #1
 80105a4:	dd06      	ble.n	80105b4 <__hexnan+0xe4>
 80105a6:	4544      	cmp	r4, r8
 80105a8:	d9cf      	bls.n	801054a <__hexnan+0x7a>
 80105aa:	2300      	movs	r3, #0
 80105ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80105b0:	2501      	movs	r5, #1
 80105b2:	3c04      	subs	r4, #4
 80105b4:	6822      	ldr	r2, [r4, #0]
 80105b6:	f000 000f 	and.w	r0, r0, #15
 80105ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80105be:	6020      	str	r0, [r4, #0]
 80105c0:	e7c3      	b.n	801054a <__hexnan+0x7a>
 80105c2:	2508      	movs	r5, #8
 80105c4:	e7c1      	b.n	801054a <__hexnan+0x7a>
 80105c6:	9b01      	ldr	r3, [sp, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d0df      	beq.n	801058c <__hexnan+0xbc>
 80105cc:	f04f 32ff 	mov.w	r2, #4294967295
 80105d0:	f1c3 0320 	rsb	r3, r3, #32
 80105d4:	fa22 f303 	lsr.w	r3, r2, r3
 80105d8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80105dc:	401a      	ands	r2, r3
 80105de:	f847 2c04 	str.w	r2, [r7, #-4]
 80105e2:	e7d3      	b.n	801058c <__hexnan+0xbc>
 80105e4:	3e04      	subs	r6, #4
 80105e6:	e7d1      	b.n	801058c <__hexnan+0xbc>
 80105e8:	2004      	movs	r0, #4
 80105ea:	b007      	add	sp, #28
 80105ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080105f0 <__locale_ctype_ptr_l>:
 80105f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80105f4:	4770      	bx	lr

080105f6 <__localeconv_l>:
 80105f6:	30f0      	adds	r0, #240	; 0xf0
 80105f8:	4770      	bx	lr
	...

080105fc <_localeconv_r>:
 80105fc:	4b04      	ldr	r3, [pc, #16]	; (8010610 <_localeconv_r+0x14>)
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	6a18      	ldr	r0, [r3, #32]
 8010602:	4b04      	ldr	r3, [pc, #16]	; (8010614 <_localeconv_r+0x18>)
 8010604:	2800      	cmp	r0, #0
 8010606:	bf08      	it	eq
 8010608:	4618      	moveq	r0, r3
 801060a:	30f0      	adds	r0, #240	; 0xf0
 801060c:	4770      	bx	lr
 801060e:	bf00      	nop
 8010610:	20000190 	.word	0x20000190
 8010614:	200001f4 	.word	0x200001f4

08010618 <__ascii_mbtowc>:
 8010618:	b082      	sub	sp, #8
 801061a:	b901      	cbnz	r1, 801061e <__ascii_mbtowc+0x6>
 801061c:	a901      	add	r1, sp, #4
 801061e:	b142      	cbz	r2, 8010632 <__ascii_mbtowc+0x1a>
 8010620:	b14b      	cbz	r3, 8010636 <__ascii_mbtowc+0x1e>
 8010622:	7813      	ldrb	r3, [r2, #0]
 8010624:	600b      	str	r3, [r1, #0]
 8010626:	7812      	ldrb	r2, [r2, #0]
 8010628:	1c10      	adds	r0, r2, #0
 801062a:	bf18      	it	ne
 801062c:	2001      	movne	r0, #1
 801062e:	b002      	add	sp, #8
 8010630:	4770      	bx	lr
 8010632:	4610      	mov	r0, r2
 8010634:	e7fb      	b.n	801062e <__ascii_mbtowc+0x16>
 8010636:	f06f 0001 	mvn.w	r0, #1
 801063a:	e7f8      	b.n	801062e <__ascii_mbtowc+0x16>

0801063c <__malloc_lock>:
 801063c:	4770      	bx	lr

0801063e <__malloc_unlock>:
 801063e:	4770      	bx	lr

08010640 <_Balloc>:
 8010640:	b570      	push	{r4, r5, r6, lr}
 8010642:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010644:	4604      	mov	r4, r0
 8010646:	460e      	mov	r6, r1
 8010648:	b93d      	cbnz	r5, 801065a <_Balloc+0x1a>
 801064a:	2010      	movs	r0, #16
 801064c:	f7fc ff92 	bl	800d574 <malloc>
 8010650:	6260      	str	r0, [r4, #36]	; 0x24
 8010652:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010656:	6005      	str	r5, [r0, #0]
 8010658:	60c5      	str	r5, [r0, #12]
 801065a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801065c:	68eb      	ldr	r3, [r5, #12]
 801065e:	b183      	cbz	r3, 8010682 <_Balloc+0x42>
 8010660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010668:	b9b8      	cbnz	r0, 801069a <_Balloc+0x5a>
 801066a:	2101      	movs	r1, #1
 801066c:	fa01 f506 	lsl.w	r5, r1, r6
 8010670:	1d6a      	adds	r2, r5, #5
 8010672:	0092      	lsls	r2, r2, #2
 8010674:	4620      	mov	r0, r4
 8010676:	f000 fbe2 	bl	8010e3e <_calloc_r>
 801067a:	b160      	cbz	r0, 8010696 <_Balloc+0x56>
 801067c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010680:	e00e      	b.n	80106a0 <_Balloc+0x60>
 8010682:	2221      	movs	r2, #33	; 0x21
 8010684:	2104      	movs	r1, #4
 8010686:	4620      	mov	r0, r4
 8010688:	f000 fbd9 	bl	8010e3e <_calloc_r>
 801068c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801068e:	60e8      	str	r0, [r5, #12]
 8010690:	68db      	ldr	r3, [r3, #12]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d1e4      	bne.n	8010660 <_Balloc+0x20>
 8010696:	2000      	movs	r0, #0
 8010698:	bd70      	pop	{r4, r5, r6, pc}
 801069a:	6802      	ldr	r2, [r0, #0]
 801069c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80106a0:	2300      	movs	r3, #0
 80106a2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80106a6:	e7f7      	b.n	8010698 <_Balloc+0x58>

080106a8 <_Bfree>:
 80106a8:	b570      	push	{r4, r5, r6, lr}
 80106aa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80106ac:	4606      	mov	r6, r0
 80106ae:	460d      	mov	r5, r1
 80106b0:	b93c      	cbnz	r4, 80106c2 <_Bfree+0x1a>
 80106b2:	2010      	movs	r0, #16
 80106b4:	f7fc ff5e 	bl	800d574 <malloc>
 80106b8:	6270      	str	r0, [r6, #36]	; 0x24
 80106ba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80106be:	6004      	str	r4, [r0, #0]
 80106c0:	60c4      	str	r4, [r0, #12]
 80106c2:	b13d      	cbz	r5, 80106d4 <_Bfree+0x2c>
 80106c4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80106c6:	686a      	ldr	r2, [r5, #4]
 80106c8:	68db      	ldr	r3, [r3, #12]
 80106ca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80106ce:	6029      	str	r1, [r5, #0]
 80106d0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80106d4:	bd70      	pop	{r4, r5, r6, pc}

080106d6 <__multadd>:
 80106d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106da:	690d      	ldr	r5, [r1, #16]
 80106dc:	461f      	mov	r7, r3
 80106de:	4606      	mov	r6, r0
 80106e0:	460c      	mov	r4, r1
 80106e2:	f101 0c14 	add.w	ip, r1, #20
 80106e6:	2300      	movs	r3, #0
 80106e8:	f8dc 0000 	ldr.w	r0, [ip]
 80106ec:	b281      	uxth	r1, r0
 80106ee:	fb02 7101 	mla	r1, r2, r1, r7
 80106f2:	0c0f      	lsrs	r7, r1, #16
 80106f4:	0c00      	lsrs	r0, r0, #16
 80106f6:	fb02 7000 	mla	r0, r2, r0, r7
 80106fa:	b289      	uxth	r1, r1
 80106fc:	3301      	adds	r3, #1
 80106fe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010702:	429d      	cmp	r5, r3
 8010704:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010708:	f84c 1b04 	str.w	r1, [ip], #4
 801070c:	dcec      	bgt.n	80106e8 <__multadd+0x12>
 801070e:	b1d7      	cbz	r7, 8010746 <__multadd+0x70>
 8010710:	68a3      	ldr	r3, [r4, #8]
 8010712:	42ab      	cmp	r3, r5
 8010714:	dc12      	bgt.n	801073c <__multadd+0x66>
 8010716:	6861      	ldr	r1, [r4, #4]
 8010718:	4630      	mov	r0, r6
 801071a:	3101      	adds	r1, #1
 801071c:	f7ff ff90 	bl	8010640 <_Balloc>
 8010720:	6922      	ldr	r2, [r4, #16]
 8010722:	3202      	adds	r2, #2
 8010724:	f104 010c 	add.w	r1, r4, #12
 8010728:	4680      	mov	r8, r0
 801072a:	0092      	lsls	r2, r2, #2
 801072c:	300c      	adds	r0, #12
 801072e:	f7fc ff31 	bl	800d594 <memcpy>
 8010732:	4621      	mov	r1, r4
 8010734:	4630      	mov	r0, r6
 8010736:	f7ff ffb7 	bl	80106a8 <_Bfree>
 801073a:	4644      	mov	r4, r8
 801073c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010740:	3501      	adds	r5, #1
 8010742:	615f      	str	r7, [r3, #20]
 8010744:	6125      	str	r5, [r4, #16]
 8010746:	4620      	mov	r0, r4
 8010748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801074c <__s2b>:
 801074c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010750:	460c      	mov	r4, r1
 8010752:	4615      	mov	r5, r2
 8010754:	461f      	mov	r7, r3
 8010756:	2209      	movs	r2, #9
 8010758:	3308      	adds	r3, #8
 801075a:	4606      	mov	r6, r0
 801075c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010760:	2100      	movs	r1, #0
 8010762:	2201      	movs	r2, #1
 8010764:	429a      	cmp	r2, r3
 8010766:	db20      	blt.n	80107aa <__s2b+0x5e>
 8010768:	4630      	mov	r0, r6
 801076a:	f7ff ff69 	bl	8010640 <_Balloc>
 801076e:	9b08      	ldr	r3, [sp, #32]
 8010770:	6143      	str	r3, [r0, #20]
 8010772:	2d09      	cmp	r5, #9
 8010774:	f04f 0301 	mov.w	r3, #1
 8010778:	6103      	str	r3, [r0, #16]
 801077a:	dd19      	ble.n	80107b0 <__s2b+0x64>
 801077c:	f104 0809 	add.w	r8, r4, #9
 8010780:	46c1      	mov	r9, r8
 8010782:	442c      	add	r4, r5
 8010784:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010788:	4601      	mov	r1, r0
 801078a:	3b30      	subs	r3, #48	; 0x30
 801078c:	220a      	movs	r2, #10
 801078e:	4630      	mov	r0, r6
 8010790:	f7ff ffa1 	bl	80106d6 <__multadd>
 8010794:	45a1      	cmp	r9, r4
 8010796:	d1f5      	bne.n	8010784 <__s2b+0x38>
 8010798:	eb08 0405 	add.w	r4, r8, r5
 801079c:	3c08      	subs	r4, #8
 801079e:	1b2d      	subs	r5, r5, r4
 80107a0:	1963      	adds	r3, r4, r5
 80107a2:	42bb      	cmp	r3, r7
 80107a4:	db07      	blt.n	80107b6 <__s2b+0x6a>
 80107a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107aa:	0052      	lsls	r2, r2, #1
 80107ac:	3101      	adds	r1, #1
 80107ae:	e7d9      	b.n	8010764 <__s2b+0x18>
 80107b0:	340a      	adds	r4, #10
 80107b2:	2509      	movs	r5, #9
 80107b4:	e7f3      	b.n	801079e <__s2b+0x52>
 80107b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80107ba:	4601      	mov	r1, r0
 80107bc:	3b30      	subs	r3, #48	; 0x30
 80107be:	220a      	movs	r2, #10
 80107c0:	4630      	mov	r0, r6
 80107c2:	f7ff ff88 	bl	80106d6 <__multadd>
 80107c6:	e7eb      	b.n	80107a0 <__s2b+0x54>

080107c8 <__hi0bits>:
 80107c8:	0c02      	lsrs	r2, r0, #16
 80107ca:	0412      	lsls	r2, r2, #16
 80107cc:	4603      	mov	r3, r0
 80107ce:	b9b2      	cbnz	r2, 80107fe <__hi0bits+0x36>
 80107d0:	0403      	lsls	r3, r0, #16
 80107d2:	2010      	movs	r0, #16
 80107d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80107d8:	bf04      	itt	eq
 80107da:	021b      	lsleq	r3, r3, #8
 80107dc:	3008      	addeq	r0, #8
 80107de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80107e2:	bf04      	itt	eq
 80107e4:	011b      	lsleq	r3, r3, #4
 80107e6:	3004      	addeq	r0, #4
 80107e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80107ec:	bf04      	itt	eq
 80107ee:	009b      	lsleq	r3, r3, #2
 80107f0:	3002      	addeq	r0, #2
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	db06      	blt.n	8010804 <__hi0bits+0x3c>
 80107f6:	005b      	lsls	r3, r3, #1
 80107f8:	d503      	bpl.n	8010802 <__hi0bits+0x3a>
 80107fa:	3001      	adds	r0, #1
 80107fc:	4770      	bx	lr
 80107fe:	2000      	movs	r0, #0
 8010800:	e7e8      	b.n	80107d4 <__hi0bits+0xc>
 8010802:	2020      	movs	r0, #32
 8010804:	4770      	bx	lr

08010806 <__lo0bits>:
 8010806:	6803      	ldr	r3, [r0, #0]
 8010808:	f013 0207 	ands.w	r2, r3, #7
 801080c:	4601      	mov	r1, r0
 801080e:	d00b      	beq.n	8010828 <__lo0bits+0x22>
 8010810:	07da      	lsls	r2, r3, #31
 8010812:	d423      	bmi.n	801085c <__lo0bits+0x56>
 8010814:	0798      	lsls	r0, r3, #30
 8010816:	bf49      	itett	mi
 8010818:	085b      	lsrmi	r3, r3, #1
 801081a:	089b      	lsrpl	r3, r3, #2
 801081c:	2001      	movmi	r0, #1
 801081e:	600b      	strmi	r3, [r1, #0]
 8010820:	bf5c      	itt	pl
 8010822:	600b      	strpl	r3, [r1, #0]
 8010824:	2002      	movpl	r0, #2
 8010826:	4770      	bx	lr
 8010828:	b298      	uxth	r0, r3
 801082a:	b9a8      	cbnz	r0, 8010858 <__lo0bits+0x52>
 801082c:	0c1b      	lsrs	r3, r3, #16
 801082e:	2010      	movs	r0, #16
 8010830:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010834:	bf04      	itt	eq
 8010836:	0a1b      	lsreq	r3, r3, #8
 8010838:	3008      	addeq	r0, #8
 801083a:	071a      	lsls	r2, r3, #28
 801083c:	bf04      	itt	eq
 801083e:	091b      	lsreq	r3, r3, #4
 8010840:	3004      	addeq	r0, #4
 8010842:	079a      	lsls	r2, r3, #30
 8010844:	bf04      	itt	eq
 8010846:	089b      	lsreq	r3, r3, #2
 8010848:	3002      	addeq	r0, #2
 801084a:	07da      	lsls	r2, r3, #31
 801084c:	d402      	bmi.n	8010854 <__lo0bits+0x4e>
 801084e:	085b      	lsrs	r3, r3, #1
 8010850:	d006      	beq.n	8010860 <__lo0bits+0x5a>
 8010852:	3001      	adds	r0, #1
 8010854:	600b      	str	r3, [r1, #0]
 8010856:	4770      	bx	lr
 8010858:	4610      	mov	r0, r2
 801085a:	e7e9      	b.n	8010830 <__lo0bits+0x2a>
 801085c:	2000      	movs	r0, #0
 801085e:	4770      	bx	lr
 8010860:	2020      	movs	r0, #32
 8010862:	4770      	bx	lr

08010864 <__i2b>:
 8010864:	b510      	push	{r4, lr}
 8010866:	460c      	mov	r4, r1
 8010868:	2101      	movs	r1, #1
 801086a:	f7ff fee9 	bl	8010640 <_Balloc>
 801086e:	2201      	movs	r2, #1
 8010870:	6144      	str	r4, [r0, #20]
 8010872:	6102      	str	r2, [r0, #16]
 8010874:	bd10      	pop	{r4, pc}

08010876 <__multiply>:
 8010876:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801087a:	4614      	mov	r4, r2
 801087c:	690a      	ldr	r2, [r1, #16]
 801087e:	6923      	ldr	r3, [r4, #16]
 8010880:	429a      	cmp	r2, r3
 8010882:	bfb8      	it	lt
 8010884:	460b      	movlt	r3, r1
 8010886:	4688      	mov	r8, r1
 8010888:	bfbc      	itt	lt
 801088a:	46a0      	movlt	r8, r4
 801088c:	461c      	movlt	r4, r3
 801088e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010892:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010896:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801089a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801089e:	eb07 0609 	add.w	r6, r7, r9
 80108a2:	42b3      	cmp	r3, r6
 80108a4:	bfb8      	it	lt
 80108a6:	3101      	addlt	r1, #1
 80108a8:	f7ff feca 	bl	8010640 <_Balloc>
 80108ac:	f100 0514 	add.w	r5, r0, #20
 80108b0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80108b4:	462b      	mov	r3, r5
 80108b6:	2200      	movs	r2, #0
 80108b8:	4573      	cmp	r3, lr
 80108ba:	d316      	bcc.n	80108ea <__multiply+0x74>
 80108bc:	f104 0214 	add.w	r2, r4, #20
 80108c0:	f108 0114 	add.w	r1, r8, #20
 80108c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80108c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80108cc:	9300      	str	r3, [sp, #0]
 80108ce:	9b00      	ldr	r3, [sp, #0]
 80108d0:	9201      	str	r2, [sp, #4]
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d80c      	bhi.n	80108f0 <__multiply+0x7a>
 80108d6:	2e00      	cmp	r6, #0
 80108d8:	dd03      	ble.n	80108e2 <__multiply+0x6c>
 80108da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d05d      	beq.n	801099e <__multiply+0x128>
 80108e2:	6106      	str	r6, [r0, #16]
 80108e4:	b003      	add	sp, #12
 80108e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108ea:	f843 2b04 	str.w	r2, [r3], #4
 80108ee:	e7e3      	b.n	80108b8 <__multiply+0x42>
 80108f0:	f8b2 b000 	ldrh.w	fp, [r2]
 80108f4:	f1bb 0f00 	cmp.w	fp, #0
 80108f8:	d023      	beq.n	8010942 <__multiply+0xcc>
 80108fa:	4689      	mov	r9, r1
 80108fc:	46ac      	mov	ip, r5
 80108fe:	f04f 0800 	mov.w	r8, #0
 8010902:	f859 4b04 	ldr.w	r4, [r9], #4
 8010906:	f8dc a000 	ldr.w	sl, [ip]
 801090a:	b2a3      	uxth	r3, r4
 801090c:	fa1f fa8a 	uxth.w	sl, sl
 8010910:	fb0b a303 	mla	r3, fp, r3, sl
 8010914:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010918:	f8dc 4000 	ldr.w	r4, [ip]
 801091c:	4443      	add	r3, r8
 801091e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010922:	fb0b 840a 	mla	r4, fp, sl, r8
 8010926:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801092a:	46e2      	mov	sl, ip
 801092c:	b29b      	uxth	r3, r3
 801092e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010932:	454f      	cmp	r7, r9
 8010934:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010938:	f84a 3b04 	str.w	r3, [sl], #4
 801093c:	d82b      	bhi.n	8010996 <__multiply+0x120>
 801093e:	f8cc 8004 	str.w	r8, [ip, #4]
 8010942:	9b01      	ldr	r3, [sp, #4]
 8010944:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010948:	3204      	adds	r2, #4
 801094a:	f1ba 0f00 	cmp.w	sl, #0
 801094e:	d020      	beq.n	8010992 <__multiply+0x11c>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	4689      	mov	r9, r1
 8010954:	46a8      	mov	r8, r5
 8010956:	f04f 0b00 	mov.w	fp, #0
 801095a:	f8b9 c000 	ldrh.w	ip, [r9]
 801095e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010962:	fb0a 440c 	mla	r4, sl, ip, r4
 8010966:	445c      	add	r4, fp
 8010968:	46c4      	mov	ip, r8
 801096a:	b29b      	uxth	r3, r3
 801096c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010970:	f84c 3b04 	str.w	r3, [ip], #4
 8010974:	f859 3b04 	ldr.w	r3, [r9], #4
 8010978:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801097c:	0c1b      	lsrs	r3, r3, #16
 801097e:	fb0a b303 	mla	r3, sl, r3, fp
 8010982:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010986:	454f      	cmp	r7, r9
 8010988:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801098c:	d805      	bhi.n	801099a <__multiply+0x124>
 801098e:	f8c8 3004 	str.w	r3, [r8, #4]
 8010992:	3504      	adds	r5, #4
 8010994:	e79b      	b.n	80108ce <__multiply+0x58>
 8010996:	46d4      	mov	ip, sl
 8010998:	e7b3      	b.n	8010902 <__multiply+0x8c>
 801099a:	46e0      	mov	r8, ip
 801099c:	e7dd      	b.n	801095a <__multiply+0xe4>
 801099e:	3e01      	subs	r6, #1
 80109a0:	e799      	b.n	80108d6 <__multiply+0x60>
	...

080109a4 <__pow5mult>:
 80109a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109a8:	4615      	mov	r5, r2
 80109aa:	f012 0203 	ands.w	r2, r2, #3
 80109ae:	4606      	mov	r6, r0
 80109b0:	460f      	mov	r7, r1
 80109b2:	d007      	beq.n	80109c4 <__pow5mult+0x20>
 80109b4:	3a01      	subs	r2, #1
 80109b6:	4c21      	ldr	r4, [pc, #132]	; (8010a3c <__pow5mult+0x98>)
 80109b8:	2300      	movs	r3, #0
 80109ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80109be:	f7ff fe8a 	bl	80106d6 <__multadd>
 80109c2:	4607      	mov	r7, r0
 80109c4:	10ad      	asrs	r5, r5, #2
 80109c6:	d035      	beq.n	8010a34 <__pow5mult+0x90>
 80109c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80109ca:	b93c      	cbnz	r4, 80109dc <__pow5mult+0x38>
 80109cc:	2010      	movs	r0, #16
 80109ce:	f7fc fdd1 	bl	800d574 <malloc>
 80109d2:	6270      	str	r0, [r6, #36]	; 0x24
 80109d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80109d8:	6004      	str	r4, [r0, #0]
 80109da:	60c4      	str	r4, [r0, #12]
 80109dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80109e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80109e4:	b94c      	cbnz	r4, 80109fa <__pow5mult+0x56>
 80109e6:	f240 2171 	movw	r1, #625	; 0x271
 80109ea:	4630      	mov	r0, r6
 80109ec:	f7ff ff3a 	bl	8010864 <__i2b>
 80109f0:	2300      	movs	r3, #0
 80109f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80109f6:	4604      	mov	r4, r0
 80109f8:	6003      	str	r3, [r0, #0]
 80109fa:	f04f 0800 	mov.w	r8, #0
 80109fe:	07eb      	lsls	r3, r5, #31
 8010a00:	d50a      	bpl.n	8010a18 <__pow5mult+0x74>
 8010a02:	4639      	mov	r1, r7
 8010a04:	4622      	mov	r2, r4
 8010a06:	4630      	mov	r0, r6
 8010a08:	f7ff ff35 	bl	8010876 <__multiply>
 8010a0c:	4639      	mov	r1, r7
 8010a0e:	4681      	mov	r9, r0
 8010a10:	4630      	mov	r0, r6
 8010a12:	f7ff fe49 	bl	80106a8 <_Bfree>
 8010a16:	464f      	mov	r7, r9
 8010a18:	106d      	asrs	r5, r5, #1
 8010a1a:	d00b      	beq.n	8010a34 <__pow5mult+0x90>
 8010a1c:	6820      	ldr	r0, [r4, #0]
 8010a1e:	b938      	cbnz	r0, 8010a30 <__pow5mult+0x8c>
 8010a20:	4622      	mov	r2, r4
 8010a22:	4621      	mov	r1, r4
 8010a24:	4630      	mov	r0, r6
 8010a26:	f7ff ff26 	bl	8010876 <__multiply>
 8010a2a:	6020      	str	r0, [r4, #0]
 8010a2c:	f8c0 8000 	str.w	r8, [r0]
 8010a30:	4604      	mov	r4, r0
 8010a32:	e7e4      	b.n	80109fe <__pow5mult+0x5a>
 8010a34:	4638      	mov	r0, r7
 8010a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010a3a:	bf00      	nop
 8010a3c:	08011cb0 	.word	0x08011cb0

08010a40 <__lshift>:
 8010a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a44:	460c      	mov	r4, r1
 8010a46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010a4a:	6923      	ldr	r3, [r4, #16]
 8010a4c:	6849      	ldr	r1, [r1, #4]
 8010a4e:	eb0a 0903 	add.w	r9, sl, r3
 8010a52:	68a3      	ldr	r3, [r4, #8]
 8010a54:	4607      	mov	r7, r0
 8010a56:	4616      	mov	r6, r2
 8010a58:	f109 0501 	add.w	r5, r9, #1
 8010a5c:	42ab      	cmp	r3, r5
 8010a5e:	db32      	blt.n	8010ac6 <__lshift+0x86>
 8010a60:	4638      	mov	r0, r7
 8010a62:	f7ff fded 	bl	8010640 <_Balloc>
 8010a66:	2300      	movs	r3, #0
 8010a68:	4680      	mov	r8, r0
 8010a6a:	f100 0114 	add.w	r1, r0, #20
 8010a6e:	461a      	mov	r2, r3
 8010a70:	4553      	cmp	r3, sl
 8010a72:	db2b      	blt.n	8010acc <__lshift+0x8c>
 8010a74:	6920      	ldr	r0, [r4, #16]
 8010a76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a7a:	f104 0314 	add.w	r3, r4, #20
 8010a7e:	f016 021f 	ands.w	r2, r6, #31
 8010a82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010a86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010a8a:	d025      	beq.n	8010ad8 <__lshift+0x98>
 8010a8c:	f1c2 0e20 	rsb	lr, r2, #32
 8010a90:	2000      	movs	r0, #0
 8010a92:	681e      	ldr	r6, [r3, #0]
 8010a94:	468a      	mov	sl, r1
 8010a96:	4096      	lsls	r6, r2
 8010a98:	4330      	orrs	r0, r6
 8010a9a:	f84a 0b04 	str.w	r0, [sl], #4
 8010a9e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010aa2:	459c      	cmp	ip, r3
 8010aa4:	fa20 f00e 	lsr.w	r0, r0, lr
 8010aa8:	d814      	bhi.n	8010ad4 <__lshift+0x94>
 8010aaa:	6048      	str	r0, [r1, #4]
 8010aac:	b108      	cbz	r0, 8010ab2 <__lshift+0x72>
 8010aae:	f109 0502 	add.w	r5, r9, #2
 8010ab2:	3d01      	subs	r5, #1
 8010ab4:	4638      	mov	r0, r7
 8010ab6:	f8c8 5010 	str.w	r5, [r8, #16]
 8010aba:	4621      	mov	r1, r4
 8010abc:	f7ff fdf4 	bl	80106a8 <_Bfree>
 8010ac0:	4640      	mov	r0, r8
 8010ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ac6:	3101      	adds	r1, #1
 8010ac8:	005b      	lsls	r3, r3, #1
 8010aca:	e7c7      	b.n	8010a5c <__lshift+0x1c>
 8010acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	e7cd      	b.n	8010a70 <__lshift+0x30>
 8010ad4:	4651      	mov	r1, sl
 8010ad6:	e7dc      	b.n	8010a92 <__lshift+0x52>
 8010ad8:	3904      	subs	r1, #4
 8010ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ade:	f841 2f04 	str.w	r2, [r1, #4]!
 8010ae2:	459c      	cmp	ip, r3
 8010ae4:	d8f9      	bhi.n	8010ada <__lshift+0x9a>
 8010ae6:	e7e4      	b.n	8010ab2 <__lshift+0x72>

08010ae8 <__mcmp>:
 8010ae8:	6903      	ldr	r3, [r0, #16]
 8010aea:	690a      	ldr	r2, [r1, #16]
 8010aec:	1a9b      	subs	r3, r3, r2
 8010aee:	b530      	push	{r4, r5, lr}
 8010af0:	d10c      	bne.n	8010b0c <__mcmp+0x24>
 8010af2:	0092      	lsls	r2, r2, #2
 8010af4:	3014      	adds	r0, #20
 8010af6:	3114      	adds	r1, #20
 8010af8:	1884      	adds	r4, r0, r2
 8010afa:	4411      	add	r1, r2
 8010afc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010b00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010b04:	4295      	cmp	r5, r2
 8010b06:	d003      	beq.n	8010b10 <__mcmp+0x28>
 8010b08:	d305      	bcc.n	8010b16 <__mcmp+0x2e>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	bd30      	pop	{r4, r5, pc}
 8010b10:	42a0      	cmp	r0, r4
 8010b12:	d3f3      	bcc.n	8010afc <__mcmp+0x14>
 8010b14:	e7fa      	b.n	8010b0c <__mcmp+0x24>
 8010b16:	f04f 33ff 	mov.w	r3, #4294967295
 8010b1a:	e7f7      	b.n	8010b0c <__mcmp+0x24>

08010b1c <__mdiff>:
 8010b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b20:	460d      	mov	r5, r1
 8010b22:	4607      	mov	r7, r0
 8010b24:	4611      	mov	r1, r2
 8010b26:	4628      	mov	r0, r5
 8010b28:	4614      	mov	r4, r2
 8010b2a:	f7ff ffdd 	bl	8010ae8 <__mcmp>
 8010b2e:	1e06      	subs	r6, r0, #0
 8010b30:	d108      	bne.n	8010b44 <__mdiff+0x28>
 8010b32:	4631      	mov	r1, r6
 8010b34:	4638      	mov	r0, r7
 8010b36:	f7ff fd83 	bl	8010640 <_Balloc>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b44:	bfa4      	itt	ge
 8010b46:	4623      	movge	r3, r4
 8010b48:	462c      	movge	r4, r5
 8010b4a:	4638      	mov	r0, r7
 8010b4c:	6861      	ldr	r1, [r4, #4]
 8010b4e:	bfa6      	itte	ge
 8010b50:	461d      	movge	r5, r3
 8010b52:	2600      	movge	r6, #0
 8010b54:	2601      	movlt	r6, #1
 8010b56:	f7ff fd73 	bl	8010640 <_Balloc>
 8010b5a:	692b      	ldr	r3, [r5, #16]
 8010b5c:	60c6      	str	r6, [r0, #12]
 8010b5e:	6926      	ldr	r6, [r4, #16]
 8010b60:	f105 0914 	add.w	r9, r5, #20
 8010b64:	f104 0214 	add.w	r2, r4, #20
 8010b68:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010b6c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010b70:	f100 0514 	add.w	r5, r0, #20
 8010b74:	f04f 0e00 	mov.w	lr, #0
 8010b78:	f852 ab04 	ldr.w	sl, [r2], #4
 8010b7c:	f859 4b04 	ldr.w	r4, [r9], #4
 8010b80:	fa1e f18a 	uxtah	r1, lr, sl
 8010b84:	b2a3      	uxth	r3, r4
 8010b86:	1ac9      	subs	r1, r1, r3
 8010b88:	0c23      	lsrs	r3, r4, #16
 8010b8a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010b8e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010b92:	b289      	uxth	r1, r1
 8010b94:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010b98:	45c8      	cmp	r8, r9
 8010b9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010b9e:	4694      	mov	ip, r2
 8010ba0:	f845 3b04 	str.w	r3, [r5], #4
 8010ba4:	d8e8      	bhi.n	8010b78 <__mdiff+0x5c>
 8010ba6:	45bc      	cmp	ip, r7
 8010ba8:	d304      	bcc.n	8010bb4 <__mdiff+0x98>
 8010baa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010bae:	b183      	cbz	r3, 8010bd2 <__mdiff+0xb6>
 8010bb0:	6106      	str	r6, [r0, #16]
 8010bb2:	e7c5      	b.n	8010b40 <__mdiff+0x24>
 8010bb4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010bb8:	fa1e f381 	uxtah	r3, lr, r1
 8010bbc:	141a      	asrs	r2, r3, #16
 8010bbe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010bc8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010bcc:	f845 3b04 	str.w	r3, [r5], #4
 8010bd0:	e7e9      	b.n	8010ba6 <__mdiff+0x8a>
 8010bd2:	3e01      	subs	r6, #1
 8010bd4:	e7e9      	b.n	8010baa <__mdiff+0x8e>
	...

08010bd8 <__ulp>:
 8010bd8:	4b12      	ldr	r3, [pc, #72]	; (8010c24 <__ulp+0x4c>)
 8010bda:	ee10 2a90 	vmov	r2, s1
 8010bde:	401a      	ands	r2, r3
 8010be0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	dd04      	ble.n	8010bf2 <__ulp+0x1a>
 8010be8:	2000      	movs	r0, #0
 8010bea:	4619      	mov	r1, r3
 8010bec:	ec41 0b10 	vmov	d0, r0, r1
 8010bf0:	4770      	bx	lr
 8010bf2:	425b      	negs	r3, r3
 8010bf4:	151b      	asrs	r3, r3, #20
 8010bf6:	2b13      	cmp	r3, #19
 8010bf8:	f04f 0000 	mov.w	r0, #0
 8010bfc:	f04f 0100 	mov.w	r1, #0
 8010c00:	dc04      	bgt.n	8010c0c <__ulp+0x34>
 8010c02:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010c06:	fa42 f103 	asr.w	r1, r2, r3
 8010c0a:	e7ef      	b.n	8010bec <__ulp+0x14>
 8010c0c:	3b14      	subs	r3, #20
 8010c0e:	2b1e      	cmp	r3, #30
 8010c10:	f04f 0201 	mov.w	r2, #1
 8010c14:	bfda      	itte	le
 8010c16:	f1c3 031f 	rsble	r3, r3, #31
 8010c1a:	fa02 f303 	lslle.w	r3, r2, r3
 8010c1e:	4613      	movgt	r3, r2
 8010c20:	4618      	mov	r0, r3
 8010c22:	e7e3      	b.n	8010bec <__ulp+0x14>
 8010c24:	7ff00000 	.word	0x7ff00000

08010c28 <__b2d>:
 8010c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c2a:	6905      	ldr	r5, [r0, #16]
 8010c2c:	f100 0714 	add.w	r7, r0, #20
 8010c30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010c34:	1f2e      	subs	r6, r5, #4
 8010c36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f7ff fdc4 	bl	80107c8 <__hi0bits>
 8010c40:	f1c0 0320 	rsb	r3, r0, #32
 8010c44:	280a      	cmp	r0, #10
 8010c46:	600b      	str	r3, [r1, #0]
 8010c48:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010cc0 <__b2d+0x98>
 8010c4c:	dc14      	bgt.n	8010c78 <__b2d+0x50>
 8010c4e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010c52:	fa24 f10e 	lsr.w	r1, r4, lr
 8010c56:	42b7      	cmp	r7, r6
 8010c58:	ea41 030c 	orr.w	r3, r1, ip
 8010c5c:	bf34      	ite	cc
 8010c5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c62:	2100      	movcs	r1, #0
 8010c64:	3015      	adds	r0, #21
 8010c66:	fa04 f000 	lsl.w	r0, r4, r0
 8010c6a:	fa21 f10e 	lsr.w	r1, r1, lr
 8010c6e:	ea40 0201 	orr.w	r2, r0, r1
 8010c72:	ec43 2b10 	vmov	d0, r2, r3
 8010c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c78:	42b7      	cmp	r7, r6
 8010c7a:	bf3a      	itte	cc
 8010c7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8010c80:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010c84:	2100      	movcs	r1, #0
 8010c86:	380b      	subs	r0, #11
 8010c88:	d015      	beq.n	8010cb6 <__b2d+0x8e>
 8010c8a:	4084      	lsls	r4, r0
 8010c8c:	f1c0 0520 	rsb	r5, r0, #32
 8010c90:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010c94:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010c98:	42be      	cmp	r6, r7
 8010c9a:	fa21 fc05 	lsr.w	ip, r1, r5
 8010c9e:	ea44 030c 	orr.w	r3, r4, ip
 8010ca2:	bf8c      	ite	hi
 8010ca4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010ca8:	2400      	movls	r4, #0
 8010caa:	fa01 f000 	lsl.w	r0, r1, r0
 8010cae:	40ec      	lsrs	r4, r5
 8010cb0:	ea40 0204 	orr.w	r2, r0, r4
 8010cb4:	e7dd      	b.n	8010c72 <__b2d+0x4a>
 8010cb6:	ea44 030c 	orr.w	r3, r4, ip
 8010cba:	460a      	mov	r2, r1
 8010cbc:	e7d9      	b.n	8010c72 <__b2d+0x4a>
 8010cbe:	bf00      	nop
 8010cc0:	3ff00000 	.word	0x3ff00000

08010cc4 <__d2b>:
 8010cc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010cc8:	460e      	mov	r6, r1
 8010cca:	2101      	movs	r1, #1
 8010ccc:	ec59 8b10 	vmov	r8, r9, d0
 8010cd0:	4615      	mov	r5, r2
 8010cd2:	f7ff fcb5 	bl	8010640 <_Balloc>
 8010cd6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010cda:	4607      	mov	r7, r0
 8010cdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010ce0:	bb34      	cbnz	r4, 8010d30 <__d2b+0x6c>
 8010ce2:	9301      	str	r3, [sp, #4]
 8010ce4:	f1b8 0300 	subs.w	r3, r8, #0
 8010ce8:	d027      	beq.n	8010d3a <__d2b+0x76>
 8010cea:	a802      	add	r0, sp, #8
 8010cec:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010cf0:	f7ff fd89 	bl	8010806 <__lo0bits>
 8010cf4:	9900      	ldr	r1, [sp, #0]
 8010cf6:	b1f0      	cbz	r0, 8010d36 <__d2b+0x72>
 8010cf8:	9a01      	ldr	r2, [sp, #4]
 8010cfa:	f1c0 0320 	rsb	r3, r0, #32
 8010cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8010d02:	430b      	orrs	r3, r1
 8010d04:	40c2      	lsrs	r2, r0
 8010d06:	617b      	str	r3, [r7, #20]
 8010d08:	9201      	str	r2, [sp, #4]
 8010d0a:	9b01      	ldr	r3, [sp, #4]
 8010d0c:	61bb      	str	r3, [r7, #24]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	bf14      	ite	ne
 8010d12:	2102      	movne	r1, #2
 8010d14:	2101      	moveq	r1, #1
 8010d16:	6139      	str	r1, [r7, #16]
 8010d18:	b1c4      	cbz	r4, 8010d4c <__d2b+0x88>
 8010d1a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010d1e:	4404      	add	r4, r0
 8010d20:	6034      	str	r4, [r6, #0]
 8010d22:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010d26:	6028      	str	r0, [r5, #0]
 8010d28:	4638      	mov	r0, r7
 8010d2a:	b003      	add	sp, #12
 8010d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010d34:	e7d5      	b.n	8010ce2 <__d2b+0x1e>
 8010d36:	6179      	str	r1, [r7, #20]
 8010d38:	e7e7      	b.n	8010d0a <__d2b+0x46>
 8010d3a:	a801      	add	r0, sp, #4
 8010d3c:	f7ff fd63 	bl	8010806 <__lo0bits>
 8010d40:	9b01      	ldr	r3, [sp, #4]
 8010d42:	617b      	str	r3, [r7, #20]
 8010d44:	2101      	movs	r1, #1
 8010d46:	6139      	str	r1, [r7, #16]
 8010d48:	3020      	adds	r0, #32
 8010d4a:	e7e5      	b.n	8010d18 <__d2b+0x54>
 8010d4c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010d50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010d54:	6030      	str	r0, [r6, #0]
 8010d56:	6918      	ldr	r0, [r3, #16]
 8010d58:	f7ff fd36 	bl	80107c8 <__hi0bits>
 8010d5c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010d60:	e7e1      	b.n	8010d26 <__d2b+0x62>

08010d62 <__ratio>:
 8010d62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d66:	4688      	mov	r8, r1
 8010d68:	4669      	mov	r1, sp
 8010d6a:	4681      	mov	r9, r0
 8010d6c:	f7ff ff5c 	bl	8010c28 <__b2d>
 8010d70:	a901      	add	r1, sp, #4
 8010d72:	4640      	mov	r0, r8
 8010d74:	ec57 6b10 	vmov	r6, r7, d0
 8010d78:	f7ff ff56 	bl	8010c28 <__b2d>
 8010d7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010d80:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010d84:	eba3 0c02 	sub.w	ip, r3, r2
 8010d88:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010d8c:	1a9b      	subs	r3, r3, r2
 8010d8e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010d92:	ec5b ab10 	vmov	sl, fp, d0
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	bfce      	itee	gt
 8010d9a:	463a      	movgt	r2, r7
 8010d9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010da0:	465a      	movle	r2, fp
 8010da2:	4659      	mov	r1, fp
 8010da4:	463d      	mov	r5, r7
 8010da6:	bfd4      	ite	le
 8010da8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010dac:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010db0:	4630      	mov	r0, r6
 8010db2:	ee10 2a10 	vmov	r2, s0
 8010db6:	460b      	mov	r3, r1
 8010db8:	4629      	mov	r1, r5
 8010dba:	f7ef fd47 	bl	800084c <__aeabi_ddiv>
 8010dbe:	ec41 0b10 	vmov	d0, r0, r1
 8010dc2:	b003      	add	sp, #12
 8010dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010dc8 <__copybits>:
 8010dc8:	3901      	subs	r1, #1
 8010dca:	b510      	push	{r4, lr}
 8010dcc:	1149      	asrs	r1, r1, #5
 8010dce:	6914      	ldr	r4, [r2, #16]
 8010dd0:	3101      	adds	r1, #1
 8010dd2:	f102 0314 	add.w	r3, r2, #20
 8010dd6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010dda:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010dde:	42a3      	cmp	r3, r4
 8010de0:	4602      	mov	r2, r0
 8010de2:	d303      	bcc.n	8010dec <__copybits+0x24>
 8010de4:	2300      	movs	r3, #0
 8010de6:	428a      	cmp	r2, r1
 8010de8:	d305      	bcc.n	8010df6 <__copybits+0x2e>
 8010dea:	bd10      	pop	{r4, pc}
 8010dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8010df0:	f840 2b04 	str.w	r2, [r0], #4
 8010df4:	e7f3      	b.n	8010dde <__copybits+0x16>
 8010df6:	f842 3b04 	str.w	r3, [r2], #4
 8010dfa:	e7f4      	b.n	8010de6 <__copybits+0x1e>

08010dfc <__any_on>:
 8010dfc:	f100 0214 	add.w	r2, r0, #20
 8010e00:	6900      	ldr	r0, [r0, #16]
 8010e02:	114b      	asrs	r3, r1, #5
 8010e04:	4298      	cmp	r0, r3
 8010e06:	b510      	push	{r4, lr}
 8010e08:	db11      	blt.n	8010e2e <__any_on+0x32>
 8010e0a:	dd0a      	ble.n	8010e22 <__any_on+0x26>
 8010e0c:	f011 011f 	ands.w	r1, r1, #31
 8010e10:	d007      	beq.n	8010e22 <__any_on+0x26>
 8010e12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010e16:	fa24 f001 	lsr.w	r0, r4, r1
 8010e1a:	fa00 f101 	lsl.w	r1, r0, r1
 8010e1e:	428c      	cmp	r4, r1
 8010e20:	d10b      	bne.n	8010e3a <__any_on+0x3e>
 8010e22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d803      	bhi.n	8010e32 <__any_on+0x36>
 8010e2a:	2000      	movs	r0, #0
 8010e2c:	bd10      	pop	{r4, pc}
 8010e2e:	4603      	mov	r3, r0
 8010e30:	e7f7      	b.n	8010e22 <__any_on+0x26>
 8010e32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010e36:	2900      	cmp	r1, #0
 8010e38:	d0f5      	beq.n	8010e26 <__any_on+0x2a>
 8010e3a:	2001      	movs	r0, #1
 8010e3c:	e7f6      	b.n	8010e2c <__any_on+0x30>

08010e3e <_calloc_r>:
 8010e3e:	b538      	push	{r3, r4, r5, lr}
 8010e40:	fb02 f401 	mul.w	r4, r2, r1
 8010e44:	4621      	mov	r1, r4
 8010e46:	f7fc fc07 	bl	800d658 <_malloc_r>
 8010e4a:	4605      	mov	r5, r0
 8010e4c:	b118      	cbz	r0, 8010e56 <_calloc_r+0x18>
 8010e4e:	4622      	mov	r2, r4
 8010e50:	2100      	movs	r1, #0
 8010e52:	f7fc fbaa 	bl	800d5aa <memset>
 8010e56:	4628      	mov	r0, r5
 8010e58:	bd38      	pop	{r3, r4, r5, pc}

08010e5a <__ssputs_r>:
 8010e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e5e:	688e      	ldr	r6, [r1, #8]
 8010e60:	429e      	cmp	r6, r3
 8010e62:	4682      	mov	sl, r0
 8010e64:	460c      	mov	r4, r1
 8010e66:	4690      	mov	r8, r2
 8010e68:	4699      	mov	r9, r3
 8010e6a:	d837      	bhi.n	8010edc <__ssputs_r+0x82>
 8010e6c:	898a      	ldrh	r2, [r1, #12]
 8010e6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010e72:	d031      	beq.n	8010ed8 <__ssputs_r+0x7e>
 8010e74:	6825      	ldr	r5, [r4, #0]
 8010e76:	6909      	ldr	r1, [r1, #16]
 8010e78:	1a6f      	subs	r7, r5, r1
 8010e7a:	6965      	ldr	r5, [r4, #20]
 8010e7c:	2302      	movs	r3, #2
 8010e7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010e82:	fb95 f5f3 	sdiv	r5, r5, r3
 8010e86:	f109 0301 	add.w	r3, r9, #1
 8010e8a:	443b      	add	r3, r7
 8010e8c:	429d      	cmp	r5, r3
 8010e8e:	bf38      	it	cc
 8010e90:	461d      	movcc	r5, r3
 8010e92:	0553      	lsls	r3, r2, #21
 8010e94:	d530      	bpl.n	8010ef8 <__ssputs_r+0x9e>
 8010e96:	4629      	mov	r1, r5
 8010e98:	f7fc fbde 	bl	800d658 <_malloc_r>
 8010e9c:	4606      	mov	r6, r0
 8010e9e:	b950      	cbnz	r0, 8010eb6 <__ssputs_r+0x5c>
 8010ea0:	230c      	movs	r3, #12
 8010ea2:	f8ca 3000 	str.w	r3, [sl]
 8010ea6:	89a3      	ldrh	r3, [r4, #12]
 8010ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010eac:	81a3      	strh	r3, [r4, #12]
 8010eae:	f04f 30ff 	mov.w	r0, #4294967295
 8010eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010eb6:	463a      	mov	r2, r7
 8010eb8:	6921      	ldr	r1, [r4, #16]
 8010eba:	f7fc fb6b 	bl	800d594 <memcpy>
 8010ebe:	89a3      	ldrh	r3, [r4, #12]
 8010ec0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ec8:	81a3      	strh	r3, [r4, #12]
 8010eca:	6126      	str	r6, [r4, #16]
 8010ecc:	6165      	str	r5, [r4, #20]
 8010ece:	443e      	add	r6, r7
 8010ed0:	1bed      	subs	r5, r5, r7
 8010ed2:	6026      	str	r6, [r4, #0]
 8010ed4:	60a5      	str	r5, [r4, #8]
 8010ed6:	464e      	mov	r6, r9
 8010ed8:	454e      	cmp	r6, r9
 8010eda:	d900      	bls.n	8010ede <__ssputs_r+0x84>
 8010edc:	464e      	mov	r6, r9
 8010ede:	4632      	mov	r2, r6
 8010ee0:	4641      	mov	r1, r8
 8010ee2:	6820      	ldr	r0, [r4, #0]
 8010ee4:	f000 fcb8 	bl	8011858 <memmove>
 8010ee8:	68a3      	ldr	r3, [r4, #8]
 8010eea:	1b9b      	subs	r3, r3, r6
 8010eec:	60a3      	str	r3, [r4, #8]
 8010eee:	6823      	ldr	r3, [r4, #0]
 8010ef0:	441e      	add	r6, r3
 8010ef2:	6026      	str	r6, [r4, #0]
 8010ef4:	2000      	movs	r0, #0
 8010ef6:	e7dc      	b.n	8010eb2 <__ssputs_r+0x58>
 8010ef8:	462a      	mov	r2, r5
 8010efa:	f000 fcc6 	bl	801188a <_realloc_r>
 8010efe:	4606      	mov	r6, r0
 8010f00:	2800      	cmp	r0, #0
 8010f02:	d1e2      	bne.n	8010eca <__ssputs_r+0x70>
 8010f04:	6921      	ldr	r1, [r4, #16]
 8010f06:	4650      	mov	r0, sl
 8010f08:	f7fc fb58 	bl	800d5bc <_free_r>
 8010f0c:	e7c8      	b.n	8010ea0 <__ssputs_r+0x46>
	...

08010f10 <_svfiprintf_r>:
 8010f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f14:	461d      	mov	r5, r3
 8010f16:	898b      	ldrh	r3, [r1, #12]
 8010f18:	061f      	lsls	r7, r3, #24
 8010f1a:	b09d      	sub	sp, #116	; 0x74
 8010f1c:	4680      	mov	r8, r0
 8010f1e:	460c      	mov	r4, r1
 8010f20:	4616      	mov	r6, r2
 8010f22:	d50f      	bpl.n	8010f44 <_svfiprintf_r+0x34>
 8010f24:	690b      	ldr	r3, [r1, #16]
 8010f26:	b96b      	cbnz	r3, 8010f44 <_svfiprintf_r+0x34>
 8010f28:	2140      	movs	r1, #64	; 0x40
 8010f2a:	f7fc fb95 	bl	800d658 <_malloc_r>
 8010f2e:	6020      	str	r0, [r4, #0]
 8010f30:	6120      	str	r0, [r4, #16]
 8010f32:	b928      	cbnz	r0, 8010f40 <_svfiprintf_r+0x30>
 8010f34:	230c      	movs	r3, #12
 8010f36:	f8c8 3000 	str.w	r3, [r8]
 8010f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f3e:	e0c8      	b.n	80110d2 <_svfiprintf_r+0x1c2>
 8010f40:	2340      	movs	r3, #64	; 0x40
 8010f42:	6163      	str	r3, [r4, #20]
 8010f44:	2300      	movs	r3, #0
 8010f46:	9309      	str	r3, [sp, #36]	; 0x24
 8010f48:	2320      	movs	r3, #32
 8010f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f4e:	2330      	movs	r3, #48	; 0x30
 8010f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f54:	9503      	str	r5, [sp, #12]
 8010f56:	f04f 0b01 	mov.w	fp, #1
 8010f5a:	4637      	mov	r7, r6
 8010f5c:	463d      	mov	r5, r7
 8010f5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010f62:	b10b      	cbz	r3, 8010f68 <_svfiprintf_r+0x58>
 8010f64:	2b25      	cmp	r3, #37	; 0x25
 8010f66:	d13e      	bne.n	8010fe6 <_svfiprintf_r+0xd6>
 8010f68:	ebb7 0a06 	subs.w	sl, r7, r6
 8010f6c:	d00b      	beq.n	8010f86 <_svfiprintf_r+0x76>
 8010f6e:	4653      	mov	r3, sl
 8010f70:	4632      	mov	r2, r6
 8010f72:	4621      	mov	r1, r4
 8010f74:	4640      	mov	r0, r8
 8010f76:	f7ff ff70 	bl	8010e5a <__ssputs_r>
 8010f7a:	3001      	adds	r0, #1
 8010f7c:	f000 80a4 	beq.w	80110c8 <_svfiprintf_r+0x1b8>
 8010f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f82:	4453      	add	r3, sl
 8010f84:	9309      	str	r3, [sp, #36]	; 0x24
 8010f86:	783b      	ldrb	r3, [r7, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	f000 809d 	beq.w	80110c8 <_svfiprintf_r+0x1b8>
 8010f8e:	2300      	movs	r3, #0
 8010f90:	f04f 32ff 	mov.w	r2, #4294967295
 8010f94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f98:	9304      	str	r3, [sp, #16]
 8010f9a:	9307      	str	r3, [sp, #28]
 8010f9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fa0:	931a      	str	r3, [sp, #104]	; 0x68
 8010fa2:	462f      	mov	r7, r5
 8010fa4:	2205      	movs	r2, #5
 8010fa6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010faa:	4850      	ldr	r0, [pc, #320]	; (80110ec <_svfiprintf_r+0x1dc>)
 8010fac:	f7ef f918 	bl	80001e0 <memchr>
 8010fb0:	9b04      	ldr	r3, [sp, #16]
 8010fb2:	b9d0      	cbnz	r0, 8010fea <_svfiprintf_r+0xda>
 8010fb4:	06d9      	lsls	r1, r3, #27
 8010fb6:	bf44      	itt	mi
 8010fb8:	2220      	movmi	r2, #32
 8010fba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010fbe:	071a      	lsls	r2, r3, #28
 8010fc0:	bf44      	itt	mi
 8010fc2:	222b      	movmi	r2, #43	; 0x2b
 8010fc4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010fc8:	782a      	ldrb	r2, [r5, #0]
 8010fca:	2a2a      	cmp	r2, #42	; 0x2a
 8010fcc:	d015      	beq.n	8010ffa <_svfiprintf_r+0xea>
 8010fce:	9a07      	ldr	r2, [sp, #28]
 8010fd0:	462f      	mov	r7, r5
 8010fd2:	2000      	movs	r0, #0
 8010fd4:	250a      	movs	r5, #10
 8010fd6:	4639      	mov	r1, r7
 8010fd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010fdc:	3b30      	subs	r3, #48	; 0x30
 8010fde:	2b09      	cmp	r3, #9
 8010fe0:	d94d      	bls.n	801107e <_svfiprintf_r+0x16e>
 8010fe2:	b1b8      	cbz	r0, 8011014 <_svfiprintf_r+0x104>
 8010fe4:	e00f      	b.n	8011006 <_svfiprintf_r+0xf6>
 8010fe6:	462f      	mov	r7, r5
 8010fe8:	e7b8      	b.n	8010f5c <_svfiprintf_r+0x4c>
 8010fea:	4a40      	ldr	r2, [pc, #256]	; (80110ec <_svfiprintf_r+0x1dc>)
 8010fec:	1a80      	subs	r0, r0, r2
 8010fee:	fa0b f000 	lsl.w	r0, fp, r0
 8010ff2:	4318      	orrs	r0, r3
 8010ff4:	9004      	str	r0, [sp, #16]
 8010ff6:	463d      	mov	r5, r7
 8010ff8:	e7d3      	b.n	8010fa2 <_svfiprintf_r+0x92>
 8010ffa:	9a03      	ldr	r2, [sp, #12]
 8010ffc:	1d11      	adds	r1, r2, #4
 8010ffe:	6812      	ldr	r2, [r2, #0]
 8011000:	9103      	str	r1, [sp, #12]
 8011002:	2a00      	cmp	r2, #0
 8011004:	db01      	blt.n	801100a <_svfiprintf_r+0xfa>
 8011006:	9207      	str	r2, [sp, #28]
 8011008:	e004      	b.n	8011014 <_svfiprintf_r+0x104>
 801100a:	4252      	negs	r2, r2
 801100c:	f043 0302 	orr.w	r3, r3, #2
 8011010:	9207      	str	r2, [sp, #28]
 8011012:	9304      	str	r3, [sp, #16]
 8011014:	783b      	ldrb	r3, [r7, #0]
 8011016:	2b2e      	cmp	r3, #46	; 0x2e
 8011018:	d10c      	bne.n	8011034 <_svfiprintf_r+0x124>
 801101a:	787b      	ldrb	r3, [r7, #1]
 801101c:	2b2a      	cmp	r3, #42	; 0x2a
 801101e:	d133      	bne.n	8011088 <_svfiprintf_r+0x178>
 8011020:	9b03      	ldr	r3, [sp, #12]
 8011022:	1d1a      	adds	r2, r3, #4
 8011024:	681b      	ldr	r3, [r3, #0]
 8011026:	9203      	str	r2, [sp, #12]
 8011028:	2b00      	cmp	r3, #0
 801102a:	bfb8      	it	lt
 801102c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011030:	3702      	adds	r7, #2
 8011032:	9305      	str	r3, [sp, #20]
 8011034:	4d2e      	ldr	r5, [pc, #184]	; (80110f0 <_svfiprintf_r+0x1e0>)
 8011036:	7839      	ldrb	r1, [r7, #0]
 8011038:	2203      	movs	r2, #3
 801103a:	4628      	mov	r0, r5
 801103c:	f7ef f8d0 	bl	80001e0 <memchr>
 8011040:	b138      	cbz	r0, 8011052 <_svfiprintf_r+0x142>
 8011042:	2340      	movs	r3, #64	; 0x40
 8011044:	1b40      	subs	r0, r0, r5
 8011046:	fa03 f000 	lsl.w	r0, r3, r0
 801104a:	9b04      	ldr	r3, [sp, #16]
 801104c:	4303      	orrs	r3, r0
 801104e:	3701      	adds	r7, #1
 8011050:	9304      	str	r3, [sp, #16]
 8011052:	7839      	ldrb	r1, [r7, #0]
 8011054:	4827      	ldr	r0, [pc, #156]	; (80110f4 <_svfiprintf_r+0x1e4>)
 8011056:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801105a:	2206      	movs	r2, #6
 801105c:	1c7e      	adds	r6, r7, #1
 801105e:	f7ef f8bf 	bl	80001e0 <memchr>
 8011062:	2800      	cmp	r0, #0
 8011064:	d038      	beq.n	80110d8 <_svfiprintf_r+0x1c8>
 8011066:	4b24      	ldr	r3, [pc, #144]	; (80110f8 <_svfiprintf_r+0x1e8>)
 8011068:	bb13      	cbnz	r3, 80110b0 <_svfiprintf_r+0x1a0>
 801106a:	9b03      	ldr	r3, [sp, #12]
 801106c:	3307      	adds	r3, #7
 801106e:	f023 0307 	bic.w	r3, r3, #7
 8011072:	3308      	adds	r3, #8
 8011074:	9303      	str	r3, [sp, #12]
 8011076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011078:	444b      	add	r3, r9
 801107a:	9309      	str	r3, [sp, #36]	; 0x24
 801107c:	e76d      	b.n	8010f5a <_svfiprintf_r+0x4a>
 801107e:	fb05 3202 	mla	r2, r5, r2, r3
 8011082:	2001      	movs	r0, #1
 8011084:	460f      	mov	r7, r1
 8011086:	e7a6      	b.n	8010fd6 <_svfiprintf_r+0xc6>
 8011088:	2300      	movs	r3, #0
 801108a:	3701      	adds	r7, #1
 801108c:	9305      	str	r3, [sp, #20]
 801108e:	4619      	mov	r1, r3
 8011090:	250a      	movs	r5, #10
 8011092:	4638      	mov	r0, r7
 8011094:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011098:	3a30      	subs	r2, #48	; 0x30
 801109a:	2a09      	cmp	r2, #9
 801109c:	d903      	bls.n	80110a6 <_svfiprintf_r+0x196>
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d0c8      	beq.n	8011034 <_svfiprintf_r+0x124>
 80110a2:	9105      	str	r1, [sp, #20]
 80110a4:	e7c6      	b.n	8011034 <_svfiprintf_r+0x124>
 80110a6:	fb05 2101 	mla	r1, r5, r1, r2
 80110aa:	2301      	movs	r3, #1
 80110ac:	4607      	mov	r7, r0
 80110ae:	e7f0      	b.n	8011092 <_svfiprintf_r+0x182>
 80110b0:	ab03      	add	r3, sp, #12
 80110b2:	9300      	str	r3, [sp, #0]
 80110b4:	4622      	mov	r2, r4
 80110b6:	4b11      	ldr	r3, [pc, #68]	; (80110fc <_svfiprintf_r+0x1ec>)
 80110b8:	a904      	add	r1, sp, #16
 80110ba:	4640      	mov	r0, r8
 80110bc:	f7fc fbba 	bl	800d834 <_printf_float>
 80110c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80110c4:	4681      	mov	r9, r0
 80110c6:	d1d6      	bne.n	8011076 <_svfiprintf_r+0x166>
 80110c8:	89a3      	ldrh	r3, [r4, #12]
 80110ca:	065b      	lsls	r3, r3, #25
 80110cc:	f53f af35 	bmi.w	8010f3a <_svfiprintf_r+0x2a>
 80110d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80110d2:	b01d      	add	sp, #116	; 0x74
 80110d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110d8:	ab03      	add	r3, sp, #12
 80110da:	9300      	str	r3, [sp, #0]
 80110dc:	4622      	mov	r2, r4
 80110de:	4b07      	ldr	r3, [pc, #28]	; (80110fc <_svfiprintf_r+0x1ec>)
 80110e0:	a904      	add	r1, sp, #16
 80110e2:	4640      	mov	r0, r8
 80110e4:	f7fc fe5c 	bl	800dda0 <_printf_i>
 80110e8:	e7ea      	b.n	80110c0 <_svfiprintf_r+0x1b0>
 80110ea:	bf00      	nop
 80110ec:	08011cbc 	.word	0x08011cbc
 80110f0:	08011cc2 	.word	0x08011cc2
 80110f4:	08011cc6 	.word	0x08011cc6
 80110f8:	0800d835 	.word	0x0800d835
 80110fc:	08010e5b 	.word	0x08010e5b

08011100 <__sfputc_r>:
 8011100:	6893      	ldr	r3, [r2, #8]
 8011102:	3b01      	subs	r3, #1
 8011104:	2b00      	cmp	r3, #0
 8011106:	b410      	push	{r4}
 8011108:	6093      	str	r3, [r2, #8]
 801110a:	da08      	bge.n	801111e <__sfputc_r+0x1e>
 801110c:	6994      	ldr	r4, [r2, #24]
 801110e:	42a3      	cmp	r3, r4
 8011110:	db01      	blt.n	8011116 <__sfputc_r+0x16>
 8011112:	290a      	cmp	r1, #10
 8011114:	d103      	bne.n	801111e <__sfputc_r+0x1e>
 8011116:	f85d 4b04 	ldr.w	r4, [sp], #4
 801111a:	f000 b987 	b.w	801142c <__swbuf_r>
 801111e:	6813      	ldr	r3, [r2, #0]
 8011120:	1c58      	adds	r0, r3, #1
 8011122:	6010      	str	r0, [r2, #0]
 8011124:	7019      	strb	r1, [r3, #0]
 8011126:	4608      	mov	r0, r1
 8011128:	f85d 4b04 	ldr.w	r4, [sp], #4
 801112c:	4770      	bx	lr

0801112e <__sfputs_r>:
 801112e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011130:	4606      	mov	r6, r0
 8011132:	460f      	mov	r7, r1
 8011134:	4614      	mov	r4, r2
 8011136:	18d5      	adds	r5, r2, r3
 8011138:	42ac      	cmp	r4, r5
 801113a:	d101      	bne.n	8011140 <__sfputs_r+0x12>
 801113c:	2000      	movs	r0, #0
 801113e:	e007      	b.n	8011150 <__sfputs_r+0x22>
 8011140:	463a      	mov	r2, r7
 8011142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011146:	4630      	mov	r0, r6
 8011148:	f7ff ffda 	bl	8011100 <__sfputc_r>
 801114c:	1c43      	adds	r3, r0, #1
 801114e:	d1f3      	bne.n	8011138 <__sfputs_r+0xa>
 8011150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011154 <_vfiprintf_r>:
 8011154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011158:	460c      	mov	r4, r1
 801115a:	b09d      	sub	sp, #116	; 0x74
 801115c:	4617      	mov	r7, r2
 801115e:	461d      	mov	r5, r3
 8011160:	4606      	mov	r6, r0
 8011162:	b118      	cbz	r0, 801116c <_vfiprintf_r+0x18>
 8011164:	6983      	ldr	r3, [r0, #24]
 8011166:	b90b      	cbnz	r3, 801116c <_vfiprintf_r+0x18>
 8011168:	f7fe fe92 	bl	800fe90 <__sinit>
 801116c:	4b7c      	ldr	r3, [pc, #496]	; (8011360 <_vfiprintf_r+0x20c>)
 801116e:	429c      	cmp	r4, r3
 8011170:	d158      	bne.n	8011224 <_vfiprintf_r+0xd0>
 8011172:	6874      	ldr	r4, [r6, #4]
 8011174:	89a3      	ldrh	r3, [r4, #12]
 8011176:	0718      	lsls	r0, r3, #28
 8011178:	d55e      	bpl.n	8011238 <_vfiprintf_r+0xe4>
 801117a:	6923      	ldr	r3, [r4, #16]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d05b      	beq.n	8011238 <_vfiprintf_r+0xe4>
 8011180:	2300      	movs	r3, #0
 8011182:	9309      	str	r3, [sp, #36]	; 0x24
 8011184:	2320      	movs	r3, #32
 8011186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801118a:	2330      	movs	r3, #48	; 0x30
 801118c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011190:	9503      	str	r5, [sp, #12]
 8011192:	f04f 0b01 	mov.w	fp, #1
 8011196:	46b8      	mov	r8, r7
 8011198:	4645      	mov	r5, r8
 801119a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801119e:	b10b      	cbz	r3, 80111a4 <_vfiprintf_r+0x50>
 80111a0:	2b25      	cmp	r3, #37	; 0x25
 80111a2:	d154      	bne.n	801124e <_vfiprintf_r+0xfa>
 80111a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80111a8:	d00b      	beq.n	80111c2 <_vfiprintf_r+0x6e>
 80111aa:	4653      	mov	r3, sl
 80111ac:	463a      	mov	r2, r7
 80111ae:	4621      	mov	r1, r4
 80111b0:	4630      	mov	r0, r6
 80111b2:	f7ff ffbc 	bl	801112e <__sfputs_r>
 80111b6:	3001      	adds	r0, #1
 80111b8:	f000 80c2 	beq.w	8011340 <_vfiprintf_r+0x1ec>
 80111bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111be:	4453      	add	r3, sl
 80111c0:	9309      	str	r3, [sp, #36]	; 0x24
 80111c2:	f898 3000 	ldrb.w	r3, [r8]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f000 80ba 	beq.w	8011340 <_vfiprintf_r+0x1ec>
 80111cc:	2300      	movs	r3, #0
 80111ce:	f04f 32ff 	mov.w	r2, #4294967295
 80111d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80111d6:	9304      	str	r3, [sp, #16]
 80111d8:	9307      	str	r3, [sp, #28]
 80111da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80111de:	931a      	str	r3, [sp, #104]	; 0x68
 80111e0:	46a8      	mov	r8, r5
 80111e2:	2205      	movs	r2, #5
 80111e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80111e8:	485e      	ldr	r0, [pc, #376]	; (8011364 <_vfiprintf_r+0x210>)
 80111ea:	f7ee fff9 	bl	80001e0 <memchr>
 80111ee:	9b04      	ldr	r3, [sp, #16]
 80111f0:	bb78      	cbnz	r0, 8011252 <_vfiprintf_r+0xfe>
 80111f2:	06d9      	lsls	r1, r3, #27
 80111f4:	bf44      	itt	mi
 80111f6:	2220      	movmi	r2, #32
 80111f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80111fc:	071a      	lsls	r2, r3, #28
 80111fe:	bf44      	itt	mi
 8011200:	222b      	movmi	r2, #43	; 0x2b
 8011202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011206:	782a      	ldrb	r2, [r5, #0]
 8011208:	2a2a      	cmp	r2, #42	; 0x2a
 801120a:	d02a      	beq.n	8011262 <_vfiprintf_r+0x10e>
 801120c:	9a07      	ldr	r2, [sp, #28]
 801120e:	46a8      	mov	r8, r5
 8011210:	2000      	movs	r0, #0
 8011212:	250a      	movs	r5, #10
 8011214:	4641      	mov	r1, r8
 8011216:	f811 3b01 	ldrb.w	r3, [r1], #1
 801121a:	3b30      	subs	r3, #48	; 0x30
 801121c:	2b09      	cmp	r3, #9
 801121e:	d969      	bls.n	80112f4 <_vfiprintf_r+0x1a0>
 8011220:	b360      	cbz	r0, 801127c <_vfiprintf_r+0x128>
 8011222:	e024      	b.n	801126e <_vfiprintf_r+0x11a>
 8011224:	4b50      	ldr	r3, [pc, #320]	; (8011368 <_vfiprintf_r+0x214>)
 8011226:	429c      	cmp	r4, r3
 8011228:	d101      	bne.n	801122e <_vfiprintf_r+0xda>
 801122a:	68b4      	ldr	r4, [r6, #8]
 801122c:	e7a2      	b.n	8011174 <_vfiprintf_r+0x20>
 801122e:	4b4f      	ldr	r3, [pc, #316]	; (801136c <_vfiprintf_r+0x218>)
 8011230:	429c      	cmp	r4, r3
 8011232:	bf08      	it	eq
 8011234:	68f4      	ldreq	r4, [r6, #12]
 8011236:	e79d      	b.n	8011174 <_vfiprintf_r+0x20>
 8011238:	4621      	mov	r1, r4
 801123a:	4630      	mov	r0, r6
 801123c:	f000 f968 	bl	8011510 <__swsetup_r>
 8011240:	2800      	cmp	r0, #0
 8011242:	d09d      	beq.n	8011180 <_vfiprintf_r+0x2c>
 8011244:	f04f 30ff 	mov.w	r0, #4294967295
 8011248:	b01d      	add	sp, #116	; 0x74
 801124a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801124e:	46a8      	mov	r8, r5
 8011250:	e7a2      	b.n	8011198 <_vfiprintf_r+0x44>
 8011252:	4a44      	ldr	r2, [pc, #272]	; (8011364 <_vfiprintf_r+0x210>)
 8011254:	1a80      	subs	r0, r0, r2
 8011256:	fa0b f000 	lsl.w	r0, fp, r0
 801125a:	4318      	orrs	r0, r3
 801125c:	9004      	str	r0, [sp, #16]
 801125e:	4645      	mov	r5, r8
 8011260:	e7be      	b.n	80111e0 <_vfiprintf_r+0x8c>
 8011262:	9a03      	ldr	r2, [sp, #12]
 8011264:	1d11      	adds	r1, r2, #4
 8011266:	6812      	ldr	r2, [r2, #0]
 8011268:	9103      	str	r1, [sp, #12]
 801126a:	2a00      	cmp	r2, #0
 801126c:	db01      	blt.n	8011272 <_vfiprintf_r+0x11e>
 801126e:	9207      	str	r2, [sp, #28]
 8011270:	e004      	b.n	801127c <_vfiprintf_r+0x128>
 8011272:	4252      	negs	r2, r2
 8011274:	f043 0302 	orr.w	r3, r3, #2
 8011278:	9207      	str	r2, [sp, #28]
 801127a:	9304      	str	r3, [sp, #16]
 801127c:	f898 3000 	ldrb.w	r3, [r8]
 8011280:	2b2e      	cmp	r3, #46	; 0x2e
 8011282:	d10e      	bne.n	80112a2 <_vfiprintf_r+0x14e>
 8011284:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011288:	2b2a      	cmp	r3, #42	; 0x2a
 801128a:	d138      	bne.n	80112fe <_vfiprintf_r+0x1aa>
 801128c:	9b03      	ldr	r3, [sp, #12]
 801128e:	1d1a      	adds	r2, r3, #4
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	9203      	str	r2, [sp, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	bfb8      	it	lt
 8011298:	f04f 33ff 	movlt.w	r3, #4294967295
 801129c:	f108 0802 	add.w	r8, r8, #2
 80112a0:	9305      	str	r3, [sp, #20]
 80112a2:	4d33      	ldr	r5, [pc, #204]	; (8011370 <_vfiprintf_r+0x21c>)
 80112a4:	f898 1000 	ldrb.w	r1, [r8]
 80112a8:	2203      	movs	r2, #3
 80112aa:	4628      	mov	r0, r5
 80112ac:	f7ee ff98 	bl	80001e0 <memchr>
 80112b0:	b140      	cbz	r0, 80112c4 <_vfiprintf_r+0x170>
 80112b2:	2340      	movs	r3, #64	; 0x40
 80112b4:	1b40      	subs	r0, r0, r5
 80112b6:	fa03 f000 	lsl.w	r0, r3, r0
 80112ba:	9b04      	ldr	r3, [sp, #16]
 80112bc:	4303      	orrs	r3, r0
 80112be:	f108 0801 	add.w	r8, r8, #1
 80112c2:	9304      	str	r3, [sp, #16]
 80112c4:	f898 1000 	ldrb.w	r1, [r8]
 80112c8:	482a      	ldr	r0, [pc, #168]	; (8011374 <_vfiprintf_r+0x220>)
 80112ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80112ce:	2206      	movs	r2, #6
 80112d0:	f108 0701 	add.w	r7, r8, #1
 80112d4:	f7ee ff84 	bl	80001e0 <memchr>
 80112d8:	2800      	cmp	r0, #0
 80112da:	d037      	beq.n	801134c <_vfiprintf_r+0x1f8>
 80112dc:	4b26      	ldr	r3, [pc, #152]	; (8011378 <_vfiprintf_r+0x224>)
 80112de:	bb1b      	cbnz	r3, 8011328 <_vfiprintf_r+0x1d4>
 80112e0:	9b03      	ldr	r3, [sp, #12]
 80112e2:	3307      	adds	r3, #7
 80112e4:	f023 0307 	bic.w	r3, r3, #7
 80112e8:	3308      	adds	r3, #8
 80112ea:	9303      	str	r3, [sp, #12]
 80112ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80112ee:	444b      	add	r3, r9
 80112f0:	9309      	str	r3, [sp, #36]	; 0x24
 80112f2:	e750      	b.n	8011196 <_vfiprintf_r+0x42>
 80112f4:	fb05 3202 	mla	r2, r5, r2, r3
 80112f8:	2001      	movs	r0, #1
 80112fa:	4688      	mov	r8, r1
 80112fc:	e78a      	b.n	8011214 <_vfiprintf_r+0xc0>
 80112fe:	2300      	movs	r3, #0
 8011300:	f108 0801 	add.w	r8, r8, #1
 8011304:	9305      	str	r3, [sp, #20]
 8011306:	4619      	mov	r1, r3
 8011308:	250a      	movs	r5, #10
 801130a:	4640      	mov	r0, r8
 801130c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011310:	3a30      	subs	r2, #48	; 0x30
 8011312:	2a09      	cmp	r2, #9
 8011314:	d903      	bls.n	801131e <_vfiprintf_r+0x1ca>
 8011316:	2b00      	cmp	r3, #0
 8011318:	d0c3      	beq.n	80112a2 <_vfiprintf_r+0x14e>
 801131a:	9105      	str	r1, [sp, #20]
 801131c:	e7c1      	b.n	80112a2 <_vfiprintf_r+0x14e>
 801131e:	fb05 2101 	mla	r1, r5, r1, r2
 8011322:	2301      	movs	r3, #1
 8011324:	4680      	mov	r8, r0
 8011326:	e7f0      	b.n	801130a <_vfiprintf_r+0x1b6>
 8011328:	ab03      	add	r3, sp, #12
 801132a:	9300      	str	r3, [sp, #0]
 801132c:	4622      	mov	r2, r4
 801132e:	4b13      	ldr	r3, [pc, #76]	; (801137c <_vfiprintf_r+0x228>)
 8011330:	a904      	add	r1, sp, #16
 8011332:	4630      	mov	r0, r6
 8011334:	f7fc fa7e 	bl	800d834 <_printf_float>
 8011338:	f1b0 3fff 	cmp.w	r0, #4294967295
 801133c:	4681      	mov	r9, r0
 801133e:	d1d5      	bne.n	80112ec <_vfiprintf_r+0x198>
 8011340:	89a3      	ldrh	r3, [r4, #12]
 8011342:	065b      	lsls	r3, r3, #25
 8011344:	f53f af7e 	bmi.w	8011244 <_vfiprintf_r+0xf0>
 8011348:	9809      	ldr	r0, [sp, #36]	; 0x24
 801134a:	e77d      	b.n	8011248 <_vfiprintf_r+0xf4>
 801134c:	ab03      	add	r3, sp, #12
 801134e:	9300      	str	r3, [sp, #0]
 8011350:	4622      	mov	r2, r4
 8011352:	4b0a      	ldr	r3, [pc, #40]	; (801137c <_vfiprintf_r+0x228>)
 8011354:	a904      	add	r1, sp, #16
 8011356:	4630      	mov	r0, r6
 8011358:	f7fc fd22 	bl	800dda0 <_printf_i>
 801135c:	e7ec      	b.n	8011338 <_vfiprintf_r+0x1e4>
 801135e:	bf00      	nop
 8011360:	08011b70 	.word	0x08011b70
 8011364:	08011cbc 	.word	0x08011cbc
 8011368:	08011b90 	.word	0x08011b90
 801136c:	08011b50 	.word	0x08011b50
 8011370:	08011cc2 	.word	0x08011cc2
 8011374:	08011cc6 	.word	0x08011cc6
 8011378:	0800d835 	.word	0x0800d835
 801137c:	0801112f 	.word	0x0801112f

08011380 <__sread>:
 8011380:	b510      	push	{r4, lr}
 8011382:	460c      	mov	r4, r1
 8011384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011388:	f000 faa6 	bl	80118d8 <_read_r>
 801138c:	2800      	cmp	r0, #0
 801138e:	bfab      	itete	ge
 8011390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011392:	89a3      	ldrhlt	r3, [r4, #12]
 8011394:	181b      	addge	r3, r3, r0
 8011396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801139a:	bfac      	ite	ge
 801139c:	6563      	strge	r3, [r4, #84]	; 0x54
 801139e:	81a3      	strhlt	r3, [r4, #12]
 80113a0:	bd10      	pop	{r4, pc}

080113a2 <__swrite>:
 80113a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a6:	461f      	mov	r7, r3
 80113a8:	898b      	ldrh	r3, [r1, #12]
 80113aa:	05db      	lsls	r3, r3, #23
 80113ac:	4605      	mov	r5, r0
 80113ae:	460c      	mov	r4, r1
 80113b0:	4616      	mov	r6, r2
 80113b2:	d505      	bpl.n	80113c0 <__swrite+0x1e>
 80113b4:	2302      	movs	r3, #2
 80113b6:	2200      	movs	r2, #0
 80113b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113bc:	f000 f9d6 	bl	801176c <_lseek_r>
 80113c0:	89a3      	ldrh	r3, [r4, #12]
 80113c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80113ca:	81a3      	strh	r3, [r4, #12]
 80113cc:	4632      	mov	r2, r6
 80113ce:	463b      	mov	r3, r7
 80113d0:	4628      	mov	r0, r5
 80113d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113d6:	f000 b889 	b.w	80114ec <_write_r>

080113da <__sseek>:
 80113da:	b510      	push	{r4, lr}
 80113dc:	460c      	mov	r4, r1
 80113de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113e2:	f000 f9c3 	bl	801176c <_lseek_r>
 80113e6:	1c43      	adds	r3, r0, #1
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	bf15      	itete	ne
 80113ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80113ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80113f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80113f6:	81a3      	strheq	r3, [r4, #12]
 80113f8:	bf18      	it	ne
 80113fa:	81a3      	strhne	r3, [r4, #12]
 80113fc:	bd10      	pop	{r4, pc}

080113fe <__sclose>:
 80113fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011402:	f000 b8f3 	b.w	80115ec <_close_r>

08011406 <strncmp>:
 8011406:	b510      	push	{r4, lr}
 8011408:	b16a      	cbz	r2, 8011426 <strncmp+0x20>
 801140a:	3901      	subs	r1, #1
 801140c:	1884      	adds	r4, r0, r2
 801140e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011412:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011416:	4293      	cmp	r3, r2
 8011418:	d103      	bne.n	8011422 <strncmp+0x1c>
 801141a:	42a0      	cmp	r0, r4
 801141c:	d001      	beq.n	8011422 <strncmp+0x1c>
 801141e:	2b00      	cmp	r3, #0
 8011420:	d1f5      	bne.n	801140e <strncmp+0x8>
 8011422:	1a98      	subs	r0, r3, r2
 8011424:	bd10      	pop	{r4, pc}
 8011426:	4610      	mov	r0, r2
 8011428:	e7fc      	b.n	8011424 <strncmp+0x1e>
	...

0801142c <__swbuf_r>:
 801142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801142e:	460e      	mov	r6, r1
 8011430:	4614      	mov	r4, r2
 8011432:	4605      	mov	r5, r0
 8011434:	b118      	cbz	r0, 801143e <__swbuf_r+0x12>
 8011436:	6983      	ldr	r3, [r0, #24]
 8011438:	b90b      	cbnz	r3, 801143e <__swbuf_r+0x12>
 801143a:	f7fe fd29 	bl	800fe90 <__sinit>
 801143e:	4b21      	ldr	r3, [pc, #132]	; (80114c4 <__swbuf_r+0x98>)
 8011440:	429c      	cmp	r4, r3
 8011442:	d12a      	bne.n	801149a <__swbuf_r+0x6e>
 8011444:	686c      	ldr	r4, [r5, #4]
 8011446:	69a3      	ldr	r3, [r4, #24]
 8011448:	60a3      	str	r3, [r4, #8]
 801144a:	89a3      	ldrh	r3, [r4, #12]
 801144c:	071a      	lsls	r2, r3, #28
 801144e:	d52e      	bpl.n	80114ae <__swbuf_r+0x82>
 8011450:	6923      	ldr	r3, [r4, #16]
 8011452:	b363      	cbz	r3, 80114ae <__swbuf_r+0x82>
 8011454:	6923      	ldr	r3, [r4, #16]
 8011456:	6820      	ldr	r0, [r4, #0]
 8011458:	1ac0      	subs	r0, r0, r3
 801145a:	6963      	ldr	r3, [r4, #20]
 801145c:	b2f6      	uxtb	r6, r6
 801145e:	4283      	cmp	r3, r0
 8011460:	4637      	mov	r7, r6
 8011462:	dc04      	bgt.n	801146e <__swbuf_r+0x42>
 8011464:	4621      	mov	r1, r4
 8011466:	4628      	mov	r0, r5
 8011468:	f000 f956 	bl	8011718 <_fflush_r>
 801146c:	bb28      	cbnz	r0, 80114ba <__swbuf_r+0x8e>
 801146e:	68a3      	ldr	r3, [r4, #8]
 8011470:	3b01      	subs	r3, #1
 8011472:	60a3      	str	r3, [r4, #8]
 8011474:	6823      	ldr	r3, [r4, #0]
 8011476:	1c5a      	adds	r2, r3, #1
 8011478:	6022      	str	r2, [r4, #0]
 801147a:	701e      	strb	r6, [r3, #0]
 801147c:	6963      	ldr	r3, [r4, #20]
 801147e:	3001      	adds	r0, #1
 8011480:	4283      	cmp	r3, r0
 8011482:	d004      	beq.n	801148e <__swbuf_r+0x62>
 8011484:	89a3      	ldrh	r3, [r4, #12]
 8011486:	07db      	lsls	r3, r3, #31
 8011488:	d519      	bpl.n	80114be <__swbuf_r+0x92>
 801148a:	2e0a      	cmp	r6, #10
 801148c:	d117      	bne.n	80114be <__swbuf_r+0x92>
 801148e:	4621      	mov	r1, r4
 8011490:	4628      	mov	r0, r5
 8011492:	f000 f941 	bl	8011718 <_fflush_r>
 8011496:	b190      	cbz	r0, 80114be <__swbuf_r+0x92>
 8011498:	e00f      	b.n	80114ba <__swbuf_r+0x8e>
 801149a:	4b0b      	ldr	r3, [pc, #44]	; (80114c8 <__swbuf_r+0x9c>)
 801149c:	429c      	cmp	r4, r3
 801149e:	d101      	bne.n	80114a4 <__swbuf_r+0x78>
 80114a0:	68ac      	ldr	r4, [r5, #8]
 80114a2:	e7d0      	b.n	8011446 <__swbuf_r+0x1a>
 80114a4:	4b09      	ldr	r3, [pc, #36]	; (80114cc <__swbuf_r+0xa0>)
 80114a6:	429c      	cmp	r4, r3
 80114a8:	bf08      	it	eq
 80114aa:	68ec      	ldreq	r4, [r5, #12]
 80114ac:	e7cb      	b.n	8011446 <__swbuf_r+0x1a>
 80114ae:	4621      	mov	r1, r4
 80114b0:	4628      	mov	r0, r5
 80114b2:	f000 f82d 	bl	8011510 <__swsetup_r>
 80114b6:	2800      	cmp	r0, #0
 80114b8:	d0cc      	beq.n	8011454 <__swbuf_r+0x28>
 80114ba:	f04f 37ff 	mov.w	r7, #4294967295
 80114be:	4638      	mov	r0, r7
 80114c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80114c2:	bf00      	nop
 80114c4:	08011b70 	.word	0x08011b70
 80114c8:	08011b90 	.word	0x08011b90
 80114cc:	08011b50 	.word	0x08011b50

080114d0 <__ascii_wctomb>:
 80114d0:	b149      	cbz	r1, 80114e6 <__ascii_wctomb+0x16>
 80114d2:	2aff      	cmp	r2, #255	; 0xff
 80114d4:	bf85      	ittet	hi
 80114d6:	238a      	movhi	r3, #138	; 0x8a
 80114d8:	6003      	strhi	r3, [r0, #0]
 80114da:	700a      	strbls	r2, [r1, #0]
 80114dc:	f04f 30ff 	movhi.w	r0, #4294967295
 80114e0:	bf98      	it	ls
 80114e2:	2001      	movls	r0, #1
 80114e4:	4770      	bx	lr
 80114e6:	4608      	mov	r0, r1
 80114e8:	4770      	bx	lr
	...

080114ec <_write_r>:
 80114ec:	b538      	push	{r3, r4, r5, lr}
 80114ee:	4c07      	ldr	r4, [pc, #28]	; (801150c <_write_r+0x20>)
 80114f0:	4605      	mov	r5, r0
 80114f2:	4608      	mov	r0, r1
 80114f4:	4611      	mov	r1, r2
 80114f6:	2200      	movs	r2, #0
 80114f8:	6022      	str	r2, [r4, #0]
 80114fa:	461a      	mov	r2, r3
 80114fc:	f7f1 fbff 	bl	8002cfe <_write>
 8011500:	1c43      	adds	r3, r0, #1
 8011502:	d102      	bne.n	801150a <_write_r+0x1e>
 8011504:	6823      	ldr	r3, [r4, #0]
 8011506:	b103      	cbz	r3, 801150a <_write_r+0x1e>
 8011508:	602b      	str	r3, [r5, #0]
 801150a:	bd38      	pop	{r3, r4, r5, pc}
 801150c:	20002950 	.word	0x20002950

08011510 <__swsetup_r>:
 8011510:	4b32      	ldr	r3, [pc, #200]	; (80115dc <__swsetup_r+0xcc>)
 8011512:	b570      	push	{r4, r5, r6, lr}
 8011514:	681d      	ldr	r5, [r3, #0]
 8011516:	4606      	mov	r6, r0
 8011518:	460c      	mov	r4, r1
 801151a:	b125      	cbz	r5, 8011526 <__swsetup_r+0x16>
 801151c:	69ab      	ldr	r3, [r5, #24]
 801151e:	b913      	cbnz	r3, 8011526 <__swsetup_r+0x16>
 8011520:	4628      	mov	r0, r5
 8011522:	f7fe fcb5 	bl	800fe90 <__sinit>
 8011526:	4b2e      	ldr	r3, [pc, #184]	; (80115e0 <__swsetup_r+0xd0>)
 8011528:	429c      	cmp	r4, r3
 801152a:	d10f      	bne.n	801154c <__swsetup_r+0x3c>
 801152c:	686c      	ldr	r4, [r5, #4]
 801152e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011532:	b29a      	uxth	r2, r3
 8011534:	0715      	lsls	r5, r2, #28
 8011536:	d42c      	bmi.n	8011592 <__swsetup_r+0x82>
 8011538:	06d0      	lsls	r0, r2, #27
 801153a:	d411      	bmi.n	8011560 <__swsetup_r+0x50>
 801153c:	2209      	movs	r2, #9
 801153e:	6032      	str	r2, [r6, #0]
 8011540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011544:	81a3      	strh	r3, [r4, #12]
 8011546:	f04f 30ff 	mov.w	r0, #4294967295
 801154a:	e03e      	b.n	80115ca <__swsetup_r+0xba>
 801154c:	4b25      	ldr	r3, [pc, #148]	; (80115e4 <__swsetup_r+0xd4>)
 801154e:	429c      	cmp	r4, r3
 8011550:	d101      	bne.n	8011556 <__swsetup_r+0x46>
 8011552:	68ac      	ldr	r4, [r5, #8]
 8011554:	e7eb      	b.n	801152e <__swsetup_r+0x1e>
 8011556:	4b24      	ldr	r3, [pc, #144]	; (80115e8 <__swsetup_r+0xd8>)
 8011558:	429c      	cmp	r4, r3
 801155a:	bf08      	it	eq
 801155c:	68ec      	ldreq	r4, [r5, #12]
 801155e:	e7e6      	b.n	801152e <__swsetup_r+0x1e>
 8011560:	0751      	lsls	r1, r2, #29
 8011562:	d512      	bpl.n	801158a <__swsetup_r+0x7a>
 8011564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011566:	b141      	cbz	r1, 801157a <__swsetup_r+0x6a>
 8011568:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801156c:	4299      	cmp	r1, r3
 801156e:	d002      	beq.n	8011576 <__swsetup_r+0x66>
 8011570:	4630      	mov	r0, r6
 8011572:	f7fc f823 	bl	800d5bc <_free_r>
 8011576:	2300      	movs	r3, #0
 8011578:	6363      	str	r3, [r4, #52]	; 0x34
 801157a:	89a3      	ldrh	r3, [r4, #12]
 801157c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011580:	81a3      	strh	r3, [r4, #12]
 8011582:	2300      	movs	r3, #0
 8011584:	6063      	str	r3, [r4, #4]
 8011586:	6923      	ldr	r3, [r4, #16]
 8011588:	6023      	str	r3, [r4, #0]
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	f043 0308 	orr.w	r3, r3, #8
 8011590:	81a3      	strh	r3, [r4, #12]
 8011592:	6923      	ldr	r3, [r4, #16]
 8011594:	b94b      	cbnz	r3, 80115aa <__swsetup_r+0x9a>
 8011596:	89a3      	ldrh	r3, [r4, #12]
 8011598:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801159c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80115a0:	d003      	beq.n	80115aa <__swsetup_r+0x9a>
 80115a2:	4621      	mov	r1, r4
 80115a4:	4630      	mov	r0, r6
 80115a6:	f000 f917 	bl	80117d8 <__smakebuf_r>
 80115aa:	89a2      	ldrh	r2, [r4, #12]
 80115ac:	f012 0301 	ands.w	r3, r2, #1
 80115b0:	d00c      	beq.n	80115cc <__swsetup_r+0xbc>
 80115b2:	2300      	movs	r3, #0
 80115b4:	60a3      	str	r3, [r4, #8]
 80115b6:	6963      	ldr	r3, [r4, #20]
 80115b8:	425b      	negs	r3, r3
 80115ba:	61a3      	str	r3, [r4, #24]
 80115bc:	6923      	ldr	r3, [r4, #16]
 80115be:	b953      	cbnz	r3, 80115d6 <__swsetup_r+0xc6>
 80115c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80115c8:	d1ba      	bne.n	8011540 <__swsetup_r+0x30>
 80115ca:	bd70      	pop	{r4, r5, r6, pc}
 80115cc:	0792      	lsls	r2, r2, #30
 80115ce:	bf58      	it	pl
 80115d0:	6963      	ldrpl	r3, [r4, #20]
 80115d2:	60a3      	str	r3, [r4, #8]
 80115d4:	e7f2      	b.n	80115bc <__swsetup_r+0xac>
 80115d6:	2000      	movs	r0, #0
 80115d8:	e7f7      	b.n	80115ca <__swsetup_r+0xba>
 80115da:	bf00      	nop
 80115dc:	20000190 	.word	0x20000190
 80115e0:	08011b70 	.word	0x08011b70
 80115e4:	08011b90 	.word	0x08011b90
 80115e8:	08011b50 	.word	0x08011b50

080115ec <_close_r>:
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4c06      	ldr	r4, [pc, #24]	; (8011608 <_close_r+0x1c>)
 80115f0:	2300      	movs	r3, #0
 80115f2:	4605      	mov	r5, r0
 80115f4:	4608      	mov	r0, r1
 80115f6:	6023      	str	r3, [r4, #0]
 80115f8:	f7f1 fb9d 	bl	8002d36 <_close>
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d102      	bne.n	8011606 <_close_r+0x1a>
 8011600:	6823      	ldr	r3, [r4, #0]
 8011602:	b103      	cbz	r3, 8011606 <_close_r+0x1a>
 8011604:	602b      	str	r3, [r5, #0]
 8011606:	bd38      	pop	{r3, r4, r5, pc}
 8011608:	20002950 	.word	0x20002950

0801160c <__sflush_r>:
 801160c:	898a      	ldrh	r2, [r1, #12]
 801160e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011612:	4605      	mov	r5, r0
 8011614:	0710      	lsls	r0, r2, #28
 8011616:	460c      	mov	r4, r1
 8011618:	d458      	bmi.n	80116cc <__sflush_r+0xc0>
 801161a:	684b      	ldr	r3, [r1, #4]
 801161c:	2b00      	cmp	r3, #0
 801161e:	dc05      	bgt.n	801162c <__sflush_r+0x20>
 8011620:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011622:	2b00      	cmp	r3, #0
 8011624:	dc02      	bgt.n	801162c <__sflush_r+0x20>
 8011626:	2000      	movs	r0, #0
 8011628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801162c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801162e:	2e00      	cmp	r6, #0
 8011630:	d0f9      	beq.n	8011626 <__sflush_r+0x1a>
 8011632:	2300      	movs	r3, #0
 8011634:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011638:	682f      	ldr	r7, [r5, #0]
 801163a:	6a21      	ldr	r1, [r4, #32]
 801163c:	602b      	str	r3, [r5, #0]
 801163e:	d032      	beq.n	80116a6 <__sflush_r+0x9a>
 8011640:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011642:	89a3      	ldrh	r3, [r4, #12]
 8011644:	075a      	lsls	r2, r3, #29
 8011646:	d505      	bpl.n	8011654 <__sflush_r+0x48>
 8011648:	6863      	ldr	r3, [r4, #4]
 801164a:	1ac0      	subs	r0, r0, r3
 801164c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801164e:	b10b      	cbz	r3, 8011654 <__sflush_r+0x48>
 8011650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011652:	1ac0      	subs	r0, r0, r3
 8011654:	2300      	movs	r3, #0
 8011656:	4602      	mov	r2, r0
 8011658:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801165a:	6a21      	ldr	r1, [r4, #32]
 801165c:	4628      	mov	r0, r5
 801165e:	47b0      	blx	r6
 8011660:	1c43      	adds	r3, r0, #1
 8011662:	89a3      	ldrh	r3, [r4, #12]
 8011664:	d106      	bne.n	8011674 <__sflush_r+0x68>
 8011666:	6829      	ldr	r1, [r5, #0]
 8011668:	291d      	cmp	r1, #29
 801166a:	d848      	bhi.n	80116fe <__sflush_r+0xf2>
 801166c:	4a29      	ldr	r2, [pc, #164]	; (8011714 <__sflush_r+0x108>)
 801166e:	40ca      	lsrs	r2, r1
 8011670:	07d6      	lsls	r6, r2, #31
 8011672:	d544      	bpl.n	80116fe <__sflush_r+0xf2>
 8011674:	2200      	movs	r2, #0
 8011676:	6062      	str	r2, [r4, #4]
 8011678:	04d9      	lsls	r1, r3, #19
 801167a:	6922      	ldr	r2, [r4, #16]
 801167c:	6022      	str	r2, [r4, #0]
 801167e:	d504      	bpl.n	801168a <__sflush_r+0x7e>
 8011680:	1c42      	adds	r2, r0, #1
 8011682:	d101      	bne.n	8011688 <__sflush_r+0x7c>
 8011684:	682b      	ldr	r3, [r5, #0]
 8011686:	b903      	cbnz	r3, 801168a <__sflush_r+0x7e>
 8011688:	6560      	str	r0, [r4, #84]	; 0x54
 801168a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801168c:	602f      	str	r7, [r5, #0]
 801168e:	2900      	cmp	r1, #0
 8011690:	d0c9      	beq.n	8011626 <__sflush_r+0x1a>
 8011692:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011696:	4299      	cmp	r1, r3
 8011698:	d002      	beq.n	80116a0 <__sflush_r+0x94>
 801169a:	4628      	mov	r0, r5
 801169c:	f7fb ff8e 	bl	800d5bc <_free_r>
 80116a0:	2000      	movs	r0, #0
 80116a2:	6360      	str	r0, [r4, #52]	; 0x34
 80116a4:	e7c0      	b.n	8011628 <__sflush_r+0x1c>
 80116a6:	2301      	movs	r3, #1
 80116a8:	4628      	mov	r0, r5
 80116aa:	47b0      	blx	r6
 80116ac:	1c41      	adds	r1, r0, #1
 80116ae:	d1c8      	bne.n	8011642 <__sflush_r+0x36>
 80116b0:	682b      	ldr	r3, [r5, #0]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d0c5      	beq.n	8011642 <__sflush_r+0x36>
 80116b6:	2b1d      	cmp	r3, #29
 80116b8:	d001      	beq.n	80116be <__sflush_r+0xb2>
 80116ba:	2b16      	cmp	r3, #22
 80116bc:	d101      	bne.n	80116c2 <__sflush_r+0xb6>
 80116be:	602f      	str	r7, [r5, #0]
 80116c0:	e7b1      	b.n	8011626 <__sflush_r+0x1a>
 80116c2:	89a3      	ldrh	r3, [r4, #12]
 80116c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116c8:	81a3      	strh	r3, [r4, #12]
 80116ca:	e7ad      	b.n	8011628 <__sflush_r+0x1c>
 80116cc:	690f      	ldr	r7, [r1, #16]
 80116ce:	2f00      	cmp	r7, #0
 80116d0:	d0a9      	beq.n	8011626 <__sflush_r+0x1a>
 80116d2:	0793      	lsls	r3, r2, #30
 80116d4:	680e      	ldr	r6, [r1, #0]
 80116d6:	bf08      	it	eq
 80116d8:	694b      	ldreq	r3, [r1, #20]
 80116da:	600f      	str	r7, [r1, #0]
 80116dc:	bf18      	it	ne
 80116de:	2300      	movne	r3, #0
 80116e0:	eba6 0807 	sub.w	r8, r6, r7
 80116e4:	608b      	str	r3, [r1, #8]
 80116e6:	f1b8 0f00 	cmp.w	r8, #0
 80116ea:	dd9c      	ble.n	8011626 <__sflush_r+0x1a>
 80116ec:	4643      	mov	r3, r8
 80116ee:	463a      	mov	r2, r7
 80116f0:	6a21      	ldr	r1, [r4, #32]
 80116f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80116f4:	4628      	mov	r0, r5
 80116f6:	47b0      	blx	r6
 80116f8:	2800      	cmp	r0, #0
 80116fa:	dc06      	bgt.n	801170a <__sflush_r+0xfe>
 80116fc:	89a3      	ldrh	r3, [r4, #12]
 80116fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011702:	81a3      	strh	r3, [r4, #12]
 8011704:	f04f 30ff 	mov.w	r0, #4294967295
 8011708:	e78e      	b.n	8011628 <__sflush_r+0x1c>
 801170a:	4407      	add	r7, r0
 801170c:	eba8 0800 	sub.w	r8, r8, r0
 8011710:	e7e9      	b.n	80116e6 <__sflush_r+0xda>
 8011712:	bf00      	nop
 8011714:	20400001 	.word	0x20400001

08011718 <_fflush_r>:
 8011718:	b538      	push	{r3, r4, r5, lr}
 801171a:	690b      	ldr	r3, [r1, #16]
 801171c:	4605      	mov	r5, r0
 801171e:	460c      	mov	r4, r1
 8011720:	b1db      	cbz	r3, 801175a <_fflush_r+0x42>
 8011722:	b118      	cbz	r0, 801172c <_fflush_r+0x14>
 8011724:	6983      	ldr	r3, [r0, #24]
 8011726:	b90b      	cbnz	r3, 801172c <_fflush_r+0x14>
 8011728:	f7fe fbb2 	bl	800fe90 <__sinit>
 801172c:	4b0c      	ldr	r3, [pc, #48]	; (8011760 <_fflush_r+0x48>)
 801172e:	429c      	cmp	r4, r3
 8011730:	d109      	bne.n	8011746 <_fflush_r+0x2e>
 8011732:	686c      	ldr	r4, [r5, #4]
 8011734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011738:	b17b      	cbz	r3, 801175a <_fflush_r+0x42>
 801173a:	4621      	mov	r1, r4
 801173c:	4628      	mov	r0, r5
 801173e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011742:	f7ff bf63 	b.w	801160c <__sflush_r>
 8011746:	4b07      	ldr	r3, [pc, #28]	; (8011764 <_fflush_r+0x4c>)
 8011748:	429c      	cmp	r4, r3
 801174a:	d101      	bne.n	8011750 <_fflush_r+0x38>
 801174c:	68ac      	ldr	r4, [r5, #8]
 801174e:	e7f1      	b.n	8011734 <_fflush_r+0x1c>
 8011750:	4b05      	ldr	r3, [pc, #20]	; (8011768 <_fflush_r+0x50>)
 8011752:	429c      	cmp	r4, r3
 8011754:	bf08      	it	eq
 8011756:	68ec      	ldreq	r4, [r5, #12]
 8011758:	e7ec      	b.n	8011734 <_fflush_r+0x1c>
 801175a:	2000      	movs	r0, #0
 801175c:	bd38      	pop	{r3, r4, r5, pc}
 801175e:	bf00      	nop
 8011760:	08011b70 	.word	0x08011b70
 8011764:	08011b90 	.word	0x08011b90
 8011768:	08011b50 	.word	0x08011b50

0801176c <_lseek_r>:
 801176c:	b538      	push	{r3, r4, r5, lr}
 801176e:	4c07      	ldr	r4, [pc, #28]	; (801178c <_lseek_r+0x20>)
 8011770:	4605      	mov	r5, r0
 8011772:	4608      	mov	r0, r1
 8011774:	4611      	mov	r1, r2
 8011776:	2200      	movs	r2, #0
 8011778:	6022      	str	r2, [r4, #0]
 801177a:	461a      	mov	r2, r3
 801177c:	f7f1 fb02 	bl	8002d84 <_lseek>
 8011780:	1c43      	adds	r3, r0, #1
 8011782:	d102      	bne.n	801178a <_lseek_r+0x1e>
 8011784:	6823      	ldr	r3, [r4, #0]
 8011786:	b103      	cbz	r3, 801178a <_lseek_r+0x1e>
 8011788:	602b      	str	r3, [r5, #0]
 801178a:	bd38      	pop	{r3, r4, r5, pc}
 801178c:	20002950 	.word	0x20002950

08011790 <__swhatbuf_r>:
 8011790:	b570      	push	{r4, r5, r6, lr}
 8011792:	460e      	mov	r6, r1
 8011794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011798:	2900      	cmp	r1, #0
 801179a:	b096      	sub	sp, #88	; 0x58
 801179c:	4614      	mov	r4, r2
 801179e:	461d      	mov	r5, r3
 80117a0:	da07      	bge.n	80117b2 <__swhatbuf_r+0x22>
 80117a2:	2300      	movs	r3, #0
 80117a4:	602b      	str	r3, [r5, #0]
 80117a6:	89b3      	ldrh	r3, [r6, #12]
 80117a8:	061a      	lsls	r2, r3, #24
 80117aa:	d410      	bmi.n	80117ce <__swhatbuf_r+0x3e>
 80117ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117b0:	e00e      	b.n	80117d0 <__swhatbuf_r+0x40>
 80117b2:	466a      	mov	r2, sp
 80117b4:	f000 f8a2 	bl	80118fc <_fstat_r>
 80117b8:	2800      	cmp	r0, #0
 80117ba:	dbf2      	blt.n	80117a2 <__swhatbuf_r+0x12>
 80117bc:	9a01      	ldr	r2, [sp, #4]
 80117be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80117c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80117c6:	425a      	negs	r2, r3
 80117c8:	415a      	adcs	r2, r3
 80117ca:	602a      	str	r2, [r5, #0]
 80117cc:	e7ee      	b.n	80117ac <__swhatbuf_r+0x1c>
 80117ce:	2340      	movs	r3, #64	; 0x40
 80117d0:	2000      	movs	r0, #0
 80117d2:	6023      	str	r3, [r4, #0]
 80117d4:	b016      	add	sp, #88	; 0x58
 80117d6:	bd70      	pop	{r4, r5, r6, pc}

080117d8 <__smakebuf_r>:
 80117d8:	898b      	ldrh	r3, [r1, #12]
 80117da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80117dc:	079d      	lsls	r5, r3, #30
 80117de:	4606      	mov	r6, r0
 80117e0:	460c      	mov	r4, r1
 80117e2:	d507      	bpl.n	80117f4 <__smakebuf_r+0x1c>
 80117e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80117e8:	6023      	str	r3, [r4, #0]
 80117ea:	6123      	str	r3, [r4, #16]
 80117ec:	2301      	movs	r3, #1
 80117ee:	6163      	str	r3, [r4, #20]
 80117f0:	b002      	add	sp, #8
 80117f2:	bd70      	pop	{r4, r5, r6, pc}
 80117f4:	ab01      	add	r3, sp, #4
 80117f6:	466a      	mov	r2, sp
 80117f8:	f7ff ffca 	bl	8011790 <__swhatbuf_r>
 80117fc:	9900      	ldr	r1, [sp, #0]
 80117fe:	4605      	mov	r5, r0
 8011800:	4630      	mov	r0, r6
 8011802:	f7fb ff29 	bl	800d658 <_malloc_r>
 8011806:	b948      	cbnz	r0, 801181c <__smakebuf_r+0x44>
 8011808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801180c:	059a      	lsls	r2, r3, #22
 801180e:	d4ef      	bmi.n	80117f0 <__smakebuf_r+0x18>
 8011810:	f023 0303 	bic.w	r3, r3, #3
 8011814:	f043 0302 	orr.w	r3, r3, #2
 8011818:	81a3      	strh	r3, [r4, #12]
 801181a:	e7e3      	b.n	80117e4 <__smakebuf_r+0xc>
 801181c:	4b0d      	ldr	r3, [pc, #52]	; (8011854 <__smakebuf_r+0x7c>)
 801181e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011820:	89a3      	ldrh	r3, [r4, #12]
 8011822:	6020      	str	r0, [r4, #0]
 8011824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011828:	81a3      	strh	r3, [r4, #12]
 801182a:	9b00      	ldr	r3, [sp, #0]
 801182c:	6163      	str	r3, [r4, #20]
 801182e:	9b01      	ldr	r3, [sp, #4]
 8011830:	6120      	str	r0, [r4, #16]
 8011832:	b15b      	cbz	r3, 801184c <__smakebuf_r+0x74>
 8011834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011838:	4630      	mov	r0, r6
 801183a:	f000 f871 	bl	8011920 <_isatty_r>
 801183e:	b128      	cbz	r0, 801184c <__smakebuf_r+0x74>
 8011840:	89a3      	ldrh	r3, [r4, #12]
 8011842:	f023 0303 	bic.w	r3, r3, #3
 8011846:	f043 0301 	orr.w	r3, r3, #1
 801184a:	81a3      	strh	r3, [r4, #12]
 801184c:	89a3      	ldrh	r3, [r4, #12]
 801184e:	431d      	orrs	r5, r3
 8011850:	81a5      	strh	r5, [r4, #12]
 8011852:	e7cd      	b.n	80117f0 <__smakebuf_r+0x18>
 8011854:	0800fe59 	.word	0x0800fe59

08011858 <memmove>:
 8011858:	4288      	cmp	r0, r1
 801185a:	b510      	push	{r4, lr}
 801185c:	eb01 0302 	add.w	r3, r1, r2
 8011860:	d807      	bhi.n	8011872 <memmove+0x1a>
 8011862:	1e42      	subs	r2, r0, #1
 8011864:	4299      	cmp	r1, r3
 8011866:	d00a      	beq.n	801187e <memmove+0x26>
 8011868:	f811 4b01 	ldrb.w	r4, [r1], #1
 801186c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8011870:	e7f8      	b.n	8011864 <memmove+0xc>
 8011872:	4283      	cmp	r3, r0
 8011874:	d9f5      	bls.n	8011862 <memmove+0xa>
 8011876:	1881      	adds	r1, r0, r2
 8011878:	1ad2      	subs	r2, r2, r3
 801187a:	42d3      	cmn	r3, r2
 801187c:	d100      	bne.n	8011880 <memmove+0x28>
 801187e:	bd10      	pop	{r4, pc}
 8011880:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011884:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011888:	e7f7      	b.n	801187a <memmove+0x22>

0801188a <_realloc_r>:
 801188a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801188c:	4607      	mov	r7, r0
 801188e:	4614      	mov	r4, r2
 8011890:	460e      	mov	r6, r1
 8011892:	b921      	cbnz	r1, 801189e <_realloc_r+0x14>
 8011894:	4611      	mov	r1, r2
 8011896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801189a:	f7fb bedd 	b.w	800d658 <_malloc_r>
 801189e:	b922      	cbnz	r2, 80118aa <_realloc_r+0x20>
 80118a0:	f7fb fe8c 	bl	800d5bc <_free_r>
 80118a4:	4625      	mov	r5, r4
 80118a6:	4628      	mov	r0, r5
 80118a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118aa:	f000 f849 	bl	8011940 <_malloc_usable_size_r>
 80118ae:	42a0      	cmp	r0, r4
 80118b0:	d20f      	bcs.n	80118d2 <_realloc_r+0x48>
 80118b2:	4621      	mov	r1, r4
 80118b4:	4638      	mov	r0, r7
 80118b6:	f7fb fecf 	bl	800d658 <_malloc_r>
 80118ba:	4605      	mov	r5, r0
 80118bc:	2800      	cmp	r0, #0
 80118be:	d0f2      	beq.n	80118a6 <_realloc_r+0x1c>
 80118c0:	4631      	mov	r1, r6
 80118c2:	4622      	mov	r2, r4
 80118c4:	f7fb fe66 	bl	800d594 <memcpy>
 80118c8:	4631      	mov	r1, r6
 80118ca:	4638      	mov	r0, r7
 80118cc:	f7fb fe76 	bl	800d5bc <_free_r>
 80118d0:	e7e9      	b.n	80118a6 <_realloc_r+0x1c>
 80118d2:	4635      	mov	r5, r6
 80118d4:	e7e7      	b.n	80118a6 <_realloc_r+0x1c>
	...

080118d8 <_read_r>:
 80118d8:	b538      	push	{r3, r4, r5, lr}
 80118da:	4c07      	ldr	r4, [pc, #28]	; (80118f8 <_read_r+0x20>)
 80118dc:	4605      	mov	r5, r0
 80118de:	4608      	mov	r0, r1
 80118e0:	4611      	mov	r1, r2
 80118e2:	2200      	movs	r2, #0
 80118e4:	6022      	str	r2, [r4, #0]
 80118e6:	461a      	mov	r2, r3
 80118e8:	f7f1 f9ec 	bl	8002cc4 <_read>
 80118ec:	1c43      	adds	r3, r0, #1
 80118ee:	d102      	bne.n	80118f6 <_read_r+0x1e>
 80118f0:	6823      	ldr	r3, [r4, #0]
 80118f2:	b103      	cbz	r3, 80118f6 <_read_r+0x1e>
 80118f4:	602b      	str	r3, [r5, #0]
 80118f6:	bd38      	pop	{r3, r4, r5, pc}
 80118f8:	20002950 	.word	0x20002950

080118fc <_fstat_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	4c07      	ldr	r4, [pc, #28]	; (801191c <_fstat_r+0x20>)
 8011900:	2300      	movs	r3, #0
 8011902:	4605      	mov	r5, r0
 8011904:	4608      	mov	r0, r1
 8011906:	4611      	mov	r1, r2
 8011908:	6023      	str	r3, [r4, #0]
 801190a:	f7f1 fa20 	bl	8002d4e <_fstat>
 801190e:	1c43      	adds	r3, r0, #1
 8011910:	d102      	bne.n	8011918 <_fstat_r+0x1c>
 8011912:	6823      	ldr	r3, [r4, #0]
 8011914:	b103      	cbz	r3, 8011918 <_fstat_r+0x1c>
 8011916:	602b      	str	r3, [r5, #0]
 8011918:	bd38      	pop	{r3, r4, r5, pc}
 801191a:	bf00      	nop
 801191c:	20002950 	.word	0x20002950

08011920 <_isatty_r>:
 8011920:	b538      	push	{r3, r4, r5, lr}
 8011922:	4c06      	ldr	r4, [pc, #24]	; (801193c <_isatty_r+0x1c>)
 8011924:	2300      	movs	r3, #0
 8011926:	4605      	mov	r5, r0
 8011928:	4608      	mov	r0, r1
 801192a:	6023      	str	r3, [r4, #0]
 801192c:	f7f1 fa1f 	bl	8002d6e <_isatty>
 8011930:	1c43      	adds	r3, r0, #1
 8011932:	d102      	bne.n	801193a <_isatty_r+0x1a>
 8011934:	6823      	ldr	r3, [r4, #0]
 8011936:	b103      	cbz	r3, 801193a <_isatty_r+0x1a>
 8011938:	602b      	str	r3, [r5, #0]
 801193a:	bd38      	pop	{r3, r4, r5, pc}
 801193c:	20002950 	.word	0x20002950

08011940 <_malloc_usable_size_r>:
 8011940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011944:	1f18      	subs	r0, r3, #4
 8011946:	2b00      	cmp	r3, #0
 8011948:	bfbc      	itt	lt
 801194a:	580b      	ldrlt	r3, [r1, r0]
 801194c:	18c0      	addlt	r0, r0, r3
 801194e:	4770      	bx	lr

08011950 <_init>:
 8011950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011952:	bf00      	nop
 8011954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011956:	bc08      	pop	{r3}
 8011958:	469e      	mov	lr, r3
 801195a:	4770      	bx	lr

0801195c <_fini>:
 801195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801195e:	bf00      	nop
 8011960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011962:	bc08      	pop	{r3}
 8011964:	469e      	mov	lr, r3
 8011966:	4770      	bx	lr
