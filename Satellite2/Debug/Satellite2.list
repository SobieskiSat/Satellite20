
Satellite2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  08014660  08014660  00024660  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015260  08015260  00030360  2**0
                  CONTENTS
  4 .ARM          00000008  08015260  08015260  00025260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015268  08015268  00030360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015268  08015268  00025268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801526c  0801526c  0002526c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000360  20000000  08015270  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002954  20000360  080155d0  00030360  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20002cb4  080155d0  00032cb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002dca3  00000000  00000000  00030390  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005776  00000000  00000000  0005e033  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000021c0  00000000  00000000  000637b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f68  00000000  00000000  00065970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000943c  00000000  00000000  000678d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00021704  00000000  00000000  00070d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5562  00000000  00000000  00092418  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016797a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b94  00000000  00000000  001679f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000360 	.word	0x20000360
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014644 	.word	0x08014644

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000364 	.word	0x20000364
 80001cc:	08014644 	.word	0x08014644

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <millis>:
#include <stdbool.h>
#include "stm32f4xx_hal.h"
#include "main.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t millis() { return (uint32_t)TIM5->CNT; }
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <millis+0x14>)
 8000f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40000c00 	.word	0x40000c00

08000fa0 <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime()
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08c      	sub	sp, #48	; 0x30
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8000fa8:	f107 031c 	add.w	r3, r7, #28
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8000fc8:	f002 f876 	bl	80030b8 <Get_RTC_Instance>
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f005 fc90 	bl	80068f8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8000fd8:	f002 f86e 	bl	80030b8 <Get_RTC_Instance>
 8000fdc:	f107 0318 	add.w	r3, r7, #24
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f005 fd8d 	bl	8006b02 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8000fe8:	7efb      	ldrb	r3, [r7, #27]
 8000fea:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8000fec:	7e7a      	ldrb	r2, [r7, #25]
 8000fee:	7e7b      	ldrb	r3, [r7, #25]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d901      	bls.n	8000ff8 <getTime+0x58>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	e000      	b.n	8000ffa <getTime+0x5a>
 8000ff8:	2306      	movs	r3, #6
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 8001000:	7ebb      	ldrb	r3, [r7, #26]
 8001002:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8001004:	7e3b      	ldrb	r3, [r7, #24]
 8001006:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8001008:	7f3b      	ldrb	r3, [r7, #28]
 800100a:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 800100c:	7f7b      	ldrb	r3, [r7, #29]
 800100e:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8001010:	7fbb      	ldrb	r3, [r7, #30]
 8001012:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8001014:	f7ff ffb8 	bl	8000f88 <millis>
 8001018:	4602      	mov	r2, r0
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <getTime+0xac>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	099b      	lsrs	r3, r3, #6
 8001022:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001026:	fb01 f303 	mul.w	r3, r1, r3
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b29b      	uxth	r3, r3
 800102e:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	461a      	mov	r2, r3
 8001034:	f107 030c 	add.w	r3, r7, #12
 8001038:	cb03      	ldmia	r3!, {r0, r1}
 800103a:	6010      	str	r0, [r2, #0]
 800103c:	6051      	str	r1, [r2, #4]
 800103e:	881b      	ldrh	r3, [r3, #0]
 8001040:	8113      	strh	r3, [r2, #8]
}
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	3730      	adds	r7, #48	; 0x30
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	10624dd3 	.word	0x10624dd3

08001050 <SD_setFileTime>:
#include "fatfs.h"
#include "stm32f4xx_hal.h"
#include "clock.h"

static FRESULT SD_setFileTime(char* path, DateTime* dateTime)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
    FILINFO info;

    // fatfs counts date from 1980, +20 to year needed
    info.fdate = (WORD)(((dateTime->year + 20) << 9) | (dateTime->month << 5) | (dateTime->dayM));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	3314      	adds	r3, #20
 8001060:	025b      	lsls	r3, r3, #9
 8001062:	b21a      	sxth	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	785b      	ldrb	r3, [r3, #1]
 8001068:	015b      	lsls	r3, r3, #5
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21a      	sxth	r2, r3
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	b21b      	sxth	r3, r3
 8001076:	4313      	orrs	r3, r2
 8001078:	b21b      	sxth	r3, r3
 800107a:	b29b      	uxth	r3, r3
 800107c:	81bb      	strh	r3, [r7, #12]
    // fatfs stores seconds as 0:30, /2 division needed
    info.ftime = (WORD)((dateTime->hour << 11) | (dateTime->minute << 5) | (dateTime->second / 2));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	791b      	ldrb	r3, [r3, #4]
 8001082:	02db      	lsls	r3, r3, #11
 8001084:	b21a      	sxth	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	795b      	ldrb	r3, [r3, #5]
 800108a:	015b      	lsls	r3, r3, #5
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	799b      	ldrb	r3, [r3, #6]
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	81fb      	strh	r3, [r7, #14]

    //return f_utime(path, &info);
    return FR_OK;
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <SD_init>:


FRESULT SD_init()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80010ba:	af00      	add	r7, sp, #0
	if (BSP_SD_Init() != MSD_OK) return FR_NOT_READY;
 80010bc:	f00b f844 	bl	800c148 <BSP_SD_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SD_init+0x16>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e026      	b.n	8001118 <SD_init+0x64>

	if (FATFS_UnLinkDriver(SDPath) != 0) return FR_NOT_READY;
 80010ca:	4816      	ldr	r0, [pc, #88]	; (8001124 <SD_init+0x70>)
 80010cc:	f00f f806 	bl	80100dc <FATFS_UnLinkDriver>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SD_init+0x26>
 80010d6:	2303      	movs	r3, #3
 80010d8:	e01e      	b.n	8001118 <SD_init+0x64>

	if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0) return FR_NOT_READY;
 80010da:	4912      	ldr	r1, [pc, #72]	; (8001124 <SD_init+0x70>)
 80010dc:	4812      	ldr	r0, [pc, #72]	; (8001128 <SD_init+0x74>)
 80010de:	f00e ffb5 	bl	801004c <FATFS_LinkDriver>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <SD_init+0x38>
 80010e8:	2303      	movs	r3, #3
 80010ea:	e015      	b.n	8001118 <SD_init+0x64>

	FATFS fs;
	FRESULT mountStatus = f_mount(&fs, SDPath, 0);
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	490c      	ldr	r1, [pc, #48]	; (8001124 <SD_init+0x70>)
 80010f2:	4618      	mov	r0, r3
 80010f4:	f00e fb3c 	bl	800f770 <f_mount>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
	if (mountStatus != FR_OK)
 80010fe:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8001102:	2b00      	cmp	r3, #0
 8001104:	d007      	beq.n	8001116 <SD_init+0x62>
	{
		f_mount(0, SDPath, 0);
 8001106:	2200      	movs	r2, #0
 8001108:	4906      	ldr	r1, [pc, #24]	; (8001124 <SD_init+0x70>)
 800110a:	2000      	movs	r0, #0
 800110c:	f00e fb30 	bl	800f770 <f_mount>
		return mountStatus;
 8001110:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8001114:	e000      	b.n	8001118 <SD_init+0x64>
	}

	return FR_OK;
 8001116:	2300      	movs	r3, #0
}
 8001118:	4618      	mov	r0, r3
 800111a:	f507 770e 	add.w	r7, r7, #568	; 0x238
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000fa8 	.word	0x20000fa8
 8001128:	08014f18 	.word	0x08014f18

0800112c <SD_newFile>:

	return FR_OK;
}

FRESULT SD_newFile(char* path)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8001132:	af00      	add	r7, sp, #0
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	6018      	str	r0, [r3, #0]
	FIL file;
	FRESULT status;
	status = f_open(&file, path, FA_CREATE_NEW);
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	f107 0014 	add.w	r0, r7, #20
 800113e:	2204      	movs	r2, #4
 8001140:	6819      	ldr	r1, [r3, #0]
 8001142:	f00e fb5b 	bl	800f7fc <f_open>
 8001146:	4603      	mov	r3, r0
 8001148:	f887 3247 	strb.w	r3, [r7, #583]	; 0x247
	if (status != FR_OK)
 800114c:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001150:	2b00      	cmp	r3, #0
 8001152:	d002      	beq.n	800115a <SD_newFile+0x2e>
	{
		//f_mount(0, SDPath, 0);
		return status;
 8001154:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8001158:	e011      	b.n	800117e <SD_newFile+0x52>
	}

	DateTime now = getTime();
 800115a:	f107 0308 	add.w	r3, r7, #8
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff1e 	bl	8000fa0 <getTime>
	SD_setFileTime(path, &now);
 8001164:	f107 0208 	add.w	r2, r7, #8
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4611      	mov	r1, r2
 800116c:	6818      	ldr	r0, [r3, #0]
 800116e:	f7ff ff6f 	bl	8001050 <SD_setFileTime>
	return f_close(&file);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4618      	mov	r0, r3
 8001178:	f00e fef1 	bl	800ff5e <f_close>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	f507 7712 	add.w	r7, r7, #584	; 0x248
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <SD_writeToFile>:
	return f_unlink(path);
}


FRESULT SD_writeToFile(char* path, char* content)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 800118e:	af00      	add	r7, sp, #0
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	6018      	str	r0, [r3, #0]
 8001194:	463b      	mov	r3, r7
 8001196:	6019      	str	r1, [r3, #0]
	FIL file;
	FRESULT status;
	status = f_open(&file, path, FA_OPEN_EXISTING | FA_READ);
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	f107 000c 	add.w	r0, r7, #12
 800119e:	2201      	movs	r2, #1
 80011a0:	6819      	ldr	r1, [r3, #0]
 80011a2:	f00e fb2b 	bl	800f7fc <f_open>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (status != FR_OK) return status;
 80011ac:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <SD_writeToFile+0x32>
 80011b4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80011b8:	e020      	b.n	80011fc <SD_writeToFile+0x74>

	UINT testByte = 0x00;
 80011ba:	f107 0308 	add.w	r3, r7, #8
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
	status = f_write(&file, content, strlen(content), &testByte);
 80011c2:	463b      	mov	r3, r7
 80011c4:	6818      	ldr	r0, [r3, #0]
 80011c6:	f7ff f803 	bl	80001d0 <strlen>
 80011ca:	4602      	mov	r2, r0
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4639      	mov	r1, r7
 80011d2:	f107 000c 	add.w	r0, r7, #12
 80011d6:	6809      	ldr	r1, [r1, #0]
 80011d8:	f00e fcce 	bl	800fb78 <f_write>
 80011dc:	4603      	mov	r3, r0
 80011de:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (status != FR_OK) return status;
 80011e2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <SD_writeToFile+0x68>
 80011ea:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80011ee:	e005      	b.n	80011fc <SD_writeToFile+0x74>

	return f_close(&file);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4618      	mov	r0, r3
 80011f6:	f00e feb2 	bl	800ff5e <f_close>
 80011fa:	4603      	mov	r3, r0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <println>:
static inline void print(char* str)
{
	CDC_Transmit_FS((uint8_t*) str, strlen(str));
};
static inline void println(char* str)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	printLen = strlen(str);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7fe ffdd 	bl	80001d0 <strlen>
 8001216:	4602      	mov	r2, r0
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <println+0x68>)
 800121a:	601a      	str	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < printLen; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e009      	b.n	8001236 <println+0x2e>
	{
		printBuffer[i] = str[i];
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	441a      	add	r2, r3
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	7811      	ldrb	r1, [r2, #0]
 800122c:	4a11      	ldr	r2, [pc, #68]	; (8001274 <println+0x6c>)
 800122e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	3301      	adds	r3, #1
 8001234:	73fb      	strb	r3, [r7, #15]
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <println+0x68>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3f0      	bcc.n	8001222 <println+0x1a>
	}
	printBuffer[printLen] = '\n';
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <println+0x68>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <println+0x6c>)
 8001246:	210a      	movs	r1, #10
 8001248:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen] = '\r';
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <println+0x68>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <println+0x6c>)
 8001250:	210d      	movs	r1, #13
 8001252:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 2);
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <println+0x68>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	b29b      	uxth	r3, r3
 800125a:	3302      	adds	r3, #2
 800125c:	b29b      	uxth	r3, r3
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <println+0x6c>)
 8001262:	f00f f83f 	bl	80102e4 <CDC_Transmit_FS>
};
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000037c 	.word	0x2000037c
 8001274:	20000380 	.word	0x20000380

08001278 <printv>:
static inline void printv(char* str, uint32_t len)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS((uint8_t*) str, len);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	4619      	mov	r1, r3
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f00f f82b 	bl	80102e4 <CDC_Transmit_FS>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <SX1278_write>:
//#### SPI communication with SX1278 ####
uint64_t frf = 0;
uint8_t frf_bytes[8] = {0};

void SX1278_write(SPI_HandleTypeDef* spi, uint8_t data)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
 800129e:	460b      	mov	r3, r1
 80012a0:	70fb      	strb	r3, [r7, #3]
	// writes byte [data] on SPI bus
	HAL_SPI_Transmit(spi, &data, 1, 1000);
 80012a2:	1cf9      	adds	r1, r7, #3
 80012a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a8:	2201      	movs	r2, #1
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f007 f888 	bl	80083c0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80012b0:	bf00      	nop
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f007 fb5a 	bl	800896c <HAL_SPI_GetState>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d1f9      	bne.n	80012b2 <SX1278_write+0x1c>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <SX1278_command>:
void SX1278_command(SX1278* inst, uint8_t addr, uint8_t cmd)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
 80012d2:	4613      	mov	r3, r2
 80012d4:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	69d8      	ldr	r0, [r3, #28]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	8a5b      	ldrh	r3, [r3, #18]
 80012de:	2200      	movs	r2, #0
 80012e0:	4619      	mov	r1, r3
 80012e2:	f003 f9a9 	bl	8004638 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1a      	ldr	r2, [r3, #32]
 80012ea:	78fb      	ldrb	r3, [r7, #3]
 80012ec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4619      	mov	r1, r3
 80012f4:	4610      	mov	r0, r2
 80012f6:	f7ff ffce 	bl	8001296 <SX1278_write>
	SX1278_write(inst->spi, cmd);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	78ba      	ldrb	r2, [r7, #2]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ffc7 	bl	8001296 <SX1278_write>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69d8      	ldr	r0, [r3, #28]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	8a5b      	ldrh	r3, [r3, #18]
 8001310:	2201      	movs	r2, #1
 8001312:	4619      	mov	r1, r3
 8001314:	f003 f990 	bl	8004638 <HAL_GPIO_WritePin>
}
 8001318:	bf00      	nop
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}

08001320 <SX1278_command_burst>:
void SX1278_command_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	461a      	mov	r2, r3
 800132c:	460b      	mov	r3, r1
 800132e:	72fb      	strb	r3, [r7, #11]
 8001330:	4613      	mov	r3, r2
 8001332:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001334:	7abb      	ldrb	r3, [r7, #10]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d92d      	bls.n	8001396 <SX1278_command_burst+0x76>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	69d8      	ldr	r0, [r3, #28]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	8a5b      	ldrh	r3, [r3, #18]
 8001342:	2200      	movs	r2, #0
 8001344:	4619      	mov	r1, r3
 8001346:	f003 f977 	bl	8004638 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr | 0x80);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6a1a      	ldr	r2, [r3, #32]
 800134e:	7afb      	ldrb	r3, [r7, #11]
 8001350:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4619      	mov	r1, r3
 8001358:	4610      	mov	r0, r2
 800135a:	f7ff ff9c 	bl	8001296 <SX1278_write>
	for (i = 0; i < len; i++)
 800135e:	2300      	movs	r3, #0
 8001360:	75fb      	strb	r3, [r7, #23]
 8001362:	e00b      	b.n	800137c <SX1278_command_burst+0x5c>
	{
		SX1278_write(inst->spi, *(buff + i));	//explanation: *(buff + i) = buff[i]
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6a18      	ldr	r0, [r3, #32]
 8001368:	7dfb      	ldrb	r3, [r7, #23]
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff ff90 	bl	8001296 <SX1278_write>
	for (i = 0; i < len; i++)
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	3301      	adds	r3, #1
 800137a:	75fb      	strb	r3, [r7, #23]
 800137c:	7dfa      	ldrb	r2, [r7, #23]
 800137e:	7abb      	ldrb	r3, [r7, #10]
 8001380:	429a      	cmp	r2, r3
 8001382:	d3ef      	bcc.n	8001364 <SX1278_command_burst+0x44>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	69d8      	ldr	r0, [r3, #28]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8a5b      	ldrh	r3, [r3, #18]
 800138c:	2201      	movs	r2, #1
 800138e:	4619      	mov	r1, r3
 8001390:	f003 f952 	bl	8004638 <HAL_GPIO_WritePin>
 8001394:	e000      	b.n	8001398 <SX1278_command_burst+0x78>
	if (len <= 1) return;
 8001396:	bf00      	nop
}
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <SX1278_read>:

uint8_t SX1278_read(SPI_HandleTypeDef* spi)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af02      	add	r7, sp, #8
 80013a4:	6078      	str	r0, [r7, #4]
	// reads byte from SPI bus
	uint8_t txByte = 0x00;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73bb      	strb	r3, [r7, #14]

	HAL_SPI_TransmitReceive(spi, &txByte, &rxByte, 1, 1000);
 80013ae:	f107 020e 	add.w	r2, r7, #14
 80013b2:	f107 010f 	add.w	r1, r7, #15
 80013b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f007 f932 	bl	8008628 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(spi) != HAL_SPI_STATE_READY);
 80013c4:	bf00      	nop
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f007 fad0 	bl	800896c <HAL_SPI_GetState>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d1f9      	bne.n	80013c6 <SX1278_read+0x28>

	return rxByte;
 80013d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <SX1278_read_address>:
uint8_t SX1278_read_address(SX1278* inst, uint8_t addr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	70fb      	strb	r3, [r7, #3]
	uint8_t recv;

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69d8      	ldr	r0, [r3, #28]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	8a5b      	ldrh	r3, [r3, #18]
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	f003 f920 	bl	8004638 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	78fa      	ldrb	r2, [r7, #3]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff48 	bl	8001296 <SX1278_write>
	recv = SX1278_read(inst->spi);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ffc7 	bl	800139e <SX1278_read>
 8001410:	4603      	mov	r3, r0
 8001412:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69d8      	ldr	r0, [r3, #28]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	8a5b      	ldrh	r3, [r3, #18]
 800141c:	2201      	movs	r2, #1
 800141e:	4619      	mov	r1, r3
 8001420:	f003 f90a 	bl	8004638 <HAL_GPIO_WritePin>

	return recv;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <SX1278_read_burst>:
void SX1278_read_burst(SX1278* inst, uint8_t addr, uint8_t* buff, uint8_t len)
{
 800142e:	b590      	push	{r4, r7, lr}
 8001430:	b087      	sub	sp, #28
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	607a      	str	r2, [r7, #4]
 8001438:	461a      	mov	r2, r3
 800143a:	460b      	mov	r3, r1
 800143c:	72fb      	strb	r3, [r7, #11]
 800143e:	4613      	mov	r3, r2
 8001440:	72bb      	strb	r3, [r7, #10]
	uint8_t i;

	if (len <= 1) return;
 8001442:	7abb      	ldrb	r3, [r7, #10]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d92b      	bls.n	80014a0 <SX1278_read_burst+0x72>

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_RESET);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	69d8      	ldr	r0, [r3, #28]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	8a5b      	ldrh	r3, [r3, #18]
 8001450:	2200      	movs	r2, #0
 8001452:	4619      	mov	r1, r3
 8001454:	f003 f8f0 	bl	8004638 <HAL_GPIO_WritePin>

	SX1278_write(inst->spi, addr);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	7afa      	ldrb	r2, [r7, #11]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff18 	bl	8001296 <SX1278_write>
	for (i = 0; i < len; i++)
 8001466:	2300      	movs	r3, #0
 8001468:	75fb      	strb	r3, [r7, #23]
 800146a:	e00c      	b.n	8001486 <SX1278_read_burst+0x58>
	{
		*(buff + i) = SX1278_read(inst->spi);	//explanation: *(buff + i) = buff[i]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	6a19      	ldr	r1, [r3, #32]
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	18d4      	adds	r4, r2, r3
 8001476:	4608      	mov	r0, r1
 8001478:	f7ff ff91 	bl	800139e <SX1278_read>
 800147c:	4603      	mov	r3, r0
 800147e:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < len; i++)
 8001480:	7dfb      	ldrb	r3, [r7, #23]
 8001482:	3301      	adds	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
 8001486:	7dfa      	ldrb	r2, [r7, #23]
 8001488:	7abb      	ldrb	r3, [r7, #10]
 800148a:	429a      	cmp	r2, r3
 800148c:	d3ee      	bcc.n	800146c <SX1278_read_burst+0x3e>
	}

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	69d8      	ldr	r0, [r3, #28]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	8a5b      	ldrh	r3, [r3, #18]
 8001496:	2201      	movs	r2, #1
 8001498:	4619      	mov	r1, r3
 800149a:	f003 f8cd 	bl	8004638 <HAL_GPIO_WritePin>
 800149e:	e000      	b.n	80014a2 <SX1278_read_burst+0x74>
	if (len <= 1) return;
 80014a0:	bf00      	nop
}
 80014a2:	371c      	adds	r7, #28
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}

080014a8 <SX1278_init>:

//#### SX1278 usage functions ####

bool SX1278_init(SX1278* inst)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af02      	add	r7, sp, #8
 80014ae:	6078      	str	r0, [r7, #4]
	SX1278_reset(inst);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f000 fb35 	bl	8001b20 <SX1278_reset>

	//unable to establish the connection with module
	if (SX1278_read_address(inst, REG_LR_VERSION) != 0x12)
 80014b6:	2142      	movs	r1, #66	; 0x42
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff8f 	bl	80013dc <SX1278_read_address>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b12      	cmp	r3, #18
 80014c2:	d004      	beq.n	80014ce <SX1278_init+0x26>
	{
		println("[LoRa] Abort: Unable to access version register, SPI not working!");
 80014c4:	4882      	ldr	r0, [pc, #520]	; (80016d0 <SX1278_init+0x228>)
 80014c6:	f7ff fe9f 	bl	8001208 <println>
		return false;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e0fc      	b.n	80016c8 <SX1278_init+0x220>
	}

	//changes must be performed in a Sleep mode
	SX1278_sleep(inst);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 fafa 	bl	8001ac8 <SX1278_sleep>

	//HAL_Delay(15);

	//0x88 = 1_00_0_1_000 = Lora, FSK, (r), LowFreq, Sleep
	SX1278_command(inst, LR_RegOpMode, 0x88);
 80014d4:	2288      	movs	r2, #136	; 0x88
 80014d6:	2101      	movs	r1, #1
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff fef4 	bl	80012c6 <SX1278_command>

	//SX1278_command(inst, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	frf = inst->config.frequency;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f04f 0400 	mov.w	r4, #0
 80014e6:	4a7b      	ldr	r2, [pc, #492]	; (80016d4 <SX1278_init+0x22c>)
 80014e8:	e9c2 3400 	strd	r3, r4, [r2]
	frf <<= 14;
 80014ec:	4b79      	ldr	r3, [pc, #484]	; (80016d4 <SX1278_init+0x22c>)
 80014ee:	e9d3 1200 	ldrd	r1, r2, [r3]
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	f04f 0400 	mov.w	r4, #0
 80014fa:	0394      	lsls	r4, r2, #14
 80014fc:	ea44 4491 	orr.w	r4, r4, r1, lsr #18
 8001500:	038b      	lsls	r3, r1, #14
 8001502:	4a74      	ldr	r2, [pc, #464]	; (80016d4 <SX1278_init+0x22c>)
 8001504:	e9c2 3400 	strd	r3, r4, [r2]
	frf /= 1000000;
 8001508:	4b72      	ldr	r3, [pc, #456]	; (80016d4 <SX1278_init+0x22c>)
 800150a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150e:	4a72      	ldr	r2, [pc, #456]	; (80016d8 <SX1278_init+0x230>)
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	f7ff fbb8 	bl	8000c88 <__aeabi_uldivmod>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	4a6d      	ldr	r2, [pc, #436]	; (80016d4 <SX1278_init+0x22c>)
 800151e:	e9c2 3400 	strd	r3, r4, [r2]
	memcpy(frf_bytes, &frf, 8);
 8001522:	4b6e      	ldr	r3, [pc, #440]	; (80016dc <SX1278_init+0x234>)
 8001524:	4a6b      	ldr	r2, [pc, #428]	; (80016d4 <SX1278_init+0x22c>)
 8001526:	e892 0003 	ldmia.w	r2, {r0, r1}
 800152a:	e883 0003 	stmia.w	r3, {r0, r1}
	SX1278_command(inst, LR_RegFrMsb, frf_bytes[2]);
 800152e:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <SX1278_init+0x234>)
 8001530:	789b      	ldrb	r3, [r3, #2]
 8001532:	461a      	mov	r2, r3
 8001534:	2106      	movs	r1, #6
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff fec5 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, LR_RegFrMid, frf_bytes[1]);
 800153c:	4b67      	ldr	r3, [pc, #412]	; (80016dc <SX1278_init+0x234>)
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	461a      	mov	r2, r3
 8001542:	2107      	movs	r1, #7
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff febe 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, LR_RegFrLsb, frf_bytes[0]);
 800154a:	4b64      	ldr	r3, [pc, #400]	; (80016dc <SX1278_init+0x234>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	2108      	movs	r1, #8
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff feb7 	bl	80012c6 <SX1278_command>
	printLen = sprintf(printBuffer, "[LoRa] Frequency setting: %x_%x_%x\r\n", frf_bytes[2], frf_bytes[1], frf_bytes[0]);
 8001558:	4b60      	ldr	r3, [pc, #384]	; (80016dc <SX1278_init+0x234>)
 800155a:	789b      	ldrb	r3, [r3, #2]
 800155c:	461a      	mov	r2, r3
 800155e:	4b5f      	ldr	r3, [pc, #380]	; (80016dc <SX1278_init+0x234>)
 8001560:	785b      	ldrb	r3, [r3, #1]
 8001562:	4619      	mov	r1, r3
 8001564:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <SX1278_init+0x234>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	9300      	str	r3, [sp, #0]
 800156a:	460b      	mov	r3, r1
 800156c:	495c      	ldr	r1, [pc, #368]	; (80016e0 <SX1278_init+0x238>)
 800156e:	485d      	ldr	r0, [pc, #372]	; (80016e4 <SX1278_init+0x23c>)
 8001570:	f010 fa30 	bl	80119d4 <siprintf>
 8001574:	4603      	mov	r3, r0
 8001576:	461a      	mov	r2, r3
 8001578:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <SX1278_init+0x240>)
 800157a:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 800157c:	4b5a      	ldr	r3, [pc, #360]	; (80016e8 <SX1278_init+0x240>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	4858      	ldr	r0, [pc, #352]	; (80016e4 <SX1278_init+0x23c>)
 8001584:	f7ff fe78 	bl	8001278 <printv>

	SX1278_command(inst, LR_RegPaConfig, inst->config.power);	//Setting transmit power
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	791b      	ldrb	r3, [r3, #4]
 800158c:	461a      	mov	r2, r3
 800158e:	2109      	movs	r1, #9
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fe98 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, LR_RegOcp, 0x2B);			// [was 0x0B] Over current protection set to 100mA
 8001596:	222b      	movs	r2, #43	; 0x2b
 8001598:	210b      	movs	r1, #11
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fe93 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, LR_RegLna, 0x23);			// LNA settings: G1 - max gain, Boost on
 80015a0:	2223      	movs	r2, #35	; 0x23
 80015a2:	210c      	movs	r1, #12
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff fe8e 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, REG_LR_PADAC, 0x87);		//high power setting +20dBm
 80015aa:	2287      	movs	r2, #135	; 0x87
 80015ac:	214d      	movs	r1, #77	; 0x4d
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fe89 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, LR_RegHopPeriod, 0x00);	//frequency hopping off
 80015b4:	2200      	movs	r2, #0
 80015b6:	2124      	movs	r1, #36	; 0x24
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff fe84 	bl	80012c6 <SX1278_command>

	if (inst->config.spreadingFactor == SX1278_SF_6)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	795b      	ldrb	r3, [r3, #5]
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d140      	bne.n	8001648 <SX1278_init+0x1a0>
	{
		uint8_t tmp;
		//implicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x01));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	79db      	ldrb	r3, [r3, #7]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	799b      	ldrb	r3, [r3, #6]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	4413      	add	r3, r2
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3301      	adds	r3, #1
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	461a      	mov	r2, r3
 80015e0:	211d      	movs	r1, #29
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fe6f 	bl	80012c6 <SX1278_command>
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	795b      	ldrb	r3, [r3, #5]
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7a1b      	ldrb	r3, [r3, #8]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	895b      	ldrh	r3, [r3, #10]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	b29b      	uxth	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4413      	add	r3, r2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	211e      	movs	r1, #30
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff fe59 	bl	80012c6 <SX1278_command>
		tmp = SX1278_read_address(inst, 0x31);
 8001614:	2131      	movs	r1, #49	; 0x31
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff fee0 	bl	80013dc <SX1278_read_address>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	f023 0307 	bic.w	r3, r3, #7
 8001626:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	f043 0305 	orr.w	r3, r3, #5
 800162e:	73fb      	strb	r3, [r7, #15]
		SX1278_command(inst, 0x31, tmp);
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	461a      	mov	r2, r3
 8001634:	2131      	movs	r1, #49	; 0x31
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff fe45 	bl	80012c6 <SX1278_command>
		SX1278_command(inst, 0x37, 0x0C);
 800163c:	220c      	movs	r2, #12
 800163e:	2137      	movs	r1, #55	; 0x37
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff fe40 	bl	80012c6 <SX1278_command>
 8001646:	e024      	b.n	8001692 <SX1278_init+0x1ea>
	}
	else
	{
		//explicit CRC enable
		SX1278_command(inst, LR_RegModemConfig1, ((inst->config.bandWidth << 4) + (inst->config.codingRate << 1) + 0x00));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	79db      	ldrb	r3, [r3, #7]
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	b2da      	uxtb	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	799b      	ldrb	r3, [r3, #6]
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	b2db      	uxtb	r3, r3
 8001658:	4413      	add	r3, r2
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	211d      	movs	r1, #29
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff fe30 	bl	80012c6 <SX1278_command>
		//SFactor &  LNA gain set by the internal AGC loop
		SX1278_command(inst, LR_RegModemConfig2, ((inst->config.spreadingFactor << 4) + (inst->config.crc << 2) + (uint8_t)(inst->config.rxTimeoutSymb >> 8)));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	795b      	ldrb	r3, [r3, #5]
 800166a:	011b      	lsls	r3, r3, #4
 800166c:	b2da      	uxtb	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	7a1b      	ldrb	r3, [r3, #8]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b2db      	uxtb	r3, r3
 8001676:	4413      	add	r3, r2
 8001678:	b2da      	uxtb	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	895b      	ldrh	r3, [r3, #10]
 800167e:	0a1b      	lsrs	r3, r3, #8
 8001680:	b29b      	uxth	r3, r3
 8001682:	b2db      	uxtb	r3, r3
 8001684:	4413      	add	r3, r2
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	211e      	movs	r1, #30
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff fe1a 	bl	80012c6 <SX1278_command>
	}

	SX1278_command(inst, LR_RegSymbTimeoutLsb, (uint8_t)(inst->config.rxTimeoutSymb & 0x00FF));	//recievier timeout value [timeout = symbtimeout*ts]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	895b      	ldrh	r3, [r3, #10]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	461a      	mov	r2, r3
 800169a:	211f      	movs	r1, #31
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fe12 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleMsb, 0x00);		//Setting the preable length?
 80016a2:	2200      	movs	r2, #0
 80016a4:	2120      	movs	r1, #32
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fe0d 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, LR_RegPreambleLsb, 12);		//8+4=12byte Preamble
 80016ac:	220c      	movs	r2, #12
 80016ae:	2121      	movs	r1, #33	; 0x21
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff fe08 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, REG_LR_DIOMAPPING2, 0x01);		//RegDioMapping2 DIO5=00, DIO4=01
 80016b6:	2201      	movs	r2, #1
 80016b8:	2141      	movs	r1, #65	; 0x41
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fe03 	bl	80012c6 <SX1278_command>

	SX1278_standby(inst);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f000 fa17 	bl	8001af4 <SX1278_standby>

	return true;
 80016c6:	2301      	movs	r3, #1
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd90      	pop	{r4, r7, pc}
 80016d0:	08014660 	.word	0x08014660
 80016d4:	20000580 	.word	0x20000580
 80016d8:	000f4240 	.word	0x000f4240
 80016dc:	20000588 	.word	0x20000588
 80016e0:	080146a4 	.word	0x080146a4
 80016e4:	20000380 	.word	0x20000380
 80016e8:	2000037c 	.word	0x2000037c

080016ec <SX1278_transmit>:

bool SX1278_transmit(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	4613      	mov	r3, r2
 80016f8:	71fb      	strb	r3, [r7, #7]
	// check if the module is ready for the transmission
	if (inst->mode == STANDBY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	7b1b      	ldrb	r3, [r3, #12]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d130      	bne.n	8001764 <SX1278_transmit+0x78>
	{
		println("[LoRa] Starting transmission...");
 8001702:	481c      	ldr	r0, [pc, #112]	; (8001774 <SX1278_transmit+0x88>)
 8001704:	f7ff fd80 	bl	8001208 <println>
		SX1278_tx_mode(inst);
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 f979 	bl	8001a00 <SX1278_tx_mode>
		SX1278_tx_input(inst, txBuffer, length);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	461a      	mov	r2, r3
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f873 	bl	8001800 <SX1278_tx_input>
		SX1278_tx_push(inst);
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f88b 	bl	8001836 <SX1278_tx_push>

		if (inst->useDio0IRQ)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <SX1278_transmit+0x50>
		{
			//waiting for interrupt
			println("[LoRa] Transmission pushed! Waiting for an interrupt...");
 800172a:	4813      	ldr	r0, [pc, #76]	; (8001778 <SX1278_transmit+0x8c>)
 800172c:	f7ff fd6c 	bl	8001208 <println>
			inst->pendingIRQ = true;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);

			return SX1278_tx_finish(inst);
		}

		return true;
 8001738:	2301      	movs	r3, #1
 800173a:	e017      	b.n	800176c <SX1278_transmit+0x80>
			println("[LoRa] Transmission pushed!");
 800173c:	480f      	ldr	r0, [pc, #60]	; (800177c <SX1278_transmit+0x90>)
 800173e:	f7ff fd63 	bl	8001208 <println>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 8001742:	bf00      	nop
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8a1b      	ldrh	r3, [r3, #16]
 800174c:	4619      	mov	r1, r3
 800174e:	4610      	mov	r0, r2
 8001750:	f002 ff5a 	bl	8004608 <HAL_GPIO_ReadPin>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f4      	beq.n	8001744 <SX1278_transmit+0x58>
			return SX1278_tx_finish(inst);
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f000 f878 	bl	8001850 <SX1278_tx_finish>
 8001760:	4603      	mov	r3, r0
 8001762:	e003      	b.n	800176c <SX1278_transmit+0x80>
	}
	else
	{
		println("[LoRa] Cannot transmit...standby");
 8001764:	4806      	ldr	r0, [pc, #24]	; (8001780 <SX1278_transmit+0x94>)
 8001766:	f7ff fd4f 	bl	8001208 <println>
		return false;
 800176a:	2300      	movs	r3, #0
	}
}
 800176c:	4618      	mov	r0, r3
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	080146cc 	.word	0x080146cc
 8001778:	080146ec 	.word	0x080146ec
 800177c:	08014724 	.word	0x08014724
 8001780:	08014740 	.word	0x08014740

08001784 <SX1278_receive>:

bool SX1278_receive(SX1278* inst)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
	// [!!] writes data to the inst->rxBuffer
	if (inst->mode == STANDBY)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	7b1b      	ldrb	r3, [r3, #12]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d126      	bne.n	80017e2 <SX1278_receive+0x5e>
	{
		println("[LoRa] Starting receiving...");
 8001794:	4817      	ldr	r0, [pc, #92]	; (80017f4 <SX1278_receive+0x70>)
 8001796:	f7ff fd37 	bl	8001208 <println>
		SX1278_rx_mode(inst);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f95e 	bl	8001a5c <SX1278_rx_mode>

		if (inst->useDio0IRQ)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <SX1278_receive+0x38>
		{
			//waiting for interrupt
			println("[LoRa] Receiver set! Waiting for an interrupt...");
 80017aa:	4813      	ldr	r0, [pc, #76]	; (80017f8 <SX1278_receive+0x74>)
 80017ac:	f7ff fd2c 	bl	8001208 <println>
			inst->pendingIRQ = true;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

			SX1278_rx_get_packet(inst);
			return inst->newPacket;
		}

		return true;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e016      	b.n	80017ea <SX1278_receive+0x66>
			while (HAL_GPIO_ReadPin(inst->dio0_port, inst->dio0) == GPIO_PIN_RESET);
 80017bc:	bf00      	nop
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	8a1b      	ldrh	r3, [r3, #16]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4610      	mov	r0, r2
 80017ca:	f002 ff1d 	bl	8004608 <HAL_GPIO_ReadPin>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f4      	beq.n	80017be <SX1278_receive+0x3a>
			SX1278_rx_get_packet(inst);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f879 	bl	80018cc <SX1278_rx_get_packet>
			return inst->newPacket;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017e0:	e003      	b.n	80017ea <SX1278_receive+0x66>
	}
	else
	{
		println("[LoRa] Cannot receive...standby");
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <SX1278_receive+0x78>)
 80017e4:	f7ff fd10 	bl	8001208 <println>
		return false;
 80017e8:	2300      	movs	r3, #0
	}
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08014764 	.word	0x08014764
 80017f8:	08014784 	.word	0x08014784
 80017fc:	080147b8 	.word	0x080147b8

08001800 <SX1278_tx_input>:

//#### Data send / receive routines ####

void SX1278_tx_input(SX1278* inst, uint8_t* txBuffer, uint8_t length)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	4613      	mov	r3, r2
 800180c:	71fb      	strb	r3, [r7, #7]
	SX1278_command(inst, LR_RegPayloadLength, length);	//(this register must difine when the data long of one byte in SF is 6)
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	461a      	mov	r2, r3
 8001812:	2122      	movs	r1, #34	; 0x22
 8001814:	68f8      	ldr	r0, [r7, #12]
 8001816:	f7ff fd56 	bl	80012c6 <SX1278_command>
	SX1278_command_burst(inst, 0x00, txBuffer, length);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	68ba      	ldr	r2, [r7, #8]
 800181e:	2100      	movs	r1, #0
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7ff fd7d 	bl	8001320 <SX1278_command_burst>

	inst->txLen = length;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	79fa      	ldrb	r2, [r7, #7]
 800182a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800182e:	bf00      	nop
 8001830:	3710      	adds	r7, #16
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <SX1278_tx_push>:
void SX1278_tx_push(SX1278* inst)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	//set module to TX mode and transmit
	SX1278_command(inst, LR_RegOpMode, 0x8b);
 800183e:	228b      	movs	r2, #139	; 0x8b
 8001840:	2101      	movs	r1, #1
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff fd3f 	bl	80012c6 <SX1278_command>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <SX1278_tx_finish>:
bool SX1278_tx_finish(SX1278* inst)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001858:	2112      	movs	r1, #18
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7ff fdbe 	bl	80013dc <SX1278_read_address>
 8001860:	4603      	mov	r3, r0
 8001862:	461a      	mov	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->txDone = ((inst->irqStatus & IRQ_LR_TXDONE) > 0x00);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001870:	f003 0308 	and.w	r3, r3, #8
 8001874:	2b00      	cmp	r3, #0
 8001876:	bfcc      	ite	gt
 8001878:	2301      	movgt	r3, #1
 800187a:	2300      	movle	r3, #0
 800187c:	b2da      	uxtb	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	SX1278_clearLoRaIrq(inst);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 fa02 	bl	8001c8e <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f932 	bl	8001af4 <SX1278_standby>

	printLen = sprintf(printBuffer, "[LoRa] Transmission finished! IRQ status: %d (<-should be 8)\r\n", inst->irqStatus);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001896:	461a      	mov	r2, r3
 8001898:	4909      	ldr	r1, [pc, #36]	; (80018c0 <SX1278_tx_finish+0x70>)
 800189a:	480a      	ldr	r0, [pc, #40]	; (80018c4 <SX1278_tx_finish+0x74>)
 800189c:	f010 f89a 	bl	80119d4 <siprintf>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <SX1278_tx_finish+0x78>)
 80018a6:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <SX1278_tx_finish+0x78>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <SX1278_tx_finish+0x74>)
 80018b0:	f7ff fce2 	bl	8001278 <printv>
	return true;
 80018b4:	2301      	movs	r3, #1
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	080147d8 	.word	0x080147d8
 80018c4:	20000380 	.word	0x20000380
 80018c8:	2000037c 	.word	0x2000037c

080018cc <SX1278_rx_get_packet>:

bool SX1278_rx_get_packet(SX1278* inst)
{
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	uint8_t addr;
	uint8_t packet_size;

	SX1278_update_IRQ_status(inst);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f000 f9a2 	bl	8001c1e <SX1278_update_IRQ_status>

	memset(inst->rxBuffer, 0x00, SX1278_MAX_PACKET);	//clear rxBuffer
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3335      	adds	r3, #53	; 0x35
 80018de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f00f f970 	bl	8010bca <memset>

	addr = SX1278_read_address(inst, LR_RegFifoRxCurrentaddr);	//get last packet address
 80018ea:	2110      	movs	r1, #16
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fd75 	bl	80013dc <SX1278_read_address>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73bb      	strb	r3, [r7, #14]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);				//set fifo pointer to this address
 80018f6:	7bbb      	ldrb	r3, [r7, #14]
 80018f8:	461a      	mov	r2, r3
 80018fa:	210d      	movs	r1, #13
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff fce2 	bl	80012c6 <SX1278_command>

	//When SpreadingFactor = 6, use Implicit Header mode (Excluding internal packet length)
	if (inst->config.spreadingFactor == SX1278_SF_6)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	795b      	ldrb	r3, [r3, #5]
 8001906:	2b06      	cmp	r3, #6
 8001908:	d104      	bne.n	8001914 <SX1278_rx_get_packet+0x48>
	{
		// ??? not sure what to put here
		packet_size = inst->txLen;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001910:	73fb      	strb	r3, [r7, #15]
 8001912:	e005      	b.n	8001920 <SX1278_rx_get_packet+0x54>
	}
	else
	{
		packet_size = SX1278_read_address(inst, LR_RegRxNbBytes); //get the number of received bytes
 8001914:	2113      	movs	r1, #19
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff fd60 	bl	80013dc <SX1278_read_address>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]
	}

	SX1278_read_burst(inst, 0x00, inst->rxBuffer, packet_size);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f103 0235 	add.w	r2, r3, #53	; 0x35
 8001926:	7bfb      	ldrb	r3, [r7, #15]
 8001928:	2100      	movs	r1, #0
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fd7f 	bl	800142e <SX1278_read_burst>

	inst->newPacket = (inst->rxTimeout || (inst->crcError && LR_VALIDATE_CRCERROR));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rssi = SX1278_getRSSI(inst);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f9b3 	bl	8001ca8 <SX1278_getRSSI>
 8001942:	4602      	mov	r2, r0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->rxLen = packet_size;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	7bfa      	ldrb	r2, [r7, #15]
 800194c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	SX1278_clearLoRaIrq(inst);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f99c 	bl	8001c8e <SX1278_clearLoRaIrq>
	SX1278_standby(inst);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f8cc 	bl	8001af4 <SX1278_standby>

	if (inst->rxTimeout)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001962:	2b00      	cmp	r3, #0
 8001964:	d010      	beq.n	8001988 <SX1278_rx_get_packet+0xbc>
	{
		printLen = sprintf(printBuffer, "[LoRa] Receive timeout! Nothing to listen to.\r\n");
 8001966:	4a21      	ldr	r2, [pc, #132]	; (80019ec <SX1278_rx_get_packet+0x120>)
 8001968:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <SX1278_rx_get_packet+0x124>)
 800196a:	4614      	mov	r4, r2
 800196c:	461d      	mov	r5, r3
 800196e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001976:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800197a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800197e:	232f      	movs	r3, #47	; 0x2f
 8001980:	461a      	mov	r2, r3
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <SX1278_rx_get_packet+0x128>)
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	e023      	b.n	80019d0 <SX1278_rx_get_packet+0x104>
	}
	else if (inst->crcError)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800198e:	2b00      	cmp	r3, #0
 8001990:	d010      	beq.n	80019b4 <SX1278_rx_get_packet+0xe8>
	{
		printLen = sprintf(printBuffer, "[LoRa] CRC error occured. Packet discarded!\r\n");
 8001992:	4a16      	ldr	r2, [pc, #88]	; (80019ec <SX1278_rx_get_packet+0x120>)
 8001994:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <SX1278_rx_get_packet+0x12c>)
 8001996:	4614      	mov	r4, r2
 8001998:	461d      	mov	r5, r3
 800199a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800199e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019a6:	c407      	stmia	r4!, {r0, r1, r2}
 80019a8:	8023      	strh	r3, [r4, #0]
 80019aa:	232d      	movs	r3, #45	; 0x2d
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <SX1278_rx_get_packet+0x128>)
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e00d      	b.n	80019d0 <SX1278_rx_get_packet+0x104>
	}
	else
	{
		printLen = sprintf(printBuffer, "[LoRa] Valid packet received!\r\n");
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <SX1278_rx_get_packet+0x120>)
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <SX1278_rx_get_packet+0x130>)
 80019b8:	4614      	mov	r4, r2
 80019ba:	461d      	mov	r5, r3
 80019bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80019c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80019c8:	231f      	movs	r3, #31
 80019ca:	461a      	mov	r2, r3
 80019cc:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <SX1278_rx_get_packet+0x128>)
 80019ce:	601a      	str	r2, [r3, #0]
	}
	printv(printBuffer, printLen);
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <SX1278_rx_get_packet+0x128>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <SX1278_rx_get_packet+0x120>)
 80019d8:	f7ff fc4e 	bl	8001278 <printv>

	return inst->newPacket;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bdb0      	pop	{r4, r5, r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000380 	.word	0x20000380
 80019f0:	08014818 	.word	0x08014818
 80019f4:	2000037c 	.word	0x2000037c
 80019f8:	08014848 	.word	0x08014848
 80019fc:	08014878 	.word	0x08014878

08001a00 <SX1278_tx_mode>:

//#### Functions to change SX1278 operation mode ####

void SX1278_tx_mode(SX1278* inst)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Transmit mode.");
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <SX1278_tx_mode+0x58>)
 8001a0a:	f7ff fbfd 	bl	8001208 <println>
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f93d 	bl	8001c8e <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x41);	//DIO0=01, DIO1=00, DIO2=00, DIO3=01
 8001a14:	2241      	movs	r2, #65	; 0x41
 8001a16:	2140      	movs	r1, #64	; 0x40
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f7ff fc54 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0xF7);	//Open TxDone interrupt
 8001a1e:	22f7      	movs	r2, #247	; 0xf7
 8001a20:	2111      	movs	r1, #17
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f7ff fc4f 	bl	80012c6 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoTxBaseAddr);	//read tx_fifo beginning adress in memory
 8001a28:	210e      	movs	r1, #14
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff fcd6 	bl	80013dc <SX1278_read_address>
 8001a30:	4603      	mov	r3, r0
 8001a32:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
 8001a36:	461a      	mov	r2, r3
 8001a38:	210d      	movs	r1, #13
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f7ff fc43 	bl	80012c6 <SX1278_command>

	inst->txLen = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->mode = TX;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	731a      	strb	r2, [r3, #12]
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	08014898 	.word	0x08014898

08001a5c <SX1278_rx_mode>:

void SX1278_rx_mode(SX1278* inst)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Receive mode.");
 8001a64:	4817      	ldr	r0, [pc, #92]	; (8001ac4 <SX1278_rx_mode+0x68>)
 8001a66:	f7ff fbcf 	bl	8001208 <println>
	uint8_t addr;

	SX1278_clearLoRaIrq(inst);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f90f 	bl	8001c8e <SX1278_clearLoRaIrq>
	SX1278_command(inst, REG_LR_DIOMAPPING1, 0x01);	//DIO=00, DIO1=00,DIO2=00, DIO3=01
 8001a70:	2201      	movs	r2, #1
 8001a72:	2140      	movs	r1, #64	; 0x40
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff fc26 	bl	80012c6 <SX1278_command>
	SX1278_command(inst, LR_RegIrqFlagsMask, 0x1F);	//Open RxDone, RxTimeout, crcError interrupt
 8001a7a:	221f      	movs	r2, #31
 8001a7c:	2111      	movs	r1, #17
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fc21 	bl	80012c6 <SX1278_command>

	addr = SX1278_read_address(inst, LR_RegFifoRxBaseAddr);	//read rx_fifo beginning adress in memory
 8001a84:	210f      	movs	r1, #15
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff fca8 	bl	80013dc <SX1278_read_address>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	73fb      	strb	r3, [r7, #15]
	SX1278_command(inst, LR_RegFifoAddrPtr, addr);			//set fifo pointer there
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
 8001a92:	461a      	mov	r2, r3
 8001a94:	210d      	movs	r1, #13
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fc15 	bl	80012c6 <SX1278_command>

	SX1278_command(inst, LR_RegOpMode, 0x8d);				//0x8d = 1_00_0_1_101 = Lora, FSK, (r), Low Frequency mode, Rx mode
 8001a9c:	228d      	movs	r2, #141	; 0x8d
 8001a9e:	2101      	movs	r1, #1
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff fc10 	bl	80012c6 <SX1278_command>

	inst->crcError = false;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rxLen = 0;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->mode = RX;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	731a      	strb	r2, [r3, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	080148b8 	.word	0x080148b8

08001ac8 <SX1278_sleep>:

void SX1278_sleep(SX1278* inst)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Sleep mode.");
 8001ad0:	4807      	ldr	r0, [pc, #28]	; (8001af0 <SX1278_sleep+0x28>)
 8001ad2:	f7ff fb99 	bl	8001208 <println>
	SX1278_command(inst, LR_RegOpMode, 0x08);
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	2101      	movs	r1, #1
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fbf3 	bl	80012c6 <SX1278_command>
	inst->mode = SLEEP;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	731a      	strb	r2, [r3, #12]
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	080148d8 	.word	0x080148d8

08001af4 <SX1278_standby>:

void SX1278_standby(SX1278* inst)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	println("[LoRa] Goes into Standby mode.");
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <SX1278_standby+0x28>)
 8001afe:	f7ff fb83 	bl	8001208 <println>
	SX1278_command(inst, LR_RegOpMode, 0x09);
 8001b02:	2209      	movs	r2, #9
 8001b04:	2101      	movs	r1, #1
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff fbdd 	bl	80012c6 <SX1278_command>
	inst->mode = STANDBY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	731a      	strb	r2, [r3, #12]
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	080148f8 	.word	0x080148f8

08001b20 <SX1278_reset>:

void SX1278_reset(SX1278* inst) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	println("[LoRa] Resetting...");
 8001b28:	4825      	ldr	r0, [pc, #148]	; (8001bc0 <SX1278_reset+0xa0>)
 8001b2a:	f7ff fb6d 	bl	8001208 <println>
	inst->newPacket = true;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->rxTimeout = false;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = false;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError = false;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	inst->rssi = 1;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	62da      	str	r2, [r3, #44]	; 0x2c
	inst->newPacket = false;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	inst->pendingIRQ = false;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	inst->txLen = 0;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	inst->rxLen = 0;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	inst->mode = SLEEP;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	731a      	strb	r2, [r3, #12]

	HAL_GPIO_WritePin(inst->nss_port, inst->nss, GPIO_PIN_SET);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69d8      	ldr	r0, [r3, #28]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	8a5b      	ldrh	r3, [r3, #18]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4619      	mov	r1, r3
 8001b86:	f002 fd57 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_RESET);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6958      	ldr	r0, [r3, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	89db      	ldrh	r3, [r3, #14]
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	f002 fd4f 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f001 feca 	bl	8003934 <HAL_Delay>
	HAL_GPIO_WritePin(inst->reset_port, inst->reset, GPIO_PIN_SET);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6958      	ldr	r0, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	89db      	ldrh	r3, [r3, #14]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	4619      	mov	r1, r3
 8001bac:	f002 fd44 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001bb0:	2064      	movs	r0, #100	; 0x64
 8001bb2:	f001 febf 	bl	8003934 <HAL_Delay>
}
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	08014918 	.word	0x08014918

08001bc4 <SX1278_dio0_IRQ>:

//#### Interrupt methods ####

bool SX1278_dio0_IRQ(SX1278* inst)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	//function to call when dio0 rises, used only when waiting for the DIO0 interrupt
	//finishes transmit and receive routines
	if (inst->useDio0IRQ && inst->pendingIRQ)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d01e      	beq.n	8001c14 <SX1278_dio0_IRQ+0x50>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d019      	beq.n	8001c14 <SX1278_dio0_IRQ+0x50>
	{
		if (inst->mode == TX)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	7b1b      	ldrb	r3, [r3, #12]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d104      	bne.n	8001bf2 <SX1278_dio0_IRQ+0x2e>
		{
			return SX1278_tx_finish(inst);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fe31 	bl	8001850 <SX1278_tx_finish>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	e011      	b.n	8001c16 <SX1278_dio0_IRQ+0x52>
		}
		else if (inst->mode == RX)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7b1b      	ldrb	r3, [r3, #12]
 8001bf6:	2b03      	cmp	r3, #3
 8001bf8:	d104      	bne.n	8001c04 <SX1278_dio0_IRQ+0x40>
		{
			return SX1278_rx_get_packet(inst);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fe66 	bl	80018cc <SX1278_rx_get_packet>
 8001c00:	4603      	mov	r3, r0
 8001c02:	e008      	b.n	8001c16 <SX1278_dio0_IRQ+0x52>
		}
		else
		{
			SX1278_clearLoRaIrq(inst);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f000 f842 	bl	8001c8e <SX1278_clearLoRaIrq>
			SX1278_standby(inst);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ff72 	bl	8001af4 <SX1278_standby>
			return false;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e000      	b.n	8001c16 <SX1278_dio0_IRQ+0x52>
		inst->pendingIRQ = false;
		return true;
	}
	else
	{
		return false;
 8001c14:	2300      	movs	r3, #0
	}
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <SX1278_update_IRQ_status>:

void SX1278_update_IRQ_status(SX1278* inst)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
	inst->irqStatus = SX1278_read_address(inst, LR_RegIrqFlags);
 8001c26:	2112      	movs	r1, #18
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f7ff fbd7 	bl	80013dc <SX1278_read_address>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	461a      	mov	r2, r3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	inst->rxTimeout = ((inst->irqStatus & IRQ_LR_RXTIMEOUT) > 0x00);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bfcc      	ite	gt
 8001c46:	2301      	movgt	r3, #1
 8001c48:	2300      	movle	r3, #0
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	inst->rxDone = 	  ((inst->irqStatus & IRQ_LR_RXDONE) > 0x00);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	bfcc      	ite	gt
 8001c60:	2301      	movgt	r3, #1
 8001c62:	2300      	movle	r3, #0
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	inst->crcError =  ((inst->irqStatus & IRQ_LR_CRCERROR) > 0x00);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	bfcc      	ite	gt
 8001c7a:	2301      	movgt	r3, #1
 8001c7c:	2300      	movle	r3, #0
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278* inst)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	SX1278_command(inst, LR_RegIrqFlags, 0xFF);
 8001c96:	22ff      	movs	r2, #255	; 0xff
 8001c98:	2112      	movs	r1, #18
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff fb13 	bl	80012c6 <SX1278_command>
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <SX1278_getRSSI>:

int SX1278_getRSSI(SX1278* inst)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  return (-164 + SX1278_read_address(inst, LR_RegPktRssiValue));
 8001cb0:	211a      	movs	r1, #26
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff fb92 	bl	80013dc <SX1278_read_address>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	3ba4      	subs	r3, #164	; 0xa4
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <print>:
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
	CDC_Transmit_FS((uint8_t*) str, strlen(str));
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7fe fa7f 	bl	80001d0 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f00e fb03 	bl	80102e4 <CDC_Transmit_FS>
};
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <println>:
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	printLen = strlen(str);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7fe fa6d 	bl	80001d0 <strlen>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <println+0x68>)
 8001cfa:	601a      	str	r2, [r3, #0]
	for (i = 0; i < printLen; i++)
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e009      	b.n	8001d16 <println+0x2e>
		printBuffer[i] = str[i];
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	441a      	add	r2, r3
 8001d08:	7bfb      	ldrb	r3, [r7, #15]
 8001d0a:	7811      	ldrb	r1, [r2, #0]
 8001d0c:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <println+0x6c>)
 8001d0e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < printLen; i++)
 8001d10:	7bfb      	ldrb	r3, [r7, #15]
 8001d12:	3301      	adds	r3, #1
 8001d14:	73fb      	strb	r3, [r7, #15]
 8001d16:	7bfa      	ldrb	r2, [r7, #15]
 8001d18:	4b0d      	ldr	r3, [pc, #52]	; (8001d50 <println+0x68>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3f0      	bcc.n	8001d02 <println+0x1a>
	printBuffer[printLen] = '\n';
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <println+0x68>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <println+0x6c>)
 8001d26:	210a      	movs	r1, #10
 8001d28:	54d1      	strb	r1, [r2, r3]
	printBuffer[printLen] = '\r';
 8001d2a:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <println+0x68>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a09      	ldr	r2, [pc, #36]	; (8001d54 <println+0x6c>)
 8001d30:	210d      	movs	r1, #13
 8001d32:	54d1      	strb	r1, [r2, r3]
	CDC_Transmit_FS((uint8_t*) printBuffer, printLen + 2);
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <println+0x68>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4804      	ldr	r0, [pc, #16]	; (8001d54 <println+0x6c>)
 8001d42:	f00e facf 	bl	80102e4 <CDC_Transmit_FS>
};
 8001d46:	bf00      	nop
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000590 	.word	0x20000590
 8001d54:	20000594 	.word	0x20000594

08001d58 <printv>:
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
	CDC_Transmit_FS((uint8_t*) str, len);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f00e fabb 	bl	80102e4 <CDC_Transmit_FS>
}
 8001d6e:	bf00      	nop
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <millis>:
#include <stdbool.h>
#include "stm32f4xx_hal.h"
#include "main.h"

// TIM5 has 32-bit counter -> takes longer to overflow
static inline uint32_t millis() { return (uint32_t)TIM5->CNT; }
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <millis+0x14>)
 8001d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d80:	4618      	mov	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40000c00 	.word	0x40000c00

08001d90 <getTime>:
	rtc_date.Date = dateTime->dayM;
	if (HAL_RTC_SetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN) != HAL_OK) return false;
}

static inline DateTime getTime()
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08c      	sub	sp, #48	; 0x30
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef rtc_time = {0};
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef rtc_date = {0};
 8001da8:	2300      	movs	r3, #0
 8001daa:	61bb      	str	r3, [r7, #24]
	DateTime toReturn = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	811a      	strh	r2, [r3, #8]

	HAL_RTC_GetTime(Get_RTC_Instance(), &rtc_time, RTC_FORMAT_BIN);
 8001db8:	f001 f97e 	bl	80030b8 <Get_RTC_Instance>
 8001dbc:	f107 031c 	add.w	r3, r7, #28
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f004 fd98 	bl	80068f8 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(Get_RTC_Instance(), &rtc_date, RTC_FORMAT_BIN);
 8001dc8:	f001 f976 	bl	80030b8 <Get_RTC_Instance>
 8001dcc:	f107 0318 	add.w	r3, r7, #24
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f004 fe95 	bl	8006b02 <HAL_RTC_GetDate>

	toReturn.year = rtc_date.Year;
 8001dd8:	7efb      	ldrb	r3, [r7, #27]
 8001dda:	733b      	strb	r3, [r7, #12]
	toReturn.month = rtc_date.Month - (rtc_date.Month >= 0x10 ? 0 : 6);	//conversion from silly BTC format
 8001ddc:	7e7a      	ldrb	r2, [r7, #25]
 8001dde:	7e7b      	ldrb	r3, [r7, #25]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d901      	bls.n	8001de8 <getTime+0x58>
 8001de4:	2300      	movs	r3, #0
 8001de6:	e000      	b.n	8001dea <getTime+0x5a>
 8001de8:	2306      	movs	r3, #6
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	737b      	strb	r3, [r7, #13]
	//toReturn.dayY = rtc_date.
	toReturn.dayM = rtc_date.Date;
 8001df0:	7ebb      	ldrb	r3, [r7, #26]
 8001df2:	73bb      	strb	r3, [r7, #14]
	toReturn.dayW = rtc_date.WeekDay;
 8001df4:	7e3b      	ldrb	r3, [r7, #24]
 8001df6:	73fb      	strb	r3, [r7, #15]
	toReturn.hour = rtc_time.Hours;
 8001df8:	7f3b      	ldrb	r3, [r7, #28]
 8001dfa:	743b      	strb	r3, [r7, #16]
	toReturn.minute = rtc_time.Minutes;
 8001dfc:	7f7b      	ldrb	r3, [r7, #29]
 8001dfe:	747b      	strb	r3, [r7, #17]
	toReturn.second = rtc_time.Seconds;
 8001e00:	7fbb      	ldrb	r3, [r7, #30]
 8001e02:	74bb      	strb	r3, [r7, #18]
	toReturn.msecond = millis() % 1000;
 8001e04:	f7ff ffb8 	bl	8001d78 <millis>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <getTime+0xac>)
 8001e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8001e10:	099b      	lsrs	r3, r3, #6
 8001e12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e16:	fb01 f303 	mul.w	r3, r1, r3
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	82bb      	strh	r3, [r7, #20]

	return toReturn;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	461a      	mov	r2, r3
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	cb03      	ldmia	r3!, {r0, r1}
 8001e2a:	6010      	str	r0, [r2, #0]
 8001e2c:	6051      	str	r1, [r2, #4]
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	8113      	strh	r3, [r2, #8]
}
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	3730      	adds	r7, #48	; 0x30
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	10624dd3 	.word	0x10624dd3

08001e40 <setup>:

int i;
uint32_t lastMillis;

static void setup()
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	484a      	ldr	r0, [pc, #296]	; (8001f74 <setup+0x134>)
 8001e4a:	f002 fbf5 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDB_GPIO_Port, LEDB_Pin, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2140      	movs	r1, #64	; 0x40
 8001e52:	4848      	ldr	r0, [pc, #288]	; (8001f74 <setup+0x134>)
 8001e54:	f002 fbf0 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDC_GPIO_Port, LEDC_Pin, GPIO_PIN_RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e5e:	4846      	ldr	r0, [pc, #280]	; (8001f78 <setup+0x138>)
 8001e60:	f002 fbea 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEDD_GPIO_Port, LEDD_Pin, GPIO_PIN_RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e6a:	4843      	ldr	r0, [pc, #268]	; (8001f78 <setup+0x138>)
 8001e6c:	f002 fbe4 	bl	8004638 <HAL_GPIO_WritePin>

	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET)
 8001e70:	e01f      	b.n	8001eb2 <setup+0x72>
	{
		print("Waiting for button press..");
 8001e72:	4842      	ldr	r0, [pc, #264]	; (8001f7c <setup+0x13c>)
 8001e74:	f7ff ff26 	bl	8001cc4 <print>
		printLen = sprintf(printBuffer, "%d(<-should be ~100)\n\r", (int)(millis() - lastMillis));
 8001e78:	f7ff ff7e 	bl	8001d78 <millis>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	4b40      	ldr	r3, [pc, #256]	; (8001f80 <setup+0x140>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	461a      	mov	r2, r3
 8001e86:	493f      	ldr	r1, [pc, #252]	; (8001f84 <setup+0x144>)
 8001e88:	483f      	ldr	r0, [pc, #252]	; (8001f88 <setup+0x148>)
 8001e8a:	f00f fda3 	bl	80119d4 <siprintf>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <setup+0x14c>)
 8001e94:	601a      	str	r2, [r3, #0]
		printv(printBuffer, printLen);	//should print: 100
 8001e96:	4b3d      	ldr	r3, [pc, #244]	; (8001f8c <setup+0x14c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	483a      	ldr	r0, [pc, #232]	; (8001f88 <setup+0x148>)
 8001e9e:	f7ff ff5b 	bl	8001d58 <printv>
		lastMillis = millis();
 8001ea2:	f7ff ff69 	bl	8001d78 <millis>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	4b35      	ldr	r3, [pc, #212]	; (8001f80 <setup+0x140>)
 8001eaa:	601a      	str	r2, [r3, #0]
		HAL_Delay(100);
 8001eac:	2064      	movs	r0, #100	; 0x64
 8001eae:	f001 fd41 	bl	8003934 <HAL_Delay>
	while (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_SET)
 8001eb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001eb6:	4836      	ldr	r0, [pc, #216]	; (8001f90 <setup+0x150>)
 8001eb8:	f002 fba6 	bl	8004608 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d0d7      	beq.n	8001e72 <setup+0x32>
	}

	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	482b      	ldr	r0, [pc, #172]	; (8001f74 <setup+0x134>)
 8001ec8:	f002 fbb6 	bl	8004638 <HAL_GPIO_WritePin>
	println("Hello world!!");
 8001ecc:	4831      	ldr	r0, [pc, #196]	; (8001f94 <setup+0x154>)
 8001ece:	f7ff ff0b 	bl	8001ce8 <println>
	HAL_Delay(500);
 8001ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ed6:	f001 fd2d 	bl	8003934 <HAL_Delay>
	HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8001eda:	2200      	movs	r2, #0
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	4825      	ldr	r0, [pc, #148]	; (8001f74 <setup+0x134>)
 8001ee0:	f002 fbaa 	bl	8004638 <HAL_GPIO_WritePin>

	if (radio_begin())
 8001ee4:	f000 f9fe 	bl	80022e4 <radio_begin>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <setup+0xb4>
	{
		println("[LoRa] joined the server!");
 8001eee:	482a      	ldr	r0, [pc, #168]	; (8001f98 <setup+0x158>)
 8001ef0:	f7ff fefa 	bl	8001ce8 <println>
		//radio_procedure();	//starts radio loop, now radio wokrs dependend on DIO0 interrupt in ping-pong mode
	}

	sd_begin();
 8001ef4:	f000 fa6e 	bl	80023d4 <sd_begin>

	println("[MOT] WATCH OUT NOW! THERE IS A CHANCE THAT PWM POLARITY IS FLIPPED!");
 8001ef8:	4828      	ldr	r0, [pc, #160]	; (8001f9c <setup+0x15c>)
 8001efa:	f7ff fef5 	bl	8001ce8 <println>
	println("[MOT] IN THIS CASE MOTORS WILL TURN ON AND WONT STOP!!!!");
 8001efe:	4828      	ldr	r0, [pc, #160]	; (8001fa0 <setup+0x160>)
 8001f00:	f7ff fef2 	bl	8001ce8 <println>
	println("[MOT] Starting in 5 seconds!!");
 8001f04:	4827      	ldr	r0, [pc, #156]	; (8001fa4 <setup+0x164>)
 8001f06:	f7ff feef 	bl	8001ce8 <println>
	HAL_Delay(2000);
 8001f0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f0e:	f001 fd11 	bl	8003934 <HAL_Delay>
	print("[MOT] 3..");
 8001f12:	4825      	ldr	r0, [pc, #148]	; (8001fa8 <setup+0x168>)
 8001f14:	f7ff fed6 	bl	8001cc4 <print>
	HAL_Delay(1000);
 8001f18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f1c:	f001 fd0a 	bl	8003934 <HAL_Delay>
	print("2..");
 8001f20:	4822      	ldr	r0, [pc, #136]	; (8001fac <setup+0x16c>)
 8001f22:	f7ff fecf 	bl	8001cc4 <print>
	HAL_Delay(1000);
 8001f26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2a:	f001 fd03 	bl	8003934 <HAL_Delay>
	print("1..");
 8001f2e:	4820      	ldr	r0, [pc, #128]	; (8001fb0 <setup+0x170>)
 8001f30:	f7ff fec8 	bl	8001cc4 <print>
	HAL_Delay(1000);
 8001f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f38:	f001 fcfc 	bl	8003934 <HAL_Delay>
	println("0");
 8001f3c:	481d      	ldr	r0, [pc, #116]	; (8001fb4 <setup+0x174>)
 8001f3e:	f7ff fed3 	bl	8001ce8 <println>

	motL = 0;
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <setup+0x178>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
	motR = 0;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <setup+0x17c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
	enableMotors();
 8001f4e:	f000 fb75 	bl	800263c <enableMotors>
	setPwmFrequency(720);
 8001f52:	f44f 7034 	mov.w	r0, #720	; 0x2d0
 8001f56:	f000 fbbf 	bl	80026d8 <setPwmFrequency>
	println("[MOT] Same frequency as in CanSatKit. Sound should be the same.");
 8001f5a:	4819      	ldr	r0, [pc, #100]	; (8001fc0 <setup+0x180>)
 8001f5c:	f7ff fec4 	bl	8001ce8 <println>
	setMotorTimeout(1000);
 8001f60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f64:	f000 fc14 	bl	8002790 <setMotorTimeout>
	println("[MOT] Left motor: GPIO (copy on P7), Right motor: PWM (copy on P6)");
 8001f68:	4816      	ldr	r0, [pc, #88]	; (8001fc4 <setup+0x184>)
 8001f6a:	f7ff febd 	bl	8001ce8 <println>

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40020800 	.word	0x40020800
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	0801492c 	.word	0x0801492c
 8001f80:	20000c28 	.word	0x20000c28
 8001f84:	08014948 	.word	0x08014948
 8001f88:	20000594 	.word	0x20000594
 8001f8c:	20000590 	.word	0x20000590
 8001f90:	40020000 	.word	0x40020000
 8001f94:	08014960 	.word	0x08014960
 8001f98:	08014970 	.word	0x08014970
 8001f9c:	0801498c 	.word	0x0801498c
 8001fa0:	080149d4 	.word	0x080149d4
 8001fa4:	08014a10 	.word	0x08014a10
 8001fa8:	08014a30 	.word	0x08014a30
 8001fac:	08014a3c 	.word	0x08014a3c
 8001fb0:	08014a40 	.word	0x08014a40
 8001fb4:	08014a44 	.word	0x08014a44
 8001fb8:	20000794 	.word	0x20000794
 8001fbc:	20000795 	.word	0x20000795
 8001fc0:	08014a48 	.word	0x08014a48
 8001fc4:	08014a88 	.word	0x08014a88

08001fc8 <loop>:

static void loop()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
	println("#######################");
 8001fce:	4898      	ldr	r0, [pc, #608]	; (8002230 <loop+0x268>)
 8001fd0:	f7ff fe8a 	bl	8001ce8 <println>
	println("[MOT] Motor test! Press USR.");
 8001fd4:	4897      	ldr	r0, [pc, #604]	; (8002234 <loop+0x26c>)
 8001fd6:	f7ff fe87 	bl	8001ce8 <println>
	println("#######################");
 8001fda:	4895      	ldr	r0, [pc, #596]	; (8002230 <loop+0x268>)
 8001fdc:	f7ff fe84 	bl	8001ce8 <println>
	for (i = 0; i < 255; i++)
 8001fe0:	4b95      	ldr	r3, [pc, #596]	; (8002238 <loop+0x270>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	e04c      	b.n	8002082 <loop+0xba>
	{
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET)
 8001fe8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fec:	4893      	ldr	r0, [pc, #588]	; (800223c <loop+0x274>)
 8001fee:	f002 fb0b 	bl	8004608 <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d12b      	bne.n	8002050 <loop+0x88>
		{
			setMotors(i, i);
 8001ff8:	4b8f      	ldr	r3, [pc, #572]	; (8002238 <loop+0x270>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	4b8e      	ldr	r3, [pc, #568]	; (8002238 <loop+0x270>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f000 fa82 	bl	8002510 <setMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, (i % 2 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800200c:	4b8a      	ldr	r3, [pc, #552]	; (8002238 <loop+0x270>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf14      	ite	ne
 8002018:	2301      	movne	r3, #1
 800201a:	2300      	moveq	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	2102      	movs	r1, #2
 8002022:	4886      	ldr	r0, [pc, #536]	; (800223c <loop+0x274>)
 8002024:	f002 fb08 	bl	8004638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, (i % 2 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8002028:	4b83      	ldr	r3, [pc, #524]	; (8002238 <loop+0x270>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	bf14      	ite	ne
 8002034:	2301      	movne	r3, #1
 8002036:	2300      	moveq	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	2110      	movs	r1, #16
 800203e:	487f      	ldr	r0, [pc, #508]	; (800223c <loop+0x274>)
 8002040:	f002 fafa 	bl	8004638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 8002044:	2201      	movs	r2, #1
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	487d      	ldr	r0, [pc, #500]	; (8002240 <loop+0x278>)
 800204a:	f002 faf5 	bl	8004638 <HAL_GPIO_WritePin>
 800204e:	e010      	b.n	8002072 <loop+0xaa>
		}
		else
		{
			haltMotors();
 8002050:	f000 fada 	bl	8002608 <haltMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
 8002054:	2200      	movs	r2, #0
 8002056:	2102      	movs	r1, #2
 8002058:	4878      	ldr	r0, [pc, #480]	; (800223c <loop+0x274>)
 800205a:	f002 faed 	bl	8004638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 800205e:	2200      	movs	r2, #0
 8002060:	2110      	movs	r1, #16
 8002062:	4876      	ldr	r0, [pc, #472]	; (800223c <loop+0x274>)
 8002064:	f002 fae8 	bl	8004638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8002068:	2200      	movs	r2, #0
 800206a:	2180      	movs	r1, #128	; 0x80
 800206c:	4874      	ldr	r0, [pc, #464]	; (8002240 <loop+0x278>)
 800206e:	f002 fae3 	bl	8004638 <HAL_GPIO_WritePin>
		}

		HAL_Delay(10);
 8002072:	200a      	movs	r0, #10
 8002074:	f001 fc5e 	bl	8003934 <HAL_Delay>
	for (i = 0; i < 255; i++)
 8002078:	4b6f      	ldr	r3, [pc, #444]	; (8002238 <loop+0x270>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	3301      	adds	r3, #1
 800207e:	4a6e      	ldr	r2, [pc, #440]	; (8002238 <loop+0x270>)
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b6d      	ldr	r3, [pc, #436]	; (8002238 <loop+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2bfe      	cmp	r3, #254	; 0xfe
 8002088:	ddae      	ble.n	8001fe8 <loop+0x20>
	}
	for (i = 255; i >= 0; i--)
 800208a:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <loop+0x270>)
 800208c:	22ff      	movs	r2, #255	; 0xff
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	e04c      	b.n	800212c <loop+0x164>
	{
		if (HAL_GPIO_ReadPin(BTN_USR_GPIO_Port, BTN_USR_Pin) == GPIO_PIN_RESET)
 8002092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002096:	4869      	ldr	r0, [pc, #420]	; (800223c <loop+0x274>)
 8002098:	f002 fab6 	bl	8004608 <HAL_GPIO_ReadPin>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d12b      	bne.n	80020fa <loop+0x132>
		{
			setMotors(i, i);
 80020a2:	4b65      	ldr	r3, [pc, #404]	; (8002238 <loop+0x270>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	4b63      	ldr	r3, [pc, #396]	; (8002238 <loop+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	4619      	mov	r1, r3
 80020b0:	4610      	mov	r0, r2
 80020b2:	f000 fa2d 	bl	8002510 <setMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, (i % 2 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80020b6:	4b60      	ldr	r3, [pc, #384]	; (8002238 <loop+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf14      	ite	ne
 80020c2:	2301      	movne	r3, #1
 80020c4:	2300      	moveq	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	2102      	movs	r1, #2
 80020cc:	485b      	ldr	r0, [pc, #364]	; (800223c <loop+0x274>)
 80020ce:	f002 fab3 	bl	8004638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, (i % 2 == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80020d2:	4b59      	ldr	r3, [pc, #356]	; (8002238 <loop+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf14      	ite	ne
 80020de:	2301      	movne	r3, #1
 80020e0:	2300      	moveq	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	2110      	movs	r1, #16
 80020e8:	4854      	ldr	r0, [pc, #336]	; (800223c <loop+0x274>)
 80020ea:	f002 faa5 	bl	8004638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	4853      	ldr	r0, [pc, #332]	; (8002240 <loop+0x278>)
 80020f4:	f002 faa0 	bl	8004638 <HAL_GPIO_WritePin>
 80020f8:	e010      	b.n	800211c <loop+0x154>
		}
		else
		{
			haltMotors();
 80020fa:	f000 fa85 	bl	8002608 <haltMotors>
			HAL_GPIO_WritePin(EN_L_GPIO_Port, EN_L_Pin, GPIO_PIN_RESET);
 80020fe:	2200      	movs	r2, #0
 8002100:	2102      	movs	r1, #2
 8002102:	484e      	ldr	r0, [pc, #312]	; (800223c <loop+0x274>)
 8002104:	f002 fa98 	bl	8004638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(P7_GPIO_Port, P7_Pin, GPIO_PIN_RESET);
 8002108:	2200      	movs	r2, #0
 800210a:	2110      	movs	r1, #16
 800210c:	484b      	ldr	r0, [pc, #300]	; (800223c <loop+0x274>)
 800210e:	f002 fa93 	bl	8004638 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LEDA_GPIO_Port, LEDA_Pin, GPIO_PIN_RESET);
 8002112:	2200      	movs	r2, #0
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	484a      	ldr	r0, [pc, #296]	; (8002240 <loop+0x278>)
 8002118:	f002 fa8e 	bl	8004638 <HAL_GPIO_WritePin>
		}

		HAL_Delay(10);
 800211c:	200a      	movs	r0, #10
 800211e:	f001 fc09 	bl	8003934 <HAL_Delay>
	for (i = 255; i >= 0; i--)
 8002122:	4b45      	ldr	r3, [pc, #276]	; (8002238 <loop+0x270>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	3b01      	subs	r3, #1
 8002128:	4a43      	ldr	r2, [pc, #268]	; (8002238 <loop+0x270>)
 800212a:	6013      	str	r3, [r2, #0]
 800212c:	4b42      	ldr	r3, [pc, #264]	; (8002238 <loop+0x270>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	daae      	bge.n	8002092 <loop+0xca>
	}

	println("#######################");
 8002134:	483e      	ldr	r0, [pc, #248]	; (8002230 <loop+0x268>)
 8002136:	f7ff fdd7 	bl	8001ce8 <println>
	println("[LoRa] Tx and Rx test!");
 800213a:	4842      	ldr	r0, [pc, #264]	; (8002244 <loop+0x27c>)
 800213c:	f7ff fdd4 	bl	8001ce8 <println>
	println("#######################");
 8002140:	483b      	ldr	r0, [pc, #236]	; (8002230 <loop+0x268>)
 8002142:	f7ff fdd1 	bl	8001ce8 <println>
	for (i = 0; i < 4; i++)
 8002146:	4b3c      	ldr	r3, [pc, #240]	; (8002238 <loop+0x270>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e067      	b.n	800221e <loop+0x256>
	{
		if (!radio.useDio0IRQ) radio_procedure();
 800214e:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <loop+0x280>)
 8002150:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002154:	f083 0301 	eor.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <loop+0x19a>
 800215e:	f000 f881 	bl	8002264 <radio_procedure>

		if (radio.newPacket)
 8002162:	4b39      	ldr	r3, [pc, #228]	; (8002248 <loop+0x280>)
 8002164:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002168:	2b00      	cmp	r3, #0
 800216a:	d039      	beq.n	80021e0 <loop+0x218>
		{
			printLen = sprintf(printBuffer, "[LoRa] Valid packet received! Bytes: %d, Rssi: %d, Data:\n\r", radio.rxLen, radio.rssi);
 800216c:	4b36      	ldr	r3, [pc, #216]	; (8002248 <loop+0x280>)
 800216e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002172:	461a      	mov	r2, r3
 8002174:	4b34      	ldr	r3, [pc, #208]	; (8002248 <loop+0x280>)
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	4934      	ldr	r1, [pc, #208]	; (800224c <loop+0x284>)
 800217a:	4835      	ldr	r0, [pc, #212]	; (8002250 <loop+0x288>)
 800217c:	f00f fc2a 	bl	80119d4 <siprintf>
 8002180:	4603      	mov	r3, r0
 8002182:	461a      	mov	r2, r3
 8002184:	4b33      	ldr	r3, [pc, #204]	; (8002254 <loop+0x28c>)
 8002186:	601a      	str	r2, [r3, #0]
			printv(printBuffer, printLen);
 8002188:	4b32      	ldr	r3, [pc, #200]	; (8002254 <loop+0x28c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	4830      	ldr	r0, [pc, #192]	; (8002250 <loop+0x288>)
 8002190:	f7ff fde2 	bl	8001d58 <printv>

			for (i = 0; i < radio.rxLen; i++)
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <loop+0x270>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	e011      	b.n	80021c0 <loop+0x1f8>
			{
				char character[1] = {0};
 800219c:	2300      	movs	r3, #0
 800219e:	713b      	strb	r3, [r7, #4]
				character[0] = radio.rxBuffer[i];
 80021a0:	4b25      	ldr	r3, [pc, #148]	; (8002238 <loop+0x270>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a28      	ldr	r2, [pc, #160]	; (8002248 <loop+0x280>)
 80021a6:	4413      	add	r3, r2
 80021a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ac:	713b      	strb	r3, [r7, #4]
				print(character);
 80021ae:	1d3b      	adds	r3, r7, #4
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7ff fd87 	bl	8001cc4 <print>
			for (i = 0; i < radio.rxLen; i++)
 80021b6:	4b20      	ldr	r3, [pc, #128]	; (8002238 <loop+0x270>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3301      	adds	r3, #1
 80021bc:	4a1e      	ldr	r2, [pc, #120]	; (8002238 <loop+0x270>)
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b21      	ldr	r3, [pc, #132]	; (8002248 <loop+0x280>)
 80021c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021c6:	461a      	mov	r2, r3
 80021c8:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <loop+0x270>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	dce5      	bgt.n	800219c <loop+0x1d4>
			}
			println("");
 80021d0:	4821      	ldr	r0, [pc, #132]	; (8002258 <loop+0x290>)
 80021d2:	f7ff fd89 	bl	8001ce8 <println>

			// drive motors with values received from radio
			//setMotors(radio.rxBuffer[0], radio.rxBuffer[1]);

			radio.newPacket = false;
 80021d6:	4b1c      	ldr	r3, [pc, #112]	; (8002248 <loop+0x280>)
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80021de:	e019      	b.n	8002214 <loop+0x24c>
		}
		else if (radio.txDone)
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <loop+0x280>)
 80021e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d014      	beq.n	8002214 <loop+0x24c>
		{
			printLen = sprintf(printBuffer, "[LoRa] Packet sent: %s\r\n", sendBuffer);
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <loop+0x294>)
 80021ec:	491c      	ldr	r1, [pc, #112]	; (8002260 <loop+0x298>)
 80021ee:	4818      	ldr	r0, [pc, #96]	; (8002250 <loop+0x288>)
 80021f0:	f00f fbf0 	bl	80119d4 <siprintf>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <loop+0x28c>)
 80021fa:	601a      	str	r2, [r3, #0]
			printv(printBuffer, radio.txLen + 23);
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <loop+0x280>)
 80021fe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8002202:	3317      	adds	r3, #23
 8002204:	4619      	mov	r1, r3
 8002206:	4812      	ldr	r0, [pc, #72]	; (8002250 <loop+0x288>)
 8002208:	f7ff fda6 	bl	8001d58 <printv>
			radio.txDone = false;
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <loop+0x280>)
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	for (i = 0; i < 4; i++)
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <loop+0x270>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3301      	adds	r3, #1
 800221a:	4a07      	ldr	r2, [pc, #28]	; (8002238 <loop+0x270>)
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <loop+0x270>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b03      	cmp	r3, #3
 8002224:	dd93      	ble.n	800214e <loop+0x186>
		}
	}
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	08014acc 	.word	0x08014acc
 8002234:	08014ae4 	.word	0x08014ae4
 8002238:	20000b20 	.word	0x20000b20
 800223c:	40020000 	.word	0x40020000
 8002240:	40020800 	.word	0x40020800
 8002244:	08014b04 	.word	0x08014b04
 8002248:	200009e8 	.word	0x200009e8
 800224c:	08014b1c 	.word	0x08014b1c
 8002250:	20000594 	.word	0x20000594
 8002254:	20000590 	.word	0x20000590
 8002258:	08014b58 	.word	0x08014b58
 800225c:	20000b24 	.word	0x20000b24
 8002260:	08014b5c 	.word	0x08014b5c

08002264 <radio_procedure>:

static void radio_procedure()
{
 8002264:	b5b0      	push	{r4, r5, r7, lr}
 8002266:	af00      	add	r7, sp, #0
	if (nextTX)
 8002268:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <radio_procedure+0x6c>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d026      	beq.n	80022be <radio_procedure+0x5a>
	{
		memset(sendBuffer, 0x00, SX1278_MAX_PACKET);
 8002270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002274:	2100      	movs	r1, #0
 8002276:	4817      	ldr	r0, [pc, #92]	; (80022d4 <radio_procedure+0x70>)
 8002278:	f00e fca7 	bl	8010bca <memset>
		message_length = sprintf(sendBuffer, "Cats can have little a salami.");
 800227c:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <radio_procedure+0x70>)
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <radio_procedure+0x74>)
 8002280:	4615      	mov	r5, r2
 8002282:	461c      	mov	r4, r3
 8002284:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002286:	6028      	str	r0, [r5, #0]
 8002288:	6069      	str	r1, [r5, #4]
 800228a:	60aa      	str	r2, [r5, #8]
 800228c:	60eb      	str	r3, [r5, #12]
 800228e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8002290:	6128      	str	r0, [r5, #16]
 8002292:	6169      	str	r1, [r5, #20]
 8002294:	61aa      	str	r2, [r5, #24]
 8002296:	8823      	ldrh	r3, [r4, #0]
 8002298:	78a2      	ldrb	r2, [r4, #2]
 800229a:	83ab      	strh	r3, [r5, #28]
 800229c:	4613      	mov	r3, r2
 800229e:	77ab      	strb	r3, [r5, #30]
 80022a0:	231e      	movs	r3, #30
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <radio_procedure+0x78>)
 80022a6:	701a      	strb	r2, [r3, #0]
		SX1278_transmit(&radio, sendBuffer, message_length);
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <radio_procedure+0x78>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4909      	ldr	r1, [pc, #36]	; (80022d4 <radio_procedure+0x70>)
 80022b0:	480b      	ldr	r0, [pc, #44]	; (80022e0 <radio_procedure+0x7c>)
 80022b2:	f7ff fa1b 	bl	80016ec <SX1278_transmit>

		nextTX = false;
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <radio_procedure+0x6c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
	{
		SX1278_receive(&radio);

		nextTX = true;
	}
}
 80022bc:	e005      	b.n	80022ca <radio_procedure+0x66>
		SX1278_receive(&radio);
 80022be:	4808      	ldr	r0, [pc, #32]	; (80022e0 <radio_procedure+0x7c>)
 80022c0:	f7ff fa60 	bl	8001784 <SX1278_receive>
		nextTX = true;
 80022c4:	4b02      	ldr	r3, [pc, #8]	; (80022d0 <radio_procedure+0x6c>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
}
 80022ca:	bf00      	nop
 80022cc:	bdb0      	pop	{r4, r5, r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000c24 	.word	0x20000c24
 80022d4:	20000b24 	.word	0x20000b24
 80022d8:	08014b78 	.word	0x08014b78
 80022dc:	200009e4 	.word	0x200009e4
 80022e0:	200009e8 	.word	0x200009e8

080022e4 <radio_begin>:
	return true;
}


static bool radio_begin()
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
	println("[LoRa] Joining the server...");
 80022ea:	4823      	ldr	r0, [pc, #140]	; (8002378 <radio_begin+0x94>)
 80022ec:	f7ff fcfc 	bl	8001ce8 <println>
	radio.reset = LR_RESET_Pin;
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <radio_begin+0x98>)
 80022f2:	2220      	movs	r2, #32
 80022f4:	81da      	strh	r2, [r3, #14]
	radio.dio0 = LR_DIO0_Pin;
 80022f6:	4b21      	ldr	r3, [pc, #132]	; (800237c <radio_begin+0x98>)
 80022f8:	2240      	movs	r2, #64	; 0x40
 80022fa:	821a      	strh	r2, [r3, #16]
	radio.nss = LR_NSS_Pin;
 80022fc:	4b1f      	ldr	r3, [pc, #124]	; (800237c <radio_begin+0x98>)
 80022fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002302:	825a      	strh	r2, [r3, #18]
	radio.reset_port = LR_RESET_GPIO_Port;
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <radio_begin+0x98>)
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <radio_begin+0x9c>)
 8002308:	615a      	str	r2, [r3, #20]
	radio.dio0_port = LR_DIO0_GPIO_Port;
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <radio_begin+0x98>)
 800230c:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <radio_begin+0xa0>)
 800230e:	619a      	str	r2, [r3, #24]
	radio.nss_port = LR_NSS_GPIO_Port;
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <radio_begin+0x98>)
 8002312:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <radio_begin+0xa4>)
 8002314:	61da      	str	r2, [r3, #28]
	radio.spi = Get_SPI1_Instance();
 8002316:	f000 fec5 	bl	80030a4 <Get_SPI1_Instance>
 800231a:	4602      	mov	r2, r0
 800231c:	4b17      	ldr	r3, [pc, #92]	; (800237c <radio_begin+0x98>)
 800231e:	621a      	str	r2, [r3, #32]

	radio.config = sx1278_default_config;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <radio_begin+0x98>)
 8002322:	4a1a      	ldr	r2, [pc, #104]	; (800238c <radio_begin+0xa8>)
 8002324:	ca07      	ldmia	r2, {r0, r1, r2}
 8002326:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//radio.useDio0IRQ = true; println("[LoRa] I am using DIO0 interrupt.");
	radio.useDio0IRQ = false; println("[LoRa] I am not using DIO0 interrupt.");
 800232a:	4b14      	ldr	r3, [pc, #80]	; (800237c <radio_begin+0x98>)
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8002332:	4817      	ldr	r0, [pc, #92]	; (8002390 <radio_begin+0xac>)
 8002334:	f7ff fcd8 	bl	8001ce8 <println>

	uint8_t attempts = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	71fb      	strb	r3, [r7, #7]

	while (!SX1278_init(&radio))
 800233c:	e00d      	b.n	800235a <radio_begin+0x76>
	{
		println("Player [LoRa] could not join the server!");
 800233e:	4815      	ldr	r0, [pc, #84]	; (8002394 <radio_begin+0xb0>)
 8002340:	f7ff fcd2 	bl	8001ce8 <println>
		attempts++;
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	3301      	adds	r3, #1
 8002348:	71fb      	strb	r3, [r7, #7]
		if (attempts >= 10)
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	2b09      	cmp	r3, #9
 800234e:	d904      	bls.n	800235a <radio_begin+0x76>
		{
			println("[LoRa] Too many attempts, aborting...");
 8002350:	4811      	ldr	r0, [pc, #68]	; (8002398 <radio_begin+0xb4>)
 8002352:	f7ff fcc9 	bl	8001ce8 <println>
			return false;
 8002356:	2300      	movs	r3, #0
 8002358:	e009      	b.n	800236e <radio_begin+0x8a>
	while (!SX1278_init(&radio))
 800235a:	4808      	ldr	r0, [pc, #32]	; (800237c <radio_begin+0x98>)
 800235c:	f7ff f8a4 	bl	80014a8 <SX1278_init>
 8002360:	4603      	mov	r3, r0
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1e8      	bne.n	800233e <radio_begin+0x5a>
		}
	}

	return true;
 800236c:	2301      	movs	r3, #1
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	08014bc8 	.word	0x08014bc8
 800237c:	200009e8 	.word	0x200009e8
 8002380:	40020800 	.word	0x40020800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020400 	.word	0x40020400
 800238c:	20000008 	.word	0x20000008
 8002390:	08014be8 	.word	0x08014be8
 8002394:	08014c10 	.word	0x08014c10
 8002398:	08014c3c 	.word	0x08014c3c

0800239c <dio0_IRQ>:

static void dio0_IRQ()
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
	if (radio.pendingIRQ)
 80023a0:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <dio0_IRQ+0x2c>)
 80023a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d008      	beq.n	80023bc <dio0_IRQ+0x20>
	{
		println("[LoRa] DIO0 interrupt received.");
 80023aa:	4808      	ldr	r0, [pc, #32]	; (80023cc <dio0_IRQ+0x30>)
 80023ac:	f7ff fc9c 	bl	8001ce8 <println>
		SX1278_dio0_IRQ(&radio);
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <dio0_IRQ+0x2c>)
 80023b2:	f7ff fc07 	bl	8001bc4 <SX1278_dio0_IRQ>
		radio_procedure();
 80023b6:	f7ff ff55 	bl	8002264 <radio_procedure>
	}
	else
	{
		println("[LoRa] DIO0 interrupt received but NOT used!");
	}
}
 80023ba:	e002      	b.n	80023c2 <dio0_IRQ+0x26>
		println("[LoRa] DIO0 interrupt received but NOT used!");
 80023bc:	4804      	ldr	r0, [pc, #16]	; (80023d0 <dio0_IRQ+0x34>)
 80023be:	f7ff fc93 	bl	8001ce8 <println>
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	200009e8 	.word	0x200009e8
 80023cc:	08014c64 	.word	0x08014c64
 80023d0:	08014c84 	.word	0x08014c84

080023d4 <sd_begin>:

static bool sd_begin()
{
 80023d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023d6:	b091      	sub	sp, #68	; 0x44
 80023d8:	af06      	add	r7, sp, #24
	println("[SD] Joining the server...");
 80023da:	4841      	ldr	r0, [pc, #260]	; (80024e0 <sd_begin+0x10c>)
 80023dc:	f7ff fc84 	bl	8001ce8 <println>
	if (SD_init() == FR_OK)
 80023e0:	f7fe fe68 	bl	80010b4 <SD_init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d171      	bne.n	80024ce <sd_begin+0xfa>
	{
		println("[SD] joined the server.");
 80023ea:	483e      	ldr	r0, [pc, #248]	; (80024e4 <sd_begin+0x110>)
 80023ec:	f7ff fc7c 	bl	8001ce8 <println>
		print("[SD] Creating test file...");
 80023f0:	483d      	ldr	r0, [pc, #244]	; (80024e8 <sd_begin+0x114>)
 80023f2:	f7ff fc67 	bl	8001cc4 <print>
		if (SD_newFile("/test.txt") == FR_OK)
 80023f6:	483d      	ldr	r0, [pc, #244]	; (80024ec <sd_begin+0x118>)
 80023f8:	f7fe fe98 	bl	800112c <SD_newFile>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d161      	bne.n	80024c6 <sd_begin+0xf2>
		{
			println("successful.");
 8002402:	483b      	ldr	r0, [pc, #236]	; (80024f0 <sd_begin+0x11c>)
 8002404:	f7ff fc70 	bl	8001ce8 <println>
			bool status = true;
 8002408:	2301      	movs	r3, #1
 800240a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			status |= (SD_writeToFile("text.txt", "Created on: ") == FR_OK);
 800240e:	4939      	ldr	r1, [pc, #228]	; (80024f4 <sd_begin+0x120>)
 8002410:	4839      	ldr	r0, [pc, #228]	; (80024f8 <sd_begin+0x124>)
 8002412:	f7fe feb9 	bl	8001188 <SD_writeToFile>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	bf0c      	ite	eq
 800241c:	2301      	moveq	r3, #1
 800241e:	2300      	movne	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	461a      	mov	r2, r3
 8002424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002428:	4313      	orrs	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			DateTime fileCreated = getTime();
 8002436:	f107 031c 	add.w	r3, r7, #28
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fca8 	bl	8001d90 <getTime>
			char dateStr[26] = {0};
 8002440:	463b      	mov	r3, r7
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	605a      	str	r2, [r3, #4]
 8002448:	609a      	str	r2, [r3, #8]
 800244a:	60da      	str	r2, [r3, #12]
 800244c:	611a      	str	r2, [r3, #16]
 800244e:	615a      	str	r2, [r3, #20]
 8002450:	831a      	strh	r2, [r3, #24]
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8002452:	7fbb      	ldrb	r3, [r7, #30]
 8002454:	461e      	mov	r6, r3
 8002456:	7f7b      	ldrb	r3, [r7, #29]
 8002458:	469c      	mov	ip, r3
 800245a:	7f3b      	ldrb	r3, [r7, #28]
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 800245c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002460:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8002464:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 8002468:	4604      	mov	r4, r0
													   fileCreated.hour, fileCreated.minute, fileCreated.second, fileCreated.msecond);
 800246a:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
			sprintf(dateStr, "%d-%d-20%d %d:%d:%d:%d", fileCreated.dayM, fileCreated.month, fileCreated.year,
 800246c:	4605      	mov	r5, r0
 800246e:	4638      	mov	r0, r7
 8002470:	9504      	str	r5, [sp, #16]
 8002472:	9403      	str	r4, [sp, #12]
 8002474:	9102      	str	r1, [sp, #8]
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	9300      	str	r3, [sp, #0]
 800247a:	4663      	mov	r3, ip
 800247c:	4632      	mov	r2, r6
 800247e:	491f      	ldr	r1, [pc, #124]	; (80024fc <sd_begin+0x128>)
 8002480:	f00f faa8 	bl	80119d4 <siprintf>

			status |= (SD_writeToFile("text.txt", dateStr) == FR_OK);
 8002484:	463b      	mov	r3, r7
 8002486:	4619      	mov	r1, r3
 8002488:	481b      	ldr	r0, [pc, #108]	; (80024f8 <sd_begin+0x124>)
 800248a:	f7fe fe7d 	bl	8001188 <SD_writeToFile>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	bf0c      	ite	eq
 8002494:	2301      	moveq	r3, #1
 8002496:	2300      	movne	r3, #0
 8002498:	b2db      	uxtb	r3, r3
 800249a:	461a      	mov	r2, r3
 800249c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024a0:	4313      	orrs	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	bf14      	ite	ne
 80024a6:	2301      	movne	r3, #1
 80024a8:	2300      	moveq	r3, #0
 80024aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			if (status) println("[SD] Content writing successful!");
 80024ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <sd_begin+0xea>
 80024b6:	4812      	ldr	r0, [pc, #72]	; (8002500 <sd_begin+0x12c>)
 80024b8:	f7ff fc16 	bl	8001ce8 <println>
 80024bc:	e00a      	b.n	80024d4 <sd_begin+0x100>
			else println("[SD] Content writing unsuccessful!");
 80024be:	4811      	ldr	r0, [pc, #68]	; (8002504 <sd_begin+0x130>)
 80024c0:	f7ff fc12 	bl	8001ce8 <println>
 80024c4:	e006      	b.n	80024d4 <sd_begin+0x100>
		}
		else println("unsuccessful :(");
 80024c6:	4810      	ldr	r0, [pc, #64]	; (8002508 <sd_begin+0x134>)
 80024c8:	f7ff fc0e 	bl	8001ce8 <println>
 80024cc:	e002      	b.n	80024d4 <sd_begin+0x100>
	}
	else println("Player [SD] could not join the server!");
 80024ce:	480f      	ldr	r0, [pc, #60]	; (800250c <sd_begin+0x138>)
 80024d0:	f7ff fc0a 	bl	8001ce8 <println>

	return true;
 80024d4:	2301      	movs	r3, #1
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	372c      	adds	r7, #44	; 0x2c
 80024da:	46bd      	mov	sp, r7
 80024dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024de:	bf00      	nop
 80024e0:	08014cb4 	.word	0x08014cb4
 80024e4:	08014cd0 	.word	0x08014cd0
 80024e8:	08014ce8 	.word	0x08014ce8
 80024ec:	08014d04 	.word	0x08014d04
 80024f0:	08014d10 	.word	0x08014d10
 80024f4:	08014d1c 	.word	0x08014d1c
 80024f8:	08014d2c 	.word	0x08014d2c
 80024fc:	08014d38 	.word	0x08014d38
 8002500:	08014d50 	.word	0x08014d50
 8002504:	08014d74 	.word	0x08014d74
 8002508:	08014d98 	.word	0x08014d98
 800250c:	08014da8 	.word	0x08014da8

08002510 <setMotors>:
// DRV8838 has max of 250kHz PWM frequency
// Motors will automatically turn off after (TIM4->ARR * 1ms) time, default 100ms
// Any new value applied will reset timeout timer

static void setMotors(uint8_t pwmL, uint8_t pwmR)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	460a      	mov	r2, r1
 800251a:	71fb      	strb	r3, [r7, #7]
 800251c:	4613      	mov	r3, r2
 800251e:	71bb      	strb	r3, [r7, #6]
	//							    			some value	 / [0.0:1.0] duty cycle
	if (pwmL != 0) TIM2->CCR2 = (uint32_t)((float)TIM2->ARR / ((float)pwmL / (float)(PWM_RESOLUTION)));
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d019      	beq.n	800255a <setMotors+0x4a>
 8002526:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800253e:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80025fc <setMotors+0xec>
 8002542:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002546:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800254a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800254e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002552:	ee17 2a90 	vmov	r2, s15
 8002556:	639a      	str	r2, [r3, #56]	; 0x38
 8002558:	e005      	b.n	8002566 <setMotors+0x56>
	else TIM2->CCR2 = TIM2->ARR;
 800255a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800255e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	6393      	str	r3, [r2, #56]	; 0x38
	if (pwmR != 0) TIM2->CCR4 = (uint32_t)((float)TIM2->ARR / ((float)pwmR / (float)(PWM_RESOLUTION)));
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d019      	beq.n	80025a0 <setMotors+0x90>
 800256c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800257a:	79bb      	ldrb	r3, [r7, #6]
 800257c:	ee07 3a90 	vmov	s15, r3
 8002580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002584:	ed9f 6a1d 	vldr	s12, [pc, #116]	; 80025fc <setMotors+0xec>
 8002588:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800258c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002598:	ee17 2a90 	vmov	r2, s15
 800259c:	641a      	str	r2, [r3, #64]	; 0x40
 800259e:	e005      	b.n	80025ac <setMotors+0x9c>
	else TIM2->CCR4 = TIM2->ARR;
 80025a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	6413      	str	r3, [r2, #64]	; 0x40

	//todelete
	if (pwmR != 0) TIM3->CCR3 = (uint32_t)((float)TIM3->ARR / ((float)pwmR / (float)(PWM_RESOLUTION)));
 80025ac:	79bb      	ldrb	r3, [r7, #6]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d017      	beq.n	80025e2 <setMotors+0xd2>
 80025b2:	4b13      	ldr	r3, [pc, #76]	; (8002600 <setMotors+0xf0>)
 80025b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025be:	79bb      	ldrb	r3, [r7, #6]
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025c8:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80025fc <setMotors+0xec>
 80025cc:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80025d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <setMotors+0xf0>)
 80025d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025da:	ee17 2a90 	vmov	r2, s15
 80025de:	63da      	str	r2, [r3, #60]	; 0x3c
 80025e0:	e003      	b.n	80025ea <setMotors+0xda>
	else TIM3->CCR3 = TIM3->ARR;
 80025e2:	4b07      	ldr	r3, [pc, #28]	; (8002600 <setMotors+0xf0>)
 80025e4:	4a06      	ldr	r2, [pc, #24]	; (8002600 <setMotors+0xf0>)
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	63d3      	str	r3, [r2, #60]	; 0x3c

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <setMotors+0xf4>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	625a      	str	r2, [r3, #36]	; 0x24
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	43800000 	.word	0x43800000
 8002600:	40000400 	.word	0x40000400
 8002604:	40000800 	.word	0x40000800

08002608 <haltMotors>:

static void haltMotors()
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
	// Function called on TIM4 overflow interrupt
	TIM2->CCR2 = 0;
 800260c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002610:	2200      	movs	r2, #0
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->CCR4 = 0;
 8002614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002618:	2200      	movs	r2, #0
 800261a:	641a      	str	r2, [r3, #64]	; 0x40

	//todelete
	TIM3->CCR3 = 0;
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <haltMotors+0x2c>)
 800261e:	2200      	movs	r2, #0
 8002620:	63da      	str	r2, [r3, #60]	; 0x3c

	TIM4->CNT = 0;	// reset timer counter -> clears motor timeout
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <haltMotors+0x30>)
 8002624:	2200      	movs	r2, #0
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40000400 	.word	0x40000400
 8002638:	40000800 	.word	0x40000800

0800263c <enableMotors>:

static void enableMotors()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	haltMotors();
 8002640:	f7ff ffe2 	bl	8002608 <haltMotors>

	MAX_PWM_FREQ = 42000000 / (2 * PWM_RESOLUTION); // 82031 Hz for 256 resolution
 8002644:	4b1e      	ldr	r3, [pc, #120]	; (80026c0 <enableMotors+0x84>)
 8002646:	4a1f      	ldr	r2, [pc, #124]	; (80026c4 <enableMotors+0x88>)
 8002648:	601a      	str	r2, [r3, #0]
	setPwmFrequency(MAX_PWM_FREQ);
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <enableMotors+0x84>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f842 	bl	80026d8 <setPwmFrequency>

	motL_forward = true;
 8002654:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <enableMotors+0x8c>)
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
	motR_forward = true;
 800265a:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <enableMotors+0x90>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]

	// flip direction based on config
	HAL_GPIO_WritePin(PH_L_GPIO_Port, PH_L_Pin, motL_forward ^ MOTOR_L_DIR);
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <enableMotors+0x8c>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	f083 0301 	eor.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	2101      	movs	r1, #1
 800266e:	4818      	ldr	r0, [pc, #96]	; (80026d0 <enableMotors+0x94>)
 8002670:	f001 ffe2 	bl	8004638 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PH_R_GPIO_Port, PH_R_Pin, motR_forward ^ MOTOR_R_DIR);
 8002674:	4b15      	ldr	r3, [pc, #84]	; (80026cc <enableMotors+0x90>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	f083 0301 	eor.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	2104      	movs	r1, #4
 8002682:	4813      	ldr	r0, [pc, #76]	; (80026d0 <enableMotors+0x94>)
 8002684:	f001 ffd8 	bl	8004638 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_2);
 8002688:	f000 fd20 	bl	80030cc <Get_TIM2_Instance>
 800268c:	4603      	mov	r3, r0
 800268e:	2104      	movs	r1, #4
 8002690:	4618      	mov	r0, r3
 8002692:	f006 faa9 	bl	8008be8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(Get_TIM2_Instance(), TIM_CHANNEL_4);
 8002696:	f000 fd19 	bl	80030cc <Get_TIM2_Instance>
 800269a:	4603      	mov	r3, r0
 800269c:	210c      	movs	r1, #12
 800269e:	4618      	mov	r0, r3
 80026a0:	f006 faa2 	bl	8008be8 <HAL_TIM_PWM_Start>

	//todelete
	HAL_TIM_PWM_Start(Get_TIM3_Instance(), TIM_CHANNEL_3);
 80026a4:	f000 fd1c 	bl	80030e0 <Get_TIM3_Instance>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2108      	movs	r1, #8
 80026ac:	4618      	mov	r0, r3
 80026ae:	f006 fa9b 	bl	8008be8 <HAL_TIM_PWM_Start>

	haltMotors();
 80026b2:	f7ff ffa9 	bl	8002608 <haltMotors>
	println("[MOT] MOTORS ENABLED!!");
 80026b6:	4807      	ldr	r0, [pc, #28]	; (80026d4 <enableMotors+0x98>)
 80026b8:	f7ff fb16 	bl	8001ce8 <println>
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	20000000 	.word	0x20000000
 80026c4:	0001406f 	.word	0x0001406f
 80026c8:	20000004 	.word	0x20000004
 80026cc:	20000005 	.word	0x20000005
 80026d0:	40020000 	.word	0x40020000
 80026d4:	08014dd0 	.word	0x08014dd0

080026d8 <setPwmFrequency>:
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_2);
	HAL_TIM_PWM_Stop(Get_TIM2_Instance(), TIM_CHANNEL_4);
}

static void setPwmFrequency(uint32_t f_hz)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	// ARR = Clock frequency / (2 * Frequency)
	// Clock frequency (42MHz) = Source frequency (42Mhz) / PSC (1)

	//TIM2->ARR = (uint32_t)(42000000 / TIM2->PSC) / (2 * f_hz);

	if (f_hz > MAX_PWM_FREQ)
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <setPwmFrequency+0x98>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d908      	bls.n	80026fc <setPwmFrequency+0x24>
	{
		println("[MOT] PWM frequency too high! Setting maximum.");
 80026ea:	4822      	ldr	r0, [pc, #136]	; (8002774 <setPwmFrequency+0x9c>)
 80026ec:	f7ff fafc 	bl	8001ce8 <println>
		setPwmFrequency(MAX_PWM_FREQ);
 80026f0:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <setPwmFrequency+0x98>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff ffef 	bl	80026d8 <setPwmFrequency>
		//todelete
		TIM3->CNT = 0;
		TIM3->ARR = 42000000 / (2 * f_hz);

	}
}
 80026fa:	e034      	b.n	8002766 <setPwmFrequency+0x8e>
		TIM2->CNT = 0;
 80026fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002700:	2200      	movs	r2, #0
 8002702:	625a      	str	r2, [r3, #36]	; 0x24
		TIM2->ARR = 42000000 / (2 * f_hz);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800270c:	491a      	ldr	r1, [pc, #104]	; (8002778 <setPwmFrequency+0xa0>)
 800270e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002712:	62d3      	str	r3, [r2, #44]	; 0x2c
		printLen = sprintf(printBuffer, "[MOT] Frequency set to: %fMhz", (float)(f_hz / 1000000));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a19      	ldr	r2, [pc, #100]	; (800277c <setPwmFrequency+0xa4>)
 8002718:	fba2 2303 	umull	r2, r3, r2, r3
 800271c:	0c9b      	lsrs	r3, r3, #18
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002726:	ee17 0a90 	vmov	r0, s15
 800272a:	f7fd ff0d 	bl	8000548 <__aeabi_f2d>
 800272e:	4603      	mov	r3, r0
 8002730:	460c      	mov	r4, r1
 8002732:	461a      	mov	r2, r3
 8002734:	4623      	mov	r3, r4
 8002736:	4912      	ldr	r1, [pc, #72]	; (8002780 <setPwmFrequency+0xa8>)
 8002738:	4812      	ldr	r0, [pc, #72]	; (8002784 <setPwmFrequency+0xac>)
 800273a:	f00f f94b 	bl	80119d4 <siprintf>
 800273e:	4603      	mov	r3, r0
 8002740:	461a      	mov	r2, r3
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <setPwmFrequency+0xb0>)
 8002744:	601a      	str	r2, [r3, #0]
		printv(printBuffer, printLen);
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <setPwmFrequency+0xb0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4619      	mov	r1, r3
 800274c:	480d      	ldr	r0, [pc, #52]	; (8002784 <setPwmFrequency+0xac>)
 800274e:	f7ff fb03 	bl	8001d58 <printv>
		TIM3->CNT = 0;
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <setPwmFrequency+0xb4>)
 8002754:	2200      	movs	r2, #0
 8002756:	625a      	str	r2, [r3, #36]	; 0x24
		TIM3->ARR = 42000000 / (2 * f_hz);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	4a0b      	ldr	r2, [pc, #44]	; (800278c <setPwmFrequency+0xb4>)
 800275e:	4906      	ldr	r1, [pc, #24]	; (8002778 <setPwmFrequency+0xa0>)
 8002760:	fbb1 f3f3 	udiv	r3, r1, r3
 8002764:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bd90      	pop	{r4, r7, pc}
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000
 8002774:	08014de8 	.word	0x08014de8
 8002778:	0280de80 	.word	0x0280de80
 800277c:	431bde83 	.word	0x431bde83
 8002780:	08014e18 	.word	0x08014e18
 8002784:	20000594 	.word	0x20000594
 8002788:	20000590 	.word	0x20000590
 800278c:	40000400 	.word	0x40000400

08002790 <setMotorTimeout>:

static void setMotorTimeout(uint32_t timeout_ms)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
	TIM4->CNT = 0;
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <setMotorTimeout+0x40>)
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4->ARR = timeout_ms;
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <setMotorTimeout+0x40>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	62d3      	str	r3, [r2, #44]	; 0x2c
	printLen = sprintf(printBuffer, "[MOT] Timeout set to: %dms", (uint16_t)timeout_ms);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	461a      	mov	r2, r3
 80027aa:	490a      	ldr	r1, [pc, #40]	; (80027d4 <setMotorTimeout+0x44>)
 80027ac:	480a      	ldr	r0, [pc, #40]	; (80027d8 <setMotorTimeout+0x48>)
 80027ae:	f00f f911 	bl	80119d4 <siprintf>
 80027b2:	4603      	mov	r3, r0
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b09      	ldr	r3, [pc, #36]	; (80027dc <setMotorTimeout+0x4c>)
 80027b8:	601a      	str	r2, [r3, #0]
	printv(printBuffer, printLen);
 80027ba:	4b08      	ldr	r3, [pc, #32]	; (80027dc <setMotorTimeout+0x4c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4619      	mov	r1, r3
 80027c0:	4805      	ldr	r0, [pc, #20]	; (80027d8 <setMotorTimeout+0x48>)
 80027c2:	f7ff fac9 	bl	8001d58 <printv>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40000800 	.word	0x40000800
 80027d4:	08014e38 	.word	0x08014e38
 80027d8:	20000594 	.word	0x20000594
 80027dc:	20000590 	.word	0x20000590

080027e0 <motorTimeout>:

static void motorTimeout()
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
	haltMotors();
 80027e4:	f7ff ff10 	bl	8002608 <haltMotors>
	println("[MOT] Motors halted due to timeout!");
 80027e8:	4802      	ldr	r0, [pc, #8]	; (80027f4 <motorTimeout+0x14>)
 80027ea:	f7ff fa7d 	bl	8001ce8 <println>
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	08014e54 	.word	0x08014e54

080027f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027fc:	f001 f828 	bl	8003850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002800:	f000 f824 	bl	800284c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002804:	f000 fb5a 	bl	8002ebc <MX_GPIO_Init>
  MX_DMA_Init();
 8002808:	f000 fb30 	bl	8002e6c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800280c:	f000 f928 	bl	8002a60 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002810:	f009 fc80 	bl	800c114 <MX_FATFS_Init>
  MX_I2C1_Init();
 8002814:	f000 f89c 	bl	8002950 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8002818:	f00d fc6e 	bl	80100f8 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 800281c:	f000 f940 	bl	8002aa0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8002820:	f000 fafa 	bl	8002e18 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8002824:	f000 f8c2 	bl	80029ac <MX_RTC_Init>
  MX_TIM2_Init();
 8002828:	f000 f970 	bl	8002b0c <MX_TIM2_Init>
  MX_TIM5_Init();
 800282c:	f000 faa6 	bl	8002d7c <MX_TIM5_Init>
  MX_TIM3_Init();
 8002830:	f000 f9e0 	bl	8002bf4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002834:	f000 fa54 	bl	8002ce0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setup();
 8002838:	f7ff fb02 	bl	8001e40 <setup>

  // Start motor timeout interrupt timer
  HAL_TIM_Base_Start(&htim4);
 800283c:	4802      	ldr	r0, [pc, #8]	; (8002848 <main+0x50>)
 800283e:	f006 f97a 	bl	8008b36 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8002842:	f7ff fbc1 	bl	8001fc8 <loop>
 8002846:	e7fc      	b.n	8002842 <main+0x4a>
 8002848:	20000cb0 	.word	0x20000cb0

0800284c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b098      	sub	sp, #96	; 0x60
 8002850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002852:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002856:	2230      	movs	r2, #48	; 0x30
 8002858:	2100      	movs	r1, #0
 800285a:	4618      	mov	r0, r3
 800285c:	f00e f9b5 	bl	8010bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002860:	f107 031c 	add.w	r3, r7, #28
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	4b31      	ldr	r3, [pc, #196]	; (8002948 <SystemClock_Config+0xfc>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a30      	ldr	r2, [pc, #192]	; (8002948 <SystemClock_Config+0xfc>)
 8002888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
 800288e:	4b2e      	ldr	r3, [pc, #184]	; (8002948 <SystemClock_Config+0xfc>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	4b2b      	ldr	r3, [pc, #172]	; (800294c <SystemClock_Config+0x100>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2a      	ldr	r2, [pc, #168]	; (800294c <SystemClock_Config+0x100>)
 80028a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b28      	ldr	r3, [pc, #160]	; (800294c <SystemClock_Config+0x100>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80028b6:	2305      	movs	r3, #5
 80028b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80028c0:	2301      	movs	r3, #1
 80028c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c4:	2302      	movs	r3, #2
 80028c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80028ce:	2306      	movs	r3, #6
 80028d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80028d2:	23a8      	movs	r3, #168	; 0xa8
 80028d4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028d6:	2302      	movs	r3, #2
 80028d8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028da:	2307      	movs	r3, #7
 80028dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 f99c 	bl	8005c20 <HAL_RCC_OscConfig>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80028ee:	f000 fc21 	bl	8003134 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028f2:	230f      	movs	r3, #15
 80028f4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f6:	2302      	movs	r3, #2
 80028f8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028fa:	2300      	movs	r3, #0
 80028fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	2105      	movs	r1, #5
 8002910:	4618      	mov	r0, r3
 8002912:	f003 fbf5 	bl	8006100 <HAL_RCC_ClockConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800291c:	f000 fc0a 	bl	8003134 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002920:	2302      	movs	r3, #2
 8002922:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002928:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	4618      	mov	r0, r3
 8002930:	f003 fdb2 	bl	8006498 <HAL_RCCEx_PeriphCLKConfig>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800293a:	f000 fbfb 	bl	8003134 <Error_Handler>
  }
}
 800293e:	bf00      	nop
 8002940:	3760      	adds	r7, #96	; 0x60
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40023800 	.word	0x40023800
 800294c:	40007000 	.word	0x40007000

08002950 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <MX_I2C1_Init+0x50>)
 8002956:	4a13      	ldr	r2, [pc, #76]	; (80029a4 <MX_I2C1_Init+0x54>)
 8002958:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <MX_I2C1_Init+0x50>)
 800295c:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <MX_I2C1_Init+0x58>)
 800295e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <MX_I2C1_Init+0x50>)
 8002962:	2200      	movs	r2, #0
 8002964:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <MX_I2C1_Init+0x50>)
 8002968:	2200      	movs	r2, #0
 800296a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800296c:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <MX_I2C1_Init+0x50>)
 800296e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002972:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <MX_I2C1_Init+0x50>)
 8002976:	2200      	movs	r2, #0
 8002978:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <MX_I2C1_Init+0x50>)
 800297c:	2200      	movs	r2, #0
 800297e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <MX_I2C1_Init+0x50>)
 8002982:	2200      	movs	r2, #0
 8002984:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <MX_I2C1_Init+0x50>)
 8002988:	2200      	movs	r2, #0
 800298a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800298c:	4804      	ldr	r0, [pc, #16]	; (80029a0 <MX_I2C1_Init+0x50>)
 800298e:	f001 fe85 	bl	800469c <HAL_I2C_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002998:	f000 fbcc 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20000d30 	.word	0x20000d30
 80029a4:	40005400 	.word	0x40005400
 80029a8:	000186a0 	.word	0x000186a0

080029ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80029c0:	2300      	movs	r3, #0
 80029c2:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <MX_RTC_Init+0xac>)
 80029c6:	4a25      	ldr	r2, [pc, #148]	; (8002a5c <MX_RTC_Init+0xb0>)
 80029c8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80029ca:	4b23      	ldr	r3, [pc, #140]	; (8002a58 <MX_RTC_Init+0xac>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80029d0:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <MX_RTC_Init+0xac>)
 80029d2:	227f      	movs	r2, #127	; 0x7f
 80029d4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80029d6:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <MX_RTC_Init+0xac>)
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80029dc:	4b1e      	ldr	r3, [pc, #120]	; (8002a58 <MX_RTC_Init+0xac>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80029e2:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <MX_RTC_Init+0xac>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <MX_RTC_Init+0xac>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80029ee:	481a      	ldr	r0, [pc, #104]	; (8002a58 <MX_RTC_Init+0xac>)
 80029f0:	f003 fe34 	bl	800665c <HAL_RTC_Init>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80029fa:	f000 fb9b 	bl	8003134 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2201      	movs	r2, #1
 8002a16:	4619      	mov	r1, r3
 8002a18:	480f      	ldr	r0, [pc, #60]	; (8002a58 <MX_RTC_Init+0xac>)
 8002a1a:	f003 feb0 	bl	800677e <HAL_RTC_SetTime>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002a24:	f000 fb86 	bl	8003134 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002a30:	2301      	movs	r3, #1
 8002a32:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x20;
 8002a34:	2320      	movs	r3, #32
 8002a36:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002a38:	463b      	mov	r3, r7
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4806      	ldr	r0, [pc, #24]	; (8002a58 <MX_RTC_Init+0xac>)
 8002a40:	f003 ffb8 	bl	80069b4 <HAL_RTC_SetDate>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002a4a:	f000 fb73 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a4e:	bf00      	nop
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000e04 	.word	0x20000e04
 8002a5c:	40002800 	.word	0x40002800

08002a60 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8002a64:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <MX_SDIO_SD_Init+0x38>)
 8002a66:	4a0d      	ldr	r2, [pc, #52]	; (8002a9c <MX_SDIO_SD_Init+0x3c>)
 8002a68:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002a6a:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <MX_SDIO_SD_Init+0x38>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <MX_SDIO_SD_Init+0x38>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002a76:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <MX_SDIO_SD_Init+0x38>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <MX_SDIO_SD_Init+0x38>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <MX_SDIO_SD_Init+0x38>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002a88:	4b03      	ldr	r3, [pc, #12]	; (8002a98 <MX_SDIO_SD_Init+0x38>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002a8e:	bf00      	nop
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	20000e84 	.word	0x20000e84
 8002a9c:	40012c00 	.word	0x40012c00

08002aa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002aa6:	4a18      	ldr	r2, [pc, #96]	; (8002b08 <MX_SPI1_Init+0x68>)
 8002aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002aaa:	4b16      	ldr	r3, [pc, #88]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002aac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ac4:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002aec:	220a      	movs	r2, #10
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <MX_SPI1_Init+0x64>)
 8002af2:	f005 fc01 	bl	80082f8 <HAL_SPI_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002afc:	f000 fb1a 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000f08 	.word	0x20000f08
 8002b08:	40013000 	.word	0x40013000

08002b0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08e      	sub	sp, #56	; 0x38
 8002b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]
 8002b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b20:	f107 0320 	add.w	r3, r7, #32
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b2a:	1d3b      	adds	r3, r7, #4
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
 8002b38:	615a      	str	r2, [r3, #20]
 8002b3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b3c:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002b3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b44:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002b4a:	4b29      	ldr	r3, [pc, #164]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002b4c:	2240      	movs	r2, #64	; 0x40
 8002b4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8002b50:	4b27      	ldr	r3, [pc, #156]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b56:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b5c:	4b24      	ldr	r3, [pc, #144]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002b62:	4823      	ldr	r0, [pc, #140]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002b64:	f005 ffbc 	bl	8008ae0 <HAL_TIM_Base_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002b6e:	f000 fae1 	bl	8003134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002b78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	481c      	ldr	r0, [pc, #112]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002b80:	f006 fa3e 	bl	8009000 <HAL_TIM_ConfigClockSource>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002b8a:	f000 fad3 	bl	8003134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002b8e:	4818      	ldr	r0, [pc, #96]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002b90:	f005 fff5 	bl	8008b7e <HAL_TIM_PWM_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002b9a:	f000 facb 	bl	8003134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ba6:	f107 0320 	add.w	r3, r7, #32
 8002baa:	4619      	mov	r1, r3
 8002bac:	4810      	ldr	r0, [pc, #64]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002bae:	f006 fe17 	bl	80097e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8002bb8:	f000 fabc 	bl	8003134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002bbc:	2370      	movs	r3, #112	; 0x70
 8002bbe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bcc:	1d3b      	adds	r3, r7, #4
 8002bce:	220c      	movs	r2, #12
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4807      	ldr	r0, [pc, #28]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002bd4:	f006 f94e 	bl	8008e74 <HAL_TIM_PWM_ConfigChannel>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002bde:	f000 faa9 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002be2:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <MX_TIM2_Init+0xe4>)
 8002be4:	f000 fce4 	bl	80035b0 <HAL_TIM_MspPostInit>

}
 8002be8:	bf00      	nop
 8002bea:	3738      	adds	r7, #56	; 0x38
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000f60 	.word	0x20000f60

08002bf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c08:	f107 0320 	add.w	r3, r7, #32
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
 8002c10:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c12:	1d3b      	adds	r3, r7, #4
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
 8002c20:	615a      	str	r2, [r3, #20]
 8002c22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c24:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c26:	4a2d      	ldr	r2, [pc, #180]	; (8002cdc <MX_TIM3_Init+0xe8>)
 8002c28:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8002c30:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c32:	2240      	movs	r2, #64	; 0x40
 8002c34:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c3c:	4b26      	ldr	r3, [pc, #152]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c42:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c48:	4823      	ldr	r0, [pc, #140]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c4a:	f005 ff49 	bl	8008ae0 <HAL_TIM_Base_Init>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002c54:	f000 fa6e 	bl	8003134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c62:	4619      	mov	r1, r3
 8002c64:	481c      	ldr	r0, [pc, #112]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c66:	f006 f9cb 	bl	8009000 <HAL_TIM_ConfigClockSource>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002c70:	f000 fa60 	bl	8003134 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002c74:	4818      	ldr	r0, [pc, #96]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c76:	f005 ff82 	bl	8008b7e <HAL_TIM_PWM_Init>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002c80:	f000 fa58 	bl	8003134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c84:	2300      	movs	r3, #0
 8002c86:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c8c:	f107 0320 	add.w	r3, r7, #32
 8002c90:	4619      	mov	r1, r3
 8002c92:	4811      	ldr	r0, [pc, #68]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002c94:	f006 fda4 	bl	80097e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002c9e:	f000 fa49 	bl	8003134 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002ca2:	2370      	movs	r3, #112	; 0x70
 8002ca4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002cb2:	1d3b      	adds	r3, r7, #4
 8002cb4:	2208      	movs	r2, #8
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002cba:	f006 f8db 	bl	8008e74 <HAL_TIM_PWM_ConfigChannel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002cc4:	f000 fa36 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002cc8:	4803      	ldr	r0, [pc, #12]	; (8002cd8 <MX_TIM3_Init+0xe4>)
 8002cca:	f000 fc71 	bl	80035b0 <HAL_TIM_MspPostInit>

}
 8002cce:	bf00      	nop
 8002cd0:	3738      	adds	r7, #56	; 0x38
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20000dc4 	.word	0x20000dc4
 8002cdc:	40000400 	.word	0x40000400

08002ce0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce6:	f107 0308 	add.w	r3, r7, #8
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	605a      	str	r2, [r3, #4]
 8002cf0:	609a      	str	r2, [r3, #8]
 8002cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf4:	463b      	mov	r3, r7
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002cfc:	4b1d      	ldr	r3, [pc, #116]	; (8002d74 <MX_TIM4_Init+0x94>)
 8002cfe:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <MX_TIM4_Init+0x98>)
 8002d00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41999;
 8002d02:	4b1c      	ldr	r3, [pc, #112]	; (8002d74 <MX_TIM4_Init+0x94>)
 8002d04:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002d08:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <MX_TIM4_Init+0x94>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <MX_TIM4_Init+0x94>)
 8002d12:	2264      	movs	r2, #100	; 0x64
 8002d14:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d16:	4b17      	ldr	r3, [pc, #92]	; (8002d74 <MX_TIM4_Init+0x94>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d1c:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <MX_TIM4_Init+0x94>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d22:	4814      	ldr	r0, [pc, #80]	; (8002d74 <MX_TIM4_Init+0x94>)
 8002d24:	f005 fedc 	bl	8008ae0 <HAL_TIM_Base_Init>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8002d2e:	f000 fa01 	bl	8003134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d36:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d38:	f107 0308 	add.w	r3, r7, #8
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	480d      	ldr	r0, [pc, #52]	; (8002d74 <MX_TIM4_Init+0x94>)
 8002d40:	f006 f95e 	bl	8009000 <HAL_TIM_ConfigClockSource>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8002d4a:	f000 f9f3 	bl	8003134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d56:	463b      	mov	r3, r7
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4806      	ldr	r0, [pc, #24]	; (8002d74 <MX_TIM4_Init+0x94>)
 8002d5c:	f006 fd40 	bl	80097e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002d66:	f000 f9e5 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	20000cb0 	.word	0x20000cb0
 8002d78:	40000800 	.word	0x40000800

08002d7c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d82:	f107 0308 	add.w	r3, r7, #8
 8002d86:	2200      	movs	r2, #0
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	605a      	str	r2, [r3, #4]
 8002d8c:	609a      	str	r2, [r3, #8]
 8002d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d90:	463b      	mov	r3, r7
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <MX_TIM5_Init+0x94>)
 8002d9a:	4a1e      	ldr	r2, [pc, #120]	; (8002e14 <MX_TIM5_Init+0x98>)
 8002d9c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41999;
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <MX_TIM5_Init+0x94>)
 8002da0:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8002da4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <MX_TIM5_Init+0x94>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8002dac:	4b18      	ldr	r3, [pc, #96]	; (8002e10 <MX_TIM5_Init+0x94>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <MX_TIM5_Init+0x94>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <MX_TIM5_Init+0x94>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002dbe:	4814      	ldr	r0, [pc, #80]	; (8002e10 <MX_TIM5_Init+0x94>)
 8002dc0:	f005 fe8e 	bl	8008ae0 <HAL_TIM_Base_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002dca:	f000 f9b3 	bl	8003134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002dd4:	f107 0308 	add.w	r3, r7, #8
 8002dd8:	4619      	mov	r1, r3
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <MX_TIM5_Init+0x94>)
 8002ddc:	f006 f910 	bl	8009000 <HAL_TIM_ConfigClockSource>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002de6:	f000 f9a5 	bl	8003134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002df2:	463b      	mov	r3, r7
 8002df4:	4619      	mov	r1, r3
 8002df6:	4806      	ldr	r0, [pc, #24]	; (8002e10 <MX_TIM5_Init+0x94>)
 8002df8:	f006 fcf2 	bl	80097e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002e02:	f000 f997 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000d84 	.word	0x20000d84
 8002e14:	40000c00 	.word	0x40000c00

08002e18 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <MX_USART3_UART_Init+0x4c>)
 8002e1e:	4a12      	ldr	r2, [pc, #72]	; (8002e68 <MX_USART3_UART_Init+0x50>)
 8002e20:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e22:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <MX_USART3_UART_Init+0x4c>)
 8002e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e28:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <MX_USART3_UART_Init+0x4c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <MX_USART3_UART_Init+0x4c>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e36:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <MX_USART3_UART_Init+0x4c>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e3c:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <MX_USART3_UART_Init+0x4c>)
 8002e3e:	220c      	movs	r2, #12
 8002e40:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <MX_USART3_UART_Init+0x4c>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <MX_USART3_UART_Init+0x4c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e4e:	4805      	ldr	r0, [pc, #20]	; (8002e64 <MX_USART3_UART_Init+0x4c>)
 8002e50:	f006 fd56 	bl	8009900 <HAL_UART_Init>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e5a:	f000 f96b 	bl	8003134 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000cf0 	.word	0x20000cf0
 8002e68:	40004800 	.word	0x40004800

08002e6c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <MX_DMA_Init+0x4c>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <MX_DMA_Init+0x4c>)
 8002e7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <MX_DMA_Init+0x4c>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2100      	movs	r1, #0
 8002e92:	203b      	movs	r0, #59	; 0x3b
 8002e94:	f000 fe4b 	bl	8003b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002e98:	203b      	movs	r0, #59	; 0x3b
 8002e9a:	f000 fe64 	bl	8003b66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	2045      	movs	r0, #69	; 0x45
 8002ea4:	f000 fe43 	bl	8003b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002ea8:	2045      	movs	r0, #69	; 0x45
 8002eaa:	f000 fe5c 	bl	8003b66 <HAL_NVIC_EnableIRQ>

}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800

08002ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]
 8002ece:	60da      	str	r2, [r3, #12]
 8002ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	4b6e      	ldr	r3, [pc, #440]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a6d      	ldr	r2, [pc, #436]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b6b      	ldr	r3, [pc, #428]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b67      	ldr	r3, [pc, #412]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a66      	ldr	r2, [pc, #408]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b64      	ldr	r3, [pc, #400]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	4b60      	ldr	r3, [pc, #384]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a5f      	ldr	r2, [pc, #380]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f14:	f043 0301 	orr.w	r3, r3, #1
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b5d      	ldr	r3, [pc, #372]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	4b59      	ldr	r3, [pc, #356]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a58      	ldr	r2, [pc, #352]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b56      	ldr	r3, [pc, #344]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	607b      	str	r3, [r7, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	603b      	str	r3, [r7, #0]
 8002f46:	4b52      	ldr	r3, [pc, #328]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a51      	ldr	r2, [pc, #324]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b4f      	ldr	r3, [pc, #316]	; (8003090 <MX_GPIO_Init+0x1d4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002f5e:	2200      	movs	r2, #0
 8002f60:	21ef      	movs	r1, #239	; 0xef
 8002f62:	484c      	ldr	r0, [pc, #304]	; (8003094 <MX_GPIO_Init+0x1d8>)
 8002f64:	f001 fb68 	bl	8004638 <HAL_GPIO_WritePin>
                          |LR_RESET_Pin|LEDB_Pin|LEDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PH_L_Pin|EN_L_Pin|PH_R_Pin|P7_Pin, GPIO_PIN_RESET);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2117      	movs	r1, #23
 8002f6c:	484a      	ldr	r0, [pc, #296]	; (8003098 <MX_GPIO_Init+0x1dc>)
 8002f6e:	f001 fb63 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, P3_Pin|LEDD_Pin|LEDC_Pin|LR_NSS_Pin, GPIO_PIN_RESET);
 8002f72:	2200      	movs	r2, #0
 8002f74:	f243 2102 	movw	r1, #12802	; 0x3202
 8002f78:	4848      	ldr	r0, [pc, #288]	; (800309c <MX_GPIO_Init+0x1e0>)
 8002f7a:	f001 fb5d 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : P1_Pin P4_Pin P2_Pin P5_Pin 
                           LR_RESET_Pin */
  GPIO_InitStruct.Pin = P1_Pin|P4_Pin|P2_Pin|P5_Pin 
 8002f7e:	232f      	movs	r3, #47	; 0x2f
 8002f80:	617b      	str	r3, [r7, #20]
                          |LR_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f82:	2301      	movs	r3, #1
 8002f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	4619      	mov	r1, r3
 8002f94:	483f      	ldr	r0, [pc, #252]	; (8003094 <MX_GPIO_Init+0x1d8>)
 8002f96:	f001 f99d 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH_L_Pin EN_L_Pin PH_R_Pin */
  GPIO_InitStruct.Pin = PH_L_Pin|EN_L_Pin|PH_R_Pin;
 8002f9a:	2307      	movs	r3, #7
 8002f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4839      	ldr	r0, [pc, #228]	; (8003098 <MX_GPIO_Init+0x1dc>)
 8002fb2:	f001 f98f 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : P7_Pin */
  GPIO_InitStruct.Pin = P7_Pin;
 8002fb6:	2310      	movs	r3, #16
 8002fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(P7_GPIO_Port, &GPIO_InitStruct);
 8002fc6:	f107 0314 	add.w	r3, r7, #20
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4832      	ldr	r0, [pc, #200]	; (8003098 <MX_GPIO_Init+0x1dc>)
 8002fce:	f001 f981 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LR_DIO0_Pin */
  GPIO_InitStruct.Pin = LR_DIO0_Pin;
 8002fd2:	2340      	movs	r3, #64	; 0x40
 8002fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fd6:	4b32      	ldr	r3, [pc, #200]	; (80030a0 <MX_GPIO_Init+0x1e4>)
 8002fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LR_DIO0_GPIO_Port, &GPIO_InitStruct);
 8002fde:	f107 0314 	add.w	r3, r7, #20
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	482c      	ldr	r0, [pc, #176]	; (8003098 <MX_GPIO_Init+0x1dc>)
 8002fe6:	f001 f975 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : P3_Pin LR_NSS_Pin */
  GPIO_InitStruct.Pin = P3_Pin|LR_NSS_Pin;
 8002fea:	f240 2302 	movw	r3, #514	; 0x202
 8002fee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	4619      	mov	r1, r3
 8003002:	4826      	ldr	r0, [pc, #152]	; (800309c <MX_GPIO_Init+0x1e0>)
 8003004:	f001 f966 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDD_Pin LEDC_Pin */
  GPIO_InitStruct.Pin = LEDD_Pin|LEDC_Pin;
 8003008:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800300c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300e:	2301      	movs	r3, #1
 8003010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003012:	2302      	movs	r3, #2
 8003014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003016:	2300      	movs	r3, #0
 8003018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301a:	f107 0314 	add.w	r3, r7, #20
 800301e:	4619      	mov	r1, r3
 8003020:	481e      	ldr	r0, [pc, #120]	; (800309c <MX_GPIO_Init+0x1e0>)
 8003022:	f001 f957 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LEDB_Pin LEDA_Pin */
  GPIO_InitStruct.Pin = LEDB_Pin|LEDA_Pin;
 8003026:	23c0      	movs	r3, #192	; 0xc0
 8003028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302a:	2301      	movs	r3, #1
 800302c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800302e:	2302      	movs	r3, #2
 8003030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003036:	f107 0314 	add.w	r3, r7, #20
 800303a:	4619      	mov	r1, r3
 800303c:	4815      	ldr	r0, [pc, #84]	; (8003094 <MX_GPIO_Init+0x1d8>)
 800303e:	f001 f949 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_SW_Pin */
  GPIO_InitStruct.Pin = SDIO_SW_Pin;
 8003042:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_SW_GPIO_Port, &GPIO_InitStruct);
 8003050:	f107 0314 	add.w	r3, r7, #20
 8003054:	4619      	mov	r1, r3
 8003056:	4810      	ldr	r0, [pc, #64]	; (8003098 <MX_GPIO_Init+0x1dc>)
 8003058:	f001 f93c 	bl	80042d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_USR_Pin */
  GPIO_InitStruct.Pin = BTN_USR_Pin;
 800305c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003060:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003066:	2301      	movs	r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_USR_GPIO_Port, &GPIO_InitStruct);
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	4619      	mov	r1, r3
 8003070:	4809      	ldr	r0, [pc, #36]	; (8003098 <MX_GPIO_Init+0x1dc>)
 8003072:	f001 f92f 	bl	80042d4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	2017      	movs	r0, #23
 800307c:	f000 fd57 	bl	8003b2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003080:	2017      	movs	r0, #23
 8003082:	f000 fd70 	bl	8003b66 <HAL_NVIC_EnableIRQ>

}
 8003086:	bf00      	nop
 8003088:	3728      	adds	r7, #40	; 0x28
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40023800 	.word	0x40023800
 8003094:	40020800 	.word	0x40020800
 8003098:	40020000 	.word	0x40020000
 800309c:	40020400 	.word	0x40020400
 80030a0:	10110000 	.word	0x10110000

080030a4 <Get_SPI1_Instance>:

/* USER CODE BEGIN 4 */

I2C_HandleTypeDef* Get_I2C1_Instance() { return &hi2c1; }
SPI_HandleTypeDef* Get_SPI1_Instance() { return &hspi1; }
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4b02      	ldr	r3, [pc, #8]	; (80030b4 <Get_SPI1_Instance+0x10>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	20000f08 	.word	0x20000f08

080030b8 <Get_RTC_Instance>:
RTC_HandleTypeDef* Get_RTC_Instance() { return &hrtc; }
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	4b02      	ldr	r3, [pc, #8]	; (80030c8 <Get_RTC_Instance+0x10>)
 80030be:	4618      	mov	r0, r3
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	20000e04 	.word	0x20000e04

080030cc <Get_TIM2_Instance>:
TIM_HandleTypeDef* Get_TIM2_Instance() { return &htim2; }
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4b02      	ldr	r3, [pc, #8]	; (80030dc <Get_TIM2_Instance+0x10>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	20000f60 	.word	0x20000f60

080030e0 <Get_TIM3_Instance>:

//todelete
TIM_HandleTypeDef* Get_TIM3_Instance() { return &htim3; }
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <Get_TIM3_Instance+0x10>)
 80030e6:	4618      	mov	r0, r3
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr
 80030f0:	20000dc4 	.word	0x20000dc4

080030f4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	80fb      	strh	r3, [r7, #6]
	//DIO0 Interrupt function
	if (GPIO_Pin == LR_DIO0_Pin)
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b40      	cmp	r3, #64	; 0x40
 8003102:	d101      	bne.n	8003108 <HAL_GPIO_EXTI_Callback+0x14>
	{
		dio0_IRQ();
 8003104:	f7ff f94a 	bl	800239c <dio0_IRQ>
	}
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
	// motor interrupt in on TIM3
	if (htim->Instance == TIM3)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a04      	ldr	r2, [pc, #16]	; (8003130 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d101      	bne.n	8003126 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		motorTimeout();
 8003122:	f7ff fb5d 	bl	80027e0 <motorTimeout>
	}

}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40000400 	.word	0x40000400

08003134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003138:	bf00      	nop
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	607b      	str	r3, [r7, #4]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_MspInit+0x4c>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a0f      	ldr	r2, [pc, #60]	; (8003190 <HAL_MspInit+0x4c>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b0d      	ldr	r3, [pc, #52]	; (8003190 <HAL_MspInit+0x4c>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	607b      	str	r3, [r7, #4]
 8003164:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	603b      	str	r3, [r7, #0]
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_MspInit+0x4c>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a08      	ldr	r2, [pc, #32]	; (8003190 <HAL_MspInit+0x4c>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <HAL_MspInit+0x4c>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	603b      	str	r3, [r7, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800

08003194 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08a      	sub	sp, #40	; 0x28
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800319c:	f107 0314 	add.w	r3, r7, #20
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	605a      	str	r2, [r3, #4]
 80031a6:	609a      	str	r2, [r3, #8]
 80031a8:	60da      	str	r2, [r3, #12]
 80031aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a19      	ldr	r2, [pc, #100]	; (8003218 <HAL_I2C_MspInit+0x84>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d12b      	bne.n	800320e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_I2C_MspInit+0x88>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	4a17      	ldr	r2, [pc, #92]	; (800321c <HAL_I2C_MspInit+0x88>)
 80031c0:	f043 0302 	orr.w	r3, r3, #2
 80031c4:	6313      	str	r3, [r2, #48]	; 0x30
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <HAL_I2C_MspInit+0x88>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 80031d2:	23c0      	movs	r3, #192	; 0xc0
 80031d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031d6:	2312      	movs	r3, #18
 80031d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031de:	2303      	movs	r3, #3
 80031e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031e2:	2304      	movs	r3, #4
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031e6:	f107 0314 	add.w	r3, r7, #20
 80031ea:	4619      	mov	r1, r3
 80031ec:	480c      	ldr	r0, [pc, #48]	; (8003220 <HAL_I2C_MspInit+0x8c>)
 80031ee:	f001 f871 	bl	80042d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_I2C_MspInit+0x88>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <HAL_I2C_MspInit+0x88>)
 80031fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_I2C_MspInit+0x88>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800320e:	bf00      	nop
 8003210:	3728      	adds	r7, #40	; 0x28
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40005400 	.word	0x40005400
 800321c:	40023800 	.word	0x40023800
 8003220:	40020400 	.word	0x40020400

08003224 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a05      	ldr	r2, [pc, #20]	; (8003248 <HAL_RTC_MspInit+0x24>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d102      	bne.n	800323c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003236:	4b05      	ldr	r3, [pc, #20]	; (800324c <HAL_RTC_MspInit+0x28>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	40002800 	.word	0x40002800
 800324c:	42470e3c 	.word	0x42470e3c

08003250 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	; 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003258:	f107 0314 	add.w	r3, r7, #20
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	605a      	str	r2, [r3, #4]
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a70      	ldr	r2, [pc, #448]	; (8003430 <HAL_SD_MspInit+0x1e0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	f040 80da 	bne.w	8003428 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003274:	2300      	movs	r3, #0
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	4b6e      	ldr	r3, [pc, #440]	; (8003434 <HAL_SD_MspInit+0x1e4>)
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	4a6d      	ldr	r2, [pc, #436]	; (8003434 <HAL_SD_MspInit+0x1e4>)
 800327e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003282:	6453      	str	r3, [r2, #68]	; 0x44
 8003284:	4b6b      	ldr	r3, [pc, #428]	; (8003434 <HAL_SD_MspInit+0x1e4>)
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003290:	2300      	movs	r3, #0
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	4b67      	ldr	r3, [pc, #412]	; (8003434 <HAL_SD_MspInit+0x1e4>)
 8003296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003298:	4a66      	ldr	r2, [pc, #408]	; (8003434 <HAL_SD_MspInit+0x1e4>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6313      	str	r3, [r2, #48]	; 0x30
 80032a0:	4b64      	ldr	r3, [pc, #400]	; (8003434 <HAL_SD_MspInit+0x1e4>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ac:	2300      	movs	r3, #0
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	4b60      	ldr	r3, [pc, #384]	; (8003434 <HAL_SD_MspInit+0x1e4>)
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	4a5f      	ldr	r2, [pc, #380]	; (8003434 <HAL_SD_MspInit+0x1e4>)
 80032b6:	f043 0308 	orr.w	r3, r3, #8
 80032ba:	6313      	str	r3, [r2, #48]	; 0x30
 80032bc:	4b5d      	ldr	r3, [pc, #372]	; (8003434 <HAL_SD_MspInit+0x1e4>)
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	f003 0308 	and.w	r3, r3, #8
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80032c8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80032cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032d2:	2301      	movs	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d6:	2303      	movs	r3, #3
 80032d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032da:	230c      	movs	r3, #12
 80032dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032de:	f107 0314 	add.w	r3, r7, #20
 80032e2:	4619      	mov	r1, r3
 80032e4:	4854      	ldr	r0, [pc, #336]	; (8003438 <HAL_SD_MspInit+0x1e8>)
 80032e6:	f000 fff5 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f0:	2302      	movs	r3, #2
 80032f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f4:	2300      	movs	r3, #0
 80032f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032f8:	2303      	movs	r3, #3
 80032fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80032fc:	230c      	movs	r3, #12
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003300:	f107 0314 	add.w	r3, r7, #20
 8003304:	4619      	mov	r1, r3
 8003306:	484c      	ldr	r0, [pc, #304]	; (8003438 <HAL_SD_MspInit+0x1e8>)
 8003308:	f000 ffe4 	bl	80042d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800330c:	2304      	movs	r3, #4
 800330e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003310:	2302      	movs	r3, #2
 8003312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003314:	2301      	movs	r3, #1
 8003316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003318:	2303      	movs	r3, #3
 800331a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800331c:	230c      	movs	r3, #12
 800331e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4619      	mov	r1, r3
 8003326:	4845      	ldr	r0, [pc, #276]	; (800343c <HAL_SD_MspInit+0x1ec>)
 8003328:	f000 ffd4 	bl	80042d4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800332c:	4b44      	ldr	r3, [pc, #272]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 800332e:	4a45      	ldr	r2, [pc, #276]	; (8003444 <HAL_SD_MspInit+0x1f4>)
 8003330:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003332:	4b43      	ldr	r3, [pc, #268]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003334:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003338:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 800333c:	2200      	movs	r2, #0
 800333e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003340:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003346:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003348:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800334c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800334e:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003354:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003356:	4b3a      	ldr	r3, [pc, #232]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003358:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800335c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003360:	2220      	movs	r2, #32
 8003362:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003364:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003366:	2200      	movs	r2, #0
 8003368:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800336a:	4b35      	ldr	r3, [pc, #212]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 800336c:	2204      	movs	r2, #4
 800336e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003370:	4b33      	ldr	r3, [pc, #204]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003372:	2203      	movs	r2, #3
 8003374:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003376:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003378:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800337c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800337e:	4b30      	ldr	r3, [pc, #192]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003380:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003384:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003386:	482e      	ldr	r0, [pc, #184]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 8003388:	f000 fc08 	bl	8003b9c <HAL_DMA_Init>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8003392:	f7ff fecf 	bl	8003134 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a29      	ldr	r2, [pc, #164]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 800339a:	641a      	str	r2, [r3, #64]	; 0x40
 800339c:	4a28      	ldr	r2, [pc, #160]	; (8003440 <HAL_SD_MspInit+0x1f0>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80033a2:	4b29      	ldr	r3, [pc, #164]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033a4:	4a29      	ldr	r2, [pc, #164]	; (800344c <HAL_SD_MspInit+0x1fc>)
 80033a6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80033a8:	4b27      	ldr	r3, [pc, #156]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033ae:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033b0:	4b25      	ldr	r3, [pc, #148]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033b2:	2240      	movs	r2, #64	; 0x40
 80033b4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033b6:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033bc:	4b22      	ldr	r3, [pc, #136]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033c2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033c4:	4b20      	ldr	r3, [pc, #128]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033ca:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033d2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80033d4:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033d6:	2220      	movs	r2, #32
 80033d8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033da:	4b1b      	ldr	r3, [pc, #108]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033dc:	2200      	movs	r2, #0
 80033de:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80033e0:	4b19      	ldr	r3, [pc, #100]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033e2:	2204      	movs	r2, #4
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80033e6:	4b18      	ldr	r3, [pc, #96]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033e8:	2203      	movs	r2, #3
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80033ec:	4b16      	ldr	r3, [pc, #88]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033ee:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80033f2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80033f4:	4b14      	ldr	r3, [pc, #80]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033f6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80033fa:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80033fc:	4812      	ldr	r0, [pc, #72]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 80033fe:	f000 fbcd 	bl	8003b9c <HAL_DMA_Init>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8003408:	f7ff fe94 	bl	8003134 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 8003410:	63da      	str	r2, [r3, #60]	; 0x3c
 8003412:	4a0d      	ldr	r2, [pc, #52]	; (8003448 <HAL_SD_MspInit+0x1f8>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003418:	2200      	movs	r2, #0
 800341a:	2100      	movs	r1, #0
 800341c:	2031      	movs	r0, #49	; 0x31
 800341e:	f000 fb86 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003422:	2031      	movs	r0, #49	; 0x31
 8003424:	f000 fb9f 	bl	8003b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003428:	bf00      	nop
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40023800 	.word	0x40023800
 8003438:	40020800 	.word	0x40020800
 800343c:	40020c00 	.word	0x40020c00
 8003440:	20000c50 	.word	0x20000c50
 8003444:	40026458 	.word	0x40026458
 8003448:	20000e24 	.word	0x20000e24
 800344c:	400264a0 	.word	0x400264a0

08003450 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a19      	ldr	r2, [pc, #100]	; (80034d4 <HAL_SPI_MspInit+0x84>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d12b      	bne.n	80034ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b18      	ldr	r3, [pc, #96]	; (80034d8 <HAL_SPI_MspInit+0x88>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <HAL_SPI_MspInit+0x88>)
 800347c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_SPI_MspInit+0x88>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_SPI_MspInit+0x88>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <HAL_SPI_MspInit+0x88>)
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <HAL_SPI_MspInit+0x88>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 80034aa:	2338      	movs	r3, #56	; 0x38
 80034ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ae:	2302      	movs	r3, #2
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b6:	2303      	movs	r3, #3
 80034b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034ba:	2305      	movs	r3, #5
 80034bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034be:	f107 0314 	add.w	r3, r7, #20
 80034c2:	4619      	mov	r1, r3
 80034c4:	4805      	ldr	r0, [pc, #20]	; (80034dc <HAL_SPI_MspInit+0x8c>)
 80034c6:	f000 ff05 	bl	80042d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80034ca:	bf00      	nop
 80034cc:	3728      	adds	r7, #40	; 0x28
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40013000 	.word	0x40013000
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40020400 	.word	0x40020400

080034e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f0:	d10e      	bne.n	8003510 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	4a29      	ldr	r2, [pc, #164]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6413      	str	r3, [r2, #64]	; 0x40
 8003502:	4b27      	ldr	r3, [pc, #156]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800350e:	e042      	b.n	8003596 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM3)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a23      	ldr	r2, [pc, #140]	; (80035a4 <HAL_TIM_Base_MspInit+0xc4>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d116      	bne.n	8003548 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	4a1f      	ldr	r2, [pc, #124]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 8003524:	f043 0302 	orr.w	r3, r3, #2
 8003528:	6413      	str	r3, [r2, #64]	; 0x40
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003536:	2200      	movs	r2, #0
 8003538:	2100      	movs	r1, #0
 800353a:	201d      	movs	r0, #29
 800353c:	f000 faf7 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003540:	201d      	movs	r0, #29
 8003542:	f000 fb10 	bl	8003b66 <HAL_NVIC_EnableIRQ>
}
 8003546:	e026      	b.n	8003596 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a16      	ldr	r2, [pc, #88]	; (80035a8 <HAL_TIM_Base_MspInit+0xc8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d10e      	bne.n	8003570 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a11      	ldr	r2, [pc, #68]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
}
 800356e:	e012      	b.n	8003596 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a0d      	ldr	r2, [pc, #52]	; (80035ac <HAL_TIM_Base_MspInit+0xcc>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d10d      	bne.n	8003596 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	4a07      	ldr	r2, [pc, #28]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 8003584:	f043 0308 	orr.w	r3, r3, #8
 8003588:	6413      	str	r3, [r2, #64]	; 0x40
 800358a:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_TIM_Base_MspInit+0xc0>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	60bb      	str	r3, [r7, #8]
 8003594:	68bb      	ldr	r3, [r7, #8]
}
 8003596:	bf00      	nop
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40023800 	.word	0x40023800
 80035a4:	40000400 	.word	0x40000400
 80035a8:	40000800 	.word	0x40000800
 80035ac:	40000c00 	.word	0x40000c00

080035b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b08a      	sub	sp, #40	; 0x28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b8:	f107 0314 	add.w	r3, r7, #20
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	605a      	str	r2, [r3, #4]
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	60da      	str	r2, [r3, #12]
 80035c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d11e      	bne.n	8003610 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
 80035d6:	4b22      	ldr	r3, [pc, #136]	; (8003660 <HAL_TIM_MspPostInit+0xb0>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a21      	ldr	r2, [pc, #132]	; (8003660 <HAL_TIM_MspPostInit+0xb0>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b1f      	ldr	r3, [pc, #124]	; (8003660 <HAL_TIM_MspPostInit+0xb0>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = EN_R_Pin;
 80035ee:	2308      	movs	r3, #8
 80035f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f2:	2302      	movs	r3, #2
 80035f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fa:	2300      	movs	r3, #0
 80035fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035fe:	2301      	movs	r3, #1
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EN_R_GPIO_Port, &GPIO_InitStruct);
 8003602:	f107 0314 	add.w	r3, r7, #20
 8003606:	4619      	mov	r1, r3
 8003608:	4816      	ldr	r0, [pc, #88]	; (8003664 <HAL_TIM_MspPostInit+0xb4>)
 800360a:	f000 fe63 	bl	80042d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800360e:	e022      	b.n	8003656 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a14      	ldr	r2, [pc, #80]	; (8003668 <HAL_TIM_MspPostInit+0xb8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d11d      	bne.n	8003656 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b10      	ldr	r3, [pc, #64]	; (8003660 <HAL_TIM_MspPostInit+0xb0>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <HAL_TIM_MspPostInit+0xb0>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b0d      	ldr	r3, [pc, #52]	; (8003660 <HAL_TIM_MspPostInit+0xb0>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = P6_Pin;
 8003636:	2301      	movs	r3, #1
 8003638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800363a:	2302      	movs	r3, #2
 800363c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363e:	2300      	movs	r3, #0
 8003640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003646:	2302      	movs	r3, #2
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(P6_GPIO_Port, &GPIO_InitStruct);
 800364a:	f107 0314 	add.w	r3, r7, #20
 800364e:	4619      	mov	r1, r3
 8003650:	4806      	ldr	r0, [pc, #24]	; (800366c <HAL_TIM_MspPostInit+0xbc>)
 8003652:	f000 fe3f 	bl	80042d4 <HAL_GPIO_Init>
}
 8003656:	bf00      	nop
 8003658:	3728      	adds	r7, #40	; 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	40020000 	.word	0x40020000
 8003668:	40000400 	.word	0x40000400
 800366c:	40020400 	.word	0x40020400

08003670 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b08a      	sub	sp, #40	; 0x28
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003678:	f107 0314 	add.w	r3, r7, #20
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	605a      	str	r2, [r3, #4]
 8003682:	609a      	str	r2, [r3, #8]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <HAL_UART_MspInit+0x84>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d12c      	bne.n	80036ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	4b18      	ldr	r3, [pc, #96]	; (80036f8 <HAL_UART_MspInit+0x88>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a17      	ldr	r2, [pc, #92]	; (80036f8 <HAL_UART_MspInit+0x88>)
 800369c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b15      	ldr	r3, [pc, #84]	; (80036f8 <HAL_UART_MspInit+0x88>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <HAL_UART_MspInit+0x88>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <HAL_UART_MspInit+0x88>)
 80036b8:	f043 0302 	orr.w	r3, r3, #2
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b0e      	ldr	r3, [pc, #56]	; (80036f8 <HAL_UART_MspInit+0x88>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPS_RX_Pin|GPS_TX_Pin;
 80036ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80036ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d0:	2302      	movs	r3, #2
 80036d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036d8:	2303      	movs	r3, #3
 80036da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80036dc:	2307      	movs	r3, #7
 80036de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e0:	f107 0314 	add.w	r3, r7, #20
 80036e4:	4619      	mov	r1, r3
 80036e6:	4805      	ldr	r0, [pc, #20]	; (80036fc <HAL_UART_MspInit+0x8c>)
 80036e8:	f000 fdf4 	bl	80042d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80036ec:	bf00      	nop
 80036ee:	3728      	adds	r7, #40	; 0x28
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40004800 	.word	0x40004800
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40020400 	.word	0x40020400

08003700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003704:	bf00      	nop
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800370e:	b480      	push	{r7}
 8003710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003712:	e7fe      	b.n	8003712 <HardFault_Handler+0x4>

08003714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003718:	e7fe      	b.n	8003718 <MemManage_Handler+0x4>

0800371a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800371a:	b480      	push	{r7}
 800371c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800371e:	e7fe      	b.n	800371e <BusFault_Handler+0x4>

08003720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003724:	e7fe      	b.n	8003724 <UsageFault_Handler+0x4>

08003726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003726:	b480      	push	{r7}
 8003728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003754:	f000 f8ce 	bl	80038f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003758:	bf00      	nop
 800375a:	bd80      	pop	{r7, pc}

0800375c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8003760:	2040      	movs	r0, #64	; 0x40
 8003762:	f000 ff83 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <TIM3_IRQHandler+0x10>)
 8003772:	f005 fa77 	bl	8008c64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000dc4 	.word	0x20000dc4

08003780 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <SDIO_IRQHandler+0x10>)
 8003786:	f003 fd05 	bl	8007194 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000e84 	.word	0x20000e84

08003794 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003798:	4802      	ldr	r0, [pc, #8]	; (80037a4 <DMA2_Stream3_IRQHandler+0x10>)
 800379a:	f000 fb27 	bl	8003dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800379e:	bf00      	nop
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000c50 	.word	0x20000c50

080037a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80037ac:	4802      	ldr	r0, [pc, #8]	; (80037b8 <OTG_FS_IRQHandler+0x10>)
 80037ae:	f001 f9fd 	bl	8004bac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	200028a8 	.word	0x200028a8

080037bc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80037c0:	4802      	ldr	r0, [pc, #8]	; (80037cc <DMA2_Stream6_IRQHandler+0x10>)
 80037c2:	f000 fb13 	bl	8003dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	20000e24 	.word	0x20000e24

080037d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <SystemInit+0x28>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	4a07      	ldr	r2, [pc, #28]	; (80037f8 <SystemInit+0x28>)
 80037dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <SystemInit+0x28>)
 80037e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037ea:	609a      	str	r2, [r3, #8]
#endif
}
 80037ec:	bf00      	nop
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003834 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003800:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003802:	e003      	b.n	800380c <LoopCopyDataInit>

08003804 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003806:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003808:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800380a:	3104      	adds	r1, #4

0800380c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800380c:	480b      	ldr	r0, [pc, #44]	; (800383c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800380e:	4b0c      	ldr	r3, [pc, #48]	; (8003840 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003810:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003812:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003814:	d3f6      	bcc.n	8003804 <CopyDataInit>
  ldr  r2, =_sbss
 8003816:	4a0b      	ldr	r2, [pc, #44]	; (8003844 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003818:	e002      	b.n	8003820 <LoopFillZerobss>

0800381a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800381a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800381c:	f842 3b04 	str.w	r3, [r2], #4

08003820 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003822:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003824:	d3f9      	bcc.n	800381a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003826:	f7ff ffd3 	bl	80037d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800382a:	f00d f98f 	bl	8010b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800382e:	f7fe ffe3 	bl	80027f8 <main>
  bx  lr    
 8003832:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003834:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003838:	08015270 	.word	0x08015270
  ldr  r0, =_sdata
 800383c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003840:	20000360 	.word	0x20000360
  ldr  r2, =_sbss
 8003844:	20000360 	.word	0x20000360
  ldr  r3, = _ebss
 8003848:	20002cb4 	.word	0x20002cb4

0800384c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800384c:	e7fe      	b.n	800384c <ADC_IRQHandler>
	...

08003850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <HAL_Init+0x40>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0d      	ldr	r2, [pc, #52]	; (8003890 <HAL_Init+0x40>)
 800385a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003860:	4b0b      	ldr	r3, [pc, #44]	; (8003890 <HAL_Init+0x40>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <HAL_Init+0x40>)
 8003866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800386a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800386c:	4b08      	ldr	r3, [pc, #32]	; (8003890 <HAL_Init+0x40>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a07      	ldr	r2, [pc, #28]	; (8003890 <HAL_Init+0x40>)
 8003872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003878:	2003      	movs	r0, #3
 800387a:	f000 f94d 	bl	8003b18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800387e:	2000      	movs	r0, #0
 8003880:	f000 f808 	bl	8003894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003884:	f7ff fc5e 	bl	8003144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023c00 	.word	0x40023c00

08003894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_InitTick+0x54>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	4b12      	ldr	r3, [pc, #72]	; (80038ec <HAL_InitTick+0x58>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	4619      	mov	r1, r3
 80038a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f965 	bl	8003b82 <HAL_SYSTICK_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e00e      	b.n	80038e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b0f      	cmp	r3, #15
 80038c6:	d80a      	bhi.n	80038de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80038c8:	2200      	movs	r2, #0
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	f000 f92d 	bl	8003b2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80038d4:	4a06      	ldr	r2, [pc, #24]	; (80038f0 <HAL_InitTick+0x5c>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000014 	.word	0x20000014
 80038ec:	2000001c 	.word	0x2000001c
 80038f0:	20000018 	.word	0x20000018

080038f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_IncTick+0x20>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_IncTick+0x24>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4413      	add	r3, r2
 8003904:	4a04      	ldr	r2, [pc, #16]	; (8003918 <HAL_IncTick+0x24>)
 8003906:	6013      	str	r3, [r2, #0]
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	2000001c 	.word	0x2000001c
 8003918:	20000fa0 	.word	0x20000fa0

0800391c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800391c:	b480      	push	{r7}
 800391e:	af00      	add	r7, sp, #0
  return uwTick;
 8003920:	4b03      	ldr	r3, [pc, #12]	; (8003930 <HAL_GetTick+0x14>)
 8003922:	681b      	ldr	r3, [r3, #0]
}
 8003924:	4618      	mov	r0, r3
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	20000fa0 	.word	0x20000fa0

08003934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800393c:	f7ff ffee 	bl	800391c <HAL_GetTick>
 8003940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394c:	d005      	beq.n	800395a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_Delay+0x40>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800395a:	bf00      	nop
 800395c:	f7ff ffde 	bl	800391c <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d8f7      	bhi.n	800395c <HAL_Delay+0x28>
  {
  }
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	2000001c 	.word	0x2000001c

08003978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <__NVIC_SetPriorityGrouping+0x44>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003994:	4013      	ands	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80039a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039aa:	4a04      	ldr	r2, [pc, #16]	; (80039bc <__NVIC_SetPriorityGrouping+0x44>)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	60d3      	str	r3, [r2, #12]
}
 80039b0:	bf00      	nop
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <__NVIC_GetPriorityGrouping+0x18>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	0a1b      	lsrs	r3, r3, #8
 80039ca:	f003 0307 	and.w	r3, r3, #7
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	e000ed00 	.word	0xe000ed00

080039dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	db0b      	blt.n	8003a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039ee:	79fb      	ldrb	r3, [r7, #7]
 80039f0:	f003 021f 	and.w	r2, r3, #31
 80039f4:	4907      	ldr	r1, [pc, #28]	; (8003a14 <__NVIC_EnableIRQ+0x38>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2001      	movs	r0, #1
 80039fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	e000e100 	.word	0xe000e100

08003a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	4603      	mov	r3, r0
 8003a20:	6039      	str	r1, [r7, #0]
 8003a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	db0a      	blt.n	8003a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	490c      	ldr	r1, [pc, #48]	; (8003a64 <__NVIC_SetPriority+0x4c>)
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	b2d2      	uxtb	r2, r2
 8003a3a:	440b      	add	r3, r1
 8003a3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a40:	e00a      	b.n	8003a58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	b2da      	uxtb	r2, r3
 8003a46:	4908      	ldr	r1, [pc, #32]	; (8003a68 <__NVIC_SetPriority+0x50>)
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	f003 030f 	and.w	r3, r3, #15
 8003a4e:	3b04      	subs	r3, #4
 8003a50:	0112      	lsls	r2, r2, #4
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	440b      	add	r3, r1
 8003a56:	761a      	strb	r2, [r3, #24]
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	e000e100 	.word	0xe000e100
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b089      	sub	sp, #36	; 0x24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f1c3 0307 	rsb	r3, r3, #7
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	bf28      	it	cs
 8003a8a:	2304      	movcs	r3, #4
 8003a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	3304      	adds	r3, #4
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	d902      	bls.n	8003a9c <NVIC_EncodePriority+0x30>
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3b03      	subs	r3, #3
 8003a9a:	e000      	b.n	8003a9e <NVIC_EncodePriority+0x32>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	401a      	ands	r2, r3
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	43d9      	mvns	r1, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ac4:	4313      	orrs	r3, r2
         );
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3724      	adds	r7, #36	; 0x24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ae4:	d301      	bcc.n	8003aea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e00f      	b.n	8003b0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aea:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <SysTick_Config+0x40>)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003af2:	210f      	movs	r1, #15
 8003af4:	f04f 30ff 	mov.w	r0, #4294967295
 8003af8:	f7ff ff8e 	bl	8003a18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <SysTick_Config+0x40>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b02:	4b04      	ldr	r3, [pc, #16]	; (8003b14 <SysTick_Config+0x40>)
 8003b04:	2207      	movs	r2, #7
 8003b06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	e000e010 	.word	0xe000e010

08003b18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f7ff ff29 	bl	8003978 <__NVIC_SetPriorityGrouping>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	4603      	mov	r3, r0
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b40:	f7ff ff3e 	bl	80039c0 <__NVIC_GetPriorityGrouping>
 8003b44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	68b9      	ldr	r1, [r7, #8]
 8003b4a:	6978      	ldr	r0, [r7, #20]
 8003b4c:	f7ff ff8e 	bl	8003a6c <NVIC_EncodePriority>
 8003b50:	4602      	mov	r2, r0
 8003b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b56:	4611      	mov	r1, r2
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff5d 	bl	8003a18 <__NVIC_SetPriority>
}
 8003b5e:	bf00      	nop
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b082      	sub	sp, #8
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7ff ff31 	bl	80039dc <__NVIC_EnableIRQ>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ffa2 	bl	8003ad4 <SysTick_Config>
 8003b90:	4603      	mov	r3, r0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff feb8 	bl	800391c <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d101      	bne.n	8003bb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e099      	b.n	8003cec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f022 0201 	bic.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bd8:	e00f      	b.n	8003bfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bda:	f7ff fe9f 	bl	800391c <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	d908      	bls.n	8003bfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003bf6:	2303      	movs	r3, #3
 8003bf8:	e078      	b.n	8003cec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e8      	bne.n	8003bda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c10:	697a      	ldr	r2, [r7, #20]
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_DMA_Init+0x158>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d107      	bne.n	8003c64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f023 0307 	bic.w	r3, r3, #7
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d117      	bne.n	8003cbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00e      	beq.n	8003cbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa9d 	bl	80041e0 <DMA_CheckFifoParam>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2240      	movs	r2, #64	; 0x40
 8003cb0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e016      	b.n	8003cec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa54 	bl	8004174 <DMA_CalcBaseAndBitshift>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cd4:	223f      	movs	r2, #63	; 0x3f
 8003cd6:	409a      	lsls	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	f010803f 	.word	0xf010803f

08003cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
 8003d04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_DMA_Start_IT+0x26>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e040      	b.n	8003da0 <HAL_DMA_Start_IT+0xa8>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d12f      	bne.n	8003d92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2202      	movs	r2, #2
 8003d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f9e6 	bl	8004118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	223f      	movs	r2, #63	; 0x3f
 8003d52:	409a      	lsls	r2, r3
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0216 	orr.w	r2, r2, #22
 8003d66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0208 	orr.w	r2, r2, #8
 8003d7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f042 0201 	orr.w	r2, r2, #1
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	e005      	b.n	8003d9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d004      	beq.n	8003dc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2280      	movs	r2, #128	; 0x80
 8003dc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e00c      	b.n	8003de0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2205      	movs	r2, #5
 8003dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0201 	bic.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003df8:	4b92      	ldr	r3, [pc, #584]	; (8004044 <HAL_DMA_IRQHandler+0x258>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a92      	ldr	r2, [pc, #584]	; (8004048 <HAL_DMA_IRQHandler+0x25c>)
 8003dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003e02:	0a9b      	lsrs	r3, r3, #10
 8003e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e16:	2208      	movs	r2, #8
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01a      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d013      	beq.n	8003e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f022 0204 	bic.w	r2, r2, #4
 8003e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e44:	2208      	movs	r2, #8
 8003e46:	409a      	lsls	r2, r3
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	f043 0201 	orr.w	r2, r3, #1
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d012      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	409a      	lsls	r2, r3
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e86:	f043 0202 	orr.w	r2, r3, #2
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e92:	2204      	movs	r2, #4
 8003e94:	409a      	lsls	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d012      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00b      	beq.n	8003ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb0:	2204      	movs	r2, #4
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebc:	f043 0204 	orr.w	r2, r3, #4
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec8:	2210      	movs	r2, #16
 8003eca:	409a      	lsls	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d043      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d03c      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	409a      	lsls	r2, r3
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d108      	bne.n	8003f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d024      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
 8003f1a:	e01f      	b.n	8003f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01b      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	4798      	blx	r3
 8003f2c:	e016      	b.n	8003f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d107      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0208 	bic.w	r2, r2, #8
 8003f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	2220      	movs	r2, #32
 8003f62:	409a      	lsls	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 808e 	beq.w	800408a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0310 	and.w	r3, r3, #16
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 8086 	beq.w	800408a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f82:	2220      	movs	r2, #32
 8003f84:	409a      	lsls	r2, r3
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d136      	bne.n	8004004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0216 	bic.w	r2, r2, #22
 8003fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	695a      	ldr	r2, [r3, #20]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_DMA_IRQHandler+0x1da>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d007      	beq.n	8003fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0208 	bic.w	r2, r2, #8
 8003fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fda:	223f      	movs	r2, #63	; 0x3f
 8003fdc:	409a      	lsls	r2, r3
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d07d      	beq.n	80040f6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	4798      	blx	r3
        }
        return;
 8004002:	e078      	b.n	80040f6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d01c      	beq.n	800404c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d108      	bne.n	8004032 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004024:	2b00      	cmp	r3, #0
 8004026:	d030      	beq.n	800408a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
 8004030:	e02b      	b.n	800408a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004036:	2b00      	cmp	r3, #0
 8004038:	d027      	beq.n	800408a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	4798      	blx	r3
 8004042:	e022      	b.n	800408a <HAL_DMA_IRQHandler+0x29e>
 8004044:	20000014 	.word	0x20000014
 8004048:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004056:	2b00      	cmp	r3, #0
 8004058:	d10f      	bne.n	800407a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0210 	bic.w	r2, r2, #16
 8004068:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	2b00      	cmp	r3, #0
 8004090:	d032      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d022      	beq.n	80040e4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2205      	movs	r2, #5
 80040a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f022 0201 	bic.w	r2, r2, #1
 80040b4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3301      	adds	r3, #1
 80040ba:	60bb      	str	r3, [r7, #8]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d307      	bcc.n	80040d2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f2      	bne.n	80040b6 <HAL_DMA_IRQHandler+0x2ca>
 80040d0:	e000      	b.n	80040d4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80040d2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	4798      	blx	r3
 80040f4:	e000      	b.n	80040f8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80040f6:	bf00      	nop
    }
  }
}
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop

08004100 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b40      	cmp	r3, #64	; 0x40
 8004144:	d108      	bne.n	8004158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004156:	e007      	b.n	8004168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	b2db      	uxtb	r3, r3
 8004182:	3b10      	subs	r3, #16
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <DMA_CalcBaseAndBitshift+0x64>)
 8004186:	fba2 2303 	umull	r2, r3, r2, r3
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800418e:	4a13      	ldr	r2, [pc, #76]	; (80041dc <DMA_CalcBaseAndBitshift+0x68>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4413      	add	r3, r2
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b03      	cmp	r3, #3
 80041a0:	d909      	bls.n	80041b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	1d1a      	adds	r2, r3, #4
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	659a      	str	r2, [r3, #88]	; 0x58
 80041b4:	e007      	b.n	80041c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	aaaaaaab 	.word	0xaaaaaaab
 80041dc:	08014f10 	.word	0x08014f10

080041e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d11f      	bne.n	800423a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d855      	bhi.n	80042ac <DMA_CheckFifoParam+0xcc>
 8004200:	a201      	add	r2, pc, #4	; (adr r2, 8004208 <DMA_CheckFifoParam+0x28>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004219 	.word	0x08004219
 800420c:	0800422b 	.word	0x0800422b
 8004210:	08004219 	.word	0x08004219
 8004214:	080042ad 	.word	0x080042ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d045      	beq.n	80042b0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004228:	e042      	b.n	80042b0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004232:	d13f      	bne.n	80042b4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004238:	e03c      	b.n	80042b4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004242:	d121      	bne.n	8004288 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d836      	bhi.n	80042b8 <DMA_CheckFifoParam+0xd8>
 800424a:	a201      	add	r2, pc, #4	; (adr r2, 8004250 <DMA_CheckFifoParam+0x70>)
 800424c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004250:	08004261 	.word	0x08004261
 8004254:	08004267 	.word	0x08004267
 8004258:	08004261 	.word	0x08004261
 800425c:	08004279 	.word	0x08004279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	73fb      	strb	r3, [r7, #15]
      break;
 8004264:	e02f      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d024      	beq.n	80042bc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004276:	e021      	b.n	80042bc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004280:	d11e      	bne.n	80042c0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004286:	e01b      	b.n	80042c0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d902      	bls.n	8004294 <DMA_CheckFifoParam+0xb4>
 800428e:	2b03      	cmp	r3, #3
 8004290:	d003      	beq.n	800429a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004292:	e018      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
      break;
 8004298:	e015      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00e      	beq.n	80042c4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
      break;
 80042aa:	e00b      	b.n	80042c4 <DMA_CheckFifoParam+0xe4>
      break;
 80042ac:	bf00      	nop
 80042ae:	e00a      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b0:	bf00      	nop
 80042b2:	e008      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b4:	bf00      	nop
 80042b6:	e006      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042b8:	bf00      	nop
 80042ba:	e004      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;   
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <DMA_CheckFifoParam+0xe6>
      break;
 80042c4:	bf00      	nop
    }
  } 
  
  return status; 
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b089      	sub	sp, #36	; 0x24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042de:	2300      	movs	r3, #0
 80042e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	e16b      	b.n	80045c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042f0:	2201      	movs	r2, #1
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	fa02 f303 	lsl.w	r3, r2, r3
 80042f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4013      	ands	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004304:	693a      	ldr	r2, [r7, #16]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	429a      	cmp	r2, r3
 800430a:	f040 815a 	bne.w	80045c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d00b      	beq.n	800432e <HAL_GPIO_Init+0x5a>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d007      	beq.n	800432e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004322:	2b11      	cmp	r3, #17
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b12      	cmp	r3, #18
 800432c:	d130      	bne.n	8004390 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	005b      	lsls	r3, r3, #1
 8004338:	2203      	movs	r2, #3
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	fa02 f303 	lsl.w	r3, r2, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69ba      	ldr	r2, [r7, #24]
 800435c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004364:	2201      	movs	r2, #1
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 0201 	and.w	r2, r3, #1
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	4313      	orrs	r3, r2
 8004388:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	005b      	lsls	r3, r3, #1
 800439a:	2203      	movs	r2, #3
 800439c:	fa02 f303 	lsl.w	r3, r2, r3
 80043a0:	43db      	mvns	r3, r3
 80043a2:	69ba      	ldr	r2, [r7, #24]
 80043a4:	4013      	ands	r3, r2
 80043a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d003      	beq.n	80043d0 <HAL_GPIO_Init+0xfc>
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	2b12      	cmp	r3, #18
 80043ce:	d123      	bne.n	8004418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	08da      	lsrs	r2, r3, #3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3208      	adds	r2, #8
 80043d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	220f      	movs	r2, #15
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	fa02 f303 	lsl.w	r3, r2, r3
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	08da      	lsrs	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3208      	adds	r2, #8
 8004412:	69b9      	ldr	r1, [r7, #24]
 8004414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	2203      	movs	r2, #3
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4013      	ands	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 0203 	and.w	r2, r3, #3
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	4313      	orrs	r3, r2
 8004444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004454:	2b00      	cmp	r3, #0
 8004456:	f000 80b4 	beq.w	80045c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445a:	2300      	movs	r3, #0
 800445c:	60fb      	str	r3, [r7, #12]
 800445e:	4b5f      	ldr	r3, [pc, #380]	; (80045dc <HAL_GPIO_Init+0x308>)
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	4a5e      	ldr	r2, [pc, #376]	; (80045dc <HAL_GPIO_Init+0x308>)
 8004464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004468:	6453      	str	r3, [r2, #68]	; 0x44
 800446a:	4b5c      	ldr	r3, [pc, #368]	; (80045dc <HAL_GPIO_Init+0x308>)
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004476:	4a5a      	ldr	r2, [pc, #360]	; (80045e0 <HAL_GPIO_Init+0x30c>)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	3302      	adds	r3, #2
 800447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a51      	ldr	r2, [pc, #324]	; (80045e4 <HAL_GPIO_Init+0x310>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d02b      	beq.n	80044fa <HAL_GPIO_Init+0x226>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a50      	ldr	r2, [pc, #320]	; (80045e8 <HAL_GPIO_Init+0x314>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d025      	beq.n	80044f6 <HAL_GPIO_Init+0x222>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a4f      	ldr	r2, [pc, #316]	; (80045ec <HAL_GPIO_Init+0x318>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d01f      	beq.n	80044f2 <HAL_GPIO_Init+0x21e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a4e      	ldr	r2, [pc, #312]	; (80045f0 <HAL_GPIO_Init+0x31c>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d019      	beq.n	80044ee <HAL_GPIO_Init+0x21a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a4d      	ldr	r2, [pc, #308]	; (80045f4 <HAL_GPIO_Init+0x320>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d013      	beq.n	80044ea <HAL_GPIO_Init+0x216>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a4c      	ldr	r2, [pc, #304]	; (80045f8 <HAL_GPIO_Init+0x324>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00d      	beq.n	80044e6 <HAL_GPIO_Init+0x212>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a4b      	ldr	r2, [pc, #300]	; (80045fc <HAL_GPIO_Init+0x328>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <HAL_GPIO_Init+0x20e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a4a      	ldr	r2, [pc, #296]	; (8004600 <HAL_GPIO_Init+0x32c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d101      	bne.n	80044de <HAL_GPIO_Init+0x20a>
 80044da:	2307      	movs	r3, #7
 80044dc:	e00e      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044de:	2308      	movs	r3, #8
 80044e0:	e00c      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044e2:	2306      	movs	r3, #6
 80044e4:	e00a      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044e6:	2305      	movs	r3, #5
 80044e8:	e008      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044ea:	2304      	movs	r3, #4
 80044ec:	e006      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044ee:	2303      	movs	r3, #3
 80044f0:	e004      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044f2:	2302      	movs	r3, #2
 80044f4:	e002      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_GPIO_Init+0x228>
 80044fa:	2300      	movs	r3, #0
 80044fc:	69fa      	ldr	r2, [r7, #28]
 80044fe:	f002 0203 	and.w	r2, r2, #3
 8004502:	0092      	lsls	r2, r2, #2
 8004504:	4093      	lsls	r3, r2
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	4313      	orrs	r3, r2
 800450a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800450c:	4934      	ldr	r1, [pc, #208]	; (80045e0 <HAL_GPIO_Init+0x30c>)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	089b      	lsrs	r3, r3, #2
 8004512:	3302      	adds	r3, #2
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800451a:	4b3a      	ldr	r3, [pc, #232]	; (8004604 <HAL_GPIO_Init+0x330>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	43db      	mvns	r3, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4013      	ands	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d003      	beq.n	800453e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	4313      	orrs	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800453e:	4a31      	ldr	r2, [pc, #196]	; (8004604 <HAL_GPIO_Init+0x330>)
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004544:	4b2f      	ldr	r3, [pc, #188]	; (8004604 <HAL_GPIO_Init+0x330>)
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	43db      	mvns	r3, r3
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4013      	ands	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d003      	beq.n	8004568 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004568:	4a26      	ldr	r2, [pc, #152]	; (8004604 <HAL_GPIO_Init+0x330>)
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800456e:	4b25      	ldr	r3, [pc, #148]	; (8004604 <HAL_GPIO_Init+0x330>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	43db      	mvns	r3, r3
 8004578:	69ba      	ldr	r2, [r7, #24]
 800457a:	4013      	ands	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004592:	4a1c      	ldr	r2, [pc, #112]	; (8004604 <HAL_GPIO_Init+0x330>)
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004598:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <HAL_GPIO_Init+0x330>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	43db      	mvns	r3, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4013      	ands	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045bc:	4a11      	ldr	r2, [pc, #68]	; (8004604 <HAL_GPIO_Init+0x330>)
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b0f      	cmp	r3, #15
 80045cc:	f67f ae90 	bls.w	80042f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045d0:	bf00      	nop
 80045d2:	3724      	adds	r7, #36	; 0x24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	40023800 	.word	0x40023800
 80045e0:	40013800 	.word	0x40013800
 80045e4:	40020000 	.word	0x40020000
 80045e8:	40020400 	.word	0x40020400
 80045ec:	40020800 	.word	0x40020800
 80045f0:	40020c00 	.word	0x40020c00
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40021400 	.word	0x40021400
 80045fc:	40021800 	.word	0x40021800
 8004600:	40021c00 	.word	0x40021c00
 8004604:	40013c00 	.word	0x40013c00

08004608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e001      	b.n	800462a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800462a:	7bfb      	ldrb	r3, [r7, #15]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]
 8004644:	4613      	mov	r3, r2
 8004646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004648:	787b      	ldrb	r3, [r7, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464e:	887a      	ldrh	r2, [r7, #2]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004654:	e003      	b.n	800465e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	041a      	lsls	r2, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	619a      	str	r2, [r3, #24]
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004682:	4a05      	ldr	r2, [pc, #20]	; (8004698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fd32 	bl	80030f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40013c00 	.word	0x40013c00

0800469c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e11f      	b.n	80048ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fe fd66 	bl	8003194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2224      	movs	r2, #36	; 0x24
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004700:	f001 fea2 	bl	8006448 <HAL_RCC_GetPCLK1Freq>
 8004704:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	4a7b      	ldr	r2, [pc, #492]	; (80048f8 <HAL_I2C_Init+0x25c>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d807      	bhi.n	8004720 <HAL_I2C_Init+0x84>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4a7a      	ldr	r2, [pc, #488]	; (80048fc <HAL_I2C_Init+0x260>)
 8004714:	4293      	cmp	r3, r2
 8004716:	bf94      	ite	ls
 8004718:	2301      	movls	r3, #1
 800471a:	2300      	movhi	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e006      	b.n	800472e <HAL_I2C_Init+0x92>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a77      	ldr	r2, [pc, #476]	; (8004900 <HAL_I2C_Init+0x264>)
 8004724:	4293      	cmp	r3, r2
 8004726:	bf94      	ite	ls
 8004728:	2301      	movls	r3, #1
 800472a:	2300      	movhi	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e0db      	b.n	80048ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a72      	ldr	r2, [pc, #456]	; (8004904 <HAL_I2C_Init+0x268>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	0c9b      	lsrs	r3, r3, #18
 8004740:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	4a64      	ldr	r2, [pc, #400]	; (80048f8 <HAL_I2C_Init+0x25c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d802      	bhi.n	8004770 <HAL_I2C_Init+0xd4>
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	3301      	adds	r3, #1
 800476e:	e009      	b.n	8004784 <HAL_I2C_Init+0xe8>
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	4a63      	ldr	r2, [pc, #396]	; (8004908 <HAL_I2C_Init+0x26c>)
 800477c:	fba2 2303 	umull	r2, r3, r2, r3
 8004780:	099b      	lsrs	r3, r3, #6
 8004782:	3301      	adds	r3, #1
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	430b      	orrs	r3, r1
 800478a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004796:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4956      	ldr	r1, [pc, #344]	; (80048f8 <HAL_I2C_Init+0x25c>)
 80047a0:	428b      	cmp	r3, r1
 80047a2:	d80d      	bhi.n	80047c0 <HAL_I2C_Init+0x124>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	1e59      	subs	r1, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80047b2:	3301      	adds	r3, #1
 80047b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	bf38      	it	cc
 80047bc:	2304      	movcc	r3, #4
 80047be:	e04f      	b.n	8004860 <HAL_I2C_Init+0x1c4>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d111      	bne.n	80047ec <HAL_I2C_Init+0x150>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1e58      	subs	r0, r3, #1
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	440b      	add	r3, r1
 80047d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80047da:	3301      	adds	r3, #1
 80047dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bf0c      	ite	eq
 80047e4:	2301      	moveq	r3, #1
 80047e6:	2300      	movne	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e012      	b.n	8004812 <HAL_I2C_Init+0x176>
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	1e58      	subs	r0, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6859      	ldr	r1, [r3, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	440b      	add	r3, r1
 80047fa:	0099      	lsls	r1, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004802:	3301      	adds	r3, #1
 8004804:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004808:	2b00      	cmp	r3, #0
 800480a:	bf0c      	ite	eq
 800480c:	2301      	moveq	r3, #1
 800480e:	2300      	movne	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <HAL_I2C_Init+0x17e>
 8004816:	2301      	movs	r3, #1
 8004818:	e022      	b.n	8004860 <HAL_I2C_Init+0x1c4>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d10e      	bne.n	8004840 <HAL_I2C_Init+0x1a4>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1e58      	subs	r0, r3, #1
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6859      	ldr	r1, [r3, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	440b      	add	r3, r1
 8004830:	fbb0 f3f3 	udiv	r3, r0, r3
 8004834:	3301      	adds	r3, #1
 8004836:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800483a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800483e:	e00f      	b.n	8004860 <HAL_I2C_Init+0x1c4>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	1e58      	subs	r0, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6859      	ldr	r1, [r3, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	440b      	add	r3, r1
 800484e:	0099      	lsls	r1, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	fbb0 f3f3 	udiv	r3, r0, r3
 8004856:	3301      	adds	r3, #1
 8004858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800485c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	6809      	ldr	r1, [r1, #0]
 8004864:	4313      	orrs	r3, r2
 8004866:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	69da      	ldr	r2, [r3, #28]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	430a      	orrs	r2, r1
 8004882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800488e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6911      	ldr	r1, [r2, #16]
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68d2      	ldr	r2, [r2, #12]
 800489a:	4311      	orrs	r1, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6812      	ldr	r2, [r2, #0]
 80048a0:	430b      	orrs	r3, r1
 80048a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	000186a0 	.word	0x000186a0
 80048fc:	001e847f 	.word	0x001e847f
 8004900:	003d08ff 	.word	0x003d08ff
 8004904:	431bde83 	.word	0x431bde83
 8004908:	10624dd3 	.word	0x10624dd3

0800490c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800490c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800490e:	b08f      	sub	sp, #60	; 0x3c
 8004910:	af0a      	add	r7, sp, #40	; 0x28
 8004912:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e10f      	b.n	8004b3e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d106      	bne.n	800493e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f00b fe07 	bl	801054c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2203      	movs	r2, #3
 8004942:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d102      	bne.n	8004958 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f006 fa12 	bl	800ad86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	687e      	ldr	r6, [r7, #4]
 800496a:	466d      	mov	r5, sp
 800496c:	f106 0410 	add.w	r4, r6, #16
 8004970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004978:	e894 0003 	ldmia.w	r4, {r0, r1}
 800497c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004980:	1d33      	adds	r3, r6, #4
 8004982:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004984:	6838      	ldr	r0, [r7, #0]
 8004986:	f006 f8e9 	bl	800ab5c <USB_CoreInit>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0d0      	b.n	8004b3e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f006 fa00 	bl	800ada8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a8:	2300      	movs	r3, #0
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e04a      	b.n	8004a44 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049ae:	7bfa      	ldrb	r2, [r7, #15]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	333d      	adds	r3, #61	; 0x3d
 80049be:	2201      	movs	r2, #1
 80049c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049c2:	7bfa      	ldrb	r2, [r7, #15]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	333c      	adds	r3, #60	; 0x3c
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
 80049da:	b298      	uxth	r0, r3
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	3342      	adds	r3, #66	; 0x42
 80049ea:	4602      	mov	r2, r0
 80049ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049ee:	7bfa      	ldrb	r2, [r7, #15]
 80049f0:	6879      	ldr	r1, [r7, #4]
 80049f2:	4613      	mov	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	333f      	adds	r3, #63	; 0x3f
 80049fe:	2200      	movs	r2, #0
 8004a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a02:	7bfa      	ldrb	r2, [r7, #15]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3344      	adds	r3, #68	; 0x44
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a16:	7bfa      	ldrb	r2, [r7, #15]
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	1a9b      	subs	r3, r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	3348      	adds	r3, #72	; 0x48
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3350      	adds	r3, #80	; 0x50
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
 8004a40:	3301      	adds	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
 8004a44:	7bfa      	ldrb	r2, [r7, #15]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d3af      	bcc.n	80049ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]
 8004a52:	e044      	b.n	8004ade <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a54:	7bfa      	ldrb	r2, [r7, #15]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	1a9b      	subs	r3, r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	440b      	add	r3, r1
 8004a78:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004a7c:	7bfa      	ldrb	r2, [r7, #15]
 8004a7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a80:	7bfa      	ldrb	r2, [r7, #15]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004a92:	2200      	movs	r2, #0
 8004a94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a96:	7bfa      	ldrb	r2, [r7, #15]
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	1a9b      	subs	r3, r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ac2:	7bfa      	ldrb	r2, [r7, #15]
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	440b      	add	r3, r1
 8004ad0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	3301      	adds	r3, #1
 8004adc:	73fb      	strb	r3, [r7, #15]
 8004ade:	7bfa      	ldrb	r2, [r7, #15]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d3b5      	bcc.n	8004a54 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	603b      	str	r3, [r7, #0]
 8004aee:	687e      	ldr	r6, [r7, #4]
 8004af0:	466d      	mov	r5, sp
 8004af2:	f106 0410 	add.w	r4, r6, #16
 8004af6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004af8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004afe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b02:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b06:	1d33      	adds	r3, r6, #4
 8004b08:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b0a:	6838      	ldr	r0, [r7, #0]
 8004b0c:	f006 f976 	bl	800adfc <USB_DevInit>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e00d      	b.n	8004b3e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f007 f96b 	bl	800be12 <USB_DevDisconnect>

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_PCD_Start+0x1c>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e020      	b.n	8004ba4 <HAL_PCD_Start+0x5e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d109      	bne.n	8004b86 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d005      	beq.n	8004b86 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f007 f929 	bl	800bde2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f006 f8e5 	bl	800ad64 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bac:	b590      	push	{r4, r7, lr}
 8004bae:	b08d      	sub	sp, #52	; 0x34
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f007 f9d0 	bl	800bf68 <USB_GetMode>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f040 838e 	bne.w	80052ec <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f007 f934 	bl	800be42 <USB_ReadInterrupts>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8384 	beq.w	80052ea <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f007 f92b 	bl	800be42 <USB_ReadInterrupts>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d107      	bne.n	8004c06 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f002 0202 	and.w	r2, r2, #2
 8004c04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f007 f919 	bl	800be42 <USB_ReadInterrupts>
 8004c10:	4603      	mov	r3, r0
 8004c12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c1a:	d17b      	bne.n	8004d14 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f007 f91f 	bl	800be68 <USB_ReadDevAllOutEpInterrupt>
 8004c2a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004c2c:	e06f      	b.n	8004d0e <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d064      	beq.n	8004d02 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c3e:	b2d2      	uxtb	r2, r2
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f007 f944 	bl	800bed0 <USB_ReadDevOutEPInterrupt>
 8004c48:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c60:	461a      	mov	r2, r3
 8004c62:	2301      	movs	r3, #1
 8004c64:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fe0d 	bl	8005888 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 ff0c 	bl	8005a98 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	2308      	movs	r3, #8
 8004c90:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d008      	beq.n	8004cae <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2310      	movs	r3, #16
 8004cac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d015      	beq.n	8004ce4 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691b      	ldr	r3, [r3, #16]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d108      	bne.n	8004cd2 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004cca:	461a      	mov	r2, r3
 8004ccc:	2101      	movs	r1, #1
 8004cce:	f007 f98f 	bl	800bff0 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	2320      	movs	r3, #32
 8004ce2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d00:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	3301      	adds	r3, #1
 8004d06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d18c      	bne.n	8004c2e <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f007 f892 	bl	800be42 <USB_ReadInterrupts>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d28:	f040 80c4 	bne.w	8004eb4 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f007 f8b3 	bl	800be9c <USB_ReadDevAllInEpInterrupt>
 8004d36:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004d3c:	e0b6      	b.n	8004eac <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80ab 	beq.w	8004ea0 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	4611      	mov	r1, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	f007 f8d9 	bl	800bf0c <USB_ReadDevInEPInterrupt>
 8004d5a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d05b      	beq.n	8004e1e <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	f003 030f 	and.w	r3, r3, #15
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69f9      	ldr	r1, [r7, #28]
 8004d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d86:	4013      	ands	r3, r2
 8004d88:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8c:	015a      	lsls	r2, r3, #5
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	4413      	add	r3, r2
 8004d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d96:	461a      	mov	r2, r3
 8004d98:	2301      	movs	r3, #1
 8004d9a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d11b      	bne.n	8004ddc <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004da8:	4613      	mov	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	1a9b      	subs	r3, r3, r2
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	440b      	add	r3, r1
 8004db2:	3348      	adds	r3, #72	; 0x48
 8004db4:	6819      	ldr	r1, [r3, #0]
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dba:	4613      	mov	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	1a9b      	subs	r3, r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4403      	add	r3, r0
 8004dc4:	3344      	adds	r3, #68	; 0x44
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4419      	add	r1, r3
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dce:	4613      	mov	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4403      	add	r3, r0
 8004dd8:	3348      	adds	r3, #72	; 0x48
 8004dda:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	4619      	mov	r1, r3
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f00b fc33 	bl	801064e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d116      	bne.n	8004e1e <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d113      	bne.n	8004e1e <HAL_PCD_IRQHandler+0x272>
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	1a9b      	subs	r3, r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	3350      	adds	r3, #80	; 0x50
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d108      	bne.n	8004e1e <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e16:	461a      	mov	r2, r3
 8004e18:	2101      	movs	r1, #1
 8004e1a:	f007 f8e9 	bl	800bff0 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e34:	461a      	mov	r2, r3
 8004e36:	2308      	movs	r3, #8
 8004e38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	f003 0310 	and.w	r3, r3, #16
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d008      	beq.n	8004e56 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e50:	461a      	mov	r2, r3
 8004e52:	2310      	movs	r3, #16
 8004e54:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	2340      	movs	r3, #64	; 0x40
 8004e70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f003 0302 	and.w	r3, r3, #2
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2302      	movs	r3, #2
 8004e8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d003      	beq.n	8004ea0 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004e98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fc67 	bl	800576e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	085b      	lsrs	r3, r3, #1
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f47f af45 	bne.w	8004d3e <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f006 ffc2 	bl	800be42 <USB_ReadInterrupts>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ec8:	d122      	bne.n	8004f10 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d108      	bne.n	8004efa <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fe88 	bl	8005c08 <HAL_PCDEx_LPM_Callback>
 8004ef8:	e002      	b.n	8004f00 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f00b fc1e 	bl	801073c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f006 ff94 	bl	800be42 <USB_ReadInterrupts>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f24:	d112      	bne.n	8004f4c <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d102      	bne.n	8004f3c <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f00b fbda 	bl	80106f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004f4a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f006 ff76 	bl	800be42 <USB_ReadInterrupts>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f60:	f040 80a7 	bne.w	80050b2 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f72:	f023 0301 	bic.w	r3, r3, #1
 8004f76:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2110      	movs	r1, #16
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f006 f8ae 	bl	800b0e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f84:	2300      	movs	r3, #0
 8004f86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f88:	e036      	b.n	8004ff8 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f96:	461a      	mov	r2, r3
 8004f98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f9c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	69fa      	ldr	r2, [r7, #28]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fbc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fd0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ff0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d3c3      	bcc.n	8004f8a <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	69fa      	ldr	r2, [r7, #28]
 800500c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005010:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005014:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	2b00      	cmp	r3, #0
 800501c:	d016      	beq.n	800504c <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800502e:	f043 030b 	orr.w	r3, r3, #11
 8005032:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005044:	f043 030b 	orr.w	r3, r3, #11
 8005048:	6453      	str	r3, [r2, #68]	; 0x44
 800504a:	e015      	b.n	8005078 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	69fa      	ldr	r2, [r7, #28]
 8005056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800505a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800505e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005062:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005072:	f043 030b 	orr.w	r3, r3, #11
 8005076:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005086:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800508a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6818      	ldr	r0, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800509c:	461a      	mov	r2, r3
 800509e:	f006 ffa7 	bl	800bff0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80050b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f006 fec3 	bl	800be42 <USB_ReadInterrupts>
 80050bc:	4603      	mov	r3, r0
 80050be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c6:	d124      	bne.n	8005112 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f006 ff59 	bl	800bf84 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f006 f863 	bl	800b1a2 <USB_GetDevSpeed>
 80050dc:	4603      	mov	r3, r0
 80050de:	461a      	mov	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681c      	ldr	r4, [r3, #0]
 80050e8:	f001 f9a2 	bl	8006430 <HAL_RCC_GetHCLKFreq>
 80050ec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	4620      	mov	r0, r4
 80050f8:	f005 fd92 	bl	800ac20 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f00b face 	bl	801069e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695a      	ldr	r2, [r3, #20]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005110:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f006 fe93 	bl	800be42 <USB_ReadInterrupts>
 800511c:	4603      	mov	r3, r0
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b10      	cmp	r3, #16
 8005124:	d161      	bne.n	80051ea <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0210 	bic.w	r2, r2, #16
 8005134:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005136:	6a3b      	ldr	r3, [r7, #32]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f003 020f 	and.w	r2, r3, #15
 8005142:	4613      	mov	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	4413      	add	r3, r2
 8005152:	3304      	adds	r3, #4
 8005154:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	0c5b      	lsrs	r3, r3, #17
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	2b02      	cmp	r3, #2
 8005160:	d124      	bne.n	80051ac <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005162:	693a      	ldr	r2, [r7, #16]
 8005164:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d035      	beq.n	80051da <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800517c:	b29b      	uxth	r3, r3
 800517e:	461a      	mov	r2, r3
 8005180:	6a38      	ldr	r0, [r7, #32]
 8005182:	f006 fd0b 	bl	800bb9c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	68da      	ldr	r2, [r3, #12]
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	091b      	lsrs	r3, r3, #4
 800518e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005192:	441a      	add	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	699a      	ldr	r2, [r3, #24]
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	091b      	lsrs	r3, r3, #4
 80051a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051a4:	441a      	add	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	619a      	str	r2, [r3, #24]
 80051aa:	e016      	b.n	80051da <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	0c5b      	lsrs	r3, r3, #17
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	2b06      	cmp	r3, #6
 80051b6:	d110      	bne.n	80051da <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051be:	2208      	movs	r2, #8
 80051c0:	4619      	mov	r1, r3
 80051c2:	6a38      	ldr	r0, [r7, #32]
 80051c4:	f006 fcea 	bl	800bb9c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	091b      	lsrs	r3, r3, #4
 80051d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051d4:	441a      	add	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	699a      	ldr	r2, [r3, #24]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f042 0210 	orr.w	r2, r2, #16
 80051e8:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f006 fe27 	bl	800be42 <USB_ReadInterrupts>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b08      	cmp	r3, #8
 80051fc:	d10a      	bne.n	8005214 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f00b fa3f 	bl	8010682 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695a      	ldr	r2, [r3, #20]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f002 0208 	and.w	r2, r2, #8
 8005212:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4618      	mov	r0, r3
 800521a:	f006 fe12 	bl	800be42 <USB_ReadInterrupts>
 800521e:	4603      	mov	r3, r0
 8005220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005228:	d10f      	bne.n	800524a <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	b2db      	uxtb	r3, r3
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f00b faa1 	bl	801077c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005248:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f006 fdf7 	bl	800be42 <USB_ReadInterrupts>
 8005254:	4603      	mov	r3, r0
 8005256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800525a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800525e:	d10f      	bne.n	8005280 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005266:	b2db      	uxtb	r3, r3
 8005268:	4619      	mov	r1, r3
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f00b fa74 	bl	8010758 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800527e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f006 fddc 	bl	800be42 <USB_ReadInterrupts>
 800528a:	4603      	mov	r3, r0
 800528c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005294:	d10a      	bne.n	80052ac <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f00b fa82 	bl	80107a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695a      	ldr	r2, [r3, #20]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80052aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f006 fdc6 	bl	800be42 <USB_ReadInterrupts>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d115      	bne.n	80052ec <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f003 0304 	and.w	r3, r3, #4
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d002      	beq.n	80052d8 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f00b fa72 	bl	80107bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6859      	ldr	r1, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]
 80052e8:	e000      	b.n	80052ec <HAL_PCD_IRQHandler+0x740>
      return;
 80052ea:	bf00      	nop
    }
  }
}
 80052ec:	3734      	adds	r7, #52	; 0x34
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd90      	pop	{r4, r7, pc}

080052f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80052f2:	b580      	push	{r7, lr}
 80052f4:	b082      	sub	sp, #8
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_PCD_SetAddress+0x1a>
 8005308:	2302      	movs	r3, #2
 800530a:	e013      	b.n	8005334 <HAL_PCD_SetAddress+0x42>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	78fa      	ldrb	r2, [r7, #3]
 8005318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f006 fd36 	bl	800bd96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	4608      	mov	r0, r1
 8005346:	4611      	mov	r1, r2
 8005348:	461a      	mov	r2, r3
 800534a:	4603      	mov	r3, r0
 800534c:	70fb      	strb	r3, [r7, #3]
 800534e:	460b      	mov	r3, r1
 8005350:	803b      	strh	r3, [r7, #0]
 8005352:	4613      	mov	r3, r2
 8005354:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800535a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800535e:	2b00      	cmp	r3, #0
 8005360:	da0f      	bge.n	8005382 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005362:	78fb      	ldrb	r3, [r7, #3]
 8005364:	f003 020f 	and.w	r2, r3, #15
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	1a9b      	subs	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	3338      	adds	r3, #56	; 0x38
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	3304      	adds	r3, #4
 8005378:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2201      	movs	r2, #1
 800537e:	705a      	strb	r2, [r3, #1]
 8005380:	e00f      	b.n	80053a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f003 020f 	and.w	r2, r3, #15
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	4413      	add	r3, r2
 8005398:	3304      	adds	r3, #4
 800539a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80053a2:	78fb      	ldrb	r3, [r7, #3]
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80053ae:	883a      	ldrh	r2, [r7, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	78ba      	ldrb	r2, [r7, #2]
 80053b8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	785b      	ldrb	r3, [r3, #1]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d004      	beq.n	80053cc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80053cc:	78bb      	ldrb	r3, [r7, #2]
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d102      	bne.n	80053d8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_PCD_EP_Open+0xaa>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e00e      	b.n	8005404 <HAL_PCD_EP_Open+0xc8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f005 fef9 	bl	800b1ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8005402:	7afb      	ldrb	r3, [r7, #11]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800541c:	2b00      	cmp	r3, #0
 800541e:	da0f      	bge.n	8005440 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005420:	78fb      	ldrb	r3, [r7, #3]
 8005422:	f003 020f 	and.w	r2, r3, #15
 8005426:	4613      	mov	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	3338      	adds	r3, #56	; 0x38
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	4413      	add	r3, r2
 8005434:	3304      	adds	r3, #4
 8005436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2201      	movs	r2, #1
 800543c:	705a      	strb	r2, [r3, #1]
 800543e:	e00f      	b.n	8005460 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	4613      	mov	r3, r2
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	1a9b      	subs	r3, r3, r2
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	4413      	add	r3, r2
 8005456:	3304      	adds	r3, #4
 8005458:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005460:	78fb      	ldrb	r3, [r7, #3]
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	b2da      	uxtb	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005472:	2b01      	cmp	r3, #1
 8005474:	d101      	bne.n	800547a <HAL_PCD_EP_Close+0x6e>
 8005476:	2302      	movs	r3, #2
 8005478:	e00e      	b.n	8005498 <HAL_PCD_EP_Close+0x8c>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68f9      	ldr	r1, [r7, #12]
 8005488:	4618      	mov	r0, r3
 800548a:	f005 ff37 	bl	800b2fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	607a      	str	r2, [r7, #4]
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	460b      	mov	r3, r1
 80054ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054b0:	7afb      	ldrb	r3, [r7, #11]
 80054b2:	f003 020f 	and.w	r2, r3, #15
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	1a9b      	subs	r3, r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	3304      	adds	r3, #4
 80054c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2200      	movs	r2, #0
 80054da:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	2200      	movs	r2, #0
 80054e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054e2:	7afb      	ldrb	r3, [r7, #11]
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d102      	bne.n	80054fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80054fc:	7afb      	ldrb	r3, [r7, #11]
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	6979      	ldr	r1, [r7, #20]
 8005514:	f006 f9ba 	bl	800b88c <USB_EP0StartXfer>
 8005518:	e008      	b.n	800552c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6818      	ldr	r0, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	b2db      	uxtb	r3, r3
 8005524:	461a      	mov	r2, r3
 8005526:	6979      	ldr	r1, [r7, #20]
 8005528:	f005 ff6c 	bl	800b404 <USB_EPStartXfer>
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3718      	adds	r7, #24
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	460b      	mov	r3, r1
 8005540:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005542:	78fb      	ldrb	r3, [r7, #3]
 8005544:	f003 020f 	and.w	r2, r3, #15
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4613      	mov	r3, r2
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	1a9b      	subs	r3, r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	440b      	add	r3, r1
 8005554:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005558:	681b      	ldr	r3, [r3, #0]
}
 800555a:	4618      	mov	r0, r3
 800555c:	370c      	adds	r7, #12
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b086      	sub	sp, #24
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
 8005572:	460b      	mov	r3, r1
 8005574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005576:	7afb      	ldrb	r3, [r7, #11]
 8005578:	f003 020f 	and.w	r2, r3, #15
 800557c:	4613      	mov	r3, r2
 800557e:	00db      	lsls	r3, r3, #3
 8005580:	1a9b      	subs	r3, r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	3338      	adds	r3, #56	; 0x38
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	3304      	adds	r3, #4
 800558c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2201      	movs	r2, #1
 80055a4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055a6:	7afb      	ldrb	r3, [r7, #11]
 80055a8:	f003 030f 	and.w	r3, r3, #15
 80055ac:	b2da      	uxtb	r2, r3
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d102      	bne.n	80055c0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055c0:	7afb      	ldrb	r3, [r7, #11]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	6979      	ldr	r1, [r7, #20]
 80055d8:	f006 f958 	bl	800b88c <USB_EP0StartXfer>
 80055dc:	e008      	b.n	80055f0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	6979      	ldr	r1, [r7, #20]
 80055ec:	f005 ff0a 	bl	800b404 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	460b      	mov	r3, r1
 8005604:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	f003 020f 	and.w	r2, r3, #15
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d901      	bls.n	8005618 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e050      	b.n	80056ba <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800561c:	2b00      	cmp	r3, #0
 800561e:	da0f      	bge.n	8005640 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	f003 020f 	and.w	r2, r3, #15
 8005626:	4613      	mov	r3, r2
 8005628:	00db      	lsls	r3, r3, #3
 800562a:	1a9b      	subs	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	3338      	adds	r3, #56	; 0x38
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	3304      	adds	r3, #4
 8005636:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2201      	movs	r2, #1
 800563c:	705a      	strb	r2, [r3, #1]
 800563e:	e00d      	b.n	800565c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005640:	78fa      	ldrb	r2, [r7, #3]
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4413      	add	r3, r2
 8005652:	3304      	adds	r3, #4
 8005654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005662:	78fb      	ldrb	r3, [r7, #3]
 8005664:	f003 030f 	and.w	r3, r3, #15
 8005668:	b2da      	uxtb	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_PCD_EP_SetStall+0x82>
 8005678:	2302      	movs	r3, #2
 800567a:	e01e      	b.n	80056ba <HAL_PCD_EP_SetStall+0xc0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68f9      	ldr	r1, [r7, #12]
 800568a:	4618      	mov	r0, r3
 800568c:	f006 faaf 	bl	800bbee <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005690:	78fb      	ldrb	r3, [r7, #3]
 8005692:	f003 030f 	and.w	r3, r3, #15
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	b2d9      	uxtb	r1, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80056aa:	461a      	mov	r2, r3
 80056ac:	f006 fca0 	bl	800bff0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	460b      	mov	r3, r1
 80056cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	f003 020f 	and.w	r2, r3, #15
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d901      	bls.n	80056e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e042      	b.n	8005766 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	da0f      	bge.n	8005708 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056e8:	78fb      	ldrb	r3, [r7, #3]
 80056ea:	f003 020f 	and.w	r2, r3, #15
 80056ee:	4613      	mov	r3, r2
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	1a9b      	subs	r3, r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	3338      	adds	r3, #56	; 0x38
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	4413      	add	r3, r2
 80056fc:	3304      	adds	r3, #4
 80056fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	705a      	strb	r2, [r3, #1]
 8005706:	e00f      	b.n	8005728 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005708:	78fb      	ldrb	r3, [r7, #3]
 800570a:	f003 020f 	and.w	r2, r3, #15
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	3304      	adds	r3, #4
 8005720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800572e:	78fb      	ldrb	r3, [r7, #3]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_PCD_EP_ClrStall+0x86>
 8005744:	2302      	movs	r3, #2
 8005746:	e00e      	b.n	8005766 <HAL_PCD_EP_ClrStall+0xa4>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68f9      	ldr	r1, [r7, #12]
 8005756:	4618      	mov	r0, r3
 8005758:	f006 fab7 	bl	800bcca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3710      	adds	r7, #16
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}

0800576e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b08a      	sub	sp, #40	; 0x28
 8005772:	af02      	add	r7, sp, #8
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	3338      	adds	r3, #56	; 0x38
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	4413      	add	r3, r2
 8005792:	3304      	adds	r3, #4
 8005794:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d901      	bls.n	80057a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e06c      	b.n	8005880 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	695a      	ldr	r2, [r3, #20]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	69fa      	ldr	r2, [r7, #28]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d902      	bls.n	80057c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	3303      	adds	r3, #3
 80057c6:	089b      	lsrs	r3, r3, #2
 80057c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80057ca:	e02b      	b.n	8005824 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	695a      	ldr	r2, [r3, #20]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d902      	bls.n	80057e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	3303      	adds	r3, #3
 80057ec:	089b      	lsrs	r3, r3, #2
 80057ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	68d9      	ldr	r1, [r3, #12]
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005800:	b2db      	uxtb	r3, r3
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	4603      	mov	r3, r0
 8005806:	6978      	ldr	r0, [r7, #20]
 8005808:	f006 f993 	bl	800bb32 <USB_WritePacket>

    ep->xfer_buff  += len;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	441a      	add	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	699a      	ldr	r2, [r3, #24]
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	441a      	add	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	b29b      	uxth	r3, r3
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	429a      	cmp	r2, r3
 8005838:	d809      	bhi.n	800584e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	699a      	ldr	r2, [r3, #24]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005842:	429a      	cmp	r2, r3
 8005844:	d203      	bcs.n	800584e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1be      	bne.n	80057cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	695a      	ldr	r2, [r3, #20]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	429a      	cmp	r2, r3
 8005858:	d811      	bhi.n	800587e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	f003 030f 	and.w	r3, r3, #15
 8005860:	2201      	movs	r2, #1
 8005862:	fa02 f303 	lsl.w	r3, r2, r3
 8005866:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	43db      	mvns	r3, r3
 8005874:	6939      	ldr	r1, [r7, #16]
 8005876:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800587a:	4013      	ands	r3, r2
 800587c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	3720      	adds	r7, #32
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	333c      	adds	r3, #60	; 0x3c
 80058a0:	3304      	adds	r3, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	f040 80b3 	bne.w	8005a26 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d028      	beq.n	800591c <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	4a70      	ldr	r2, [pc, #448]	; (8005a90 <PCD_EP_OutXfrComplete_int+0x208>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d90e      	bls.n	80058f0 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d009      	beq.n	80058f0 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e8:	461a      	mov	r2, r3
 80058ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ee:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f00a fe7f 	bl	80105f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005900:	461a      	mov	r2, r3
 8005902:	2101      	movs	r1, #1
 8005904:	f006 fb74 	bl	800bff0 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	015a      	lsls	r2, r3, #5
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	4413      	add	r3, r2
 8005910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005914:	461a      	mov	r2, r3
 8005916:	2308      	movs	r3, #8
 8005918:	6093      	str	r3, [r2, #8]
 800591a:	e0b3      	b.n	8005a84 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	015a      	lsls	r2, r3, #5
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	4413      	add	r3, r2
 800592e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005932:	461a      	mov	r2, r3
 8005934:	2320      	movs	r3, #32
 8005936:	6093      	str	r3, [r2, #8]
 8005938:	e0a4      	b.n	8005a84 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005940:	2b00      	cmp	r3, #0
 8005942:	f040 809f 	bne.w	8005a84 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a51      	ldr	r2, [pc, #324]	; (8005a90 <PCD_EP_OutXfrComplete_int+0x208>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d90f      	bls.n	800596e <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	461a      	mov	r2, r3
 8005966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596a:	6093      	str	r3, [r2, #8]
 800596c:	e08a      	b.n	8005a84 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	4613      	mov	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005980:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	0159      	lsls	r1, r3, #5
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	440b      	add	r3, r1
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005994:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	4613      	mov	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	1a9b      	subs	r3, r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4403      	add	r3, r0
 80059a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80059a8:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80059aa:	6879      	ldr	r1, [r7, #4]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	4613      	mov	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	1a9b      	subs	r3, r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	440b      	add	r3, r1
 80059b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059bc:	6819      	ldr	r1, [r3, #0]
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	4613      	mov	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4403      	add	r3, r0
 80059cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4419      	add	r1, r3
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	4613      	mov	r3, r2
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	1a9b      	subs	r3, r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4403      	add	r3, r0
 80059e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80059e6:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	4619      	mov	r1, r3
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f00a fe12 	bl	8010618 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d144      	bne.n	8005a84 <PCD_EP_OutXfrComplete_int+0x1fc>
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	4613      	mov	r3, r2
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	1a9b      	subs	r3, r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	440b      	add	r3, r1
 8005a08:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d138      	bne.n	8005a84 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6818      	ldr	r0, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2101      	movs	r1, #1
 8005a20:	f006 fae6 	bl	800bff0 <USB_EP0_OutStart>
 8005a24:	e02e      	b.n	8005a84 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <PCD_EP_OutXfrComplete_int+0x20c>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d124      	bne.n	8005a78 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a44:	461a      	mov	r2, r3
 8005a46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4a:	6093      	str	r3, [r2, #8]
 8005a4c:	e01a      	b.n	8005a84 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f003 0320 	and.w	r3, r3, #32
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	461a      	mov	r2, r3
 8005a66:	2320      	movs	r3, #32
 8005a68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	4619      	mov	r1, r3
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f00a fdd1 	bl	8010618 <HAL_PCD_DataOutStageCallback>
 8005a76:	e005      	b.n	8005a84 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f00a fdca 	bl	8010618 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3718      	adds	r7, #24
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	4f54300a 	.word	0x4f54300a
 8005a94:	4f54310a 	.word	0x4f54310a

08005a98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	333c      	adds	r3, #60	; 0x3c
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d113      	bne.n	8005af6 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a1f      	ldr	r2, [pc, #124]	; (8005b50 <PCD_EP_OutSetupPacket_int+0xb8>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d922      	bls.n	8005b1c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d01d      	beq.n	8005b1c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	015a      	lsls	r2, r3, #5
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aec:	461a      	mov	r2, r3
 8005aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005af2:	6093      	str	r3, [r2, #8]
 8005af4:	e012      	b.n	8005b1c <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4a16      	ldr	r2, [pc, #88]	; (8005b54 <PCD_EP_OutSetupPacket_int+0xbc>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d10e      	bne.n	8005b1c <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d009      	beq.n	8005b1c <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b14:	461a      	mov	r2, r3
 8005b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f00a fd69 	bl	80105f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	4a0a      	ldr	r2, [pc, #40]	; (8005b50 <PCD_EP_OutSetupPacket_int+0xb8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d90c      	bls.n	8005b44 <PCD_EP_OutSetupPacket_int+0xac>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d108      	bne.n	8005b44 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2101      	movs	r1, #1
 8005b40:	f006 fa56 	bl	800bff0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	4f54300a 	.word	0x4f54300a
 8005b54:	4f54310a 	.word	0x4f54310a

08005b58 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	460b      	mov	r3, r1
 8005b62:	70fb      	strb	r3, [r7, #3]
 8005b64:	4613      	mov	r3, r2
 8005b66:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005b70:	78fb      	ldrb	r3, [r7, #3]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005b76:	883b      	ldrh	r3, [r7, #0]
 8005b78:	0419      	lsls	r1, r3, #16
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	430a      	orrs	r2, r1
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28
 8005b84:	e028      	b.n	8005bd8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	0c1b      	lsrs	r3, r3, #16
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4413      	add	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005b94:	2300      	movs	r3, #0
 8005b96:	73fb      	strb	r3, [r7, #15]
 8005b98:	e00d      	b.n	8005bb6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	3340      	adds	r3, #64	; 0x40
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	0c1b      	lsrs	r3, r3, #16
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4413      	add	r3, r2
 8005bae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
 8005bb6:	7bfa      	ldrb	r2, [r7, #15]
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d3ec      	bcc.n	8005b9a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005bc0:	883b      	ldrh	r3, [r7, #0]
 8005bc2:	0418      	lsls	r0, r3, #16
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6819      	ldr	r1, [r3, #0]
 8005bc8:	78fb      	ldrb	r3, [r7, #3]
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	4302      	orrs	r2, r0
 8005bd0:	3340      	adds	r3, #64	; 0x40
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	440b      	add	r3, r1
 8005bd6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr

08005be6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b083      	sub	sp, #12
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	887a      	ldrh	r2, [r7, #2]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	460b      	mov	r3, r1
 8005c12:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e25b      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d075      	beq.n	8005d2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c3e:	4ba3      	ldr	r3, [pc, #652]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 030c 	and.w	r3, r3, #12
 8005c46:	2b04      	cmp	r3, #4
 8005c48:	d00c      	beq.n	8005c64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c4a:	4ba0      	ldr	r3, [pc, #640]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005c52:	2b08      	cmp	r3, #8
 8005c54:	d112      	bne.n	8005c7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c56:	4b9d      	ldr	r3, [pc, #628]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c62:	d10b      	bne.n	8005c7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c64:	4b99      	ldr	r3, [pc, #612]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05b      	beq.n	8005d28 <HAL_RCC_OscConfig+0x108>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d157      	bne.n	8005d28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e236      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c84:	d106      	bne.n	8005c94 <HAL_RCC_OscConfig+0x74>
 8005c86:	4b91      	ldr	r3, [pc, #580]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a90      	ldr	r2, [pc, #576]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	e01d      	b.n	8005cd0 <HAL_RCC_OscConfig+0xb0>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c9c:	d10c      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x98>
 8005c9e:	4b8b      	ldr	r3, [pc, #556]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a8a      	ldr	r2, [pc, #552]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	4b88      	ldr	r3, [pc, #544]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a87      	ldr	r2, [pc, #540]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	e00b      	b.n	8005cd0 <HAL_RCC_OscConfig+0xb0>
 8005cb8:	4b84      	ldr	r3, [pc, #528]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a83      	ldr	r2, [pc, #524]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	4b81      	ldr	r3, [pc, #516]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a80      	ldr	r2, [pc, #512]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d013      	beq.n	8005d00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd8:	f7fd fe20 	bl	800391c <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce0:	f7fd fe1c 	bl	800391c <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b64      	cmp	r3, #100	; 0x64
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e1fb      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	4b76      	ldr	r3, [pc, #472]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0f0      	beq.n	8005ce0 <HAL_RCC_OscConfig+0xc0>
 8005cfe:	e014      	b.n	8005d2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d00:	f7fd fe0c 	bl	800391c <HAL_GetTick>
 8005d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d06:	e008      	b.n	8005d1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d08:	f7fd fe08 	bl	800391c <HAL_GetTick>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	1ad3      	subs	r3, r2, r3
 8005d12:	2b64      	cmp	r3, #100	; 0x64
 8005d14:	d901      	bls.n	8005d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e1e7      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1a:	4b6c      	ldr	r3, [pc, #432]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1f0      	bne.n	8005d08 <HAL_RCC_OscConfig+0xe8>
 8005d26:	e000      	b.n	8005d2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d063      	beq.n	8005dfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d36:	4b65      	ldr	r3, [pc, #404]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 030c 	and.w	r3, r3, #12
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d42:	4b62      	ldr	r3, [pc, #392]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005d4a:	2b08      	cmp	r3, #8
 8005d4c:	d11c      	bne.n	8005d88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d4e:	4b5f      	ldr	r3, [pc, #380]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d116      	bne.n	8005d88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5a:	4b5c      	ldr	r3, [pc, #368]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_RCC_OscConfig+0x152>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d001      	beq.n	8005d72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e1bb      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d72:	4b56      	ldr	r3, [pc, #344]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4952      	ldr	r1, [pc, #328]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005d82:	4313      	orrs	r3, r2
 8005d84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d86:	e03a      	b.n	8005dfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d020      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d90:	4b4f      	ldr	r3, [pc, #316]	; (8005ed0 <HAL_RCC_OscConfig+0x2b0>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d96:	f7fd fdc1 	bl	800391c <HAL_GetTick>
 8005d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d9e:	f7fd fdbd 	bl	800391c <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e19c      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005db0:	4b46      	ldr	r3, [pc, #280]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0f0      	beq.n	8005d9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dbc:	4b43      	ldr	r3, [pc, #268]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	691b      	ldr	r3, [r3, #16]
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4940      	ldr	r1, [pc, #256]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	600b      	str	r3, [r1, #0]
 8005dd0:	e015      	b.n	8005dfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005dd2:	4b3f      	ldr	r3, [pc, #252]	; (8005ed0 <HAL_RCC_OscConfig+0x2b0>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fd fda0 	bl	800391c <HAL_GetTick>
 8005ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005de0:	f7fd fd9c 	bl	800391c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e17b      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df2:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d1f0      	bne.n	8005de0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0308 	and.w	r3, r3, #8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d030      	beq.n	8005e6c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d016      	beq.n	8005e40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e12:	4b30      	ldr	r3, [pc, #192]	; (8005ed4 <HAL_RCC_OscConfig+0x2b4>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e18:	f7fd fd80 	bl	800391c <HAL_GetTick>
 8005e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e1e:	e008      	b.n	8005e32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e20:	f7fd fd7c 	bl	800391c <HAL_GetTick>
 8005e24:	4602      	mov	r2, r0
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	2b02      	cmp	r3, #2
 8005e2c:	d901      	bls.n	8005e32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	e15b      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e32:	4b26      	ldr	r3, [pc, #152]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e36:	f003 0302 	and.w	r3, r3, #2
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d0f0      	beq.n	8005e20 <HAL_RCC_OscConfig+0x200>
 8005e3e:	e015      	b.n	8005e6c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCC_OscConfig+0x2b4>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e46:	f7fd fd69 	bl	800391c <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e4e:	f7fd fd65 	bl	800391c <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e144      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e60:	4b1a      	ldr	r3, [pc, #104]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1f0      	bne.n	8005e4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80a0 	beq.w	8005fba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10f      	bne.n	8005eaa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
 8005e8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e92:	4a0e      	ldr	r2, [pc, #56]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e98:	6413      	str	r3, [r2, #64]	; 0x40
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <HAL_RCC_OscConfig+0x2ac>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	60bb      	str	r3, [r7, #8]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <HAL_RCC_OscConfig+0x2b8>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d121      	bne.n	8005efa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <HAL_RCC_OscConfig+0x2b8>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a07      	ldr	r2, [pc, #28]	; (8005ed8 <HAL_RCC_OscConfig+0x2b8>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ec0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ec2:	f7fd fd2b 	bl	800391c <HAL_GetTick>
 8005ec6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec8:	e011      	b.n	8005eee <HAL_RCC_OscConfig+0x2ce>
 8005eca:	bf00      	nop
 8005ecc:	40023800 	.word	0x40023800
 8005ed0:	42470000 	.word	0x42470000
 8005ed4:	42470e80 	.word	0x42470e80
 8005ed8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005edc:	f7fd fd1e 	bl	800391c <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e0fd      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005eee:	4b81      	ldr	r3, [pc, #516]	; (80060f4 <HAL_RCC_OscConfig+0x4d4>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d106      	bne.n	8005f10 <HAL_RCC_OscConfig+0x2f0>
 8005f02:	4b7d      	ldr	r3, [pc, #500]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f06:	4a7c      	ldr	r2, [pc, #496]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f08:	f043 0301 	orr.w	r3, r3, #1
 8005f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f0e:	e01c      	b.n	8005f4a <HAL_RCC_OscConfig+0x32a>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2b05      	cmp	r3, #5
 8005f16:	d10c      	bne.n	8005f32 <HAL_RCC_OscConfig+0x312>
 8005f18:	4b77      	ldr	r3, [pc, #476]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	4a76      	ldr	r2, [pc, #472]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f1e:	f043 0304 	orr.w	r3, r3, #4
 8005f22:	6713      	str	r3, [r2, #112]	; 0x70
 8005f24:	4b74      	ldr	r3, [pc, #464]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	4a73      	ldr	r2, [pc, #460]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f2a:	f043 0301 	orr.w	r3, r3, #1
 8005f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f30:	e00b      	b.n	8005f4a <HAL_RCC_OscConfig+0x32a>
 8005f32:	4b71      	ldr	r3, [pc, #452]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	4a70      	ldr	r2, [pc, #448]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3e:	4b6e      	ldr	r3, [pc, #440]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	4a6d      	ldr	r2, [pc, #436]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f44:	f023 0304 	bic.w	r3, r3, #4
 8005f48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d015      	beq.n	8005f7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f52:	f7fd fce3 	bl	800391c <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f58:	e00a      	b.n	8005f70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f5a:	f7fd fcdf 	bl	800391c <HAL_GetTick>
 8005f5e:	4602      	mov	r2, r0
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d901      	bls.n	8005f70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	e0bc      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f70:	4b61      	ldr	r3, [pc, #388]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0ee      	beq.n	8005f5a <HAL_RCC_OscConfig+0x33a>
 8005f7c:	e014      	b.n	8005fa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f7e:	f7fd fccd 	bl	800391c <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f84:	e00a      	b.n	8005f9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f86:	f7fd fcc9 	bl	800391c <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e0a6      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f9c:	4b56      	ldr	r3, [pc, #344]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1ee      	bne.n	8005f86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa8:	7dfb      	ldrb	r3, [r7, #23]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d105      	bne.n	8005fba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fae:	4b52      	ldr	r3, [pc, #328]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	4a51      	ldr	r2, [pc, #324]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 8092 	beq.w	80060e8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fc4:	4b4c      	ldr	r3, [pc, #304]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 030c 	and.w	r3, r3, #12
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d05c      	beq.n	800608a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d141      	bne.n	800605c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd8:	4b48      	ldr	r3, [pc, #288]	; (80060fc <HAL_RCC_OscConfig+0x4dc>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fde:	f7fd fc9d 	bl	800391c <HAL_GetTick>
 8005fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fe4:	e008      	b.n	8005ff8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005fe6:	f7fd fc99 	bl	800391c <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d901      	bls.n	8005ff8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	e078      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ff8:	4b3f      	ldr	r3, [pc, #252]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1f0      	bne.n	8005fe6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69da      	ldr	r2, [r3, #28]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	431a      	orrs	r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	019b      	lsls	r3, r3, #6
 8006014:	431a      	orrs	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	085b      	lsrs	r3, r3, #1
 800601c:	3b01      	subs	r3, #1
 800601e:	041b      	lsls	r3, r3, #16
 8006020:	431a      	orrs	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	061b      	lsls	r3, r3, #24
 8006028:	4933      	ldr	r1, [pc, #204]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 800602a:	4313      	orrs	r3, r2
 800602c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800602e:	4b33      	ldr	r3, [pc, #204]	; (80060fc <HAL_RCC_OscConfig+0x4dc>)
 8006030:	2201      	movs	r2, #1
 8006032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006034:	f7fd fc72 	bl	800391c <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800603c:	f7fd fc6e 	bl	800391c <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b02      	cmp	r3, #2
 8006048:	d901      	bls.n	800604e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e04d      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800604e:	4b2a      	ldr	r3, [pc, #168]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0f0      	beq.n	800603c <HAL_RCC_OscConfig+0x41c>
 800605a:	e045      	b.n	80060e8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800605c:	4b27      	ldr	r3, [pc, #156]	; (80060fc <HAL_RCC_OscConfig+0x4dc>)
 800605e:	2200      	movs	r2, #0
 8006060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006062:	f7fd fc5b 	bl	800391c <HAL_GetTick>
 8006066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006068:	e008      	b.n	800607c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800606a:	f7fd fc57 	bl	800391c <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d901      	bls.n	800607c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e036      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800607c:	4b1e      	ldr	r3, [pc, #120]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d1f0      	bne.n	800606a <HAL_RCC_OscConfig+0x44a>
 8006088:	e02e      	b.n	80060e8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e029      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006096:	4b18      	ldr	r3, [pc, #96]	; (80060f8 <HAL_RCC_OscConfig+0x4d8>)
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	69db      	ldr	r3, [r3, #28]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d11c      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d115      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060b8:	68fa      	ldr	r2, [r7, #12]
 80060ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80060be:	4013      	ands	r3, r2
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d10d      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d106      	bne.n	80060e4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d001      	beq.n	80060e8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e000      	b.n	80060ea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3718      	adds	r7, #24
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	40007000 	.word	0x40007000
 80060f8:	40023800 	.word	0x40023800
 80060fc:	42470060 	.word	0x42470060

08006100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0cc      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006114:	4b68      	ldr	r3, [pc, #416]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 030f 	and.w	r3, r3, #15
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	429a      	cmp	r2, r3
 8006120:	d90c      	bls.n	800613c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006122:	4b65      	ldr	r3, [pc, #404]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800612a:	4b63      	ldr	r3, [pc, #396]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	683a      	ldr	r2, [r7, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d001      	beq.n	800613c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e0b8      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0302 	and.w	r3, r3, #2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d020      	beq.n	800618a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0304 	and.w	r3, r3, #4
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006154:	4b59      	ldr	r3, [pc, #356]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4a58      	ldr	r2, [pc, #352]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 800615a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800615e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0308 	and.w	r3, r3, #8
 8006168:	2b00      	cmp	r3, #0
 800616a:	d005      	beq.n	8006178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800616c:	4b53      	ldr	r3, [pc, #332]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	4a52      	ldr	r2, [pc, #328]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006178:	4b50      	ldr	r3, [pc, #320]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 800617a:	689b      	ldr	r3, [r3, #8]
 800617c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	494d      	ldr	r1, [pc, #308]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006186:	4313      	orrs	r3, r2
 8006188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0301 	and.w	r3, r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	d044      	beq.n	8006220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d107      	bne.n	80061ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619e:	4b47      	ldr	r3, [pc, #284]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d119      	bne.n	80061de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e07f      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d003      	beq.n	80061be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80061ba:	2b03      	cmp	r3, #3
 80061bc:	d107      	bne.n	80061ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061be:	4b3f      	ldr	r3, [pc, #252]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e06f      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ce:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d101      	bne.n	80061de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e067      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061de:	4b37      	ldr	r3, [pc, #220]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f023 0203 	bic.w	r2, r3, #3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	4934      	ldr	r1, [pc, #208]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061f0:	f7fd fb94 	bl	800391c <HAL_GetTick>
 80061f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061f6:	e00a      	b.n	800620e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061f8:	f7fd fb90 	bl	800391c <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	f241 3288 	movw	r2, #5000	; 0x1388
 8006206:	4293      	cmp	r3, r2
 8006208:	d901      	bls.n	800620e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e04f      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800620e:	4b2b      	ldr	r3, [pc, #172]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	f003 020c 	and.w	r2, r3, #12
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	429a      	cmp	r2, r3
 800621e:	d1eb      	bne.n	80061f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006220:	4b25      	ldr	r3, [pc, #148]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	683a      	ldr	r2, [r7, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d20c      	bcs.n	8006248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622e:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	b2d2      	uxtb	r2, r2
 8006234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006236:	4b20      	ldr	r3, [pc, #128]	; (80062b8 <HAL_RCC_ClockConfig+0x1b8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 030f 	and.w	r3, r3, #15
 800623e:	683a      	ldr	r2, [r7, #0]
 8006240:	429a      	cmp	r2, r3
 8006242:	d001      	beq.n	8006248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e032      	b.n	80062ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006254:	4b19      	ldr	r3, [pc, #100]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4916      	ldr	r1, [pc, #88]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	4313      	orrs	r3, r2
 8006264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006272:	4b12      	ldr	r3, [pc, #72]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	490e      	ldr	r1, [pc, #56]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 8006282:	4313      	orrs	r3, r2
 8006284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006286:	f000 f821 	bl	80062cc <HAL_RCC_GetSysClockFreq>
 800628a:	4601      	mov	r1, r0
 800628c:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <HAL_RCC_ClockConfig+0x1bc>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	091b      	lsrs	r3, r3, #4
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	4a0a      	ldr	r2, [pc, #40]	; (80062c0 <HAL_RCC_ClockConfig+0x1c0>)
 8006298:	5cd3      	ldrb	r3, [r2, r3]
 800629a:	fa21 f303 	lsr.w	r3, r1, r3
 800629e:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <HAL_RCC_ClockConfig+0x1c4>)
 80062a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80062a2:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <HAL_RCC_ClockConfig+0x1c8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fd faf4 	bl	8003894 <HAL_InitTick>

  return HAL_OK;
 80062ac:	2300      	movs	r3, #0
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40023c00 	.word	0x40023c00
 80062bc:	40023800 	.word	0x40023800
 80062c0:	08014ef8 	.word	0x08014ef8
 80062c4:	20000014 	.word	0x20000014
 80062c8:	20000018 	.word	0x20000018

080062cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80062d2:	2300      	movs	r3, #0
 80062d4:	607b      	str	r3, [r7, #4]
 80062d6:	2300      	movs	r3, #0
 80062d8:	60fb      	str	r3, [r7, #12]
 80062da:	2300      	movs	r3, #0
 80062dc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062e2:	4b50      	ldr	r3, [pc, #320]	; (8006424 <HAL_RCC_GetSysClockFreq+0x158>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d007      	beq.n	80062fe <HAL_RCC_GetSysClockFreq+0x32>
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d008      	beq.n	8006304 <HAL_RCC_GetSysClockFreq+0x38>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f040 808d 	bne.w	8006412 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062f8:	4b4b      	ldr	r3, [pc, #300]	; (8006428 <HAL_RCC_GetSysClockFreq+0x15c>)
 80062fa:	60bb      	str	r3, [r7, #8]
       break;
 80062fc:	e08c      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062fe:	4b4b      	ldr	r3, [pc, #300]	; (800642c <HAL_RCC_GetSysClockFreq+0x160>)
 8006300:	60bb      	str	r3, [r7, #8]
      break;
 8006302:	e089      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006304:	4b47      	ldr	r3, [pc, #284]	; (8006424 <HAL_RCC_GetSysClockFreq+0x158>)
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800630c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800630e:	4b45      	ldr	r3, [pc, #276]	; (8006424 <HAL_RCC_GetSysClockFreq+0x158>)
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d023      	beq.n	8006362 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800631a:	4b42      	ldr	r3, [pc, #264]	; (8006424 <HAL_RCC_GetSysClockFreq+0x158>)
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	099b      	lsrs	r3, r3, #6
 8006320:	f04f 0400 	mov.w	r4, #0
 8006324:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006328:	f04f 0200 	mov.w	r2, #0
 800632c:	ea03 0501 	and.w	r5, r3, r1
 8006330:	ea04 0602 	and.w	r6, r4, r2
 8006334:	4a3d      	ldr	r2, [pc, #244]	; (800642c <HAL_RCC_GetSysClockFreq+0x160>)
 8006336:	fb02 f106 	mul.w	r1, r2, r6
 800633a:	2200      	movs	r2, #0
 800633c:	fb02 f205 	mul.w	r2, r2, r5
 8006340:	440a      	add	r2, r1
 8006342:	493a      	ldr	r1, [pc, #232]	; (800642c <HAL_RCC_GetSysClockFreq+0x160>)
 8006344:	fba5 0101 	umull	r0, r1, r5, r1
 8006348:	1853      	adds	r3, r2, r1
 800634a:	4619      	mov	r1, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f04f 0400 	mov.w	r4, #0
 8006352:	461a      	mov	r2, r3
 8006354:	4623      	mov	r3, r4
 8006356:	f7fa fc97 	bl	8000c88 <__aeabi_uldivmod>
 800635a:	4603      	mov	r3, r0
 800635c:	460c      	mov	r4, r1
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e049      	b.n	80063f6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006362:	4b30      	ldr	r3, [pc, #192]	; (8006424 <HAL_RCC_GetSysClockFreq+0x158>)
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	099b      	lsrs	r3, r3, #6
 8006368:	f04f 0400 	mov.w	r4, #0
 800636c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	ea03 0501 	and.w	r5, r3, r1
 8006378:	ea04 0602 	and.w	r6, r4, r2
 800637c:	4629      	mov	r1, r5
 800637e:	4632      	mov	r2, r6
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	f04f 0400 	mov.w	r4, #0
 8006388:	0154      	lsls	r4, r2, #5
 800638a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800638e:	014b      	lsls	r3, r1, #5
 8006390:	4619      	mov	r1, r3
 8006392:	4622      	mov	r2, r4
 8006394:	1b49      	subs	r1, r1, r5
 8006396:	eb62 0206 	sbc.w	r2, r2, r6
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	f04f 0400 	mov.w	r4, #0
 80063a2:	0194      	lsls	r4, r2, #6
 80063a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80063a8:	018b      	lsls	r3, r1, #6
 80063aa:	1a5b      	subs	r3, r3, r1
 80063ac:	eb64 0402 	sbc.w	r4, r4, r2
 80063b0:	f04f 0100 	mov.w	r1, #0
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	00e2      	lsls	r2, r4, #3
 80063ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80063be:	00d9      	lsls	r1, r3, #3
 80063c0:	460b      	mov	r3, r1
 80063c2:	4614      	mov	r4, r2
 80063c4:	195b      	adds	r3, r3, r5
 80063c6:	eb44 0406 	adc.w	r4, r4, r6
 80063ca:	f04f 0100 	mov.w	r1, #0
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	02a2      	lsls	r2, r4, #10
 80063d4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80063d8:	0299      	lsls	r1, r3, #10
 80063da:	460b      	mov	r3, r1
 80063dc:	4614      	mov	r4, r2
 80063de:	4618      	mov	r0, r3
 80063e0:	4621      	mov	r1, r4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f04f 0400 	mov.w	r4, #0
 80063e8:	461a      	mov	r2, r3
 80063ea:	4623      	mov	r3, r4
 80063ec:	f7fa fc4c 	bl	8000c88 <__aeabi_uldivmod>
 80063f0:	4603      	mov	r3, r0
 80063f2:	460c      	mov	r4, r1
 80063f4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <HAL_RCC_GetSysClockFreq+0x158>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	0c1b      	lsrs	r3, r3, #16
 80063fc:	f003 0303 	and.w	r3, r3, #3
 8006400:	3301      	adds	r3, #1
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	fbb2 f3f3 	udiv	r3, r2, r3
 800640e:	60bb      	str	r3, [r7, #8]
      break;
 8006410:	e002      	b.n	8006418 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <HAL_RCC_GetSysClockFreq+0x15c>)
 8006414:	60bb      	str	r3, [r7, #8]
      break;
 8006416:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006418:	68bb      	ldr	r3, [r7, #8]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006422:	bf00      	nop
 8006424:	40023800 	.word	0x40023800
 8006428:	00f42400 	.word	0x00f42400
 800642c:	00b71b00 	.word	0x00b71b00

08006430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006434:	4b03      	ldr	r3, [pc, #12]	; (8006444 <HAL_RCC_GetHCLKFreq+0x14>)
 8006436:	681b      	ldr	r3, [r3, #0]
}
 8006438:	4618      	mov	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	20000014 	.word	0x20000014

08006448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800644c:	f7ff fff0 	bl	8006430 <HAL_RCC_GetHCLKFreq>
 8006450:	4601      	mov	r1, r0
 8006452:	4b05      	ldr	r3, [pc, #20]	; (8006468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	0a9b      	lsrs	r3, r3, #10
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	4a03      	ldr	r2, [pc, #12]	; (800646c <HAL_RCC_GetPCLK1Freq+0x24>)
 800645e:	5cd3      	ldrb	r3, [r2, r3]
 8006460:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006464:	4618      	mov	r0, r3
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40023800 	.word	0x40023800
 800646c:	08014f08 	.word	0x08014f08

08006470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006474:	f7ff ffdc 	bl	8006430 <HAL_RCC_GetHCLKFreq>
 8006478:	4601      	mov	r1, r0
 800647a:	4b05      	ldr	r3, [pc, #20]	; (8006490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	0b5b      	lsrs	r3, r3, #13
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	4a03      	ldr	r2, [pc, #12]	; (8006494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006486:	5cd3      	ldrb	r3, [r2, r3]
 8006488:	fa21 f303 	lsr.w	r3, r1, r3
}
 800648c:	4618      	mov	r0, r3
 800648e:	bd80      	pop	{r7, pc}
 8006490:	40023800 	.word	0x40023800
 8006494:	08014f08 	.word	0x08014f08

08006498 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d035      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064c0:	4b62      	ldr	r3, [pc, #392]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064c6:	f7fd fa29 	bl	800391c <HAL_GetTick>
 80064ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064cc:	e008      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80064ce:	f7fd fa25 	bl	800391c <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d901      	bls.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064dc:	2303      	movs	r3, #3
 80064de:	e0b0      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064e0:	4b5b      	ldr	r3, [pc, #364]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f0      	bne.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	019a      	lsls	r2, r3, #6
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	071b      	lsls	r3, r3, #28
 80064f8:	4955      	ldr	r1, [pc, #340]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006500:	4b52      	ldr	r3, [pc, #328]	; (800664c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006502:	2201      	movs	r2, #1
 8006504:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006506:	f7fd fa09 	bl	800391c <HAL_GetTick>
 800650a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800650c:	e008      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800650e:	f7fd fa05 	bl	800391c <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d901      	bls.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e090      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006520:	4b4b      	ldr	r3, [pc, #300]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0f0      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0302 	and.w	r3, r3, #2
 8006534:	2b00      	cmp	r3, #0
 8006536:	f000 8083 	beq.w	8006640 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	4b44      	ldr	r3, [pc, #272]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	4a43      	ldr	r2, [pc, #268]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006548:	6413      	str	r3, [r2, #64]	; 0x40
 800654a:	4b41      	ldr	r3, [pc, #260]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006556:	4b3f      	ldr	r3, [pc, #252]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3e      	ldr	r2, [pc, #248]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800655c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006560:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006562:	f7fd f9db 	bl	800391c <HAL_GetTick>
 8006566:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006568:	e008      	b.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800656a:	f7fd f9d7 	bl	800391c <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e062      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800657c:	4b35      	ldr	r3, [pc, #212]	; (8006654 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0f0      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006588:	4b31      	ldr	r3, [pc, #196]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800658a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006590:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d02f      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d028      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065a6:	4b2a      	ldr	r3, [pc, #168]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065b0:	4b29      	ldr	r3, [pc, #164]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065b2:	2201      	movs	r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065b6:	4b28      	ldr	r3, [pc, #160]	; (8006658 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80065bc:	4a24      	ldr	r2, [pc, #144]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80065c2:	4b23      	ldr	r3, [pc, #140]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d114      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80065ce:	f7fd f9a5 	bl	800391c <HAL_GetTick>
 80065d2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065d4:	e00a      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065d6:	f7fd f9a1 	bl	800391c <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d901      	bls.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e02a      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065ec:	4b18      	ldr	r3, [pc, #96]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80065ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0ee      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006600:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006604:	d10d      	bne.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006606:	4b12      	ldr	r3, [pc, #72]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68db      	ldr	r3, [r3, #12]
 8006612:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800661a:	490d      	ldr	r1, [pc, #52]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800661c:	4313      	orrs	r3, r2
 800661e:	608b      	str	r3, [r1, #8]
 8006620:	e005      	b.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006622:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	4a0a      	ldr	r2, [pc, #40]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006628:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800662c:	6093      	str	r3, [r2, #8]
 800662e:	4b08      	ldr	r3, [pc, #32]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006630:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800663a:	4905      	ldr	r1, [pc, #20]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800663c:	4313      	orrs	r3, r2
 800663e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3718      	adds	r7, #24
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	42470068 	.word	0x42470068
 8006650:	40023800 	.word	0x40023800
 8006654:	40007000 	.word	0x40007000
 8006658:	42470e40 	.word	0x42470e40

0800665c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d101      	bne.n	800666e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e083      	b.n	8006776 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	7f5b      	ldrb	r3, [r3, #29]
 8006672:	b2db      	uxtb	r3, r3
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fc fdd0 	bl	8003224 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	22ca      	movs	r2, #202	; 0xca
 8006690:	625a      	str	r2, [r3, #36]	; 0x24
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2253      	movs	r2, #83	; 0x53
 8006698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 faa8 	bl	8006bf0 <RTC_EnterInitMode>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	22ff      	movs	r2, #255	; 0xff
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2204      	movs	r2, #4
 80066b2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e05e      	b.n	8006776 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	6812      	ldr	r2, [r2, #0]
 80066c2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80066c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066ca:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6899      	ldr	r1, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	431a      	orrs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	431a      	orrs	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68d2      	ldr	r2, [r2, #12]
 80066f2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	6919      	ldr	r1, [r3, #16]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	041a      	lsls	r2, r3, #16
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68da      	ldr	r2, [r3, #12]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006716:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 0320 	and.w	r3, r3, #32
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10e      	bne.n	8006744 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fa3a 	bl	8006ba0 <HAL_RTC_WaitForSynchro>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d008      	beq.n	8006744 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	22ff      	movs	r2, #255	; 0xff
 8006738:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2204      	movs	r2, #4
 800673e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e018      	b.n	8006776 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006752:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	22ff      	movs	r2, #255	; 0xff
 800676c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2201      	movs	r2, #1
 8006772:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006774:	2300      	movs	r3, #0
  }
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800677e:	b590      	push	{r4, r7, lr}
 8006780:	b087      	sub	sp, #28
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	60b9      	str	r1, [r7, #8]
 8006788:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	7f1b      	ldrb	r3, [r3, #28]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d101      	bne.n	800679a <HAL_RTC_SetTime+0x1c>
 8006796:	2302      	movs	r3, #2
 8006798:	e0aa      	b.n	80068f0 <HAL_RTC_SetTime+0x172>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2201      	movs	r2, #1
 800679e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2202      	movs	r2, #2
 80067a4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d126      	bne.n	80067fa <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d102      	bne.n	80067c0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2200      	movs	r2, #0
 80067be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 fa3f 	bl	8006c48 <RTC_ByteToBcd2>
 80067ca:	4603      	mov	r3, r0
 80067cc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	785b      	ldrb	r3, [r3, #1]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fa38 	bl	8006c48 <RTC_ByteToBcd2>
 80067d8:	4603      	mov	r3, r0
 80067da:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80067dc:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	789b      	ldrb	r3, [r3, #2]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 fa30 	bl	8006c48 <RTC_ByteToBcd2>
 80067e8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80067ea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	78db      	ldrb	r3, [r3, #3]
 80067f2:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	e018      	b.n	800682c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d102      	bne.n	800680e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2200      	movs	r2, #0
 800680c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	785b      	ldrb	r3, [r3, #1]
 8006818:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800681a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006820:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	78db      	ldrb	r3, [r3, #3]
 8006826:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	22ca      	movs	r2, #202	; 0xca
 8006832:	625a      	str	r2, [r3, #36]	; 0x24
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2253      	movs	r2, #83	; 0x53
 800683a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f9d7 	bl	8006bf0 <RTC_EnterInitMode>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00b      	beq.n	8006860 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	22ff      	movs	r2, #255	; 0xff
 800684e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2204      	movs	r2, #4
 8006854:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e047      	b.n	80068f0 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800686a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800686e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800687e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6899      	ldr	r1, [r3, #8]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	431a      	orrs	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	430a      	orrs	r2, r1
 8006896:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	68da      	ldr	r2, [r3, #12]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f003 0320 	and.w	r3, r3, #32
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d111      	bne.n	80068da <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f972 	bl	8006ba0 <HAL_RTC_WaitForSynchro>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	22ff      	movs	r2, #255	; 0xff
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2204      	movs	r2, #4
 80068ce:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2200      	movs	r2, #0
 80068d4:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e00a      	b.n	80068f0 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	22ff      	movs	r2, #255	; 0xff
 80068e0:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2201      	movs	r2, #1
 80068e6:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80068ee:	2300      	movs	r3, #0
  }
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	371c      	adds	r7, #28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd90      	pop	{r4, r7, pc}

080068f8 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b086      	sub	sp, #24
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800692a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800692e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	0c1b      	lsrs	r3, r3, #16
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800693a:	b2da      	uxtb	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	0a1b      	lsrs	r3, r3, #8
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800694a:	b2da      	uxtb	r2, r3
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006958:	b2da      	uxtb	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	0c1b      	lsrs	r3, r3, #16
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006968:	b2da      	uxtb	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d11a      	bne.n	80069aa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	4618      	mov	r0, r3
 800697a:	f000 f983 	bl	8006c84 <RTC_Bcd2ToByte>
 800697e:	4603      	mov	r3, r0
 8006980:	461a      	mov	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	785b      	ldrb	r3, [r3, #1]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 f97a 	bl	8006c84 <RTC_Bcd2ToByte>
 8006990:	4603      	mov	r3, r0
 8006992:	461a      	mov	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	789b      	ldrb	r3, [r3, #2]
 800699c:	4618      	mov	r0, r3
 800699e:	f000 f971 	bl	8006c84 <RTC_Bcd2ToByte>
 80069a2:	4603      	mov	r3, r0
 80069a4:	461a      	mov	r2, r3
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80069aa:	2300      	movs	r3, #0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069b4:	b590      	push	{r4, r7, lr}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	7f1b      	ldrb	r3, [r3, #28]
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_RTC_SetDate+0x1c>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e094      	b.n	8006afa <HAL_RTC_SetDate+0x146>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2201      	movs	r2, #1
 80069d4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2202      	movs	r2, #2
 80069da:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10e      	bne.n	8006a00 <HAL_RTC_SetDate+0x4c>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	f003 0310 	and.w	r3, r3, #16
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	f023 0310 	bic.w	r3, r3, #16
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	330a      	adds	r3, #10
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d11c      	bne.n	8006a40 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	78db      	ldrb	r3, [r3, #3]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f91c 	bl	8006c48 <RTC_ByteToBcd2>
 8006a10:	4603      	mov	r3, r0
 8006a12:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 f915 	bl	8006c48 <RTC_ByteToBcd2>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006a22:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	789b      	ldrb	r3, [r3, #2]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f90d 	bl	8006c48 <RTC_ByteToBcd2>
 8006a2e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006a30:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e00e      	b.n	8006a5e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	78db      	ldrb	r3, [r3, #3]
 8006a44:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006a4c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006a52:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	22ca      	movs	r2, #202	; 0xca
 8006a64:	625a      	str	r2, [r3, #36]	; 0x24
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2253      	movs	r2, #83	; 0x53
 8006a6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f8be 	bl	8006bf0 <RTC_EnterInitMode>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00b      	beq.n	8006a92 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	22ff      	movs	r2, #255	; 0xff
 8006a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2204      	movs	r2, #4
 8006a86:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e033      	b.n	8006afa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006a9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006aa0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ab0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d111      	bne.n	8006ae4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f86d 	bl	8006ba0 <HAL_RTC_WaitForSynchro>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d00b      	beq.n	8006ae4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	22ff      	movs	r2, #255	; 0xff
 8006ad2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e00a      	b.n	8006afa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	22ff      	movs	r2, #255	; 0xff
 8006aea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006af8:	2300      	movs	r3, #0
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd90      	pop	{r4, r7, pc}

08006b02 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b086      	sub	sp, #24
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	60f8      	str	r0, [r7, #12]
 8006b0a:	60b9      	str	r1, [r7, #8]
 8006b0c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006b1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006b20:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	0c1b      	lsrs	r3, r3, #16
 8006b26:	b2da      	uxtb	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	0a1b      	lsrs	r3, r3, #8
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	b2da      	uxtb	r2, r3
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	0b5b      	lsrs	r3, r3, #13
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f003 0307 	and.w	r3, r3, #7
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d11a      	bne.n	8006b96 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	78db      	ldrb	r3, [r3, #3]
 8006b64:	4618      	mov	r0, r3
 8006b66:	f000 f88d 	bl	8006c84 <RTC_Bcd2ToByte>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	785b      	ldrb	r3, [r3, #1]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f884 	bl	8006c84 <RTC_Bcd2ToByte>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	461a      	mov	r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	789b      	ldrb	r3, [r3, #2]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f000 f87b 	bl	8006c84 <RTC_Bcd2ToByte>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	461a      	mov	r2, r3
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bbc:	f7fc feae 	bl	800391c <HAL_GetTick>
 8006bc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006bc2:	e009      	b.n	8006bd8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006bc4:	f7fc feaa 	bl	800391c <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bd2:	d901      	bls.n	8006bd8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e007      	b.n	8006be8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	f003 0320 	and.w	r3, r3, #32
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d0ee      	beq.n	8006bc4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3710      	adds	r7, #16
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d119      	bne.n	8006c3e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c12:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c14:	f7fc fe82 	bl	800391c <HAL_GetTick>
 8006c18:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c1a:	e009      	b.n	8006c30 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006c1c:	f7fc fe7e 	bl	800391c <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c2a:	d901      	bls.n	8006c30 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	e007      	b.n	8006c40 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d0ee      	beq.n	8006c1c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3710      	adds	r7, #16
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006c56:	e005      	b.n	8006c64 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	3b0a      	subs	r3, #10
 8006c62:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006c64:	79fb      	ldrb	r3, [r7, #7]
 8006c66:	2b09      	cmp	r3, #9
 8006c68:	d8f6      	bhi.n	8006c58 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	79fb      	ldrb	r3, [r7, #7]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	b2db      	uxtb	r3, r3
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b085      	sub	sp, #20
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	091b      	lsrs	r3, r3, #4
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	461a      	mov	r2, r3
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	009b      	lsls	r3, r3, #2
 8006c9e:	4413      	add	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006ca4:	79fb      	ldrb	r3, [r7, #7]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	4413      	add	r3, r2
 8006cb2:	b2db      	uxtb	r3, r3
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e022      	b.n	8006d18 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d105      	bne.n	8006cea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7fc fab3 	bl	8003250 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2203      	movs	r2, #3
 8006cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f814 	bl	8006d20 <HAL_SD_InitCard>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e00a      	b.n	8006d18 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006d20:	b5b0      	push	{r4, r5, r7, lr}
 8006d22:	b08e      	sub	sp, #56	; 0x38
 8006d24:	af04      	add	r7, sp, #16
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006d34:	2300      	movs	r3, #0
 8006d36:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006d3c:	2376      	movs	r3, #118	; 0x76
 8006d3e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681d      	ldr	r5, [r3, #0]
 8006d44:	466c      	mov	r4, sp
 8006d46:	f107 0314 	add.w	r3, r7, #20
 8006d4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d52:	f107 0308 	add.w	r3, r7, #8
 8006d56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f003 f99b 	bl	800a094 <SDIO_Init>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e031      	b.n	8006dd4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006d70:	4b1a      	ldr	r3, [pc, #104]	; (8006ddc <HAL_SD_InitCard+0xbc>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f003 f9d3 	bl	800a126 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006d80:	4b16      	ldr	r3, [pc, #88]	; (8006ddc <HAL_SD_InitCard+0xbc>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fffa 	bl	8007d80 <SD_PowerON>
 8006d8c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00b      	beq.n	8006dac <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e013      	b.n	8006dd4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 ff19 	bl	8007be4 <SD_InitCard>
 8006db2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d00b      	beq.n	8006dd2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3728      	adds	r7, #40	; 0x28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bdb0      	pop	{r4, r5, r7, pc}
 8006ddc:	422580a0 	.word	0x422580a0

08006de0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b08c      	sub	sp, #48	; 0x30
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
 8006dec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d107      	bne.n	8006e08 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e0c9      	b.n	8006f9c <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	f040 80c2 	bne.w	8006f9a <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	441a      	add	r2, r3
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d907      	bls.n	8006e3a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	e0b0      	b.n	8006f9c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2203      	movs	r2, #3
 8006e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8006e58:	f043 0302 	orr.w	r3, r3, #2
 8006e5c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e62:	4a50      	ldr	r2, [pc, #320]	; (8006fa4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8006e64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	4a4f      	ldr	r2, [pc, #316]	; (8006fa8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8006e6c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	2200      	movs	r2, #0
 8006e74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	3380      	adds	r3, #128	; 0x80
 8006e80:	4619      	mov	r1, r3
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	025b      	lsls	r3, r3, #9
 8006e88:	089b      	lsrs	r3, r3, #2
 8006e8a:	f7fc ff35 	bl	8003cf8 <HAL_DMA_Start_IT>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d017      	beq.n	8006ec4 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8006ea2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a40      	ldr	r2, [pc, #256]	; (8006fac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e06b      	b.n	8006f9c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8006ec4:	4b3a      	ldr	r3, [pc, #232]	; (8006fb0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d002      	beq.n	8006ed8 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	025b      	lsls	r3, r3, #9
 8006ed6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f003 f9b3 	bl	800a24c <SDMMC_CmdBlockLength>
 8006ee6:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8006ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d00f      	beq.n	8006f0e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a2e      	ldr	r2, [pc, #184]	; (8006fac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efc:	431a      	orrs	r2, r3
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e046      	b.n	8006f9c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f12:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	025b      	lsls	r3, r3, #9
 8006f18:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006f1a:	2390      	movs	r3, #144	; 0x90
 8006f1c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006f26:	2301      	movs	r3, #1
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f107 0210 	add.w	r2, r7, #16
 8006f32:	4611      	mov	r1, r2
 8006f34:	4618      	mov	r0, r3
 8006f36:	f003 f95d 	bl	800a1f4 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d90a      	bls.n	8006f56 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2282      	movs	r2, #130	; 0x82
 8006f44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f003 f9c1 	bl	800a2d4 <SDMMC_CmdReadMultiBlock>
 8006f52:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006f54:	e009      	b.n	8006f6a <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2281      	movs	r2, #129	; 0x81
 8006f5a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f62:	4618      	mov	r0, r3
 8006f64:	f003 f994 	bl	800a290 <SDMMC_CmdReadSingleBlock>
 8006f68:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d012      	beq.n	8006f96 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a0d      	ldr	r2, [pc, #52]	; (8006fac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e002      	b.n	8006f9c <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	e000      	b.n	8006f9c <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8006f9a:	2302      	movs	r3, #2
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3730      	adds	r7, #48	; 0x30
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	080079f3 	.word	0x080079f3
 8006fa8:	08007a65 	.word	0x08007a65
 8006fac:	004005ff 	.word	0x004005ff
 8006fb0:	4225858c 	.word	0x4225858c

08006fb4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08c      	sub	sp, #48	; 0x30
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d107      	bne.n	8006fdc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0ce      	b.n	800717a <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	f040 80c7 	bne.w	8007178 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	441a      	add	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d907      	bls.n	800700e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007002:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e0b5      	b.n	800717a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2203      	movs	r2, #3
 8007012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2200      	movs	r2, #0
 800701c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	6812      	ldr	r2, [r2, #0]
 8007028:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800702c:	f043 0302 	orr.w	r3, r3, #2
 8007030:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007036:	4a53      	ldr	r2, [pc, #332]	; (8007184 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8007038:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703e:	4a52      	ldr	r2, [pc, #328]	; (8007188 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8007040:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007046:	2200      	movs	r2, #0
 8007048:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704e:	2b01      	cmp	r3, #1
 8007050:	d002      	beq.n	8007058 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8007052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007054:	025b      	lsls	r3, r3, #9
 8007056:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007060:	4618      	mov	r0, r3
 8007062:	f003 f8f3 	bl	800a24c <SDMMC_CmdBlockLength>
 8007066:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00f      	beq.n	800708e <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a46      	ldr	r2, [pc, #280]	; (800718c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	431a      	orrs	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e075      	b.n	800717a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d90a      	bls.n	80070aa <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	22a0      	movs	r2, #160	; 0xa0
 8007098:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070a0:	4618      	mov	r0, r3
 80070a2:	f003 f95b 	bl	800a35c <SDMMC_CmdWriteMultiBlock>
 80070a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80070a8:	e009      	b.n	80070be <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2290      	movs	r2, #144	; 0x90
 80070ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070b6:	4618      	mov	r0, r3
 80070b8:	f003 f92e 	bl	800a318 <SDMMC_CmdWriteSingleBlock>
 80070bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80070be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d012      	beq.n	80070ea <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a30      	ldr	r2, [pc, #192]	; (800718c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80070ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d2:	431a      	orrs	r2, r3
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e047      	b.n	800717a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80070ea:	4b29      	ldr	r3, [pc, #164]	; (8007190 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80070f4:	68b9      	ldr	r1, [r7, #8]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	3380      	adds	r3, #128	; 0x80
 80070fc:	461a      	mov	r2, r3
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	025b      	lsls	r3, r3, #9
 8007102:	089b      	lsrs	r3, r3, #2
 8007104:	f7fc fdf8 	bl	8003cf8 <HAL_DMA_Start_IT>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d01c      	beq.n	8007148 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800711c:	f023 0302 	bic.w	r3, r3, #2
 8007120:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a19      	ldr	r2, [pc, #100]	; (800718c <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8007128:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2200      	movs	r2, #0
 8007142:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	e018      	b.n	800717a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007148:	f04f 33ff 	mov.w	r3, #4294967295
 800714c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	025b      	lsls	r3, r3, #9
 8007152:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007154:	2390      	movs	r3, #144	; 0x90
 8007156:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8007158:	2300      	movs	r3, #0
 800715a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800715c:	2300      	movs	r3, #0
 800715e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007160:	2301      	movs	r3, #1
 8007162:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f107 0210 	add.w	r2, r7, #16
 800716c:	4611      	mov	r1, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f003 f840 	bl	800a1f4 <SDIO_ConfigData>

      return HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	e000      	b.n	800717a <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8007178:	2302      	movs	r3, #2
  }
}
 800717a:	4618      	mov	r0, r3
 800717c:	3730      	adds	r7, #48	; 0x30
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	080079c9 	.word	0x080079c9
 8007188:	08007a65 	.word	0x08007a65
 800718c:	004005ff 	.word	0x004005ff
 8007190:	4225858c 	.word	0x4225858c

08007194 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d008      	beq.n	80071c2 <HAL_SD_IRQHandler+0x2e>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f003 0308 	and.w	r3, r3, #8
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fff6 	bl	80081ac <SD_Read_IT>
 80071c0:	e165      	b.n	800748e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f000 808f 	beq.w	80072f0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071da:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6812      	ldr	r2, [r2, #0]
 80071e6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80071ea:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80071ee:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0201 	bic.w	r2, r2, #1
 80071fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d039      	beq.n	800727e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <HAL_SD_IRQHandler+0x8a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f003 0320 	and.w	r3, r3, #32
 800721a:	2b00      	cmp	r3, #0
 800721c:	d011      	beq.n	8007242 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4618      	mov	r0, r3
 8007224:	f003 f8bc 	bl	800a3a0 <SDMMC_CmdStopTransfer>
 8007228:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d008      	beq.n	8007242 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	431a      	orrs	r2, r3
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 f943 	bl	80074c8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f240 523a 	movw	r2, #1338	; 0x53a
 800724a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <HAL_SD_IRQHandler+0xda>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f920 	bl	80074b4 <HAL_SD_RxCpltCallback>
 8007274:	e10b      	b.n	800748e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f912 	bl	80074a0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800727c:	e107      	b.n	800748e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 8102 	beq.w	800748e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d011      	beq.n	80072b8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4618      	mov	r0, r3
 800729a:	f003 f881 	bl	800a3a0 <SDMMC_CmdStopTransfer>
 800729e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d008      	beq.n	80072b8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f908 	bl	80074c8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0301 	and.w	r3, r3, #1
 80072be:	2b00      	cmp	r3, #0
 80072c0:	f040 80e5 	bne.w	800748e <HAL_SD_IRQHandler+0x2fa>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f040 80df 	bne.w	800748e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0208 	bic.w	r2, r2, #8
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f8d9 	bl	80074a0 <HAL_SD_TxCpltCallback>
}
 80072ee:	e0ce      	b.n	800748e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d008      	beq.n	8007310 <HAL_SD_IRQHandler+0x17c>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d003      	beq.n	8007310 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 ffa0 	bl	800824e <SD_Write_IT>
 800730e:	e0be      	b.n	800748e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007316:	f240 233a 	movw	r3, #570	; 0x23a
 800731a:	4013      	ands	r3, r2
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 80b6 	beq.w	800748e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d005      	beq.n	800733c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007334:	f043 0202 	orr.w	r2, r3, #2
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	f003 0308 	and.w	r3, r3, #8
 8007346:	2b00      	cmp	r3, #0
 8007348:	d005      	beq.n	8007356 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734e:	f043 0208 	orr.w	r2, r3, #8
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b00      	cmp	r3, #0
 8007362:	d005      	beq.n	8007370 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	f043 0220 	orr.w	r2, r3, #32
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007376:	f003 0310 	and.w	r3, r3, #16
 800737a:	2b00      	cmp	r3, #0
 800737c:	d005      	beq.n	800738a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	f043 0210 	orr.w	r2, r3, #16
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739c:	f043 0208 	orr.w	r2, r3, #8
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f240 723a 	movw	r2, #1850	; 0x73a
 80073ac:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80073bc:	f023 0302 	bic.w	r3, r3, #2
 80073c0:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4618      	mov	r0, r3
 80073c8:	f002 ffea 	bl	800a3a0 <SDMMC_CmdStopTransfer>
 80073cc:	4602      	mov	r2, r0
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	f003 0308 	and.w	r3, r3, #8
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00a      	beq.n	80073f8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f869 	bl	80074c8 <HAL_SD_ErrorCallback>
}
 80073f6:	e04a      	b.n	800748e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d045      	beq.n	800748e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	f003 0310 	and.w	r3, r3, #16
 8007408:	2b00      	cmp	r3, #0
 800740a:	d104      	bne.n	8007416 <HAL_SD_IRQHandler+0x282>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f003 0320 	and.w	r3, r3, #32
 8007412:	2b00      	cmp	r3, #0
 8007414:	d011      	beq.n	800743a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741a:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <HAL_SD_IRQHandler+0x304>)
 800741c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007422:	4618      	mov	r0, r3
 8007424:	f7fc fcc0 	bl	8003da8 <HAL_DMA_Abort_IT>
 8007428:	4603      	mov	r3, r0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d02f      	beq.n	800748e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007432:	4618      	mov	r0, r3
 8007434:	f000 fb68 	bl	8007b08 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007438:	e029      	b.n	800748e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f003 0301 	and.w	r3, r3, #1
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <HAL_SD_IRQHandler+0x2ba>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f003 0302 	and.w	r3, r3, #2
 800744a:	2b00      	cmp	r3, #0
 800744c:	d011      	beq.n	8007472 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007452:	4a12      	ldr	r2, [pc, #72]	; (800749c <HAL_SD_IRQHandler+0x308>)
 8007454:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745a:	4618      	mov	r0, r3
 800745c:	f7fc fca4 	bl	8003da8 <HAL_DMA_Abort_IT>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d013      	beq.n	800748e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fb83 	bl	8007b76 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007470:	e00d      	b.n	800748e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 f828 	bl	80074dc <HAL_SD_AbortCallback>
}
 800748c:	e7ff      	b.n	800748e <HAL_SD_IRQHandler+0x2fa>
 800748e:	bf00      	nop
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	08007b09 	.word	0x08007b09
 800749c:	08007b77 	.word	0x08007b77

080074a0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_TxCpltCallback can be implemented in the user file
   */
}
 80074a8:	bf00      	nop
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_RxCpltCallback can be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074fe:	0f9b      	lsrs	r3, r3, #30
 8007500:	b2da      	uxtb	r2, r3
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800750a:	0e9b      	lsrs	r3, r3, #26
 800750c:	b2db      	uxtb	r3, r3
 800750e:	f003 030f 	and.w	r3, r3, #15
 8007512:	b2da      	uxtb	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800751c:	0e1b      	lsrs	r3, r3, #24
 800751e:	b2db      	uxtb	r3, r3
 8007520:	f003 0303 	and.w	r3, r3, #3
 8007524:	b2da      	uxtb	r2, r3
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800752e:	0c1b      	lsrs	r3, r3, #16
 8007530:	b2da      	uxtb	r2, r3
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800753a:	0a1b      	lsrs	r3, r3, #8
 800753c:	b2da      	uxtb	r2, r3
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007546:	b2da      	uxtb	r2, r3
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007550:	0d1b      	lsrs	r3, r3, #20
 8007552:	b29a      	uxth	r2, r3
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800755c:	0c1b      	lsrs	r3, r3, #16
 800755e:	b2db      	uxtb	r3, r3
 8007560:	f003 030f 	and.w	r3, r3, #15
 8007564:	b2da      	uxtb	r2, r3
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800756e:	0bdb      	lsrs	r3, r3, #15
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	b2da      	uxtb	r2, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007580:	0b9b      	lsrs	r3, r3, #14
 8007582:	b2db      	uxtb	r3, r3
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	b2da      	uxtb	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007592:	0b5b      	lsrs	r3, r3, #13
 8007594:	b2db      	uxtb	r3, r3
 8007596:	f003 0301 	and.w	r3, r3, #1
 800759a:	b2da      	uxtb	r2, r3
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075a4:	0b1b      	lsrs	r3, r3, #12
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	f003 0301 	and.w	r3, r3, #1
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	2200      	movs	r2, #0
 80075b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d163      	bne.n	8007688 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075c4:	009a      	lsls	r2, r3, #2
 80075c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80075ca:	4013      	ands	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80075d0:	0f92      	lsrs	r2, r2, #30
 80075d2:	431a      	orrs	r2, r3
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075dc:	0edb      	lsrs	r3, r3, #27
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	f003 0307 	and.w	r3, r3, #7
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ee:	0e1b      	lsrs	r3, r3, #24
 80075f0:	b2db      	uxtb	r3, r3
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007600:	0d5b      	lsrs	r3, r3, #21
 8007602:	b2db      	uxtb	r3, r3
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	b2da      	uxtb	r2, r3
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007612:	0c9b      	lsrs	r3, r3, #18
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f003 0307 	and.w	r3, r3, #7
 800761a:	b2da      	uxtb	r2, r3
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007624:	0bdb      	lsrs	r3, r3, #15
 8007626:	b2db      	uxtb	r3, r3
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	b2da      	uxtb	r2, r3
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	7e1b      	ldrb	r3, [r3, #24]
 8007640:	b2db      	uxtb	r3, r3
 8007642:	f003 0307 	and.w	r3, r3, #7
 8007646:	3302      	adds	r3, #2
 8007648:	2201      	movs	r2, #1
 800764a:	fa02 f303 	lsl.w	r3, r2, r3
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007652:	fb02 f203 	mul.w	r2, r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	7a1b      	ldrb	r3, [r3, #8]
 800765e:	b2db      	uxtb	r3, r3
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	2201      	movs	r2, #1
 8007666:	409a      	lsls	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007670:	687a      	ldr	r2, [r7, #4]
 8007672:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007674:	0a52      	lsrs	r2, r2, #9
 8007676:	fb02 f203 	mul.w	r2, r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007684:	661a      	str	r2, [r3, #96]	; 0x60
 8007686:	e031      	b.n	80076ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800768c:	2b01      	cmp	r3, #1
 800768e:	d11d      	bne.n	80076cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007694:	041b      	lsls	r3, r3, #16
 8007696:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800769e:	0c1b      	lsrs	r3, r3, #16
 80076a0:	431a      	orrs	r2, r3
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	3301      	adds	r3, #1
 80076ac:	029a      	lsls	r2, r3, #10
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	661a      	str	r2, [r3, #96]	; 0x60
 80076ca:	e00f      	b.n	80076ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a58      	ldr	r2, [pc, #352]	; (8007834 <HAL_SD_GetCardCSD+0x344>)
 80076d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e09d      	b.n	8007828 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f0:	0b9b      	lsrs	r3, r3, #14
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007702:	09db      	lsrs	r3, r3, #7
 8007704:	b2db      	uxtb	r3, r3
 8007706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800770a:	b2da      	uxtb	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800771a:	b2da      	uxtb	r2, r3
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007724:	0fdb      	lsrs	r3, r3, #31
 8007726:	b2da      	uxtb	r2, r3
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007730:	0f5b      	lsrs	r3, r3, #29
 8007732:	b2db      	uxtb	r3, r3
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	b2da      	uxtb	r2, r3
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007742:	0e9b      	lsrs	r3, r3, #26
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 0307 	and.w	r3, r3, #7
 800774a:	b2da      	uxtb	r2, r3
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007754:	0d9b      	lsrs	r3, r3, #22
 8007756:	b2db      	uxtb	r3, r3
 8007758:	f003 030f 	and.w	r3, r3, #15
 800775c:	b2da      	uxtb	r2, r3
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007766:	0d5b      	lsrs	r3, r3, #21
 8007768:	b2db      	uxtb	r3, r3
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	b2da      	uxtb	r2, r3
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007782:	0c1b      	lsrs	r3, r3, #16
 8007784:	b2db      	uxtb	r3, r3
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	b2da      	uxtb	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007796:	0bdb      	lsrs	r3, r3, #15
 8007798:	b2db      	uxtb	r3, r3
 800779a:	f003 0301 	and.w	r3, r3, #1
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077aa:	0b9b      	lsrs	r3, r3, #14
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	f003 0301 	and.w	r3, r3, #1
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077be:	0b5b      	lsrs	r3, r3, #13
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077d2:	0b1b      	lsrs	r3, r3, #12
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	f003 0301 	and.w	r3, r3, #1
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077e6:	0a9b      	lsrs	r3, r3, #10
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fa:	0a1b      	lsrs	r3, r3, #8
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	b2da      	uxtb	r2, r3
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780e:	085b      	lsrs	r3, r3, #1
 8007810:	b2db      	uxtb	r3, r3
 8007812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007816:	b2da      	uxtb	r2, r3
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2201      	movs	r2, #1
 8007822:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	370c      	adds	r7, #12
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr
 8007834:	004005ff 	.word	0x004005ff

08007838 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007890:	b5b0      	push	{r4, r5, r7, lr}
 8007892:	b08e      	sub	sp, #56	; 0x38
 8007894:	af04      	add	r7, sp, #16
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2203      	movs	r2, #3
 800789e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a6:	2b03      	cmp	r3, #3
 80078a8:	d02e      	beq.n	8007908 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078b0:	d106      	bne.n	80078c0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
 80078be:	e029      	b.n	8007914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078c6:	d10a      	bne.n	80078de <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fb0f 	bl	8007eec <SD_WideBus_Enable>
 80078ce:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	431a      	orrs	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	639a      	str	r2, [r3, #56]	; 0x38
 80078dc:	e01a      	b.n	8007914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10a      	bne.n	80078fa <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fb4c 	bl	8007f82 <SD_WideBus_Disable>
 80078ea:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	431a      	orrs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	639a      	str	r2, [r3, #56]	; 0x38
 80078f8:	e00c      	b.n	8007914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	639a      	str	r2, [r3, #56]	; 0x38
 8007906:	e005      	b.n	8007914 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800790c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a18      	ldr	r2, [pc, #96]	; (8007984 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e024      	b.n	800797a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	699b      	ldr	r3, [r3, #24]
 8007950:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681d      	ldr	r5, [r3, #0]
 8007956:	466c      	mov	r4, sp
 8007958:	f107 0318 	add.w	r3, r7, #24
 800795c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007960:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007964:	f107 030c 	add.w	r3, r7, #12
 8007968:	cb0e      	ldmia	r3, {r1, r2, r3}
 800796a:	4628      	mov	r0, r5
 800796c:	f002 fb92 	bl	800a094 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3728      	adds	r7, #40	; 0x28
 800797e:	46bd      	mov	sp, r7
 8007980:	bdb0      	pop	{r4, r5, r7, pc}
 8007982:	bf00      	nop
 8007984:	004005ff 	.word	0x004005ff

08007988 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007994:	f107 030c 	add.w	r3, r7, #12
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa7e 	bl	8007e9c <SD_SendStatus>
 80079a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	431a      	orrs	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	0a5b      	lsrs	r3, r3, #9
 80079b8:	f003 030f 	and.w	r3, r3, #15
 80079bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80079be:	693b      	ldr	r3, [r7, #16]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079e4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80079e6:	bf00      	nop
 80079e8:	3714      	adds	r7, #20
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a04:	2b82      	cmp	r3, #130	; 0x82
 8007a06:	d111      	bne.n	8007a2c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f002 fcc7 	bl	800a3a0 <SDMMC_CmdStopTransfer>
 8007a12:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d008      	beq.n	8007a2c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f7ff fd4e 	bl	80074c8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f022 0208 	bic.w	r2, r2, #8
 8007a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f240 523a 	movw	r2, #1338	; 0x53a
 8007a44:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007a54:	68f8      	ldr	r0, [r7, #12]
 8007a56:	f7ff fd2d 	bl	80074b4 <HAL_SD_RxCpltCallback>
#endif
}
 8007a5a:	bf00      	nop
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b086      	sub	sp, #24
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a70:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7fc fb44 	bl	8004100 <HAL_DMA_GetError>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d03e      	beq.n	8007afc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a84:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a8c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d002      	beq.n	8007a9a <SD_DMAError+0x36>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d12d      	bne.n	8007af6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a19      	ldr	r2, [pc, #100]	; (8007b04 <SD_DMAError+0xa0>)
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007ab0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007abe:	6978      	ldr	r0, [r7, #20]
 8007ac0:	f7ff ff62 	bl	8007988 <HAL_SD_GetCardState>
 8007ac4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b06      	cmp	r3, #6
 8007aca:	d002      	beq.n	8007ad2 <SD_DMAError+0x6e>
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d10a      	bne.n	8007ae8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f002 fc62 	bl	800a3a0 <SDMMC_CmdStopTransfer>
 8007adc:	4602      	mov	r2, r0
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2200      	movs	r2, #0
 8007af4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007af6:	6978      	ldr	r0, [r7, #20]
 8007af8:	f7ff fce6 	bl	80074c8 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007afc:	bf00      	nop
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	004005ff 	.word	0x004005ff

08007b08 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b14:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b1e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff ff31 	bl	8007988 <HAL_SD_GetCardState>
 8007b26:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2b06      	cmp	r3, #6
 8007b3a:	d002      	beq.n	8007b42 <SD_DMATxAbort+0x3a>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b05      	cmp	r3, #5
 8007b40:	d10a      	bne.n	8007b58 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4618      	mov	r0, r3
 8007b48:	f002 fc2a 	bl	800a3a0 <SDMMC_CmdStopTransfer>
 8007b4c:	4602      	mov	r2, r0
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b52:	431a      	orrs	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d103      	bne.n	8007b68 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007b60:	68f8      	ldr	r0, [r7, #12]
 8007b62:	f7ff fcbb 	bl	80074dc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007b66:	e002      	b.n	8007b6e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7ff fcad 	bl	80074c8 <HAL_SD_ErrorCallback>
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b084      	sub	sp, #16
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f240 523a 	movw	r2, #1338	; 0x53a
 8007b8c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f7ff fefa 	bl	8007988 <HAL_SD_GetCardState>
 8007b94:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b06      	cmp	r3, #6
 8007ba8:	d002      	beq.n	8007bb0 <SD_DMARxAbort+0x3a>
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	2b05      	cmp	r3, #5
 8007bae:	d10a      	bne.n	8007bc6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 fbf3 	bl	800a3a0 <SDMMC_CmdStopTransfer>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc0:	431a      	orrs	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d103      	bne.n	8007bd6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f7ff fc84 	bl	80074dc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007bd4:	e002      	b.n	8007bdc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007bd6:	68f8      	ldr	r0, [r7, #12]
 8007bd8:	f7ff fc76 	bl	80074c8 <HAL_SD_ErrorCallback>
}
 8007bdc:	bf00      	nop
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007be4:	b5b0      	push	{r4, r5, r7, lr}
 8007be6:	b094      	sub	sp, #80	; 0x50
 8007be8:	af04      	add	r7, sp, #16
 8007bea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007bec:	2301      	movs	r3, #1
 8007bee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	f002 faa5 	bl	800a144 <SDIO_GetPowerState>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007c00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007c04:	e0b7      	b.n	8007d76 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d02f      	beq.n	8007c6e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f002 fcce 	bl	800a5b4 <SDMMC_CmdSendCID>
 8007c18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <SD_InitCard+0x40>
    {
      return errorstate;
 8007c20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c22:	e0a8      	b.n	8007d76 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f002 facf 	bl	800a1ce <SDIO_GetResponse>
 8007c30:	4602      	mov	r2, r0
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2104      	movs	r1, #4
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f002 fac6 	bl	800a1ce <SDIO_GetResponse>
 8007c42:	4602      	mov	r2, r0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2108      	movs	r1, #8
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f002 fabd 	bl	800a1ce <SDIO_GetResponse>
 8007c54:	4602      	mov	r2, r0
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	210c      	movs	r1, #12
 8007c60:	4618      	mov	r0, r3
 8007c62:	f002 fab4 	bl	800a1ce <SDIO_GetResponse>
 8007c66:	4602      	mov	r2, r0
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c72:	2b03      	cmp	r3, #3
 8007c74:	d00d      	beq.n	8007c92 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f107 020e 	add.w	r2, r7, #14
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f002 fcd4 	bl	800a62e <SDMMC_CmdSetRelAdd>
 8007c86:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <SD_InitCard+0xae>
    {
      return errorstate;
 8007c8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c90:	e071      	b.n	8007d76 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d036      	beq.n	8007d08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007c9a:	89fb      	ldrh	r3, [r7, #14]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007caa:	041b      	lsls	r3, r3, #16
 8007cac:	4619      	mov	r1, r3
 8007cae:	4610      	mov	r0, r2
 8007cb0:	f002 fc9e 	bl	800a5f0 <SDMMC_CmdSendCSD>
 8007cb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cbe:	e05a      	b.n	8007d76 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f002 fa81 	bl	800a1ce <SDIO_GetResponse>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2104      	movs	r1, #4
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f002 fa78 	bl	800a1ce <SDIO_GetResponse>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2108      	movs	r1, #8
 8007cea:	4618      	mov	r0, r3
 8007cec:	f002 fa6f 	bl	800a1ce <SDIO_GetResponse>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	210c      	movs	r1, #12
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f002 fa66 	bl	800a1ce <SDIO_GetResponse>
 8007d02:	4602      	mov	r2, r0
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2104      	movs	r1, #4
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f002 fa5d 	bl	800a1ce <SDIO_GetResponse>
 8007d14:	4603      	mov	r3, r0
 8007d16:	0d1a      	lsrs	r2, r3, #20
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007d1c:	f107 0310 	add.w	r3, r7, #16
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fbe4 	bl	80074f0 <HAL_SD_GetCardCSD>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d002      	beq.n	8007d34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d32:	e020      	b.n	8007d76 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6819      	ldr	r1, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3c:	041b      	lsls	r3, r3, #16
 8007d3e:	f04f 0400 	mov.w	r4, #0
 8007d42:	461a      	mov	r2, r3
 8007d44:	4623      	mov	r3, r4
 8007d46:	4608      	mov	r0, r1
 8007d48:	f002 fb4c 	bl	800a3e4 <SDMMC_CmdSelDesel>
 8007d4c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <SD_InitCard+0x174>
  {
    return errorstate;
 8007d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d56:	e00e      	b.n	8007d76 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681d      	ldr	r5, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	466c      	mov	r4, sp
 8007d60:	f103 0210 	add.w	r2, r3, #16
 8007d64:	ca07      	ldmia	r2, {r0, r1, r2}
 8007d66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d6a:	3304      	adds	r3, #4
 8007d6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f002 f990 	bl	800a094 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3740      	adds	r7, #64	; 0x40
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007d80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f002 fb46 	bl	800a42a <SDMMC_CmdGoIdleState>
 8007d9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <SD_PowerON+0x2a>
  {
    return errorstate;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	e072      	b.n	8007e90 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f002 fb59 	bl	800a466 <SDMMC_CmdOperCond>
 8007db4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00d      	beq.n	8007dd8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f002 fb2f 	bl	800a42a <SDMMC_CmdGoIdleState>
 8007dcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d004      	beq.n	8007dde <SD_PowerON+0x5e>
    {
      return errorstate;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	e05b      	b.n	8007e90 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d137      	bne.n	8007e56 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2100      	movs	r1, #0
 8007dec:	4618      	mov	r0, r3
 8007dee:	f002 fb59 	bl	800a4a4 <SDMMC_CmdAppCommand>
 8007df2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d02d      	beq.n	8007e56 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dfa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007dfe:	e047      	b.n	8007e90 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	2100      	movs	r1, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f002 fb4c 	bl	800a4a4 <SDMMC_CmdAppCommand>
 8007e0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <SD_PowerON+0x98>
    {
      return errorstate;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	e03b      	b.n	8007e90 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	491e      	ldr	r1, [pc, #120]	; (8007e98 <SD_PowerON+0x118>)
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f002 fb62 	bl	800a4e8 <SDMMC_CmdAppOperCommand>
 8007e24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e30:	e02e      	b.n	8007e90 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2100      	movs	r1, #0
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f002 f9c8 	bl	800a1ce <SDIO_GetResponse>
 8007e3e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	0fdb      	lsrs	r3, r3, #31
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d101      	bne.n	8007e4c <SD_PowerON+0xcc>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e000      	b.n	8007e4e <SD_PowerON+0xce>
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	613b      	str	r3, [r7, #16]

    count++;
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	3301      	adds	r3, #1
 8007e54:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d802      	bhi.n	8007e66 <SD_PowerON+0xe6>
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d0cc      	beq.n	8007e00 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d902      	bls.n	8007e76 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007e74:	e00c      	b.n	8007e90 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	645a      	str	r2, [r3, #68]	; 0x44
 8007e86:	e002      	b.n	8007e8e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	c1100000 	.word	0xc1100000

08007e9c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d102      	bne.n	8007eb2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007eac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eb0:	e018      	b.n	8007ee4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eba:	041b      	lsls	r3, r3, #16
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	4610      	mov	r0, r2
 8007ec0:	f002 fbd6 	bl	800a670 <SDMMC_CmdSendStatus>
 8007ec4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	e009      	b.n	8007ee4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f002 f979 	bl	800a1ce <SDIO_GetResponse>
 8007edc:	4602      	mov	r2, r0
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	2300      	movs	r3, #0
 8007efa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2100      	movs	r1, #0
 8007f02:	4618      	mov	r0, r3
 8007f04:	f002 f963 	bl	800a1ce <SDIO_GetResponse>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007f12:	d102      	bne.n	8007f1a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007f14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007f18:	e02f      	b.n	8007f7a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007f1a:	f107 030c 	add.w	r3, r7, #12
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 f879 	bl	8008018 <SD_FindSCR>
 8007f26:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d001      	beq.n	8007f32 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	e023      	b.n	8007f7a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01c      	beq.n	8007f76 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f44:	041b      	lsls	r3, r3, #16
 8007f46:	4619      	mov	r1, r3
 8007f48:	4610      	mov	r0, r2
 8007f4a:	f002 faab 	bl	800a4a4 <SDMMC_CmdAppCommand>
 8007f4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d001      	beq.n	8007f5a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	e00f      	b.n	8007f7a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2102      	movs	r1, #2
 8007f60:	4618      	mov	r0, r3
 8007f62:	f002 fae4 	bl	800a52e <SDMMC_CmdBusWidth>
 8007f66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	e003      	b.n	8007f7a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e001      	b.n	8007f7a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007f76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007f82:	b580      	push	{r7, lr}
 8007f84:	b086      	sub	sp, #24
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f002 f918 	bl	800a1ce <SDIO_GetResponse>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fa8:	d102      	bne.n	8007fb0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007faa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fae:	e02f      	b.n	8008010 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007fb0:	f107 030c 	add.w	r3, r7, #12
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f82e 	bl	8008018 <SD_FindSCR>
 8007fbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	e023      	b.n	8008010 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d01c      	beq.n	800800c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681a      	ldr	r2, [r3, #0]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fda:	041b      	lsls	r3, r3, #16
 8007fdc:	4619      	mov	r1, r3
 8007fde:	4610      	mov	r0, r2
 8007fe0:	f002 fa60 	bl	800a4a4 <SDMMC_CmdAppCommand>
 8007fe4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	e00f      	b.n	8008010 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f002 fa99 	bl	800a52e <SDMMC_CmdBusWidth>
 8007ffc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	e003      	b.n	8008010 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008008:	2300      	movs	r3, #0
 800800a:	e001      	b.n	8008010 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800800c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008010:	4618      	mov	r0, r3
 8008012:	3718      	adds	r7, #24
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008018:	b590      	push	{r4, r7, lr}
 800801a:	b08f      	sub	sp, #60	; 0x3c
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008022:	f7fb fc7b 	bl	800391c <HAL_GetTick>
 8008026:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800802c:	2300      	movs	r3, #0
 800802e:	60bb      	str	r3, [r7, #8]
 8008030:	2300      	movs	r3, #0
 8008032:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2108      	movs	r1, #8
 800803e:	4618      	mov	r0, r3
 8008040:	f002 f904 	bl	800a24c <SDMMC_CmdBlockLength>
 8008044:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <SD_FindSCR+0x38>
  {
    return errorstate;
 800804c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804e:	e0a9      	b.n	80081a4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008058:	041b      	lsls	r3, r3, #16
 800805a:	4619      	mov	r1, r3
 800805c:	4610      	mov	r0, r2
 800805e:	f002 fa21 	bl	800a4a4 <SDMMC_CmdAppCommand>
 8008062:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	2b00      	cmp	r3, #0
 8008068:	d001      	beq.n	800806e <SD_FindSCR+0x56>
  {
    return errorstate;
 800806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800806c:	e09a      	b.n	80081a4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800806e:	f04f 33ff 	mov.w	r3, #4294967295
 8008072:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008074:	2308      	movs	r3, #8
 8008076:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8008078:	2330      	movs	r3, #48	; 0x30
 800807a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800807c:	2302      	movs	r3, #2
 800807e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008080:	2300      	movs	r3, #0
 8008082:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008084:	2301      	movs	r3, #1
 8008086:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f107 0210 	add.w	r2, r7, #16
 8008090:	4611      	mov	r1, r2
 8008092:	4618      	mov	r0, r3
 8008094:	f002 f8ae 	bl	800a1f4 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f002 fa68 	bl	800a572 <SDMMC_CmdSendSCR>
 80080a2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d022      	beq.n	80080f0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80080aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ac:	e07a      	b.n	80081a4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00e      	beq.n	80080da <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6819      	ldr	r1, [r3, #0]
 80080c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	f107 0208 	add.w	r2, r7, #8
 80080c8:	18d4      	adds	r4, r2, r3
 80080ca:	4608      	mov	r0, r1
 80080cc:	f002 f80d 	bl	800a0ea <SDIO_ReadFIFO>
 80080d0:	4603      	mov	r3, r0
 80080d2:	6023      	str	r3, [r4, #0]
      index++;
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	3301      	adds	r3, #1
 80080d8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80080da:	f7fb fc1f 	bl	800391c <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e8:	d102      	bne.n	80080f0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80080ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080ee:	e059      	b.n	80081a4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f6:	f240 432a 	movw	r3, #1066	; 0x42a
 80080fa:	4013      	ands	r3, r2
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0d6      	beq.n	80080ae <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008106:	f003 0308 	and.w	r3, r3, #8
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	2208      	movs	r2, #8
 8008114:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008116:	2308      	movs	r3, #8
 8008118:	e044      	b.n	80081a4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d005      	beq.n	8008134 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2202      	movs	r2, #2
 800812e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008130:	2302      	movs	r3, #2
 8008132:	e037      	b.n	80081a4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	2220      	movs	r2, #32
 8008148:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800814a:	2320      	movs	r3, #32
 800814c:	e02a      	b.n	80081a4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f240 523a 	movw	r2, #1338	; 0x53a
 8008156:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	061a      	lsls	r2, r3, #24
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008164:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	0a1b      	lsrs	r3, r3, #8
 800816a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800816e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	0e1b      	lsrs	r3, r3, #24
 8008174:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008178:	601a      	str	r2, [r3, #0]
    scr++;
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	3304      	adds	r3, #4
 800817e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	061a      	lsls	r2, r3, #24
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	021b      	lsls	r3, r3, #8
 8008188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800818c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	0a1b      	lsrs	r3, r3, #8
 8008192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008196:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	0e1b      	lsrs	r3, r3, #24
 800819c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	373c      	adds	r7, #60	; 0x3c
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd90      	pop	{r4, r7, pc}

080081ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d03f      	beq.n	8008246 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80081c6:	2300      	movs	r3, #0
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	e033      	b.n	8008234 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 ff8a 	bl	800a0ea <SDIO_ReadFIFO>
 80081d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	b2da      	uxtb	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3301      	adds	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	0a1b      	lsrs	r3, r3, #8
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	3b01      	subs	r3, #1
 8008200:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	0c1b      	lsrs	r3, r3, #16
 8008206:	b2da      	uxtb	r2, r3
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	3301      	adds	r3, #1
 8008210:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	3b01      	subs	r3, #1
 8008216:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	0e1b      	lsrs	r3, r3, #24
 800821c:	b2da      	uxtb	r2, r3
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	3301      	adds	r3, #1
 8008226:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3b01      	subs	r3, #1
 800822c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	3301      	adds	r3, #1
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b07      	cmp	r3, #7
 8008238:	d9c8      	bls.n	80081cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008246:	bf00      	nop
 8008248:	3718      	adds	r7, #24
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b086      	sub	sp, #24
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6a1b      	ldr	r3, [r3, #32]
 800825a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008260:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d043      	beq.n	80082f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
 800826c:	e037      	b.n	80082de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3301      	adds	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	3b01      	subs	r3, #1
 800827e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	781b      	ldrb	r3, [r3, #0]
 8008284:	021a      	lsls	r2, r3, #8
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4313      	orrs	r3, r2
 800828a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	3301      	adds	r3, #1
 8008290:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	3b01      	subs	r3, #1
 8008296:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	041a      	lsls	r2, r3, #16
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	3301      	adds	r3, #1
 80082a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	3b01      	subs	r3, #1
 80082ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	061a      	lsls	r2, r3, #24
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	3301      	adds	r3, #1
 80082c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f107 0208 	add.w	r2, r7, #8
 80082d0:	4611      	mov	r1, r2
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 ff16 	bl	800a104 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	3301      	adds	r3, #1
 80082dc:	617b      	str	r3, [r7, #20]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	2b07      	cmp	r3, #7
 80082e2:	d9c4      	bls.n	800826e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b082      	sub	sp, #8
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e056      	b.n	80083b8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d106      	bne.n	800832a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7fb f893 	bl	8003450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2202      	movs	r2, #2
 800832e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008340:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	431a      	orrs	r2, r3
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	431a      	orrs	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	431a      	orrs	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	431a      	orrs	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	69db      	ldr	r3, [r3, #28]
 800836c:	431a      	orrs	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	ea42 0103 	orr.w	r1, r2, r3
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	430a      	orrs	r2, r1
 8008380:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	0c1b      	lsrs	r3, r3, #16
 8008388:	f003 0104 	and.w	r1, r3, #4
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69da      	ldr	r2, [r3, #28]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80083b6:	2300      	movs	r3, #0
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b088      	sub	sp, #32
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	603b      	str	r3, [r7, #0]
 80083cc:	4613      	mov	r3, r2
 80083ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_SPI_Transmit+0x22>
 80083de:	2302      	movs	r3, #2
 80083e0:	e11e      	b.n	8008620 <HAL_SPI_Transmit+0x260>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083ea:	f7fb fa97 	bl	800391c <HAL_GetTick>
 80083ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80083f0:	88fb      	ldrh	r3, [r7, #6]
 80083f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083fa:	b2db      	uxtb	r3, r3
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d002      	beq.n	8008406 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008400:	2302      	movs	r3, #2
 8008402:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008404:	e103      	b.n	800860e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <HAL_SPI_Transmit+0x52>
 800840c:	88fb      	ldrh	r3, [r7, #6]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008416:	e0fa      	b.n	800860e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2203      	movs	r2, #3
 800841c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	88fa      	ldrh	r2, [r7, #6]
 8008430:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	88fa      	ldrh	r2, [r7, #6]
 8008436:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2200      	movs	r2, #0
 8008448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800845e:	d107      	bne.n	8008470 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800846e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847a:	2b40      	cmp	r3, #64	; 0x40
 800847c:	d007      	beq.n	800848e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800848c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008496:	d14b      	bne.n	8008530 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d002      	beq.n	80084a6 <HAL_SPI_Transmit+0xe6>
 80084a0:	8afb      	ldrh	r3, [r7, #22]
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d13e      	bne.n	8008524 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	881a      	ldrh	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	1c9a      	adds	r2, r3, #2
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80084ca:	e02b      	b.n	8008524 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	689b      	ldr	r3, [r3, #8]
 80084d2:	f003 0302 	and.w	r3, r3, #2
 80084d6:	2b02      	cmp	r3, #2
 80084d8:	d112      	bne.n	8008500 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084de:	881a      	ldrh	r2, [r3, #0]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ea:	1c9a      	adds	r2, r3, #2
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	3b01      	subs	r3, #1
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80084fe:	e011      	b.n	8008524 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008500:	f7fb fa0c 	bl	800391c <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	429a      	cmp	r2, r3
 800850e:	d803      	bhi.n	8008518 <HAL_SPI_Transmit+0x158>
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008516:	d102      	bne.n	800851e <HAL_SPI_Transmit+0x15e>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d102      	bne.n	8008524 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008522:	e074      	b.n	800860e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1ce      	bne.n	80084cc <HAL_SPI_Transmit+0x10c>
 800852e:	e04c      	b.n	80085ca <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <HAL_SPI_Transmit+0x17e>
 8008538:	8afb      	ldrh	r3, [r7, #22]
 800853a:	2b01      	cmp	r3, #1
 800853c:	d140      	bne.n	80085c0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	330c      	adds	r3, #12
 8008548:	7812      	ldrb	r2, [r2, #0]
 800854a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800855a:	b29b      	uxth	r3, r3
 800855c:	3b01      	subs	r3, #1
 800855e:	b29a      	uxth	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008564:	e02c      	b.n	80085c0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0302 	and.w	r3, r3, #2
 8008570:	2b02      	cmp	r3, #2
 8008572:	d113      	bne.n	800859c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	330c      	adds	r3, #12
 800857e:	7812      	ldrb	r2, [r2, #0]
 8008580:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	1c5a      	adds	r2, r3, #1
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	86da      	strh	r2, [r3, #54]	; 0x36
 800859a:	e011      	b.n	80085c0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800859c:	f7fb f9be 	bl	800391c <HAL_GetTick>
 80085a0:	4602      	mov	r2, r0
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	1ad3      	subs	r3, r2, r3
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d803      	bhi.n	80085b4 <HAL_SPI_Transmit+0x1f4>
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b2:	d102      	bne.n	80085ba <HAL_SPI_Transmit+0x1fa>
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d102      	bne.n	80085c0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80085be:	e026      	b.n	800860e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1cd      	bne.n	8008566 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	6839      	ldr	r1, [r7, #0]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 fa44 	bl	8008a5c <SPI_EndRxTxTransaction>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d002      	beq.n	80085e0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2220      	movs	r2, #32
 80085de:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	689b      	ldr	r3, [r3, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10a      	bne.n	80085fe <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80085e8:	2300      	movs	r3, #0
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68db      	ldr	r3, [r3, #12]
 80085f2:	613b      	str	r3, [r7, #16]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	613b      	str	r3, [r7, #16]
 80085fc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	77fb      	strb	r3, [r7, #31]
 800860a:	e000      	b.n	800860e <HAL_SPI_Transmit+0x24e>
  }

error:
 800860c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800861e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3720      	adds	r7, #32
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08c      	sub	sp, #48	; 0x30
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008636:	2301      	movs	r3, #1
 8008638:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008646:	2b01      	cmp	r3, #1
 8008648:	d101      	bne.n	800864e <HAL_SPI_TransmitReceive+0x26>
 800864a:	2302      	movs	r3, #2
 800864c:	e18a      	b.n	8008964 <HAL_SPI_TransmitReceive+0x33c>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008656:	f7fb f961 	bl	800391c <HAL_GetTick>
 800865a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800866c:	887b      	ldrh	r3, [r7, #2]
 800866e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008670:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008674:	2b01      	cmp	r3, #1
 8008676:	d00f      	beq.n	8008698 <HAL_SPI_TransmitReceive+0x70>
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800867e:	d107      	bne.n	8008690 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d103      	bne.n	8008690 <HAL_SPI_TransmitReceive+0x68>
 8008688:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800868c:	2b04      	cmp	r3, #4
 800868e:	d003      	beq.n	8008698 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008690:	2302      	movs	r3, #2
 8008692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008696:	e15b      	b.n	8008950 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <HAL_SPI_TransmitReceive+0x82>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d002      	beq.n	80086aa <HAL_SPI_TransmitReceive+0x82>
 80086a4:	887b      	ldrh	r3, [r7, #2]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d103      	bne.n	80086b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80086b0:	e14e      	b.n	8008950 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b04      	cmp	r3, #4
 80086bc:	d003      	beq.n	80086c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2205      	movs	r2, #5
 80086c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	887a      	ldrh	r2, [r7, #2]
 80086d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	887a      	ldrh	r2, [r7, #2]
 80086dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	887a      	ldrh	r2, [r7, #2]
 80086e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	887a      	ldrh	r2, [r7, #2]
 80086ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2200      	movs	r2, #0
 80086f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008706:	2b40      	cmp	r3, #64	; 0x40
 8008708:	d007      	beq.n	800871a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008718:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	68db      	ldr	r3, [r3, #12]
 800871e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008722:	d178      	bne.n	8008816 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <HAL_SPI_TransmitReceive+0x10a>
 800872c:	8b7b      	ldrh	r3, [r7, #26]
 800872e:	2b01      	cmp	r3, #1
 8008730:	d166      	bne.n	8008800 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008736:	881a      	ldrh	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008742:	1c9a      	adds	r2, r3, #2
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800874c:	b29b      	uxth	r3, r3
 800874e:	3b01      	subs	r3, #1
 8008750:	b29a      	uxth	r2, r3
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008756:	e053      	b.n	8008800 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	f003 0302 	and.w	r3, r3, #2
 8008762:	2b02      	cmp	r3, #2
 8008764:	d11b      	bne.n	800879e <HAL_SPI_TransmitReceive+0x176>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800876a:	b29b      	uxth	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d016      	beq.n	800879e <HAL_SPI_TransmitReceive+0x176>
 8008770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008772:	2b01      	cmp	r3, #1
 8008774:	d113      	bne.n	800879e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877a:	881a      	ldrh	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	1c9a      	adds	r2, r3, #2
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008790:	b29b      	uxth	r3, r3
 8008792:	3b01      	subs	r3, #1
 8008794:	b29a      	uxth	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	f003 0301 	and.w	r3, r3, #1
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d119      	bne.n	80087e0 <HAL_SPI_TransmitReceive+0x1b8>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d014      	beq.n	80087e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c0:	b292      	uxth	r2, r2
 80087c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c8:	1c9a      	adds	r2, r3, #2
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	3b01      	subs	r3, #1
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087dc:	2301      	movs	r3, #1
 80087de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087e0:	f7fb f89c 	bl	800391c <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d807      	bhi.n	8008800 <HAL_SPI_TransmitReceive+0x1d8>
 80087f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d003      	beq.n	8008800 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80087fe:	e0a7      	b.n	8008950 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1a6      	bne.n	8008758 <HAL_SPI_TransmitReceive+0x130>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800880e:	b29b      	uxth	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1a1      	bne.n	8008758 <HAL_SPI_TransmitReceive+0x130>
 8008814:	e07c      	b.n	8008910 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d002      	beq.n	8008824 <HAL_SPI_TransmitReceive+0x1fc>
 800881e:	8b7b      	ldrh	r3, [r7, #26]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d16b      	bne.n	80088fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	330c      	adds	r3, #12
 800882e:	7812      	ldrb	r2, [r2, #0]
 8008830:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	1c5a      	adds	r2, r3, #1
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008840:	b29b      	uxth	r3, r3
 8008842:	3b01      	subs	r3, #1
 8008844:	b29a      	uxth	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800884a:	e057      	b.n	80088fc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 0302 	and.w	r3, r3, #2
 8008856:	2b02      	cmp	r3, #2
 8008858:	d11c      	bne.n	8008894 <HAL_SPI_TransmitReceive+0x26c>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d017      	beq.n	8008894 <HAL_SPI_TransmitReceive+0x26c>
 8008864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008866:	2b01      	cmp	r3, #1
 8008868:	d114      	bne.n	8008894 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	330c      	adds	r3, #12
 8008874:	7812      	ldrb	r2, [r2, #0]
 8008876:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800887c:	1c5a      	adds	r2, r3, #1
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008886:	b29b      	uxth	r3, r3
 8008888:	3b01      	subs	r3, #1
 800888a:	b29a      	uxth	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d119      	bne.n	80088d6 <HAL_SPI_TransmitReceive+0x2ae>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d014      	beq.n	80088d6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b6:	b2d2      	uxtb	r2, r2
 80088b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	1c5a      	adds	r2, r3, #1
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088d2:	2301      	movs	r3, #1
 80088d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088d6:	f7fb f821 	bl	800391c <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d803      	bhi.n	80088ee <HAL_SPI_TransmitReceive+0x2c6>
 80088e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ec:	d102      	bne.n	80088f4 <HAL_SPI_TransmitReceive+0x2cc>
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d103      	bne.n	80088fc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80088f4:	2303      	movs	r3, #3
 80088f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80088fa:	e029      	b.n	8008950 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008900:	b29b      	uxth	r3, r3
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1a2      	bne.n	800884c <HAL_SPI_TransmitReceive+0x224>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800890a:	b29b      	uxth	r3, r3
 800890c:	2b00      	cmp	r3, #0
 800890e:	d19d      	bne.n	800884c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008912:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 f8a1 	bl	8008a5c <SPI_EndRxTxTransaction>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d006      	beq.n	800892e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2220      	movs	r2, #32
 800892a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800892c:	e010      	b.n	8008950 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10b      	bne.n	800894e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	617b      	str	r3, [r7, #20]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	617b      	str	r3, [r7, #20]
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	e000      	b.n	8008950 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800894e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008960:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008964:	4618      	mov	r0, r3
 8008966:	3730      	adds	r7, #48	; 0x30
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800896c:	b480      	push	{r7}
 800896e:	b083      	sub	sp, #12
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800897a:	b2db      	uxtb	r3, r3
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	603b      	str	r3, [r7, #0]
 8008994:	4613      	mov	r3, r2
 8008996:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008998:	e04c      	b.n	8008a34 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a0:	d048      	beq.n	8008a34 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80089a2:	f7fa ffbb 	bl	800391c <HAL_GetTick>
 80089a6:	4602      	mov	r2, r0
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	683a      	ldr	r2, [r7, #0]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d902      	bls.n	80089b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d13d      	bne.n	8008a34 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685a      	ldr	r2, [r3, #4]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80089c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089d0:	d111      	bne.n	80089f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089da:	d004      	beq.n	80089e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089e4:	d107      	bne.n	80089f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fe:	d10f      	bne.n	8008a20 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a0e:	601a      	str	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a1e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2201      	movs	r2, #1
 8008a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e00f      	b.n	8008a54 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	689a      	ldr	r2, [r3, #8]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	bf0c      	ite	eq
 8008a44:	2301      	moveq	r3, #1
 8008a46:	2300      	movne	r3, #0
 8008a48:	b2db      	uxtb	r3, r3
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d1a3      	bne.n	800899a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008a68:	4b1b      	ldr	r3, [pc, #108]	; (8008ad8 <SPI_EndRxTxTransaction+0x7c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a1b      	ldr	r2, [pc, #108]	; (8008adc <SPI_EndRxTxTransaction+0x80>)
 8008a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a72:	0d5b      	lsrs	r3, r3, #21
 8008a74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008a78:	fb02 f303 	mul.w	r3, r2, r3
 8008a7c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a86:	d112      	bne.n	8008aae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	2180      	movs	r1, #128	; 0x80
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f7ff ff78 	bl	8008988 <SPI_WaitFlagStateUntilTimeout>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d016      	beq.n	8008acc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa2:	f043 0220 	orr.w	r2, r3, #32
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008aaa:	2303      	movs	r3, #3
 8008aac:	e00f      	b.n	8008ace <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ac4:	2b80      	cmp	r3, #128	; 0x80
 8008ac6:	d0f2      	beq.n	8008aae <SPI_EndRxTxTransaction+0x52>
 8008ac8:	e000      	b.n	8008acc <SPI_EndRxTxTransaction+0x70>
        break;
 8008aca:	bf00      	nop
  }

  return HAL_OK;
 8008acc:	2300      	movs	r3, #0
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	20000014 	.word	0x20000014
 8008adc:	165e9f81 	.word	0x165e9f81

08008ae0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b082      	sub	sp, #8
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d101      	bne.n	8008af2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e01d      	b.n	8008b2e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d106      	bne.n	8008b0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f7fa fcea 	bl	80034e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2202      	movs	r2, #2
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	4610      	mov	r0, r2
 8008b20:	f000 fb4e 	bl	80091c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b36:	b480      	push	{r7}
 8008b38:	b085      	sub	sp, #20
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2202      	movs	r2, #2
 8008b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b06      	cmp	r3, #6
 8008b56:	d007      	beq.n	8008b68 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f042 0201 	orr.w	r2, r2, #1
 8008b66:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3714      	adds	r7, #20
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d101      	bne.n	8008b90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e01d      	b.n	8008bcc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d106      	bne.n	8008baa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f815 	bl	8008bd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2202      	movs	r2, #2
 8008bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	3304      	adds	r3, #4
 8008bba:	4619      	mov	r1, r3
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	f000 faff 	bl	80091c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3708      	adds	r7, #8
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fdca 	bl	8009794 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <HAL_TIM_PWM_Start+0x74>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d004      	beq.n	8008c14 <HAL_TIM_PWM_Start+0x2c>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a14      	ldr	r2, [pc, #80]	; (8008c60 <HAL_TIM_PWM_Start+0x78>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d101      	bne.n	8008c18 <HAL_TIM_PWM_Start+0x30>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <HAL_TIM_PWM_Start+0x32>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	689b      	ldr	r3, [r3, #8]
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b06      	cmp	r3, #6
 8008c3e:	d007      	beq.n	8008c50 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f042 0201 	orr.w	r2, r2, #1
 8008c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c50:	2300      	movs	r3, #0
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	40010000 	.word	0x40010000
 8008c60:	40010400 	.word	0x40010400

08008c64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d122      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d11b      	bne.n	8008cc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f06f 0202 	mvn.w	r2, #2
 8008c90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	f003 0303 	and.w	r3, r3, #3
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d003      	beq.n	8008cae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa6b 	bl	8009182 <HAL_TIM_IC_CaptureCallback>
 8008cac:	e005      	b.n	8008cba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 fa5d 	bl	800916e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fa6e 	bl	8009196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0304 	and.w	r3, r3, #4
 8008cca:	2b04      	cmp	r3, #4
 8008ccc:	d122      	bne.n	8008d14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d11b      	bne.n	8008d14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f06f 0204 	mvn.w	r2, #4
 8008ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2202      	movs	r2, #2
 8008cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699b      	ldr	r3, [r3, #24]
 8008cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa41 	bl	8009182 <HAL_TIM_IC_CaptureCallback>
 8008d00:	e005      	b.n	8008d0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fa33 	bl	800916e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fa44 	bl	8009196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	691b      	ldr	r3, [r3, #16]
 8008d1a:	f003 0308 	and.w	r3, r3, #8
 8008d1e:	2b08      	cmp	r3, #8
 8008d20:	d122      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	f003 0308 	and.w	r3, r3, #8
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d11b      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f06f 0208 	mvn.w	r2, #8
 8008d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	69db      	ldr	r3, [r3, #28]
 8008d46:	f003 0303 	and.w	r3, r3, #3
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa17 	bl	8009182 <HAL_TIM_IC_CaptureCallback>
 8008d54:	e005      	b.n	8008d62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa09 	bl	800916e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fa1a 	bl	8009196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0310 	and.w	r3, r3, #16
 8008d72:	2b10      	cmp	r3, #16
 8008d74:	d122      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0310 	and.w	r3, r3, #16
 8008d80:	2b10      	cmp	r3, #16
 8008d82:	d11b      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0210 	mvn.w	r2, #16
 8008d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2208      	movs	r2, #8
 8008d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	69db      	ldr	r3, [r3, #28]
 8008d9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f9ed 	bl	8009182 <HAL_TIM_IC_CaptureCallback>
 8008da8:	e005      	b.n	8008db6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f9df 	bl	800916e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9f0 	bl	8009196 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d10e      	bne.n	8008de8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d107      	bne.n	8008de8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f06f 0201 	mvn.w	r2, #1
 8008de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7fa f994 	bl	8003110 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df2:	2b80      	cmp	r3, #128	; 0x80
 8008df4:	d10e      	bne.n	8008e14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e00:	2b80      	cmp	r3, #128	; 0x80
 8008e02:	d107      	bne.n	8008e14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 fd6c 	bl	80098ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e1e:	2b40      	cmp	r3, #64	; 0x40
 8008e20:	d10e      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	68db      	ldr	r3, [r3, #12]
 8008e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2c:	2b40      	cmp	r3, #64	; 0x40
 8008e2e:	d107      	bne.n	8008e40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 f9b5 	bl	80091aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	691b      	ldr	r3, [r3, #16]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d10e      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	f003 0320 	and.w	r3, r3, #32
 8008e58:	2b20      	cmp	r3, #32
 8008e5a:	d107      	bne.n	8008e6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f06f 0220 	mvn.w	r2, #32
 8008e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fd36 	bl	80098d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d101      	bne.n	8008e8e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	e0b4      	b.n	8008ff8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2202      	movs	r2, #2
 8008e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b0c      	cmp	r3, #12
 8008ea2:	f200 809f 	bhi.w	8008fe4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008ea6:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ee1 	.word	0x08008ee1
 8008eb0:	08008fe5 	.word	0x08008fe5
 8008eb4:	08008fe5 	.word	0x08008fe5
 8008eb8:	08008fe5 	.word	0x08008fe5
 8008ebc:	08008f21 	.word	0x08008f21
 8008ec0:	08008fe5 	.word	0x08008fe5
 8008ec4:	08008fe5 	.word	0x08008fe5
 8008ec8:	08008fe5 	.word	0x08008fe5
 8008ecc:	08008f63 	.word	0x08008f63
 8008ed0:	08008fe5 	.word	0x08008fe5
 8008ed4:	08008fe5 	.word	0x08008fe5
 8008ed8:	08008fe5 	.word	0x08008fe5
 8008edc:	08008fa3 	.word	0x08008fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68b9      	ldr	r1, [r7, #8]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f000 fa0a 	bl	8009300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699a      	ldr	r2, [r3, #24]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f042 0208 	orr.w	r2, r2, #8
 8008efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	699a      	ldr	r2, [r3, #24]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f022 0204 	bic.w	r2, r2, #4
 8008f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6999      	ldr	r1, [r3, #24]
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	691a      	ldr	r2, [r3, #16]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	430a      	orrs	r2, r1
 8008f1c:	619a      	str	r2, [r3, #24]
      break;
 8008f1e:	e062      	b.n	8008fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68b9      	ldr	r1, [r7, #8]
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fa5a 	bl	80093e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	699a      	ldr	r2, [r3, #24]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6999      	ldr	r1, [r3, #24]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	021a      	lsls	r2, r3, #8
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	430a      	orrs	r2, r1
 8008f5e:	619a      	str	r2, [r3, #24]
      break;
 8008f60:	e041      	b.n	8008fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68b9      	ldr	r1, [r7, #8]
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 faaf 	bl	80094cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69da      	ldr	r2, [r3, #28]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f042 0208 	orr.w	r2, r2, #8
 8008f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69da      	ldr	r2, [r3, #28]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f022 0204 	bic.w	r2, r2, #4
 8008f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	69d9      	ldr	r1, [r3, #28]
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	691a      	ldr	r2, [r3, #16]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	430a      	orrs	r2, r1
 8008f9e:	61da      	str	r2, [r3, #28]
      break;
 8008fa0:	e021      	b.n	8008fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68b9      	ldr	r1, [r7, #8]
 8008fa8:	4618      	mov	r0, r3
 8008faa:	f000 fb03 	bl	80095b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69da      	ldr	r2, [r3, #28]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69da      	ldr	r2, [r3, #28]
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	69d9      	ldr	r1, [r3, #28]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	021a      	lsls	r2, r3, #8
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	430a      	orrs	r2, r1
 8008fe0:	61da      	str	r2, [r3, #28]
      break;
 8008fe2:	e000      	b.n	8008fe6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008fe4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009010:	2b01      	cmp	r3, #1
 8009012:	d101      	bne.n	8009018 <HAL_TIM_ConfigClockSource+0x18>
 8009014:	2302      	movs	r3, #2
 8009016:	e0a6      	b.n	8009166 <HAL_TIM_ConfigClockSource+0x166>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2202      	movs	r2, #2
 8009024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009036:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800903e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	2b40      	cmp	r3, #64	; 0x40
 800904e:	d067      	beq.n	8009120 <HAL_TIM_ConfigClockSource+0x120>
 8009050:	2b40      	cmp	r3, #64	; 0x40
 8009052:	d80b      	bhi.n	800906c <HAL_TIM_ConfigClockSource+0x6c>
 8009054:	2b10      	cmp	r3, #16
 8009056:	d073      	beq.n	8009140 <HAL_TIM_ConfigClockSource+0x140>
 8009058:	2b10      	cmp	r3, #16
 800905a:	d802      	bhi.n	8009062 <HAL_TIM_ConfigClockSource+0x62>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d06f      	beq.n	8009140 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009060:	e078      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009062:	2b20      	cmp	r3, #32
 8009064:	d06c      	beq.n	8009140 <HAL_TIM_ConfigClockSource+0x140>
 8009066:	2b30      	cmp	r3, #48	; 0x30
 8009068:	d06a      	beq.n	8009140 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800906a:	e073      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800906c:	2b70      	cmp	r3, #112	; 0x70
 800906e:	d00d      	beq.n	800908c <HAL_TIM_ConfigClockSource+0x8c>
 8009070:	2b70      	cmp	r3, #112	; 0x70
 8009072:	d804      	bhi.n	800907e <HAL_TIM_ConfigClockSource+0x7e>
 8009074:	2b50      	cmp	r3, #80	; 0x50
 8009076:	d033      	beq.n	80090e0 <HAL_TIM_ConfigClockSource+0xe0>
 8009078:	2b60      	cmp	r3, #96	; 0x60
 800907a:	d041      	beq.n	8009100 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800907c:	e06a      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800907e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009082:	d066      	beq.n	8009152 <HAL_TIM_ConfigClockSource+0x152>
 8009084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009088:	d017      	beq.n	80090ba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800908a:	e063      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6818      	ldr	r0, [r3, #0]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	6899      	ldr	r1, [r3, #8]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f000 fb5a 	bl	8009754 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	609a      	str	r2, [r3, #8]
      break;
 80090b8:	e04c      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6899      	ldr	r1, [r3, #8]
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f000 fb43 	bl	8009754 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	689a      	ldr	r2, [r3, #8]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090dc:	609a      	str	r2, [r3, #8]
      break;
 80090de:	e039      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6818      	ldr	r0, [r3, #0]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	6859      	ldr	r1, [r3, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	461a      	mov	r2, r3
 80090ee:	f000 fab7 	bl	8009660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2150      	movs	r1, #80	; 0x50
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fb10 	bl	800971e <TIM_ITRx_SetConfig>
      break;
 80090fe:	e029      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6818      	ldr	r0, [r3, #0]
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	6859      	ldr	r1, [r3, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	461a      	mov	r2, r3
 800910e:	f000 fad6 	bl	80096be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	2160      	movs	r1, #96	; 0x60
 8009118:	4618      	mov	r0, r3
 800911a:	f000 fb00 	bl	800971e <TIM_ITRx_SetConfig>
      break;
 800911e:	e019      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	6859      	ldr	r1, [r3, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	461a      	mov	r2, r3
 800912e:	f000 fa97 	bl	8009660 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2140      	movs	r1, #64	; 0x40
 8009138:	4618      	mov	r0, r3
 800913a:	f000 faf0 	bl	800971e <TIM_ITRx_SetConfig>
      break;
 800913e:	e009      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4619      	mov	r1, r3
 800914a:	4610      	mov	r0, r2
 800914c:	f000 fae7 	bl	800971e <TIM_ITRx_SetConfig>
      break;
 8009150:	e000      	b.n	8009154 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}

0800916e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800916e:	b480      	push	{r7}
 8009170:	b083      	sub	sp, #12
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009176:	bf00      	nop
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr

08009182 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009182:	b480      	push	{r7}
 8009184:	b083      	sub	sp, #12
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800918a:	bf00      	nop
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800919e:	bf00      	nop
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b083      	sub	sp, #12
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
	...

080091c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b085      	sub	sp, #20
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a40      	ldr	r2, [pc, #256]	; (80092d4 <TIM_Base_SetConfig+0x114>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d013      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091de:	d00f      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	4a3d      	ldr	r2, [pc, #244]	; (80092d8 <TIM_Base_SetConfig+0x118>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d00b      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a3c      	ldr	r2, [pc, #240]	; (80092dc <TIM_Base_SetConfig+0x11c>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d007      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a3b      	ldr	r2, [pc, #236]	; (80092e0 <TIM_Base_SetConfig+0x120>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d003      	beq.n	8009200 <TIM_Base_SetConfig+0x40>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a3a      	ldr	r2, [pc, #232]	; (80092e4 <TIM_Base_SetConfig+0x124>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d108      	bne.n	8009212 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a2f      	ldr	r2, [pc, #188]	; (80092d4 <TIM_Base_SetConfig+0x114>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d02b      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009220:	d027      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a2c      	ldr	r2, [pc, #176]	; (80092d8 <TIM_Base_SetConfig+0x118>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d023      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a2b      	ldr	r2, [pc, #172]	; (80092dc <TIM_Base_SetConfig+0x11c>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d01f      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a2a      	ldr	r2, [pc, #168]	; (80092e0 <TIM_Base_SetConfig+0x120>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d01b      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a29      	ldr	r2, [pc, #164]	; (80092e4 <TIM_Base_SetConfig+0x124>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d017      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a28      	ldr	r2, [pc, #160]	; (80092e8 <TIM_Base_SetConfig+0x128>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d013      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a27      	ldr	r2, [pc, #156]	; (80092ec <TIM_Base_SetConfig+0x12c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d00f      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a26      	ldr	r2, [pc, #152]	; (80092f0 <TIM_Base_SetConfig+0x130>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00b      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a25      	ldr	r2, [pc, #148]	; (80092f4 <TIM_Base_SetConfig+0x134>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d007      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a24      	ldr	r2, [pc, #144]	; (80092f8 <TIM_Base_SetConfig+0x138>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d003      	beq.n	8009272 <TIM_Base_SetConfig+0xb2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a23      	ldr	r2, [pc, #140]	; (80092fc <TIM_Base_SetConfig+0x13c>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d108      	bne.n	8009284 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009278:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	4313      	orrs	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	695b      	ldr	r3, [r3, #20]
 800928e:	4313      	orrs	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	68fa      	ldr	r2, [r7, #12]
 8009296:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689a      	ldr	r2, [r3, #8]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a0a      	ldr	r2, [pc, #40]	; (80092d4 <TIM_Base_SetConfig+0x114>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <TIM_Base_SetConfig+0xf8>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a0c      	ldr	r2, [pc, #48]	; (80092e4 <TIM_Base_SetConfig+0x124>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d103      	bne.n	80092c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	691a      	ldr	r2, [r3, #16]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	615a      	str	r2, [r3, #20]
}
 80092c6:	bf00      	nop
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	40010000 	.word	0x40010000
 80092d8:	40000400 	.word	0x40000400
 80092dc:	40000800 	.word	0x40000800
 80092e0:	40000c00 	.word	0x40000c00
 80092e4:	40010400 	.word	0x40010400
 80092e8:	40014000 	.word	0x40014000
 80092ec:	40014400 	.word	0x40014400
 80092f0:	40014800 	.word	0x40014800
 80092f4:	40001800 	.word	0x40001800
 80092f8:	40001c00 	.word	0x40001c00
 80092fc:	40002000 	.word	0x40002000

08009300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	f023 0201 	bic.w	r2, r3, #1
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800932e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	68fa      	ldr	r2, [r7, #12]
 800933e:	4313      	orrs	r3, r2
 8009340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	f023 0302 	bic.w	r3, r3, #2
 8009348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	4313      	orrs	r3, r2
 8009352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	4a20      	ldr	r2, [pc, #128]	; (80093d8 <TIM_OC1_SetConfig+0xd8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	d003      	beq.n	8009364 <TIM_OC1_SetConfig+0x64>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a1f      	ldr	r2, [pc, #124]	; (80093dc <TIM_OC1_SetConfig+0xdc>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d10c      	bne.n	800937e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	f023 0308 	bic.w	r3, r3, #8
 800936a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	68db      	ldr	r3, [r3, #12]
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	4313      	orrs	r3, r2
 8009374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f023 0304 	bic.w	r3, r3, #4
 800937c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a15      	ldr	r2, [pc, #84]	; (80093d8 <TIM_OC1_SetConfig+0xd8>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <TIM_OC1_SetConfig+0x8e>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a14      	ldr	r2, [pc, #80]	; (80093dc <TIM_OC1_SetConfig+0xdc>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d111      	bne.n	80093b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009394:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800939c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	693a      	ldr	r2, [r7, #16]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	693a      	ldr	r2, [r7, #16]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	693a      	ldr	r2, [r7, #16]
 80093b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	685a      	ldr	r2, [r3, #4]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	621a      	str	r2, [r3, #32]
}
 80093cc:	bf00      	nop
 80093ce:	371c      	adds	r7, #28
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	40010000 	.word	0x40010000
 80093dc:	40010400 	.word	0x40010400

080093e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b087      	sub	sp, #28
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	f023 0210 	bic.w	r2, r3, #16
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800940e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009416:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	68fa      	ldr	r2, [r7, #12]
 8009420:	4313      	orrs	r3, r2
 8009422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	f023 0320 	bic.w	r3, r3, #32
 800942a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	011b      	lsls	r3, r3, #4
 8009432:	697a      	ldr	r2, [r7, #20]
 8009434:	4313      	orrs	r3, r2
 8009436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a22      	ldr	r2, [pc, #136]	; (80094c4 <TIM_OC2_SetConfig+0xe4>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d003      	beq.n	8009448 <TIM_OC2_SetConfig+0x68>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a21      	ldr	r2, [pc, #132]	; (80094c8 <TIM_OC2_SetConfig+0xe8>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d10d      	bne.n	8009464 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800944e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	697a      	ldr	r2, [r7, #20]
 8009458:	4313      	orrs	r3, r2
 800945a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009462:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	4a17      	ldr	r2, [pc, #92]	; (80094c4 <TIM_OC2_SetConfig+0xe4>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d003      	beq.n	8009474 <TIM_OC2_SetConfig+0x94>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	4a16      	ldr	r2, [pc, #88]	; (80094c8 <TIM_OC2_SetConfig+0xe8>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d113      	bne.n	800949c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800947a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	695b      	ldr	r3, [r3, #20]
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	693a      	ldr	r2, [r7, #16]
 800948c:	4313      	orrs	r3, r2
 800948e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	693a      	ldr	r2, [r7, #16]
 8009498:	4313      	orrs	r3, r2
 800949a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	693a      	ldr	r2, [r7, #16]
 80094a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	621a      	str	r2, [r3, #32]
}
 80094b6:	bf00      	nop
 80094b8:	371c      	adds	r7, #28
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	40010000 	.word	0x40010000
 80094c8:	40010400 	.word	0x40010400

080094cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b087      	sub	sp, #28
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	685b      	ldr	r3, [r3, #4]
 80094ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	69db      	ldr	r3, [r3, #28]
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f023 0303 	bic.w	r3, r3, #3
 8009502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4313      	orrs	r3, r2
 800950c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	697a      	ldr	r2, [r7, #20]
 800951e:	4313      	orrs	r3, r2
 8009520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a21      	ldr	r2, [pc, #132]	; (80095ac <TIM_OC3_SetConfig+0xe0>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d003      	beq.n	8009532 <TIM_OC3_SetConfig+0x66>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4a20      	ldr	r2, [pc, #128]	; (80095b0 <TIM_OC3_SetConfig+0xe4>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d10d      	bne.n	800954e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	68db      	ldr	r3, [r3, #12]
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	4313      	orrs	r3, r2
 8009544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800954c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	4a16      	ldr	r2, [pc, #88]	; (80095ac <TIM_OC3_SetConfig+0xe0>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d003      	beq.n	800955e <TIM_OC3_SetConfig+0x92>
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	4a15      	ldr	r2, [pc, #84]	; (80095b0 <TIM_OC3_SetConfig+0xe4>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d113      	bne.n	8009586 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009564:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800956c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	011b      	lsls	r3, r3, #4
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	4313      	orrs	r3, r2
 8009578:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	011b      	lsls	r3, r3, #4
 8009580:	693a      	ldr	r2, [r7, #16]
 8009582:	4313      	orrs	r3, r2
 8009584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	621a      	str	r2, [r3, #32]
}
 80095a0:	bf00      	nop
 80095a2:	371c      	adds	r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	40010000 	.word	0x40010000
 80095b0:	40010400 	.word	0x40010400

080095b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b087      	sub	sp, #28
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a1b      	ldr	r3, [r3, #32]
 80095c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	69db      	ldr	r3, [r3, #28]
 80095da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	031b      	lsls	r3, r3, #12
 8009606:	693a      	ldr	r2, [r7, #16]
 8009608:	4313      	orrs	r3, r2
 800960a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a12      	ldr	r2, [pc, #72]	; (8009658 <TIM_OC4_SetConfig+0xa4>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d003      	beq.n	800961c <TIM_OC4_SetConfig+0x68>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a11      	ldr	r2, [pc, #68]	; (800965c <TIM_OC4_SetConfig+0xa8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d109      	bne.n	8009630 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009622:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	695b      	ldr	r3, [r3, #20]
 8009628:	019b      	lsls	r3, r3, #6
 800962a:	697a      	ldr	r2, [r7, #20]
 800962c:	4313      	orrs	r3, r2
 800962e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	697a      	ldr	r2, [r7, #20]
 8009634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	685a      	ldr	r2, [r3, #4]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	693a      	ldr	r2, [r7, #16]
 8009648:	621a      	str	r2, [r3, #32]
}
 800964a:	bf00      	nop
 800964c:	371c      	adds	r7, #28
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	40010000 	.word	0x40010000
 800965c:	40010400 	.word	0x40010400

08009660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	6a1b      	ldr	r3, [r3, #32]
 8009676:	f023 0201 	bic.w	r2, r3, #1
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	699b      	ldr	r3, [r3, #24]
 8009682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800968a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	693a      	ldr	r2, [r7, #16]
 8009692:	4313      	orrs	r3, r2
 8009694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f023 030a 	bic.w	r3, r3, #10
 800969c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	621a      	str	r2, [r3, #32]
}
 80096b2:	bf00      	nop
 80096b4:	371c      	adds	r7, #28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr

080096be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80096be:	b480      	push	{r7}
 80096c0:	b087      	sub	sp, #28
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	60f8      	str	r0, [r7, #12]
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6a1b      	ldr	r3, [r3, #32]
 80096ce:	f023 0210 	bic.w	r2, r3, #16
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6a1b      	ldr	r3, [r3, #32]
 80096e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	031b      	lsls	r3, r3, #12
 80096ee:	697a      	ldr	r2, [r7, #20]
 80096f0:	4313      	orrs	r3, r2
 80096f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	011b      	lsls	r3, r3, #4
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4313      	orrs	r3, r2
 8009704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	693a      	ldr	r2, [r7, #16]
 8009710:	621a      	str	r2, [r3, #32]
}
 8009712:	bf00      	nop
 8009714:	371c      	adds	r7, #28
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800971e:	b480      	push	{r7}
 8009720:	b085      	sub	sp, #20
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
 8009726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	4313      	orrs	r3, r2
 800973c:	f043 0307 	orr.w	r3, r3, #7
 8009740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	609a      	str	r2, [r3, #8]
}
 8009748:	bf00      	nop
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800976e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	021a      	lsls	r2, r3, #8
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	431a      	orrs	r2, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	4313      	orrs	r3, r2
 800977c:	697a      	ldr	r2, [r7, #20]
 800977e:	4313      	orrs	r3, r2
 8009780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	609a      	str	r2, [r3, #8]
}
 8009788:	bf00      	nop
 800978a:	371c      	adds	r7, #28
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	2201      	movs	r2, #1
 80097a8:	fa02 f303 	lsl.w	r3, r2, r3
 80097ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	6a1a      	ldr	r2, [r3, #32]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	43db      	mvns	r3, r3
 80097b6:	401a      	ands	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	6a1a      	ldr	r2, [r3, #32]
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	f003 031f 	and.w	r3, r3, #31
 80097c6:	6879      	ldr	r1, [r7, #4]
 80097c8:	fa01 f303 	lsl.w	r3, r1, r3
 80097cc:	431a      	orrs	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
	...

080097e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d101      	bne.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097f4:	2302      	movs	r3, #2
 80097f6:	e05a      	b.n	80098ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2202      	movs	r2, #2
 8009804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4313      	orrs	r3, r2
 8009828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	4a21      	ldr	r2, [pc, #132]	; (80098bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d022      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009844:	d01d      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4a1d      	ldr	r2, [pc, #116]	; (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d018      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	4a1b      	ldr	r2, [pc, #108]	; (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d013      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a1a      	ldr	r2, [pc, #104]	; (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d00e      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a18      	ldr	r2, [pc, #96]	; (80098cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d009      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4a17      	ldr	r2, [pc, #92]	; (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d004      	beq.n	8009882 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a15      	ldr	r2, [pc, #84]	; (80098d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d10c      	bne.n	800989c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	68ba      	ldr	r2, [r7, #8]
 8009890:	4313      	orrs	r3, r2
 8009892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2201      	movs	r2, #1
 80098a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098ac:	2300      	movs	r3, #0
}
 80098ae:	4618      	mov	r0, r3
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	40010000 	.word	0x40010000
 80098c0:	40000400 	.word	0x40000400
 80098c4:	40000800 	.word	0x40000800
 80098c8:	40000c00 	.word	0x40000c00
 80098cc:	40010400 	.word	0x40010400
 80098d0:	40014000 	.word	0x40014000
 80098d4:	40001800 	.word	0x40001800

080098d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d101      	bne.n	8009912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e03f      	b.n	8009992 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009918:	b2db      	uxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009926:	6878      	ldr	r0, [r7, #4]
 8009928:	f7f9 fea2 	bl	8003670 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2224      	movs	r2, #36	; 0x24
 8009930:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f000 f829 	bl	800999c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	691a      	ldr	r2, [r3, #16]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	695a      	ldr	r2, [r3, #20]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68da      	ldr	r2, [r3, #12]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2220      	movs	r2, #32
 8009984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2220      	movs	r2, #32
 800998c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800999c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a0:	b085      	sub	sp, #20
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68da      	ldr	r2, [r3, #12]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	689a      	ldr	r2, [r3, #8]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	431a      	orrs	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	695b      	ldr	r3, [r3, #20]
 80099ca:	431a      	orrs	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	4313      	orrs	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80099de:	f023 030c 	bic.w	r3, r3, #12
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	6812      	ldr	r2, [r2, #0]
 80099e6:	68f9      	ldr	r1, [r7, #12]
 80099e8:	430b      	orrs	r3, r1
 80099ea:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	695b      	ldr	r3, [r3, #20]
 80099f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	699a      	ldr	r2, [r3, #24]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a0a:	f040 818b 	bne.w	8009d24 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4ac1      	ldr	r2, [pc, #772]	; (8009d18 <UART_SetConfig+0x37c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d005      	beq.n	8009a24 <UART_SetConfig+0x88>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4abf      	ldr	r2, [pc, #764]	; (8009d1c <UART_SetConfig+0x380>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	f040 80bd 	bne.w	8009b9e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a24:	f7fc fd24 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 8009a28:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a2a:	68bb      	ldr	r3, [r7, #8]
 8009a2c:	461d      	mov	r5, r3
 8009a2e:	f04f 0600 	mov.w	r6, #0
 8009a32:	46a8      	mov	r8, r5
 8009a34:	46b1      	mov	r9, r6
 8009a36:	eb18 0308 	adds.w	r3, r8, r8
 8009a3a:	eb49 0409 	adc.w	r4, r9, r9
 8009a3e:	4698      	mov	r8, r3
 8009a40:	46a1      	mov	r9, r4
 8009a42:	eb18 0805 	adds.w	r8, r8, r5
 8009a46:	eb49 0906 	adc.w	r9, r9, r6
 8009a4a:	f04f 0100 	mov.w	r1, #0
 8009a4e:	f04f 0200 	mov.w	r2, #0
 8009a52:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009a56:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009a5a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009a5e:	4688      	mov	r8, r1
 8009a60:	4691      	mov	r9, r2
 8009a62:	eb18 0005 	adds.w	r0, r8, r5
 8009a66:	eb49 0106 	adc.w	r1, r9, r6
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	461d      	mov	r5, r3
 8009a70:	f04f 0600 	mov.w	r6, #0
 8009a74:	196b      	adds	r3, r5, r5
 8009a76:	eb46 0406 	adc.w	r4, r6, r6
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	4623      	mov	r3, r4
 8009a7e:	f7f7 f903 	bl	8000c88 <__aeabi_uldivmod>
 8009a82:	4603      	mov	r3, r0
 8009a84:	460c      	mov	r4, r1
 8009a86:	461a      	mov	r2, r3
 8009a88:	4ba5      	ldr	r3, [pc, #660]	; (8009d20 <UART_SetConfig+0x384>)
 8009a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8009a8e:	095b      	lsrs	r3, r3, #5
 8009a90:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	461d      	mov	r5, r3
 8009a98:	f04f 0600 	mov.w	r6, #0
 8009a9c:	46a9      	mov	r9, r5
 8009a9e:	46b2      	mov	sl, r6
 8009aa0:	eb19 0309 	adds.w	r3, r9, r9
 8009aa4:	eb4a 040a 	adc.w	r4, sl, sl
 8009aa8:	4699      	mov	r9, r3
 8009aaa:	46a2      	mov	sl, r4
 8009aac:	eb19 0905 	adds.w	r9, r9, r5
 8009ab0:	eb4a 0a06 	adc.w	sl, sl, r6
 8009ab4:	f04f 0100 	mov.w	r1, #0
 8009ab8:	f04f 0200 	mov.w	r2, #0
 8009abc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ac0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009ac4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009ac8:	4689      	mov	r9, r1
 8009aca:	4692      	mov	sl, r2
 8009acc:	eb19 0005 	adds.w	r0, r9, r5
 8009ad0:	eb4a 0106 	adc.w	r1, sl, r6
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	461d      	mov	r5, r3
 8009ada:	f04f 0600 	mov.w	r6, #0
 8009ade:	196b      	adds	r3, r5, r5
 8009ae0:	eb46 0406 	adc.w	r4, r6, r6
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4623      	mov	r3, r4
 8009ae8:	f7f7 f8ce 	bl	8000c88 <__aeabi_uldivmod>
 8009aec:	4603      	mov	r3, r0
 8009aee:	460c      	mov	r4, r1
 8009af0:	461a      	mov	r2, r3
 8009af2:	4b8b      	ldr	r3, [pc, #556]	; (8009d20 <UART_SetConfig+0x384>)
 8009af4:	fba3 1302 	umull	r1, r3, r3, r2
 8009af8:	095b      	lsrs	r3, r3, #5
 8009afa:	2164      	movs	r1, #100	; 0x64
 8009afc:	fb01 f303 	mul.w	r3, r1, r3
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	00db      	lsls	r3, r3, #3
 8009b04:	3332      	adds	r3, #50	; 0x32
 8009b06:	4a86      	ldr	r2, [pc, #536]	; (8009d20 <UART_SetConfig+0x384>)
 8009b08:	fba2 2303 	umull	r2, r3, r2, r3
 8009b0c:	095b      	lsrs	r3, r3, #5
 8009b0e:	005b      	lsls	r3, r3, #1
 8009b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b14:	4498      	add	r8, r3
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	461d      	mov	r5, r3
 8009b1a:	f04f 0600 	mov.w	r6, #0
 8009b1e:	46a9      	mov	r9, r5
 8009b20:	46b2      	mov	sl, r6
 8009b22:	eb19 0309 	adds.w	r3, r9, r9
 8009b26:	eb4a 040a 	adc.w	r4, sl, sl
 8009b2a:	4699      	mov	r9, r3
 8009b2c:	46a2      	mov	sl, r4
 8009b2e:	eb19 0905 	adds.w	r9, r9, r5
 8009b32:	eb4a 0a06 	adc.w	sl, sl, r6
 8009b36:	f04f 0100 	mov.w	r1, #0
 8009b3a:	f04f 0200 	mov.w	r2, #0
 8009b3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009b46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009b4a:	4689      	mov	r9, r1
 8009b4c:	4692      	mov	sl, r2
 8009b4e:	eb19 0005 	adds.w	r0, r9, r5
 8009b52:	eb4a 0106 	adc.w	r1, sl, r6
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	461d      	mov	r5, r3
 8009b5c:	f04f 0600 	mov.w	r6, #0
 8009b60:	196b      	adds	r3, r5, r5
 8009b62:	eb46 0406 	adc.w	r4, r6, r6
 8009b66:	461a      	mov	r2, r3
 8009b68:	4623      	mov	r3, r4
 8009b6a:	f7f7 f88d 	bl	8000c88 <__aeabi_uldivmod>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	460c      	mov	r4, r1
 8009b72:	461a      	mov	r2, r3
 8009b74:	4b6a      	ldr	r3, [pc, #424]	; (8009d20 <UART_SetConfig+0x384>)
 8009b76:	fba3 1302 	umull	r1, r3, r3, r2
 8009b7a:	095b      	lsrs	r3, r3, #5
 8009b7c:	2164      	movs	r1, #100	; 0x64
 8009b7e:	fb01 f303 	mul.w	r3, r1, r3
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	3332      	adds	r3, #50	; 0x32
 8009b88:	4a65      	ldr	r2, [pc, #404]	; (8009d20 <UART_SetConfig+0x384>)
 8009b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8009b8e:	095b      	lsrs	r3, r3, #5
 8009b90:	f003 0207 	and.w	r2, r3, #7
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4442      	add	r2, r8
 8009b9a:	609a      	str	r2, [r3, #8]
 8009b9c:	e26f      	b.n	800a07e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b9e:	f7fc fc53 	bl	8006448 <HAL_RCC_GetPCLK1Freq>
 8009ba2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	461d      	mov	r5, r3
 8009ba8:	f04f 0600 	mov.w	r6, #0
 8009bac:	46a8      	mov	r8, r5
 8009bae:	46b1      	mov	r9, r6
 8009bb0:	eb18 0308 	adds.w	r3, r8, r8
 8009bb4:	eb49 0409 	adc.w	r4, r9, r9
 8009bb8:	4698      	mov	r8, r3
 8009bba:	46a1      	mov	r9, r4
 8009bbc:	eb18 0805 	adds.w	r8, r8, r5
 8009bc0:	eb49 0906 	adc.w	r9, r9, r6
 8009bc4:	f04f 0100 	mov.w	r1, #0
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009bd0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009bd4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009bd8:	4688      	mov	r8, r1
 8009bda:	4691      	mov	r9, r2
 8009bdc:	eb18 0005 	adds.w	r0, r8, r5
 8009be0:	eb49 0106 	adc.w	r1, r9, r6
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	461d      	mov	r5, r3
 8009bea:	f04f 0600 	mov.w	r6, #0
 8009bee:	196b      	adds	r3, r5, r5
 8009bf0:	eb46 0406 	adc.w	r4, r6, r6
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	4623      	mov	r3, r4
 8009bf8:	f7f7 f846 	bl	8000c88 <__aeabi_uldivmod>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	461a      	mov	r2, r3
 8009c02:	4b47      	ldr	r3, [pc, #284]	; (8009d20 <UART_SetConfig+0x384>)
 8009c04:	fba3 2302 	umull	r2, r3, r3, r2
 8009c08:	095b      	lsrs	r3, r3, #5
 8009c0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	461d      	mov	r5, r3
 8009c12:	f04f 0600 	mov.w	r6, #0
 8009c16:	46a9      	mov	r9, r5
 8009c18:	46b2      	mov	sl, r6
 8009c1a:	eb19 0309 	adds.w	r3, r9, r9
 8009c1e:	eb4a 040a 	adc.w	r4, sl, sl
 8009c22:	4699      	mov	r9, r3
 8009c24:	46a2      	mov	sl, r4
 8009c26:	eb19 0905 	adds.w	r9, r9, r5
 8009c2a:	eb4a 0a06 	adc.w	sl, sl, r6
 8009c2e:	f04f 0100 	mov.w	r1, #0
 8009c32:	f04f 0200 	mov.w	r2, #0
 8009c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009c3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009c42:	4689      	mov	r9, r1
 8009c44:	4692      	mov	sl, r2
 8009c46:	eb19 0005 	adds.w	r0, r9, r5
 8009c4a:	eb4a 0106 	adc.w	r1, sl, r6
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	461d      	mov	r5, r3
 8009c54:	f04f 0600 	mov.w	r6, #0
 8009c58:	196b      	adds	r3, r5, r5
 8009c5a:	eb46 0406 	adc.w	r4, r6, r6
 8009c5e:	461a      	mov	r2, r3
 8009c60:	4623      	mov	r3, r4
 8009c62:	f7f7 f811 	bl	8000c88 <__aeabi_uldivmod>
 8009c66:	4603      	mov	r3, r0
 8009c68:	460c      	mov	r4, r1
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	4b2c      	ldr	r3, [pc, #176]	; (8009d20 <UART_SetConfig+0x384>)
 8009c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8009c72:	095b      	lsrs	r3, r3, #5
 8009c74:	2164      	movs	r1, #100	; 0x64
 8009c76:	fb01 f303 	mul.w	r3, r1, r3
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	00db      	lsls	r3, r3, #3
 8009c7e:	3332      	adds	r3, #50	; 0x32
 8009c80:	4a27      	ldr	r2, [pc, #156]	; (8009d20 <UART_SetConfig+0x384>)
 8009c82:	fba2 2303 	umull	r2, r3, r2, r3
 8009c86:	095b      	lsrs	r3, r3, #5
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c8e:	4498      	add	r8, r3
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	461d      	mov	r5, r3
 8009c94:	f04f 0600 	mov.w	r6, #0
 8009c98:	46a9      	mov	r9, r5
 8009c9a:	46b2      	mov	sl, r6
 8009c9c:	eb19 0309 	adds.w	r3, r9, r9
 8009ca0:	eb4a 040a 	adc.w	r4, sl, sl
 8009ca4:	4699      	mov	r9, r3
 8009ca6:	46a2      	mov	sl, r4
 8009ca8:	eb19 0905 	adds.w	r9, r9, r5
 8009cac:	eb4a 0a06 	adc.w	sl, sl, r6
 8009cb0:	f04f 0100 	mov.w	r1, #0
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009cbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009cc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009cc4:	4689      	mov	r9, r1
 8009cc6:	4692      	mov	sl, r2
 8009cc8:	eb19 0005 	adds.w	r0, r9, r5
 8009ccc:	eb4a 0106 	adc.w	r1, sl, r6
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	461d      	mov	r5, r3
 8009cd6:	f04f 0600 	mov.w	r6, #0
 8009cda:	196b      	adds	r3, r5, r5
 8009cdc:	eb46 0406 	adc.w	r4, r6, r6
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	f7f6 ffd0 	bl	8000c88 <__aeabi_uldivmod>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	461a      	mov	r2, r3
 8009cee:	4b0c      	ldr	r3, [pc, #48]	; (8009d20 <UART_SetConfig+0x384>)
 8009cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8009cf4:	095b      	lsrs	r3, r3, #5
 8009cf6:	2164      	movs	r1, #100	; 0x64
 8009cf8:	fb01 f303 	mul.w	r3, r1, r3
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	00db      	lsls	r3, r3, #3
 8009d00:	3332      	adds	r3, #50	; 0x32
 8009d02:	4a07      	ldr	r2, [pc, #28]	; (8009d20 <UART_SetConfig+0x384>)
 8009d04:	fba2 2303 	umull	r2, r3, r2, r3
 8009d08:	095b      	lsrs	r3, r3, #5
 8009d0a:	f003 0207 	and.w	r2, r3, #7
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4442      	add	r2, r8
 8009d14:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009d16:	e1b2      	b.n	800a07e <UART_SetConfig+0x6e2>
 8009d18:	40011000 	.word	0x40011000
 8009d1c:	40011400 	.word	0x40011400
 8009d20:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4ad7      	ldr	r2, [pc, #860]	; (800a088 <UART_SetConfig+0x6ec>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d005      	beq.n	8009d3a <UART_SetConfig+0x39e>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4ad6      	ldr	r2, [pc, #856]	; (800a08c <UART_SetConfig+0x6f0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	f040 80d1 	bne.w	8009edc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009d3a:	f7fc fb99 	bl	8006470 <HAL_RCC_GetPCLK2Freq>
 8009d3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	469a      	mov	sl, r3
 8009d44:	f04f 0b00 	mov.w	fp, #0
 8009d48:	46d0      	mov	r8, sl
 8009d4a:	46d9      	mov	r9, fp
 8009d4c:	eb18 0308 	adds.w	r3, r8, r8
 8009d50:	eb49 0409 	adc.w	r4, r9, r9
 8009d54:	4698      	mov	r8, r3
 8009d56:	46a1      	mov	r9, r4
 8009d58:	eb18 080a 	adds.w	r8, r8, sl
 8009d5c:	eb49 090b 	adc.w	r9, r9, fp
 8009d60:	f04f 0100 	mov.w	r1, #0
 8009d64:	f04f 0200 	mov.w	r2, #0
 8009d68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009d6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009d70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009d74:	4688      	mov	r8, r1
 8009d76:	4691      	mov	r9, r2
 8009d78:	eb1a 0508 	adds.w	r5, sl, r8
 8009d7c:	eb4b 0609 	adc.w	r6, fp, r9
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	4619      	mov	r1, r3
 8009d86:	f04f 0200 	mov.w	r2, #0
 8009d8a:	f04f 0300 	mov.w	r3, #0
 8009d8e:	f04f 0400 	mov.w	r4, #0
 8009d92:	0094      	lsls	r4, r2, #2
 8009d94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009d98:	008b      	lsls	r3, r1, #2
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	4623      	mov	r3, r4
 8009d9e:	4628      	mov	r0, r5
 8009da0:	4631      	mov	r1, r6
 8009da2:	f7f6 ff71 	bl	8000c88 <__aeabi_uldivmod>
 8009da6:	4603      	mov	r3, r0
 8009da8:	460c      	mov	r4, r1
 8009daa:	461a      	mov	r2, r3
 8009dac:	4bb8      	ldr	r3, [pc, #736]	; (800a090 <UART_SetConfig+0x6f4>)
 8009dae:	fba3 2302 	umull	r2, r3, r3, r2
 8009db2:	095b      	lsrs	r3, r3, #5
 8009db4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	469b      	mov	fp, r3
 8009dbc:	f04f 0c00 	mov.w	ip, #0
 8009dc0:	46d9      	mov	r9, fp
 8009dc2:	46e2      	mov	sl, ip
 8009dc4:	eb19 0309 	adds.w	r3, r9, r9
 8009dc8:	eb4a 040a 	adc.w	r4, sl, sl
 8009dcc:	4699      	mov	r9, r3
 8009dce:	46a2      	mov	sl, r4
 8009dd0:	eb19 090b 	adds.w	r9, r9, fp
 8009dd4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009dd8:	f04f 0100 	mov.w	r1, #0
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009de4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009de8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009dec:	4689      	mov	r9, r1
 8009dee:	4692      	mov	sl, r2
 8009df0:	eb1b 0509 	adds.w	r5, fp, r9
 8009df4:	eb4c 060a 	adc.w	r6, ip, sl
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	f04f 0200 	mov.w	r2, #0
 8009e02:	f04f 0300 	mov.w	r3, #0
 8009e06:	f04f 0400 	mov.w	r4, #0
 8009e0a:	0094      	lsls	r4, r2, #2
 8009e0c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009e10:	008b      	lsls	r3, r1, #2
 8009e12:	461a      	mov	r2, r3
 8009e14:	4623      	mov	r3, r4
 8009e16:	4628      	mov	r0, r5
 8009e18:	4631      	mov	r1, r6
 8009e1a:	f7f6 ff35 	bl	8000c88 <__aeabi_uldivmod>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	460c      	mov	r4, r1
 8009e22:	461a      	mov	r2, r3
 8009e24:	4b9a      	ldr	r3, [pc, #616]	; (800a090 <UART_SetConfig+0x6f4>)
 8009e26:	fba3 1302 	umull	r1, r3, r3, r2
 8009e2a:	095b      	lsrs	r3, r3, #5
 8009e2c:	2164      	movs	r1, #100	; 0x64
 8009e2e:	fb01 f303 	mul.w	r3, r1, r3
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	011b      	lsls	r3, r3, #4
 8009e36:	3332      	adds	r3, #50	; 0x32
 8009e38:	4a95      	ldr	r2, [pc, #596]	; (800a090 <UART_SetConfig+0x6f4>)
 8009e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e3e:	095b      	lsrs	r3, r3, #5
 8009e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e44:	4498      	add	r8, r3
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	469b      	mov	fp, r3
 8009e4a:	f04f 0c00 	mov.w	ip, #0
 8009e4e:	46d9      	mov	r9, fp
 8009e50:	46e2      	mov	sl, ip
 8009e52:	eb19 0309 	adds.w	r3, r9, r9
 8009e56:	eb4a 040a 	adc.w	r4, sl, sl
 8009e5a:	4699      	mov	r9, r3
 8009e5c:	46a2      	mov	sl, r4
 8009e5e:	eb19 090b 	adds.w	r9, r9, fp
 8009e62:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009e66:	f04f 0100 	mov.w	r1, #0
 8009e6a:	f04f 0200 	mov.w	r2, #0
 8009e6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e7a:	4689      	mov	r9, r1
 8009e7c:	4692      	mov	sl, r2
 8009e7e:	eb1b 0509 	adds.w	r5, fp, r9
 8009e82:	eb4c 060a 	adc.w	r6, ip, sl
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	f04f 0200 	mov.w	r2, #0
 8009e90:	f04f 0300 	mov.w	r3, #0
 8009e94:	f04f 0400 	mov.w	r4, #0
 8009e98:	0094      	lsls	r4, r2, #2
 8009e9a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009e9e:	008b      	lsls	r3, r1, #2
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4623      	mov	r3, r4
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	f7f6 feee 	bl	8000c88 <__aeabi_uldivmod>
 8009eac:	4603      	mov	r3, r0
 8009eae:	460c      	mov	r4, r1
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	4b77      	ldr	r3, [pc, #476]	; (800a090 <UART_SetConfig+0x6f4>)
 8009eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8009eb8:	095b      	lsrs	r3, r3, #5
 8009eba:	2164      	movs	r1, #100	; 0x64
 8009ebc:	fb01 f303 	mul.w	r3, r1, r3
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	3332      	adds	r3, #50	; 0x32
 8009ec6:	4a72      	ldr	r2, [pc, #456]	; (800a090 <UART_SetConfig+0x6f4>)
 8009ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ecc:	095b      	lsrs	r3, r3, #5
 8009ece:	f003 020f 	and.w	r2, r3, #15
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4442      	add	r2, r8
 8009ed8:	609a      	str	r2, [r3, #8]
 8009eda:	e0d0      	b.n	800a07e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009edc:	f7fc fab4 	bl	8006448 <HAL_RCC_GetPCLK1Freq>
 8009ee0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	469a      	mov	sl, r3
 8009ee6:	f04f 0b00 	mov.w	fp, #0
 8009eea:	46d0      	mov	r8, sl
 8009eec:	46d9      	mov	r9, fp
 8009eee:	eb18 0308 	adds.w	r3, r8, r8
 8009ef2:	eb49 0409 	adc.w	r4, r9, r9
 8009ef6:	4698      	mov	r8, r3
 8009ef8:	46a1      	mov	r9, r4
 8009efa:	eb18 080a 	adds.w	r8, r8, sl
 8009efe:	eb49 090b 	adc.w	r9, r9, fp
 8009f02:	f04f 0100 	mov.w	r1, #0
 8009f06:	f04f 0200 	mov.w	r2, #0
 8009f0a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009f0e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009f12:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009f16:	4688      	mov	r8, r1
 8009f18:	4691      	mov	r9, r2
 8009f1a:	eb1a 0508 	adds.w	r5, sl, r8
 8009f1e:	eb4b 0609 	adc.w	r6, fp, r9
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	4619      	mov	r1, r3
 8009f28:	f04f 0200 	mov.w	r2, #0
 8009f2c:	f04f 0300 	mov.w	r3, #0
 8009f30:	f04f 0400 	mov.w	r4, #0
 8009f34:	0094      	lsls	r4, r2, #2
 8009f36:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009f3a:	008b      	lsls	r3, r1, #2
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	4623      	mov	r3, r4
 8009f40:	4628      	mov	r0, r5
 8009f42:	4631      	mov	r1, r6
 8009f44:	f7f6 fea0 	bl	8000c88 <__aeabi_uldivmod>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	4b50      	ldr	r3, [pc, #320]	; (800a090 <UART_SetConfig+0x6f4>)
 8009f50:	fba3 2302 	umull	r2, r3, r3, r2
 8009f54:	095b      	lsrs	r3, r3, #5
 8009f56:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009f5a:	68bb      	ldr	r3, [r7, #8]
 8009f5c:	469b      	mov	fp, r3
 8009f5e:	f04f 0c00 	mov.w	ip, #0
 8009f62:	46d9      	mov	r9, fp
 8009f64:	46e2      	mov	sl, ip
 8009f66:	eb19 0309 	adds.w	r3, r9, r9
 8009f6a:	eb4a 040a 	adc.w	r4, sl, sl
 8009f6e:	4699      	mov	r9, r3
 8009f70:	46a2      	mov	sl, r4
 8009f72:	eb19 090b 	adds.w	r9, r9, fp
 8009f76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009f7a:	f04f 0100 	mov.w	r1, #0
 8009f7e:	f04f 0200 	mov.w	r2, #0
 8009f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f8e:	4689      	mov	r9, r1
 8009f90:	4692      	mov	sl, r2
 8009f92:	eb1b 0509 	adds.w	r5, fp, r9
 8009f96:	eb4c 060a 	adc.w	r6, ip, sl
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	4619      	mov	r1, r3
 8009fa0:	f04f 0200 	mov.w	r2, #0
 8009fa4:	f04f 0300 	mov.w	r3, #0
 8009fa8:	f04f 0400 	mov.w	r4, #0
 8009fac:	0094      	lsls	r4, r2, #2
 8009fae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009fb2:	008b      	lsls	r3, r1, #2
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	4623      	mov	r3, r4
 8009fb8:	4628      	mov	r0, r5
 8009fba:	4631      	mov	r1, r6
 8009fbc:	f7f6 fe64 	bl	8000c88 <__aeabi_uldivmod>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	460c      	mov	r4, r1
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4b32      	ldr	r3, [pc, #200]	; (800a090 <UART_SetConfig+0x6f4>)
 8009fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009fcc:	095b      	lsrs	r3, r3, #5
 8009fce:	2164      	movs	r1, #100	; 0x64
 8009fd0:	fb01 f303 	mul.w	r3, r1, r3
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	011b      	lsls	r3, r3, #4
 8009fd8:	3332      	adds	r3, #50	; 0x32
 8009fda:	4a2d      	ldr	r2, [pc, #180]	; (800a090 <UART_SetConfig+0x6f4>)
 8009fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe0:	095b      	lsrs	r3, r3, #5
 8009fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fe6:	4498      	add	r8, r3
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	469b      	mov	fp, r3
 8009fec:	f04f 0c00 	mov.w	ip, #0
 8009ff0:	46d9      	mov	r9, fp
 8009ff2:	46e2      	mov	sl, ip
 8009ff4:	eb19 0309 	adds.w	r3, r9, r9
 8009ff8:	eb4a 040a 	adc.w	r4, sl, sl
 8009ffc:	4699      	mov	r9, r3
 8009ffe:	46a2      	mov	sl, r4
 800a000:	eb19 090b 	adds.w	r9, r9, fp
 800a004:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a008:	f04f 0100 	mov.w	r1, #0
 800a00c:	f04f 0200 	mov.w	r2, #0
 800a010:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a014:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a018:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a01c:	4689      	mov	r9, r1
 800a01e:	4692      	mov	sl, r2
 800a020:	eb1b 0509 	adds.w	r5, fp, r9
 800a024:	eb4c 060a 	adc.w	r6, ip, sl
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	4619      	mov	r1, r3
 800a02e:	f04f 0200 	mov.w	r2, #0
 800a032:	f04f 0300 	mov.w	r3, #0
 800a036:	f04f 0400 	mov.w	r4, #0
 800a03a:	0094      	lsls	r4, r2, #2
 800a03c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a040:	008b      	lsls	r3, r1, #2
 800a042:	461a      	mov	r2, r3
 800a044:	4623      	mov	r3, r4
 800a046:	4628      	mov	r0, r5
 800a048:	4631      	mov	r1, r6
 800a04a:	f7f6 fe1d 	bl	8000c88 <__aeabi_uldivmod>
 800a04e:	4603      	mov	r3, r0
 800a050:	460c      	mov	r4, r1
 800a052:	461a      	mov	r2, r3
 800a054:	4b0e      	ldr	r3, [pc, #56]	; (800a090 <UART_SetConfig+0x6f4>)
 800a056:	fba3 1302 	umull	r1, r3, r3, r2
 800a05a:	095b      	lsrs	r3, r3, #5
 800a05c:	2164      	movs	r1, #100	; 0x64
 800a05e:	fb01 f303 	mul.w	r3, r1, r3
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	011b      	lsls	r3, r3, #4
 800a066:	3332      	adds	r3, #50	; 0x32
 800a068:	4a09      	ldr	r2, [pc, #36]	; (800a090 <UART_SetConfig+0x6f4>)
 800a06a:	fba2 2303 	umull	r2, r3, r2, r3
 800a06e:	095b      	lsrs	r3, r3, #5
 800a070:	f003 020f 	and.w	r2, r3, #15
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4442      	add	r2, r8
 800a07a:	609a      	str	r2, [r3, #8]
}
 800a07c:	e7ff      	b.n	800a07e <UART_SetConfig+0x6e2>
 800a07e:	bf00      	nop
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a088:	40011000 	.word	0x40011000
 800a08c:	40011400 	.word	0x40011400
 800a090:	51eb851f 	.word	0x51eb851f

0800a094 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800a094:	b084      	sub	sp, #16
 800a096:	b480      	push	{r7}
 800a098:	b085      	sub	sp, #20
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	6078      	str	r0, [r7, #4]
 800a09e:	f107 001c 	add.w	r0, r7, #28
 800a0a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a0aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a0ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a0ae:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a0b2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a0b6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a0ba:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a0be:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a0ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	431a      	orrs	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	b004      	add	sp, #16
 800a0e8:	4770      	bx	lr

0800a0ea <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800a0ea:	b480      	push	{r7}
 800a0ec:	b083      	sub	sp, #12
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a118:	2300      	movs	r3, #0
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	370c      	adds	r7, #12
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr

0800a126 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800a126:	b580      	push	{r7, lr}
 800a128:	b082      	sub	sp, #8
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2203      	movs	r2, #3
 800a132:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a134:	2002      	movs	r0, #2
 800a136:	f7f9 fbfd 	bl	8003934 <HAL_Delay>
  
  return HAL_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 0303 	and.w	r3, r3, #3
}
 800a154:	4618      	mov	r0, r3
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a17e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a184:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a18a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4313      	orrs	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a19a:	f023 030f 	bic.w	r3, r3, #15
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	431a      	orrs	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a1a6:	2300      	movs	r3, #0
}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3714      	adds	r7, #20
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr

0800a1b4 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	b2db      	uxtb	r3, r3
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr

0800a1ce <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a1ce:	b480      	push	{r7}
 800a1d0:	b085      	sub	sp, #20
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	3314      	adds	r3, #20
 800a1dc:	461a      	mov	r2, r3
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	4413      	add	r3, r2
 800a1e2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
}  
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	685a      	ldr	r2, [r3, #4]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a21a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a220:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a226:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	431a      	orrs	r2, r3
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a23e:	2300      	movs	r3, #0

}
 800a240:	4618      	mov	r0, r3
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b088      	sub	sp, #32
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a25a:	2310      	movs	r3, #16
 800a25c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a25e:	2340      	movs	r3, #64	; 0x40
 800a260:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a262:	2300      	movs	r3, #0
 800a264:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a266:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a26a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a26c:	f107 0308 	add.w	r3, r7, #8
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff ff74 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a278:	f241 3288 	movw	r2, #5000	; 0x1388
 800a27c:	2110      	movs	r1, #16
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 fa40 	bl	800a704 <SDMMC_GetCmdResp1>
 800a284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a286:	69fb      	ldr	r3, [r7, #28]
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3720      	adds	r7, #32
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b088      	sub	sp, #32
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a29e:	2311      	movs	r3, #17
 800a2a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2a2:	2340      	movs	r3, #64	; 0x40
 800a2a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2b0:	f107 0308 	add.w	r3, r7, #8
 800a2b4:	4619      	mov	r1, r3
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f7ff ff52 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c0:	2111      	movs	r1, #17
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	f000 fa1e 	bl	800a704 <SDMMC_GetCmdResp1>
 800a2c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2ca:	69fb      	ldr	r3, [r7, #28]
}
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	3720      	adds	r7, #32
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b088      	sub	sp, #32
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
 800a2dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a2e2:	2312      	movs	r3, #18
 800a2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2e6:	2340      	movs	r3, #64	; 0x40
 800a2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2f4:	f107 0308 	add.w	r3, r7, #8
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff ff30 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a300:	f241 3288 	movw	r2, #5000	; 0x1388
 800a304:	2112      	movs	r1, #18
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f000 f9fc 	bl	800a704 <SDMMC_GetCmdResp1>
 800a30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a30e:	69fb      	ldr	r3, [r7, #28]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3720      	adds	r7, #32
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b088      	sub	sp, #32
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a326:	2318      	movs	r3, #24
 800a328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a32a:	2340      	movs	r3, #64	; 0x40
 800a32c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a32e:	2300      	movs	r3, #0
 800a330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a336:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a338:	f107 0308 	add.w	r3, r7, #8
 800a33c:	4619      	mov	r1, r3
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7ff ff0e 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a344:	f241 3288 	movw	r2, #5000	; 0x1388
 800a348:	2118      	movs	r1, #24
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f9da 	bl	800a704 <SDMMC_GetCmdResp1>
 800a350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a352:	69fb      	ldr	r3, [r7, #28]
}
 800a354:	4618      	mov	r0, r3
 800a356:	3720      	adds	r7, #32
 800a358:	46bd      	mov	sp, r7
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b088      	sub	sp, #32
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
 800a364:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a36a:	2319      	movs	r3, #25
 800a36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a36e:	2340      	movs	r3, #64	; 0x40
 800a370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a372:	2300      	movs	r3, #0
 800a374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a37a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a37c:	f107 0308 	add.w	r3, r7, #8
 800a380:	4619      	mov	r1, r3
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f7ff feec 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a388:	f241 3288 	movw	r2, #5000	; 0x1388
 800a38c:	2119      	movs	r1, #25
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f9b8 	bl	800a704 <SDMMC_GetCmdResp1>
 800a394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a396:	69fb      	ldr	r3, [r7, #28]
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3720      	adds	r7, #32
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a3ac:	230c      	movs	r3, #12
 800a3ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3b0:	2340      	movs	r3, #64	; 0x40
 800a3b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3be:	f107 0308 	add.w	r3, r7, #8
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f7ff fecb 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a3ca:	4a05      	ldr	r2, [pc, #20]	; (800a3e0 <SDMMC_CmdStopTransfer+0x40>)
 800a3cc:	210c      	movs	r1, #12
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f000 f998 	bl	800a704 <SDMMC_GetCmdResp1>
 800a3d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3d6:	69fb      	ldr	r3, [r7, #28]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3720      	adds	r7, #32
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}
 800a3e0:	05f5e100 	.word	0x05f5e100

0800a3e4 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08a      	sub	sp, #40	; 0x28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a3f4:	2307      	movs	r3, #7
 800a3f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3f8:	2340      	movs	r3, #64	; 0x40
 800a3fa:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a404:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a406:	f107 0310 	add.w	r3, r7, #16
 800a40a:	4619      	mov	r1, r3
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f7ff fea7 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a412:	f241 3288 	movw	r2, #5000	; 0x1388
 800a416:	2107      	movs	r1, #7
 800a418:	68f8      	ldr	r0, [r7, #12]
 800a41a:	f000 f973 	bl	800a704 <SDMMC_GetCmdResp1>
 800a41e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a422:	4618      	mov	r0, r3
 800a424:	3728      	adds	r7, #40	; 0x28
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}

0800a42a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a42a:	b580      	push	{r7, lr}
 800a42c:	b088      	sub	sp, #32
 800a42e:	af00      	add	r7, sp, #0
 800a430:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a432:	2300      	movs	r3, #0
 800a434:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a436:	2300      	movs	r3, #0
 800a438:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a43a:	2300      	movs	r3, #0
 800a43c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a43e:	2300      	movs	r3, #0
 800a440:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a442:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a446:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a448:	f107 0308 	add.w	r3, r7, #8
 800a44c:	4619      	mov	r1, r3
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7ff fe86 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 f92d 	bl	800a6b4 <SDMMC_GetCmdError>
 800a45a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a45c:	69fb      	ldr	r3, [r7, #28]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3720      	adds	r7, #32
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a466:	b580      	push	{r7, lr}
 800a468:	b088      	sub	sp, #32
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a46e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a472:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a474:	2308      	movs	r3, #8
 800a476:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a478:	2340      	movs	r3, #64	; 0x40
 800a47a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a47c:	2300      	movs	r3, #0
 800a47e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a484:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a486:	f107 0308 	add.w	r3, r7, #8
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7ff fe67 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fb16 	bl	800aac4 <SDMMC_GetCmdResp7>
 800a498:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a49a:	69fb      	ldr	r3, [r7, #28]
}
 800a49c:	4618      	mov	r0, r3
 800a49e:	3720      	adds	r7, #32
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b088      	sub	sp, #32
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a4b2:	2337      	movs	r3, #55	; 0x37
 800a4b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4b6:	2340      	movs	r3, #64	; 0x40
 800a4b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4c4:	f107 0308 	add.w	r3, r7, #8
 800a4c8:	4619      	mov	r1, r3
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f7ff fe48 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4d4:	2137      	movs	r1, #55	; 0x37
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 f914 	bl	800a704 <SDMMC_GetCmdResp1>
 800a4dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4de:	69fb      	ldr	r3, [r7, #28]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3720      	adds	r7, #32
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b088      	sub	sp, #32
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a4fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a4fe:	2329      	movs	r3, #41	; 0x29
 800a500:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a502:	2340      	movs	r3, #64	; 0x40
 800a504:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a506:	2300      	movs	r3, #0
 800a508:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a50a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a50e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a510:	f107 0308 	add.w	r3, r7, #8
 800a514:	4619      	mov	r1, r3
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f7ff fe22 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fa23 	bl	800a968 <SDMMC_GetCmdResp3>
 800a522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a524:	69fb      	ldr	r3, [r7, #28]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3720      	adds	r7, #32
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b088      	sub	sp, #32
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a53c:	2306      	movs	r3, #6
 800a53e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a540:	2340      	movs	r3, #64	; 0x40
 800a542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a54c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a54e:	f107 0308 	add.w	r3, r7, #8
 800a552:	4619      	mov	r1, r3
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	f7ff fe03 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a55a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a55e:	2106      	movs	r1, #6
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f8cf 	bl	800a704 <SDMMC_GetCmdResp1>
 800a566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a568:	69fb      	ldr	r3, [r7, #28]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3720      	adds	r7, #32
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b088      	sub	sp, #32
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a57e:	2333      	movs	r3, #51	; 0x33
 800a580:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a582:	2340      	movs	r3, #64	; 0x40
 800a584:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a586:	2300      	movs	r3, #0
 800a588:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a58a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a58e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a590:	f107 0308 	add.w	r3, r7, #8
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff fde2 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a59c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5a0:	2133      	movs	r1, #51	; 0x33
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f8ae 	bl	800a704 <SDMMC_GetCmdResp1>
 800a5a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5aa:	69fb      	ldr	r3, [r7, #28]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	3720      	adds	r7, #32
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	bd80      	pop	{r7, pc}

0800a5b4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b088      	sub	sp, #32
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a5c4:	23c0      	movs	r3, #192	; 0xc0
 800a5c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a5cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a5d2:	f107 0308 	add.w	r3, r7, #8
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fdc1 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f000 f97c 	bl	800a8dc <SDMMC_GetCmdResp2>
 800a5e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5e6:	69fb      	ldr	r3, [r7, #28]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3720      	adds	r7, #32
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b088      	sub	sp, #32
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a5fe:	2309      	movs	r3, #9
 800a600:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a602:	23c0      	movs	r3, #192	; 0xc0
 800a604:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a606:	2300      	movs	r3, #0
 800a608:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a60a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a60e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a610:	f107 0308 	add.w	r3, r7, #8
 800a614:	4619      	mov	r1, r3
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f7ff fda2 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 f95d 	bl	800a8dc <SDMMC_GetCmdResp2>
 800a622:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a624:	69fb      	ldr	r3, [r7, #28]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3720      	adds	r7, #32
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b088      	sub	sp, #32
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a638:	2300      	movs	r3, #0
 800a63a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a63c:	2303      	movs	r3, #3
 800a63e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a640:	2340      	movs	r3, #64	; 0x40
 800a642:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a644:	2300      	movs	r3, #0
 800a646:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a648:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a64c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a64e:	f107 0308 	add.w	r3, r7, #8
 800a652:	4619      	mov	r1, r3
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f7ff fd83 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	2103      	movs	r1, #3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 f9bc 	bl	800a9dc <SDMMC_GetCmdResp6>
 800a664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a666:	69fb      	ldr	r3, [r7, #28]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3720      	adds	r7, #32
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b088      	sub	sp, #32
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a67e:	230d      	movs	r3, #13
 800a680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a682:	2340      	movs	r3, #64	; 0x40
 800a684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a686:	2300      	movs	r3, #0
 800a688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a68a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a68e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a690:	f107 0308 	add.w	r3, r7, #8
 800a694:	4619      	mov	r1, r3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f7ff fd62 	bl	800a160 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a69c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a0:	210d      	movs	r1, #13
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f82e 	bl	800a704 <SDMMC_GetCmdResp1>
 800a6a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6aa:	69fb      	ldr	r3, [r7, #28]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3720      	adds	r7, #32
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a6b4:	b490      	push	{r4, r7}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6bc:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <SDMMC_GetCmdError+0x48>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a0f      	ldr	r2, [pc, #60]	; (800a700 <SDMMC_GetCmdError+0x4c>)
 800a6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c6:	0a5b      	lsrs	r3, r3, #9
 800a6c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a6d0:	4623      	mov	r3, r4
 800a6d2:	1e5c      	subs	r4, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d102      	bne.n	800a6de <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6dc:	e009      	b.n	800a6f2 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0f2      	beq.n	800a6d0 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	22c5      	movs	r2, #197	; 0xc5
 800a6ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bc90      	pop	{r4, r7}
 800a6fa:	4770      	bx	lr
 800a6fc:	20000014 	.word	0x20000014
 800a700:	10624dd3 	.word	0x10624dd3

0800a704 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a704:	b590      	push	{r4, r7, lr}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	460b      	mov	r3, r1
 800a70e:	607a      	str	r2, [r7, #4]
 800a710:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a712:	4b6f      	ldr	r3, [pc, #444]	; (800a8d0 <SDMMC_GetCmdResp1+0x1cc>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a6f      	ldr	r2, [pc, #444]	; (800a8d4 <SDMMC_GetCmdResp1+0x1d0>)
 800a718:	fba2 2303 	umull	r2, r3, r2, r3
 800a71c:	0a5b      	lsrs	r3, r3, #9
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a724:	4623      	mov	r3, r4
 800a726:	1e5c      	subs	r4, r3, #1
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d102      	bne.n	800a732 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a72c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a730:	e0c9      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a736:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d0f0      	beq.n	800a724 <SDMMC_GetCmdResp1+0x20>
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1eb      	bne.n	800a724 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d004      	beq.n	800a762 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2204      	movs	r2, #4
 800a75c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a75e:	2304      	movs	r3, #4
 800a760:	e0b1      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d004      	beq.n	800a778 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2201      	movs	r2, #1
 800a772:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a774:	2301      	movs	r3, #1
 800a776:	e0a6      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	22c5      	movs	r2, #197	; 0xc5
 800a77c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f7ff fd18 	bl	800a1b4 <SDIO_GetCommandResponse>
 800a784:	4603      	mov	r3, r0
 800a786:	461a      	mov	r2, r3
 800a788:	7afb      	ldrb	r3, [r7, #11]
 800a78a:	4293      	cmp	r3, r2
 800a78c:	d001      	beq.n	800a792 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a78e:	2301      	movs	r3, #1
 800a790:	e099      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a792:	2100      	movs	r1, #0
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f7ff fd1a 	bl	800a1ce <SDIO_GetResponse>
 800a79a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a79c:	693a      	ldr	r2, [r7, #16]
 800a79e:	4b4e      	ldr	r3, [pc, #312]	; (800a8d8 <SDMMC_GetCmdResp1+0x1d4>)
 800a7a0:	4013      	ands	r3, r2
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	e08d      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	da02      	bge.n	800a7b6 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a7b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7b4:	e087      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a7c0:	2340      	movs	r3, #64	; 0x40
 800a7c2:	e080      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a7ce:	2380      	movs	r3, #128	; 0x80
 800a7d0:	e079      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d002      	beq.n	800a7e2 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a7dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a7e0:	e071      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d002      	beq.n	800a7f2 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a7ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a7f0:	e069      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a7fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a800:	e061      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a80c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a810:	e059      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a81c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a820:	e051      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d002      	beq.n	800a832 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a82c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a830:	e049      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a83c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a840:	e041      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800a84c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a850:	e039      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a85c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a860:	e031      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a86c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a870:	e029      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a87c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a880:	e021      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a88c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a890:	e019      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a89c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8a0:	e011      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a8ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a8b0:	e009      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	f003 0308 	and.w	r3, r3, #8
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a8bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a8c0:	e001      	b.n	800a8c6 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a8c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	371c      	adds	r7, #28
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd90      	pop	{r4, r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000014 	.word	0x20000014
 800a8d4:	10624dd3 	.word	0x10624dd3
 800a8d8:	fdffe008 	.word	0xfdffe008

0800a8dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a8dc:	b490      	push	{r4, r7}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8e4:	4b1e      	ldr	r3, [pc, #120]	; (800a960 <SDMMC_GetCmdResp2+0x84>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a1e      	ldr	r2, [pc, #120]	; (800a964 <SDMMC_GetCmdResp2+0x88>)
 800a8ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ee:	0a5b      	lsrs	r3, r3, #9
 800a8f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a8f8:	4623      	mov	r3, r4
 800a8fa:	1e5c      	subs	r4, r3, #1
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d102      	bne.n	800a906 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a900:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a904:	e026      	b.n	800a954 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a90a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a912:	2b00      	cmp	r3, #0
 800a914:	d0f0      	beq.n	800a8f8 <SDMMC_GetCmdResp2+0x1c>
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1eb      	bne.n	800a8f8 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d004      	beq.n	800a936 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2204      	movs	r2, #4
 800a930:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a932:	2304      	movs	r3, #4
 800a934:	e00e      	b.n	800a954 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93a:	f003 0301 	and.w	r3, r3, #1
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d004      	beq.n	800a94c <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a948:	2301      	movs	r3, #1
 800a94a:	e003      	b.n	800a954 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	22c5      	movs	r2, #197	; 0xc5
 800a950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bc90      	pop	{r4, r7}
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	20000014 	.word	0x20000014
 800a964:	10624dd3 	.word	0x10624dd3

0800a968 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a968:	b490      	push	{r4, r7}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a970:	4b18      	ldr	r3, [pc, #96]	; (800a9d4 <SDMMC_GetCmdResp3+0x6c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a18      	ldr	r2, [pc, #96]	; (800a9d8 <SDMMC_GetCmdResp3+0x70>)
 800a976:	fba2 2303 	umull	r2, r3, r2, r3
 800a97a:	0a5b      	lsrs	r3, r3, #9
 800a97c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a980:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a984:	4623      	mov	r3, r4
 800a986:	1e5c      	subs	r4, r3, #1
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d102      	bne.n	800a992 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a98c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a990:	e01b      	b.n	800a9ca <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a996:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d0f0      	beq.n	800a984 <SDMMC_GetCmdResp3+0x1c>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1eb      	bne.n	800a984 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b0:	f003 0304 	and.w	r3, r3, #4
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d004      	beq.n	800a9c2 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2204      	movs	r2, #4
 800a9bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9be:	2304      	movs	r3, #4
 800a9c0:	e003      	b.n	800a9ca <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	22c5      	movs	r2, #197	; 0xc5
 800a9c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bc90      	pop	{r4, r7}
 800a9d2:	4770      	bx	lr
 800a9d4:	20000014 	.word	0x20000014
 800a9d8:	10624dd3 	.word	0x10624dd3

0800a9dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a9dc:	b590      	push	{r4, r7, lr}
 800a9de:	b087      	sub	sp, #28
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	607a      	str	r2, [r7, #4]
 800a9e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a9ea:	4b34      	ldr	r3, [pc, #208]	; (800aabc <SDMMC_GetCmdResp6+0xe0>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a34      	ldr	r2, [pc, #208]	; (800aac0 <SDMMC_GetCmdResp6+0xe4>)
 800a9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f4:	0a5b      	lsrs	r3, r3, #9
 800a9f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9fa:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a9fe:	4623      	mov	r3, r4
 800aa00:	1e5c      	subs	r4, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d102      	bne.n	800aa0c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa0a:	e052      	b.n	800aab2 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa10:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d0f0      	beq.n	800a9fe <SDMMC_GetCmdResp6+0x22>
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d1eb      	bne.n	800a9fe <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa2a:	f003 0304 	and.w	r3, r3, #4
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d004      	beq.n	800aa3c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2204      	movs	r2, #4
 800aa36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa38:	2304      	movs	r3, #4
 800aa3a:	e03a      	b.n	800aab2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d004      	beq.n	800aa52 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	e02f      	b.n	800aab2 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800aa52:	68f8      	ldr	r0, [r7, #12]
 800aa54:	f7ff fbae 	bl	800a1b4 <SDIO_GetCommandResponse>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	7afb      	ldrb	r3, [r7, #11]
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d001      	beq.n	800aa66 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e025      	b.n	800aab2 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	22c5      	movs	r2, #197	; 0xc5
 800aa6a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800aa6c:	2100      	movs	r1, #0
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7ff fbad 	bl	800a1ce <SDIO_GetResponse>
 800aa74:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d106      	bne.n	800aa8e <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	0c1b      	lsrs	r3, r3, #16
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	e011      	b.n	800aab2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d002      	beq.n	800aa9e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aa98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aa9c:	e009      	b.n	800aab2 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d002      	beq.n	800aaae <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aaa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaac:	e001      	b.n	800aab2 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aaae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	371c      	adds	r7, #28
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd90      	pop	{r4, r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000014 	.word	0x20000014
 800aac0:	10624dd3 	.word	0x10624dd3

0800aac4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800aac4:	b490      	push	{r4, r7}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aacc:	4b21      	ldr	r3, [pc, #132]	; (800ab54 <SDMMC_GetCmdResp7+0x90>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a21      	ldr	r2, [pc, #132]	; (800ab58 <SDMMC_GetCmdResp7+0x94>)
 800aad2:	fba2 2303 	umull	r2, r3, r2, r3
 800aad6:	0a5b      	lsrs	r3, r3, #9
 800aad8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aadc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800aae0:	4623      	mov	r3, r4
 800aae2:	1e5c      	subs	r4, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d102      	bne.n	800aaee <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aae8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aaec:	e02c      	b.n	800ab48 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d0f0      	beq.n	800aae0 <SDMMC_GetCmdResp7+0x1c>
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1eb      	bne.n	800aae0 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d004      	beq.n	800ab1e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	2204      	movs	r2, #4
 800ab18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab1a:	2304      	movs	r3, #4
 800ab1c:	e014      	b.n	800ab48 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d004      	beq.n	800ab34 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e009      	b.n	800ab48 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d002      	beq.n	800ab46 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2240      	movs	r2, #64	; 0x40
 800ab44:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ab46:	2300      	movs	r3, #0
  
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bc90      	pop	{r4, r7}
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20000014 	.word	0x20000014
 800ab58:	10624dd3 	.word	0x10624dd3

0800ab5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
 800ab66:	f107 001c 	add.w	r0, r7, #28
 800ab6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	2b01      	cmp	r3, #1
 800ab72:	d122      	bne.n	800abba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	68db      	ldr	r3, [r3, #12]
 800ab84:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ab88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ab9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d105      	bne.n	800abae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f001 fa7c 	bl	800c0ac <USB_CoreReset>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]
 800abb8:	e01a      	b.n	800abf0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f001 fa70 	bl	800c0ac <USB_CoreReset>
 800abcc:	4603      	mov	r3, r0
 800abce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800abd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	639a      	str	r2, [r3, #56]	; 0x38
 800abe2:	e005      	b.n	800abf0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d10b      	bne.n	800ac0e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	689b      	ldr	r3, [r3, #8]
 800abfa:	f043 0206 	orr.w	r2, r3, #6
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f043 0220 	orr.w	r2, r3, #32
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ac0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac1a:	b004      	add	sp, #16
 800ac1c:	4770      	bx	lr
	...

0800ac20 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	2b02      	cmp	r3, #2
 800ac32:	d165      	bne.n	800ad00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	4a41      	ldr	r2, [pc, #260]	; (800ad3c <USB_SetTurnaroundTime+0x11c>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d906      	bls.n	800ac4a <USB_SetTurnaroundTime+0x2a>
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	4a40      	ldr	r2, [pc, #256]	; (800ad40 <USB_SetTurnaroundTime+0x120>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d802      	bhi.n	800ac4a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ac44:	230f      	movs	r3, #15
 800ac46:	617b      	str	r3, [r7, #20]
 800ac48:	e062      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	4a3c      	ldr	r2, [pc, #240]	; (800ad40 <USB_SetTurnaroundTime+0x120>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d906      	bls.n	800ac60 <USB_SetTurnaroundTime+0x40>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	4a3b      	ldr	r2, [pc, #236]	; (800ad44 <USB_SetTurnaroundTime+0x124>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d802      	bhi.n	800ac60 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ac5a:	230e      	movs	r3, #14
 800ac5c:	617b      	str	r3, [r7, #20]
 800ac5e:	e057      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	4a38      	ldr	r2, [pc, #224]	; (800ad44 <USB_SetTurnaroundTime+0x124>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d906      	bls.n	800ac76 <USB_SetTurnaroundTime+0x56>
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	4a37      	ldr	r2, [pc, #220]	; (800ad48 <USB_SetTurnaroundTime+0x128>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d802      	bhi.n	800ac76 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ac70:	230d      	movs	r3, #13
 800ac72:	617b      	str	r3, [r7, #20]
 800ac74:	e04c      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	4a33      	ldr	r2, [pc, #204]	; (800ad48 <USB_SetTurnaroundTime+0x128>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d906      	bls.n	800ac8c <USB_SetTurnaroundTime+0x6c>
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	4a32      	ldr	r2, [pc, #200]	; (800ad4c <USB_SetTurnaroundTime+0x12c>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d802      	bhi.n	800ac8c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ac86:	230c      	movs	r3, #12
 800ac88:	617b      	str	r3, [r7, #20]
 800ac8a:	e041      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	4a2f      	ldr	r2, [pc, #188]	; (800ad4c <USB_SetTurnaroundTime+0x12c>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d906      	bls.n	800aca2 <USB_SetTurnaroundTime+0x82>
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	4a2e      	ldr	r2, [pc, #184]	; (800ad50 <USB_SetTurnaroundTime+0x130>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d802      	bhi.n	800aca2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ac9c:	230b      	movs	r3, #11
 800ac9e:	617b      	str	r3, [r7, #20]
 800aca0:	e036      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	4a2a      	ldr	r2, [pc, #168]	; (800ad50 <USB_SetTurnaroundTime+0x130>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d906      	bls.n	800acb8 <USB_SetTurnaroundTime+0x98>
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	4a29      	ldr	r2, [pc, #164]	; (800ad54 <USB_SetTurnaroundTime+0x134>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d802      	bhi.n	800acb8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800acb2:	230a      	movs	r3, #10
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	e02b      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	4a26      	ldr	r2, [pc, #152]	; (800ad54 <USB_SetTurnaroundTime+0x134>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d906      	bls.n	800acce <USB_SetTurnaroundTime+0xae>
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	4a25      	ldr	r2, [pc, #148]	; (800ad58 <USB_SetTurnaroundTime+0x138>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d802      	bhi.n	800acce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800acc8:	2309      	movs	r3, #9
 800acca:	617b      	str	r3, [r7, #20]
 800accc:	e020      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	4a21      	ldr	r2, [pc, #132]	; (800ad58 <USB_SetTurnaroundTime+0x138>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d906      	bls.n	800ace4 <USB_SetTurnaroundTime+0xc4>
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	4a20      	ldr	r2, [pc, #128]	; (800ad5c <USB_SetTurnaroundTime+0x13c>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d802      	bhi.n	800ace4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800acde:	2308      	movs	r3, #8
 800ace0:	617b      	str	r3, [r7, #20]
 800ace2:	e015      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	4a1d      	ldr	r2, [pc, #116]	; (800ad5c <USB_SetTurnaroundTime+0x13c>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d906      	bls.n	800acfa <USB_SetTurnaroundTime+0xda>
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	4a1c      	ldr	r2, [pc, #112]	; (800ad60 <USB_SetTurnaroundTime+0x140>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d802      	bhi.n	800acfa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800acf4:	2307      	movs	r3, #7
 800acf6:	617b      	str	r3, [r7, #20]
 800acf8:	e00a      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800acfa:	2306      	movs	r3, #6
 800acfc:	617b      	str	r3, [r7, #20]
 800acfe:	e007      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d102      	bne.n	800ad0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ad06:	2309      	movs	r3, #9
 800ad08:	617b      	str	r3, [r7, #20]
 800ad0a:	e001      	b.n	800ad10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ad0c:	2309      	movs	r3, #9
 800ad0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	68da      	ldr	r2, [r3, #12]
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	029b      	lsls	r3, r3, #10
 800ad24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ad28:	431a      	orrs	r2, r3
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad2e:	2300      	movs	r3, #0
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	371c      	adds	r7, #28
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	00d8acbf 	.word	0x00d8acbf
 800ad40:	00e4e1bf 	.word	0x00e4e1bf
 800ad44:	00f423ff 	.word	0x00f423ff
 800ad48:	0106737f 	.word	0x0106737f
 800ad4c:	011a499f 	.word	0x011a499f
 800ad50:	01312cff 	.word	0x01312cff
 800ad54:	014ca43f 	.word	0x014ca43f
 800ad58:	016e35ff 	.word	0x016e35ff
 800ad5c:	01a6ab1f 	.word	0x01a6ab1f
 800ad60:	01e847ff 	.word	0x01e847ff

0800ad64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	f043 0201 	orr.w	r2, r3, #1
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad86:	b480      	push	{r7}
 800ad88:	b083      	sub	sp, #12
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	689b      	ldr	r3, [r3, #8]
 800ad92:	f023 0201 	bic.w	r2, r3, #1
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	460b      	mov	r3, r1
 800adb2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	68db      	ldr	r3, [r3, #12]
 800adb8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800adc0:	78fb      	ldrb	r3, [r7, #3]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d106      	bne.n	800add4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68db      	ldr	r3, [r3, #12]
 800adca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	60da      	str	r2, [r3, #12]
 800add2:	e00b      	b.n	800adec <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d106      	bne.n	800ade8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68db      	ldr	r3, [r3, #12]
 800adde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	60da      	str	r2, [r3, #12]
 800ade6:	e001      	b.n	800adec <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e003      	b.n	800adf4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800adec:	2032      	movs	r0, #50	; 0x32
 800adee:	f7f8 fda1 	bl	8003934 <HAL_Delay>

  return HAL_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3708      	adds	r7, #8
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800adfc:	b084      	sub	sp, #16
 800adfe:	b580      	push	{r7, lr}
 800ae00:	b086      	sub	sp, #24
 800ae02:	af00      	add	r7, sp, #0
 800ae04:	6078      	str	r0, [r7, #4]
 800ae06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ae0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ae16:	2300      	movs	r3, #0
 800ae18:	613b      	str	r3, [r7, #16]
 800ae1a:	e009      	b.n	800ae30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	3340      	adds	r3, #64	; 0x40
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	2200      	movs	r2, #0
 800ae28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	3301      	adds	r3, #1
 800ae2e:	613b      	str	r3, [r7, #16]
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	2b0e      	cmp	r3, #14
 800ae34:	d9f2      	bls.n	800ae1c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ae36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d112      	bne.n	800ae62 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae40:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae58:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	639a      	str	r2, [r3, #56]	; 0x38
 800ae60:	e00b      	b.n	800ae7a <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae72:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ae80:	461a      	mov	r2, r3
 800ae82:	2300      	movs	r3, #0
 800ae84:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae94:	461a      	mov	r2, r3
 800ae96:	680b      	ldr	r3, [r1, #0]
 800ae98:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	d10c      	bne.n	800aeba <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d104      	bne.n	800aeb0 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aea6:	2100      	movs	r1, #0
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f961 	bl	800b170 <USB_SetDevSpeed>
 800aeae:	e008      	b.n	800aec2 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aeb0:	2101      	movs	r1, #1
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f95c 	bl	800b170 <USB_SetDevSpeed>
 800aeb8:	e003      	b.n	800aec2 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aeba:	2103      	movs	r1, #3
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f000 f957 	bl	800b170 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aec2:	2110      	movs	r1, #16
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f90b 	bl	800b0e0 <USB_FlushTxFifo>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d001      	beq.n	800aed4 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800aed0:	2301      	movs	r3, #1
 800aed2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f000 f929 	bl	800b12c <USB_FlushRxFifo>
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeea:	461a      	mov	r2, r3
 800aeec:	2300      	movs	r3, #0
 800aeee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef6:	461a      	mov	r2, r3
 800aef8:	2300      	movs	r3, #0
 800aefa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af02:	461a      	mov	r2, r3
 800af04:	2300      	movs	r3, #0
 800af06:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af08:	2300      	movs	r3, #0
 800af0a:	613b      	str	r3, [r7, #16]
 800af0c:	e043      	b.n	800af96 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	015a      	lsls	r2, r3, #5
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	4413      	add	r3, r2
 800af16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af24:	d118      	bne.n	800af58 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10a      	bne.n	800af42 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	4413      	add	r3, r2
 800af34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af38:	461a      	mov	r2, r3
 800af3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af3e:	6013      	str	r3, [r2, #0]
 800af40:	e013      	b.n	800af6a <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	015a      	lsls	r2, r3, #5
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	4413      	add	r3, r2
 800af4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af4e:	461a      	mov	r2, r3
 800af50:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	e008      	b.n	800af6a <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af58:	693b      	ldr	r3, [r7, #16]
 800af5a:	015a      	lsls	r2, r3, #5
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4413      	add	r3, r2
 800af60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af64:	461a      	mov	r2, r3
 800af66:	2300      	movs	r3, #0
 800af68:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	015a      	lsls	r2, r3, #5
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	4413      	add	r3, r2
 800af72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af76:	461a      	mov	r2, r3
 800af78:	2300      	movs	r3, #0
 800af7a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800af7c:	693b      	ldr	r3, [r7, #16]
 800af7e:	015a      	lsls	r2, r3, #5
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	4413      	add	r3, r2
 800af84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af88:	461a      	mov	r2, r3
 800af8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af8e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	3301      	adds	r3, #1
 800af94:	613b      	str	r3, [r7, #16]
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	693a      	ldr	r2, [r7, #16]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d3b7      	bcc.n	800af0e <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af9e:	2300      	movs	r3, #0
 800afa0:	613b      	str	r3, [r7, #16]
 800afa2:	e043      	b.n	800b02c <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	015a      	lsls	r2, r3, #5
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	4413      	add	r3, r2
 800afac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afba:	d118      	bne.n	800afee <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800afc2:	693b      	ldr	r3, [r7, #16]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afce:	461a      	mov	r2, r3
 800afd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	e013      	b.n	800b000 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	015a      	lsls	r2, r3, #5
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	4413      	add	r3, r2
 800afe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe4:	461a      	mov	r2, r3
 800afe6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800afea:	6013      	str	r3, [r2, #0]
 800afec:	e008      	b.n	800b000 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	015a      	lsls	r2, r3, #5
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4413      	add	r3, r2
 800aff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affa:	461a      	mov	r2, r3
 800affc:	2300      	movs	r3, #0
 800affe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	015a      	lsls	r2, r3, #5
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	4413      	add	r3, r2
 800b008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b00c:	461a      	mov	r2, r3
 800b00e:	2300      	movs	r3, #0
 800b010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01e:	461a      	mov	r2, r3
 800b020:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b024:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	3301      	adds	r3, #1
 800b02a:	613b      	str	r3, [r7, #16]
 800b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02e:	693a      	ldr	r2, [r7, #16]
 800b030:	429a      	cmp	r2, r3
 800b032:	d3b7      	bcc.n	800afa4 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b03a:	691b      	ldr	r3, [r3, #16]
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b042:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b046:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d111      	bne.n	800b072 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b054:	461a      	mov	r2, r3
 800b056:	4b20      	ldr	r3, [pc, #128]	; (800b0d8 <USB_DevInit+0x2dc>)
 800b058:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b062:	68fa      	ldr	r2, [r7, #12]
 800b064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b06c:	f043 0303 	orr.w	r3, r3, #3
 800b070:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b07e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b082:	2b00      	cmp	r3, #0
 800b084:	d105      	bne.n	800b092 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	f043 0210 	orr.w	r2, r3, #16
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	699a      	ldr	r2, [r3, #24]
 800b096:	4b11      	ldr	r3, [pc, #68]	; (800b0dc <USB_DevInit+0x2e0>)
 800b098:	4313      	orrs	r3, r2
 800b09a:	687a      	ldr	r2, [r7, #4]
 800b09c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d005      	beq.n	800b0b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	699b      	ldr	r3, [r3, #24]
 800b0a8:	f043 0208 	orr.w	r2, r3, #8
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b2:	2b01      	cmp	r3, #1
 800b0b4:	d107      	bne.n	800b0c6 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0be:	f043 0304 	orr.w	r3, r3, #4
 800b0c2:	687a      	ldr	r2, [r7, #4]
 800b0c4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b0c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3718      	adds	r7, #24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0d2:	b004      	add	sp, #16
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	00800100 	.word	0x00800100
 800b0dc:	803c3800 	.word	0x803c3800

0800b0e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
 800b0e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	019b      	lsls	r3, r3, #6
 800b0f2:	f043 0220 	orr.w	r2, r3, #32
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	60fb      	str	r3, [r7, #12]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4a09      	ldr	r2, [pc, #36]	; (800b128 <USB_FlushTxFifo+0x48>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d901      	bls.n	800b10c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e006      	b.n	800b11a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	f003 0320 	and.w	r3, r3, #32
 800b114:	2b20      	cmp	r3, #32
 800b116:	d0f0      	beq.n	800b0fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	00030d40 	.word	0x00030d40

0800b12c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b085      	sub	sp, #20
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b134:	2300      	movs	r3, #0
 800b136:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2210      	movs	r2, #16
 800b13c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	3301      	adds	r3, #1
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	4a09      	ldr	r2, [pc, #36]	; (800b16c <USB_FlushRxFifo+0x40>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	d901      	bls.n	800b150 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b14c:	2303      	movs	r3, #3
 800b14e:	e006      	b.n	800b15e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b10      	cmp	r3, #16
 800b15a:	d0f0      	beq.n	800b13e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3714      	adds	r7, #20
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	00030d40 	.word	0x00030d40

0800b170 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	460b      	mov	r3, r1
 800b17a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	78fb      	ldrb	r3, [r7, #3]
 800b18a:	68f9      	ldr	r1, [r7, #12]
 800b18c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b190:	4313      	orrs	r3, r2
 800b192:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b1a2:	b480      	push	{r7}
 800b1a4:	b087      	sub	sp, #28
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f003 0306 	and.w	r3, r3, #6
 800b1ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d102      	bne.n	800b1c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	75fb      	strb	r3, [r7, #23]
 800b1c6:	e00a      	b.n	800b1de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d002      	beq.n	800b1d4 <USB_GetDevSpeed+0x32>
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b06      	cmp	r3, #6
 800b1d2:	d102      	bne.n	800b1da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	75fb      	strb	r3, [r7, #23]
 800b1d8:	e001      	b.n	800b1de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b1da:	230f      	movs	r3, #15
 800b1dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	371c      	adds	r7, #28
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b085      	sub	sp, #20
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	785b      	ldrb	r3, [r3, #1]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d13a      	bne.n	800b27e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b20e:	69da      	ldr	r2, [r3, #28]
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	f003 030f 	and.w	r3, r3, #15
 800b218:	2101      	movs	r1, #1
 800b21a:	fa01 f303 	lsl.w	r3, r1, r3
 800b21e:	b29b      	uxth	r3, r3
 800b220:	68f9      	ldr	r1, [r7, #12]
 800b222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b226:	4313      	orrs	r3, r2
 800b228:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d155      	bne.n	800b2ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b24c:	681a      	ldr	r2, [r3, #0]
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	78db      	ldrb	r3, [r3, #3]
 800b25a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b25c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	059b      	lsls	r3, r3, #22
 800b262:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b264:	4313      	orrs	r3, r2
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	0151      	lsls	r1, r2, #5
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	440a      	add	r2, r1
 800b26e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	e036      	b.n	800b2ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b284:	69da      	ldr	r2, [r3, #28]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	f003 030f 	and.w	r3, r3, #15
 800b28e:	2101      	movs	r1, #1
 800b290:	fa01 f303 	lsl.w	r3, r1, r3
 800b294:	041b      	lsls	r3, r3, #16
 800b296:	68f9      	ldr	r1, [r7, #12]
 800b298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b29c:	4313      	orrs	r3, r2
 800b29e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d11a      	bne.n	800b2ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	015a      	lsls	r2, r3, #5
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	4413      	add	r3, r2
 800b2be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	78db      	ldrb	r3, [r3, #3]
 800b2d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b2d2:	430b      	orrs	r3, r1
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	68ba      	ldr	r2, [r7, #8]
 800b2d8:	0151      	lsls	r1, r2, #5
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	440a      	add	r2, r1
 800b2de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b2ec:	2300      	movs	r3, #0
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3714      	adds	r7, #20
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f8:	4770      	bx	lr
	...

0800b2fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
 800b304:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	785b      	ldrb	r3, [r3, #1]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d135      	bne.n	800b384 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	f003 030f 	and.w	r3, r3, #15
 800b328:	2101      	movs	r1, #1
 800b32a:	fa01 f303 	lsl.w	r3, r1, r3
 800b32e:	b29b      	uxth	r3, r3
 800b330:	43db      	mvns	r3, r3
 800b332:	68f9      	ldr	r1, [r7, #12]
 800b334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b338:	4013      	ands	r3, r2
 800b33a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b342:	69da      	ldr	r2, [r3, #28]
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	f003 030f 	and.w	r3, r3, #15
 800b34c:	2101      	movs	r1, #1
 800b34e:	fa01 f303 	lsl.w	r3, r1, r3
 800b352:	b29b      	uxth	r3, r3
 800b354:	43db      	mvns	r3, r3
 800b356:	68f9      	ldr	r1, [r7, #12]
 800b358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b35c:	4013      	ands	r3, r2
 800b35e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	015a      	lsls	r2, r3, #5
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4413      	add	r3, r2
 800b368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b36c:	681a      	ldr	r2, [r3, #0]
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	0159      	lsls	r1, r3, #5
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	440b      	add	r3, r1
 800b376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b37a:	4619      	mov	r1, r3
 800b37c:	4b1f      	ldr	r3, [pc, #124]	; (800b3fc <USB_DeactivateEndpoint+0x100>)
 800b37e:	4013      	ands	r3, r2
 800b380:	600b      	str	r3, [r1, #0]
 800b382:	e034      	b.n	800b3ee <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	f003 030f 	and.w	r3, r3, #15
 800b394:	2101      	movs	r1, #1
 800b396:	fa01 f303 	lsl.w	r3, r1, r3
 800b39a:	041b      	lsls	r3, r3, #16
 800b39c:	43db      	mvns	r3, r3
 800b39e:	68f9      	ldr	r1, [r7, #12]
 800b3a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3a4:	4013      	ands	r3, r2
 800b3a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ae:	69da      	ldr	r2, [r3, #28]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	f003 030f 	and.w	r3, r3, #15
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b3be:	041b      	lsls	r3, r3, #16
 800b3c0:	43db      	mvns	r3, r3
 800b3c2:	68f9      	ldr	r1, [r7, #12]
 800b3c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	0159      	lsls	r1, r3, #5
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	440b      	add	r3, r1
 800b3e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4b05      	ldr	r3, [pc, #20]	; (800b400 <USB_DeactivateEndpoint+0x104>)
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	ec337800 	.word	0xec337800
 800b400:	eff37800 	.word	0xeff37800

0800b404 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b08a      	sub	sp, #40	; 0x28
 800b408:	af02      	add	r7, sp, #8
 800b40a:	60f8      	str	r0, [r7, #12]
 800b40c:	60b9      	str	r1, [r7, #8]
 800b40e:	4613      	mov	r3, r2
 800b410:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	785b      	ldrb	r3, [r3, #1]
 800b420:	2b01      	cmp	r3, #1
 800b422:	f040 815c 	bne.w	800b6de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	695b      	ldr	r3, [r3, #20]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d132      	bne.n	800b494 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	4413      	add	r3, r2
 800b436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43a:	691b      	ldr	r3, [r3, #16]
 800b43c:	69ba      	ldr	r2, [r7, #24]
 800b43e:	0151      	lsls	r1, r2, #5
 800b440:	69fa      	ldr	r2, [r7, #28]
 800b442:	440a      	add	r2, r1
 800b444:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b448:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b44c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b450:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	015a      	lsls	r2, r3, #5
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	4413      	add	r3, r2
 800b45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	0151      	lsls	r1, r2, #5
 800b464:	69fa      	ldr	r2, [r7, #28]
 800b466:	440a      	add	r2, r1
 800b468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b46c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b470:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	4413      	add	r3, r2
 800b47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	69ba      	ldr	r2, [r7, #24]
 800b482:	0151      	lsls	r1, r2, #5
 800b484:	69fa      	ldr	r2, [r7, #28]
 800b486:	440a      	add	r2, r1
 800b488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b48c:	0cdb      	lsrs	r3, r3, #19
 800b48e:	04db      	lsls	r3, r3, #19
 800b490:	6113      	str	r3, [r2, #16]
 800b492:	e074      	b.n	800b57e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	015a      	lsls	r2, r3, #5
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	4413      	add	r3, r2
 800b49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	69ba      	ldr	r2, [r7, #24]
 800b4a4:	0151      	lsls	r1, r2, #5
 800b4a6:	69fa      	ldr	r2, [r7, #28]
 800b4a8:	440a      	add	r2, r1
 800b4aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ae:	0cdb      	lsrs	r3, r3, #19
 800b4b0:	04db      	lsls	r3, r3, #19
 800b4b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b4b4:	69bb      	ldr	r3, [r7, #24]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	69ba      	ldr	r2, [r7, #24]
 800b4c4:	0151      	lsls	r1, r2, #5
 800b4c6:	69fa      	ldr	r2, [r7, #28]
 800b4c8:	440a      	add	r2, r1
 800b4ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b4d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b4d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e4:	691a      	ldr	r2, [r3, #16]
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	6959      	ldr	r1, [r3, #20]
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	440b      	add	r3, r1
 800b4f0:	1e59      	subs	r1, r3, #1
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b4fa:	04d9      	lsls	r1, r3, #19
 800b4fc:	4b9d      	ldr	r3, [pc, #628]	; (800b774 <USB_EPStartXfer+0x370>)
 800b4fe:	400b      	ands	r3, r1
 800b500:	69b9      	ldr	r1, [r7, #24]
 800b502:	0148      	lsls	r0, r1, #5
 800b504:	69f9      	ldr	r1, [r7, #28]
 800b506:	4401      	add	r1, r0
 800b508:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b50c:	4313      	orrs	r3, r2
 800b50e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b510:	69bb      	ldr	r3, [r7, #24]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	69fb      	ldr	r3, [r7, #28]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51c:	691a      	ldr	r2, [r3, #16]
 800b51e:	68bb      	ldr	r3, [r7, #8]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b526:	69b9      	ldr	r1, [r7, #24]
 800b528:	0148      	lsls	r0, r1, #5
 800b52a:	69f9      	ldr	r1, [r7, #28]
 800b52c:	4401      	add	r1, r0
 800b52e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b532:	4313      	orrs	r3, r2
 800b534:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	78db      	ldrb	r3, [r3, #3]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d11f      	bne.n	800b57e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	015a      	lsls	r2, r3, #5
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	4413      	add	r3, r2
 800b546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	69ba      	ldr	r2, [r7, #24]
 800b54e:	0151      	lsls	r1, r2, #5
 800b550:	69fa      	ldr	r2, [r7, #28]
 800b552:	440a      	add	r2, r1
 800b554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b558:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b55c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	015a      	lsls	r2, r3, #5
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	4413      	add	r3, r2
 800b566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b56a:	691b      	ldr	r3, [r3, #16]
 800b56c:	69ba      	ldr	r2, [r7, #24]
 800b56e:	0151      	lsls	r1, r2, #5
 800b570:	69fa      	ldr	r2, [r7, #28]
 800b572:	440a      	add	r2, r1
 800b574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b578:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b57c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d14b      	bne.n	800b61c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d009      	beq.n	800b5a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b598:	461a      	mov	r2, r3
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	78db      	ldrb	r3, [r3, #3]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d128      	bne.n	800b5fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b5a8:	69fb      	ldr	r3, [r7, #28]
 800b5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d110      	bne.n	800b5da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b5b8:	69bb      	ldr	r3, [r7, #24]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	69ba      	ldr	r2, [r7, #24]
 800b5c8:	0151      	lsls	r1, r2, #5
 800b5ca:	69fa      	ldr	r2, [r7, #28]
 800b5cc:	440a      	add	r2, r1
 800b5ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	e00f      	b.n	800b5fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	69ba      	ldr	r2, [r7, #24]
 800b5ea:	0151      	lsls	r1, r2, #5
 800b5ec:	69fa      	ldr	r2, [r7, #28]
 800b5ee:	440a      	add	r2, r1
 800b5f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	69fb      	ldr	r3, [r7, #28]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	0151      	lsls	r1, r2, #5
 800b60c:	69fa      	ldr	r2, [r7, #28]
 800b60e:	440a      	add	r2, r1
 800b610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b614:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b618:	6013      	str	r3, [r2, #0]
 800b61a:	e12f      	b.n	800b87c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b61c:	69bb      	ldr	r3, [r7, #24]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	0151      	lsls	r1, r2, #5
 800b62e:	69fa      	ldr	r2, [r7, #28]
 800b630:	440a      	add	r2, r1
 800b632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b636:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b63a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	78db      	ldrb	r3, [r3, #3]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d015      	beq.n	800b670 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	695b      	ldr	r3, [r3, #20]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	f000 8117 	beq.w	800b87c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	f003 030f 	and.w	r3, r3, #15
 800b65e:	2101      	movs	r1, #1
 800b660:	fa01 f303 	lsl.w	r3, r1, r3
 800b664:	69f9      	ldr	r1, [r7, #28]
 800b666:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b66a:	4313      	orrs	r3, r2
 800b66c:	634b      	str	r3, [r1, #52]	; 0x34
 800b66e:	e105      	b.n	800b87c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d110      	bne.n	800b6a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	015a      	lsls	r2, r3, #5
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	4413      	add	r3, r2
 800b688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	69ba      	ldr	r2, [r7, #24]
 800b690:	0151      	lsls	r1, r2, #5
 800b692:	69fa      	ldr	r2, [r7, #28]
 800b694:	440a      	add	r2, r1
 800b696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b69a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	e00f      	b.n	800b6c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	015a      	lsls	r2, r3, #5
 800b6a6:	69fb      	ldr	r3, [r7, #28]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	69ba      	ldr	r2, [r7, #24]
 800b6b2:	0151      	lsls	r1, r2, #5
 800b6b4:	69fa      	ldr	r2, [r7, #28]
 800b6b6:	440a      	add	r2, r1
 800b6b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	68d9      	ldr	r1, [r3, #12]
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	781a      	ldrb	r2, [r3, #0]
 800b6ca:	68bb      	ldr	r3, [r7, #8]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	b298      	uxth	r0, r3
 800b6d0:	79fb      	ldrb	r3, [r7, #7]
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f000 fa2b 	bl	800bb32 <USB_WritePacket>
 800b6dc:	e0ce      	b.n	800b87c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b6de:	69bb      	ldr	r3, [r7, #24]
 800b6e0:	015a      	lsls	r2, r3, #5
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	69ba      	ldr	r2, [r7, #24]
 800b6ee:	0151      	lsls	r1, r2, #5
 800b6f0:	69fa      	ldr	r2, [r7, #28]
 800b6f2:	440a      	add	r2, r1
 800b6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6f8:	0cdb      	lsrs	r3, r3, #19
 800b6fa:	04db      	lsls	r3, r3, #19
 800b6fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b6fe:	69bb      	ldr	r3, [r7, #24]
 800b700:	015a      	lsls	r2, r3, #5
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	4413      	add	r3, r2
 800b706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70a:	691b      	ldr	r3, [r3, #16]
 800b70c:	69ba      	ldr	r2, [r7, #24]
 800b70e:	0151      	lsls	r1, r2, #5
 800b710:	69fa      	ldr	r2, [r7, #28]
 800b712:	440a      	add	r2, r1
 800b714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b718:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b71c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b720:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	695b      	ldr	r3, [r3, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d126      	bne.n	800b778 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	015a      	lsls	r2, r3, #5
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	4413      	add	r3, r2
 800b732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b736:	691a      	ldr	r2, [r3, #16]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b740:	69b9      	ldr	r1, [r7, #24]
 800b742:	0148      	lsls	r0, r1, #5
 800b744:	69f9      	ldr	r1, [r7, #28]
 800b746:	4401      	add	r1, r0
 800b748:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b74c:	4313      	orrs	r3, r2
 800b74e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	015a      	lsls	r2, r3, #5
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	4413      	add	r3, r2
 800b758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	69ba      	ldr	r2, [r7, #24]
 800b760:	0151      	lsls	r1, r2, #5
 800b762:	69fa      	ldr	r2, [r7, #28]
 800b764:	440a      	add	r2, r1
 800b766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b76a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b76e:	6113      	str	r3, [r2, #16]
 800b770:	e036      	b.n	800b7e0 <USB_EPStartXfer+0x3dc>
 800b772:	bf00      	nop
 800b774:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	695a      	ldr	r2, [r3, #20]
 800b77c:	68bb      	ldr	r3, [r7, #8]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	4413      	add	r3, r2
 800b782:	1e5a      	subs	r2, r3, #1
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	fbb2 f3f3 	udiv	r3, r2, r3
 800b78c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	015a      	lsls	r2, r3, #5
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	4413      	add	r3, r2
 800b796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79a:	691a      	ldr	r2, [r3, #16]
 800b79c:	8afb      	ldrh	r3, [r7, #22]
 800b79e:	04d9      	lsls	r1, r3, #19
 800b7a0:	4b39      	ldr	r3, [pc, #228]	; (800b888 <USB_EPStartXfer+0x484>)
 800b7a2:	400b      	ands	r3, r1
 800b7a4:	69b9      	ldr	r1, [r7, #24]
 800b7a6:	0148      	lsls	r0, r1, #5
 800b7a8:	69f9      	ldr	r1, [r7, #28]
 800b7aa:	4401      	add	r1, r0
 800b7ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c0:	691a      	ldr	r2, [r3, #16]
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	689b      	ldr	r3, [r3, #8]
 800b7c6:	8af9      	ldrh	r1, [r7, #22]
 800b7c8:	fb01 f303 	mul.w	r3, r1, r3
 800b7cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7d0:	69b9      	ldr	r1, [r7, #24]
 800b7d2:	0148      	lsls	r0, r1, #5
 800b7d4:	69f9      	ldr	r1, [r7, #28]
 800b7d6:	4401      	add	r1, r0
 800b7d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b7e0:	79fb      	ldrb	r3, [r7, #7]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d10d      	bne.n	800b802 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d009      	beq.n	800b802 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	68d9      	ldr	r1, [r3, #12]
 800b7f2:	69bb      	ldr	r3, [r7, #24]
 800b7f4:	015a      	lsls	r2, r3, #5
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	4413      	add	r3, r2
 800b7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7fe:	460a      	mov	r2, r1
 800b800:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	78db      	ldrb	r3, [r3, #3]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d128      	bne.n	800b85c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b80a:	69fb      	ldr	r3, [r7, #28]
 800b80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b816:	2b00      	cmp	r3, #0
 800b818:	d110      	bne.n	800b83c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	015a      	lsls	r2, r3, #5
 800b81e:	69fb      	ldr	r3, [r7, #28]
 800b820:	4413      	add	r3, r2
 800b822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	69ba      	ldr	r2, [r7, #24]
 800b82a:	0151      	lsls	r1, r2, #5
 800b82c:	69fa      	ldr	r2, [r7, #28]
 800b82e:	440a      	add	r2, r1
 800b830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	e00f      	b.n	800b85c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	015a      	lsls	r2, r3, #5
 800b840:	69fb      	ldr	r3, [r7, #28]
 800b842:	4413      	add	r3, r2
 800b844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	69ba      	ldr	r2, [r7, #24]
 800b84c:	0151      	lsls	r1, r2, #5
 800b84e:	69fa      	ldr	r2, [r7, #28]
 800b850:	440a      	add	r2, r1
 800b852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b85a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b85c:	69bb      	ldr	r3, [r7, #24]
 800b85e:	015a      	lsls	r2, r3, #5
 800b860:	69fb      	ldr	r3, [r7, #28]
 800b862:	4413      	add	r3, r2
 800b864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	69ba      	ldr	r2, [r7, #24]
 800b86c:	0151      	lsls	r1, r2, #5
 800b86e:	69fa      	ldr	r2, [r7, #28]
 800b870:	440a      	add	r2, r1
 800b872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b87a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	1ff80000 	.word	0x1ff80000

0800b88c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b087      	sub	sp, #28
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	4613      	mov	r3, r2
 800b898:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	785b      	ldrb	r3, [r3, #1]
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	f040 80cd 	bne.w	800ba48 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d132      	bne.n	800b91c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	015a      	lsls	r2, r3, #5
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	4413      	add	r3, r2
 800b8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8c2:	691b      	ldr	r3, [r3, #16]
 800b8c4:	693a      	ldr	r2, [r7, #16]
 800b8c6:	0151      	lsls	r1, r2, #5
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	440a      	add	r2, r1
 800b8cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	015a      	lsls	r2, r3, #5
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	693a      	ldr	r2, [r7, #16]
 800b8ea:	0151      	lsls	r1, r2, #5
 800b8ec:	697a      	ldr	r2, [r7, #20]
 800b8ee:	440a      	add	r2, r1
 800b8f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	015a      	lsls	r2, r3, #5
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	4413      	add	r3, r2
 800b902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	0151      	lsls	r1, r2, #5
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	440a      	add	r2, r1
 800b910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b914:	0cdb      	lsrs	r3, r3, #19
 800b916:	04db      	lsls	r3, r3, #19
 800b918:	6113      	str	r3, [r2, #16]
 800b91a:	e04e      	b.n	800b9ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	015a      	lsls	r2, r3, #5
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	4413      	add	r3, r2
 800b924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	0151      	lsls	r1, r2, #5
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	440a      	add	r2, r1
 800b932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b936:	0cdb      	lsrs	r3, r3, #19
 800b938:	04db      	lsls	r3, r3, #19
 800b93a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	015a      	lsls	r2, r3, #5
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	4413      	add	r3, r2
 800b944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	693a      	ldr	r2, [r7, #16]
 800b94c:	0151      	lsls	r1, r2, #5
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	440a      	add	r2, r1
 800b952:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b956:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b95a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b95e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	695a      	ldr	r2, [r3, #20]
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	429a      	cmp	r2, r3
 800b96a:	d903      	bls.n	800b974 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	689a      	ldr	r2, [r3, #8]
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	015a      	lsls	r2, r3, #5
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	4413      	add	r3, r2
 800b97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	0151      	lsls	r1, r2, #5
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	440a      	add	r2, r1
 800b98a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b98e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	015a      	lsls	r2, r3, #5
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	4413      	add	r3, r2
 800b99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a0:	691a      	ldr	r2, [r3, #16]
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9aa:	6939      	ldr	r1, [r7, #16]
 800b9ac:	0148      	lsls	r0, r1, #5
 800b9ae:	6979      	ldr	r1, [r7, #20]
 800b9b0:	4401      	add	r1, r0
 800b9b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b9ba:	79fb      	ldrb	r3, [r7, #7]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d11e      	bne.n	800b9fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d009      	beq.n	800b9dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	015a      	lsls	r2, r3, #5
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	015a      	lsls	r2, r3, #5
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	693a      	ldr	r2, [r7, #16]
 800b9ec:	0151      	lsls	r1, r2, #5
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	440a      	add	r2, r1
 800b9f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	e092      	b.n	800bb24 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	015a      	lsls	r2, r3, #5
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	4413      	add	r3, r2
 800ba06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	693a      	ldr	r2, [r7, #16]
 800ba0e:	0151      	lsls	r1, r2, #5
 800ba10:	697a      	ldr	r2, [r7, #20]
 800ba12:	440a      	add	r2, r1
 800ba14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba1c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ba1e:	68bb      	ldr	r3, [r7, #8]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d07e      	beq.n	800bb24 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	f003 030f 	and.w	r3, r3, #15
 800ba36:	2101      	movs	r1, #1
 800ba38:	fa01 f303 	lsl.w	r3, r1, r3
 800ba3c:	6979      	ldr	r1, [r7, #20]
 800ba3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba42:	4313      	orrs	r3, r2
 800ba44:	634b      	str	r3, [r1, #52]	; 0x34
 800ba46:	e06d      	b.n	800bb24 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	697b      	ldr	r3, [r7, #20]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	693a      	ldr	r2, [r7, #16]
 800ba58:	0151      	lsls	r1, r2, #5
 800ba5a:	697a      	ldr	r2, [r7, #20]
 800ba5c:	440a      	add	r2, r1
 800ba5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba62:	0cdb      	lsrs	r3, r3, #19
 800ba64:	04db      	lsls	r3, r3, #19
 800ba66:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	015a      	lsls	r2, r3, #5
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	4413      	add	r3, r2
 800ba70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	0151      	lsls	r1, r2, #5
 800ba7a:	697a      	ldr	r2, [r7, #20]
 800ba7c:	440a      	add	r2, r1
 800ba7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba8a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	695b      	ldr	r3, [r3, #20]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d003      	beq.n	800ba9c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	689a      	ldr	r2, [r3, #8]
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	0151      	lsls	r1, r2, #5
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	440a      	add	r2, r1
 800bab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bab6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800baba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	015a      	lsls	r2, r3, #5
 800bac0:	697b      	ldr	r3, [r7, #20]
 800bac2:	4413      	add	r3, r2
 800bac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bac8:	691a      	ldr	r2, [r3, #16]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bad2:	6939      	ldr	r1, [r7, #16]
 800bad4:	0148      	lsls	r0, r1, #5
 800bad6:	6979      	ldr	r1, [r7, #20]
 800bad8:	4401      	add	r1, r0
 800bada:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bade:	4313      	orrs	r3, r2
 800bae0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800bae2:	79fb      	ldrb	r3, [r7, #7]
 800bae4:	2b01      	cmp	r3, #1
 800bae6:	d10d      	bne.n	800bb04 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d009      	beq.n	800bb04 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	68d9      	ldr	r1, [r3, #12]
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	015a      	lsls	r2, r3, #5
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb00:	460a      	mov	r2, r1
 800bb02:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	015a      	lsls	r2, r3, #5
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	693a      	ldr	r2, [r7, #16]
 800bb14:	0151      	lsls	r1, r2, #5
 800bb16:	697a      	ldr	r2, [r7, #20]
 800bb18:	440a      	add	r2, r1
 800bb1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	371c      	adds	r7, #28
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb30:	4770      	bx	lr

0800bb32 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b089      	sub	sp, #36	; 0x24
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	60f8      	str	r0, [r7, #12]
 800bb3a:	60b9      	str	r1, [r7, #8]
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	461a      	mov	r2, r3
 800bb40:	460b      	mov	r3, r1
 800bb42:	71fb      	strb	r3, [r7, #7]
 800bb44:	4613      	mov	r3, r2
 800bb46:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800bb50:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d11a      	bne.n	800bb8e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bb58:	88bb      	ldrh	r3, [r7, #4]
 800bb5a:	3303      	adds	r3, #3
 800bb5c:	089b      	lsrs	r3, r3, #2
 800bb5e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bb60:	2300      	movs	r3, #0
 800bb62:	61bb      	str	r3, [r7, #24]
 800bb64:	e00f      	b.n	800bb86 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bb66:	79fb      	ldrb	r3, [r7, #7]
 800bb68:	031a      	lsls	r2, r3, #12
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb72:	461a      	mov	r2, r3
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	3304      	adds	r3, #4
 800bb7e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bb80:	69bb      	ldr	r3, [r7, #24]
 800bb82:	3301      	adds	r3, #1
 800bb84:	61bb      	str	r3, [r7, #24]
 800bb86:	69ba      	ldr	r2, [r7, #24]
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	429a      	cmp	r2, r3
 800bb8c:	d3eb      	bcc.n	800bb66 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3724      	adds	r7, #36	; 0x24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b089      	sub	sp, #36	; 0x24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	4613      	mov	r3, r2
 800bba8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bbb2:	88fb      	ldrh	r3, [r7, #6]
 800bbb4:	3303      	adds	r3, #3
 800bbb6:	089b      	lsrs	r3, r3, #2
 800bbb8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bbba:	2300      	movs	r3, #0
 800bbbc:	61bb      	str	r3, [r7, #24]
 800bbbe:	e00b      	b.n	800bbd8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	601a      	str	r2, [r3, #0]
    pDest++;
 800bbcc:	69fb      	ldr	r3, [r7, #28]
 800bbce:	3304      	adds	r3, #4
 800bbd0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bbd2:	69bb      	ldr	r3, [r7, #24]
 800bbd4:	3301      	adds	r3, #1
 800bbd6:	61bb      	str	r3, [r7, #24]
 800bbd8:	69ba      	ldr	r2, [r7, #24]
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d3ef      	bcc.n	800bbc0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bbe0:	69fb      	ldr	r3, [r7, #28]
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3724      	adds	r7, #36	; 0x24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbec:	4770      	bx	lr

0800bbee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b085      	sub	sp, #20
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	785b      	ldrb	r3, [r3, #1]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d12c      	bne.n	800bc64 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	015a      	lsls	r2, r3, #5
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	4413      	add	r3, r2
 800bc12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	db12      	blt.n	800bc42 <USB_EPSetStall+0x54>
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00f      	beq.n	800bc42 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	015a      	lsls	r2, r3, #5
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	4413      	add	r3, r2
 800bc2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	0151      	lsls	r1, r2, #5
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	440a      	add	r2, r1
 800bc38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc40:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	015a      	lsls	r2, r3, #5
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	4413      	add	r3, r2
 800bc4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	0151      	lsls	r1, r2, #5
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	440a      	add	r2, r1
 800bc58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc60:	6013      	str	r3, [r2, #0]
 800bc62:	e02b      	b.n	800bcbc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	015a      	lsls	r2, r3, #5
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	db12      	blt.n	800bc9c <USB_EPSetStall+0xae>
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00f      	beq.n	800bc9c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	015a      	lsls	r2, r3, #5
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	4413      	add	r3, r2
 800bc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	0151      	lsls	r1, r2, #5
 800bc8e:	68fa      	ldr	r2, [r7, #12]
 800bc90:	440a      	add	r2, r1
 800bc92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bc9a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	015a      	lsls	r2, r3, #5
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	4413      	add	r3, r2
 800bca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	0151      	lsls	r1, r2, #5
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	440a      	add	r2, r1
 800bcb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bcba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b085      	sub	sp, #20
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	785b      	ldrb	r3, [r3, #1]
 800bce2:	2b01      	cmp	r3, #1
 800bce4:	d128      	bne.n	800bd38 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	015a      	lsls	r2, r3, #5
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	4413      	add	r3, r2
 800bcee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	0151      	lsls	r1, r2, #5
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	440a      	add	r2, r1
 800bcfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	78db      	ldrb	r3, [r3, #3]
 800bd0a:	2b03      	cmp	r3, #3
 800bd0c:	d003      	beq.n	800bd16 <USB_EPClearStall+0x4c>
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	78db      	ldrb	r3, [r3, #3]
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d138      	bne.n	800bd88 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	015a      	lsls	r2, r3, #5
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	0151      	lsls	r1, r2, #5
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	440a      	add	r2, r1
 800bd2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd34:	6013      	str	r3, [r2, #0]
 800bd36:	e027      	b.n	800bd88 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	015a      	lsls	r2, r3, #5
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	4413      	add	r3, r2
 800bd40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	0151      	lsls	r1, r2, #5
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	440a      	add	r2, r1
 800bd4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bd56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	78db      	ldrb	r3, [r3, #3]
 800bd5c:	2b03      	cmp	r3, #3
 800bd5e:	d003      	beq.n	800bd68 <USB_EPClearStall+0x9e>
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	78db      	ldrb	r3, [r3, #3]
 800bd64:	2b02      	cmp	r3, #2
 800bd66:	d10f      	bne.n	800bd88 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	015a      	lsls	r2, r3, #5
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4413      	add	r3, r2
 800bd70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	0151      	lsls	r1, r2, #5
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	440a      	add	r2, r1
 800bd7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bd86:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b085      	sub	sp, #20
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
 800bd9e:	460b      	mov	r3, r1
 800bda0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdb4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bdb8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	78fb      	ldrb	r3, [r7, #3]
 800bdc4:	011b      	lsls	r3, r3, #4
 800bdc6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bdca:	68f9      	ldr	r1, [r7, #12]
 800bdcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bdd4:	2300      	movs	r3, #0
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3714      	adds	r7, #20
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr

0800bde2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bde2:	b580      	push	{r7, lr}
 800bde4:	b084      	sub	sp, #16
 800bde6:	af00      	add	r7, sp, #0
 800bde8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdfc:	f023 0302 	bic.w	r3, r3, #2
 800be00:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800be02:	2003      	movs	r0, #3
 800be04:	f7f7 fd96 	bl	8003934 <HAL_Delay>

  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be24:	685b      	ldr	r3, [r3, #4]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be2c:	f043 0302 	orr.w	r3, r3, #2
 800be30:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800be32:	2003      	movs	r0, #3
 800be34:	f7f7 fd7e 	bl	8003934 <HAL_Delay>

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800be42:	b480      	push	{r7}
 800be44:	b085      	sub	sp, #20
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	699b      	ldr	r3, [r3, #24]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	4013      	ands	r3, r2
 800be58:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800be5a:	68fb      	ldr	r3, [r7, #12]
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3714      	adds	r7, #20
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr

0800be68 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be7a:	699b      	ldr	r3, [r3, #24]
 800be7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	4013      	ands	r3, r2
 800be8a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	0c1b      	lsrs	r3, r3, #16
}
 800be90:	4618      	mov	r0, r3
 800be92:	3714      	adds	r7, #20
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b085      	sub	sp, #20
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beb8:	69db      	ldr	r3, [r3, #28]
 800beba:	68ba      	ldr	r2, [r7, #8]
 800bebc:	4013      	ands	r3, r2
 800bebe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	b29b      	uxth	r3, r3
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr

0800bed0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bed0:	b480      	push	{r7}
 800bed2:	b085      	sub	sp, #20
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
 800bed8:	460b      	mov	r3, r1
 800beda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bee0:	78fb      	ldrb	r3, [r7, #3]
 800bee2:	015a      	lsls	r2, r3, #5
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	4413      	add	r3, r2
 800bee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef6:	695b      	ldr	r3, [r3, #20]
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	4013      	ands	r3, r2
 800befc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800befe:	68bb      	ldr	r3, [r7, #8]
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b087      	sub	sp, #28
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bf26:	697b      	ldr	r3, [r7, #20]
 800bf28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bf30:	78fb      	ldrb	r3, [r7, #3]
 800bf32:	f003 030f 	and.w	r3, r3, #15
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	fa22 f303 	lsr.w	r3, r2, r3
 800bf3c:	01db      	lsls	r3, r3, #7
 800bf3e:	b2db      	uxtb	r3, r3
 800bf40:	693a      	ldr	r2, [r7, #16]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bf46:	78fb      	ldrb	r3, [r7, #3]
 800bf48:	015a      	lsls	r2, r3, #5
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	693a      	ldr	r2, [r7, #16]
 800bf56:	4013      	ands	r3, r2
 800bf58:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	371c      	adds	r7, #28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	695b      	ldr	r3, [r3, #20]
 800bf74:	f003 0301 	and.w	r3, r3, #1
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b085      	sub	sp, #20
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf9e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bfa2:	f023 0307 	bic.w	r3, r3, #7
 800bfa6:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfae:	689b      	ldr	r3, [r3, #8]
 800bfb0:	f003 0306 	and.w	r3, r3, #6
 800bfb4:	2b04      	cmp	r3, #4
 800bfb6:	d109      	bne.n	800bfcc <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfc6:	f043 0303 	orr.w	r3, r3, #3
 800bfca:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3714      	adds	r7, #20
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfec:	4770      	bx	lr
	...

0800bff0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b087      	sub	sp, #28
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	460b      	mov	r3, r1
 800bffa:	607a      	str	r2, [r7, #4]
 800bffc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	333c      	adds	r3, #60	; 0x3c
 800c006:	3304      	adds	r3, #4
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	4a26      	ldr	r2, [pc, #152]	; (800c0a8 <USB_EP0_OutStart+0xb8>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d90a      	bls.n	800c02a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c020:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c024:	d101      	bne.n	800c02a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	e037      	b.n	800c09a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c030:	461a      	mov	r2, r3
 800c032:	2300      	movs	r3, #0
 800c034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c044:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c048:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	697a      	ldr	r2, [r7, #20]
 800c054:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c058:	f043 0318 	orr.w	r3, r3, #24
 800c05c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c05e:	697b      	ldr	r3, [r7, #20]
 800c060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c064:	691b      	ldr	r3, [r3, #16]
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c06c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c070:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c072:	7afb      	ldrb	r3, [r7, #11]
 800c074:	2b01      	cmp	r3, #1
 800c076:	d10f      	bne.n	800c098 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c07e:	461a      	mov	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	697a      	ldr	r2, [r7, #20]
 800c08e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c092:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c096:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	371c      	adds	r7, #28
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a4:	4770      	bx	lr
 800c0a6:	bf00      	nop
 800c0a8:	4f54300a 	.word	0x4f54300a

0800c0ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	60fb      	str	r3, [r7, #12]
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	4a13      	ldr	r2, [pc, #76]	; (800c110 <USB_CoreReset+0x64>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d901      	bls.n	800c0ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	e01b      	b.n	800c102 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	daf2      	bge.n	800c0b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	691b      	ldr	r3, [r3, #16]
 800c0da:	f043 0201 	orr.w	r2, r3, #1
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	3301      	adds	r3, #1
 800c0e6:	60fb      	str	r3, [r7, #12]
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	4a09      	ldr	r2, [pc, #36]	; (800c110 <USB_CoreReset+0x64>)
 800c0ec:	4293      	cmp	r3, r2
 800c0ee:	d901      	bls.n	800c0f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e006      	b.n	800c102 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	f003 0301 	and.w	r3, r3, #1
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d0f0      	beq.n	800c0e2 <USB_CoreReset+0x36>

  return HAL_OK;
 800c100:	2300      	movs	r3, #0
}
 800c102:	4618      	mov	r0, r3
 800c104:	3714      	adds	r7, #20
 800c106:	46bd      	mov	sp, r7
 800c108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10c:	4770      	bx	lr
 800c10e:	bf00      	nop
 800c110:	00030d40 	.word	0x00030d40

0800c114 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 800c114:	b580      	push	{r7, lr}
 800c116:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c118:	4904      	ldr	r1, [pc, #16]	; (800c12c <MX_FATFS_Init+0x18>)
 800c11a:	4805      	ldr	r0, [pc, #20]	; (800c130 <MX_FATFS_Init+0x1c>)
 800c11c:	f003 ff96 	bl	801004c <FATFS_LinkDriver>
 800c120:	4603      	mov	r3, r0
 800c122:	461a      	mov	r2, r3
 800c124:	4b03      	ldr	r3, [pc, #12]	; (800c134 <MX_FATFS_Init+0x20>)
 800c126:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800c128:	bf00      	nop
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	20000fa8 	.word	0x20000fa8
 800c130:	08014f18 	.word	0x08014f18
 800c134:	20000fa4 	.word	0x20000fa4

0800c138 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c138:	b480      	push	{r7}
 800c13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c13c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800c13e:	4618      	mov	r0, r3
 800c140:	46bd      	mov	sp, r7
 800c142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c146:	4770      	bx	lr

0800c148 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b082      	sub	sp, #8
 800c14c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c14e:	2300      	movs	r3, #0
 800c150:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c152:	f000 f871 	bl	800c238 <BSP_SD_IsDetected>
 800c156:	4603      	mov	r3, r0
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d001      	beq.n	800c160 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c15c:	2301      	movs	r3, #1
 800c15e:	e012      	b.n	800c186 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c160:	480b      	ldr	r0, [pc, #44]	; (800c190 <BSP_SD_Init+0x48>)
 800c162:	f7fa fdad 	bl	8006cc0 <HAL_SD_Init>
 800c166:	4603      	mov	r3, r0
 800c168:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c16a:	79fb      	ldrb	r3, [r7, #7]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d109      	bne.n	800c184 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c174:	4806      	ldr	r0, [pc, #24]	; (800c190 <BSP_SD_Init+0x48>)
 800c176:	f7fb fb8b 	bl	8007890 <HAL_SD_ConfigWideBusOperation>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d001      	beq.n	800c184 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c180:	2301      	movs	r3, #1
 800c182:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c184:	79fb      	ldrb	r3, [r7, #7]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3708      	adds	r7, #8
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	20000e84 	.word	0x20000e84

0800c194 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b086      	sub	sp, #24
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	68f9      	ldr	r1, [r7, #12]
 800c1aa:	4806      	ldr	r0, [pc, #24]	; (800c1c4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c1ac:	f7fa fe18 	bl	8006de0 <HAL_SD_ReadBlocks_DMA>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c1ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3718      	adds	r7, #24
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	20000e84 	.word	0x20000e84

0800c1c8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	68ba      	ldr	r2, [r7, #8]
 800c1dc:	68f9      	ldr	r1, [r7, #12]
 800c1de:	4806      	ldr	r0, [pc, #24]	; (800c1f8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c1e0:	f7fa fee8 	bl	8006fb4 <HAL_SD_WriteBlocks_DMA>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d001      	beq.n	800c1ee <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c1ea:	2301      	movs	r3, #1
 800c1ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800c1ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	20000e84 	.word	0x20000e84

0800c1fc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c200:	4805      	ldr	r0, [pc, #20]	; (800c218 <BSP_SD_GetCardState+0x1c>)
 800c202:	f7fb fbc1 	bl	8007988 <HAL_SD_GetCardState>
 800c206:	4603      	mov	r3, r0
 800c208:	2b04      	cmp	r3, #4
 800c20a:	bf14      	ite	ne
 800c20c:	2301      	movne	r3, #1
 800c20e:	2300      	moveq	r3, #0
 800c210:	b2db      	uxtb	r3, r3
}
 800c212:	4618      	mov	r0, r3
 800c214:	bd80      	pop	{r7, pc}
 800c216:	bf00      	nop
 800c218:	20000e84 	.word	0x20000e84

0800c21c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c224:	6879      	ldr	r1, [r7, #4]
 800c226:	4803      	ldr	r0, [pc, #12]	; (800c234 <BSP_SD_GetCardInfo+0x18>)
 800c228:	f7fb fb06 	bl	8007838 <HAL_SD_GetCardInfo>
}
 800c22c:	bf00      	nop
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	20000e84 	.word	0x20000e84

0800c238 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c23e:	2301      	movs	r3, #1
 800c240:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 800c242:	f000 f80b 	bl	800c25c <BSP_PlatformIsDetected>
 800c246:	4603      	mov	r3, r0
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d101      	bne.n	800c250 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c24c:	2300      	movs	r3, #0
 800c24e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c250:	79fb      	ldrb	r3, [r7, #7]
 800c252:	b2db      	uxtb	r3, r3
}
 800c254:	4618      	mov	r0, r3
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c262:	2301      	movs	r3, #1
 800c264:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c266:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c26a:	4806      	ldr	r0, [pc, #24]	; (800c284 <BSP_PlatformIsDetected+0x28>)
 800c26c:	f7f8 f9cc 	bl	8004608 <HAL_GPIO_ReadPin>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d001      	beq.n	800c27a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c276:	2300      	movs	r3, #0
 800c278:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 800c27a:	79fb      	ldrb	r3, [r7, #7]
}  
 800c27c:	4618      	mov	r0, r3
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	40020000 	.word	0x40020000

0800c288 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c290:	f7f7 fb44 	bl	800391c <HAL_GetTick>
 800c294:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c296:	e006      	b.n	800c2a6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c298:	f7ff ffb0 	bl	800c1fc <BSP_SD_GetCardState>
 800c29c:	4603      	mov	r3, r0
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	e009      	b.n	800c2ba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c2a6:	f7f7 fb39 	bl	800391c <HAL_GetTick>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	1ad3      	subs	r3, r2, r3
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d8f0      	bhi.n	800c298 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c2b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b082      	sub	sp, #8
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c2ce:	4b0b      	ldr	r3, [pc, #44]	; (800c2fc <SD_CheckStatus+0x38>)
 800c2d0:	2201      	movs	r2, #1
 800c2d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c2d4:	f7ff ff92 	bl	800c1fc <BSP_SD_GetCardState>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d107      	bne.n	800c2ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c2de:	4b07      	ldr	r3, [pc, #28]	; (800c2fc <SD_CheckStatus+0x38>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	b2db      	uxtb	r3, r3
 800c2e4:	f023 0301 	bic.w	r3, r3, #1
 800c2e8:	b2da      	uxtb	r2, r3
 800c2ea:	4b04      	ldr	r3, [pc, #16]	; (800c2fc <SD_CheckStatus+0x38>)
 800c2ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c2ee:	4b03      	ldr	r3, [pc, #12]	; (800c2fc <SD_CheckStatus+0x38>)
 800c2f0:	781b      	ldrb	r3, [r3, #0]
 800c2f2:	b2db      	uxtb	r3, r3
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3708      	adds	r7, #8
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	2000001d 	.word	0x2000001d

0800c300 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b082      	sub	sp, #8
 800c304:	af00      	add	r7, sp, #0
 800c306:	4603      	mov	r3, r0
 800c308:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c30a:	f7ff ff1d 	bl	800c148 <BSP_SD_Init>
 800c30e:	4603      	mov	r3, r0
 800c310:	2b00      	cmp	r3, #0
 800c312:	d107      	bne.n	800c324 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c314:	79fb      	ldrb	r3, [r7, #7]
 800c316:	4618      	mov	r0, r3
 800c318:	f7ff ffd4 	bl	800c2c4 <SD_CheckStatus>
 800c31c:	4603      	mov	r3, r0
 800c31e:	461a      	mov	r2, r3
 800c320:	4b04      	ldr	r3, [pc, #16]	; (800c334 <SD_initialize+0x34>)
 800c322:	701a      	strb	r2, [r3, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 800c324:	4b03      	ldr	r3, [pc, #12]	; (800c334 <SD_initialize+0x34>)
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	b2db      	uxtb	r3, r3
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3708      	adds	r7, #8
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	2000001d 	.word	0x2000001d

0800c338 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b082      	sub	sp, #8
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c342:	79fb      	ldrb	r3, [r7, #7]
 800c344:	4618      	mov	r0, r3
 800c346:	f7ff ffbd 	bl	800c2c4 <SD_CheckStatus>
 800c34a:	4603      	mov	r3, r0
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
              
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b088      	sub	sp, #32
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60b9      	str	r1, [r7, #8]
 800c35c:	607a      	str	r2, [r7, #4]
 800c35e:	603b      	str	r3, [r7, #0]
 800c360:	4603      	mov	r3, r0
 800c362:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c368:	f247 5030 	movw	r0, #30000	; 0x7530
 800c36c:	f7ff ff8c 	bl	800c288 <SD_CheckStatusWithTimeout>
 800c370:	4603      	mov	r3, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	da01      	bge.n	800c37a <SD_read+0x26>
  {
    return res;
 800c376:	7ffb      	ldrb	r3, [r7, #31]
 800c378:	e08b      	b.n	800c492 <SD_read+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	f003 0303 	and.w	r3, r3, #3
 800c380:	2b00      	cmp	r3, #0
 800c382:	f040 8085 	bne.w	800c490 <SD_read+0x13c>
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c386:	683a      	ldr	r2, [r7, #0]
 800c388:	6879      	ldr	r1, [r7, #4]
 800c38a:	68b8      	ldr	r0, [r7, #8]
 800c38c:	f7ff ff02 	bl	800c194 <BSP_SD_ReadBlocks_DMA>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d133      	bne.n	800c3fe <SD_read+0xaa>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c396:	4b41      	ldr	r3, [pc, #260]	; (800c49c <SD_read+0x148>)
 800c398:	2200      	movs	r2, #0
 800c39a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c39c:	f7f7 fabe 	bl	800391c <HAL_GetTick>
 800c3a0:	6178      	str	r0, [r7, #20]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c3a2:	bf00      	nop
 800c3a4:	4b3d      	ldr	r3, [pc, #244]	; (800c49c <SD_read+0x148>)
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d108      	bne.n	800c3be <SD_read+0x6a>
 800c3ac:	f7f7 fab6 	bl	800391c <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	697b      	ldr	r3, [r7, #20]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	f247 522f 	movw	r2, #29999	; 0x752f
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d9f2      	bls.n	800c3a4 <SD_read+0x50>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800c3be:	4b37      	ldr	r3, [pc, #220]	; (800c49c <SD_read+0x148>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d102      	bne.n	800c3cc <SD_read+0x78>
      {
        res = RES_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	77fb      	strb	r3, [r7, #31]
 800c3ca:	e061      	b.n	800c490 <SD_read+0x13c>
      }
      else
      {
        ReadStatus = 0;
 800c3cc:	4b33      	ldr	r3, [pc, #204]	; (800c49c <SD_read+0x148>)
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c3d2:	f7f7 faa3 	bl	800391c <HAL_GetTick>
 800c3d6:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c3d8:	e007      	b.n	800c3ea <SD_read+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c3da:	f7ff ff0f 	bl	800c1fc <BSP_SD_GetCardState>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d102      	bne.n	800c3ea <SD_read+0x96>
          {
            res = RES_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	77fb      	strb	r3, [r7, #31]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c3e8:	e052      	b.n	800c490 <SD_read+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c3ea:	f7f7 fa97 	bl	800391c <HAL_GetTick>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	697b      	ldr	r3, [r7, #20]
 800c3f2:	1ad3      	subs	r3, r2, r3
 800c3f4:	f247 522f 	movw	r2, #29999	; 0x752f
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d9ee      	bls.n	800c3da <SD_read+0x86>
 800c3fc:	e048      	b.n	800c490 <SD_read+0x13c>
#if defined(ENABLE_SCRATCH_BUFFER)
    else {
      /* Slow path, fetch each sector a part and memcpy to destination buffer */
      int i;

      for (i = 0; i < count; i++) {
 800c3fe:	2300      	movs	r3, #0
 800c400:	61bb      	str	r3, [r7, #24]
 800c402:	e034      	b.n	800c46e <SD_read+0x11a>
        ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	1c5a      	adds	r2, r3, #1
 800c408:	607a      	str	r2, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	4619      	mov	r1, r3
 800c40e:	4824      	ldr	r0, [pc, #144]	; (800c4a0 <SD_read+0x14c>)
 800c410:	f7ff fec0 	bl	800c194 <BSP_SD_ReadBlocks_DMA>
 800c414:	4603      	mov	r3, r0
 800c416:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c418:	7fbb      	ldrb	r3, [r7, #30]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d12c      	bne.n	800c478 <SD_read+0x124>
          /* wait until the read is successful or a timeout occurs */

          ReadStatus = 0;
 800c41e:	4b1f      	ldr	r3, [pc, #124]	; (800c49c <SD_read+0x148>)
 800c420:	2200      	movs	r2, #0
 800c422:	601a      	str	r2, [r3, #0]
          timeout = HAL_GetTick();
 800c424:	f7f7 fa7a 	bl	800391c <HAL_GetTick>
 800c428:	6178      	str	r0, [r7, #20]
          while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c42a:	bf00      	nop
 800c42c:	4b1b      	ldr	r3, [pc, #108]	; (800c49c <SD_read+0x148>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d108      	bne.n	800c446 <SD_read+0xf2>
 800c434:	f7f7 fa72 	bl	800391c <HAL_GetTick>
 800c438:	4602      	mov	r2, r0
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	1ad3      	subs	r3, r2, r3
 800c43e:	f247 522f 	movw	r2, #29999	; 0x752f
 800c442:	4293      	cmp	r3, r2
 800c444:	d9f2      	bls.n	800c42c <SD_read+0xd8>
          {
          }
          if (ReadStatus == 0)
 800c446:	4b15      	ldr	r3, [pc, #84]	; (800c49c <SD_read+0x148>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d016      	beq.n	800c47c <SD_read+0x128>
          *
          * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
          */
          SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
          memcpy(buff, scratch, BLOCKSIZE);
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	4a13      	ldr	r2, [pc, #76]	; (800c4a0 <SD_read+0x14c>)
 800c452:	4618      	mov	r0, r3
 800c454:	4611      	mov	r1, r2
 800c456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c45a:	461a      	mov	r2, r3
 800c45c:	f004 fbaa 	bl	8010bb4 <memcpy>
          buff += BLOCKSIZE;
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c466:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++) {
 800c468:	69bb      	ldr	r3, [r7, #24]
 800c46a:	3301      	adds	r3, #1
 800c46c:	61bb      	str	r3, [r7, #24]
 800c46e:	69bb      	ldr	r3, [r7, #24]
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	429a      	cmp	r2, r3
 800c474:	d8c6      	bhi.n	800c404 <SD_read+0xb0>
 800c476:	e002      	b.n	800c47e <SD_read+0x12a>
        }
        else
        {
          break;
 800c478:	bf00      	nop
 800c47a:	e000      	b.n	800c47e <SD_read+0x12a>
            break;
 800c47c:	bf00      	nop
        }
      }

      if ((i == count) && (ret == MSD_OK))
 800c47e:	69bb      	ldr	r3, [r7, #24]
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	429a      	cmp	r2, r3
 800c484:	d104      	bne.n	800c490 <SD_read+0x13c>
 800c486:	7fbb      	ldrb	r3, [r7, #30]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <SD_read+0x13c>
        res = RES_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	77fb      	strb	r3, [r7, #31]
    }
#endif
  }

  return res;
 800c490:	7ffb      	ldrb	r3, [r7, #31]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3720      	adds	r7, #32
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	2000099c 	.word	0x2000099c
 800c4a0:	20000798 	.word	0x20000798

0800c4a4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
              
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b088      	sub	sp, #32
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60b9      	str	r1, [r7, #8]
 800c4ac:	607a      	str	r2, [r7, #4]
 800c4ae:	603b      	str	r3, [r7, #0]
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	77fb      	strb	r3, [r7, #31]
  uint32_t timeout;
  uint8_t ret;
  int i;

   WriteStatus = 0;
 800c4b8:	4b4c      	ldr	r3, [pc, #304]	; (800c5ec <SD_write+0x148>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c4be:	f247 5030 	movw	r0, #30000	; 0x7530
 800c4c2:	f7ff fee1 	bl	800c288 <SD_CheckStatusWithTimeout>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	da01      	bge.n	800c4d0 <SD_write+0x2c>
  {
    return res;
 800c4cc:	7ffb      	ldrb	r3, [r7, #31]
 800c4ce:	e088      	b.n	800c5e2 <SD_write+0x13e>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	f003 0303 	and.w	r3, r3, #3
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f040 8082 	bne.w	800c5e0 <SD_write+0x13c>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	6879      	ldr	r1, [r7, #4]
 800c4e0:	68b8      	ldr	r0, [r7, #8]
 800c4e2:	f7ff fe71 	bl	800c1c8 <BSP_SD_WriteBlocks_DMA>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d130      	bne.n	800c54e <SD_write+0xaa>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c4ec:	f7f7 fa16 	bl	800391c <HAL_GetTick>
 800c4f0:	6178      	str	r0, [r7, #20]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c4f2:	bf00      	nop
 800c4f4:	4b3d      	ldr	r3, [pc, #244]	; (800c5ec <SD_write+0x148>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d108      	bne.n	800c50e <SD_write+0x6a>
 800c4fc:	f7f7 fa0e 	bl	800391c <HAL_GetTick>
 800c500:	4602      	mov	r2, r0
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	f247 522f 	movw	r2, #29999	; 0x752f
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d9f2      	bls.n	800c4f4 <SD_write+0x50>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800c50e:	4b37      	ldr	r3, [pc, #220]	; (800c5ec <SD_write+0x148>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d102      	bne.n	800c51c <SD_write+0x78>
      {
        res = RES_ERROR;
 800c516:	2301      	movs	r3, #1
 800c518:	77fb      	strb	r3, [r7, #31]
 800c51a:	e061      	b.n	800c5e0 <SD_write+0x13c>
      }
      else
      {
        WriteStatus = 0;
 800c51c:	4b33      	ldr	r3, [pc, #204]	; (800c5ec <SD_write+0x148>)
 800c51e:	2200      	movs	r2, #0
 800c520:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c522:	f7f7 f9fb 	bl	800391c <HAL_GetTick>
 800c526:	6178      	str	r0, [r7, #20]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c528:	e007      	b.n	800c53a <SD_write+0x96>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c52a:	f7ff fe67 	bl	800c1fc <BSP_SD_GetCardState>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d102      	bne.n	800c53a <SD_write+0x96>
          {
            res = RES_OK;
 800c534:	2300      	movs	r3, #0
 800c536:	77fb      	strb	r3, [r7, #31]
            break;
 800c538:	e052      	b.n	800c5e0 <SD_write+0x13c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c53a:	f7f7 f9ef 	bl	800391c <HAL_GetTick>
 800c53e:	4602      	mov	r2, r0
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	f247 522f 	movw	r2, #29999	; 0x752f
 800c548:	4293      	cmp	r3, r2
 800c54a:	d9ee      	bls.n	800c52a <SD_write+0x86>
 800c54c:	e048      	b.n	800c5e0 <SD_write+0x13c>
      * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
      */
      SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

      for (i = 0; i < count; i++)
 800c54e:	2300      	movs	r3, #0
 800c550:	61bb      	str	r3, [r7, #24]
 800c552:	e034      	b.n	800c5be <SD_write+0x11a>
      {
        WriteStatus = 0;
 800c554:	4b25      	ldr	r3, [pc, #148]	; (800c5ec <SD_write+0x148>)
 800c556:	2200      	movs	r2, #0
 800c558:	601a      	str	r2, [r3, #0]
        ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	607a      	str	r2, [r7, #4]
 800c560:	2201      	movs	r2, #1
 800c562:	4619      	mov	r1, r3
 800c564:	4822      	ldr	r0, [pc, #136]	; (800c5f0 <SD_write+0x14c>)
 800c566:	f7ff fe2f 	bl	800c1c8 <BSP_SD_WriteBlocks_DMA>
 800c56a:	4603      	mov	r3, r0
 800c56c:	77bb      	strb	r3, [r7, #30]
        if (ret == MSD_OK) {
 800c56e:	7fbb      	ldrb	r3, [r7, #30]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d129      	bne.n	800c5c8 <SD_write+0x124>
          /* wait for a message from the queue or a timeout */
          timeout = HAL_GetTick();
 800c574:	f7f7 f9d2 	bl	800391c <HAL_GetTick>
 800c578:	6178      	str	r0, [r7, #20]
          while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c57a:	bf00      	nop
 800c57c:	4b1b      	ldr	r3, [pc, #108]	; (800c5ec <SD_write+0x148>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d108      	bne.n	800c596 <SD_write+0xf2>
 800c584:	f7f7 f9ca 	bl	800391c <HAL_GetTick>
 800c588:	4602      	mov	r2, r0
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	f247 522f 	movw	r2, #29999	; 0x752f
 800c592:	4293      	cmp	r3, r2
 800c594:	d9f2      	bls.n	800c57c <SD_write+0xd8>
          {
          }
          if (WriteStatus == 0)
 800c596:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <SD_write+0x148>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d016      	beq.n	800c5cc <SD_write+0x128>
          {
            break;
          }

          memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	4a13      	ldr	r2, [pc, #76]	; (800c5f0 <SD_write+0x14c>)
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	f004 fb02 	bl	8010bb4 <memcpy>
          buff += BLOCKSIZE;
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c5b6:	60bb      	str	r3, [r7, #8]
      for (i = 0; i < count; i++)
 800c5b8:	69bb      	ldr	r3, [r7, #24]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	61bb      	str	r3, [r7, #24]
 800c5be:	69bb      	ldr	r3, [r7, #24]
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d8c6      	bhi.n	800c554 <SD_write+0xb0>
 800c5c6:	e002      	b.n	800c5ce <SD_write+0x12a>
        }
        else
        {
          break;
 800c5c8:	bf00      	nop
 800c5ca:	e000      	b.n	800c5ce <SD_write+0x12a>
            break;
 800c5cc:	bf00      	nop
        }
      }
      if ((i == count) && (ret == MSD_OK))
 800c5ce:	69bb      	ldr	r3, [r7, #24]
 800c5d0:	683a      	ldr	r2, [r7, #0]
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d104      	bne.n	800c5e0 <SD_write+0x13c>
 800c5d6:	7fbb      	ldrb	r3, [r7, #30]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d101      	bne.n	800c5e0 <SD_write+0x13c>
        res = RES_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	77fb      	strb	r3, [r7, #31]
    }

  }
  return res;
 800c5e0:	7ffb      	ldrb	r3, [r7, #31]
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3720      	adds	r7, #32
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	20000998 	.word	0x20000998
 800c5f0:	20000798 	.word	0x20000798

0800c5f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b08c      	sub	sp, #48	; 0x30
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	603a      	str	r2, [r7, #0]
 800c5fe:	71fb      	strb	r3, [r7, #7]
 800c600:	460b      	mov	r3, r1
 800c602:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c60a:	4b25      	ldr	r3, [pc, #148]	; (800c6a0 <SD_ioctl+0xac>)
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	f003 0301 	and.w	r3, r3, #1
 800c614:	2b00      	cmp	r3, #0
 800c616:	d001      	beq.n	800c61c <SD_ioctl+0x28>
 800c618:	2303      	movs	r3, #3
 800c61a:	e03c      	b.n	800c696 <SD_ioctl+0xa2>

  switch (cmd)
 800c61c:	79bb      	ldrb	r3, [r7, #6]
 800c61e:	2b03      	cmp	r3, #3
 800c620:	d834      	bhi.n	800c68c <SD_ioctl+0x98>
 800c622:	a201      	add	r2, pc, #4	; (adr r2, 800c628 <SD_ioctl+0x34>)
 800c624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c628:	0800c639 	.word	0x0800c639
 800c62c:	0800c641 	.word	0x0800c641
 800c630:	0800c659 	.word	0x0800c659
 800c634:	0800c673 	.word	0x0800c673
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c638:	2300      	movs	r3, #0
 800c63a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c63e:	e028      	b.n	800c692 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c640:	f107 030c 	add.w	r3, r7, #12
 800c644:	4618      	mov	r0, r3
 800c646:	f7ff fde9 	bl	800c21c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c64a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c656:	e01c      	b.n	800c692 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c658:	f107 030c 	add.w	r3, r7, #12
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff fddd 	bl	800c21c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c664:	b29a      	uxth	r2, r3
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c66a:	2300      	movs	r3, #0
 800c66c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c670:	e00f      	b.n	800c692 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c672:	f107 030c 	add.w	r3, r7, #12
 800c676:	4618      	mov	r0, r3
 800c678:	f7ff fdd0 	bl	800c21c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	0a5a      	lsrs	r2, r3, #9
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c684:	2300      	movs	r3, #0
 800c686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c68a:	e002      	b.n	800c692 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c68c:	2304      	movs	r3, #4
 800c68e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c696:	4618      	mov	r0, r3
 800c698:	3730      	adds	r7, #48	; 0x30
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	2000001d 	.word	0x2000001d

0800c6a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	7c1b      	ldrb	r3, [r3, #16]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d115      	bne.n	800c6e8 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c6bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6c0:	2202      	movs	r2, #2
 800c6c2:	2181      	movs	r1, #129	; 0x81
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f004 f8ee 	bl	80108a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2201      	movs	r2, #1
 800c6ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c6d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6d4:	2202      	movs	r2, #2
 800c6d6:	2101      	movs	r1, #1
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f004 f8e4 	bl	80108a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2201      	movs	r2, #1
 800c6e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c6e6:	e012      	b.n	800c70e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c6e8:	2340      	movs	r3, #64	; 0x40
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	2181      	movs	r1, #129	; 0x81
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f004 f8d9 	bl	80108a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c6fa:	2340      	movs	r3, #64	; 0x40
 800c6fc:	2202      	movs	r2, #2
 800c6fe:	2101      	movs	r1, #1
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f004 f8d0 	bl	80108a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2201      	movs	r2, #1
 800c70a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c70e:	2308      	movs	r3, #8
 800c710:	2203      	movs	r2, #3
 800c712:	2182      	movs	r1, #130	; 0x82
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f004 f8c6 	bl	80108a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2201      	movs	r2, #1
 800c71e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c720:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c724:	f004 fa36 	bl	8010b94 <malloc>
 800c728:	4603      	mov	r3, r0
 800c72a:	461a      	mov	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d102      	bne.n	800c742 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800c73c:	2301      	movs	r3, #1
 800c73e:	73fb      	strb	r3, [r7, #15]
 800c740:	e026      	b.n	800c790 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c748:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	2200      	movs	r2, #0
 800c758:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2200      	movs	r2, #0
 800c760:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	7c1b      	ldrb	r3, [r3, #16]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d109      	bne.n	800c780 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c772:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c776:	2101      	movs	r1, #1
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f004 f985 	bl	8010a88 <USBD_LL_PrepareReceive>
 800c77e:	e007      	b.n	800c790 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c786:	2340      	movs	r3, #64	; 0x40
 800c788:	2101      	movs	r1, #1
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f004 f97c 	bl	8010a88 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c790:	7bfb      	ldrb	r3, [r7, #15]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b084      	sub	sp, #16
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	6078      	str	r0, [r7, #4]
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c7aa:	2181      	movs	r1, #129	; 0x81
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f004 f8a0 	bl	80108f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c7b8:	2101      	movs	r1, #1
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f004 f899 	bl	80108f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c7c8:	2182      	movs	r1, #130	; 0x82
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f004 f891 	bl	80108f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d00e      	beq.n	800c7fe <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f004 f9d7 	bl	8010ba4 <free>
    pdev->pClassData = NULL;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800c7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3710      	adds	r7, #16
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b086      	sub	sp, #24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c818:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c81a:	2300      	movs	r3, #0
 800c81c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800c81e:	2300      	movs	r3, #0
 800c820:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800c822:	2300      	movs	r3, #0
 800c824:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d039      	beq.n	800c8a6 <USBD_CDC_Setup+0x9e>
 800c832:	2b20      	cmp	r3, #32
 800c834:	d17c      	bne.n	800c930 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	88db      	ldrh	r3, [r3, #6]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d029      	beq.n	800c892 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	b25b      	sxtb	r3, r3
 800c844:	2b00      	cmp	r3, #0
 800c846:	da11      	bge.n	800c86c <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	683a      	ldr	r2, [r7, #0]
 800c852:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800c854:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c856:	683a      	ldr	r2, [r7, #0]
 800c858:	88d2      	ldrh	r2, [r2, #6]
 800c85a:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c85c:	6939      	ldr	r1, [r7, #16]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	88db      	ldrh	r3, [r3, #6]
 800c862:	461a      	mov	r2, r3
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f001 f9c9 	bl	800dbfc <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800c86a:	e068      	b.n	800c93e <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	785a      	ldrb	r2, [r3, #1]
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	88db      	ldrh	r3, [r3, #6]
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c882:	6939      	ldr	r1, [r7, #16]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	88db      	ldrh	r3, [r3, #6]
 800c888:	461a      	mov	r2, r3
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f001 f9e4 	bl	800dc58 <USBD_CtlPrepareRx>
    break;
 800c890:	e055      	b.n	800c93e <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	683a      	ldr	r2, [r7, #0]
 800c89c:	7850      	ldrb	r0, [r2, #1]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	6839      	ldr	r1, [r7, #0]
 800c8a2:	4798      	blx	r3
    break;
 800c8a4:	e04b      	b.n	800c93e <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	785b      	ldrb	r3, [r3, #1]
 800c8aa:	2b0a      	cmp	r3, #10
 800c8ac:	d017      	beq.n	800c8de <USBD_CDC_Setup+0xd6>
 800c8ae:	2b0b      	cmp	r3, #11
 800c8b0:	d029      	beq.n	800c906 <USBD_CDC_Setup+0xfe>
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d133      	bne.n	800c91e <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c8bc:	2b03      	cmp	r3, #3
 800c8be:	d107      	bne.n	800c8d0 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800c8c0:	f107 030c 	add.w	r3, r7, #12
 800c8c4:	2202      	movs	r2, #2
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f001 f997 	bl	800dbfc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c8ce:	e02e      	b.n	800c92e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f001 f927 	bl	800db26 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c8d8:	2302      	movs	r3, #2
 800c8da:	75fb      	strb	r3, [r7, #23]
      break;
 800c8dc:	e027      	b.n	800c92e <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d107      	bne.n	800c8f8 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800c8e8:	f107 030f 	add.w	r3, r7, #15
 800c8ec:	2201      	movs	r2, #1
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f001 f983 	bl	800dbfc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800c8f6:	e01a      	b.n	800c92e <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f001 f913 	bl	800db26 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c900:	2302      	movs	r3, #2
 800c902:	75fb      	strb	r3, [r7, #23]
      break;
 800c904:	e013      	b.n	800c92e <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800c90c:	2b03      	cmp	r3, #3
 800c90e:	d00d      	beq.n	800c92c <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f001 f907 	bl	800db26 <USBD_CtlError>
			  ret = USBD_FAIL;
 800c918:	2302      	movs	r3, #2
 800c91a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800c91c:	e006      	b.n	800c92c <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 800c91e:	6839      	ldr	r1, [r7, #0]
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f001 f900 	bl	800db26 <USBD_CtlError>
      ret = USBD_FAIL;
 800c926:	2302      	movs	r3, #2
 800c928:	75fb      	strb	r3, [r7, #23]
      break;
 800c92a:	e000      	b.n	800c92e <USBD_CDC_Setup+0x126>
      break;
 800c92c:	bf00      	nop
    }
    break;
 800c92e:	e006      	b.n	800c93e <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f001 f8f7 	bl	800db26 <USBD_CtlError>
    ret = USBD_FAIL;
 800c938:	2302      	movs	r3, #2
 800c93a:	75fb      	strb	r3, [r7, #23]
    break;
 800c93c:	bf00      	nop
  }

  return ret;
 800c93e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c940:	4618      	mov	r0, r3
 800c942:	3718      	adds	r7, #24
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b084      	sub	sp, #16
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
 800c950:	460b      	mov	r3, r1
 800c952:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c95a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800c962:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d03a      	beq.n	800c9e4 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c96e:	78fa      	ldrb	r2, [r7, #3]
 800c970:	6879      	ldr	r1, [r7, #4]
 800c972:	4613      	mov	r3, r2
 800c974:	009b      	lsls	r3, r3, #2
 800c976:	4413      	add	r3, r2
 800c978:	009b      	lsls	r3, r3, #2
 800c97a:	440b      	add	r3, r1
 800c97c:	331c      	adds	r3, #28
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d029      	beq.n	800c9d8 <USBD_CDC_DataIn+0x90>
 800c984:	78fa      	ldrb	r2, [r7, #3]
 800c986:	6879      	ldr	r1, [r7, #4]
 800c988:	4613      	mov	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	4413      	add	r3, r2
 800c98e:	009b      	lsls	r3, r3, #2
 800c990:	440b      	add	r3, r1
 800c992:	331c      	adds	r3, #28
 800c994:	681a      	ldr	r2, [r3, #0]
 800c996:	78f9      	ldrb	r1, [r7, #3]
 800c998:	68b8      	ldr	r0, [r7, #8]
 800c99a:	460b      	mov	r3, r1
 800c99c:	00db      	lsls	r3, r3, #3
 800c99e:	1a5b      	subs	r3, r3, r1
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4403      	add	r3, r0
 800c9a4:	3344      	adds	r3, #68	; 0x44
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c9ac:	fb03 f301 	mul.w	r3, r3, r1
 800c9b0:	1ad3      	subs	r3, r2, r3
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d110      	bne.n	800c9d8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c9b6:	78fa      	ldrb	r2, [r7, #3]
 800c9b8:	6879      	ldr	r1, [r7, #4]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	440b      	add	r3, r1
 800c9c4:	331c      	adds	r3, #28
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800c9ca:	78f9      	ldrb	r1, [r7, #3]
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f004 f836 	bl	8010a42 <USBD_LL_Transmit>
 800c9d6:	e003      	b.n	800c9e0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	2200      	movs	r2, #0
 800c9dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	e000      	b.n	800c9e6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800c9e4:	2302      	movs	r3, #2
  }
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b084      	sub	sp, #16
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca00:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800ca02:	78fb      	ldrb	r3, [r7, #3]
 800ca04:	4619      	mov	r1, r3
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f004 f861 	bl	8010ace <USBD_LL_GetRxDataSize>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00d      	beq.n	800ca3a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	68fa      	ldr	r2, [r7, #12]
 800ca28:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ca2c:	68fa      	ldr	r2, [r7, #12]
 800ca2e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ca32:	4611      	mov	r1, r2
 800ca34:	4798      	blx	r3

    return USBD_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	e000      	b.n	800ca3c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800ca3a:	2302      	movs	r3, #2
  }
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca52:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d015      	beq.n	800ca8a <USBD_CDC_EP0_RxReady+0x46>
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ca64:	2bff      	cmp	r3, #255	; 0xff
 800ca66:	d010      	beq.n	800ca8a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	68fa      	ldr	r2, [r7, #12]
 800ca72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800ca76:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ca78:	68fa      	ldr	r2, [r7, #12]
 800ca7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ca7e:	b292      	uxth	r2, r2
 800ca80:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	22ff      	movs	r2, #255	; 0xff
 800ca86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800ca8a:	2300      	movs	r3, #0
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3710      	adds	r7, #16
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2243      	movs	r2, #67	; 0x43
 800caa0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800caa2:	4b03      	ldr	r3, [pc, #12]	; (800cab0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	370c      	adds	r7, #12
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr
 800cab0:	200000a8 	.word	0x200000a8

0800cab4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2243      	movs	r2, #67	; 0x43
 800cac0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800cac2:	4b03      	ldr	r3, [pc, #12]	; (800cad0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	370c      	adds	r7, #12
 800cac8:	46bd      	mov	sp, r7
 800caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cace:	4770      	bx	lr
 800cad0:	20000064 	.word	0x20000064

0800cad4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2243      	movs	r2, #67	; 0x43
 800cae0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800cae2:	4b03      	ldr	r3, [pc, #12]	; (800caf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	200000ec 	.word	0x200000ec

0800caf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	220a      	movs	r2, #10
 800cb00:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800cb02:	4b03      	ldr	r3, [pc, #12]	; (800cb10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	20000020 	.word	0x20000020

0800cb14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800cb1e:	2302      	movs	r3, #2
 800cb20:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d005      	beq.n	800cb34 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	683a      	ldr	r2, [r7, #0]
 800cb2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3714      	adds	r7, #20
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr

0800cb42 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800cb42:	b480      	push	{r7}
 800cb44:	b087      	sub	sp, #28
 800cb46:	af00      	add	r7, sp, #0
 800cb48:	60f8      	str	r0, [r7, #12]
 800cb4a:	60b9      	str	r1, [r7, #8]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb56:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	68ba      	ldr	r2, [r7, #8]
 800cb5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cb60:	88fa      	ldrh	r2, [r7, #6]
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800cb68:	2300      	movs	r3, #0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	371c      	adds	r7, #28
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb74:	4770      	bx	lr

0800cb76 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800cb76:	b480      	push	{r7}
 800cb78:	b085      	sub	sp, #20
 800cb7a:	af00      	add	r7, sp, #0
 800cb7c:	6078      	str	r0, [r7, #4]
 800cb7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cb86:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	683a      	ldr	r2, [r7, #0]
 800cb8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3714      	adds	r7, #20
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr

0800cb9e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b084      	sub	sp, #16
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cbac:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d01c      	beq.n	800cbf2 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d115      	bne.n	800cbee <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	2181      	movs	r1, #129	; 0x81
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f003 ff2c 	bl	8010a42 <USBD_LL_Transmit>

      return USBD_OK;
 800cbea:	2300      	movs	r3, #0
 800cbec:	e002      	b.n	800cbf4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e000      	b.n	800cbf4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800cbf2:	2302      	movs	r3, #2
  }
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cc0a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d017      	beq.n	800cc46 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	7c1b      	ldrb	r3, [r3, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d109      	bne.n	800cc32 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc24:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc28:	2101      	movs	r1, #1
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f003 ff2c 	bl	8010a88 <USBD_LL_PrepareReceive>
 800cc30:	e007      	b.n	800cc42 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc38:	2340      	movs	r3, #64	; 0x40
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f003 ff23 	bl	8010a88 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	e000      	b.n	800cc48 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800cc46:	2302      	movs	r3, #2
  }
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b084      	sub	sp, #16
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	60f8      	str	r0, [r7, #12]
 800cc58:	60b9      	str	r1, [r7, #8]
 800cc5a:	4613      	mov	r3, r2
 800cc5c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d101      	bne.n	800cc68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cc64:	2302      	movs	r3, #2
 800cc66:	e01a      	b.n	800cc9e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d003      	beq.n	800cc7a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2200      	movs	r2, #0
 800cc76:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800cc7a:	68bb      	ldr	r3, [r7, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d003      	beq.n	800cc88 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	79fa      	ldrb	r2, [r7, #7]
 800cc94:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	f003 fd9e 	bl	80107d8 <USBD_LL_Init>

  return USBD_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3710      	adds	r7, #16
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cca6:	b480      	push	{r7}
 800cca8:	b085      	sub	sp, #20
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d006      	beq.n	800ccc8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	683a      	ldr	r2, [r7, #0]
 800ccbe:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	73fb      	strb	r3, [r7, #15]
 800ccc6:	e001      	b.n	800cccc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ccc8:	2302      	movs	r3, #2
 800ccca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3714      	adds	r7, #20
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b082      	sub	sp, #8
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	f003 fdc4 	bl	8010870 <USBD_LL_Start>

  return USBD_OK;
 800cce8:	2300      	movs	r3, #0
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	3708      	adds	r7, #8
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}

0800ccf2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800ccf2:	b480      	push	{r7}
 800ccf4:	b083      	sub	sp, #12
 800ccf6:	af00      	add	r7, sp, #0
 800ccf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b084      	sub	sp, #16
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	460b      	mov	r3, r1
 800cd12:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800cd14:	2302      	movs	r3, #2
 800cd16:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d00c      	beq.n	800cd3c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	78fa      	ldrb	r2, [r7, #3]
 800cd2c:	4611      	mov	r1, r2
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	4798      	blx	r3
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d101      	bne.n	800cd3c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800cd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
 800cd4e:	460b      	mov	r3, r1
 800cd50:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cd58:	685b      	ldr	r3, [r3, #4]
 800cd5a:	78fa      	ldrb	r2, [r7, #3]
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	4798      	blx	r3
  return USBD_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cd7c:	6839      	ldr	r1, [r7, #0]
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f000 fe94 	bl	800daac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2201      	movs	r2, #1
 800cd88:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800cd92:	461a      	mov	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800cda0:	f003 031f 	and.w	r3, r3, #31
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d00c      	beq.n	800cdc2 <USBD_LL_SetupStage+0x56>
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d302      	bcc.n	800cdb2 <USBD_LL_SetupStage+0x46>
 800cdac:	2b02      	cmp	r3, #2
 800cdae:	d010      	beq.n	800cdd2 <USBD_LL_SetupStage+0x66>
 800cdb0:	e017      	b.n	800cde2 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 fa04 	bl	800d1c8 <USBD_StdDevReq>
    break;
 800cdc0:	e01a      	b.n	800cdf8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cdc8:	4619      	mov	r1, r3
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fa66 	bl	800d29c <USBD_StdItfReq>
    break;
 800cdd0:	e012      	b.n	800cdf8 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800cdd8:	4619      	mov	r1, r3
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f000 faa4 	bl	800d328 <USBD_StdEPReq>
    break;
 800cde0:	e00a      	b.n	800cdf8 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800cde8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	4619      	mov	r1, r3
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f003 fd9d 	bl	8010930 <USBD_LL_StallEP>
    break;
 800cdf6:	bf00      	nop
  }

  return USBD_OK;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b086      	sub	sp, #24
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	60f8      	str	r0, [r7, #12]
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	607a      	str	r2, [r7, #4]
 800ce0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800ce10:	7afb      	ldrb	r3, [r7, #11]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d14b      	bne.n	800ceae <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ce1c:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ce24:	2b03      	cmp	r3, #3
 800ce26:	d134      	bne.n	800ce92 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	68da      	ldr	r2, [r3, #12]
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	691b      	ldr	r3, [r3, #16]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d919      	bls.n	800ce68 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	68da      	ldr	r2, [r3, #12]
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	691b      	ldr	r3, [r3, #16]
 800ce3c:	1ad2      	subs	r2, r2, r3
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	68da      	ldr	r2, [r3, #12]
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d203      	bcs.n	800ce56 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	e002      	b.n	800ce5c <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800ce5a:	b29b      	uxth	r3, r3
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	6879      	ldr	r1, [r7, #4]
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f000 ff17 	bl	800dc94 <USBD_CtlContinueRx>
 800ce66:	e038      	b.n	800ceda <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce6e:	691b      	ldr	r3, [r3, #16]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00a      	beq.n	800ce8a <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800ce7a:	2b03      	cmp	r3, #3
 800ce7c:	d105      	bne.n	800ce8a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ce8a:	68f8      	ldr	r0, [r7, #12]
 800ce8c:	f000 ff14 	bl	800dcb8 <USBD_CtlSendStatus>
 800ce90:	e023      	b.n	800ceda <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800ce98:	2b05      	cmp	r3, #5
 800ce9a:	d11e      	bne.n	800ceda <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800cea4:	2100      	movs	r1, #0
 800cea6:	68f8      	ldr	r0, [r7, #12]
 800cea8:	f003 fd42 	bl	8010930 <USBD_LL_StallEP>
 800ceac:	e015      	b.n	800ceda <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ceb4:	699b      	ldr	r3, [r3, #24]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00d      	beq.n	800ced6 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800cec0:	2b03      	cmp	r3, #3
 800cec2:	d108      	bne.n	800ced6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ceca:	699b      	ldr	r3, [r3, #24]
 800cecc:	7afa      	ldrb	r2, [r7, #11]
 800cece:	4611      	mov	r1, r2
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	4798      	blx	r3
 800ced4:	e001      	b.n	800ceda <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ced6:	2302      	movs	r3, #2
 800ced8:	e000      	b.n	800cedc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b086      	sub	sp, #24
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	60f8      	str	r0, [r7, #12]
 800ceec:	460b      	mov	r3, r1
 800ceee:	607a      	str	r2, [r7, #4]
 800cef0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800cef2:	7afb      	ldrb	r3, [r7, #11]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d17f      	bne.n	800cff8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	3314      	adds	r3, #20
 800cefc:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cf04:	2b02      	cmp	r3, #2
 800cf06:	d15c      	bne.n	800cfc2 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	68da      	ldr	r2, [r3, #12]
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	691b      	ldr	r3, [r3, #16]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d915      	bls.n	800cf40 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	68da      	ldr	r2, [r3, #12]
 800cf18:	697b      	ldr	r3, [r7, #20]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	1ad2      	subs	r2, r2, r3
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	68db      	ldr	r3, [r3, #12]
 800cf26:	b29b      	uxth	r3, r3
 800cf28:	461a      	mov	r2, r3
 800cf2a:	6879      	ldr	r1, [r7, #4]
 800cf2c:	68f8      	ldr	r0, [r7, #12]
 800cf2e:	f000 fe81 	bl	800dc34 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cf32:	2300      	movs	r3, #0
 800cf34:	2200      	movs	r2, #0
 800cf36:	2100      	movs	r1, #0
 800cf38:	68f8      	ldr	r0, [r7, #12]
 800cf3a:	f003 fda5 	bl	8010a88 <USBD_LL_PrepareReceive>
 800cf3e:	e04e      	b.n	800cfde <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	697a      	ldr	r2, [r7, #20]
 800cf46:	6912      	ldr	r2, [r2, #16]
 800cf48:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf4c:	fb02 f201 	mul.w	r2, r2, r1
 800cf50:	1a9b      	subs	r3, r3, r2
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d11c      	bne.n	800cf90 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	689a      	ldr	r2, [r3, #8]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d316      	bcc.n	800cf90 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	689a      	ldr	r2, [r3, #8]
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d20f      	bcs.n	800cf90 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cf70:	2200      	movs	r2, #0
 800cf72:	2100      	movs	r1, #0
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f000 fe5d 	bl	800dc34 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800cf82:	2300      	movs	r3, #0
 800cf84:	2200      	movs	r2, #0
 800cf86:	2100      	movs	r1, #0
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f003 fd7d 	bl	8010a88 <USBD_LL_PrepareReceive>
 800cf8e:	e026      	b.n	800cfde <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d00a      	beq.n	800cfb2 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800cfa2:	2b03      	cmp	r3, #3
 800cfa4:	d105      	bne.n	800cfb2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfac:	68db      	ldr	r3, [r3, #12]
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cfb2:	2180      	movs	r1, #128	; 0x80
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f003 fcbb 	bl	8010930 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f000 fe8f 	bl	800dcde <USBD_CtlReceiveStatus>
 800cfc0:	e00d      	b.n	800cfde <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800cfc8:	2b04      	cmp	r3, #4
 800cfca:	d004      	beq.n	800cfd6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d103      	bne.n	800cfde <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cfd6:	2180      	movs	r1, #128	; 0x80
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f003 fca9 	bl	8010930 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800cfe4:	2b01      	cmp	r3, #1
 800cfe6:	d11d      	bne.n	800d024 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800cfe8:	68f8      	ldr	r0, [r7, #12]
 800cfea:	f7ff fe82 	bl	800ccf2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	2200      	movs	r2, #0
 800cff2:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800cff6:	e015      	b.n	800d024 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cffe:	695b      	ldr	r3, [r3, #20]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d00d      	beq.n	800d020 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800d00a:	2b03      	cmp	r3, #3
 800d00c:	d108      	bne.n	800d020 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d014:	695b      	ldr	r3, [r3, #20]
 800d016:	7afa      	ldrb	r2, [r7, #11]
 800d018:	4611      	mov	r1, r2
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	4798      	blx	r3
 800d01e:	e001      	b.n	800d024 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d020:	2302      	movs	r3, #2
 800d022:	e000      	b.n	800d026 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b082      	sub	sp, #8
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d036:	2340      	movs	r3, #64	; 0x40
 800d038:	2200      	movs	r2, #0
 800d03a:	2100      	movs	r1, #0
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f003 fc32 	bl	80108a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	2201      	movs	r2, #1
 800d046:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2240      	movs	r2, #64	; 0x40
 800d04e:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d052:	2340      	movs	r3, #64	; 0x40
 800d054:	2200      	movs	r2, #0
 800d056:	2180      	movs	r1, #128	; 0x80
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f003 fc24 	bl	80108a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2201      	movs	r2, #1
 800d062:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2240      	movs	r2, #64	; 0x40
 800d068:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2201      	movs	r2, #1
 800d06e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2200      	movs	r2, #0
 800d076:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d009      	beq.n	800d0a6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	6852      	ldr	r2, [r2, #4]
 800d09e:	b2d2      	uxtb	r2, r2
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	6878      	ldr	r0, [r7, #4]
 800d0a4:	4798      	blx	r3
  }

  return USBD_OK;
 800d0a6:	2300      	movs	r3, #0
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	78fa      	ldrb	r2, [r7, #3]
 800d0c0:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800d0c2:	2300      	movs	r3, #0
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	370c      	adds	r7, #12
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2204      	movs	r2, #4
 800d0e8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	370c      	adds	r7, #12
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f8:	4770      	bx	lr

0800d0fa <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800d0fa:	b480      	push	{r7}
 800d0fc:	b083      	sub	sp, #12
 800d0fe:	af00      	add	r7, sp, #0
 800d100:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	370c      	adds	r7, #12
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d12a:	2b03      	cmp	r3, #3
 800d12c:	d10b      	bne.n	800d146 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d134:	69db      	ldr	r3, [r3, #28]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d005      	beq.n	800d146 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d140:	69db      	ldr	r3, [r3, #28]
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	460b      	mov	r3, r1
 800d15a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	370c      	adds	r7, #12
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr

0800d16a <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800d16a:	b480      	push	{r7}
 800d16c:	b083      	sub	sp, #12
 800d16e:	af00      	add	r7, sp, #0
 800d170:	6078      	str	r0, [r7, #4]
 800d172:	460b      	mov	r3, r1
 800d174:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800d176:	2300      	movs	r3, #0
}
 800d178:	4618      	mov	r0, r3
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b082      	sub	sp, #8
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2201      	movs	r2, #1
 800d1a6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	6852      	ldr	r2, [r2, #4]
 800d1b6:	b2d2      	uxtb	r2, r2
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	4798      	blx	r3

  return USBD_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3708      	adds	r7, #8
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1de:	2b20      	cmp	r3, #32
 800d1e0:	d004      	beq.n	800d1ec <USBD_StdDevReq+0x24>
 800d1e2:	2b40      	cmp	r3, #64	; 0x40
 800d1e4:	d002      	beq.n	800d1ec <USBD_StdDevReq+0x24>
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d008      	beq.n	800d1fc <USBD_StdDevReq+0x34>
 800d1ea:	e04c      	b.n	800d286 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	4798      	blx	r3
    break;
 800d1fa:	e049      	b.n	800d290 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	785b      	ldrb	r3, [r3, #1]
 800d200:	2b09      	cmp	r3, #9
 800d202:	d83a      	bhi.n	800d27a <USBD_StdDevReq+0xb2>
 800d204:	a201      	add	r2, pc, #4	; (adr r2, 800d20c <USBD_StdDevReq+0x44>)
 800d206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d20a:	bf00      	nop
 800d20c:	0800d25d 	.word	0x0800d25d
 800d210:	0800d271 	.word	0x0800d271
 800d214:	0800d27b 	.word	0x0800d27b
 800d218:	0800d267 	.word	0x0800d267
 800d21c:	0800d27b 	.word	0x0800d27b
 800d220:	0800d23f 	.word	0x0800d23f
 800d224:	0800d235 	.word	0x0800d235
 800d228:	0800d27b 	.word	0x0800d27b
 800d22c:	0800d253 	.word	0x0800d253
 800d230:	0800d249 	.word	0x0800d249
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800d234:	6839      	ldr	r1, [r7, #0]
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f9d2 	bl	800d5e0 <USBD_GetDescriptor>
      break;
 800d23c:	e022      	b.n	800d284 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fac7 	bl	800d7d4 <USBD_SetAddress>
      break;
 800d246:	e01d      	b.n	800d284 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fb04 	bl	800d858 <USBD_SetConfig>
      break;
 800d250:	e018      	b.n	800d284 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fb8d 	bl	800d974 <USBD_GetConfig>
      break;
 800d25a:	e013      	b.n	800d284 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d25c:	6839      	ldr	r1, [r7, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fbbc 	bl	800d9dc <USBD_GetStatus>
      break;
 800d264:	e00e      	b.n	800d284 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fbea 	bl	800da42 <USBD_SetFeature>
      break;
 800d26e:	e009      	b.n	800d284 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fbf9 	bl	800da6a <USBD_ClrFeature>
      break;
 800d278:	e004      	b.n	800d284 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d27a:	6839      	ldr	r1, [r7, #0]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 fc52 	bl	800db26 <USBD_CtlError>
      break;
 800d282:	bf00      	nop
    }
    break;
 800d284:	e004      	b.n	800d290 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d286:	6839      	ldr	r1, [r7, #0]
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 fc4c 	bl	800db26 <USBD_CtlError>
    break;
 800d28e:	bf00      	nop
  }

  return ret;
 800d290:	7bfb      	ldrb	r3, [r7, #15]
}
 800d292:	4618      	mov	r0, r3
 800d294:	3710      	adds	r7, #16
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop

0800d29c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	781b      	ldrb	r3, [r3, #0]
 800d2ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d2b2:	2b20      	cmp	r3, #32
 800d2b4:	d003      	beq.n	800d2be <USBD_StdItfReq+0x22>
 800d2b6:	2b40      	cmp	r3, #64	; 0x40
 800d2b8:	d001      	beq.n	800d2be <USBD_StdItfReq+0x22>
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d12a      	bne.n	800d314 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d81d      	bhi.n	800d306 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	889b      	ldrh	r3, [r3, #4]
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d813      	bhi.n	800d2fc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	4798      	blx	r3
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	88db      	ldrh	r3, [r3, #6]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d110      	bne.n	800d310 <USBD_StdItfReq+0x74>
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d10d      	bne.n	800d310 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 fcdf 	bl	800dcb8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d2fa:	e009      	b.n	800d310 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800d2fc:	6839      	ldr	r1, [r7, #0]
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fc11 	bl	800db26 <USBD_CtlError>
      break;
 800d304:	e004      	b.n	800d310 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fc0c 	bl	800db26 <USBD_CtlError>
      break;
 800d30e:	e000      	b.n	800d312 <USBD_StdItfReq+0x76>
      break;
 800d310:	bf00      	nop
    }
    break;
 800d312:	e004      	b.n	800d31e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800d314:	6839      	ldr	r1, [r7, #0]
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 fc05 	bl	800db26 <USBD_CtlError>
    break;
 800d31c:	bf00      	nop
  }

  return USBD_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3710      	adds	r7, #16
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}

0800d328 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d332:	2300      	movs	r3, #0
 800d334:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	889b      	ldrh	r3, [r3, #4]
 800d33a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d344:	2b20      	cmp	r3, #32
 800d346:	d004      	beq.n	800d352 <USBD_StdEPReq+0x2a>
 800d348:	2b40      	cmp	r3, #64	; 0x40
 800d34a:	d002      	beq.n	800d352 <USBD_StdEPReq+0x2a>
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d008      	beq.n	800d362 <USBD_StdEPReq+0x3a>
 800d350:	e13b      	b.n	800d5ca <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d358:	689b      	ldr	r3, [r3, #8]
 800d35a:	6839      	ldr	r1, [r7, #0]
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	4798      	blx	r3
    break;
 800d360:	e138      	b.n	800d5d4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d36a:	2b20      	cmp	r3, #32
 800d36c:	d10a      	bne.n	800d384 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	4798      	blx	r3
 800d37c:	4603      	mov	r3, r0
 800d37e:	73fb      	strb	r3, [r7, #15]

      return ret;
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	e128      	b.n	800d5d6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	785b      	ldrb	r3, [r3, #1]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d03e      	beq.n	800d40a <USBD_StdEPReq+0xe2>
 800d38c:	2b03      	cmp	r3, #3
 800d38e:	d002      	beq.n	800d396 <USBD_StdEPReq+0x6e>
 800d390:	2b00      	cmp	r3, #0
 800d392:	d070      	beq.n	800d476 <USBD_StdEPReq+0x14e>
 800d394:	e113      	b.n	800d5be <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d002      	beq.n	800d3a6 <USBD_StdEPReq+0x7e>
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	d015      	beq.n	800d3d0 <USBD_StdEPReq+0xa8>
 800d3a4:	e02b      	b.n	800d3fe <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d3a6:	7bbb      	ldrb	r3, [r7, #14]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00c      	beq.n	800d3c6 <USBD_StdEPReq+0x9e>
 800d3ac:	7bbb      	ldrb	r3, [r7, #14]
 800d3ae:	2b80      	cmp	r3, #128	; 0x80
 800d3b0:	d009      	beq.n	800d3c6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d3b2:	7bbb      	ldrb	r3, [r7, #14]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f003 faba 	bl	8010930 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d3bc:	2180      	movs	r1, #128	; 0x80
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f003 fab6 	bl	8010930 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d3c4:	e020      	b.n	800d408 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800d3c6:	6839      	ldr	r1, [r7, #0]
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f000 fbac 	bl	800db26 <USBD_CtlError>
        break;
 800d3ce:	e01b      	b.n	800d408 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	885b      	ldrh	r3, [r3, #2]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d10e      	bne.n	800d3f6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d3d8:	7bbb      	ldrb	r3, [r7, #14]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00b      	beq.n	800d3f6 <USBD_StdEPReq+0xce>
 800d3de:	7bbb      	ldrb	r3, [r7, #14]
 800d3e0:	2b80      	cmp	r3, #128	; 0x80
 800d3e2:	d008      	beq.n	800d3f6 <USBD_StdEPReq+0xce>
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	88db      	ldrh	r3, [r3, #6]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d104      	bne.n	800d3f6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d3ec:	7bbb      	ldrb	r3, [r7, #14]
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f003 fa9d 	bl	8010930 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 fc5e 	bl	800dcb8 <USBD_CtlSendStatus>

        break;
 800d3fc:	e004      	b.n	800d408 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800d3fe:	6839      	ldr	r1, [r7, #0]
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f000 fb90 	bl	800db26 <USBD_CtlError>
        break;
 800d406:	bf00      	nop
      }
      break;
 800d408:	e0de      	b.n	800d5c8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d410:	2b02      	cmp	r3, #2
 800d412:	d002      	beq.n	800d41a <USBD_StdEPReq+0xf2>
 800d414:	2b03      	cmp	r3, #3
 800d416:	d015      	beq.n	800d444 <USBD_StdEPReq+0x11c>
 800d418:	e026      	b.n	800d468 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d41a:	7bbb      	ldrb	r3, [r7, #14]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00c      	beq.n	800d43a <USBD_StdEPReq+0x112>
 800d420:	7bbb      	ldrb	r3, [r7, #14]
 800d422:	2b80      	cmp	r3, #128	; 0x80
 800d424:	d009      	beq.n	800d43a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d426:	7bbb      	ldrb	r3, [r7, #14]
 800d428:	4619      	mov	r1, r3
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f003 fa80 	bl	8010930 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d430:	2180      	movs	r1, #128	; 0x80
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f003 fa7c 	bl	8010930 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d438:	e01c      	b.n	800d474 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800d43a:	6839      	ldr	r1, [r7, #0]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 fb72 	bl	800db26 <USBD_CtlError>
        break;
 800d442:	e017      	b.n	800d474 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	885b      	ldrh	r3, [r3, #2]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d112      	bne.n	800d472 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d44c:	7bbb      	ldrb	r3, [r7, #14]
 800d44e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d452:	2b00      	cmp	r3, #0
 800d454:	d004      	beq.n	800d460 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d456:	7bbb      	ldrb	r3, [r7, #14]
 800d458:	4619      	mov	r1, r3
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f003 fa87 	bl	801096e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 fc29 	bl	800dcb8 <USBD_CtlSendStatus>
        }
        break;
 800d466:	e004      	b.n	800d472 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800d468:	6839      	ldr	r1, [r7, #0]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fb5b 	bl	800db26 <USBD_CtlError>
        break;
 800d470:	e000      	b.n	800d474 <USBD_StdEPReq+0x14c>
        break;
 800d472:	bf00      	nop
      }
      break;
 800d474:	e0a8      	b.n	800d5c8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d002      	beq.n	800d486 <USBD_StdEPReq+0x15e>
 800d480:	2b03      	cmp	r3, #3
 800d482:	d031      	beq.n	800d4e8 <USBD_StdEPReq+0x1c0>
 800d484:	e095      	b.n	800d5b2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d486:	7bbb      	ldrb	r3, [r7, #14]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d007      	beq.n	800d49c <USBD_StdEPReq+0x174>
 800d48c:	7bbb      	ldrb	r3, [r7, #14]
 800d48e:	2b80      	cmp	r3, #128	; 0x80
 800d490:	d004      	beq.n	800d49c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 fb46 	bl	800db26 <USBD_CtlError>
          break;
 800d49a:	e08f      	b.n	800d5bc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d49c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	da0b      	bge.n	800d4bc <USBD_StdEPReq+0x194>
 800d4a4:	7bbb      	ldrb	r3, [r7, #14]
 800d4a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	4413      	add	r3, r2
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	3310      	adds	r3, #16
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	e00a      	b.n	800d4d2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d4bc:	7bbb      	ldrb	r3, [r7, #14]
 800d4be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d4c2:	4613      	mov	r3, r2
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	4413      	add	r3, r2
 800d4c8:	009b      	lsls	r3, r3, #2
 800d4ca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d4ce:	687a      	ldr	r2, [r7, #4]
 800d4d0:	4413      	add	r3, r2
 800d4d2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	2202      	movs	r2, #2
 800d4de:	4619      	mov	r1, r3
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 fb8b 	bl	800dbfc <USBD_CtlSendData>
          break;
 800d4e6:	e069      	b.n	800d5bc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800d4e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	da11      	bge.n	800d514 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d4f0:	7bbb      	ldrb	r3, [r7, #14]
 800d4f2:	f003 020f 	and.w	r2, r3, #15
 800d4f6:	6879      	ldr	r1, [r7, #4]
 800d4f8:	4613      	mov	r3, r2
 800d4fa:	009b      	lsls	r3, r3, #2
 800d4fc:	4413      	add	r3, r2
 800d4fe:	009b      	lsls	r3, r3, #2
 800d500:	440b      	add	r3, r1
 800d502:	3318      	adds	r3, #24
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d117      	bne.n	800d53a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800d50a:	6839      	ldr	r1, [r7, #0]
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fb0a 	bl	800db26 <USBD_CtlError>
            break;
 800d512:	e053      	b.n	800d5bc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d514:	7bbb      	ldrb	r3, [r7, #14]
 800d516:	f003 020f 	and.w	r2, r3, #15
 800d51a:	6879      	ldr	r1, [r7, #4]
 800d51c:	4613      	mov	r3, r2
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	4413      	add	r3, r2
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	440b      	add	r3, r1
 800d526:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d104      	bne.n	800d53a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800d530:	6839      	ldr	r1, [r7, #0]
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 faf7 	bl	800db26 <USBD_CtlError>
            break;
 800d538:	e040      	b.n	800d5bc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d53a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	da0b      	bge.n	800d55a <USBD_StdEPReq+0x232>
 800d542:	7bbb      	ldrb	r3, [r7, #14]
 800d544:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d548:	4613      	mov	r3, r2
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	3310      	adds	r3, #16
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	4413      	add	r3, r2
 800d556:	3304      	adds	r3, #4
 800d558:	e00a      	b.n	800d570 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d55a:	7bbb      	ldrb	r3, [r7, #14]
 800d55c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009b      	lsls	r3, r3, #2
 800d568:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	4413      	add	r3, r2
 800d570:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d572:	7bbb      	ldrb	r3, [r7, #14]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d002      	beq.n	800d57e <USBD_StdEPReq+0x256>
 800d578:	7bbb      	ldrb	r3, [r7, #14]
 800d57a:	2b80      	cmp	r3, #128	; 0x80
 800d57c:	d103      	bne.n	800d586 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	2200      	movs	r2, #0
 800d582:	601a      	str	r2, [r3, #0]
 800d584:	e00e      	b.n	800d5a4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800d586:	7bbb      	ldrb	r3, [r7, #14]
 800d588:	4619      	mov	r1, r3
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f003 fa0e 	bl	80109ac <USBD_LL_IsStallEP>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d003      	beq.n	800d59e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2201      	movs	r2, #1
 800d59a:	601a      	str	r2, [r3, #0]
 800d59c:	e002      	b.n	800d5a4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	2202      	movs	r2, #2
 800d5a8:	4619      	mov	r1, r3
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fb26 	bl	800dbfc <USBD_CtlSendData>
          break;
 800d5b0:	e004      	b.n	800d5bc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 fab6 	bl	800db26 <USBD_CtlError>
        break;
 800d5ba:	bf00      	nop
      }
      break;
 800d5bc:	e004      	b.n	800d5c8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800d5be:	6839      	ldr	r1, [r7, #0]
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 fab0 	bl	800db26 <USBD_CtlError>
      break;
 800d5c6:	bf00      	nop
    }
    break;
 800d5c8:	e004      	b.n	800d5d4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800d5ca:	6839      	ldr	r1, [r7, #0]
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 faaa 	bl	800db26 <USBD_CtlError>
    break;
 800d5d2:	bf00      	nop
  }

  return ret;
 800d5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
	...

0800d5e0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	885b      	ldrh	r3, [r3, #2]
 800d5ee:	0a1b      	lsrs	r3, r3, #8
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	2b06      	cmp	r3, #6
 800d5f6:	f200 80c9 	bhi.w	800d78c <USBD_GetDescriptor+0x1ac>
 800d5fa:	a201      	add	r2, pc, #4	; (adr r2, 800d600 <USBD_GetDescriptor+0x20>)
 800d5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d600:	0800d61d 	.word	0x0800d61d
 800d604:	0800d635 	.word	0x0800d635
 800d608:	0800d675 	.word	0x0800d675
 800d60c:	0800d78d 	.word	0x0800d78d
 800d610:	0800d78d 	.word	0x0800d78d
 800d614:	0800d739 	.word	0x0800d739
 800d618:	0800d75f 	.word	0x0800d75f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	687a      	ldr	r2, [r7, #4]
 800d626:	7c12      	ldrb	r2, [r2, #16]
 800d628:	f107 010a 	add.w	r1, r7, #10
 800d62c:	4610      	mov	r0, r2
 800d62e:	4798      	blx	r3
 800d630:	60f8      	str	r0, [r7, #12]
    break;
 800d632:	e0b0      	b.n	800d796 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	7c1b      	ldrb	r3, [r3, #16]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10d      	bne.n	800d658 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d644:	f107 020a 	add.w	r2, r7, #10
 800d648:	4610      	mov	r0, r2
 800d64a:	4798      	blx	r3
 800d64c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3301      	adds	r3, #1
 800d652:	2202      	movs	r2, #2
 800d654:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d656:	e09e      	b.n	800d796 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	f107 020a 	add.w	r2, r7, #10
 800d664:	4610      	mov	r0, r2
 800d666:	4798      	blx	r3
 800d668:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	3301      	adds	r3, #1
 800d66e:	2202      	movs	r2, #2
 800d670:	701a      	strb	r2, [r3, #0]
    break;
 800d672:	e090      	b.n	800d796 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	885b      	ldrh	r3, [r3, #2]
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b05      	cmp	r3, #5
 800d67c:	d856      	bhi.n	800d72c <USBD_GetDescriptor+0x14c>
 800d67e:	a201      	add	r2, pc, #4	; (adr r2, 800d684 <USBD_GetDescriptor+0xa4>)
 800d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d684:	0800d69d 	.word	0x0800d69d
 800d688:	0800d6b5 	.word	0x0800d6b5
 800d68c:	0800d6cd 	.word	0x0800d6cd
 800d690:	0800d6e5 	.word	0x0800d6e5
 800d694:	0800d6fd 	.word	0x0800d6fd
 800d698:	0800d715 	.word	0x0800d715
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	7c12      	ldrb	r2, [r2, #16]
 800d6a8:	f107 010a 	add.w	r1, r7, #10
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	4798      	blx	r3
 800d6b0:	60f8      	str	r0, [r7, #12]
      break;
 800d6b2:	e040      	b.n	800d736 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	687a      	ldr	r2, [r7, #4]
 800d6be:	7c12      	ldrb	r2, [r2, #16]
 800d6c0:	f107 010a 	add.w	r1, r7, #10
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
 800d6c8:	60f8      	str	r0, [r7, #12]
      break;
 800d6ca:	e034      	b.n	800d736 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	7c12      	ldrb	r2, [r2, #16]
 800d6d8:	f107 010a 	add.w	r1, r7, #10
 800d6dc:	4610      	mov	r0, r2
 800d6de:	4798      	blx	r3
 800d6e0:	60f8      	str	r0, [r7, #12]
      break;
 800d6e2:	e028      	b.n	800d736 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d6ea:	691b      	ldr	r3, [r3, #16]
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	7c12      	ldrb	r2, [r2, #16]
 800d6f0:	f107 010a 	add.w	r1, r7, #10
 800d6f4:	4610      	mov	r0, r2
 800d6f6:	4798      	blx	r3
 800d6f8:	60f8      	str	r0, [r7, #12]
      break;
 800d6fa:	e01c      	b.n	800d736 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d702:	695b      	ldr	r3, [r3, #20]
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	7c12      	ldrb	r2, [r2, #16]
 800d708:	f107 010a 	add.w	r1, r7, #10
 800d70c:	4610      	mov	r0, r2
 800d70e:	4798      	blx	r3
 800d710:	60f8      	str	r0, [r7, #12]
      break;
 800d712:	e010      	b.n	800d736 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d71a:	699b      	ldr	r3, [r3, #24]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	7c12      	ldrb	r2, [r2, #16]
 800d720:	f107 010a 	add.w	r1, r7, #10
 800d724:	4610      	mov	r0, r2
 800d726:	4798      	blx	r3
 800d728:	60f8      	str	r0, [r7, #12]
      break;
 800d72a:	e004      	b.n	800d736 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f9f9 	bl	800db26 <USBD_CtlError>
      return;
 800d734:	e04b      	b.n	800d7ce <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800d736:	e02e      	b.n	800d796 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	7c1b      	ldrb	r3, [r3, #16]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d109      	bne.n	800d754 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d748:	f107 020a 	add.w	r2, r7, #10
 800d74c:	4610      	mov	r0, r2
 800d74e:	4798      	blx	r3
 800d750:	60f8      	str	r0, [r7, #12]
      break;
 800d752:	e020      	b.n	800d796 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d754:	6839      	ldr	r1, [r7, #0]
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f000 f9e5 	bl	800db26 <USBD_CtlError>
      return;
 800d75c:	e037      	b.n	800d7ce <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	7c1b      	ldrb	r3, [r3, #16]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10d      	bne.n	800d782 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d76c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d76e:	f107 020a 	add.w	r2, r7, #10
 800d772:	4610      	mov	r0, r2
 800d774:	4798      	blx	r3
 800d776:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	3301      	adds	r3, #1
 800d77c:	2207      	movs	r2, #7
 800d77e:	701a      	strb	r2, [r3, #0]
      break;
 800d780:	e009      	b.n	800d796 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f9ce 	bl	800db26 <USBD_CtlError>
      return;
 800d78a:	e020      	b.n	800d7ce <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 f9c9 	bl	800db26 <USBD_CtlError>
    return;
 800d794:	e01b      	b.n	800d7ce <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d796:	897b      	ldrh	r3, [r7, #10]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d011      	beq.n	800d7c0 <USBD_GetDescriptor+0x1e0>
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	88db      	ldrh	r3, [r3, #6]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00d      	beq.n	800d7c0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	88da      	ldrh	r2, [r3, #6]
 800d7a8:	897b      	ldrh	r3, [r7, #10]
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	bf28      	it	cs
 800d7ae:	4613      	movcs	r3, r2
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d7b4:	897b      	ldrh	r3, [r7, #10]
 800d7b6:	461a      	mov	r2, r3
 800d7b8:	68f9      	ldr	r1, [r7, #12]
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 fa1e 	bl	800dbfc <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	88db      	ldrh	r3, [r3, #6]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d102      	bne.n	800d7ce <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800d7c8:	6878      	ldr	r0, [r7, #4]
 800d7ca:	f000 fa75 	bl	800dcb8 <USBD_CtlSendStatus>
  }
}
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	889b      	ldrh	r3, [r3, #4]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d130      	bne.n	800d848 <USBD_SetAddress+0x74>
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	88db      	ldrh	r3, [r3, #6]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d12c      	bne.n	800d848 <USBD_SetAddress+0x74>
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	885b      	ldrh	r3, [r3, #2]
 800d7f2:	2b7f      	cmp	r3, #127	; 0x7f
 800d7f4:	d828      	bhi.n	800d848 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	885b      	ldrh	r3, [r3, #2]
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d800:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d808:	2b03      	cmp	r3, #3
 800d80a:	d104      	bne.n	800d816 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800d80c:	6839      	ldr	r1, [r7, #0]
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f989 	bl	800db26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d814:	e01c      	b.n	800d850 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	7bfa      	ldrb	r2, [r7, #15]
 800d81a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f003 f8ee 	bl	8010a04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f000 fa45 	bl	800dcb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d004      	beq.n	800d83e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2202      	movs	r2, #2
 800d838:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d83c:	e008      	b.n	800d850 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d846:	e003      	b.n	800d850 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f96b 	bl	800db26 <USBD_CtlError>
  }
}
 800d850:	bf00      	nop
 800d852:	3710      	adds	r7, #16
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	885b      	ldrh	r3, [r3, #2]
 800d866:	b2da      	uxtb	r2, r3
 800d868:	4b41      	ldr	r3, [pc, #260]	; (800d970 <USBD_SetConfig+0x118>)
 800d86a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d86c:	4b40      	ldr	r3, [pc, #256]	; (800d970 <USBD_SetConfig+0x118>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d904      	bls.n	800d87e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800d874:	6839      	ldr	r1, [r7, #0]
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 f955 	bl	800db26 <USBD_CtlError>
 800d87c:	e075      	b.n	800d96a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d884:	2b02      	cmp	r3, #2
 800d886:	d002      	beq.n	800d88e <USBD_SetConfig+0x36>
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d023      	beq.n	800d8d4 <USBD_SetConfig+0x7c>
 800d88c:	e062      	b.n	800d954 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800d88e:	4b38      	ldr	r3, [pc, #224]	; (800d970 <USBD_SetConfig+0x118>)
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d01a      	beq.n	800d8cc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800d896:	4b36      	ldr	r3, [pc, #216]	; (800d970 <USBD_SetConfig+0x118>)
 800d898:	781b      	ldrb	r3, [r3, #0]
 800d89a:	461a      	mov	r2, r3
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2203      	movs	r2, #3
 800d8a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d8a8:	4b31      	ldr	r3, [pc, #196]	; (800d970 <USBD_SetConfig+0x118>)
 800d8aa:	781b      	ldrb	r3, [r3, #0]
 800d8ac:	4619      	mov	r1, r3
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7ff fa2a 	bl	800cd08 <USBD_SetClassConfig>
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	d104      	bne.n	800d8c4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800d8ba:	6839      	ldr	r1, [r7, #0]
 800d8bc:	6878      	ldr	r0, [r7, #4]
 800d8be:	f000 f932 	bl	800db26 <USBD_CtlError>
          return;
 800d8c2:	e052      	b.n	800d96a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 f9f7 	bl	800dcb8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d8ca:	e04e      	b.n	800d96a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f9f3 	bl	800dcb8 <USBD_CtlSendStatus>
      break;
 800d8d2:	e04a      	b.n	800d96a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d8d4:	4b26      	ldr	r3, [pc, #152]	; (800d970 <USBD_SetConfig+0x118>)
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d112      	bne.n	800d902 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2202      	movs	r2, #2
 800d8e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800d8e4:	4b22      	ldr	r3, [pc, #136]	; (800d970 <USBD_SetConfig+0x118>)
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	461a      	mov	r2, r3
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800d8ee:	4b20      	ldr	r3, [pc, #128]	; (800d970 <USBD_SetConfig+0x118>)
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f7ff fa26 	bl	800cd46 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 f9dc 	bl	800dcb8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800d900:	e033      	b.n	800d96a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800d902:	4b1b      	ldr	r3, [pc, #108]	; (800d970 <USBD_SetConfig+0x118>)
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	461a      	mov	r2, r3
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d01d      	beq.n	800d94c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	b2db      	uxtb	r3, r3
 800d916:	4619      	mov	r1, r3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7ff fa14 	bl	800cd46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d91e:	4b14      	ldr	r3, [pc, #80]	; (800d970 <USBD_SetConfig+0x118>)
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	461a      	mov	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d928:	4b11      	ldr	r3, [pc, #68]	; (800d970 <USBD_SetConfig+0x118>)
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	4619      	mov	r1, r3
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f7ff f9ea 	bl	800cd08 <USBD_SetClassConfig>
 800d934:	4603      	mov	r3, r0
 800d936:	2b02      	cmp	r3, #2
 800d938:	d104      	bne.n	800d944 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f8f2 	bl	800db26 <USBD_CtlError>
          return;
 800d942:	e012      	b.n	800d96a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f9b7 	bl	800dcb8 <USBD_CtlSendStatus>
      break;
 800d94a:	e00e      	b.n	800d96a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f000 f9b3 	bl	800dcb8 <USBD_CtlSendStatus>
      break;
 800d952:	e00a      	b.n	800d96a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800d954:	6839      	ldr	r1, [r7, #0]
 800d956:	6878      	ldr	r0, [r7, #4]
 800d958:	f000 f8e5 	bl	800db26 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800d95c:	4b04      	ldr	r3, [pc, #16]	; (800d970 <USBD_SetConfig+0x118>)
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	4619      	mov	r1, r3
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f7ff f9ef 	bl	800cd46 <USBD_ClrClassConfig>
      break;
 800d968:	bf00      	nop
    }
  }
}
 800d96a:	3708      	adds	r7, #8
 800d96c:	46bd      	mov	sp, r7
 800d96e:	bd80      	pop	{r7, pc}
 800d970:	200009a0 	.word	0x200009a0

0800d974 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	88db      	ldrh	r3, [r3, #6]
 800d982:	2b01      	cmp	r3, #1
 800d984:	d004      	beq.n	800d990 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800d986:	6839      	ldr	r1, [r7, #0]
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f8cc 	bl	800db26 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800d98e:	e021      	b.n	800d9d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d996:	2b01      	cmp	r3, #1
 800d998:	db17      	blt.n	800d9ca <USBD_GetConfig+0x56>
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	dd02      	ble.n	800d9a4 <USBD_GetConfig+0x30>
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d00b      	beq.n	800d9ba <USBD_GetConfig+0x46>
 800d9a2:	e012      	b.n	800d9ca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f922 	bl	800dbfc <USBD_CtlSendData>
      break;
 800d9b8:	e00c      	b.n	800d9d4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	3304      	adds	r3, #4
 800d9be:	2201      	movs	r2, #1
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 f91a 	bl	800dbfc <USBD_CtlSendData>
      break;
 800d9c8:	e004      	b.n	800d9d4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f8aa 	bl	800db26 <USBD_CtlError>
      break;
 800d9d2:	bf00      	nop
}
 800d9d4:	bf00      	nop
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	d81e      	bhi.n	800da30 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	88db      	ldrh	r3, [r3, #6]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d004      	beq.n	800da04 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800d9fa:	6839      	ldr	r1, [r7, #0]
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 f892 	bl	800db26 <USBD_CtlError>
      break;
 800da02:	e01a      	b.n	800da3a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800da10:	2b00      	cmp	r3, #0
 800da12:	d005      	beq.n	800da20 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	68db      	ldr	r3, [r3, #12]
 800da18:	f043 0202 	orr.w	r2, r3, #2
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	330c      	adds	r3, #12
 800da24:	2202      	movs	r2, #2
 800da26:	4619      	mov	r1, r3
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 f8e7 	bl	800dbfc <USBD_CtlSendData>
    break;
 800da2e:	e004      	b.n	800da3a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800da30:	6839      	ldr	r1, [r7, #0]
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f877 	bl	800db26 <USBD_CtlError>
    break;
 800da38:	bf00      	nop
  }
}
 800da3a:	bf00      	nop
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b082      	sub	sp, #8
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	885b      	ldrh	r3, [r3, #2]
 800da50:	2b01      	cmp	r3, #1
 800da52:	d106      	bne.n	800da62 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 f92b 	bl	800dcb8 <USBD_CtlSendStatus>
  }

}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b082      	sub	sp, #8
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
 800da72:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800da7a:	3b01      	subs	r3, #1
 800da7c:	2b02      	cmp	r3, #2
 800da7e:	d80b      	bhi.n	800da98 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	885b      	ldrh	r3, [r3, #2]
 800da84:	2b01      	cmp	r3, #1
 800da86:	d10c      	bne.n	800daa2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 f911 	bl	800dcb8 <USBD_CtlSendStatus>
    }
    break;
 800da96:	e004      	b.n	800daa2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800da98:	6839      	ldr	r1, [r7, #0]
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 f843 	bl	800db26 <USBD_CtlError>
    break;
 800daa0:	e000      	b.n	800daa4 <USBD_ClrFeature+0x3a>
    break;
 800daa2:	bf00      	nop
  }
}
 800daa4:	bf00      	nop
 800daa6:	3708      	adds	r7, #8
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}

0800daac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	781a      	ldrb	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	785a      	ldrb	r2, [r3, #1]
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	3302      	adds	r3, #2
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	b29a      	uxth	r2, r3
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	3303      	adds	r3, #3
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	021b      	lsls	r3, r3, #8
 800dad8:	b29b      	uxth	r3, r3
 800dada:	4413      	add	r3, r2
 800dadc:	b29a      	uxth	r2, r3
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	3304      	adds	r3, #4
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	b29a      	uxth	r2, r3
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	3305      	adds	r3, #5
 800daee:	781b      	ldrb	r3, [r3, #0]
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	021b      	lsls	r3, r3, #8
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	4413      	add	r3, r2
 800daf8:	b29a      	uxth	r2, r3
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	3306      	adds	r3, #6
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	b29a      	uxth	r2, r3
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	3307      	adds	r3, #7
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	021b      	lsls	r3, r3, #8
 800db10:	b29b      	uxth	r3, r3
 800db12:	4413      	add	r3, r2
 800db14:	b29a      	uxth	r2, r3
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	80da      	strh	r2, [r3, #6]

}
 800db1a:	bf00      	nop
 800db1c:	370c      	adds	r7, #12
 800db1e:	46bd      	mov	sp, r7
 800db20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db24:	4770      	bx	lr

0800db26 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b082      	sub	sp, #8
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
 800db2e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800db30:	2180      	movs	r1, #128	; 0x80
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f002 fefc 	bl	8010930 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800db38:	2100      	movs	r1, #0
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f002 fef8 	bl	8010930 <USBD_LL_StallEP>
}
 800db40:	bf00      	nop
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db48:	b580      	push	{r7, lr}
 800db4a:	b086      	sub	sp, #24
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	60f8      	str	r0, [r7, #12]
 800db50:	60b9      	str	r1, [r7, #8]
 800db52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db54:	2300      	movs	r3, #0
 800db56:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d032      	beq.n	800dbc4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800db5e:	68f8      	ldr	r0, [r7, #12]
 800db60:	f000 f834 	bl	800dbcc <USBD_GetLen>
 800db64:	4603      	mov	r3, r0
 800db66:	3301      	adds	r3, #1
 800db68:	b29b      	uxth	r3, r3
 800db6a:	005b      	lsls	r3, r3, #1
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800db72:	7dfb      	ldrb	r3, [r7, #23]
 800db74:	1c5a      	adds	r2, r3, #1
 800db76:	75fa      	strb	r2, [r7, #23]
 800db78:	461a      	mov	r2, r3
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	4413      	add	r3, r2
 800db7e:	687a      	ldr	r2, [r7, #4]
 800db80:	7812      	ldrb	r2, [r2, #0]
 800db82:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800db84:	7dfb      	ldrb	r3, [r7, #23]
 800db86:	1c5a      	adds	r2, r3, #1
 800db88:	75fa      	strb	r2, [r7, #23]
 800db8a:	461a      	mov	r2, r3
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	4413      	add	r3, r2
 800db90:	2203      	movs	r2, #3
 800db92:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800db94:	e012      	b.n	800dbbc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	1c5a      	adds	r2, r3, #1
 800db9a:	60fa      	str	r2, [r7, #12]
 800db9c:	7dfa      	ldrb	r2, [r7, #23]
 800db9e:	1c51      	adds	r1, r2, #1
 800dba0:	75f9      	strb	r1, [r7, #23]
 800dba2:	4611      	mov	r1, r2
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	440a      	add	r2, r1
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800dbac:	7dfb      	ldrb	r3, [r7, #23]
 800dbae:	1c5a      	adds	r2, r3, #1
 800dbb0:	75fa      	strb	r2, [r7, #23]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	4413      	add	r3, r2
 800dbb8:	2200      	movs	r2, #0
 800dbba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d1e8      	bne.n	800db96 <USBD_GetString+0x4e>
    }
  }
}
 800dbc4:	bf00      	nop
 800dbc6:	3718      	adds	r7, #24
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dbcc:	b480      	push	{r7}
 800dbce:	b085      	sub	sp, #20
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800dbd8:	e005      	b.n	800dbe6 <USBD_GetLen+0x1a>
    {
        len++;
 800dbda:	7bfb      	ldrb	r3, [r7, #15]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	73fb      	strb	r3, [r7, #15]
        buf++;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d1f5      	bne.n	800dbda <USBD_GetLen+0xe>
    }

    return len;
 800dbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3714      	adds	r7, #20
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr

0800dbfc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b084      	sub	sp, #16
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	60f8      	str	r0, [r7, #12]
 800dc04:	60b9      	str	r1, [r7, #8]
 800dc06:	4613      	mov	r3, r2
 800dc08:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2202      	movs	r2, #2
 800dc0e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800dc12:	88fa      	ldrh	r2, [r7, #6]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800dc18:	88fa      	ldrh	r2, [r7, #6]
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800dc1e:	88fb      	ldrh	r3, [r7, #6]
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	2100      	movs	r1, #0
 800dc24:	68f8      	ldr	r0, [r7, #12]
 800dc26:	f002 ff0c 	bl	8010a42 <USBD_LL_Transmit>

  return USBD_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3710      	adds	r7, #16
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b084      	sub	sp, #16
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	60f8      	str	r0, [r7, #12]
 800dc3c:	60b9      	str	r1, [r7, #8]
 800dc3e:	4613      	mov	r3, r2
 800dc40:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800dc42:	88fb      	ldrh	r3, [r7, #6]
 800dc44:	68ba      	ldr	r2, [r7, #8]
 800dc46:	2100      	movs	r1, #0
 800dc48:	68f8      	ldr	r0, [r7, #12]
 800dc4a:	f002 fefa 	bl	8010a42 <USBD_LL_Transmit>

  return USBD_OK;
 800dc4e:	2300      	movs	r3, #0
}
 800dc50:	4618      	mov	r0, r3
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b084      	sub	sp, #16
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	4613      	mov	r3, r2
 800dc64:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2203      	movs	r2, #3
 800dc6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800dc6e:	88fa      	ldrh	r2, [r7, #6]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800dc76:	88fa      	ldrh	r2, [r7, #6]
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800dc7e:	88fb      	ldrh	r3, [r7, #6]
 800dc80:	68ba      	ldr	r2, [r7, #8]
 800dc82:	2100      	movs	r1, #0
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f002 feff 	bl	8010a88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dca2:	88fb      	ldrh	r3, [r7, #6]
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	2100      	movs	r1, #0
 800dca8:	68f8      	ldr	r0, [r7, #12]
 800dcaa:	f002 feed 	bl	8010a88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcae:	2300      	movs	r3, #0
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2204      	movs	r2, #4
 800dcc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dcc8:	2300      	movs	r3, #0
 800dcca:	2200      	movs	r2, #0
 800dccc:	2100      	movs	r1, #0
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f002 feb7 	bl	8010a42 <USBD_LL_Transmit>

  return USBD_OK;
 800dcd4:	2300      	movs	r3, #0
}
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	3708      	adds	r7, #8
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}

0800dcde <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800dcde:	b580      	push	{r7, lr}
 800dce0:	b082      	sub	sp, #8
 800dce2:	af00      	add	r7, sp, #0
 800dce4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2205      	movs	r2, #5
 800dcea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800dcee:	2300      	movs	r3, #0
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	2100      	movs	r1, #0
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f002 fec7 	bl	8010a88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcfa:	2300      	movs	r3, #0
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3708      	adds	r7, #8
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800dd0e:	79fb      	ldrb	r3, [r7, #7]
 800dd10:	4a08      	ldr	r2, [pc, #32]	; (800dd34 <disk_status+0x30>)
 800dd12:	009b      	lsls	r3, r3, #2
 800dd14:	4413      	add	r3, r2
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	685b      	ldr	r3, [r3, #4]
 800dd1a:	79fa      	ldrb	r2, [r7, #7]
 800dd1c:	4905      	ldr	r1, [pc, #20]	; (800dd34 <disk_status+0x30>)
 800dd1e:	440a      	add	r2, r1
 800dd20:	7a12      	ldrb	r2, [r2, #8]
 800dd22:	4610      	mov	r0, r2
 800dd24:	4798      	blx	r3
 800dd26:	4603      	mov	r3, r0
 800dd28:	73fb      	strb	r3, [r7, #15]
  return stat;
 800dd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3710      	adds	r7, #16
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}
 800dd34:	200009cc 	.word	0x200009cc

0800dd38 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800dd42:	2300      	movs	r3, #0
 800dd44:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800dd46:	79fb      	ldrb	r3, [r7, #7]
 800dd48:	4a0d      	ldr	r2, [pc, #52]	; (800dd80 <disk_initialize+0x48>)
 800dd4a:	5cd3      	ldrb	r3, [r2, r3]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d111      	bne.n	800dd74 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800dd50:	79fb      	ldrb	r3, [r7, #7]
 800dd52:	4a0b      	ldr	r2, [pc, #44]	; (800dd80 <disk_initialize+0x48>)
 800dd54:	2101      	movs	r1, #1
 800dd56:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800dd58:	79fb      	ldrb	r3, [r7, #7]
 800dd5a:	4a09      	ldr	r2, [pc, #36]	; (800dd80 <disk_initialize+0x48>)
 800dd5c:	009b      	lsls	r3, r3, #2
 800dd5e:	4413      	add	r3, r2
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	79fa      	ldrb	r2, [r7, #7]
 800dd66:	4906      	ldr	r1, [pc, #24]	; (800dd80 <disk_initialize+0x48>)
 800dd68:	440a      	add	r2, r1
 800dd6a:	7a12      	ldrb	r2, [r2, #8]
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	4798      	blx	r3
 800dd70:	4603      	mov	r3, r0
 800dd72:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3710      	adds	r7, #16
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	200009cc 	.word	0x200009cc

0800dd84 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dd84:	b590      	push	{r4, r7, lr}
 800dd86:	b087      	sub	sp, #28
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60b9      	str	r1, [r7, #8]
 800dd8c:	607a      	str	r2, [r7, #4]
 800dd8e:	603b      	str	r3, [r7, #0]
 800dd90:	4603      	mov	r3, r0
 800dd92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dd94:	7bfb      	ldrb	r3, [r7, #15]
 800dd96:	4a0a      	ldr	r2, [pc, #40]	; (800ddc0 <disk_read+0x3c>)
 800dd98:	009b      	lsls	r3, r3, #2
 800dd9a:	4413      	add	r3, r2
 800dd9c:	685b      	ldr	r3, [r3, #4]
 800dd9e:	689c      	ldr	r4, [r3, #8]
 800dda0:	7bfb      	ldrb	r3, [r7, #15]
 800dda2:	4a07      	ldr	r2, [pc, #28]	; (800ddc0 <disk_read+0x3c>)
 800dda4:	4413      	add	r3, r2
 800dda6:	7a18      	ldrb	r0, [r3, #8]
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	68b9      	ldr	r1, [r7, #8]
 800ddae:	47a0      	blx	r4
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	75fb      	strb	r3, [r7, #23]
  return res;
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	371c      	adds	r7, #28
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd90      	pop	{r4, r7, pc}
 800ddbe:	bf00      	nop
 800ddc0:	200009cc 	.word	0x200009cc

0800ddc4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ddc4:	b590      	push	{r4, r7, lr}
 800ddc6:	b087      	sub	sp, #28
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60b9      	str	r1, [r7, #8]
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	603b      	str	r3, [r7, #0]
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ddd4:	7bfb      	ldrb	r3, [r7, #15]
 800ddd6:	4a0a      	ldr	r2, [pc, #40]	; (800de00 <disk_write+0x3c>)
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	4413      	add	r3, r2
 800dddc:	685b      	ldr	r3, [r3, #4]
 800ddde:	68dc      	ldr	r4, [r3, #12]
 800dde0:	7bfb      	ldrb	r3, [r7, #15]
 800dde2:	4a07      	ldr	r2, [pc, #28]	; (800de00 <disk_write+0x3c>)
 800dde4:	4413      	add	r3, r2
 800dde6:	7a18      	ldrb	r0, [r3, #8]
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	68b9      	ldr	r1, [r7, #8]
 800ddee:	47a0      	blx	r4
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	75fb      	strb	r3, [r7, #23]
  return res;
 800ddf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	371c      	adds	r7, #28
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd90      	pop	{r4, r7, pc}
 800ddfe:	bf00      	nop
 800de00:	200009cc 	.word	0x200009cc

0800de04 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	4603      	mov	r3, r0
 800de0c:	603a      	str	r2, [r7, #0]
 800de0e:	71fb      	strb	r3, [r7, #7]
 800de10:	460b      	mov	r3, r1
 800de12:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800de14:	79fb      	ldrb	r3, [r7, #7]
 800de16:	4a09      	ldr	r2, [pc, #36]	; (800de3c <disk_ioctl+0x38>)
 800de18:	009b      	lsls	r3, r3, #2
 800de1a:	4413      	add	r3, r2
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	79fa      	ldrb	r2, [r7, #7]
 800de22:	4906      	ldr	r1, [pc, #24]	; (800de3c <disk_ioctl+0x38>)
 800de24:	440a      	add	r2, r1
 800de26:	7a10      	ldrb	r0, [r2, #8]
 800de28:	79b9      	ldrb	r1, [r7, #6]
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	4798      	blx	r3
 800de2e:	4603      	mov	r3, r0
 800de30:	73fb      	strb	r3, [r7, #15]
  return res;
 800de32:	7bfb      	ldrb	r3, [r7, #15]
}
 800de34:	4618      	mov	r0, r3
 800de36:	3710      	adds	r7, #16
 800de38:	46bd      	mov	sp, r7
 800de3a:	bd80      	pop	{r7, pc}
 800de3c:	200009cc 	.word	0x200009cc

0800de40 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800de40:	b480      	push	{r7}
 800de42:	b085      	sub	sp, #20
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	3301      	adds	r3, #1
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800de50:	89fb      	ldrh	r3, [r7, #14]
 800de52:	021b      	lsls	r3, r3, #8
 800de54:	b21a      	sxth	r2, r3
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	b21b      	sxth	r3, r3
 800de5c:	4313      	orrs	r3, r2
 800de5e:	b21b      	sxth	r3, r3
 800de60:	81fb      	strh	r3, [r7, #14]
	return rv;
 800de62:	89fb      	ldrh	r3, [r7, #14]
}
 800de64:	4618      	mov	r0, r3
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800de70:	b480      	push	{r7}
 800de72:	b085      	sub	sp, #20
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	3303      	adds	r3, #3
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	021b      	lsls	r3, r3, #8
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	3202      	adds	r2, #2
 800de88:	7812      	ldrb	r2, [r2, #0]
 800de8a:	4313      	orrs	r3, r2
 800de8c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	021b      	lsls	r3, r3, #8
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	3201      	adds	r2, #1
 800de96:	7812      	ldrb	r2, [r2, #0]
 800de98:	4313      	orrs	r3, r2
 800de9a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	021b      	lsls	r3, r3, #8
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	7812      	ldrb	r2, [r2, #0]
 800dea4:	4313      	orrs	r3, r2
 800dea6:	60fb      	str	r3, [r7, #12]
	return rv;
 800dea8:	68fb      	ldr	r3, [r7, #12]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800deb6:	b480      	push	{r7}
 800deb8:	b083      	sub	sp, #12
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
 800debe:	460b      	mov	r3, r1
 800dec0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	1c5a      	adds	r2, r3, #1
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	887a      	ldrh	r2, [r7, #2]
 800deca:	b2d2      	uxtb	r2, r2
 800decc:	701a      	strb	r2, [r3, #0]
 800dece:	887b      	ldrh	r3, [r7, #2]
 800ded0:	0a1b      	lsrs	r3, r3, #8
 800ded2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	1c5a      	adds	r2, r3, #1
 800ded8:	607a      	str	r2, [r7, #4]
 800deda:	887a      	ldrh	r2, [r7, #2]
 800dedc:	b2d2      	uxtb	r2, r2
 800dede:	701a      	strb	r2, [r3, #0]
}
 800dee0:	bf00      	nop
 800dee2:	370c      	adds	r7, #12
 800dee4:	46bd      	mov	sp, r7
 800dee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deea:	4770      	bx	lr

0800deec <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800deec:	b480      	push	{r7}
 800deee:	b083      	sub	sp, #12
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	1c5a      	adds	r2, r3, #1
 800defa:	607a      	str	r2, [r7, #4]
 800defc:	683a      	ldr	r2, [r7, #0]
 800defe:	b2d2      	uxtb	r2, r2
 800df00:	701a      	strb	r2, [r3, #0]
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	0a1b      	lsrs	r3, r3, #8
 800df06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	1c5a      	adds	r2, r3, #1
 800df0c:	607a      	str	r2, [r7, #4]
 800df0e:	683a      	ldr	r2, [r7, #0]
 800df10:	b2d2      	uxtb	r2, r2
 800df12:	701a      	strb	r2, [r3, #0]
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	0a1b      	lsrs	r3, r3, #8
 800df18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	1c5a      	adds	r2, r3, #1
 800df1e:	607a      	str	r2, [r7, #4]
 800df20:	683a      	ldr	r2, [r7, #0]
 800df22:	b2d2      	uxtb	r2, r2
 800df24:	701a      	strb	r2, [r3, #0]
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	0a1b      	lsrs	r3, r3, #8
 800df2a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	607a      	str	r2, [r7, #4]
 800df32:	683a      	ldr	r2, [r7, #0]
 800df34:	b2d2      	uxtb	r2, r2
 800df36:	701a      	strb	r2, [r3, #0]
}
 800df38:	bf00      	nop
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr

0800df44 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800df44:	b480      	push	{r7}
 800df46:	b087      	sub	sp, #28
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d00d      	beq.n	800df7a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800df5e:	693a      	ldr	r2, [r7, #16]
 800df60:	1c53      	adds	r3, r2, #1
 800df62:	613b      	str	r3, [r7, #16]
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	1c59      	adds	r1, r3, #1
 800df68:	6179      	str	r1, [r7, #20]
 800df6a:	7812      	ldrb	r2, [r2, #0]
 800df6c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	3b01      	subs	r3, #1
 800df72:	607b      	str	r3, [r7, #4]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d1f1      	bne.n	800df5e <mem_cpy+0x1a>
	}
}
 800df7a:	bf00      	nop
 800df7c:	371c      	adds	r7, #28
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800df86:	b480      	push	{r7}
 800df88:	b087      	sub	sp, #28
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	60b9      	str	r1, [r7, #8]
 800df90:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	1c5a      	adds	r2, r3, #1
 800df9a:	617a      	str	r2, [r7, #20]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	b2d2      	uxtb	r2, r2
 800dfa0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	607b      	str	r3, [r7, #4]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d1f3      	bne.n	800df96 <mem_set+0x10>
}
 800dfae:	bf00      	nop
 800dfb0:	371c      	adds	r7, #28
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb8:	4770      	bx	lr

0800dfba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dfba:	b480      	push	{r7}
 800dfbc:	b089      	sub	sp, #36	; 0x24
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	60f8      	str	r0, [r7, #12]
 800dfc2:	60b9      	str	r1, [r7, #8]
 800dfc4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	61fb      	str	r3, [r7, #28]
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	1c5a      	adds	r2, r3, #1
 800dfd6:	61fa      	str	r2, [r7, #28]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	1c5a      	adds	r2, r3, #1
 800dfe0:	61ba      	str	r2, [r7, #24]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	1acb      	subs	r3, r1, r3
 800dfe6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	3b01      	subs	r3, #1
 800dfec:	607b      	str	r3, [r7, #4]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <mem_cmp+0x40>
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d0eb      	beq.n	800dfd2 <mem_cmp+0x18>

	return r;
 800dffa:	697b      	ldr	r3, [r7, #20]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3724      	adds	r7, #36	; 0x24
 800e000:	46bd      	mov	sp, r7
 800e002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e006:	4770      	bx	lr

0800e008 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e008:	b480      	push	{r7}
 800e00a:	b083      	sub	sp, #12
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e012:	e002      	b.n	800e01a <chk_chr+0x12>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	3301      	adds	r3, #1
 800e018:	607b      	str	r3, [r7, #4]
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d005      	beq.n	800e02e <chk_chr+0x26>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	461a      	mov	r2, r3
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d1f2      	bne.n	800e014 <chk_chr+0xc>
	return *str;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	781b      	ldrb	r3, [r3, #0]
}
 800e032:	4618      	mov	r0, r3
 800e034:	370c      	adds	r7, #12
 800e036:	46bd      	mov	sp, r7
 800e038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03c:	4770      	bx	lr
	...

0800e040 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e040:	b480      	push	{r7}
 800e042:	b085      	sub	sp, #20
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e04a:	2300      	movs	r3, #0
 800e04c:	60bb      	str	r3, [r7, #8]
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	e029      	b.n	800e0a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e054:	4a27      	ldr	r2, [pc, #156]	; (800e0f4 <chk_lock+0xb4>)
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	011b      	lsls	r3, r3, #4
 800e05a:	4413      	add	r3, r2
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d01d      	beq.n	800e09e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e062:	4a24      	ldr	r2, [pc, #144]	; (800e0f4 <chk_lock+0xb4>)
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	011b      	lsls	r3, r3, #4
 800e068:	4413      	add	r3, r2
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	429a      	cmp	r2, r3
 800e072:	d116      	bne.n	800e0a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e074:	4a1f      	ldr	r2, [pc, #124]	; (800e0f4 <chk_lock+0xb4>)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	011b      	lsls	r3, r3, #4
 800e07a:	4413      	add	r3, r2
 800e07c:	3304      	adds	r3, #4
 800e07e:	681a      	ldr	r2, [r3, #0]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e084:	429a      	cmp	r2, r3
 800e086:	d10c      	bne.n	800e0a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e088:	4a1a      	ldr	r2, [pc, #104]	; (800e0f4 <chk_lock+0xb4>)
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	011b      	lsls	r3, r3, #4
 800e08e:	4413      	add	r3, r2
 800e090:	3308      	adds	r3, #8
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e098:	429a      	cmp	r2, r3
 800e09a:	d102      	bne.n	800e0a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e09c:	e007      	b.n	800e0ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e09e:	2301      	movs	r3, #1
 800e0a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	60fb      	str	r3, [r7, #12]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d9d2      	bls.n	800e054 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	2b02      	cmp	r3, #2
 800e0b2:	d109      	bne.n	800e0c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d102      	bne.n	800e0c0 <chk_lock+0x80>
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	2b02      	cmp	r3, #2
 800e0be:	d101      	bne.n	800e0c4 <chk_lock+0x84>
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	e010      	b.n	800e0e6 <chk_lock+0xa6>
 800e0c4:	2312      	movs	r3, #18
 800e0c6:	e00e      	b.n	800e0e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d108      	bne.n	800e0e0 <chk_lock+0xa0>
 800e0ce:	4a09      	ldr	r2, [pc, #36]	; (800e0f4 <chk_lock+0xb4>)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	011b      	lsls	r3, r3, #4
 800e0d4:	4413      	add	r3, r2
 800e0d6:	330c      	adds	r3, #12
 800e0d8:	881b      	ldrh	r3, [r3, #0]
 800e0da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0de:	d101      	bne.n	800e0e4 <chk_lock+0xa4>
 800e0e0:	2310      	movs	r3, #16
 800e0e2:	e000      	b.n	800e0e6 <chk_lock+0xa6>
 800e0e4:	2300      	movs	r3, #0
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	3714      	adds	r7, #20
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f0:	4770      	bx	lr
 800e0f2:	bf00      	nop
 800e0f4:	200009ac 	.word	0x200009ac

0800e0f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e0fe:	2300      	movs	r3, #0
 800e100:	607b      	str	r3, [r7, #4]
 800e102:	e002      	b.n	800e10a <enq_lock+0x12>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	3301      	adds	r3, #1
 800e108:	607b      	str	r3, [r7, #4]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2b01      	cmp	r3, #1
 800e10e:	d806      	bhi.n	800e11e <enq_lock+0x26>
 800e110:	4a09      	ldr	r2, [pc, #36]	; (800e138 <enq_lock+0x40>)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	011b      	lsls	r3, r3, #4
 800e116:	4413      	add	r3, r2
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d1f2      	bne.n	800e104 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b02      	cmp	r3, #2
 800e122:	bf14      	ite	ne
 800e124:	2301      	movne	r3, #1
 800e126:	2300      	moveq	r3, #0
 800e128:	b2db      	uxtb	r3, r3
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	370c      	adds	r7, #12
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	200009ac 	.word	0x200009ac

0800e13c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e146:	2300      	movs	r3, #0
 800e148:	60fb      	str	r3, [r7, #12]
 800e14a:	e01f      	b.n	800e18c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e14c:	4a41      	ldr	r2, [pc, #260]	; (800e254 <inc_lock+0x118>)
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	011b      	lsls	r3, r3, #4
 800e152:	4413      	add	r3, r2
 800e154:	681a      	ldr	r2, [r3, #0]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d113      	bne.n	800e186 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e15e:	4a3d      	ldr	r2, [pc, #244]	; (800e254 <inc_lock+0x118>)
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	011b      	lsls	r3, r3, #4
 800e164:	4413      	add	r3, r2
 800e166:	3304      	adds	r3, #4
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e16e:	429a      	cmp	r2, r3
 800e170:	d109      	bne.n	800e186 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e172:	4a38      	ldr	r2, [pc, #224]	; (800e254 <inc_lock+0x118>)
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	011b      	lsls	r3, r3, #4
 800e178:	4413      	add	r3, r2
 800e17a:	3308      	adds	r3, #8
 800e17c:	681a      	ldr	r2, [r3, #0]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e182:	429a      	cmp	r2, r3
 800e184:	d006      	beq.n	800e194 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	3301      	adds	r3, #1
 800e18a:	60fb      	str	r3, [r7, #12]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d9dc      	bls.n	800e14c <inc_lock+0x10>
 800e192:	e000      	b.n	800e196 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e194:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	2b02      	cmp	r3, #2
 800e19a:	d132      	bne.n	800e202 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e19c:	2300      	movs	r3, #0
 800e19e:	60fb      	str	r3, [r7, #12]
 800e1a0:	e002      	b.n	800e1a8 <inc_lock+0x6c>
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	3301      	adds	r3, #1
 800e1a6:	60fb      	str	r3, [r7, #12]
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d806      	bhi.n	800e1bc <inc_lock+0x80>
 800e1ae:	4a29      	ldr	r2, [pc, #164]	; (800e254 <inc_lock+0x118>)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	011b      	lsls	r3, r3, #4
 800e1b4:	4413      	add	r3, r2
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d1f2      	bne.n	800e1a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2b02      	cmp	r3, #2
 800e1c0:	d101      	bne.n	800e1c6 <inc_lock+0x8a>
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	e040      	b.n	800e248 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	4922      	ldr	r1, [pc, #136]	; (800e254 <inc_lock+0x118>)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	011b      	lsls	r3, r3, #4
 800e1d0:	440b      	add	r3, r1
 800e1d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	689a      	ldr	r2, [r3, #8]
 800e1d8:	491e      	ldr	r1, [pc, #120]	; (800e254 <inc_lock+0x118>)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	011b      	lsls	r3, r3, #4
 800e1de:	440b      	add	r3, r1
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	695a      	ldr	r2, [r3, #20]
 800e1e8:	491a      	ldr	r1, [pc, #104]	; (800e254 <inc_lock+0x118>)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	011b      	lsls	r3, r3, #4
 800e1ee:	440b      	add	r3, r1
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e1f4:	4a17      	ldr	r2, [pc, #92]	; (800e254 <inc_lock+0x118>)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	011b      	lsls	r3, r3, #4
 800e1fa:	4413      	add	r3, r2
 800e1fc:	330c      	adds	r3, #12
 800e1fe:	2200      	movs	r2, #0
 800e200:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d009      	beq.n	800e21c <inc_lock+0xe0>
 800e208:	4a12      	ldr	r2, [pc, #72]	; (800e254 <inc_lock+0x118>)
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	011b      	lsls	r3, r3, #4
 800e20e:	4413      	add	r3, r2
 800e210:	330c      	adds	r3, #12
 800e212:	881b      	ldrh	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <inc_lock+0xe0>
 800e218:	2300      	movs	r3, #0
 800e21a:	e015      	b.n	800e248 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d108      	bne.n	800e234 <inc_lock+0xf8>
 800e222:	4a0c      	ldr	r2, [pc, #48]	; (800e254 <inc_lock+0x118>)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	011b      	lsls	r3, r3, #4
 800e228:	4413      	add	r3, r2
 800e22a:	330c      	adds	r3, #12
 800e22c:	881b      	ldrh	r3, [r3, #0]
 800e22e:	3301      	adds	r3, #1
 800e230:	b29a      	uxth	r2, r3
 800e232:	e001      	b.n	800e238 <inc_lock+0xfc>
 800e234:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e238:	4906      	ldr	r1, [pc, #24]	; (800e254 <inc_lock+0x118>)
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	011b      	lsls	r3, r3, #4
 800e23e:	440b      	add	r3, r1
 800e240:	330c      	adds	r3, #12
 800e242:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	3301      	adds	r3, #1
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	200009ac 	.word	0x200009ac

0800e258 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	3b01      	subs	r3, #1
 800e264:	607b      	str	r3, [r7, #4]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d825      	bhi.n	800e2b8 <dec_lock+0x60>
		n = Files[i].ctr;
 800e26c:	4a17      	ldr	r2, [pc, #92]	; (800e2cc <dec_lock+0x74>)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	011b      	lsls	r3, r3, #4
 800e272:	4413      	add	r3, r2
 800e274:	330c      	adds	r3, #12
 800e276:	881b      	ldrh	r3, [r3, #0]
 800e278:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e27a:	89fb      	ldrh	r3, [r7, #14]
 800e27c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e280:	d101      	bne.n	800e286 <dec_lock+0x2e>
 800e282:	2300      	movs	r3, #0
 800e284:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e286:	89fb      	ldrh	r3, [r7, #14]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d002      	beq.n	800e292 <dec_lock+0x3a>
 800e28c:	89fb      	ldrh	r3, [r7, #14]
 800e28e:	3b01      	subs	r3, #1
 800e290:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e292:	4a0e      	ldr	r2, [pc, #56]	; (800e2cc <dec_lock+0x74>)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	011b      	lsls	r3, r3, #4
 800e298:	4413      	add	r3, r2
 800e29a:	330c      	adds	r3, #12
 800e29c:	89fa      	ldrh	r2, [r7, #14]
 800e29e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e2a0:	89fb      	ldrh	r3, [r7, #14]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d105      	bne.n	800e2b2 <dec_lock+0x5a>
 800e2a6:	4a09      	ldr	r2, [pc, #36]	; (800e2cc <dec_lock+0x74>)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	011b      	lsls	r3, r3, #4
 800e2ac:	4413      	add	r3, r2
 800e2ae:	2200      	movs	r2, #0
 800e2b0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	737b      	strb	r3, [r7, #13]
 800e2b6:	e001      	b.n	800e2bc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e2b8:	2302      	movs	r3, #2
 800e2ba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e2bc:	7b7b      	ldrb	r3, [r7, #13]
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	3714      	adds	r7, #20
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c8:	4770      	bx	lr
 800e2ca:	bf00      	nop
 800e2cc:	200009ac 	.word	0x200009ac

0800e2d0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e2d0:	b480      	push	{r7}
 800e2d2:	b085      	sub	sp, #20
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e2d8:	2300      	movs	r3, #0
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	e010      	b.n	800e300 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e2de:	4a0d      	ldr	r2, [pc, #52]	; (800e314 <clear_lock+0x44>)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	011b      	lsls	r3, r3, #4
 800e2e4:	4413      	add	r3, r2
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	687a      	ldr	r2, [r7, #4]
 800e2ea:	429a      	cmp	r2, r3
 800e2ec:	d105      	bne.n	800e2fa <clear_lock+0x2a>
 800e2ee:	4a09      	ldr	r2, [pc, #36]	; (800e314 <clear_lock+0x44>)
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	011b      	lsls	r3, r3, #4
 800e2f4:	4413      	add	r3, r2
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	3301      	adds	r3, #1
 800e2fe:	60fb      	str	r3, [r7, #12]
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d9eb      	bls.n	800e2de <clear_lock+0xe>
	}
}
 800e306:	bf00      	nop
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
 800e312:	bf00      	nop
 800e314:	200009ac 	.word	0x200009ac

0800e318 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	78db      	ldrb	r3, [r3, #3]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d034      	beq.n	800e396 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e330:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	7858      	ldrb	r0, [r3, #1]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e33c:	2301      	movs	r3, #1
 800e33e:	697a      	ldr	r2, [r7, #20]
 800e340:	f7ff fd40 	bl	800ddc4 <disk_write>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d002      	beq.n	800e350 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e34a:	2301      	movs	r3, #1
 800e34c:	73fb      	strb	r3, [r7, #15]
 800e34e:	e022      	b.n	800e396 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	2200      	movs	r2, #0
 800e354:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	6a1b      	ldr	r3, [r3, #32]
 800e35a:	697a      	ldr	r2, [r7, #20]
 800e35c:	1ad2      	subs	r2, r2, r3
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	699b      	ldr	r3, [r3, #24]
 800e362:	429a      	cmp	r2, r3
 800e364:	d217      	bcs.n	800e396 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	789b      	ldrb	r3, [r3, #2]
 800e36a:	613b      	str	r3, [r7, #16]
 800e36c:	e010      	b.n	800e390 <sync_window+0x78>
					wsect += fs->fsize;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	699b      	ldr	r3, [r3, #24]
 800e372:	697a      	ldr	r2, [r7, #20]
 800e374:	4413      	add	r3, r2
 800e376:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	7858      	ldrb	r0, [r3, #1]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e382:	2301      	movs	r3, #1
 800e384:	697a      	ldr	r2, [r7, #20]
 800e386:	f7ff fd1d 	bl	800ddc4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e38a:	693b      	ldr	r3, [r7, #16]
 800e38c:	3b01      	subs	r3, #1
 800e38e:	613b      	str	r3, [r7, #16]
 800e390:	693b      	ldr	r3, [r7, #16]
 800e392:	2b01      	cmp	r3, #1
 800e394:	d8eb      	bhi.n	800e36e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e396:	7bfb      	ldrb	r3, [r7, #15]
}
 800e398:	4618      	mov	r0, r3
 800e39a:	3718      	adds	r7, #24
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b084      	sub	sp, #16
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
 800e3a8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d01b      	beq.n	800e3f0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7ff ffad 	bl	800e318 <sync_window>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e3c2:	7bfb      	ldrb	r3, [r7, #15]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d113      	bne.n	800e3f0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	7858      	ldrb	r0, [r3, #1]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	683a      	ldr	r2, [r7, #0]
 800e3d6:	f7ff fcd5 	bl	800dd84 <disk_read>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e3e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e3e4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	683a      	ldr	r2, [r7, #0]
 800e3ee:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800e3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
	...

0800e3fc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f7ff ff87 	bl	800e318 <sync_window>
 800e40a:	4603      	mov	r3, r0
 800e40c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e40e:	7bfb      	ldrb	r3, [r7, #15]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d158      	bne.n	800e4c6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	2b03      	cmp	r3, #3
 800e41a:	d148      	bne.n	800e4ae <sync_fs+0xb2>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	791b      	ldrb	r3, [r3, #4]
 800e420:	2b01      	cmp	r3, #1
 800e422:	d144      	bne.n	800e4ae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	3330      	adds	r3, #48	; 0x30
 800e428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e42c:	2100      	movs	r1, #0
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff fda9 	bl	800df86 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	3330      	adds	r3, #48	; 0x30
 800e438:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e43c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e440:	4618      	mov	r0, r3
 800e442:	f7ff fd38 	bl	800deb6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	3330      	adds	r3, #48	; 0x30
 800e44a:	4921      	ldr	r1, [pc, #132]	; (800e4d0 <sync_fs+0xd4>)
 800e44c:	4618      	mov	r0, r3
 800e44e:	f7ff fd4d 	bl	800deec <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	3330      	adds	r3, #48	; 0x30
 800e456:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e45a:	491e      	ldr	r1, [pc, #120]	; (800e4d4 <sync_fs+0xd8>)
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7ff fd45 	bl	800deec <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	3330      	adds	r3, #48	; 0x30
 800e466:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	691b      	ldr	r3, [r3, #16]
 800e46e:	4619      	mov	r1, r3
 800e470:	4610      	mov	r0, r2
 800e472:	f7ff fd3b 	bl	800deec <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	3330      	adds	r3, #48	; 0x30
 800e47a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	68db      	ldr	r3, [r3, #12]
 800e482:	4619      	mov	r1, r3
 800e484:	4610      	mov	r0, r2
 800e486:	f7ff fd31 	bl	800deec <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	69db      	ldr	r3, [r3, #28]
 800e48e:	1c5a      	adds	r2, r3, #1
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	7858      	ldrb	r0, [r3, #1]
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	f7ff fc8e 	bl	800ddc4 <disk_write>
			fs->fsi_flag = 0;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	785b      	ldrb	r3, [r3, #1]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	2100      	movs	r1, #0
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	f7ff fca4 	bl	800de04 <disk_ioctl>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <sync_fs+0xca>
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3710      	adds	r7, #16
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	41615252 	.word	0x41615252
 800e4d4:	61417272 	.word	0x61417272

0800e4d8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	3b02      	subs	r3, #2
 800e4e6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	695b      	ldr	r3, [r3, #20]
 800e4ec:	3b02      	subs	r3, #2
 800e4ee:	683a      	ldr	r2, [r7, #0]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d301      	bcc.n	800e4f8 <clust2sect+0x20>
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	e008      	b.n	800e50a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	895b      	ldrh	r3, [r3, #10]
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	fb03 f202 	mul.w	r2, r3, r2
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e508:	4413      	add	r3, r2
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	370c      	adds	r7, #12
 800e50e:	46bd      	mov	sp, r7
 800e510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e514:	4770      	bx	lr

0800e516 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b086      	sub	sp, #24
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
 800e51e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d904      	bls.n	800e536 <get_fat+0x20>
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	695b      	ldr	r3, [r3, #20]
 800e530:	683a      	ldr	r2, [r7, #0]
 800e532:	429a      	cmp	r2, r3
 800e534:	d302      	bcc.n	800e53c <get_fat+0x26>
		val = 1;	/* Internal error */
 800e536:	2301      	movs	r3, #1
 800e538:	617b      	str	r3, [r7, #20]
 800e53a:	e08c      	b.n	800e656 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e53c:	f04f 33ff 	mov.w	r3, #4294967295
 800e540:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	2b02      	cmp	r3, #2
 800e548:	d045      	beq.n	800e5d6 <get_fat+0xc0>
 800e54a:	2b03      	cmp	r3, #3
 800e54c:	d05d      	beq.n	800e60a <get_fat+0xf4>
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d177      	bne.n	800e642 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	60fb      	str	r3, [r7, #12]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	085b      	lsrs	r3, r3, #1
 800e55a:	68fa      	ldr	r2, [r7, #12]
 800e55c:	4413      	add	r3, r2
 800e55e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	6a1a      	ldr	r2, [r3, #32]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	0a5b      	lsrs	r3, r3, #9
 800e568:	4413      	add	r3, r2
 800e56a:	4619      	mov	r1, r3
 800e56c:	6938      	ldr	r0, [r7, #16]
 800e56e:	f7ff ff17 	bl	800e3a0 <move_window>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d167      	bne.n	800e648 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	1c5a      	adds	r2, r3, #1
 800e57c:	60fa      	str	r2, [r7, #12]
 800e57e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e582:	693a      	ldr	r2, [r7, #16]
 800e584:	4413      	add	r3, r2
 800e586:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e58a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	6a1a      	ldr	r2, [r3, #32]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	0a5b      	lsrs	r3, r3, #9
 800e594:	4413      	add	r3, r2
 800e596:	4619      	mov	r1, r3
 800e598:	6938      	ldr	r0, [r7, #16]
 800e59a:	f7ff ff01 	bl	800e3a0 <move_window>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d153      	bne.n	800e64c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5aa:	693a      	ldr	r2, [r7, #16]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5b2:	021b      	lsls	r3, r3, #8
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	68bb      	ldr	r3, [r7, #8]
 800e5b8:	4313      	orrs	r3, r2
 800e5ba:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	f003 0301 	and.w	r3, r3, #1
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d002      	beq.n	800e5cc <get_fat+0xb6>
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	091b      	lsrs	r3, r3, #4
 800e5ca:	e002      	b.n	800e5d2 <get_fat+0xbc>
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5d2:	617b      	str	r3, [r7, #20]
			break;
 800e5d4:	e03f      	b.n	800e656 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	6a1a      	ldr	r2, [r3, #32]
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	0a1b      	lsrs	r3, r3, #8
 800e5de:	4413      	add	r3, r2
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	6938      	ldr	r0, [r7, #16]
 800e5e4:	f7ff fedc 	bl	800e3a0 <move_window>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d130      	bne.n	800e650 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	005b      	lsls	r3, r3, #1
 800e5f8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e5fc:	4413      	add	r3, r2
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7ff fc1e 	bl	800de40 <ld_word>
 800e604:	4603      	mov	r3, r0
 800e606:	617b      	str	r3, [r7, #20]
			break;
 800e608:	e025      	b.n	800e656 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	6a1a      	ldr	r2, [r3, #32]
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	09db      	lsrs	r3, r3, #7
 800e612:	4413      	add	r3, r2
 800e614:	4619      	mov	r1, r3
 800e616:	6938      	ldr	r0, [r7, #16]
 800e618:	f7ff fec2 	bl	800e3a0 <move_window>
 800e61c:	4603      	mov	r3, r0
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d118      	bne.n	800e654 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e630:	4413      	add	r3, r2
 800e632:	4618      	mov	r0, r3
 800e634:	f7ff fc1c 	bl	800de70 <ld_dword>
 800e638:	4603      	mov	r3, r0
 800e63a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e63e:	617b      	str	r3, [r7, #20]
			break;
 800e640:	e009      	b.n	800e656 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e642:	2301      	movs	r3, #1
 800e644:	617b      	str	r3, [r7, #20]
 800e646:	e006      	b.n	800e656 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e648:	bf00      	nop
 800e64a:	e004      	b.n	800e656 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e64c:	bf00      	nop
 800e64e:	e002      	b.n	800e656 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e650:	bf00      	nop
 800e652:	e000      	b.n	800e656 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e654:	bf00      	nop
		}
	}

	return val;
 800e656:	697b      	ldr	r3, [r7, #20]
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3718      	adds	r7, #24
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e660:	b590      	push	{r4, r7, lr}
 800e662:	b089      	sub	sp, #36	; 0x24
 800e664:	af00      	add	r7, sp, #0
 800e666:	60f8      	str	r0, [r7, #12]
 800e668:	60b9      	str	r1, [r7, #8]
 800e66a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e66c:	2302      	movs	r3, #2
 800e66e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	2b01      	cmp	r3, #1
 800e674:	f240 80d6 	bls.w	800e824 <put_fat+0x1c4>
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	695b      	ldr	r3, [r3, #20]
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	429a      	cmp	r2, r3
 800e680:	f080 80d0 	bcs.w	800e824 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	781b      	ldrb	r3, [r3, #0]
 800e688:	2b02      	cmp	r3, #2
 800e68a:	d073      	beq.n	800e774 <put_fat+0x114>
 800e68c:	2b03      	cmp	r3, #3
 800e68e:	f000 8091 	beq.w	800e7b4 <put_fat+0x154>
 800e692:	2b01      	cmp	r3, #1
 800e694:	f040 80c6 	bne.w	800e824 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	61bb      	str	r3, [r7, #24]
 800e69c:	69bb      	ldr	r3, [r7, #24]
 800e69e:	085b      	lsrs	r3, r3, #1
 800e6a0:	69ba      	ldr	r2, [r7, #24]
 800e6a2:	4413      	add	r3, r2
 800e6a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	6a1a      	ldr	r2, [r3, #32]
 800e6aa:	69bb      	ldr	r3, [r7, #24]
 800e6ac:	0a5b      	lsrs	r3, r3, #9
 800e6ae:	4413      	add	r3, r2
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	68f8      	ldr	r0, [r7, #12]
 800e6b4:	f7ff fe74 	bl	800e3a0 <move_window>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e6bc:	7ffb      	ldrb	r3, [r7, #31]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f040 80a9 	bne.w	800e816 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e6ca:	69bb      	ldr	r3, [r7, #24]
 800e6cc:	1c59      	adds	r1, r3, #1
 800e6ce:	61b9      	str	r1, [r7, #24]
 800e6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6d4:	4413      	add	r3, r2
 800e6d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	f003 0301 	and.w	r3, r3, #1
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00d      	beq.n	800e6fe <put_fat+0x9e>
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	b25b      	sxtb	r3, r3
 800e6e8:	f003 030f 	and.w	r3, r3, #15
 800e6ec:	b25a      	sxtb	r2, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	b2db      	uxtb	r3, r3
 800e6f2:	011b      	lsls	r3, r3, #4
 800e6f4:	b25b      	sxtb	r3, r3
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	b25b      	sxtb	r3, r3
 800e6fa:	b2db      	uxtb	r3, r3
 800e6fc:	e001      	b.n	800e702 <put_fat+0xa2>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	b2db      	uxtb	r3, r3
 800e702:	697a      	ldr	r2, [r7, #20]
 800e704:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2201      	movs	r2, #1
 800e70a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6a1a      	ldr	r2, [r3, #32]
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	0a5b      	lsrs	r3, r3, #9
 800e714:	4413      	add	r3, r2
 800e716:	4619      	mov	r1, r3
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7ff fe41 	bl	800e3a0 <move_window>
 800e71e:	4603      	mov	r3, r0
 800e720:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e722:	7ffb      	ldrb	r3, [r7, #31]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d178      	bne.n	800e81a <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e72e:	69bb      	ldr	r3, [r7, #24]
 800e730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e734:	4413      	add	r3, r2
 800e736:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	f003 0301 	and.w	r3, r3, #1
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d003      	beq.n	800e74a <put_fat+0xea>
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	091b      	lsrs	r3, r3, #4
 800e746:	b2db      	uxtb	r3, r3
 800e748:	e00e      	b.n	800e768 <put_fat+0x108>
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	781b      	ldrb	r3, [r3, #0]
 800e74e:	b25b      	sxtb	r3, r3
 800e750:	f023 030f 	bic.w	r3, r3, #15
 800e754:	b25a      	sxtb	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	0a1b      	lsrs	r3, r3, #8
 800e75a:	b25b      	sxtb	r3, r3
 800e75c:	f003 030f 	and.w	r3, r3, #15
 800e760:	b25b      	sxtb	r3, r3
 800e762:	4313      	orrs	r3, r2
 800e764:	b25b      	sxtb	r3, r3
 800e766:	b2db      	uxtb	r3, r3
 800e768:	697a      	ldr	r2, [r7, #20]
 800e76a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2201      	movs	r2, #1
 800e770:	70da      	strb	r2, [r3, #3]
			break;
 800e772:	e057      	b.n	800e824 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	6a1a      	ldr	r2, [r3, #32]
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	0a1b      	lsrs	r3, r3, #8
 800e77c:	4413      	add	r3, r2
 800e77e:	4619      	mov	r1, r3
 800e780:	68f8      	ldr	r0, [r7, #12]
 800e782:	f7ff fe0d 	bl	800e3a0 <move_window>
 800e786:	4603      	mov	r3, r0
 800e788:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e78a:	7ffb      	ldrb	r3, [r7, #31]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d146      	bne.n	800e81e <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	005b      	lsls	r3, r3, #1
 800e79a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e79e:	4413      	add	r3, r2
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	b292      	uxth	r2, r2
 800e7a4:	4611      	mov	r1, r2
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f7ff fb85 	bl	800deb6 <st_word>
			fs->wflag = 1;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	70da      	strb	r2, [r3, #3]
			break;
 800e7b2:	e037      	b.n	800e824 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	6a1a      	ldr	r2, [r3, #32]
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	09db      	lsrs	r3, r3, #7
 800e7bc:	4413      	add	r3, r2
 800e7be:	4619      	mov	r1, r3
 800e7c0:	68f8      	ldr	r0, [r7, #12]
 800e7c2:	f7ff fded 	bl	800e3a0 <move_window>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e7ca:	7ffb      	ldrb	r3, [r7, #31]
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d128      	bne.n	800e822 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e7d6:	68fb      	ldr	r3, [r7, #12]
 800e7d8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e7e4:	4413      	add	r3, r2
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	f7ff fb42 	bl	800de70 <ld_dword>
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e7f2:	4323      	orrs	r3, r4
 800e7f4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e804:	4413      	add	r3, r2
 800e806:	6879      	ldr	r1, [r7, #4]
 800e808:	4618      	mov	r0, r3
 800e80a:	f7ff fb6f 	bl	800deec <st_dword>
			fs->wflag = 1;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2201      	movs	r2, #1
 800e812:	70da      	strb	r2, [r3, #3]
			break;
 800e814:	e006      	b.n	800e824 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e816:	bf00      	nop
 800e818:	e004      	b.n	800e824 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e81a:	bf00      	nop
 800e81c:	e002      	b.n	800e824 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e81e:	bf00      	nop
 800e820:	e000      	b.n	800e824 <put_fat+0x1c4>
			if (res != FR_OK) break;
 800e822:	bf00      	nop
		}
	}
	return res;
 800e824:	7ffb      	ldrb	r3, [r7, #31]
}
 800e826:	4618      	mov	r0, r3
 800e828:	3724      	adds	r7, #36	; 0x24
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd90      	pop	{r4, r7, pc}

0800e82e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e82e:	b580      	push	{r7, lr}
 800e830:	b088      	sub	sp, #32
 800e832:	af00      	add	r7, sp, #0
 800e834:	60f8      	str	r0, [r7, #12]
 800e836:	60b9      	str	r1, [r7, #8]
 800e838:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e83a:	2300      	movs	r3, #0
 800e83c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	2b01      	cmp	r3, #1
 800e848:	d904      	bls.n	800e854 <remove_chain+0x26>
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	695b      	ldr	r3, [r3, #20]
 800e84e:	68ba      	ldr	r2, [r7, #8]
 800e850:	429a      	cmp	r2, r3
 800e852:	d301      	bcc.n	800e858 <remove_chain+0x2a>
 800e854:	2302      	movs	r3, #2
 800e856:	e04b      	b.n	800e8f0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d00c      	beq.n	800e878 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e85e:	f04f 32ff 	mov.w	r2, #4294967295
 800e862:	6879      	ldr	r1, [r7, #4]
 800e864:	69b8      	ldr	r0, [r7, #24]
 800e866:	f7ff fefb 	bl	800e660 <put_fat>
 800e86a:	4603      	mov	r3, r0
 800e86c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e86e:	7ffb      	ldrb	r3, [r7, #31]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <remove_chain+0x4a>
 800e874:	7ffb      	ldrb	r3, [r7, #31]
 800e876:	e03b      	b.n	800e8f0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e878:	68b9      	ldr	r1, [r7, #8]
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f7ff fe4b 	bl	800e516 <get_fat>
 800e880:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d031      	beq.n	800e8ec <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	2b01      	cmp	r3, #1
 800e88c:	d101      	bne.n	800e892 <remove_chain+0x64>
 800e88e:	2302      	movs	r3, #2
 800e890:	e02e      	b.n	800e8f0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e898:	d101      	bne.n	800e89e <remove_chain+0x70>
 800e89a:	2301      	movs	r3, #1
 800e89c:	e028      	b.n	800e8f0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e89e:	2200      	movs	r2, #0
 800e8a0:	68b9      	ldr	r1, [r7, #8]
 800e8a2:	69b8      	ldr	r0, [r7, #24]
 800e8a4:	f7ff fedc 	bl	800e660 <put_fat>
 800e8a8:	4603      	mov	r3, r0
 800e8aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e8ac:	7ffb      	ldrb	r3, [r7, #31]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <remove_chain+0x88>
 800e8b2:	7ffb      	ldrb	r3, [r7, #31]
 800e8b4:	e01c      	b.n	800e8f0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	691a      	ldr	r2, [r3, #16]
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	695b      	ldr	r3, [r3, #20]
 800e8be:	3b02      	subs	r3, #2
 800e8c0:	429a      	cmp	r2, r3
 800e8c2:	d20b      	bcs.n	800e8dc <remove_chain+0xae>
			fs->free_clst++;
 800e8c4:	69bb      	ldr	r3, [r7, #24]
 800e8c6:	691b      	ldr	r3, [r3, #16]
 800e8c8:	1c5a      	adds	r2, r3, #1
 800e8ca:	69bb      	ldr	r3, [r7, #24]
 800e8cc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800e8ce:	69bb      	ldr	r3, [r7, #24]
 800e8d0:	791b      	ldrb	r3, [r3, #4]
 800e8d2:	f043 0301 	orr.w	r3, r3, #1
 800e8d6:	b2da      	uxtb	r2, r3
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	695b      	ldr	r3, [r3, #20]
 800e8e4:	68ba      	ldr	r2, [r7, #8]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d3c6      	bcc.n	800e878 <remove_chain+0x4a>
 800e8ea:	e000      	b.n	800e8ee <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e8ec:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e8ee:	2300      	movs	r3, #0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3720      	adds	r7, #32
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b088      	sub	sp, #32
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10d      	bne.n	800e92a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d004      	beq.n	800e924 <create_chain+0x2c>
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	695b      	ldr	r3, [r3, #20]
 800e91e:	69ba      	ldr	r2, [r7, #24]
 800e920:	429a      	cmp	r2, r3
 800e922:	d31b      	bcc.n	800e95c <create_chain+0x64>
 800e924:	2301      	movs	r3, #1
 800e926:	61bb      	str	r3, [r7, #24]
 800e928:	e018      	b.n	800e95c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e92a:	6839      	ldr	r1, [r7, #0]
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f7ff fdf2 	bl	800e516 <get_fat>
 800e932:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2b01      	cmp	r3, #1
 800e938:	d801      	bhi.n	800e93e <create_chain+0x46>
 800e93a:	2301      	movs	r3, #1
 800e93c:	e070      	b.n	800ea20 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e944:	d101      	bne.n	800e94a <create_chain+0x52>
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	e06a      	b.n	800ea20 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	695b      	ldr	r3, [r3, #20]
 800e94e:	68fa      	ldr	r2, [r7, #12]
 800e950:	429a      	cmp	r2, r3
 800e952:	d201      	bcs.n	800e958 <create_chain+0x60>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	e063      	b.n	800ea20 <create_chain+0x128>
		scl = clst;
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e960:	69fb      	ldr	r3, [r7, #28]
 800e962:	3301      	adds	r3, #1
 800e964:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	695b      	ldr	r3, [r3, #20]
 800e96a:	69fa      	ldr	r2, [r7, #28]
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d307      	bcc.n	800e980 <create_chain+0x88>
				ncl = 2;
 800e970:	2302      	movs	r3, #2
 800e972:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e974:	69fa      	ldr	r2, [r7, #28]
 800e976:	69bb      	ldr	r3, [r7, #24]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d901      	bls.n	800e980 <create_chain+0x88>
 800e97c:	2300      	movs	r3, #0
 800e97e:	e04f      	b.n	800ea20 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e980:	69f9      	ldr	r1, [r7, #28]
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f7ff fdc7 	bl	800e516 <get_fat>
 800e988:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00e      	beq.n	800e9ae <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2b01      	cmp	r3, #1
 800e994:	d003      	beq.n	800e99e <create_chain+0xa6>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e99c:	d101      	bne.n	800e9a2 <create_chain+0xaa>
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	e03e      	b.n	800ea20 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e9a2:	69fa      	ldr	r2, [r7, #28]
 800e9a4:	69bb      	ldr	r3, [r7, #24]
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d1da      	bne.n	800e960 <create_chain+0x68>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	e038      	b.n	800ea20 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e9ae:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e9b4:	69f9      	ldr	r1, [r7, #28]
 800e9b6:	6938      	ldr	r0, [r7, #16]
 800e9b8:	f7ff fe52 	bl	800e660 <put_fat>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e9c0:	7dfb      	ldrb	r3, [r7, #23]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d109      	bne.n	800e9da <create_chain+0xe2>
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d006      	beq.n	800e9da <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e9cc:	69fa      	ldr	r2, [r7, #28]
 800e9ce:	6839      	ldr	r1, [r7, #0]
 800e9d0:	6938      	ldr	r0, [r7, #16]
 800e9d2:	f7ff fe45 	bl	800e660 <put_fat>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e9da:	7dfb      	ldrb	r3, [r7, #23]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d116      	bne.n	800ea0e <create_chain+0x116>
		fs->last_clst = ncl;
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	69fa      	ldr	r2, [r7, #28]
 800e9e4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e9e6:	693b      	ldr	r3, [r7, #16]
 800e9e8:	691a      	ldr	r2, [r3, #16]
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	695b      	ldr	r3, [r3, #20]
 800e9ee:	3b02      	subs	r3, #2
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d804      	bhi.n	800e9fe <create_chain+0x106>
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	691b      	ldr	r3, [r3, #16]
 800e9f8:	1e5a      	subs	r2, r3, #1
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800e9fe:	693b      	ldr	r3, [r7, #16]
 800ea00:	791b      	ldrb	r3, [r3, #4]
 800ea02:	f043 0301 	orr.w	r3, r3, #1
 800ea06:	b2da      	uxtb	r2, r3
 800ea08:	693b      	ldr	r3, [r7, #16]
 800ea0a:	711a      	strb	r2, [r3, #4]
 800ea0c:	e007      	b.n	800ea1e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ea0e:	7dfb      	ldrb	r3, [r7, #23]
 800ea10:	2b01      	cmp	r3, #1
 800ea12:	d102      	bne.n	800ea1a <create_chain+0x122>
 800ea14:	f04f 33ff 	mov.w	r3, #4294967295
 800ea18:	e000      	b.n	800ea1c <create_chain+0x124>
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ea1e:	69fb      	ldr	r3, [r7, #28]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3720      	adds	r7, #32
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}

0800ea28 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b087      	sub	sp, #28
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3c:	3304      	adds	r3, #4
 800ea3e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	0a5b      	lsrs	r3, r3, #9
 800ea44:	68fa      	ldr	r2, [r7, #12]
 800ea46:	8952      	ldrh	r2, [r2, #10]
 800ea48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ea4c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	1d1a      	adds	r2, r3, #4
 800ea52:	613a      	str	r2, [r7, #16]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d101      	bne.n	800ea62 <clmt_clust+0x3a>
 800ea5e:	2300      	movs	r3, #0
 800ea60:	e010      	b.n	800ea84 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ea62:	697a      	ldr	r2, [r7, #20]
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d307      	bcc.n	800ea7a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ea6a:	697a      	ldr	r2, [r7, #20]
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	617b      	str	r3, [r7, #20]
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	3304      	adds	r3, #4
 800ea76:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ea78:	e7e9      	b.n	800ea4e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ea7a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ea7c:	693b      	ldr	r3, [r7, #16]
 800ea7e:	681a      	ldr	r2, [r3, #0]
 800ea80:	697b      	ldr	r3, [r7, #20]
 800ea82:	4413      	add	r3, r2
}
 800ea84:	4618      	mov	r0, r3
 800ea86:	371c      	adds	r7, #28
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea8e:	4770      	bx	lr

0800ea90 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eaa6:	d204      	bcs.n	800eab2 <dir_sdi+0x22>
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	f003 031f 	and.w	r3, r3, #31
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d001      	beq.n	800eab6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800eab2:	2302      	movs	r3, #2
 800eab4:	e063      	b.n	800eb7e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	683a      	ldr	r2, [r7, #0]
 800eaba:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d106      	bne.n	800ead6 <dir_sdi+0x46>
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	781b      	ldrb	r3, [r3, #0]
 800eacc:	2b02      	cmp	r3, #2
 800eace:	d902      	bls.n	800ead6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ead4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10c      	bne.n	800eaf6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	095b      	lsrs	r3, r3, #5
 800eae0:	693a      	ldr	r2, [r7, #16]
 800eae2:	8912      	ldrh	r2, [r2, #8]
 800eae4:	4293      	cmp	r3, r2
 800eae6:	d301      	bcc.n	800eaec <dir_sdi+0x5c>
 800eae8:	2302      	movs	r3, #2
 800eaea:	e048      	b.n	800eb7e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	61da      	str	r2, [r3, #28]
 800eaf4:	e029      	b.n	800eb4a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	895b      	ldrh	r3, [r3, #10]
 800eafa:	025b      	lsls	r3, r3, #9
 800eafc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eafe:	e019      	b.n	800eb34 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6979      	ldr	r1, [r7, #20]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff fd06 	bl	800e516 <get_fat>
 800eb0a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb12:	d101      	bne.n	800eb18 <dir_sdi+0x88>
 800eb14:	2301      	movs	r3, #1
 800eb16:	e032      	b.n	800eb7e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d904      	bls.n	800eb28 <dir_sdi+0x98>
 800eb1e:	693b      	ldr	r3, [r7, #16]
 800eb20:	695b      	ldr	r3, [r3, #20]
 800eb22:	697a      	ldr	r2, [r7, #20]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d301      	bcc.n	800eb2c <dir_sdi+0x9c>
 800eb28:	2302      	movs	r3, #2
 800eb2a:	e028      	b.n	800eb7e <dir_sdi+0xee>
			ofs -= csz;
 800eb2c:	683a      	ldr	r2, [r7, #0]
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800eb34:	683a      	ldr	r2, [r7, #0]
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	429a      	cmp	r2, r3
 800eb3a:	d2e1      	bcs.n	800eb00 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800eb3c:	6979      	ldr	r1, [r7, #20]
 800eb3e:	6938      	ldr	r0, [r7, #16]
 800eb40:	f7ff fcca 	bl	800e4d8 <clust2sect>
 800eb44:	4602      	mov	r2, r0
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	69db      	ldr	r3, [r3, #28]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d101      	bne.n	800eb5c <dir_sdi+0xcc>
 800eb58:	2302      	movs	r3, #2
 800eb5a:	e010      	b.n	800eb7e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	69da      	ldr	r2, [r3, #28]
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	0a5b      	lsrs	r3, r3, #9
 800eb64:	441a      	add	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb76:	441a      	add	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3718      	adds	r7, #24
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b086      	sub	sp, #24
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
 800eb8e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	695b      	ldr	r3, [r3, #20]
 800eb9a:	3320      	adds	r3, #32
 800eb9c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	69db      	ldr	r3, [r3, #28]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d003      	beq.n	800ebae <dir_next+0x28>
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ebac:	d301      	bcc.n	800ebb2 <dir_next+0x2c>
 800ebae:	2304      	movs	r3, #4
 800ebb0:	e0aa      	b.n	800ed08 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f040 8098 	bne.w	800ecee <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	69db      	ldr	r3, [r3, #28]
 800ebc2:	1c5a      	adds	r2, r3, #1
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	699b      	ldr	r3, [r3, #24]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10b      	bne.n	800ebe8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	095b      	lsrs	r3, r3, #5
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	8912      	ldrh	r2, [r2, #8]
 800ebd8:	4293      	cmp	r3, r2
 800ebda:	f0c0 8088 	bcc.w	800ecee <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	61da      	str	r2, [r3, #28]
 800ebe4:	2304      	movs	r3, #4
 800ebe6:	e08f      	b.n	800ed08 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	0a5b      	lsrs	r3, r3, #9
 800ebec:	68fa      	ldr	r2, [r7, #12]
 800ebee:	8952      	ldrh	r2, [r2, #10]
 800ebf0:	3a01      	subs	r2, #1
 800ebf2:	4013      	ands	r3, r2
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d17a      	bne.n	800ecee <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	699b      	ldr	r3, [r3, #24]
 800ebfe:	4619      	mov	r1, r3
 800ec00:	4610      	mov	r0, r2
 800ec02:	f7ff fc88 	bl	800e516 <get_fat>
 800ec06:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	2b01      	cmp	r3, #1
 800ec0c:	d801      	bhi.n	800ec12 <dir_next+0x8c>
 800ec0e:	2302      	movs	r3, #2
 800ec10:	e07a      	b.n	800ed08 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ec12:	697b      	ldr	r3, [r7, #20]
 800ec14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec18:	d101      	bne.n	800ec1e <dir_next+0x98>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e074      	b.n	800ed08 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	695b      	ldr	r3, [r3, #20]
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d358      	bcc.n	800ecda <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d104      	bne.n	800ec38 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2200      	movs	r2, #0
 800ec32:	61da      	str	r2, [r3, #28]
 800ec34:	2304      	movs	r3, #4
 800ec36:	e067      	b.n	800ed08 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	699b      	ldr	r3, [r3, #24]
 800ec3e:	4619      	mov	r1, r3
 800ec40:	4610      	mov	r0, r2
 800ec42:	f7ff fe59 	bl	800e8f8 <create_chain>
 800ec46:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d101      	bne.n	800ec52 <dir_next+0xcc>
 800ec4e:	2307      	movs	r3, #7
 800ec50:	e05a      	b.n	800ed08 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d101      	bne.n	800ec5c <dir_next+0xd6>
 800ec58:	2302      	movs	r3, #2
 800ec5a:	e055      	b.n	800ed08 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec62:	d101      	bne.n	800ec68 <dir_next+0xe2>
 800ec64:	2301      	movs	r3, #1
 800ec66:	e04f      	b.n	800ed08 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f7ff fb55 	bl	800e318 <sync_window>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d001      	beq.n	800ec78 <dir_next+0xf2>
 800ec74:	2301      	movs	r3, #1
 800ec76:	e047      	b.n	800ed08 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	3330      	adds	r3, #48	; 0x30
 800ec7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ec80:	2100      	movs	r1, #0
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7ff f97f 	bl	800df86 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ec88:	2300      	movs	r3, #0
 800ec8a:	613b      	str	r3, [r7, #16]
 800ec8c:	6979      	ldr	r1, [r7, #20]
 800ec8e:	68f8      	ldr	r0, [r7, #12]
 800ec90:	f7ff fc22 	bl	800e4d8 <clust2sect>
 800ec94:	4602      	mov	r2, r0
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	62da      	str	r2, [r3, #44]	; 0x2c
 800ec9a:	e012      	b.n	800ecc2 <dir_next+0x13c>
						fs->wflag = 1;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eca2:	68f8      	ldr	r0, [r7, #12]
 800eca4:	f7ff fb38 	bl	800e318 <sync_window>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d001      	beq.n	800ecb2 <dir_next+0x12c>
 800ecae:	2301      	movs	r3, #1
 800ecb0:	e02a      	b.n	800ed08 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	3301      	adds	r3, #1
 800ecb6:	613b      	str	r3, [r7, #16]
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecbc:	1c5a      	adds	r2, r3, #1
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	62da      	str	r2, [r3, #44]	; 0x2c
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	895b      	ldrh	r3, [r3, #10]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	4293      	cmp	r3, r2
 800eccc:	d3e6      	bcc.n	800ec9c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	1ad2      	subs	r2, r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	697a      	ldr	r2, [r7, #20]
 800ecde:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ece0:	6979      	ldr	r1, [r7, #20]
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f7ff fbf8 	bl	800e4d8 <clust2sect>
 800ece8:	4602      	mov	r2, r0
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	68ba      	ldr	r2, [r7, #8]
 800ecf2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed00:	441a      	add	r2, r3
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3718      	adds	r7, #24
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b086      	sub	sp, #24
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ed20:	2100      	movs	r1, #0
 800ed22:	6878      	ldr	r0, [r7, #4]
 800ed24:	f7ff feb4 	bl	800ea90 <dir_sdi>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ed2c:	7dfb      	ldrb	r3, [r7, #23]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d12b      	bne.n	800ed8a <dir_alloc+0x7a>
		n = 0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	69db      	ldr	r3, [r3, #28]
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	68f8      	ldr	r0, [r7, #12]
 800ed3e:	f7ff fb2f 	bl	800e3a0 <move_window>
 800ed42:	4603      	mov	r3, r0
 800ed44:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d11d      	bne.n	800ed88 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	6a1b      	ldr	r3, [r3, #32]
 800ed50:	781b      	ldrb	r3, [r3, #0]
 800ed52:	2be5      	cmp	r3, #229	; 0xe5
 800ed54:	d004      	beq.n	800ed60 <dir_alloc+0x50>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6a1b      	ldr	r3, [r3, #32]
 800ed5a:	781b      	ldrb	r3, [r3, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d107      	bne.n	800ed70 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	3301      	adds	r3, #1
 800ed64:	613b      	str	r3, [r7, #16]
 800ed66:	693a      	ldr	r2, [r7, #16]
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d102      	bne.n	800ed74 <dir_alloc+0x64>
 800ed6e:	e00c      	b.n	800ed8a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ed70:	2300      	movs	r3, #0
 800ed72:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ed74:	2101      	movs	r1, #1
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7ff ff05 	bl	800eb86 <dir_next>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ed80:	7dfb      	ldrb	r3, [r7, #23]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d0d7      	beq.n	800ed36 <dir_alloc+0x26>
 800ed86:	e000      	b.n	800ed8a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ed88:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ed8a:	7dfb      	ldrb	r3, [r7, #23]
 800ed8c:	2b04      	cmp	r3, #4
 800ed8e:	d101      	bne.n	800ed94 <dir_alloc+0x84>
 800ed90:	2307      	movs	r3, #7
 800ed92:	75fb      	strb	r3, [r7, #23]
	return res;
 800ed94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3718      	adds	r7, #24
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b084      	sub	sp, #16
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
 800eda6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	331a      	adds	r3, #26
 800edac:	4618      	mov	r0, r3
 800edae:	f7ff f847 	bl	800de40 <ld_word>
 800edb2:	4603      	mov	r3, r0
 800edb4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	781b      	ldrb	r3, [r3, #0]
 800edba:	2b03      	cmp	r3, #3
 800edbc:	d109      	bne.n	800edd2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	3314      	adds	r3, #20
 800edc2:	4618      	mov	r0, r3
 800edc4:	f7ff f83c 	bl	800de40 <ld_word>
 800edc8:	4603      	mov	r3, r0
 800edca:	041b      	lsls	r3, r3, #16
 800edcc:	68fa      	ldr	r2, [r7, #12]
 800edce:	4313      	orrs	r3, r2
 800edd0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800edd2:	68fb      	ldr	r3, [r7, #12]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3710      	adds	r7, #16
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b084      	sub	sp, #16
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	60b9      	str	r1, [r7, #8]
 800ede6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	331a      	adds	r3, #26
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	b292      	uxth	r2, r2
 800edf0:	4611      	mov	r1, r2
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7ff f85f 	bl	800deb6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	781b      	ldrb	r3, [r3, #0]
 800edfc:	2b03      	cmp	r3, #3
 800edfe:	d109      	bne.n	800ee14 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	f103 0214 	add.w	r2, r3, #20
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	0c1b      	lsrs	r3, r3, #16
 800ee0a:	b29b      	uxth	r3, r3
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	4610      	mov	r0, r2
 800ee10:	f7ff f851 	bl	800deb6 <st_word>
	}
}
 800ee14:	bf00      	nop
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b086      	sub	sp, #24
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ee2a:	2100      	movs	r1, #0
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7ff fe2f 	bl	800ea90 <dir_sdi>
 800ee32:	4603      	mov	r3, r0
 800ee34:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ee36:	7dfb      	ldrb	r3, [r7, #23]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d001      	beq.n	800ee40 <dir_find+0x24>
 800ee3c:	7dfb      	ldrb	r3, [r7, #23]
 800ee3e:	e03e      	b.n	800eebe <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	69db      	ldr	r3, [r3, #28]
 800ee44:	4619      	mov	r1, r3
 800ee46:	6938      	ldr	r0, [r7, #16]
 800ee48:	f7ff faaa 	bl	800e3a0 <move_window>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ee50:	7dfb      	ldrb	r3, [r7, #23]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d12f      	bne.n	800eeb6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6a1b      	ldr	r3, [r3, #32]
 800ee5a:	781b      	ldrb	r3, [r3, #0]
 800ee5c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ee5e:	7bfb      	ldrb	r3, [r7, #15]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d102      	bne.n	800ee6a <dir_find+0x4e>
 800ee64:	2304      	movs	r3, #4
 800ee66:	75fb      	strb	r3, [r7, #23]
 800ee68:	e028      	b.n	800eebc <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	6a1b      	ldr	r3, [r3, #32]
 800ee6e:	330b      	adds	r3, #11
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ee76:	b2da      	uxtb	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a1b      	ldr	r3, [r3, #32]
 800ee80:	330b      	adds	r3, #11
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	f003 0308 	and.w	r3, r3, #8
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d10a      	bne.n	800eea2 <dir_find+0x86>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	6a18      	ldr	r0, [r3, #32]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	3324      	adds	r3, #36	; 0x24
 800ee94:	220b      	movs	r2, #11
 800ee96:	4619      	mov	r1, r3
 800ee98:	f7ff f88f 	bl	800dfba <mem_cmp>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d00b      	beq.n	800eeba <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800eea2:	2100      	movs	r1, #0
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f7ff fe6e 	bl	800eb86 <dir_next>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eeae:	7dfb      	ldrb	r3, [r7, #23]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d0c5      	beq.n	800ee40 <dir_find+0x24>
 800eeb4:	e002      	b.n	800eebc <dir_find+0xa0>
		if (res != FR_OK) break;
 800eeb6:	bf00      	nop
 800eeb8:	e000      	b.n	800eebc <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800eeba:	bf00      	nop

	return res;
 800eebc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3718      	adds	r7, #24
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800eec6:	b580      	push	{r7, lr}
 800eec8:	b084      	sub	sp, #16
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800eed4:	2101      	movs	r1, #1
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f7ff ff1a 	bl	800ed10 <dir_alloc>
 800eedc:	4603      	mov	r3, r0
 800eede:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d11c      	bne.n	800ef20 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	69db      	ldr	r3, [r3, #28]
 800eeea:	4619      	mov	r1, r3
 800eeec:	68b8      	ldr	r0, [r7, #8]
 800eeee:	f7ff fa57 	bl	800e3a0 <move_window>
 800eef2:	4603      	mov	r3, r0
 800eef4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eef6:	7bfb      	ldrb	r3, [r7, #15]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d111      	bne.n	800ef20 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6a1b      	ldr	r3, [r3, #32]
 800ef00:	2220      	movs	r2, #32
 800ef02:	2100      	movs	r1, #0
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7ff f83e 	bl	800df86 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a18      	ldr	r0, [r3, #32]
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	3324      	adds	r3, #36	; 0x24
 800ef12:	220b      	movs	r2, #11
 800ef14:	4619      	mov	r1, r3
 800ef16:	f7ff f815 	bl	800df44 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	2201      	movs	r2, #1
 800ef1e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ef20:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef22:	4618      	mov	r0, r3
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}
	...

0800ef2c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b088      	sub	sp, #32
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	60fb      	str	r3, [r7, #12]
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	3324      	adds	r3, #36	; 0x24
 800ef40:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ef42:	220b      	movs	r2, #11
 800ef44:	2120      	movs	r1, #32
 800ef46:	68b8      	ldr	r0, [r7, #8]
 800ef48:	f7ff f81d 	bl	800df86 <mem_set>
	si = i = 0; ni = 8;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	613b      	str	r3, [r7, #16]
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	617b      	str	r3, [r7, #20]
 800ef54:	2308      	movs	r3, #8
 800ef56:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	1c5a      	adds	r2, r3, #1
 800ef5c:	617a      	str	r2, [r7, #20]
 800ef5e:	68fa      	ldr	r2, [r7, #12]
 800ef60:	4413      	add	r3, r2
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ef66:	7ffb      	ldrb	r3, [r7, #31]
 800ef68:	2b20      	cmp	r3, #32
 800ef6a:	d94e      	bls.n	800f00a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ef6c:	7ffb      	ldrb	r3, [r7, #31]
 800ef6e:	2b2f      	cmp	r3, #47	; 0x2f
 800ef70:	d006      	beq.n	800ef80 <create_name+0x54>
 800ef72:	7ffb      	ldrb	r3, [r7, #31]
 800ef74:	2b5c      	cmp	r3, #92	; 0x5c
 800ef76:	d110      	bne.n	800ef9a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ef78:	e002      	b.n	800ef80 <create_name+0x54>
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	617b      	str	r3, [r7, #20]
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	697b      	ldr	r3, [r7, #20]
 800ef84:	4413      	add	r3, r2
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	2b2f      	cmp	r3, #47	; 0x2f
 800ef8a:	d0f6      	beq.n	800ef7a <create_name+0x4e>
 800ef8c:	68fa      	ldr	r2, [r7, #12]
 800ef8e:	697b      	ldr	r3, [r7, #20]
 800ef90:	4413      	add	r3, r2
 800ef92:	781b      	ldrb	r3, [r3, #0]
 800ef94:	2b5c      	cmp	r3, #92	; 0x5c
 800ef96:	d0f0      	beq.n	800ef7a <create_name+0x4e>
			break;
 800ef98:	e038      	b.n	800f00c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ef9a:	7ffb      	ldrb	r3, [r7, #31]
 800ef9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ef9e:	d003      	beq.n	800efa8 <create_name+0x7c>
 800efa0:	693a      	ldr	r2, [r7, #16]
 800efa2:	69bb      	ldr	r3, [r7, #24]
 800efa4:	429a      	cmp	r2, r3
 800efa6:	d30c      	bcc.n	800efc2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	2b0b      	cmp	r3, #11
 800efac:	d002      	beq.n	800efb4 <create_name+0x88>
 800efae:	7ffb      	ldrb	r3, [r7, #31]
 800efb0:	2b2e      	cmp	r3, #46	; 0x2e
 800efb2:	d001      	beq.n	800efb8 <create_name+0x8c>
 800efb4:	2306      	movs	r3, #6
 800efb6:	e044      	b.n	800f042 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800efb8:	2308      	movs	r3, #8
 800efba:	613b      	str	r3, [r7, #16]
 800efbc:	230b      	movs	r3, #11
 800efbe:	61bb      	str	r3, [r7, #24]
			continue;
 800efc0:	e022      	b.n	800f008 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800efc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	da04      	bge.n	800efd4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800efca:	7ffb      	ldrb	r3, [r7, #31]
 800efcc:	3b80      	subs	r3, #128	; 0x80
 800efce:	4a1f      	ldr	r2, [pc, #124]	; (800f04c <create_name+0x120>)
 800efd0:	5cd3      	ldrb	r3, [r2, r3]
 800efd2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800efd4:	7ffb      	ldrb	r3, [r7, #31]
 800efd6:	4619      	mov	r1, r3
 800efd8:	481d      	ldr	r0, [pc, #116]	; (800f050 <create_name+0x124>)
 800efda:	f7ff f815 	bl	800e008 <chk_chr>
 800efde:	4603      	mov	r3, r0
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d001      	beq.n	800efe8 <create_name+0xbc>
 800efe4:	2306      	movs	r3, #6
 800efe6:	e02c      	b.n	800f042 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800efe8:	7ffb      	ldrb	r3, [r7, #31]
 800efea:	2b60      	cmp	r3, #96	; 0x60
 800efec:	d905      	bls.n	800effa <create_name+0xce>
 800efee:	7ffb      	ldrb	r3, [r7, #31]
 800eff0:	2b7a      	cmp	r3, #122	; 0x7a
 800eff2:	d802      	bhi.n	800effa <create_name+0xce>
 800eff4:	7ffb      	ldrb	r3, [r7, #31]
 800eff6:	3b20      	subs	r3, #32
 800eff8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	1c5a      	adds	r2, r3, #1
 800effe:	613a      	str	r2, [r7, #16]
 800f000:	68ba      	ldr	r2, [r7, #8]
 800f002:	4413      	add	r3, r2
 800f004:	7ffa      	ldrb	r2, [r7, #31]
 800f006:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f008:	e7a6      	b.n	800ef58 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f00a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f00c:	68fa      	ldr	r2, [r7, #12]
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	441a      	add	r2, r3
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f016:	693b      	ldr	r3, [r7, #16]
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d101      	bne.n	800f020 <create_name+0xf4>
 800f01c:	2306      	movs	r3, #6
 800f01e:	e010      	b.n	800f042 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	2be5      	cmp	r3, #229	; 0xe5
 800f026:	d102      	bne.n	800f02e <create_name+0x102>
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	2205      	movs	r2, #5
 800f02c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f02e:	7ffb      	ldrb	r3, [r7, #31]
 800f030:	2b20      	cmp	r3, #32
 800f032:	d801      	bhi.n	800f038 <create_name+0x10c>
 800f034:	2204      	movs	r2, #4
 800f036:	e000      	b.n	800f03a <create_name+0x10e>
 800f038:	2200      	movs	r2, #0
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	330b      	adds	r3, #11
 800f03e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f040:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f042:	4618      	mov	r0, r3
 800f044:	3720      	adds	r7, #32
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	08014f2c 	.word	0x08014f2c
 800f050:	08014e78 	.word	0x08014e78

0800f054 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b086      	sub	sp, #24
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f068:	e002      	b.n	800f070 <follow_path+0x1c>
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	3301      	adds	r3, #1
 800f06e:	603b      	str	r3, [r7, #0]
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	2b2f      	cmp	r3, #47	; 0x2f
 800f076:	d0f8      	beq.n	800f06a <follow_path+0x16>
 800f078:	683b      	ldr	r3, [r7, #0]
 800f07a:	781b      	ldrb	r3, [r3, #0]
 800f07c:	2b5c      	cmp	r3, #92	; 0x5c
 800f07e:	d0f4      	beq.n	800f06a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	2200      	movs	r2, #0
 800f084:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f086:	683b      	ldr	r3, [r7, #0]
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	2b1f      	cmp	r3, #31
 800f08c:	d80a      	bhi.n	800f0a4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2280      	movs	r2, #128	; 0x80
 800f092:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f096:	2100      	movs	r1, #0
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f7ff fcf9 	bl	800ea90 <dir_sdi>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	75fb      	strb	r3, [r7, #23]
 800f0a2:	e043      	b.n	800f12c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f0a4:	463b      	mov	r3, r7
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f7ff ff3f 	bl	800ef2c <create_name>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f0b2:	7dfb      	ldrb	r3, [r7, #23]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d134      	bne.n	800f122 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7ff feaf 	bl	800ee1c <dir_find>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f0c8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f0ca:	7dfb      	ldrb	r3, [r7, #23]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d00a      	beq.n	800f0e6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
 800f0d2:	2b04      	cmp	r3, #4
 800f0d4:	d127      	bne.n	800f126 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f0d6:	7afb      	ldrb	r3, [r7, #11]
 800f0d8:	f003 0304 	and.w	r3, r3, #4
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d122      	bne.n	800f126 <follow_path+0xd2>
 800f0e0:	2305      	movs	r3, #5
 800f0e2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f0e4:	e01f      	b.n	800f126 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f0e6:	7afb      	ldrb	r3, [r7, #11]
 800f0e8:	f003 0304 	and.w	r3, r3, #4
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d11c      	bne.n	800f12a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f0f0:	693b      	ldr	r3, [r7, #16]
 800f0f2:	799b      	ldrb	r3, [r3, #6]
 800f0f4:	f003 0310 	and.w	r3, r3, #16
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d102      	bne.n	800f102 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f0fc:	2305      	movs	r3, #5
 800f0fe:	75fb      	strb	r3, [r7, #23]
 800f100:	e014      	b.n	800f12c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	695b      	ldr	r3, [r3, #20]
 800f10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f110:	4413      	add	r3, r2
 800f112:	4619      	mov	r1, r3
 800f114:	68f8      	ldr	r0, [r7, #12]
 800f116:	f7ff fe42 	bl	800ed9e <ld_clust>
 800f11a:	4602      	mov	r2, r0
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f120:	e7c0      	b.n	800f0a4 <follow_path+0x50>
			if (res != FR_OK) break;
 800f122:	bf00      	nop
 800f124:	e002      	b.n	800f12c <follow_path+0xd8>
				break;
 800f126:	bf00      	nop
 800f128:	e000      	b.n	800f12c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f12a:	bf00      	nop
			}
		}
	}

	return res;
 800f12c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3718      	adds	r7, #24
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f136:	b480      	push	{r7}
 800f138:	b087      	sub	sp, #28
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f13e:	f04f 33ff 	mov.w	r3, #4294967295
 800f142:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d031      	beq.n	800f1b0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	617b      	str	r3, [r7, #20]
 800f152:	e002      	b.n	800f15a <get_ldnumber+0x24>
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	3301      	adds	r3, #1
 800f158:	617b      	str	r3, [r7, #20]
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	781b      	ldrb	r3, [r3, #0]
 800f15e:	2b20      	cmp	r3, #32
 800f160:	d903      	bls.n	800f16a <get_ldnumber+0x34>
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	781b      	ldrb	r3, [r3, #0]
 800f166:	2b3a      	cmp	r3, #58	; 0x3a
 800f168:	d1f4      	bne.n	800f154 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	2b3a      	cmp	r3, #58	; 0x3a
 800f170:	d11c      	bne.n	800f1ac <get_ldnumber+0x76>
			tp = *path;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	1c5a      	adds	r2, r3, #1
 800f17c:	60fa      	str	r2, [r7, #12]
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	3b30      	subs	r3, #48	; 0x30
 800f182:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	2b09      	cmp	r3, #9
 800f188:	d80e      	bhi.n	800f1a8 <get_ldnumber+0x72>
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d10a      	bne.n	800f1a8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d107      	bne.n	800f1a8 <get_ldnumber+0x72>
					vol = (int)i;
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	617b      	str	r3, [r7, #20]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	697a      	ldr	r2, [r7, #20]
 800f1a6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	e002      	b.n	800f1b2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f1b0:	693b      	ldr	r3, [r7, #16]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	371c      	adds	r7, #28
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
	...

0800f1c0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	b082      	sub	sp, #8
 800f1c4:	af00      	add	r7, sp, #0
 800f1c6:	6078      	str	r0, [r7, #4]
 800f1c8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	70da      	strb	r2, [r3, #3]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f1d8:	6839      	ldr	r1, [r7, #0]
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	f7ff f8e0 	bl	800e3a0 <move_window>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <check_fs+0x2a>
 800f1e6:	2304      	movs	r3, #4
 800f1e8:	e038      	b.n	800f25c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	3330      	adds	r3, #48	; 0x30
 800f1ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	f7fe fe24 	bl	800de40 <ld_word>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f200:	429a      	cmp	r2, r3
 800f202:	d001      	beq.n	800f208 <check_fs+0x48>
 800f204:	2303      	movs	r3, #3
 800f206:	e029      	b.n	800f25c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f20e:	2be9      	cmp	r3, #233	; 0xe9
 800f210:	d009      	beq.n	800f226 <check_fs+0x66>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f218:	2beb      	cmp	r3, #235	; 0xeb
 800f21a:	d11e      	bne.n	800f25a <check_fs+0x9a>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f222:	2b90      	cmp	r3, #144	; 0x90
 800f224:	d119      	bne.n	800f25a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	3330      	adds	r3, #48	; 0x30
 800f22a:	3336      	adds	r3, #54	; 0x36
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7fe fe1f 	bl	800de70 <ld_dword>
 800f232:	4603      	mov	r3, r0
 800f234:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f238:	4a0a      	ldr	r2, [pc, #40]	; (800f264 <check_fs+0xa4>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d101      	bne.n	800f242 <check_fs+0x82>
 800f23e:	2300      	movs	r3, #0
 800f240:	e00c      	b.n	800f25c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	3330      	adds	r3, #48	; 0x30
 800f246:	3352      	adds	r3, #82	; 0x52
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fe fe11 	bl	800de70 <ld_dword>
 800f24e:	4602      	mov	r2, r0
 800f250:	4b05      	ldr	r3, [pc, #20]	; (800f268 <check_fs+0xa8>)
 800f252:	429a      	cmp	r2, r3
 800f254:	d101      	bne.n	800f25a <check_fs+0x9a>
 800f256:	2300      	movs	r3, #0
 800f258:	e000      	b.n	800f25c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f25a:	2302      	movs	r3, #2
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}
 800f264:	00544146 	.word	0x00544146
 800f268:	33544146 	.word	0x33544146

0800f26c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b096      	sub	sp, #88	; 0x58
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	60b9      	str	r1, [r7, #8]
 800f276:	4613      	mov	r3, r2
 800f278:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2200      	movs	r2, #0
 800f27e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f7ff ff58 	bl	800f136 <get_ldnumber>
 800f286:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	da01      	bge.n	800f292 <find_volume+0x26>
 800f28e:	230b      	movs	r3, #11
 800f290:	e22e      	b.n	800f6f0 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f292:	4aa8      	ldr	r2, [pc, #672]	; (800f534 <find_volume+0x2c8>)
 800f294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f29a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d101      	bne.n	800f2a6 <find_volume+0x3a>
 800f2a2:	230c      	movs	r3, #12
 800f2a4:	e224      	b.n	800f6f0 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f2ac:	79fb      	ldrb	r3, [r7, #7]
 800f2ae:	f023 0301 	bic.w	r3, r3, #1
 800f2b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d01a      	beq.n	800f2f2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2be:	785b      	ldrb	r3, [r3, #1]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fe fd1f 	bl	800dd04 <disk_status>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f2cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f2d0:	f003 0301 	and.w	r3, r3, #1
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d10c      	bne.n	800f2f2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f2d8:	79fb      	ldrb	r3, [r7, #7]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d007      	beq.n	800f2ee <find_volume+0x82>
 800f2de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f2e2:	f003 0304 	and.w	r3, r3, #4
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d001      	beq.n	800f2ee <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f2ea:	230a      	movs	r3, #10
 800f2ec:	e200      	b.n	800f6f0 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	e1fe      	b.n	800f6f0 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2fa:	b2da      	uxtb	r2, r3
 800f2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f302:	785b      	ldrb	r3, [r3, #1]
 800f304:	4618      	mov	r0, r3
 800f306:	f7fe fd17 	bl	800dd38 <disk_initialize>
 800f30a:	4603      	mov	r3, r0
 800f30c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f314:	f003 0301 	and.w	r3, r3, #1
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d001      	beq.n	800f320 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f31c:	2303      	movs	r3, #3
 800f31e:	e1e7      	b.n	800f6f0 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f320:	79fb      	ldrb	r3, [r7, #7]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d007      	beq.n	800f336 <find_volume+0xca>
 800f326:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f32a:	f003 0304 	and.w	r3, r3, #4
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d001      	beq.n	800f336 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f332:	230a      	movs	r3, #10
 800f334:	e1dc      	b.n	800f6f0 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f336:	2300      	movs	r3, #0
 800f338:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f33a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f33c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f33e:	f7ff ff3f 	bl	800f1c0 <check_fs>
 800f342:	4603      	mov	r3, r0
 800f344:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f348:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f34c:	2b02      	cmp	r3, #2
 800f34e:	d14b      	bne.n	800f3e8 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f350:	2300      	movs	r3, #0
 800f352:	643b      	str	r3, [r7, #64]	; 0x40
 800f354:	e01f      	b.n	800f396 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f358:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f35e:	011b      	lsls	r3, r3, #4
 800f360:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f364:	4413      	add	r3, r2
 800f366:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f36a:	3304      	adds	r3, #4
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d006      	beq.n	800f380 <find_volume+0x114>
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	3308      	adds	r3, #8
 800f376:	4618      	mov	r0, r3
 800f378:	f7fe fd7a 	bl	800de70 <ld_dword>
 800f37c:	4602      	mov	r2, r0
 800f37e:	e000      	b.n	800f382 <find_volume+0x116>
 800f380:	2200      	movs	r2, #0
 800f382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f38a:	440b      	add	r3, r1
 800f38c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f392:	3301      	adds	r3, #1
 800f394:	643b      	str	r3, [r7, #64]	; 0x40
 800f396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f398:	2b03      	cmp	r3, #3
 800f39a:	d9dc      	bls.n	800f356 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f39c:	2300      	movs	r3, #0
 800f39e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d002      	beq.n	800f3ac <find_volume+0x140>
 800f3a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3a8:	3b01      	subs	r3, #1
 800f3aa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f3b4:	4413      	add	r3, r2
 800f3b6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f3ba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f3bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d005      	beq.n	800f3ce <find_volume+0x162>
 800f3c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f3c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f3c6:	f7ff fefb 	bl	800f1c0 <check_fs>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	e000      	b.n	800f3d0 <find_volume+0x164>
 800f3ce:	2303      	movs	r3, #3
 800f3d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	d905      	bls.n	800f3e8 <find_volume+0x17c>
 800f3dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3de:	3301      	adds	r3, #1
 800f3e0:	643b      	str	r3, [r7, #64]	; 0x40
 800f3e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d9e1      	bls.n	800f3ac <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f3e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f3ec:	2b04      	cmp	r3, #4
 800f3ee:	d101      	bne.n	800f3f4 <find_volume+0x188>
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	e17d      	b.n	800f6f0 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f3f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d901      	bls.n	800f400 <find_volume+0x194>
 800f3fc:	230d      	movs	r3, #13
 800f3fe:	e177      	b.n	800f6f0 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f402:	3330      	adds	r3, #48	; 0x30
 800f404:	330b      	adds	r3, #11
 800f406:	4618      	mov	r0, r3
 800f408:	f7fe fd1a 	bl	800de40 <ld_word>
 800f40c:	4603      	mov	r3, r0
 800f40e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f412:	d001      	beq.n	800f418 <find_volume+0x1ac>
 800f414:	230d      	movs	r3, #13
 800f416:	e16b      	b.n	800f6f0 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41a:	3330      	adds	r3, #48	; 0x30
 800f41c:	3316      	adds	r3, #22
 800f41e:	4618      	mov	r0, r3
 800f420:	f7fe fd0e 	bl	800de40 <ld_word>
 800f424:	4603      	mov	r3, r0
 800f426:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d106      	bne.n	800f43c <find_volume+0x1d0>
 800f42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f430:	3330      	adds	r3, #48	; 0x30
 800f432:	3324      	adds	r3, #36	; 0x24
 800f434:	4618      	mov	r0, r3
 800f436:	f7fe fd1b 	bl	800de70 <ld_dword>
 800f43a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f440:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f444:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800f448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f44c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f44e:	789b      	ldrb	r3, [r3, #2]
 800f450:	2b01      	cmp	r3, #1
 800f452:	d005      	beq.n	800f460 <find_volume+0x1f4>
 800f454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f456:	789b      	ldrb	r3, [r3, #2]
 800f458:	2b02      	cmp	r3, #2
 800f45a:	d001      	beq.n	800f460 <find_volume+0x1f4>
 800f45c:	230d      	movs	r3, #13
 800f45e:	e147      	b.n	800f6f0 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f462:	789b      	ldrb	r3, [r3, #2]
 800f464:	461a      	mov	r2, r3
 800f466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f468:	fb02 f303 	mul.w	r3, r2, r3
 800f46c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f474:	b29a      	uxth	r2, r3
 800f476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f478:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47c:	895b      	ldrh	r3, [r3, #10]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d008      	beq.n	800f494 <find_volume+0x228>
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	895b      	ldrh	r3, [r3, #10]
 800f486:	461a      	mov	r2, r3
 800f488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f48a:	895b      	ldrh	r3, [r3, #10]
 800f48c:	3b01      	subs	r3, #1
 800f48e:	4013      	ands	r3, r2
 800f490:	2b00      	cmp	r3, #0
 800f492:	d001      	beq.n	800f498 <find_volume+0x22c>
 800f494:	230d      	movs	r3, #13
 800f496:	e12b      	b.n	800f6f0 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f49a:	3330      	adds	r3, #48	; 0x30
 800f49c:	3311      	adds	r3, #17
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7fe fcce 	bl	800de40 <ld_word>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4aa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ae:	891b      	ldrh	r3, [r3, #8]
 800f4b0:	f003 030f 	and.w	r3, r3, #15
 800f4b4:	b29b      	uxth	r3, r3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <find_volume+0x252>
 800f4ba:	230d      	movs	r3, #13
 800f4bc:	e118      	b.n	800f6f0 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c0:	3330      	adds	r3, #48	; 0x30
 800f4c2:	3313      	adds	r3, #19
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7fe fcbb 	bl	800de40 <ld_word>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f4ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d106      	bne.n	800f4e2 <find_volume+0x276>
 800f4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d6:	3330      	adds	r3, #48	; 0x30
 800f4d8:	3320      	adds	r3, #32
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7fe fcc8 	bl	800de70 <ld_dword>
 800f4e0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f4e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e4:	3330      	adds	r3, #48	; 0x30
 800f4e6:	330e      	adds	r3, #14
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7fe fca9 	bl	800de40 <ld_word>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f4f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d101      	bne.n	800f4fc <find_volume+0x290>
 800f4f8:	230d      	movs	r3, #13
 800f4fa:	e0f9      	b.n	800f6f0 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f4fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f4fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f500:	4413      	add	r3, r2
 800f502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f504:	8912      	ldrh	r2, [r2, #8]
 800f506:	0912      	lsrs	r2, r2, #4
 800f508:	b292      	uxth	r2, r2
 800f50a:	4413      	add	r3, r2
 800f50c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f50e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f512:	429a      	cmp	r2, r3
 800f514:	d201      	bcs.n	800f51a <find_volume+0x2ae>
 800f516:	230d      	movs	r3, #13
 800f518:	e0ea      	b.n	800f6f0 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f51a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51e:	1ad3      	subs	r3, r2, r3
 800f520:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f522:	8952      	ldrh	r2, [r2, #10]
 800f524:	fbb3 f3f2 	udiv	r3, r3, r2
 800f528:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d103      	bne.n	800f538 <find_volume+0x2cc>
 800f530:	230d      	movs	r3, #13
 800f532:	e0dd      	b.n	800f6f0 <find_volume+0x484>
 800f534:	200009a4 	.word	0x200009a4
		fmt = FS_FAT32;
 800f538:	2303      	movs	r3, #3
 800f53a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f540:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f544:	4293      	cmp	r3, r2
 800f546:	d802      	bhi.n	800f54e <find_volume+0x2e2>
 800f548:	2302      	movs	r3, #2
 800f54a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f550:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f554:	4293      	cmp	r3, r2
 800f556:	d802      	bhi.n	800f55e <find_volume+0x2f2>
 800f558:	2301      	movs	r3, #1
 800f55a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f560:	1c9a      	adds	r2, r3, #2
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f568:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f56a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f56c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f56e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f570:	441a      	add	r2, r3
 800f572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f574:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f576:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57a:	441a      	add	r2, r3
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800f580:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f584:	2b03      	cmp	r3, #3
 800f586:	d11e      	bne.n	800f5c6 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58a:	3330      	adds	r3, #48	; 0x30
 800f58c:	332a      	adds	r3, #42	; 0x2a
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fe fc56 	bl	800de40 <ld_word>
 800f594:	4603      	mov	r3, r0
 800f596:	2b00      	cmp	r3, #0
 800f598:	d001      	beq.n	800f59e <find_volume+0x332>
 800f59a:	230d      	movs	r3, #13
 800f59c:	e0a8      	b.n	800f6f0 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a0:	891b      	ldrh	r3, [r3, #8]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d001      	beq.n	800f5aa <find_volume+0x33e>
 800f5a6:	230d      	movs	r3, #13
 800f5a8:	e0a2      	b.n	800f6f0 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f5aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ac:	3330      	adds	r3, #48	; 0x30
 800f5ae:	332c      	adds	r3, #44	; 0x2c
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f7fe fc5d 	bl	800de70 <ld_dword>
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ba:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5be:	695b      	ldr	r3, [r3, #20]
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	647b      	str	r3, [r7, #68]	; 0x44
 800f5c4:	e01f      	b.n	800f606 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c8:	891b      	ldrh	r3, [r3, #8]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d101      	bne.n	800f5d2 <find_volume+0x366>
 800f5ce:	230d      	movs	r3, #13
 800f5d0:	e08e      	b.n	800f6f0 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f5d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d4:	6a1a      	ldr	r2, [r3, #32]
 800f5d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5d8:	441a      	add	r2, r3
 800f5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5dc:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f5de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f5e2:	2b02      	cmp	r3, #2
 800f5e4:	d103      	bne.n	800f5ee <find_volume+0x382>
 800f5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5e8:	695b      	ldr	r3, [r3, #20]
 800f5ea:	005b      	lsls	r3, r3, #1
 800f5ec:	e00a      	b.n	800f604 <find_volume+0x398>
 800f5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f0:	695a      	ldr	r2, [r3, #20]
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	005b      	lsls	r3, r3, #1
 800f5f6:	4413      	add	r3, r2
 800f5f8:	085a      	lsrs	r2, r3, #1
 800f5fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fc:	695b      	ldr	r3, [r3, #20]
 800f5fe:	f003 0301 	and.w	r3, r3, #1
 800f602:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f604:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f608:	699a      	ldr	r2, [r3, #24]
 800f60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f60c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f610:	0a5b      	lsrs	r3, r3, #9
 800f612:	429a      	cmp	r2, r3
 800f614:	d201      	bcs.n	800f61a <find_volume+0x3ae>
 800f616:	230d      	movs	r3, #13
 800f618:	e06a      	b.n	800f6f0 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61c:	f04f 32ff 	mov.w	r2, #4294967295
 800f620:	611a      	str	r2, [r3, #16]
 800f622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f624:	691a      	ldr	r2, [r3, #16]
 800f626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f628:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f62c:	2280      	movs	r2, #128	; 0x80
 800f62e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f630:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f634:	2b03      	cmp	r3, #3
 800f636:	d149      	bne.n	800f6cc <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63a:	3330      	adds	r3, #48	; 0x30
 800f63c:	3330      	adds	r3, #48	; 0x30
 800f63e:	4618      	mov	r0, r3
 800f640:	f7fe fbfe 	bl	800de40 <ld_word>
 800f644:	4603      	mov	r3, r0
 800f646:	2b01      	cmp	r3, #1
 800f648:	d140      	bne.n	800f6cc <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f64a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f64c:	3301      	adds	r3, #1
 800f64e:	4619      	mov	r1, r3
 800f650:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f652:	f7fe fea5 	bl	800e3a0 <move_window>
 800f656:	4603      	mov	r3, r0
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d137      	bne.n	800f6cc <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800f65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f65e:	2200      	movs	r2, #0
 800f660:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f664:	3330      	adds	r3, #48	; 0x30
 800f666:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f66a:	4618      	mov	r0, r3
 800f66c:	f7fe fbe8 	bl	800de40 <ld_word>
 800f670:	4603      	mov	r3, r0
 800f672:	461a      	mov	r2, r3
 800f674:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f678:	429a      	cmp	r2, r3
 800f67a:	d127      	bne.n	800f6cc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f67c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f67e:	3330      	adds	r3, #48	; 0x30
 800f680:	4618      	mov	r0, r3
 800f682:	f7fe fbf5 	bl	800de70 <ld_dword>
 800f686:	4602      	mov	r2, r0
 800f688:	4b1b      	ldr	r3, [pc, #108]	; (800f6f8 <find_volume+0x48c>)
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d11e      	bne.n	800f6cc <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f690:	3330      	adds	r3, #48	; 0x30
 800f692:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f696:	4618      	mov	r0, r3
 800f698:	f7fe fbea 	bl	800de70 <ld_dword>
 800f69c:	4602      	mov	r2, r0
 800f69e:	4b17      	ldr	r3, [pc, #92]	; (800f6fc <find_volume+0x490>)
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d113      	bne.n	800f6cc <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a6:	3330      	adds	r3, #48	; 0x30
 800f6a8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f7fe fbdf 	bl	800de70 <ld_dword>
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b6:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ba:	3330      	adds	r3, #48	; 0x30
 800f6bc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7fe fbd5 	bl	800de70 <ld_dword>
 800f6c6:	4602      	mov	r2, r0
 800f6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ca:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f6d2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f6d4:	4b0a      	ldr	r3, [pc, #40]	; (800f700 <find_volume+0x494>)
 800f6d6:	881b      	ldrh	r3, [r3, #0]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	b29a      	uxth	r2, r3
 800f6dc:	4b08      	ldr	r3, [pc, #32]	; (800f700 <find_volume+0x494>)
 800f6de:	801a      	strh	r2, [r3, #0]
 800f6e0:	4b07      	ldr	r3, [pc, #28]	; (800f700 <find_volume+0x494>)
 800f6e2:	881a      	ldrh	r2, [r3, #0]
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f6e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f6ea:	f7fe fdf1 	bl	800e2d0 <clear_lock>
#endif
	return FR_OK;
 800f6ee:	2300      	movs	r3, #0
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3758      	adds	r7, #88	; 0x58
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}
 800f6f8:	41615252 	.word	0x41615252
 800f6fc:	61417272 	.word	0x61417272
 800f700:	200009a8 	.word	0x200009a8

0800f704 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f70e:	2309      	movs	r3, #9
 800f710:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d01c      	beq.n	800f752 <validate+0x4e>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d018      	beq.n	800f752 <validate+0x4e>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d013      	beq.n	800f752 <validate+0x4e>
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	889a      	ldrh	r2, [r3, #4]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	88db      	ldrh	r3, [r3, #6]
 800f734:	429a      	cmp	r2, r3
 800f736:	d10c      	bne.n	800f752 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	785b      	ldrb	r3, [r3, #1]
 800f73e:	4618      	mov	r0, r3
 800f740:	f7fe fae0 	bl	800dd04 <disk_status>
 800f744:	4603      	mov	r3, r0
 800f746:	f003 0301 	and.w	r3, r3, #1
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d101      	bne.n	800f752 <validate+0x4e>
			res = FR_OK;
 800f74e:	2300      	movs	r3, #0
 800f750:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f752:	7bfb      	ldrb	r3, [r7, #15]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d102      	bne.n	800f75e <validate+0x5a>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	e000      	b.n	800f760 <validate+0x5c>
 800f75e:	2300      	movs	r3, #0
 800f760:	683a      	ldr	r2, [r7, #0]
 800f762:	6013      	str	r3, [r2, #0]
	return res;
 800f764:	7bfb      	ldrb	r3, [r7, #15]
}
 800f766:	4618      	mov	r0, r3
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
	...

0800f770 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af00      	add	r7, sp, #0
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	4613      	mov	r3, r2
 800f77c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f77e:	68bb      	ldr	r3, [r7, #8]
 800f780:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f782:	f107 0310 	add.w	r3, r7, #16
 800f786:	4618      	mov	r0, r3
 800f788:	f7ff fcd5 	bl	800f136 <get_ldnumber>
 800f78c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f78e:	69fb      	ldr	r3, [r7, #28]
 800f790:	2b00      	cmp	r3, #0
 800f792:	da01      	bge.n	800f798 <f_mount+0x28>
 800f794:	230b      	movs	r3, #11
 800f796:	e02b      	b.n	800f7f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f798:	4a17      	ldr	r2, [pc, #92]	; (800f7f8 <f_mount+0x88>)
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f7a2:	69bb      	ldr	r3, [r7, #24]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d005      	beq.n	800f7b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f7a8:	69b8      	ldr	r0, [r7, #24]
 800f7aa:	f7fe fd91 	bl	800e2d0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f7ae:	69bb      	ldr	r3, [r7, #24]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d002      	beq.n	800f7c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	490d      	ldr	r1, [pc, #52]	; (800f7f8 <f_mount+0x88>)
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d002      	beq.n	800f7d6 <f_mount+0x66>
 800f7d0:	79fb      	ldrb	r3, [r7, #7]
 800f7d2:	2b01      	cmp	r3, #1
 800f7d4:	d001      	beq.n	800f7da <f_mount+0x6a>
 800f7d6:	2300      	movs	r3, #0
 800f7d8:	e00a      	b.n	800f7f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f7da:	f107 010c 	add.w	r1, r7, #12
 800f7de:	f107 0308 	add.w	r3, r7, #8
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f7ff fd41 	bl	800f26c <find_volume>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3720      	adds	r7, #32
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}
 800f7f8:	200009a4 	.word	0x200009a4

0800f7fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b098      	sub	sp, #96	; 0x60
 800f800:	af00      	add	r7, sp, #0
 800f802:	60f8      	str	r0, [r7, #12]
 800f804:	60b9      	str	r1, [r7, #8]
 800f806:	4613      	mov	r3, r2
 800f808:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d101      	bne.n	800f814 <f_open+0x18>
 800f810:	2309      	movs	r3, #9
 800f812:	e1ad      	b.n	800fb70 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f814:	79fb      	ldrb	r3, [r7, #7]
 800f816:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f81a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f81c:	79fa      	ldrb	r2, [r7, #7]
 800f81e:	f107 0110 	add.w	r1, r7, #16
 800f822:	f107 0308 	add.w	r3, r7, #8
 800f826:	4618      	mov	r0, r3
 800f828:	f7ff fd20 	bl	800f26c <find_volume>
 800f82c:	4603      	mov	r3, r0
 800f82e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f836:	2b00      	cmp	r3, #0
 800f838:	f040 8191 	bne.w	800fb5e <f_open+0x362>
		dj.obj.fs = fs;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	f107 0314 	add.w	r3, r7, #20
 800f846:	4611      	mov	r1, r2
 800f848:	4618      	mov	r0, r3
 800f84a:	f7ff fc03 	bl	800f054 <follow_path>
 800f84e:	4603      	mov	r3, r0
 800f850:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f854:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d11a      	bne.n	800f892 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f85c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f860:	b25b      	sxtb	r3, r3
 800f862:	2b00      	cmp	r3, #0
 800f864:	da03      	bge.n	800f86e <f_open+0x72>
				res = FR_INVALID_NAME;
 800f866:	2306      	movs	r3, #6
 800f868:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f86c:	e011      	b.n	800f892 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f86e:	79fb      	ldrb	r3, [r7, #7]
 800f870:	f023 0301 	bic.w	r3, r3, #1
 800f874:	2b00      	cmp	r3, #0
 800f876:	bf14      	ite	ne
 800f878:	2301      	movne	r3, #1
 800f87a:	2300      	moveq	r3, #0
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	461a      	mov	r2, r3
 800f880:	f107 0314 	add.w	r3, r7, #20
 800f884:	4611      	mov	r1, r2
 800f886:	4618      	mov	r0, r3
 800f888:	f7fe fbda 	bl	800e040 <chk_lock>
 800f88c:	4603      	mov	r3, r0
 800f88e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f892:	79fb      	ldrb	r3, [r7, #7]
 800f894:	f003 031c 	and.w	r3, r3, #28
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d07f      	beq.n	800f99c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f89c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d017      	beq.n	800f8d4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f8a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8a8:	2b04      	cmp	r3, #4
 800f8aa:	d10e      	bne.n	800f8ca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f8ac:	f7fe fc24 	bl	800e0f8 <enq_lock>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d006      	beq.n	800f8c4 <f_open+0xc8>
 800f8b6:	f107 0314 	add.w	r3, r7, #20
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7ff fb03 	bl	800eec6 <dir_register>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	e000      	b.n	800f8c6 <f_open+0xca>
 800f8c4:	2312      	movs	r3, #18
 800f8c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f8ca:	79fb      	ldrb	r3, [r7, #7]
 800f8cc:	f043 0308 	orr.w	r3, r3, #8
 800f8d0:	71fb      	strb	r3, [r7, #7]
 800f8d2:	e010      	b.n	800f8f6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f8d4:	7ebb      	ldrb	r3, [r7, #26]
 800f8d6:	f003 0311 	and.w	r3, r3, #17
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d003      	beq.n	800f8e6 <f_open+0xea>
					res = FR_DENIED;
 800f8de:	2307      	movs	r3, #7
 800f8e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f8e4:	e007      	b.n	800f8f6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f8e6:	79fb      	ldrb	r3, [r7, #7]
 800f8e8:	f003 0304 	and.w	r3, r3, #4
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d002      	beq.n	800f8f6 <f_open+0xfa>
 800f8f0:	2308      	movs	r3, #8
 800f8f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f8f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d168      	bne.n	800f9d0 <f_open+0x1d4>
 800f8fe:	79fb      	ldrb	r3, [r7, #7]
 800f900:	f003 0308 	and.w	r3, r3, #8
 800f904:	2b00      	cmp	r3, #0
 800f906:	d063      	beq.n	800f9d0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f908:	f7fc fc16 	bl	800c138 <get_fattime>
 800f90c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f910:	330e      	adds	r3, #14
 800f912:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f914:	4618      	mov	r0, r3
 800f916:	f7fe fae9 	bl	800deec <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f91c:	3316      	adds	r3, #22
 800f91e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f920:	4618      	mov	r0, r3
 800f922:	f7fe fae3 	bl	800deec <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f928:	330b      	adds	r3, #11
 800f92a:	2220      	movs	r2, #32
 800f92c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f932:	4611      	mov	r1, r2
 800f934:	4618      	mov	r0, r3
 800f936:	f7ff fa32 	bl	800ed9e <ld_clust>
 800f93a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f940:	2200      	movs	r2, #0
 800f942:	4618      	mov	r0, r3
 800f944:	f7ff fa4a 	bl	800eddc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f94a:	331c      	adds	r3, #28
 800f94c:	2100      	movs	r1, #0
 800f94e:	4618      	mov	r0, r3
 800f950:	f7fe facc 	bl	800deec <st_dword>
					fs->wflag = 1;
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	2201      	movs	r2, #1
 800f958:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d037      	beq.n	800f9d0 <f_open+0x1d4>
						dw = fs->winsect;
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f964:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f966:	f107 0314 	add.w	r3, r7, #20
 800f96a:	2200      	movs	r2, #0
 800f96c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f96e:	4618      	mov	r0, r3
 800f970:	f7fe ff5d 	bl	800e82e <remove_chain>
 800f974:	4603      	mov	r3, r0
 800f976:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f97a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d126      	bne.n	800f9d0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f986:	4618      	mov	r0, r3
 800f988:	f7fe fd0a 	bl	800e3a0 <move_window>
 800f98c:	4603      	mov	r3, r0
 800f98e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f992:	693b      	ldr	r3, [r7, #16]
 800f994:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f996:	3a01      	subs	r2, #1
 800f998:	60da      	str	r2, [r3, #12]
 800f99a:	e019      	b.n	800f9d0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f99c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d115      	bne.n	800f9d0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f9a4:	7ebb      	ldrb	r3, [r7, #26]
 800f9a6:	f003 0310 	and.w	r3, r3, #16
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d003      	beq.n	800f9b6 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f9ae:	2304      	movs	r3, #4
 800f9b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f9b4:	e00c      	b.n	800f9d0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f9b6:	79fb      	ldrb	r3, [r7, #7]
 800f9b8:	f003 0302 	and.w	r3, r3, #2
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d007      	beq.n	800f9d0 <f_open+0x1d4>
 800f9c0:	7ebb      	ldrb	r3, [r7, #26]
 800f9c2:	f003 0301 	and.w	r3, r3, #1
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d002      	beq.n	800f9d0 <f_open+0x1d4>
						res = FR_DENIED;
 800f9ca:	2307      	movs	r3, #7
 800f9cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f9d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d128      	bne.n	800fa2a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f9d8:	79fb      	ldrb	r3, [r7, #7]
 800f9da:	f003 0308 	and.w	r3, r3, #8
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d003      	beq.n	800f9ea <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f9e2:	79fb      	ldrb	r3, [r7, #7]
 800f9e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f9f8:	79fb      	ldrb	r3, [r7, #7]
 800f9fa:	f023 0301 	bic.w	r3, r3, #1
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	bf14      	ite	ne
 800fa02:	2301      	movne	r3, #1
 800fa04:	2300      	moveq	r3, #0
 800fa06:	b2db      	uxtb	r3, r3
 800fa08:	461a      	mov	r2, r3
 800fa0a:	f107 0314 	add.w	r3, r7, #20
 800fa0e:	4611      	mov	r1, r2
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fe fb93 	bl	800e13c <inc_lock>
 800fa16:	4602      	mov	r2, r0
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	691b      	ldr	r3, [r3, #16]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d102      	bne.n	800fa2a <f_open+0x22e>
 800fa24:	2302      	movs	r3, #2
 800fa26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fa2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	f040 8095 	bne.w	800fb5e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fa38:	4611      	mov	r1, r2
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7ff f9af 	bl	800ed9e <ld_clust>
 800fa40:	4602      	mov	r2, r0
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa48:	331c      	adds	r3, #28
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fe fa10 	bl	800de70 <ld_dword>
 800fa50:	4602      	mov	r2, r0
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fa5c:	693a      	ldr	r2, [r7, #16]
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fa62:	693b      	ldr	r3, [r7, #16]
 800fa64:	88da      	ldrh	r2, [r3, #6]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	79fa      	ldrb	r2, [r7, #7]
 800fa6e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	2200      	movs	r2, #0
 800fa74:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	3330      	adds	r3, #48	; 0x30
 800fa86:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fe fa7a 	bl	800df86 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	f003 0320 	and.w	r3, r3, #32
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d060      	beq.n	800fb5e <f_open+0x362>
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	68db      	ldr	r3, [r3, #12]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d05c      	beq.n	800fb5e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	68da      	ldr	r2, [r3, #12]
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	895b      	ldrh	r3, [r3, #10]
 800fab0:	025b      	lsls	r3, r3, #9
 800fab2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	689b      	ldr	r3, [r3, #8]
 800fab8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	68db      	ldr	r3, [r3, #12]
 800fabe:	657b      	str	r3, [r7, #84]	; 0x54
 800fac0:	e016      	b.n	800faf0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fe fd25 	bl	800e516 <get_fat>
 800facc:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800face:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fad0:	2b01      	cmp	r3, #1
 800fad2:	d802      	bhi.n	800fada <f_open+0x2de>
 800fad4:	2302      	movs	r3, #2
 800fad6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae0:	d102      	bne.n	800fae8 <f_open+0x2ec>
 800fae2:	2301      	movs	r3, #1
 800fae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fae8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800faea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	657b      	str	r3, [r7, #84]	; 0x54
 800faf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d103      	bne.n	800fb00 <f_open+0x304>
 800faf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fafa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d8e0      	bhi.n	800fac2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fb04:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fb06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d127      	bne.n	800fb5e <f_open+0x362>
 800fb0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d022      	beq.n	800fb5e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fb18:	693b      	ldr	r3, [r7, #16]
 800fb1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7fe fcdb 	bl	800e4d8 <clust2sect>
 800fb22:	6478      	str	r0, [r7, #68]	; 0x44
 800fb24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d103      	bne.n	800fb32 <f_open+0x336>
						res = FR_INT_ERR;
 800fb2a:	2302      	movs	r3, #2
 800fb2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800fb30:	e015      	b.n	800fb5e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fb32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb34:	0a5a      	lsrs	r2, r3, #9
 800fb36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fb38:	441a      	add	r2, r3
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	7858      	ldrb	r0, [r3, #1]
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6a1a      	ldr	r2, [r3, #32]
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	f7fe f919 	bl	800dd84 <disk_read>
 800fb52:	4603      	mov	r3, r0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d002      	beq.n	800fb5e <f_open+0x362>
 800fb58:	2301      	movs	r3, #1
 800fb5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fb5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d002      	beq.n	800fb6c <f_open+0x370>
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2200      	movs	r2, #0
 800fb6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fb6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3760      	adds	r7, #96	; 0x60
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}

0800fb78 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b08c      	sub	sp, #48	; 0x30
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	60f8      	str	r0, [r7, #12]
 800fb80:	60b9      	str	r1, [r7, #8]
 800fb82:	607a      	str	r2, [r7, #4]
 800fb84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f107 0210 	add.w	r2, r7, #16
 800fb96:	4611      	mov	r1, r2
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7ff fdb3 	bl	800f704 <validate>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d107      	bne.n	800fbbc <f_write+0x44>
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	7d5b      	ldrb	r3, [r3, #21]
 800fbb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fbb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d002      	beq.n	800fbc2 <f_write+0x4a>
 800fbbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbc0:	e14b      	b.n	800fe5a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	7d1b      	ldrb	r3, [r3, #20]
 800fbc6:	f003 0302 	and.w	r3, r3, #2
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d101      	bne.n	800fbd2 <f_write+0x5a>
 800fbce:	2307      	movs	r3, #7
 800fbd0:	e143      	b.n	800fe5a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	699a      	ldr	r2, [r3, #24]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	441a      	add	r2, r3
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	699b      	ldr	r3, [r3, #24]
 800fbde:	429a      	cmp	r2, r3
 800fbe0:	f080 812d 	bcs.w	800fe3e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	699b      	ldr	r3, [r3, #24]
 800fbe8:	43db      	mvns	r3, r3
 800fbea:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fbec:	e127      	b.n	800fe3e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f040 80e3 	bne.w	800fdc2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	699b      	ldr	r3, [r3, #24]
 800fc00:	0a5b      	lsrs	r3, r3, #9
 800fc02:	693a      	ldr	r2, [r7, #16]
 800fc04:	8952      	ldrh	r2, [r2, #10]
 800fc06:	3a01      	subs	r2, #1
 800fc08:	4013      	ands	r3, r2
 800fc0a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fc0c:	69bb      	ldr	r3, [r7, #24]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d143      	bne.n	800fc9a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	699b      	ldr	r3, [r3, #24]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d10c      	bne.n	800fc34 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	689b      	ldr	r3, [r3, #8]
 800fc1e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d11a      	bne.n	800fc5c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2100      	movs	r1, #0
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f7fe fe64 	bl	800e8f8 <create_chain>
 800fc30:	62b8      	str	r0, [r7, #40]	; 0x28
 800fc32:	e013      	b.n	800fc5c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d007      	beq.n	800fc4c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	699b      	ldr	r3, [r3, #24]
 800fc40:	4619      	mov	r1, r3
 800fc42:	68f8      	ldr	r0, [r7, #12]
 800fc44:	f7fe fef0 	bl	800ea28 <clmt_clust>
 800fc48:	62b8      	str	r0, [r7, #40]	; 0x28
 800fc4a:	e007      	b.n	800fc5c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fc4c:	68fa      	ldr	r2, [r7, #12]
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	69db      	ldr	r3, [r3, #28]
 800fc52:	4619      	mov	r1, r3
 800fc54:	4610      	mov	r0, r2
 800fc56:	f7fe fe4f 	bl	800e8f8 <create_chain>
 800fc5a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	f000 80f2 	beq.w	800fe48 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc66:	2b01      	cmp	r3, #1
 800fc68:	d104      	bne.n	800fc74 <f_write+0xfc>
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2202      	movs	r2, #2
 800fc6e:	755a      	strb	r2, [r3, #21]
 800fc70:	2302      	movs	r3, #2
 800fc72:	e0f2      	b.n	800fe5a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc7a:	d104      	bne.n	800fc86 <f_write+0x10e>
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2201      	movs	r2, #1
 800fc80:	755a      	strb	r2, [r3, #21]
 800fc82:	2301      	movs	r3, #1
 800fc84:	e0e9      	b.n	800fe5a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc8a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d102      	bne.n	800fc9a <f_write+0x122>
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc98:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	7d1b      	ldrb	r3, [r3, #20]
 800fc9e:	b25b      	sxtb	r3, r3
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	da18      	bge.n	800fcd6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	7858      	ldrb	r0, [r3, #1]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	6a1a      	ldr	r2, [r3, #32]
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	f7fe f886 	bl	800ddc4 <disk_write>
 800fcb8:	4603      	mov	r3, r0
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d004      	beq.n	800fcc8 <f_write+0x150>
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	2201      	movs	r2, #1
 800fcc2:	755a      	strb	r2, [r3, #21]
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	e0c8      	b.n	800fe5a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	7d1b      	ldrb	r3, [r3, #20]
 800fccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcd0:	b2da      	uxtb	r2, r3
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fcd6:	693a      	ldr	r2, [r7, #16]
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	69db      	ldr	r3, [r3, #28]
 800fcdc:	4619      	mov	r1, r3
 800fcde:	4610      	mov	r0, r2
 800fce0:	f7fe fbfa 	bl	800e4d8 <clust2sect>
 800fce4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fce6:	697b      	ldr	r3, [r7, #20]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d104      	bne.n	800fcf6 <f_write+0x17e>
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2202      	movs	r2, #2
 800fcf0:	755a      	strb	r2, [r3, #21]
 800fcf2:	2302      	movs	r3, #2
 800fcf4:	e0b1      	b.n	800fe5a <f_write+0x2e2>
			sect += csect;
 800fcf6:	697a      	ldr	r2, [r7, #20]
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	4413      	add	r3, r2
 800fcfc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	0a5b      	lsrs	r3, r3, #9
 800fd02:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fd04:	6a3b      	ldr	r3, [r7, #32]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d03c      	beq.n	800fd84 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fd0a:	69ba      	ldr	r2, [r7, #24]
 800fd0c:	6a3b      	ldr	r3, [r7, #32]
 800fd0e:	4413      	add	r3, r2
 800fd10:	693a      	ldr	r2, [r7, #16]
 800fd12:	8952      	ldrh	r2, [r2, #10]
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d905      	bls.n	800fd24 <f_write+0x1ac>
					cc = fs->csize - csect;
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	895b      	ldrh	r3, [r3, #10]
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	1ad3      	subs	r3, r2, r3
 800fd22:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd24:	693b      	ldr	r3, [r7, #16]
 800fd26:	7858      	ldrb	r0, [r3, #1]
 800fd28:	6a3b      	ldr	r3, [r7, #32]
 800fd2a:	697a      	ldr	r2, [r7, #20]
 800fd2c:	69f9      	ldr	r1, [r7, #28]
 800fd2e:	f7fe f849 	bl	800ddc4 <disk_write>
 800fd32:	4603      	mov	r3, r0
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d004      	beq.n	800fd42 <f_write+0x1ca>
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	755a      	strb	r2, [r3, #21]
 800fd3e:	2301      	movs	r3, #1
 800fd40:	e08b      	b.n	800fe5a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	6a1a      	ldr	r2, [r3, #32]
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	1ad3      	subs	r3, r2, r3
 800fd4a:	6a3a      	ldr	r2, [r7, #32]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d915      	bls.n	800fd7c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6a1a      	ldr	r2, [r3, #32]
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	1ad3      	subs	r3, r2, r3
 800fd5e:	025b      	lsls	r3, r3, #9
 800fd60:	69fa      	ldr	r2, [r7, #28]
 800fd62:	4413      	add	r3, r2
 800fd64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd68:	4619      	mov	r1, r3
 800fd6a:	f7fe f8eb 	bl	800df44 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	7d1b      	ldrb	r3, [r3, #20]
 800fd72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd76:	b2da      	uxtb	r2, r3
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fd7c:	6a3b      	ldr	r3, [r7, #32]
 800fd7e:	025b      	lsls	r3, r3, #9
 800fd80:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fd82:	e03f      	b.n	800fe04 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	6a1b      	ldr	r3, [r3, #32]
 800fd88:	697a      	ldr	r2, [r7, #20]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d016      	beq.n	800fdbc <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	699a      	ldr	r2, [r3, #24]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d210      	bcs.n	800fdbc <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	7858      	ldrb	r0, [r3, #1]
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fda4:	2301      	movs	r3, #1
 800fda6:	697a      	ldr	r2, [r7, #20]
 800fda8:	f7fd ffec 	bl	800dd84 <disk_read>
 800fdac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d004      	beq.n	800fdbc <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	755a      	strb	r2, [r3, #21]
 800fdb8:	2301      	movs	r3, #1
 800fdba:	e04e      	b.n	800fe5a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	697a      	ldr	r2, [r7, #20]
 800fdc0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	699b      	ldr	r3, [r3, #24]
 800fdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdca:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fdce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fdd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	d901      	bls.n	800fddc <f_write+0x264>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	699b      	ldr	r3, [r3, #24]
 800fde6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdea:	4413      	add	r3, r2
 800fdec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdee:	69f9      	ldr	r1, [r7, #28]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fe f8a7 	bl	800df44 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	7d1b      	ldrb	r3, [r3, #20]
 800fdfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fdfe:	b2da      	uxtb	r2, r3
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fe04:	69fa      	ldr	r2, [r7, #28]
 800fe06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe08:	4413      	add	r3, r2
 800fe0a:	61fb      	str	r3, [r7, #28]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	699a      	ldr	r2, [r3, #24]
 800fe10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe12:	441a      	add	r2, r3
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	619a      	str	r2, [r3, #24]
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	68da      	ldr	r2, [r3, #12]
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	699b      	ldr	r3, [r3, #24]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	bf38      	it	cc
 800fe24:	461a      	movcc	r2, r3
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	60da      	str	r2, [r3, #12]
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe30:	441a      	add	r2, r3
 800fe32:	683b      	ldr	r3, [r7, #0]
 800fe34:	601a      	str	r2, [r3, #0]
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	1ad3      	subs	r3, r2, r3
 800fe3c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	f47f aed4 	bne.w	800fbee <f_write+0x76>
 800fe46:	e000      	b.n	800fe4a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fe48:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	7d1b      	ldrb	r3, [r3, #20]
 800fe4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe52:	b2da      	uxtb	r2, r3
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fe58:	2300      	movs	r3, #0
}
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	3730      	adds	r7, #48	; 0x30
 800fe5e:	46bd      	mov	sp, r7
 800fe60:	bd80      	pop	{r7, pc}

0800fe62 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fe62:	b580      	push	{r7, lr}
 800fe64:	b086      	sub	sp, #24
 800fe66:	af00      	add	r7, sp, #0
 800fe68:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f107 0208 	add.w	r2, r7, #8
 800fe70:	4611      	mov	r1, r2
 800fe72:	4618      	mov	r0, r3
 800fe74:	f7ff fc46 	bl	800f704 <validate>
 800fe78:	4603      	mov	r3, r0
 800fe7a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fe7c:	7dfb      	ldrb	r3, [r7, #23]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d168      	bne.n	800ff54 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	7d1b      	ldrb	r3, [r3, #20]
 800fe86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d062      	beq.n	800ff54 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	7d1b      	ldrb	r3, [r3, #20]
 800fe92:	b25b      	sxtb	r3, r3
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	da15      	bge.n	800fec4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fe98:	68bb      	ldr	r3, [r7, #8]
 800fe9a:	7858      	ldrb	r0, [r3, #1]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6a1a      	ldr	r2, [r3, #32]
 800fea6:	2301      	movs	r3, #1
 800fea8:	f7fd ff8c 	bl	800ddc4 <disk_write>
 800feac:	4603      	mov	r3, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d001      	beq.n	800feb6 <f_sync+0x54>
 800feb2:	2301      	movs	r3, #1
 800feb4:	e04f      	b.n	800ff56 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	7d1b      	ldrb	r3, [r3, #20]
 800feba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800febe:	b2da      	uxtb	r2, r3
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fec4:	f7fc f938 	bl	800c138 <get_fattime>
 800fec8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800feca:	68ba      	ldr	r2, [r7, #8]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fed0:	4619      	mov	r1, r3
 800fed2:	4610      	mov	r0, r2
 800fed4:	f7fe fa64 	bl	800e3a0 <move_window>
 800fed8:	4603      	mov	r3, r0
 800feda:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fedc:	7dfb      	ldrb	r3, [r7, #23]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d138      	bne.n	800ff54 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	330b      	adds	r3, #11
 800feec:	781a      	ldrb	r2, [r3, #0]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	330b      	adds	r3, #11
 800fef2:	f042 0220 	orr.w	r2, r2, #32
 800fef6:	b2d2      	uxtb	r2, r2
 800fef8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	6818      	ldr	r0, [r3, #0]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	689b      	ldr	r3, [r3, #8]
 800ff02:	461a      	mov	r2, r3
 800ff04:	68f9      	ldr	r1, [r7, #12]
 800ff06:	f7fe ff69 	bl	800eddc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f103 021c 	add.w	r2, r3, #28
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	4619      	mov	r1, r3
 800ff16:	4610      	mov	r0, r2
 800ff18:	f7fd ffe8 	bl	800deec <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	3316      	adds	r3, #22
 800ff20:	6939      	ldr	r1, [r7, #16]
 800ff22:	4618      	mov	r0, r3
 800ff24:	f7fd ffe2 	bl	800deec <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	3312      	adds	r3, #18
 800ff2c:	2100      	movs	r1, #0
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7fd ffc1 	bl	800deb6 <st_word>
					fs->wflag = 1;
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	2201      	movs	r2, #1
 800ff38:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ff3a:	68bb      	ldr	r3, [r7, #8]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fe fa5d 	bl	800e3fc <sync_fs>
 800ff42:	4603      	mov	r3, r0
 800ff44:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	7d1b      	ldrb	r3, [r3, #20]
 800ff4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff4e:	b2da      	uxtb	r2, r3
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ff54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3718      	adds	r7, #24
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}

0800ff5e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ff5e:	b580      	push	{r7, lr}
 800ff60:	b084      	sub	sp, #16
 800ff62:	af00      	add	r7, sp, #0
 800ff64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7ff ff7b 	bl	800fe62 <f_sync>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ff70:	7bfb      	ldrb	r3, [r7, #15]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	d118      	bne.n	800ffa8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f107 0208 	add.w	r2, r7, #8
 800ff7c:	4611      	mov	r1, r2
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7ff fbc0 	bl	800f704 <validate>
 800ff84:	4603      	mov	r3, r0
 800ff86:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ff88:	7bfb      	ldrb	r3, [r7, #15]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d10c      	bne.n	800ffa8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	691b      	ldr	r3, [r3, #16]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7fe f960 	bl	800e258 <dec_lock>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ff9c:	7bfb      	ldrb	r3, [r7, #15]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	d102      	bne.n	800ffa8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ffa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffaa:	4618      	mov	r0, r3
 800ffac:	3710      	adds	r7, #16
 800ffae:	46bd      	mov	sp, r7
 800ffb0:	bd80      	pop	{r7, pc}
	...

0800ffb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b087      	sub	sp, #28
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	60f8      	str	r0, [r7, #12]
 800ffbc:	60b9      	str	r1, [r7, #8]
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ffc6:	2300      	movs	r3, #0
 800ffc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ffca:	4b1f      	ldr	r3, [pc, #124]	; (8010048 <FATFS_LinkDriverEx+0x94>)
 800ffcc:	7a5b      	ldrb	r3, [r3, #9]
 800ffce:	b2db      	uxtb	r3, r3
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d131      	bne.n	8010038 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ffd4:	4b1c      	ldr	r3, [pc, #112]	; (8010048 <FATFS_LinkDriverEx+0x94>)
 800ffd6:	7a5b      	ldrb	r3, [r3, #9]
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	461a      	mov	r2, r3
 800ffdc:	4b1a      	ldr	r3, [pc, #104]	; (8010048 <FATFS_LinkDriverEx+0x94>)
 800ffde:	2100      	movs	r1, #0
 800ffe0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ffe2:	4b19      	ldr	r3, [pc, #100]	; (8010048 <FATFS_LinkDriverEx+0x94>)
 800ffe4:	7a5b      	ldrb	r3, [r3, #9]
 800ffe6:	b2db      	uxtb	r3, r3
 800ffe8:	4a17      	ldr	r2, [pc, #92]	; (8010048 <FATFS_LinkDriverEx+0x94>)
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	4413      	add	r3, r2
 800ffee:	68fa      	ldr	r2, [r7, #12]
 800fff0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fff2:	4b15      	ldr	r3, [pc, #84]	; (8010048 <FATFS_LinkDriverEx+0x94>)
 800fff4:	7a5b      	ldrb	r3, [r3, #9]
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	461a      	mov	r2, r3
 800fffa:	4b13      	ldr	r3, [pc, #76]	; (8010048 <FATFS_LinkDriverEx+0x94>)
 800fffc:	4413      	add	r3, r2
 800fffe:	79fa      	ldrb	r2, [r7, #7]
 8010000:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010002:	4b11      	ldr	r3, [pc, #68]	; (8010048 <FATFS_LinkDriverEx+0x94>)
 8010004:	7a5b      	ldrb	r3, [r3, #9]
 8010006:	b2db      	uxtb	r3, r3
 8010008:	1c5a      	adds	r2, r3, #1
 801000a:	b2d1      	uxtb	r1, r2
 801000c:	4a0e      	ldr	r2, [pc, #56]	; (8010048 <FATFS_LinkDriverEx+0x94>)
 801000e:	7251      	strb	r1, [r2, #9]
 8010010:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010012:	7dbb      	ldrb	r3, [r7, #22]
 8010014:	3330      	adds	r3, #48	; 0x30
 8010016:	b2da      	uxtb	r2, r3
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	3301      	adds	r3, #1
 8010020:	223a      	movs	r2, #58	; 0x3a
 8010022:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	3302      	adds	r3, #2
 8010028:	222f      	movs	r2, #47	; 0x2f
 801002a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801002c:	68bb      	ldr	r3, [r7, #8]
 801002e:	3303      	adds	r3, #3
 8010030:	2200      	movs	r2, #0
 8010032:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010034:	2300      	movs	r3, #0
 8010036:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010038:	7dfb      	ldrb	r3, [r7, #23]
}
 801003a:	4618      	mov	r0, r3
 801003c:	371c      	adds	r7, #28
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr
 8010046:	bf00      	nop
 8010048:	200009cc 	.word	0x200009cc

0801004c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010056:	2200      	movs	r2, #0
 8010058:	6839      	ldr	r1, [r7, #0]
 801005a:	6878      	ldr	r0, [r7, #4]
 801005c:	f7ff ffaa 	bl	800ffb4 <FATFS_LinkDriverEx>
 8010060:	4603      	mov	r3, r0
}
 8010062:	4618      	mov	r0, r3
 8010064:	3708      	adds	r7, #8
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
	...

0801006c <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 801006c:	b480      	push	{r7}
 801006e:	b085      	sub	sp, #20
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
 8010074:	460b      	mov	r3, r1
 8010076:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 8010078:	2300      	movs	r3, #0
 801007a:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 801007c:	2301      	movs	r3, #1
 801007e:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 8010080:	4b15      	ldr	r3, [pc, #84]	; (80100d8 <FATFS_UnLinkDriverEx+0x6c>)
 8010082:	7a5b      	ldrb	r3, [r3, #9]
 8010084:	b2db      	uxtb	r3, r3
 8010086:	2b00      	cmp	r3, #0
 8010088:	d01e      	beq.n	80100c8 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	3b30      	subs	r3, #48	; 0x30
 8010090:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 8010092:	7bbb      	ldrb	r3, [r7, #14]
 8010094:	4a10      	ldr	r2, [pc, #64]	; (80100d8 <FATFS_UnLinkDriverEx+0x6c>)
 8010096:	009b      	lsls	r3, r3, #2
 8010098:	4413      	add	r3, r2
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d013      	beq.n	80100c8 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 80100a0:	7bbb      	ldrb	r3, [r7, #14]
 80100a2:	4a0d      	ldr	r2, [pc, #52]	; (80100d8 <FATFS_UnLinkDriverEx+0x6c>)
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	4413      	add	r3, r2
 80100a8:	2200      	movs	r2, #0
 80100aa:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 80100ac:	7bbb      	ldrb	r3, [r7, #14]
 80100ae:	4a0a      	ldr	r2, [pc, #40]	; (80100d8 <FATFS_UnLinkDriverEx+0x6c>)
 80100b0:	4413      	add	r3, r2
 80100b2:	2200      	movs	r2, #0
 80100b4:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 80100b6:	4b08      	ldr	r3, [pc, #32]	; (80100d8 <FATFS_UnLinkDriverEx+0x6c>)
 80100b8:	7a5b      	ldrb	r3, [r3, #9]
 80100ba:	b2db      	uxtb	r3, r3
 80100bc:	3b01      	subs	r3, #1
 80100be:	b2da      	uxtb	r2, r3
 80100c0:	4b05      	ldr	r3, [pc, #20]	; (80100d8 <FATFS_UnLinkDriverEx+0x6c>)
 80100c2:	725a      	strb	r2, [r3, #9]
      ret = 0;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80100c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ca:	4618      	mov	r0, r3
 80100cc:	3714      	adds	r7, #20
 80100ce:	46bd      	mov	sp, r7
 80100d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d4:	4770      	bx	lr
 80100d6:	bf00      	nop
 80100d8:	200009cc 	.word	0x200009cc

080100dc <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b082      	sub	sp, #8
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 80100e4:	2100      	movs	r1, #0
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7ff ffc0 	bl	801006c <FATFS_UnLinkDriverEx>
 80100ec:	4603      	mov	r3, r0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}
	...

080100f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80100fc:	2200      	movs	r2, #0
 80100fe:	4912      	ldr	r1, [pc, #72]	; (8010148 <MX_USB_DEVICE_Init+0x50>)
 8010100:	4812      	ldr	r0, [pc, #72]	; (801014c <MX_USB_DEVICE_Init+0x54>)
 8010102:	f7fc fda5 	bl	800cc50 <USBD_Init>
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	d001      	beq.n	8010110 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801010c:	f7f3 f812 	bl	8003134 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010110:	490f      	ldr	r1, [pc, #60]	; (8010150 <MX_USB_DEVICE_Init+0x58>)
 8010112:	480e      	ldr	r0, [pc, #56]	; (801014c <MX_USB_DEVICE_Init+0x54>)
 8010114:	f7fc fdc7 	bl	800cca6 <USBD_RegisterClass>
 8010118:	4603      	mov	r3, r0
 801011a:	2b00      	cmp	r3, #0
 801011c:	d001      	beq.n	8010122 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801011e:	f7f3 f809 	bl	8003134 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010122:	490c      	ldr	r1, [pc, #48]	; (8010154 <MX_USB_DEVICE_Init+0x5c>)
 8010124:	4809      	ldr	r0, [pc, #36]	; (801014c <MX_USB_DEVICE_Init+0x54>)
 8010126:	f7fc fcf5 	bl	800cb14 <USBD_CDC_RegisterInterface>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d001      	beq.n	8010134 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010130:	f7f3 f800 	bl	8003134 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010134:	4805      	ldr	r0, [pc, #20]	; (801014c <MX_USB_DEVICE_Init+0x54>)
 8010136:	f7fc fdd0 	bl	800ccda <USBD_Start>
 801013a:	4603      	mov	r3, r0
 801013c:	2b00      	cmp	r3, #0
 801013e:	d001      	beq.n	8010144 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010140:	f7f2 fff8 	bl	8003134 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010144:	bf00      	nop
 8010146:	bd80      	pop	{r7, pc}
 8010148:	20000140 	.word	0x20000140
 801014c:	2000140c 	.word	0x2000140c
 8010150:	2000002c 	.word	0x2000002c
 8010154:	20000130 	.word	0x20000130

08010158 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801015c:	2200      	movs	r2, #0
 801015e:	4905      	ldr	r1, [pc, #20]	; (8010174 <CDC_Init_FS+0x1c>)
 8010160:	4805      	ldr	r0, [pc, #20]	; (8010178 <CDC_Init_FS+0x20>)
 8010162:	f7fc fcee 	bl	800cb42 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010166:	4905      	ldr	r1, [pc, #20]	; (801017c <CDC_Init_FS+0x24>)
 8010168:	4803      	ldr	r0, [pc, #12]	; (8010178 <CDC_Init_FS+0x20>)
 801016a:	f7fc fd04 	bl	800cb76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801016e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010170:	4618      	mov	r0, r3
 8010172:	bd80      	pop	{r7, pc}
 8010174:	20001ea8 	.word	0x20001ea8
 8010178:	2000140c 	.word	0x2000140c
 801017c:	200016a8 	.word	0x200016a8

08010180 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010180:	b480      	push	{r7}
 8010182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010184:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010186:	4618      	mov	r0, r3
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010190:	b480      	push	{r7}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	4603      	mov	r3, r0
 8010198:	6039      	str	r1, [r7, #0]
 801019a:	71fb      	strb	r3, [r7, #7]
 801019c:	4613      	mov	r3, r2
 801019e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 80101a0:	f107 0308 	add.w	r3, r7, #8
 80101a4:	2200      	movs	r2, #0
 80101a6:	601a      	str	r2, [r3, #0]
 80101a8:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 80101ac:	79fb      	ldrb	r3, [r7, #7]
 80101ae:	2b23      	cmp	r3, #35	; 0x23
 80101b0:	d87c      	bhi.n	80102ac <CDC_Control_FS+0x11c>
 80101b2:	a201      	add	r2, pc, #4	; (adr r2, 80101b8 <CDC_Control_FS+0x28>)
 80101b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b8:	080102ad 	.word	0x080102ad
 80101bc:	080102ad 	.word	0x080102ad
 80101c0:	080102ad 	.word	0x080102ad
 80101c4:	080102ad 	.word	0x080102ad
 80101c8:	080102ad 	.word	0x080102ad
 80101cc:	080102ad 	.word	0x080102ad
 80101d0:	080102ad 	.word	0x080102ad
 80101d4:	080102ad 	.word	0x080102ad
 80101d8:	080102ad 	.word	0x080102ad
 80101dc:	080102ad 	.word	0x080102ad
 80101e0:	080102ad 	.word	0x080102ad
 80101e4:	080102ad 	.word	0x080102ad
 80101e8:	080102ad 	.word	0x080102ad
 80101ec:	080102ad 	.word	0x080102ad
 80101f0:	080102ad 	.word	0x080102ad
 80101f4:	080102ad 	.word	0x080102ad
 80101f8:	080102ad 	.word	0x080102ad
 80101fc:	080102ad 	.word	0x080102ad
 8010200:	080102ad 	.word	0x080102ad
 8010204:	080102ad 	.word	0x080102ad
 8010208:	080102ad 	.word	0x080102ad
 801020c:	080102ad 	.word	0x080102ad
 8010210:	080102ad 	.word	0x080102ad
 8010214:	080102ad 	.word	0x080102ad
 8010218:	080102ad 	.word	0x080102ad
 801021c:	080102ad 	.word	0x080102ad
 8010220:	080102ad 	.word	0x080102ad
 8010224:	080102ad 	.word	0x080102ad
 8010228:	080102ad 	.word	0x080102ad
 801022c:	080102ad 	.word	0x080102ad
 8010230:	080102ad 	.word	0x080102ad
 8010234:	080102ad 	.word	0x080102ad
 8010238:	08010249 	.word	0x08010249
 801023c:	08010275 	.word	0x08010275
 8010240:	080102ad 	.word	0x080102ad
 8010244:	080102ad 	.word	0x080102ad
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	785b      	ldrb	r3, [r3, #1]
 8010252:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	789b      	ldrb	r3, [r3, #2]
 8010258:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	78db      	ldrb	r3, [r3, #3]
 801025e:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	791b      	ldrb	r3, [r3, #4]
 8010264:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	795b      	ldrb	r3, [r3, #5]
 801026a:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	799b      	ldrb	r3, [r3, #6]
 8010270:	73bb      	strb	r3, [r7, #14]
      	break;
 8010272:	e01c      	b.n	80102ae <CDC_Control_FS+0x11e>

    case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 8010274:	7a3a      	ldrb	r2, [r7, #8]
 8010276:	683b      	ldr	r3, [r7, #0]
 8010278:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	3301      	adds	r3, #1
 801027e:	7a7a      	ldrb	r2, [r7, #9]
 8010280:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	3302      	adds	r3, #2
 8010286:	7aba      	ldrb	r2, [r7, #10]
 8010288:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	3303      	adds	r3, #3
 801028e:	7afa      	ldrb	r2, [r7, #11]
 8010290:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	3304      	adds	r3, #4
 8010296:	7b3a      	ldrb	r2, [r7, #12]
 8010298:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	3305      	adds	r3, #5
 801029e:	7b7a      	ldrb	r2, [r7, #13]
 80102a0:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	3306      	adds	r3, #6
 80102a6:	7bba      	ldrb	r2, [r7, #14]
 80102a8:	701a      	strb	r2, [r3, #0]
      	break;
 80102aa:	e000      	b.n	80102ae <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80102ac:	bf00      	nop
  }

  return (USBD_OK);
 80102ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80102b0:	4618      	mov	r0, r3
 80102b2:	3714      	adds	r7, #20
 80102b4:	46bd      	mov	sp, r7
 80102b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ba:	4770      	bx	lr

080102bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80102bc:	b580      	push	{r7, lr}
 80102be:	b082      	sub	sp, #8
 80102c0:	af00      	add	r7, sp, #0
 80102c2:	6078      	str	r0, [r7, #4]
 80102c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80102c6:	6879      	ldr	r1, [r7, #4]
 80102c8:	4805      	ldr	r0, [pc, #20]	; (80102e0 <CDC_Receive_FS+0x24>)
 80102ca:	f7fc fc54 	bl	800cb76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80102ce:	4804      	ldr	r0, [pc, #16]	; (80102e0 <CDC_Receive_FS+0x24>)
 80102d0:	f7fc fc94 	bl	800cbfc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80102d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
 80102de:	bf00      	nop
 80102e0:	2000140c 	.word	0x2000140c

080102e4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	460b      	mov	r3, r1
 80102ee:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80102f0:	2300      	movs	r3, #0
 80102f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80102f4:	4b0d      	ldr	r3, [pc, #52]	; (801032c <CDC_Transmit_FS+0x48>)
 80102f6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80102fa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010302:	2b00      	cmp	r3, #0
 8010304:	d001      	beq.n	801030a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010306:	2301      	movs	r3, #1
 8010308:	e00b      	b.n	8010322 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801030a:	887b      	ldrh	r3, [r7, #2]
 801030c:	461a      	mov	r2, r3
 801030e:	6879      	ldr	r1, [r7, #4]
 8010310:	4806      	ldr	r0, [pc, #24]	; (801032c <CDC_Transmit_FS+0x48>)
 8010312:	f7fc fc16 	bl	800cb42 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010316:	4805      	ldr	r0, [pc, #20]	; (801032c <CDC_Transmit_FS+0x48>)
 8010318:	f7fc fc41 	bl	800cb9e <USBD_CDC_TransmitPacket>
 801031c:	4603      	mov	r3, r0
 801031e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010320:	7bfb      	ldrb	r3, [r7, #15]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop
 801032c:	2000140c 	.word	0x2000140c

08010330 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
 8010336:	4603      	mov	r3, r0
 8010338:	6039      	str	r1, [r7, #0]
 801033a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	2212      	movs	r2, #18
 8010340:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010342:	4b03      	ldr	r3, [pc, #12]	; (8010350 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010344:	4618      	mov	r0, r3
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr
 8010350:	2000015c 	.word	0x2000015c

08010354 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010354:	b480      	push	{r7}
 8010356:	b083      	sub	sp, #12
 8010358:	af00      	add	r7, sp, #0
 801035a:	4603      	mov	r3, r0
 801035c:	6039      	str	r1, [r7, #0]
 801035e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010360:	683b      	ldr	r3, [r7, #0]
 8010362:	2204      	movs	r2, #4
 8010364:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010366:	4b03      	ldr	r3, [pc, #12]	; (8010374 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010368:	4618      	mov	r0, r3
 801036a:	370c      	adds	r7, #12
 801036c:	46bd      	mov	sp, r7
 801036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010372:	4770      	bx	lr
 8010374:	20000170 	.word	0x20000170

08010378 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	4603      	mov	r3, r0
 8010380:	6039      	str	r1, [r7, #0]
 8010382:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010384:	79fb      	ldrb	r3, [r7, #7]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d105      	bne.n	8010396 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801038a:	683a      	ldr	r2, [r7, #0]
 801038c:	4907      	ldr	r1, [pc, #28]	; (80103ac <USBD_FS_ProductStrDescriptor+0x34>)
 801038e:	4808      	ldr	r0, [pc, #32]	; (80103b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8010390:	f7fd fbda 	bl	800db48 <USBD_GetString>
 8010394:	e004      	b.n	80103a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010396:	683a      	ldr	r2, [r7, #0]
 8010398:	4904      	ldr	r1, [pc, #16]	; (80103ac <USBD_FS_ProductStrDescriptor+0x34>)
 801039a:	4805      	ldr	r0, [pc, #20]	; (80103b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801039c:	f7fd fbd4 	bl	800db48 <USBD_GetString>
  }
  return USBD_StrDesc;
 80103a0:	4b02      	ldr	r3, [pc, #8]	; (80103ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop
 80103ac:	200026a8 	.word	0x200026a8
 80103b0:	08014ebc 	.word	0x08014ebc

080103b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b082      	sub	sp, #8
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	6039      	str	r1, [r7, #0]
 80103be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80103c0:	683a      	ldr	r2, [r7, #0]
 80103c2:	4904      	ldr	r1, [pc, #16]	; (80103d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80103c4:	4804      	ldr	r0, [pc, #16]	; (80103d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80103c6:	f7fd fbbf 	bl	800db48 <USBD_GetString>
  return USBD_StrDesc;
 80103ca:	4b02      	ldr	r3, [pc, #8]	; (80103d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3708      	adds	r7, #8
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	200026a8 	.word	0x200026a8
 80103d8:	08014ec8 	.word	0x08014ec8

080103dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	4603      	mov	r3, r0
 80103e4:	6039      	str	r1, [r7, #0]
 80103e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	221a      	movs	r2, #26
 80103ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80103ee:	f000 f843 	bl	8010478 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80103f2:	4b02      	ldr	r3, [pc, #8]	; (80103fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3708      	adds	r7, #8
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	20000174 	.word	0x20000174

08010400 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	4603      	mov	r3, r0
 8010408:	6039      	str	r1, [r7, #0]
 801040a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801040c:	79fb      	ldrb	r3, [r7, #7]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d105      	bne.n	801041e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	4907      	ldr	r1, [pc, #28]	; (8010434 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010416:	4808      	ldr	r0, [pc, #32]	; (8010438 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010418:	f7fd fb96 	bl	800db48 <USBD_GetString>
 801041c:	e004      	b.n	8010428 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801041e:	683a      	ldr	r2, [r7, #0]
 8010420:	4904      	ldr	r1, [pc, #16]	; (8010434 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010422:	4805      	ldr	r0, [pc, #20]	; (8010438 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010424:	f7fd fb90 	bl	800db48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010428:	4b02      	ldr	r3, [pc, #8]	; (8010434 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801042a:	4618      	mov	r0, r3
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	200026a8 	.word	0x200026a8
 8010438:	08014edc 	.word	0x08014edc

0801043c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	4603      	mov	r3, r0
 8010444:	6039      	str	r1, [r7, #0]
 8010446:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010448:	79fb      	ldrb	r3, [r7, #7]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d105      	bne.n	801045a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801044e:	683a      	ldr	r2, [r7, #0]
 8010450:	4907      	ldr	r1, [pc, #28]	; (8010470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010452:	4808      	ldr	r0, [pc, #32]	; (8010474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010454:	f7fd fb78 	bl	800db48 <USBD_GetString>
 8010458:	e004      	b.n	8010464 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801045a:	683a      	ldr	r2, [r7, #0]
 801045c:	4904      	ldr	r1, [pc, #16]	; (8010470 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801045e:	4805      	ldr	r0, [pc, #20]	; (8010474 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010460:	f7fd fb72 	bl	800db48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010464:	4b02      	ldr	r3, [pc, #8]	; (8010470 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010466:	4618      	mov	r0, r3
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	200026a8 	.word	0x200026a8
 8010474:	08014ee8 	.word	0x08014ee8

08010478 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b084      	sub	sp, #16
 801047c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801047e:	4b0f      	ldr	r3, [pc, #60]	; (80104bc <Get_SerialNum+0x44>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010484:	4b0e      	ldr	r3, [pc, #56]	; (80104c0 <Get_SerialNum+0x48>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801048a:	4b0e      	ldr	r3, [pc, #56]	; (80104c4 <Get_SerialNum+0x4c>)
 801048c:	681b      	ldr	r3, [r3, #0]
 801048e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4413      	add	r3, r2
 8010496:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d009      	beq.n	80104b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801049e:	2208      	movs	r2, #8
 80104a0:	4909      	ldr	r1, [pc, #36]	; (80104c8 <Get_SerialNum+0x50>)
 80104a2:	68f8      	ldr	r0, [r7, #12]
 80104a4:	f000 f814 	bl	80104d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80104a8:	2204      	movs	r2, #4
 80104aa:	4908      	ldr	r1, [pc, #32]	; (80104cc <Get_SerialNum+0x54>)
 80104ac:	68b8      	ldr	r0, [r7, #8]
 80104ae:	f000 f80f 	bl	80104d0 <IntToUnicode>
  }
}
 80104b2:	bf00      	nop
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	1fff7a10 	.word	0x1fff7a10
 80104c0:	1fff7a14 	.word	0x1fff7a14
 80104c4:	1fff7a18 	.word	0x1fff7a18
 80104c8:	20000176 	.word	0x20000176
 80104cc:	20000186 	.word	0x20000186

080104d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80104d0:	b480      	push	{r7}
 80104d2:	b087      	sub	sp, #28
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	4613      	mov	r3, r2
 80104dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80104de:	2300      	movs	r3, #0
 80104e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80104e2:	2300      	movs	r3, #0
 80104e4:	75fb      	strb	r3, [r7, #23]
 80104e6:	e027      	b.n	8010538 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80104e8:	68fb      	ldr	r3, [r7, #12]
 80104ea:	0f1b      	lsrs	r3, r3, #28
 80104ec:	2b09      	cmp	r3, #9
 80104ee:	d80b      	bhi.n	8010508 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	0f1b      	lsrs	r3, r3, #28
 80104f4:	b2da      	uxtb	r2, r3
 80104f6:	7dfb      	ldrb	r3, [r7, #23]
 80104f8:	005b      	lsls	r3, r3, #1
 80104fa:	4619      	mov	r1, r3
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	440b      	add	r3, r1
 8010500:	3230      	adds	r2, #48	; 0x30
 8010502:	b2d2      	uxtb	r2, r2
 8010504:	701a      	strb	r2, [r3, #0]
 8010506:	e00a      	b.n	801051e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	0f1b      	lsrs	r3, r3, #28
 801050c:	b2da      	uxtb	r2, r3
 801050e:	7dfb      	ldrb	r3, [r7, #23]
 8010510:	005b      	lsls	r3, r3, #1
 8010512:	4619      	mov	r1, r3
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	440b      	add	r3, r1
 8010518:	3237      	adds	r2, #55	; 0x37
 801051a:	b2d2      	uxtb	r2, r2
 801051c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	011b      	lsls	r3, r3, #4
 8010522:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010524:	7dfb      	ldrb	r3, [r7, #23]
 8010526:	005b      	lsls	r3, r3, #1
 8010528:	3301      	adds	r3, #1
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	4413      	add	r3, r2
 801052e:	2200      	movs	r2, #0
 8010530:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010532:	7dfb      	ldrb	r3, [r7, #23]
 8010534:	3301      	adds	r3, #1
 8010536:	75fb      	strb	r3, [r7, #23]
 8010538:	7dfa      	ldrb	r2, [r7, #23]
 801053a:	79fb      	ldrb	r3, [r7, #7]
 801053c:	429a      	cmp	r2, r3
 801053e:	d3d3      	bcc.n	80104e8 <IntToUnicode+0x18>
  }
}
 8010540:	bf00      	nop
 8010542:	371c      	adds	r7, #28
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b08a      	sub	sp, #40	; 0x28
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010554:	f107 0314 	add.w	r3, r7, #20
 8010558:	2200      	movs	r2, #0
 801055a:	601a      	str	r2, [r3, #0]
 801055c:	605a      	str	r2, [r3, #4]
 801055e:	609a      	str	r2, [r3, #8]
 8010560:	60da      	str	r2, [r3, #12]
 8010562:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801056c:	d13a      	bne.n	80105e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801056e:	2300      	movs	r3, #0
 8010570:	613b      	str	r3, [r7, #16]
 8010572:	4b1e      	ldr	r3, [pc, #120]	; (80105ec <HAL_PCD_MspInit+0xa0>)
 8010574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010576:	4a1d      	ldr	r2, [pc, #116]	; (80105ec <HAL_PCD_MspInit+0xa0>)
 8010578:	f043 0301 	orr.w	r3, r3, #1
 801057c:	6313      	str	r3, [r2, #48]	; 0x30
 801057e:	4b1b      	ldr	r3, [pc, #108]	; (80105ec <HAL_PCD_MspInit+0xa0>)
 8010580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010582:	f003 0301 	and.w	r3, r3, #1
 8010586:	613b      	str	r3, [r7, #16]
 8010588:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801058a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801058e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010590:	2302      	movs	r3, #2
 8010592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010594:	2300      	movs	r3, #0
 8010596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010598:	2303      	movs	r3, #3
 801059a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801059c:	230a      	movs	r3, #10
 801059e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80105a0:	f107 0314 	add.w	r3, r7, #20
 80105a4:	4619      	mov	r1, r3
 80105a6:	4812      	ldr	r0, [pc, #72]	; (80105f0 <HAL_PCD_MspInit+0xa4>)
 80105a8:	f7f3 fe94 	bl	80042d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80105ac:	4b0f      	ldr	r3, [pc, #60]	; (80105ec <HAL_PCD_MspInit+0xa0>)
 80105ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105b0:	4a0e      	ldr	r2, [pc, #56]	; (80105ec <HAL_PCD_MspInit+0xa0>)
 80105b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105b6:	6353      	str	r3, [r2, #52]	; 0x34
 80105b8:	2300      	movs	r3, #0
 80105ba:	60fb      	str	r3, [r7, #12]
 80105bc:	4b0b      	ldr	r3, [pc, #44]	; (80105ec <HAL_PCD_MspInit+0xa0>)
 80105be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105c0:	4a0a      	ldr	r2, [pc, #40]	; (80105ec <HAL_PCD_MspInit+0xa0>)
 80105c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80105c6:	6453      	str	r3, [r2, #68]	; 0x44
 80105c8:	4b08      	ldr	r3, [pc, #32]	; (80105ec <HAL_PCD_MspInit+0xa0>)
 80105ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80105cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80105d0:	60fb      	str	r3, [r7, #12]
 80105d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80105d4:	2200      	movs	r2, #0
 80105d6:	2100      	movs	r1, #0
 80105d8:	2043      	movs	r0, #67	; 0x43
 80105da:	f7f3 faa8 	bl	8003b2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80105de:	2043      	movs	r0, #67	; 0x43
 80105e0:	f7f3 fac1 	bl	8003b66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80105e4:	bf00      	nop
 80105e6:	3728      	adds	r7, #40	; 0x28
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	40023800 	.word	0x40023800
 80105f0:	40020000 	.word	0x40020000

080105f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b082      	sub	sp, #8
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010608:	4619      	mov	r1, r3
 801060a:	4610      	mov	r0, r2
 801060c:	f7fc fbae 	bl	800cd6c <USBD_LL_SetupStage>
}
 8010610:	bf00      	nop
 8010612:	3708      	adds	r7, #8
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}

08010618 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	460b      	mov	r3, r1
 8010622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801062a:	78fa      	ldrb	r2, [r7, #3]
 801062c:	6879      	ldr	r1, [r7, #4]
 801062e:	4613      	mov	r3, r2
 8010630:	00db      	lsls	r3, r3, #3
 8010632:	1a9b      	subs	r3, r3, r2
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	440b      	add	r3, r1
 8010638:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	78fb      	ldrb	r3, [r7, #3]
 8010640:	4619      	mov	r1, r3
 8010642:	f7fc fbde 	bl	800ce02 <USBD_LL_DataOutStage>
}
 8010646:	bf00      	nop
 8010648:	3708      	adds	r7, #8
 801064a:	46bd      	mov	sp, r7
 801064c:	bd80      	pop	{r7, pc}

0801064e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801064e:	b580      	push	{r7, lr}
 8010650:	b082      	sub	sp, #8
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
 8010656:	460b      	mov	r3, r1
 8010658:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010660:	78fa      	ldrb	r2, [r7, #3]
 8010662:	6879      	ldr	r1, [r7, #4]
 8010664:	4613      	mov	r3, r2
 8010666:	00db      	lsls	r3, r3, #3
 8010668:	1a9b      	subs	r3, r3, r2
 801066a:	009b      	lsls	r3, r3, #2
 801066c:	440b      	add	r3, r1
 801066e:	3348      	adds	r3, #72	; 0x48
 8010670:	681a      	ldr	r2, [r3, #0]
 8010672:	78fb      	ldrb	r3, [r7, #3]
 8010674:	4619      	mov	r1, r3
 8010676:	f7fc fc35 	bl	800cee4 <USBD_LL_DataInStage>
}
 801067a:	bf00      	nop
 801067c:	3708      	adds	r7, #8
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b082      	sub	sp, #8
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010690:	4618      	mov	r0, r3
 8010692:	f7fc fd43 	bl	800d11c <USBD_LL_SOF>
}
 8010696:	bf00      	nop
 8010698:	3708      	adds	r7, #8
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801069e:	b580      	push	{r7, lr}
 80106a0:	b084      	sub	sp, #16
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80106a6:	2301      	movs	r3, #1
 80106a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d102      	bne.n	80106b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80106b2:	2300      	movs	r3, #0
 80106b4:	73fb      	strb	r3, [r7, #15]
 80106b6:	e008      	b.n	80106ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	68db      	ldr	r3, [r3, #12]
 80106bc:	2b02      	cmp	r3, #2
 80106be:	d102      	bne.n	80106c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80106c0:	2301      	movs	r3, #1
 80106c2:	73fb      	strb	r3, [r7, #15]
 80106c4:	e001      	b.n	80106ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80106c6:	f7f2 fd35 	bl	8003134 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80106d0:	7bfa      	ldrb	r2, [r7, #15]
 80106d2:	4611      	mov	r1, r2
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fc fceb 	bl	800d0b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7fc fca4 	bl	800d02e <USBD_LL_Reset>
}
 80106e6:	bf00      	nop
 80106e8:	3710      	adds	r7, #16
 80106ea:	46bd      	mov	sp, r7
 80106ec:	bd80      	pop	{r7, pc}
	...

080106f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80106fe:	4618      	mov	r0, r3
 8010700:	f7fc fce6 	bl	800d0d0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	6812      	ldr	r2, [r2, #0]
 8010712:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010716:	f043 0301 	orr.w	r3, r3, #1
 801071a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6a1b      	ldr	r3, [r3, #32]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d005      	beq.n	8010730 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010724:	4b04      	ldr	r3, [pc, #16]	; (8010738 <HAL_PCD_SuspendCallback+0x48>)
 8010726:	691b      	ldr	r3, [r3, #16]
 8010728:	4a03      	ldr	r2, [pc, #12]	; (8010738 <HAL_PCD_SuspendCallback+0x48>)
 801072a:	f043 0306 	orr.w	r3, r3, #6
 801072e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010730:	bf00      	nop
 8010732:	3708      	adds	r7, #8
 8010734:	46bd      	mov	sp, r7
 8010736:	bd80      	pop	{r7, pc}
 8010738:	e000ed00 	.word	0xe000ed00

0801073c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b082      	sub	sp, #8
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801074a:	4618      	mov	r0, r3
 801074c:	f7fc fcd5 	bl	800d0fa <USBD_LL_Resume>
}
 8010750:	bf00      	nop
 8010752:	3708      	adds	r7, #8
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	460b      	mov	r3, r1
 8010762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801076a:	78fa      	ldrb	r2, [r7, #3]
 801076c:	4611      	mov	r1, r2
 801076e:	4618      	mov	r0, r3
 8010770:	f7fc fcfb 	bl	800d16a <USBD_LL_IsoOUTIncomplete>
}
 8010774:	bf00      	nop
 8010776:	3708      	adds	r7, #8
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}

0801077c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	460b      	mov	r3, r1
 8010786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801078e:	78fa      	ldrb	r2, [r7, #3]
 8010790:	4611      	mov	r1, r2
 8010792:	4618      	mov	r0, r3
 8010794:	f7fc fcdc 	bl	800d150 <USBD_LL_IsoINIncomplete>
}
 8010798:	bf00      	nop
 801079a:	3708      	adds	r7, #8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}

080107a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80107ae:	4618      	mov	r0, r3
 80107b0:	f7fc fce8 	bl	800d184 <USBD_LL_DevConnected>
}
 80107b4:	bf00      	nop
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}

080107bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b082      	sub	sp, #8
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7fc fce5 	bl	800d19a <USBD_LL_DevDisconnected>
}
 80107d0:	bf00      	nop
 80107d2:	3708      	adds	r7, #8
 80107d4:	46bd      	mov	sp, r7
 80107d6:	bd80      	pop	{r7, pc}

080107d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b082      	sub	sp, #8
 80107dc:	af00      	add	r7, sp, #0
 80107de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d13c      	bne.n	8010862 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80107e8:	4a20      	ldr	r2, [pc, #128]	; (801086c <USBD_LL_Init+0x94>)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	4a1e      	ldr	r2, [pc, #120]	; (801086c <USBD_LL_Init+0x94>)
 80107f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80107f8:	4b1c      	ldr	r3, [pc, #112]	; (801086c <USBD_LL_Init+0x94>)
 80107fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80107fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8010800:	4b1a      	ldr	r3, [pc, #104]	; (801086c <USBD_LL_Init+0x94>)
 8010802:	2204      	movs	r2, #4
 8010804:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010806:	4b19      	ldr	r3, [pc, #100]	; (801086c <USBD_LL_Init+0x94>)
 8010808:	2202      	movs	r2, #2
 801080a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801080c:	4b17      	ldr	r3, [pc, #92]	; (801086c <USBD_LL_Init+0x94>)
 801080e:	2200      	movs	r2, #0
 8010810:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010812:	4b16      	ldr	r3, [pc, #88]	; (801086c <USBD_LL_Init+0x94>)
 8010814:	2202      	movs	r2, #2
 8010816:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010818:	4b14      	ldr	r3, [pc, #80]	; (801086c <USBD_LL_Init+0x94>)
 801081a:	2200      	movs	r2, #0
 801081c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801081e:	4b13      	ldr	r3, [pc, #76]	; (801086c <USBD_LL_Init+0x94>)
 8010820:	2200      	movs	r2, #0
 8010822:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010824:	4b11      	ldr	r3, [pc, #68]	; (801086c <USBD_LL_Init+0x94>)
 8010826:	2200      	movs	r2, #0
 8010828:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801082a:	4b10      	ldr	r3, [pc, #64]	; (801086c <USBD_LL_Init+0x94>)
 801082c:	2200      	movs	r2, #0
 801082e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010830:	4b0e      	ldr	r3, [pc, #56]	; (801086c <USBD_LL_Init+0x94>)
 8010832:	2200      	movs	r2, #0
 8010834:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010836:	480d      	ldr	r0, [pc, #52]	; (801086c <USBD_LL_Init+0x94>)
 8010838:	f7f4 f868 	bl	800490c <HAL_PCD_Init>
 801083c:	4603      	mov	r3, r0
 801083e:	2b00      	cmp	r3, #0
 8010840:	d001      	beq.n	8010846 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8010842:	f7f2 fc77 	bl	8003134 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010846:	2180      	movs	r1, #128	; 0x80
 8010848:	4808      	ldr	r0, [pc, #32]	; (801086c <USBD_LL_Init+0x94>)
 801084a:	f7f5 f9cc 	bl	8005be6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801084e:	2240      	movs	r2, #64	; 0x40
 8010850:	2100      	movs	r1, #0
 8010852:	4806      	ldr	r0, [pc, #24]	; (801086c <USBD_LL_Init+0x94>)
 8010854:	f7f5 f980 	bl	8005b58 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8010858:	2280      	movs	r2, #128	; 0x80
 801085a:	2101      	movs	r1, #1
 801085c:	4803      	ldr	r0, [pc, #12]	; (801086c <USBD_LL_Init+0x94>)
 801085e:	f7f5 f97b 	bl	8005b58 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010862:	2300      	movs	r3, #0
}
 8010864:	4618      	mov	r0, r3
 8010866:	3708      	adds	r7, #8
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}
 801086c:	200028a8 	.word	0x200028a8

08010870 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b084      	sub	sp, #16
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010878:	2300      	movs	r3, #0
 801087a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801087c:	2300      	movs	r3, #0
 801087e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010886:	4618      	mov	r0, r3
 8010888:	f7f4 f95d 	bl	8004b46 <HAL_PCD_Start>
 801088c:	4603      	mov	r3, r0
 801088e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8010890:	7bfb      	ldrb	r3, [r7, #15]
 8010892:	4618      	mov	r0, r3
 8010894:	f000 f92e 	bl	8010af4 <USBD_Get_USB_Status>
 8010898:	4603      	mov	r3, r0
 801089a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801089c:	7bbb      	ldrb	r3, [r7, #14]
}
 801089e:	4618      	mov	r0, r3
 80108a0:	3710      	adds	r7, #16
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bd80      	pop	{r7, pc}

080108a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80108a6:	b580      	push	{r7, lr}
 80108a8:	b084      	sub	sp, #16
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
 80108ae:	4608      	mov	r0, r1
 80108b0:	4611      	mov	r1, r2
 80108b2:	461a      	mov	r2, r3
 80108b4:	4603      	mov	r3, r0
 80108b6:	70fb      	strb	r3, [r7, #3]
 80108b8:	460b      	mov	r3, r1
 80108ba:	70bb      	strb	r3, [r7, #2]
 80108bc:	4613      	mov	r3, r2
 80108be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108c0:	2300      	movs	r3, #0
 80108c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80108c4:	2300      	movs	r3, #0
 80108c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80108ce:	78bb      	ldrb	r3, [r7, #2]
 80108d0:	883a      	ldrh	r2, [r7, #0]
 80108d2:	78f9      	ldrb	r1, [r7, #3]
 80108d4:	f7f4 fd32 	bl	800533c <HAL_PCD_EP_Open>
 80108d8:	4603      	mov	r3, r0
 80108da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
 80108de:	4618      	mov	r0, r3
 80108e0:	f000 f908 	bl	8010af4 <USBD_Get_USB_Status>
 80108e4:	4603      	mov	r3, r0
 80108e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80108e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	3710      	adds	r7, #16
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}

080108f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80108f2:	b580      	push	{r7, lr}
 80108f4:	b084      	sub	sp, #16
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
 80108fa:	460b      	mov	r3, r1
 80108fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80108fe:	2300      	movs	r3, #0
 8010900:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010902:	2300      	movs	r3, #0
 8010904:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801090c:	78fa      	ldrb	r2, [r7, #3]
 801090e:	4611      	mov	r1, r2
 8010910:	4618      	mov	r0, r3
 8010912:	f7f4 fd7b 	bl	800540c <HAL_PCD_EP_Close>
 8010916:	4603      	mov	r3, r0
 8010918:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801091a:	7bfb      	ldrb	r3, [r7, #15]
 801091c:	4618      	mov	r0, r3
 801091e:	f000 f8e9 	bl	8010af4 <USBD_Get_USB_Status>
 8010922:	4603      	mov	r3, r0
 8010924:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8010926:	7bbb      	ldrb	r3, [r7, #14]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3710      	adds	r7, #16
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	460b      	mov	r3, r1
 801093a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801093c:	2300      	movs	r3, #0
 801093e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010940:	2300      	movs	r3, #0
 8010942:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801094a:	78fa      	ldrb	r2, [r7, #3]
 801094c:	4611      	mov	r1, r2
 801094e:	4618      	mov	r0, r3
 8010950:	f7f4 fe53 	bl	80055fa <HAL_PCD_EP_SetStall>
 8010954:	4603      	mov	r3, r0
 8010956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010958:	7bfb      	ldrb	r3, [r7, #15]
 801095a:	4618      	mov	r0, r3
 801095c:	f000 f8ca 	bl	8010af4 <USBD_Get_USB_Status>
 8010960:	4603      	mov	r3, r0
 8010962:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8010964:	7bbb      	ldrb	r3, [r7, #14]
}
 8010966:	4618      	mov	r0, r3
 8010968:	3710      	adds	r7, #16
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b084      	sub	sp, #16
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
 8010976:	460b      	mov	r3, r1
 8010978:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801097a:	2300      	movs	r3, #0
 801097c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801097e:	2300      	movs	r3, #0
 8010980:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010988:	78fa      	ldrb	r2, [r7, #3]
 801098a:	4611      	mov	r1, r2
 801098c:	4618      	mov	r0, r3
 801098e:	f7f4 fe98 	bl	80056c2 <HAL_PCD_EP_ClrStall>
 8010992:	4603      	mov	r3, r0
 8010994:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8010996:	7bfb      	ldrb	r3, [r7, #15]
 8010998:	4618      	mov	r0, r3
 801099a:	f000 f8ab 	bl	8010af4 <USBD_Get_USB_Status>
 801099e:	4603      	mov	r3, r0
 80109a0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80109a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	3710      	adds	r7, #16
 80109a8:	46bd      	mov	sp, r7
 80109aa:	bd80      	pop	{r7, pc}

080109ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b085      	sub	sp, #20
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	460b      	mov	r3, r1
 80109b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80109be:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80109c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	da0b      	bge.n	80109e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80109c8:	78fb      	ldrb	r3, [r7, #3]
 80109ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80109ce:	68f9      	ldr	r1, [r7, #12]
 80109d0:	4613      	mov	r3, r2
 80109d2:	00db      	lsls	r3, r3, #3
 80109d4:	1a9b      	subs	r3, r3, r2
 80109d6:	009b      	lsls	r3, r3, #2
 80109d8:	440b      	add	r3, r1
 80109da:	333e      	adds	r3, #62	; 0x3e
 80109dc:	781b      	ldrb	r3, [r3, #0]
 80109de:	e00b      	b.n	80109f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80109e0:	78fb      	ldrb	r3, [r7, #3]
 80109e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80109e6:	68f9      	ldr	r1, [r7, #12]
 80109e8:	4613      	mov	r3, r2
 80109ea:	00db      	lsls	r3, r3, #3
 80109ec:	1a9b      	subs	r3, r3, r2
 80109ee:	009b      	lsls	r3, r3, #2
 80109f0:	440b      	add	r3, r1
 80109f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80109f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3714      	adds	r7, #20
 80109fc:	46bd      	mov	sp, r7
 80109fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a02:	4770      	bx	lr

08010a04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b084      	sub	sp, #16
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	460b      	mov	r3, r1
 8010a0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a10:	2300      	movs	r3, #0
 8010a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a14:	2300      	movs	r3, #0
 8010a16:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010a1e:	78fa      	ldrb	r2, [r7, #3]
 8010a20:	4611      	mov	r1, r2
 8010a22:	4618      	mov	r0, r3
 8010a24:	f7f4 fc65 	bl	80052f2 <HAL_PCD_SetAddress>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a2c:	7bfb      	ldrb	r3, [r7, #15]
 8010a2e:	4618      	mov	r0, r3
 8010a30:	f000 f860 	bl	8010af4 <USBD_Get_USB_Status>
 8010a34:	4603      	mov	r3, r0
 8010a36:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8010a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3710      	adds	r7, #16
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}

08010a42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010a42:	b580      	push	{r7, lr}
 8010a44:	b086      	sub	sp, #24
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	60f8      	str	r0, [r7, #12]
 8010a4a:	607a      	str	r2, [r7, #4]
 8010a4c:	461a      	mov	r2, r3
 8010a4e:	460b      	mov	r3, r1
 8010a50:	72fb      	strb	r3, [r7, #11]
 8010a52:	4613      	mov	r3, r2
 8010a54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a56:	2300      	movs	r3, #0
 8010a58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010a64:	893b      	ldrh	r3, [r7, #8]
 8010a66:	7af9      	ldrb	r1, [r7, #11]
 8010a68:	687a      	ldr	r2, [r7, #4]
 8010a6a:	f7f4 fd7c 	bl	8005566 <HAL_PCD_EP_Transmit>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8010a72:	7dfb      	ldrb	r3, [r7, #23]
 8010a74:	4618      	mov	r0, r3
 8010a76:	f000 f83d 	bl	8010af4 <USBD_Get_USB_Status>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8010a7e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3718      	adds	r7, #24
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b086      	sub	sp, #24
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	60f8      	str	r0, [r7, #12]
 8010a90:	607a      	str	r2, [r7, #4]
 8010a92:	461a      	mov	r2, r3
 8010a94:	460b      	mov	r3, r1
 8010a96:	72fb      	strb	r3, [r7, #11]
 8010a98:	4613      	mov	r3, r2
 8010a9a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8010aaa:	893b      	ldrh	r3, [r7, #8]
 8010aac:	7af9      	ldrb	r1, [r7, #11]
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	f7f4 fcf6 	bl	80054a0 <HAL_PCD_EP_Receive>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8010ab8:	7dfb      	ldrb	r3, [r7, #23]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f000 f81a 	bl	8010af4 <USBD_Get_USB_Status>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8010ac4:	7dbb      	ldrb	r3, [r7, #22]
}
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	3718      	adds	r7, #24
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}

08010ace <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b082      	sub	sp, #8
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
 8010ad6:	460b      	mov	r3, r1
 8010ad8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8010ae0:	78fa      	ldrb	r2, [r7, #3]
 8010ae2:	4611      	mov	r1, r2
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7f4 fd26 	bl	8005536 <HAL_PCD_EP_GetRxCount>
 8010aea:	4603      	mov	r3, r0
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3708      	adds	r7, #8
 8010af0:	46bd      	mov	sp, r7
 8010af2:	bd80      	pop	{r7, pc}

08010af4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	4603      	mov	r3, r0
 8010afc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010afe:	2300      	movs	r3, #0
 8010b00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010b02:	79fb      	ldrb	r3, [r7, #7]
 8010b04:	2b03      	cmp	r3, #3
 8010b06:	d817      	bhi.n	8010b38 <USBD_Get_USB_Status+0x44>
 8010b08:	a201      	add	r2, pc, #4	; (adr r2, 8010b10 <USBD_Get_USB_Status+0x1c>)
 8010b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b0e:	bf00      	nop
 8010b10:	08010b21 	.word	0x08010b21
 8010b14:	08010b27 	.word	0x08010b27
 8010b18:	08010b2d 	.word	0x08010b2d
 8010b1c:	08010b33 	.word	0x08010b33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010b20:	2300      	movs	r3, #0
 8010b22:	73fb      	strb	r3, [r7, #15]
    break;
 8010b24:	e00b      	b.n	8010b3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010b26:	2302      	movs	r3, #2
 8010b28:	73fb      	strb	r3, [r7, #15]
    break;
 8010b2a:	e008      	b.n	8010b3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010b2c:	2301      	movs	r3, #1
 8010b2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010b30:	e005      	b.n	8010b3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010b32:	2302      	movs	r3, #2
 8010b34:	73fb      	strb	r3, [r7, #15]
    break;
 8010b36:	e002      	b.n	8010b3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010b38:	2302      	movs	r3, #2
 8010b3a:	73fb      	strb	r3, [r7, #15]
    break;
 8010b3c:	bf00      	nop
  }
  return usb_status;
 8010b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	3714      	adds	r7, #20
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <__libc_init_array>:
 8010b4c:	b570      	push	{r4, r5, r6, lr}
 8010b4e:	4e0d      	ldr	r6, [pc, #52]	; (8010b84 <__libc_init_array+0x38>)
 8010b50:	4c0d      	ldr	r4, [pc, #52]	; (8010b88 <__libc_init_array+0x3c>)
 8010b52:	1ba4      	subs	r4, r4, r6
 8010b54:	10a4      	asrs	r4, r4, #2
 8010b56:	2500      	movs	r5, #0
 8010b58:	42a5      	cmp	r5, r4
 8010b5a:	d109      	bne.n	8010b70 <__libc_init_array+0x24>
 8010b5c:	4e0b      	ldr	r6, [pc, #44]	; (8010b8c <__libc_init_array+0x40>)
 8010b5e:	4c0c      	ldr	r4, [pc, #48]	; (8010b90 <__libc_init_array+0x44>)
 8010b60:	f003 fd70 	bl	8014644 <_init>
 8010b64:	1ba4      	subs	r4, r4, r6
 8010b66:	10a4      	asrs	r4, r4, #2
 8010b68:	2500      	movs	r5, #0
 8010b6a:	42a5      	cmp	r5, r4
 8010b6c:	d105      	bne.n	8010b7a <__libc_init_array+0x2e>
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}
 8010b70:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010b74:	4798      	blx	r3
 8010b76:	3501      	adds	r5, #1
 8010b78:	e7ee      	b.n	8010b58 <__libc_init_array+0xc>
 8010b7a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010b7e:	4798      	blx	r3
 8010b80:	3501      	adds	r5, #1
 8010b82:	e7f2      	b.n	8010b6a <__libc_init_array+0x1e>
 8010b84:	08015268 	.word	0x08015268
 8010b88:	08015268 	.word	0x08015268
 8010b8c:	08015268 	.word	0x08015268
 8010b90:	0801526c 	.word	0x0801526c

08010b94 <malloc>:
 8010b94:	4b02      	ldr	r3, [pc, #8]	; (8010ba0 <malloc+0xc>)
 8010b96:	4601      	mov	r1, r0
 8010b98:	6818      	ldr	r0, [r3, #0]
 8010b9a:	f000 b86d 	b.w	8010c78 <_malloc_r>
 8010b9e:	bf00      	nop
 8010ba0:	20000190 	.word	0x20000190

08010ba4 <free>:
 8010ba4:	4b02      	ldr	r3, [pc, #8]	; (8010bb0 <free+0xc>)
 8010ba6:	4601      	mov	r1, r0
 8010ba8:	6818      	ldr	r0, [r3, #0]
 8010baa:	f000 b817 	b.w	8010bdc <_free_r>
 8010bae:	bf00      	nop
 8010bb0:	20000190 	.word	0x20000190

08010bb4 <memcpy>:
 8010bb4:	b510      	push	{r4, lr}
 8010bb6:	1e43      	subs	r3, r0, #1
 8010bb8:	440a      	add	r2, r1
 8010bba:	4291      	cmp	r1, r2
 8010bbc:	d100      	bne.n	8010bc0 <memcpy+0xc>
 8010bbe:	bd10      	pop	{r4, pc}
 8010bc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010bc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010bc8:	e7f7      	b.n	8010bba <memcpy+0x6>

08010bca <memset>:
 8010bca:	4402      	add	r2, r0
 8010bcc:	4603      	mov	r3, r0
 8010bce:	4293      	cmp	r3, r2
 8010bd0:	d100      	bne.n	8010bd4 <memset+0xa>
 8010bd2:	4770      	bx	lr
 8010bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8010bd8:	e7f9      	b.n	8010bce <memset+0x4>
	...

08010bdc <_free_r>:
 8010bdc:	b538      	push	{r3, r4, r5, lr}
 8010bde:	4605      	mov	r5, r0
 8010be0:	2900      	cmp	r1, #0
 8010be2:	d045      	beq.n	8010c70 <_free_r+0x94>
 8010be4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010be8:	1f0c      	subs	r4, r1, #4
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	bfb8      	it	lt
 8010bee:	18e4      	addlt	r4, r4, r3
 8010bf0:	f002 ff52 	bl	8013a98 <__malloc_lock>
 8010bf4:	4a1f      	ldr	r2, [pc, #124]	; (8010c74 <_free_r+0x98>)
 8010bf6:	6813      	ldr	r3, [r2, #0]
 8010bf8:	4610      	mov	r0, r2
 8010bfa:	b933      	cbnz	r3, 8010c0a <_free_r+0x2e>
 8010bfc:	6063      	str	r3, [r4, #4]
 8010bfe:	6014      	str	r4, [r2, #0]
 8010c00:	4628      	mov	r0, r5
 8010c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010c06:	f002 bf48 	b.w	8013a9a <__malloc_unlock>
 8010c0a:	42a3      	cmp	r3, r4
 8010c0c:	d90c      	bls.n	8010c28 <_free_r+0x4c>
 8010c0e:	6821      	ldr	r1, [r4, #0]
 8010c10:	1862      	adds	r2, r4, r1
 8010c12:	4293      	cmp	r3, r2
 8010c14:	bf04      	itt	eq
 8010c16:	681a      	ldreq	r2, [r3, #0]
 8010c18:	685b      	ldreq	r3, [r3, #4]
 8010c1a:	6063      	str	r3, [r4, #4]
 8010c1c:	bf04      	itt	eq
 8010c1e:	1852      	addeq	r2, r2, r1
 8010c20:	6022      	streq	r2, [r4, #0]
 8010c22:	6004      	str	r4, [r0, #0]
 8010c24:	e7ec      	b.n	8010c00 <_free_r+0x24>
 8010c26:	4613      	mov	r3, r2
 8010c28:	685a      	ldr	r2, [r3, #4]
 8010c2a:	b10a      	cbz	r2, 8010c30 <_free_r+0x54>
 8010c2c:	42a2      	cmp	r2, r4
 8010c2e:	d9fa      	bls.n	8010c26 <_free_r+0x4a>
 8010c30:	6819      	ldr	r1, [r3, #0]
 8010c32:	1858      	adds	r0, r3, r1
 8010c34:	42a0      	cmp	r0, r4
 8010c36:	d10b      	bne.n	8010c50 <_free_r+0x74>
 8010c38:	6820      	ldr	r0, [r4, #0]
 8010c3a:	4401      	add	r1, r0
 8010c3c:	1858      	adds	r0, r3, r1
 8010c3e:	4282      	cmp	r2, r0
 8010c40:	6019      	str	r1, [r3, #0]
 8010c42:	d1dd      	bne.n	8010c00 <_free_r+0x24>
 8010c44:	6810      	ldr	r0, [r2, #0]
 8010c46:	6852      	ldr	r2, [r2, #4]
 8010c48:	605a      	str	r2, [r3, #4]
 8010c4a:	4401      	add	r1, r0
 8010c4c:	6019      	str	r1, [r3, #0]
 8010c4e:	e7d7      	b.n	8010c00 <_free_r+0x24>
 8010c50:	d902      	bls.n	8010c58 <_free_r+0x7c>
 8010c52:	230c      	movs	r3, #12
 8010c54:	602b      	str	r3, [r5, #0]
 8010c56:	e7d3      	b.n	8010c00 <_free_r+0x24>
 8010c58:	6820      	ldr	r0, [r4, #0]
 8010c5a:	1821      	adds	r1, r4, r0
 8010c5c:	428a      	cmp	r2, r1
 8010c5e:	bf04      	itt	eq
 8010c60:	6811      	ldreq	r1, [r2, #0]
 8010c62:	6852      	ldreq	r2, [r2, #4]
 8010c64:	6062      	str	r2, [r4, #4]
 8010c66:	bf04      	itt	eq
 8010c68:	1809      	addeq	r1, r1, r0
 8010c6a:	6021      	streq	r1, [r4, #0]
 8010c6c:	605c      	str	r4, [r3, #4]
 8010c6e:	e7c7      	b.n	8010c00 <_free_r+0x24>
 8010c70:	bd38      	pop	{r3, r4, r5, pc}
 8010c72:	bf00      	nop
 8010c74:	200009d8 	.word	0x200009d8

08010c78 <_malloc_r>:
 8010c78:	b570      	push	{r4, r5, r6, lr}
 8010c7a:	1ccd      	adds	r5, r1, #3
 8010c7c:	f025 0503 	bic.w	r5, r5, #3
 8010c80:	3508      	adds	r5, #8
 8010c82:	2d0c      	cmp	r5, #12
 8010c84:	bf38      	it	cc
 8010c86:	250c      	movcc	r5, #12
 8010c88:	2d00      	cmp	r5, #0
 8010c8a:	4606      	mov	r6, r0
 8010c8c:	db01      	blt.n	8010c92 <_malloc_r+0x1a>
 8010c8e:	42a9      	cmp	r1, r5
 8010c90:	d903      	bls.n	8010c9a <_malloc_r+0x22>
 8010c92:	230c      	movs	r3, #12
 8010c94:	6033      	str	r3, [r6, #0]
 8010c96:	2000      	movs	r0, #0
 8010c98:	bd70      	pop	{r4, r5, r6, pc}
 8010c9a:	f002 fefd 	bl	8013a98 <__malloc_lock>
 8010c9e:	4a21      	ldr	r2, [pc, #132]	; (8010d24 <_malloc_r+0xac>)
 8010ca0:	6814      	ldr	r4, [r2, #0]
 8010ca2:	4621      	mov	r1, r4
 8010ca4:	b991      	cbnz	r1, 8010ccc <_malloc_r+0x54>
 8010ca6:	4c20      	ldr	r4, [pc, #128]	; (8010d28 <_malloc_r+0xb0>)
 8010ca8:	6823      	ldr	r3, [r4, #0]
 8010caa:	b91b      	cbnz	r3, 8010cb4 <_malloc_r+0x3c>
 8010cac:	4630      	mov	r0, r6
 8010cae:	f000 fe7b 	bl	80119a8 <_sbrk_r>
 8010cb2:	6020      	str	r0, [r4, #0]
 8010cb4:	4629      	mov	r1, r5
 8010cb6:	4630      	mov	r0, r6
 8010cb8:	f000 fe76 	bl	80119a8 <_sbrk_r>
 8010cbc:	1c43      	adds	r3, r0, #1
 8010cbe:	d124      	bne.n	8010d0a <_malloc_r+0x92>
 8010cc0:	230c      	movs	r3, #12
 8010cc2:	6033      	str	r3, [r6, #0]
 8010cc4:	4630      	mov	r0, r6
 8010cc6:	f002 fee8 	bl	8013a9a <__malloc_unlock>
 8010cca:	e7e4      	b.n	8010c96 <_malloc_r+0x1e>
 8010ccc:	680b      	ldr	r3, [r1, #0]
 8010cce:	1b5b      	subs	r3, r3, r5
 8010cd0:	d418      	bmi.n	8010d04 <_malloc_r+0x8c>
 8010cd2:	2b0b      	cmp	r3, #11
 8010cd4:	d90f      	bls.n	8010cf6 <_malloc_r+0x7e>
 8010cd6:	600b      	str	r3, [r1, #0]
 8010cd8:	50cd      	str	r5, [r1, r3]
 8010cda:	18cc      	adds	r4, r1, r3
 8010cdc:	4630      	mov	r0, r6
 8010cde:	f002 fedc 	bl	8013a9a <__malloc_unlock>
 8010ce2:	f104 000b 	add.w	r0, r4, #11
 8010ce6:	1d23      	adds	r3, r4, #4
 8010ce8:	f020 0007 	bic.w	r0, r0, #7
 8010cec:	1ac3      	subs	r3, r0, r3
 8010cee:	d0d3      	beq.n	8010c98 <_malloc_r+0x20>
 8010cf0:	425a      	negs	r2, r3
 8010cf2:	50e2      	str	r2, [r4, r3]
 8010cf4:	e7d0      	b.n	8010c98 <_malloc_r+0x20>
 8010cf6:	428c      	cmp	r4, r1
 8010cf8:	684b      	ldr	r3, [r1, #4]
 8010cfa:	bf16      	itet	ne
 8010cfc:	6063      	strne	r3, [r4, #4]
 8010cfe:	6013      	streq	r3, [r2, #0]
 8010d00:	460c      	movne	r4, r1
 8010d02:	e7eb      	b.n	8010cdc <_malloc_r+0x64>
 8010d04:	460c      	mov	r4, r1
 8010d06:	6849      	ldr	r1, [r1, #4]
 8010d08:	e7cc      	b.n	8010ca4 <_malloc_r+0x2c>
 8010d0a:	1cc4      	adds	r4, r0, #3
 8010d0c:	f024 0403 	bic.w	r4, r4, #3
 8010d10:	42a0      	cmp	r0, r4
 8010d12:	d005      	beq.n	8010d20 <_malloc_r+0xa8>
 8010d14:	1a21      	subs	r1, r4, r0
 8010d16:	4630      	mov	r0, r6
 8010d18:	f000 fe46 	bl	80119a8 <_sbrk_r>
 8010d1c:	3001      	adds	r0, #1
 8010d1e:	d0cf      	beq.n	8010cc0 <_malloc_r+0x48>
 8010d20:	6025      	str	r5, [r4, #0]
 8010d22:	e7db      	b.n	8010cdc <_malloc_r+0x64>
 8010d24:	200009d8 	.word	0x200009d8
 8010d28:	200009dc 	.word	0x200009dc

08010d2c <__cvt>:
 8010d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d30:	ec55 4b10 	vmov	r4, r5, d0
 8010d34:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010d36:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010d3a:	2d00      	cmp	r5, #0
 8010d3c:	460e      	mov	r6, r1
 8010d3e:	4691      	mov	r9, r2
 8010d40:	4619      	mov	r1, r3
 8010d42:	bfb8      	it	lt
 8010d44:	4622      	movlt	r2, r4
 8010d46:	462b      	mov	r3, r5
 8010d48:	f027 0720 	bic.w	r7, r7, #32
 8010d4c:	bfbb      	ittet	lt
 8010d4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010d52:	461d      	movlt	r5, r3
 8010d54:	2300      	movge	r3, #0
 8010d56:	232d      	movlt	r3, #45	; 0x2d
 8010d58:	bfb8      	it	lt
 8010d5a:	4614      	movlt	r4, r2
 8010d5c:	2f46      	cmp	r7, #70	; 0x46
 8010d5e:	700b      	strb	r3, [r1, #0]
 8010d60:	d004      	beq.n	8010d6c <__cvt+0x40>
 8010d62:	2f45      	cmp	r7, #69	; 0x45
 8010d64:	d100      	bne.n	8010d68 <__cvt+0x3c>
 8010d66:	3601      	adds	r6, #1
 8010d68:	2102      	movs	r1, #2
 8010d6a:	e000      	b.n	8010d6e <__cvt+0x42>
 8010d6c:	2103      	movs	r1, #3
 8010d6e:	ab03      	add	r3, sp, #12
 8010d70:	9301      	str	r3, [sp, #4]
 8010d72:	ab02      	add	r3, sp, #8
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	4632      	mov	r2, r6
 8010d78:	4653      	mov	r3, sl
 8010d7a:	ec45 4b10 	vmov	d0, r4, r5
 8010d7e:	f001 fd87 	bl	8012890 <_dtoa_r>
 8010d82:	2f47      	cmp	r7, #71	; 0x47
 8010d84:	4680      	mov	r8, r0
 8010d86:	d102      	bne.n	8010d8e <__cvt+0x62>
 8010d88:	f019 0f01 	tst.w	r9, #1
 8010d8c:	d026      	beq.n	8010ddc <__cvt+0xb0>
 8010d8e:	2f46      	cmp	r7, #70	; 0x46
 8010d90:	eb08 0906 	add.w	r9, r8, r6
 8010d94:	d111      	bne.n	8010dba <__cvt+0x8e>
 8010d96:	f898 3000 	ldrb.w	r3, [r8]
 8010d9a:	2b30      	cmp	r3, #48	; 0x30
 8010d9c:	d10a      	bne.n	8010db4 <__cvt+0x88>
 8010d9e:	2200      	movs	r2, #0
 8010da0:	2300      	movs	r3, #0
 8010da2:	4620      	mov	r0, r4
 8010da4:	4629      	mov	r1, r5
 8010da6:	f7ef fe8f 	bl	8000ac8 <__aeabi_dcmpeq>
 8010daa:	b918      	cbnz	r0, 8010db4 <__cvt+0x88>
 8010dac:	f1c6 0601 	rsb	r6, r6, #1
 8010db0:	f8ca 6000 	str.w	r6, [sl]
 8010db4:	f8da 3000 	ldr.w	r3, [sl]
 8010db8:	4499      	add	r9, r3
 8010dba:	2200      	movs	r2, #0
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	4629      	mov	r1, r5
 8010dc2:	f7ef fe81 	bl	8000ac8 <__aeabi_dcmpeq>
 8010dc6:	b938      	cbnz	r0, 8010dd8 <__cvt+0xac>
 8010dc8:	2230      	movs	r2, #48	; 0x30
 8010dca:	9b03      	ldr	r3, [sp, #12]
 8010dcc:	454b      	cmp	r3, r9
 8010dce:	d205      	bcs.n	8010ddc <__cvt+0xb0>
 8010dd0:	1c59      	adds	r1, r3, #1
 8010dd2:	9103      	str	r1, [sp, #12]
 8010dd4:	701a      	strb	r2, [r3, #0]
 8010dd6:	e7f8      	b.n	8010dca <__cvt+0x9e>
 8010dd8:	f8cd 900c 	str.w	r9, [sp, #12]
 8010ddc:	9b03      	ldr	r3, [sp, #12]
 8010dde:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010de0:	eba3 0308 	sub.w	r3, r3, r8
 8010de4:	4640      	mov	r0, r8
 8010de6:	6013      	str	r3, [r2, #0]
 8010de8:	b004      	add	sp, #16
 8010dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010dee <__exponent>:
 8010dee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010df0:	2900      	cmp	r1, #0
 8010df2:	4604      	mov	r4, r0
 8010df4:	bfba      	itte	lt
 8010df6:	4249      	neglt	r1, r1
 8010df8:	232d      	movlt	r3, #45	; 0x2d
 8010dfa:	232b      	movge	r3, #43	; 0x2b
 8010dfc:	2909      	cmp	r1, #9
 8010dfe:	f804 2b02 	strb.w	r2, [r4], #2
 8010e02:	7043      	strb	r3, [r0, #1]
 8010e04:	dd20      	ble.n	8010e48 <__exponent+0x5a>
 8010e06:	f10d 0307 	add.w	r3, sp, #7
 8010e0a:	461f      	mov	r7, r3
 8010e0c:	260a      	movs	r6, #10
 8010e0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8010e12:	fb06 1115 	mls	r1, r6, r5, r1
 8010e16:	3130      	adds	r1, #48	; 0x30
 8010e18:	2d09      	cmp	r5, #9
 8010e1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010e1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8010e22:	4629      	mov	r1, r5
 8010e24:	dc09      	bgt.n	8010e3a <__exponent+0x4c>
 8010e26:	3130      	adds	r1, #48	; 0x30
 8010e28:	3b02      	subs	r3, #2
 8010e2a:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010e2e:	42bb      	cmp	r3, r7
 8010e30:	4622      	mov	r2, r4
 8010e32:	d304      	bcc.n	8010e3e <__exponent+0x50>
 8010e34:	1a10      	subs	r0, r2, r0
 8010e36:	b003      	add	sp, #12
 8010e38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	e7e7      	b.n	8010e0e <__exponent+0x20>
 8010e3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e42:	f804 2b01 	strb.w	r2, [r4], #1
 8010e46:	e7f2      	b.n	8010e2e <__exponent+0x40>
 8010e48:	2330      	movs	r3, #48	; 0x30
 8010e4a:	4419      	add	r1, r3
 8010e4c:	7083      	strb	r3, [r0, #2]
 8010e4e:	1d02      	adds	r2, r0, #4
 8010e50:	70c1      	strb	r1, [r0, #3]
 8010e52:	e7ef      	b.n	8010e34 <__exponent+0x46>

08010e54 <_printf_float>:
 8010e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e58:	b08d      	sub	sp, #52	; 0x34
 8010e5a:	460c      	mov	r4, r1
 8010e5c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010e60:	4616      	mov	r6, r2
 8010e62:	461f      	mov	r7, r3
 8010e64:	4605      	mov	r5, r0
 8010e66:	f002 fdf7 	bl	8013a58 <_localeconv_r>
 8010e6a:	6803      	ldr	r3, [r0, #0]
 8010e6c:	9304      	str	r3, [sp, #16]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f7ef f9ae 	bl	80001d0 <strlen>
 8010e74:	2300      	movs	r3, #0
 8010e76:	930a      	str	r3, [sp, #40]	; 0x28
 8010e78:	f8d8 3000 	ldr.w	r3, [r8]
 8010e7c:	9005      	str	r0, [sp, #20]
 8010e7e:	3307      	adds	r3, #7
 8010e80:	f023 0307 	bic.w	r3, r3, #7
 8010e84:	f103 0208 	add.w	r2, r3, #8
 8010e88:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010e8c:	f8d4 b000 	ldr.w	fp, [r4]
 8010e90:	f8c8 2000 	str.w	r2, [r8]
 8010e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e98:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010e9c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010ea0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010ea4:	9307      	str	r3, [sp, #28]
 8010ea6:	f8cd 8018 	str.w	r8, [sp, #24]
 8010eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8010eae:	4ba7      	ldr	r3, [pc, #668]	; (801114c <_printf_float+0x2f8>)
 8010eb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010eb4:	f7ef fe3a 	bl	8000b2c <__aeabi_dcmpun>
 8010eb8:	bb70      	cbnz	r0, 8010f18 <_printf_float+0xc4>
 8010eba:	f04f 32ff 	mov.w	r2, #4294967295
 8010ebe:	4ba3      	ldr	r3, [pc, #652]	; (801114c <_printf_float+0x2f8>)
 8010ec0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010ec4:	f7ef fe14 	bl	8000af0 <__aeabi_dcmple>
 8010ec8:	bb30      	cbnz	r0, 8010f18 <_printf_float+0xc4>
 8010eca:	2200      	movs	r2, #0
 8010ecc:	2300      	movs	r3, #0
 8010ece:	4640      	mov	r0, r8
 8010ed0:	4649      	mov	r1, r9
 8010ed2:	f7ef fe03 	bl	8000adc <__aeabi_dcmplt>
 8010ed6:	b110      	cbz	r0, 8010ede <_printf_float+0x8a>
 8010ed8:	232d      	movs	r3, #45	; 0x2d
 8010eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ede:	4a9c      	ldr	r2, [pc, #624]	; (8011150 <_printf_float+0x2fc>)
 8010ee0:	4b9c      	ldr	r3, [pc, #624]	; (8011154 <_printf_float+0x300>)
 8010ee2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010ee6:	bf8c      	ite	hi
 8010ee8:	4690      	movhi	r8, r2
 8010eea:	4698      	movls	r8, r3
 8010eec:	2303      	movs	r3, #3
 8010eee:	f02b 0204 	bic.w	r2, fp, #4
 8010ef2:	6123      	str	r3, [r4, #16]
 8010ef4:	6022      	str	r2, [r4, #0]
 8010ef6:	f04f 0900 	mov.w	r9, #0
 8010efa:	9700      	str	r7, [sp, #0]
 8010efc:	4633      	mov	r3, r6
 8010efe:	aa0b      	add	r2, sp, #44	; 0x2c
 8010f00:	4621      	mov	r1, r4
 8010f02:	4628      	mov	r0, r5
 8010f04:	f000 f9e6 	bl	80112d4 <_printf_common>
 8010f08:	3001      	adds	r0, #1
 8010f0a:	f040 808d 	bne.w	8011028 <_printf_float+0x1d4>
 8010f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f12:	b00d      	add	sp, #52	; 0x34
 8010f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f18:	4642      	mov	r2, r8
 8010f1a:	464b      	mov	r3, r9
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	4649      	mov	r1, r9
 8010f20:	f7ef fe04 	bl	8000b2c <__aeabi_dcmpun>
 8010f24:	b110      	cbz	r0, 8010f2c <_printf_float+0xd8>
 8010f26:	4a8c      	ldr	r2, [pc, #560]	; (8011158 <_printf_float+0x304>)
 8010f28:	4b8c      	ldr	r3, [pc, #560]	; (801115c <_printf_float+0x308>)
 8010f2a:	e7da      	b.n	8010ee2 <_printf_float+0x8e>
 8010f2c:	6861      	ldr	r1, [r4, #4]
 8010f2e:	1c4b      	adds	r3, r1, #1
 8010f30:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010f34:	a80a      	add	r0, sp, #40	; 0x28
 8010f36:	d13e      	bne.n	8010fb6 <_printf_float+0x162>
 8010f38:	2306      	movs	r3, #6
 8010f3a:	6063      	str	r3, [r4, #4]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010f42:	ab09      	add	r3, sp, #36	; 0x24
 8010f44:	9300      	str	r3, [sp, #0]
 8010f46:	ec49 8b10 	vmov	d0, r8, r9
 8010f4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010f4e:	6022      	str	r2, [r4, #0]
 8010f50:	f8cd a004 	str.w	sl, [sp, #4]
 8010f54:	6861      	ldr	r1, [r4, #4]
 8010f56:	4628      	mov	r0, r5
 8010f58:	f7ff fee8 	bl	8010d2c <__cvt>
 8010f5c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010f60:	2b47      	cmp	r3, #71	; 0x47
 8010f62:	4680      	mov	r8, r0
 8010f64:	d109      	bne.n	8010f7a <_printf_float+0x126>
 8010f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f68:	1cd8      	adds	r0, r3, #3
 8010f6a:	db02      	blt.n	8010f72 <_printf_float+0x11e>
 8010f6c:	6862      	ldr	r2, [r4, #4]
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	dd47      	ble.n	8011002 <_printf_float+0x1ae>
 8010f72:	f1aa 0a02 	sub.w	sl, sl, #2
 8010f76:	fa5f fa8a 	uxtb.w	sl, sl
 8010f7a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010f7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f80:	d824      	bhi.n	8010fcc <_printf_float+0x178>
 8010f82:	3901      	subs	r1, #1
 8010f84:	4652      	mov	r2, sl
 8010f86:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010f8a:	9109      	str	r1, [sp, #36]	; 0x24
 8010f8c:	f7ff ff2f 	bl	8010dee <__exponent>
 8010f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f92:	1813      	adds	r3, r2, r0
 8010f94:	2a01      	cmp	r2, #1
 8010f96:	4681      	mov	r9, r0
 8010f98:	6123      	str	r3, [r4, #16]
 8010f9a:	dc02      	bgt.n	8010fa2 <_printf_float+0x14e>
 8010f9c:	6822      	ldr	r2, [r4, #0]
 8010f9e:	07d1      	lsls	r1, r2, #31
 8010fa0:	d501      	bpl.n	8010fa6 <_printf_float+0x152>
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	6123      	str	r3, [r4, #16]
 8010fa6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d0a5      	beq.n	8010efa <_printf_float+0xa6>
 8010fae:	232d      	movs	r3, #45	; 0x2d
 8010fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fb4:	e7a1      	b.n	8010efa <_printf_float+0xa6>
 8010fb6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010fba:	f000 8177 	beq.w	80112ac <_printf_float+0x458>
 8010fbe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010fc2:	d1bb      	bne.n	8010f3c <_printf_float+0xe8>
 8010fc4:	2900      	cmp	r1, #0
 8010fc6:	d1b9      	bne.n	8010f3c <_printf_float+0xe8>
 8010fc8:	2301      	movs	r3, #1
 8010fca:	e7b6      	b.n	8010f3a <_printf_float+0xe6>
 8010fcc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010fd0:	d119      	bne.n	8011006 <_printf_float+0x1b2>
 8010fd2:	2900      	cmp	r1, #0
 8010fd4:	6863      	ldr	r3, [r4, #4]
 8010fd6:	dd0c      	ble.n	8010ff2 <_printf_float+0x19e>
 8010fd8:	6121      	str	r1, [r4, #16]
 8010fda:	b913      	cbnz	r3, 8010fe2 <_printf_float+0x18e>
 8010fdc:	6822      	ldr	r2, [r4, #0]
 8010fde:	07d2      	lsls	r2, r2, #31
 8010fe0:	d502      	bpl.n	8010fe8 <_printf_float+0x194>
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	440b      	add	r3, r1
 8010fe6:	6123      	str	r3, [r4, #16]
 8010fe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fea:	65a3      	str	r3, [r4, #88]	; 0x58
 8010fec:	f04f 0900 	mov.w	r9, #0
 8010ff0:	e7d9      	b.n	8010fa6 <_printf_float+0x152>
 8010ff2:	b913      	cbnz	r3, 8010ffa <_printf_float+0x1a6>
 8010ff4:	6822      	ldr	r2, [r4, #0]
 8010ff6:	07d0      	lsls	r0, r2, #31
 8010ff8:	d501      	bpl.n	8010ffe <_printf_float+0x1aa>
 8010ffa:	3302      	adds	r3, #2
 8010ffc:	e7f3      	b.n	8010fe6 <_printf_float+0x192>
 8010ffe:	2301      	movs	r3, #1
 8011000:	e7f1      	b.n	8010fe6 <_printf_float+0x192>
 8011002:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011006:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801100a:	4293      	cmp	r3, r2
 801100c:	db05      	blt.n	801101a <_printf_float+0x1c6>
 801100e:	6822      	ldr	r2, [r4, #0]
 8011010:	6123      	str	r3, [r4, #16]
 8011012:	07d1      	lsls	r1, r2, #31
 8011014:	d5e8      	bpl.n	8010fe8 <_printf_float+0x194>
 8011016:	3301      	adds	r3, #1
 8011018:	e7e5      	b.n	8010fe6 <_printf_float+0x192>
 801101a:	2b00      	cmp	r3, #0
 801101c:	bfd4      	ite	le
 801101e:	f1c3 0302 	rsble	r3, r3, #2
 8011022:	2301      	movgt	r3, #1
 8011024:	4413      	add	r3, r2
 8011026:	e7de      	b.n	8010fe6 <_printf_float+0x192>
 8011028:	6823      	ldr	r3, [r4, #0]
 801102a:	055a      	lsls	r2, r3, #21
 801102c:	d407      	bmi.n	801103e <_printf_float+0x1ea>
 801102e:	6923      	ldr	r3, [r4, #16]
 8011030:	4642      	mov	r2, r8
 8011032:	4631      	mov	r1, r6
 8011034:	4628      	mov	r0, r5
 8011036:	47b8      	blx	r7
 8011038:	3001      	adds	r0, #1
 801103a:	d12b      	bne.n	8011094 <_printf_float+0x240>
 801103c:	e767      	b.n	8010f0e <_printf_float+0xba>
 801103e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011042:	f240 80dc 	bls.w	80111fe <_printf_float+0x3aa>
 8011046:	2200      	movs	r2, #0
 8011048:	2300      	movs	r3, #0
 801104a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801104e:	f7ef fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8011052:	2800      	cmp	r0, #0
 8011054:	d033      	beq.n	80110be <_printf_float+0x26a>
 8011056:	2301      	movs	r3, #1
 8011058:	4a41      	ldr	r2, [pc, #260]	; (8011160 <_printf_float+0x30c>)
 801105a:	4631      	mov	r1, r6
 801105c:	4628      	mov	r0, r5
 801105e:	47b8      	blx	r7
 8011060:	3001      	adds	r0, #1
 8011062:	f43f af54 	beq.w	8010f0e <_printf_float+0xba>
 8011066:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801106a:	429a      	cmp	r2, r3
 801106c:	db02      	blt.n	8011074 <_printf_float+0x220>
 801106e:	6823      	ldr	r3, [r4, #0]
 8011070:	07d8      	lsls	r0, r3, #31
 8011072:	d50f      	bpl.n	8011094 <_printf_float+0x240>
 8011074:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011078:	4631      	mov	r1, r6
 801107a:	4628      	mov	r0, r5
 801107c:	47b8      	blx	r7
 801107e:	3001      	adds	r0, #1
 8011080:	f43f af45 	beq.w	8010f0e <_printf_float+0xba>
 8011084:	f04f 0800 	mov.w	r8, #0
 8011088:	f104 091a 	add.w	r9, r4, #26
 801108c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801108e:	3b01      	subs	r3, #1
 8011090:	4543      	cmp	r3, r8
 8011092:	dc09      	bgt.n	80110a8 <_printf_float+0x254>
 8011094:	6823      	ldr	r3, [r4, #0]
 8011096:	079b      	lsls	r3, r3, #30
 8011098:	f100 8103 	bmi.w	80112a2 <_printf_float+0x44e>
 801109c:	68e0      	ldr	r0, [r4, #12]
 801109e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80110a0:	4298      	cmp	r0, r3
 80110a2:	bfb8      	it	lt
 80110a4:	4618      	movlt	r0, r3
 80110a6:	e734      	b.n	8010f12 <_printf_float+0xbe>
 80110a8:	2301      	movs	r3, #1
 80110aa:	464a      	mov	r2, r9
 80110ac:	4631      	mov	r1, r6
 80110ae:	4628      	mov	r0, r5
 80110b0:	47b8      	blx	r7
 80110b2:	3001      	adds	r0, #1
 80110b4:	f43f af2b 	beq.w	8010f0e <_printf_float+0xba>
 80110b8:	f108 0801 	add.w	r8, r8, #1
 80110bc:	e7e6      	b.n	801108c <_printf_float+0x238>
 80110be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	dc2b      	bgt.n	801111c <_printf_float+0x2c8>
 80110c4:	2301      	movs	r3, #1
 80110c6:	4a26      	ldr	r2, [pc, #152]	; (8011160 <_printf_float+0x30c>)
 80110c8:	4631      	mov	r1, r6
 80110ca:	4628      	mov	r0, r5
 80110cc:	47b8      	blx	r7
 80110ce:	3001      	adds	r0, #1
 80110d0:	f43f af1d 	beq.w	8010f0e <_printf_float+0xba>
 80110d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110d6:	b923      	cbnz	r3, 80110e2 <_printf_float+0x28e>
 80110d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110da:	b913      	cbnz	r3, 80110e2 <_printf_float+0x28e>
 80110dc:	6823      	ldr	r3, [r4, #0]
 80110de:	07d9      	lsls	r1, r3, #31
 80110e0:	d5d8      	bpl.n	8011094 <_printf_float+0x240>
 80110e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110e6:	4631      	mov	r1, r6
 80110e8:	4628      	mov	r0, r5
 80110ea:	47b8      	blx	r7
 80110ec:	3001      	adds	r0, #1
 80110ee:	f43f af0e 	beq.w	8010f0e <_printf_float+0xba>
 80110f2:	f04f 0900 	mov.w	r9, #0
 80110f6:	f104 0a1a 	add.w	sl, r4, #26
 80110fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110fc:	425b      	negs	r3, r3
 80110fe:	454b      	cmp	r3, r9
 8011100:	dc01      	bgt.n	8011106 <_printf_float+0x2b2>
 8011102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011104:	e794      	b.n	8011030 <_printf_float+0x1dc>
 8011106:	2301      	movs	r3, #1
 8011108:	4652      	mov	r2, sl
 801110a:	4631      	mov	r1, r6
 801110c:	4628      	mov	r0, r5
 801110e:	47b8      	blx	r7
 8011110:	3001      	adds	r0, #1
 8011112:	f43f aefc 	beq.w	8010f0e <_printf_float+0xba>
 8011116:	f109 0901 	add.w	r9, r9, #1
 801111a:	e7ee      	b.n	80110fa <_printf_float+0x2a6>
 801111c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801111e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011120:	429a      	cmp	r2, r3
 8011122:	bfa8      	it	ge
 8011124:	461a      	movge	r2, r3
 8011126:	2a00      	cmp	r2, #0
 8011128:	4691      	mov	r9, r2
 801112a:	dd07      	ble.n	801113c <_printf_float+0x2e8>
 801112c:	4613      	mov	r3, r2
 801112e:	4631      	mov	r1, r6
 8011130:	4642      	mov	r2, r8
 8011132:	4628      	mov	r0, r5
 8011134:	47b8      	blx	r7
 8011136:	3001      	adds	r0, #1
 8011138:	f43f aee9 	beq.w	8010f0e <_printf_float+0xba>
 801113c:	f104 031a 	add.w	r3, r4, #26
 8011140:	f04f 0b00 	mov.w	fp, #0
 8011144:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011148:	9306      	str	r3, [sp, #24]
 801114a:	e015      	b.n	8011178 <_printf_float+0x324>
 801114c:	7fefffff 	.word	0x7fefffff
 8011150:	08014fb0 	.word	0x08014fb0
 8011154:	08014fac 	.word	0x08014fac
 8011158:	08014fb8 	.word	0x08014fb8
 801115c:	08014fb4 	.word	0x08014fb4
 8011160:	08014fbc 	.word	0x08014fbc
 8011164:	2301      	movs	r3, #1
 8011166:	9a06      	ldr	r2, [sp, #24]
 8011168:	4631      	mov	r1, r6
 801116a:	4628      	mov	r0, r5
 801116c:	47b8      	blx	r7
 801116e:	3001      	adds	r0, #1
 8011170:	f43f aecd 	beq.w	8010f0e <_printf_float+0xba>
 8011174:	f10b 0b01 	add.w	fp, fp, #1
 8011178:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801117c:	ebaa 0309 	sub.w	r3, sl, r9
 8011180:	455b      	cmp	r3, fp
 8011182:	dcef      	bgt.n	8011164 <_printf_float+0x310>
 8011184:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011188:	429a      	cmp	r2, r3
 801118a:	44d0      	add	r8, sl
 801118c:	db15      	blt.n	80111ba <_printf_float+0x366>
 801118e:	6823      	ldr	r3, [r4, #0]
 8011190:	07da      	lsls	r2, r3, #31
 8011192:	d412      	bmi.n	80111ba <_printf_float+0x366>
 8011194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011196:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011198:	eba3 020a 	sub.w	r2, r3, sl
 801119c:	eba3 0a01 	sub.w	sl, r3, r1
 80111a0:	4592      	cmp	sl, r2
 80111a2:	bfa8      	it	ge
 80111a4:	4692      	movge	sl, r2
 80111a6:	f1ba 0f00 	cmp.w	sl, #0
 80111aa:	dc0e      	bgt.n	80111ca <_printf_float+0x376>
 80111ac:	f04f 0800 	mov.w	r8, #0
 80111b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80111b4:	f104 091a 	add.w	r9, r4, #26
 80111b8:	e019      	b.n	80111ee <_printf_float+0x39a>
 80111ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80111be:	4631      	mov	r1, r6
 80111c0:	4628      	mov	r0, r5
 80111c2:	47b8      	blx	r7
 80111c4:	3001      	adds	r0, #1
 80111c6:	d1e5      	bne.n	8011194 <_printf_float+0x340>
 80111c8:	e6a1      	b.n	8010f0e <_printf_float+0xba>
 80111ca:	4653      	mov	r3, sl
 80111cc:	4642      	mov	r2, r8
 80111ce:	4631      	mov	r1, r6
 80111d0:	4628      	mov	r0, r5
 80111d2:	47b8      	blx	r7
 80111d4:	3001      	adds	r0, #1
 80111d6:	d1e9      	bne.n	80111ac <_printf_float+0x358>
 80111d8:	e699      	b.n	8010f0e <_printf_float+0xba>
 80111da:	2301      	movs	r3, #1
 80111dc:	464a      	mov	r2, r9
 80111de:	4631      	mov	r1, r6
 80111e0:	4628      	mov	r0, r5
 80111e2:	47b8      	blx	r7
 80111e4:	3001      	adds	r0, #1
 80111e6:	f43f ae92 	beq.w	8010f0e <_printf_float+0xba>
 80111ea:	f108 0801 	add.w	r8, r8, #1
 80111ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80111f2:	1a9b      	subs	r3, r3, r2
 80111f4:	eba3 030a 	sub.w	r3, r3, sl
 80111f8:	4543      	cmp	r3, r8
 80111fa:	dcee      	bgt.n	80111da <_printf_float+0x386>
 80111fc:	e74a      	b.n	8011094 <_printf_float+0x240>
 80111fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011200:	2a01      	cmp	r2, #1
 8011202:	dc01      	bgt.n	8011208 <_printf_float+0x3b4>
 8011204:	07db      	lsls	r3, r3, #31
 8011206:	d53a      	bpl.n	801127e <_printf_float+0x42a>
 8011208:	2301      	movs	r3, #1
 801120a:	4642      	mov	r2, r8
 801120c:	4631      	mov	r1, r6
 801120e:	4628      	mov	r0, r5
 8011210:	47b8      	blx	r7
 8011212:	3001      	adds	r0, #1
 8011214:	f43f ae7b 	beq.w	8010f0e <_printf_float+0xba>
 8011218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801121c:	4631      	mov	r1, r6
 801121e:	4628      	mov	r0, r5
 8011220:	47b8      	blx	r7
 8011222:	3001      	adds	r0, #1
 8011224:	f108 0801 	add.w	r8, r8, #1
 8011228:	f43f ae71 	beq.w	8010f0e <_printf_float+0xba>
 801122c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801122e:	2200      	movs	r2, #0
 8011230:	f103 3aff 	add.w	sl, r3, #4294967295
 8011234:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011238:	2300      	movs	r3, #0
 801123a:	f7ef fc45 	bl	8000ac8 <__aeabi_dcmpeq>
 801123e:	b9c8      	cbnz	r0, 8011274 <_printf_float+0x420>
 8011240:	4653      	mov	r3, sl
 8011242:	4642      	mov	r2, r8
 8011244:	4631      	mov	r1, r6
 8011246:	4628      	mov	r0, r5
 8011248:	47b8      	blx	r7
 801124a:	3001      	adds	r0, #1
 801124c:	d10e      	bne.n	801126c <_printf_float+0x418>
 801124e:	e65e      	b.n	8010f0e <_printf_float+0xba>
 8011250:	2301      	movs	r3, #1
 8011252:	4652      	mov	r2, sl
 8011254:	4631      	mov	r1, r6
 8011256:	4628      	mov	r0, r5
 8011258:	47b8      	blx	r7
 801125a:	3001      	adds	r0, #1
 801125c:	f43f ae57 	beq.w	8010f0e <_printf_float+0xba>
 8011260:	f108 0801 	add.w	r8, r8, #1
 8011264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011266:	3b01      	subs	r3, #1
 8011268:	4543      	cmp	r3, r8
 801126a:	dcf1      	bgt.n	8011250 <_printf_float+0x3fc>
 801126c:	464b      	mov	r3, r9
 801126e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011272:	e6de      	b.n	8011032 <_printf_float+0x1de>
 8011274:	f04f 0800 	mov.w	r8, #0
 8011278:	f104 0a1a 	add.w	sl, r4, #26
 801127c:	e7f2      	b.n	8011264 <_printf_float+0x410>
 801127e:	2301      	movs	r3, #1
 8011280:	e7df      	b.n	8011242 <_printf_float+0x3ee>
 8011282:	2301      	movs	r3, #1
 8011284:	464a      	mov	r2, r9
 8011286:	4631      	mov	r1, r6
 8011288:	4628      	mov	r0, r5
 801128a:	47b8      	blx	r7
 801128c:	3001      	adds	r0, #1
 801128e:	f43f ae3e 	beq.w	8010f0e <_printf_float+0xba>
 8011292:	f108 0801 	add.w	r8, r8, #1
 8011296:	68e3      	ldr	r3, [r4, #12]
 8011298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801129a:	1a9b      	subs	r3, r3, r2
 801129c:	4543      	cmp	r3, r8
 801129e:	dcf0      	bgt.n	8011282 <_printf_float+0x42e>
 80112a0:	e6fc      	b.n	801109c <_printf_float+0x248>
 80112a2:	f04f 0800 	mov.w	r8, #0
 80112a6:	f104 0919 	add.w	r9, r4, #25
 80112aa:	e7f4      	b.n	8011296 <_printf_float+0x442>
 80112ac:	2900      	cmp	r1, #0
 80112ae:	f43f ae8b 	beq.w	8010fc8 <_printf_float+0x174>
 80112b2:	2300      	movs	r3, #0
 80112b4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80112b8:	ab09      	add	r3, sp, #36	; 0x24
 80112ba:	9300      	str	r3, [sp, #0]
 80112bc:	ec49 8b10 	vmov	d0, r8, r9
 80112c0:	6022      	str	r2, [r4, #0]
 80112c2:	f8cd a004 	str.w	sl, [sp, #4]
 80112c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80112ca:	4628      	mov	r0, r5
 80112cc:	f7ff fd2e 	bl	8010d2c <__cvt>
 80112d0:	4680      	mov	r8, r0
 80112d2:	e648      	b.n	8010f66 <_printf_float+0x112>

080112d4 <_printf_common>:
 80112d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112d8:	4691      	mov	r9, r2
 80112da:	461f      	mov	r7, r3
 80112dc:	688a      	ldr	r2, [r1, #8]
 80112de:	690b      	ldr	r3, [r1, #16]
 80112e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80112e4:	4293      	cmp	r3, r2
 80112e6:	bfb8      	it	lt
 80112e8:	4613      	movlt	r3, r2
 80112ea:	f8c9 3000 	str.w	r3, [r9]
 80112ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80112f2:	4606      	mov	r6, r0
 80112f4:	460c      	mov	r4, r1
 80112f6:	b112      	cbz	r2, 80112fe <_printf_common+0x2a>
 80112f8:	3301      	adds	r3, #1
 80112fa:	f8c9 3000 	str.w	r3, [r9]
 80112fe:	6823      	ldr	r3, [r4, #0]
 8011300:	0699      	lsls	r1, r3, #26
 8011302:	bf42      	ittt	mi
 8011304:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011308:	3302      	addmi	r3, #2
 801130a:	f8c9 3000 	strmi.w	r3, [r9]
 801130e:	6825      	ldr	r5, [r4, #0]
 8011310:	f015 0506 	ands.w	r5, r5, #6
 8011314:	d107      	bne.n	8011326 <_printf_common+0x52>
 8011316:	f104 0a19 	add.w	sl, r4, #25
 801131a:	68e3      	ldr	r3, [r4, #12]
 801131c:	f8d9 2000 	ldr.w	r2, [r9]
 8011320:	1a9b      	subs	r3, r3, r2
 8011322:	42ab      	cmp	r3, r5
 8011324:	dc28      	bgt.n	8011378 <_printf_common+0xa4>
 8011326:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801132a:	6822      	ldr	r2, [r4, #0]
 801132c:	3300      	adds	r3, #0
 801132e:	bf18      	it	ne
 8011330:	2301      	movne	r3, #1
 8011332:	0692      	lsls	r2, r2, #26
 8011334:	d42d      	bmi.n	8011392 <_printf_common+0xbe>
 8011336:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801133a:	4639      	mov	r1, r7
 801133c:	4630      	mov	r0, r6
 801133e:	47c0      	blx	r8
 8011340:	3001      	adds	r0, #1
 8011342:	d020      	beq.n	8011386 <_printf_common+0xb2>
 8011344:	6823      	ldr	r3, [r4, #0]
 8011346:	68e5      	ldr	r5, [r4, #12]
 8011348:	f8d9 2000 	ldr.w	r2, [r9]
 801134c:	f003 0306 	and.w	r3, r3, #6
 8011350:	2b04      	cmp	r3, #4
 8011352:	bf08      	it	eq
 8011354:	1aad      	subeq	r5, r5, r2
 8011356:	68a3      	ldr	r3, [r4, #8]
 8011358:	6922      	ldr	r2, [r4, #16]
 801135a:	bf0c      	ite	eq
 801135c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011360:	2500      	movne	r5, #0
 8011362:	4293      	cmp	r3, r2
 8011364:	bfc4      	itt	gt
 8011366:	1a9b      	subgt	r3, r3, r2
 8011368:	18ed      	addgt	r5, r5, r3
 801136a:	f04f 0900 	mov.w	r9, #0
 801136e:	341a      	adds	r4, #26
 8011370:	454d      	cmp	r5, r9
 8011372:	d11a      	bne.n	80113aa <_printf_common+0xd6>
 8011374:	2000      	movs	r0, #0
 8011376:	e008      	b.n	801138a <_printf_common+0xb6>
 8011378:	2301      	movs	r3, #1
 801137a:	4652      	mov	r2, sl
 801137c:	4639      	mov	r1, r7
 801137e:	4630      	mov	r0, r6
 8011380:	47c0      	blx	r8
 8011382:	3001      	adds	r0, #1
 8011384:	d103      	bne.n	801138e <_printf_common+0xba>
 8011386:	f04f 30ff 	mov.w	r0, #4294967295
 801138a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801138e:	3501      	adds	r5, #1
 8011390:	e7c3      	b.n	801131a <_printf_common+0x46>
 8011392:	18e1      	adds	r1, r4, r3
 8011394:	1c5a      	adds	r2, r3, #1
 8011396:	2030      	movs	r0, #48	; 0x30
 8011398:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801139c:	4422      	add	r2, r4
 801139e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80113a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80113a6:	3302      	adds	r3, #2
 80113a8:	e7c5      	b.n	8011336 <_printf_common+0x62>
 80113aa:	2301      	movs	r3, #1
 80113ac:	4622      	mov	r2, r4
 80113ae:	4639      	mov	r1, r7
 80113b0:	4630      	mov	r0, r6
 80113b2:	47c0      	blx	r8
 80113b4:	3001      	adds	r0, #1
 80113b6:	d0e6      	beq.n	8011386 <_printf_common+0xb2>
 80113b8:	f109 0901 	add.w	r9, r9, #1
 80113bc:	e7d8      	b.n	8011370 <_printf_common+0x9c>
	...

080113c0 <_printf_i>:
 80113c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113c4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80113c8:	460c      	mov	r4, r1
 80113ca:	7e09      	ldrb	r1, [r1, #24]
 80113cc:	b085      	sub	sp, #20
 80113ce:	296e      	cmp	r1, #110	; 0x6e
 80113d0:	4617      	mov	r7, r2
 80113d2:	4606      	mov	r6, r0
 80113d4:	4698      	mov	r8, r3
 80113d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80113d8:	f000 80b3 	beq.w	8011542 <_printf_i+0x182>
 80113dc:	d822      	bhi.n	8011424 <_printf_i+0x64>
 80113de:	2963      	cmp	r1, #99	; 0x63
 80113e0:	d036      	beq.n	8011450 <_printf_i+0x90>
 80113e2:	d80a      	bhi.n	80113fa <_printf_i+0x3a>
 80113e4:	2900      	cmp	r1, #0
 80113e6:	f000 80b9 	beq.w	801155c <_printf_i+0x19c>
 80113ea:	2958      	cmp	r1, #88	; 0x58
 80113ec:	f000 8083 	beq.w	80114f6 <_printf_i+0x136>
 80113f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113f4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80113f8:	e032      	b.n	8011460 <_printf_i+0xa0>
 80113fa:	2964      	cmp	r1, #100	; 0x64
 80113fc:	d001      	beq.n	8011402 <_printf_i+0x42>
 80113fe:	2969      	cmp	r1, #105	; 0x69
 8011400:	d1f6      	bne.n	80113f0 <_printf_i+0x30>
 8011402:	6820      	ldr	r0, [r4, #0]
 8011404:	6813      	ldr	r3, [r2, #0]
 8011406:	0605      	lsls	r5, r0, #24
 8011408:	f103 0104 	add.w	r1, r3, #4
 801140c:	d52a      	bpl.n	8011464 <_printf_i+0xa4>
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	6011      	str	r1, [r2, #0]
 8011412:	2b00      	cmp	r3, #0
 8011414:	da03      	bge.n	801141e <_printf_i+0x5e>
 8011416:	222d      	movs	r2, #45	; 0x2d
 8011418:	425b      	negs	r3, r3
 801141a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801141e:	486f      	ldr	r0, [pc, #444]	; (80115dc <_printf_i+0x21c>)
 8011420:	220a      	movs	r2, #10
 8011422:	e039      	b.n	8011498 <_printf_i+0xd8>
 8011424:	2973      	cmp	r1, #115	; 0x73
 8011426:	f000 809d 	beq.w	8011564 <_printf_i+0x1a4>
 801142a:	d808      	bhi.n	801143e <_printf_i+0x7e>
 801142c:	296f      	cmp	r1, #111	; 0x6f
 801142e:	d020      	beq.n	8011472 <_printf_i+0xb2>
 8011430:	2970      	cmp	r1, #112	; 0x70
 8011432:	d1dd      	bne.n	80113f0 <_printf_i+0x30>
 8011434:	6823      	ldr	r3, [r4, #0]
 8011436:	f043 0320 	orr.w	r3, r3, #32
 801143a:	6023      	str	r3, [r4, #0]
 801143c:	e003      	b.n	8011446 <_printf_i+0x86>
 801143e:	2975      	cmp	r1, #117	; 0x75
 8011440:	d017      	beq.n	8011472 <_printf_i+0xb2>
 8011442:	2978      	cmp	r1, #120	; 0x78
 8011444:	d1d4      	bne.n	80113f0 <_printf_i+0x30>
 8011446:	2378      	movs	r3, #120	; 0x78
 8011448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801144c:	4864      	ldr	r0, [pc, #400]	; (80115e0 <_printf_i+0x220>)
 801144e:	e055      	b.n	80114fc <_printf_i+0x13c>
 8011450:	6813      	ldr	r3, [r2, #0]
 8011452:	1d19      	adds	r1, r3, #4
 8011454:	681b      	ldr	r3, [r3, #0]
 8011456:	6011      	str	r1, [r2, #0]
 8011458:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801145c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011460:	2301      	movs	r3, #1
 8011462:	e08c      	b.n	801157e <_printf_i+0x1be>
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	6011      	str	r1, [r2, #0]
 8011468:	f010 0f40 	tst.w	r0, #64	; 0x40
 801146c:	bf18      	it	ne
 801146e:	b21b      	sxthne	r3, r3
 8011470:	e7cf      	b.n	8011412 <_printf_i+0x52>
 8011472:	6813      	ldr	r3, [r2, #0]
 8011474:	6825      	ldr	r5, [r4, #0]
 8011476:	1d18      	adds	r0, r3, #4
 8011478:	6010      	str	r0, [r2, #0]
 801147a:	0628      	lsls	r0, r5, #24
 801147c:	d501      	bpl.n	8011482 <_printf_i+0xc2>
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	e002      	b.n	8011488 <_printf_i+0xc8>
 8011482:	0668      	lsls	r0, r5, #25
 8011484:	d5fb      	bpl.n	801147e <_printf_i+0xbe>
 8011486:	881b      	ldrh	r3, [r3, #0]
 8011488:	4854      	ldr	r0, [pc, #336]	; (80115dc <_printf_i+0x21c>)
 801148a:	296f      	cmp	r1, #111	; 0x6f
 801148c:	bf14      	ite	ne
 801148e:	220a      	movne	r2, #10
 8011490:	2208      	moveq	r2, #8
 8011492:	2100      	movs	r1, #0
 8011494:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011498:	6865      	ldr	r5, [r4, #4]
 801149a:	60a5      	str	r5, [r4, #8]
 801149c:	2d00      	cmp	r5, #0
 801149e:	f2c0 8095 	blt.w	80115cc <_printf_i+0x20c>
 80114a2:	6821      	ldr	r1, [r4, #0]
 80114a4:	f021 0104 	bic.w	r1, r1, #4
 80114a8:	6021      	str	r1, [r4, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d13d      	bne.n	801152a <_printf_i+0x16a>
 80114ae:	2d00      	cmp	r5, #0
 80114b0:	f040 808e 	bne.w	80115d0 <_printf_i+0x210>
 80114b4:	4665      	mov	r5, ip
 80114b6:	2a08      	cmp	r2, #8
 80114b8:	d10b      	bne.n	80114d2 <_printf_i+0x112>
 80114ba:	6823      	ldr	r3, [r4, #0]
 80114bc:	07db      	lsls	r3, r3, #31
 80114be:	d508      	bpl.n	80114d2 <_printf_i+0x112>
 80114c0:	6923      	ldr	r3, [r4, #16]
 80114c2:	6862      	ldr	r2, [r4, #4]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	bfde      	ittt	le
 80114c8:	2330      	movle	r3, #48	; 0x30
 80114ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80114ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80114d2:	ebac 0305 	sub.w	r3, ip, r5
 80114d6:	6123      	str	r3, [r4, #16]
 80114d8:	f8cd 8000 	str.w	r8, [sp]
 80114dc:	463b      	mov	r3, r7
 80114de:	aa03      	add	r2, sp, #12
 80114e0:	4621      	mov	r1, r4
 80114e2:	4630      	mov	r0, r6
 80114e4:	f7ff fef6 	bl	80112d4 <_printf_common>
 80114e8:	3001      	adds	r0, #1
 80114ea:	d14d      	bne.n	8011588 <_printf_i+0x1c8>
 80114ec:	f04f 30ff 	mov.w	r0, #4294967295
 80114f0:	b005      	add	sp, #20
 80114f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114f6:	4839      	ldr	r0, [pc, #228]	; (80115dc <_printf_i+0x21c>)
 80114f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80114fc:	6813      	ldr	r3, [r2, #0]
 80114fe:	6821      	ldr	r1, [r4, #0]
 8011500:	1d1d      	adds	r5, r3, #4
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	6015      	str	r5, [r2, #0]
 8011506:	060a      	lsls	r2, r1, #24
 8011508:	d50b      	bpl.n	8011522 <_printf_i+0x162>
 801150a:	07ca      	lsls	r2, r1, #31
 801150c:	bf44      	itt	mi
 801150e:	f041 0120 	orrmi.w	r1, r1, #32
 8011512:	6021      	strmi	r1, [r4, #0]
 8011514:	b91b      	cbnz	r3, 801151e <_printf_i+0x15e>
 8011516:	6822      	ldr	r2, [r4, #0]
 8011518:	f022 0220 	bic.w	r2, r2, #32
 801151c:	6022      	str	r2, [r4, #0]
 801151e:	2210      	movs	r2, #16
 8011520:	e7b7      	b.n	8011492 <_printf_i+0xd2>
 8011522:	064d      	lsls	r5, r1, #25
 8011524:	bf48      	it	mi
 8011526:	b29b      	uxthmi	r3, r3
 8011528:	e7ef      	b.n	801150a <_printf_i+0x14a>
 801152a:	4665      	mov	r5, ip
 801152c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011530:	fb02 3311 	mls	r3, r2, r1, r3
 8011534:	5cc3      	ldrb	r3, [r0, r3]
 8011536:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801153a:	460b      	mov	r3, r1
 801153c:	2900      	cmp	r1, #0
 801153e:	d1f5      	bne.n	801152c <_printf_i+0x16c>
 8011540:	e7b9      	b.n	80114b6 <_printf_i+0xf6>
 8011542:	6813      	ldr	r3, [r2, #0]
 8011544:	6825      	ldr	r5, [r4, #0]
 8011546:	6961      	ldr	r1, [r4, #20]
 8011548:	1d18      	adds	r0, r3, #4
 801154a:	6010      	str	r0, [r2, #0]
 801154c:	0628      	lsls	r0, r5, #24
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	d501      	bpl.n	8011556 <_printf_i+0x196>
 8011552:	6019      	str	r1, [r3, #0]
 8011554:	e002      	b.n	801155c <_printf_i+0x19c>
 8011556:	066a      	lsls	r2, r5, #25
 8011558:	d5fb      	bpl.n	8011552 <_printf_i+0x192>
 801155a:	8019      	strh	r1, [r3, #0]
 801155c:	2300      	movs	r3, #0
 801155e:	6123      	str	r3, [r4, #16]
 8011560:	4665      	mov	r5, ip
 8011562:	e7b9      	b.n	80114d8 <_printf_i+0x118>
 8011564:	6813      	ldr	r3, [r2, #0]
 8011566:	1d19      	adds	r1, r3, #4
 8011568:	6011      	str	r1, [r2, #0]
 801156a:	681d      	ldr	r5, [r3, #0]
 801156c:	6862      	ldr	r2, [r4, #4]
 801156e:	2100      	movs	r1, #0
 8011570:	4628      	mov	r0, r5
 8011572:	f7ee fe35 	bl	80001e0 <memchr>
 8011576:	b108      	cbz	r0, 801157c <_printf_i+0x1bc>
 8011578:	1b40      	subs	r0, r0, r5
 801157a:	6060      	str	r0, [r4, #4]
 801157c:	6863      	ldr	r3, [r4, #4]
 801157e:	6123      	str	r3, [r4, #16]
 8011580:	2300      	movs	r3, #0
 8011582:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011586:	e7a7      	b.n	80114d8 <_printf_i+0x118>
 8011588:	6923      	ldr	r3, [r4, #16]
 801158a:	462a      	mov	r2, r5
 801158c:	4639      	mov	r1, r7
 801158e:	4630      	mov	r0, r6
 8011590:	47c0      	blx	r8
 8011592:	3001      	adds	r0, #1
 8011594:	d0aa      	beq.n	80114ec <_printf_i+0x12c>
 8011596:	6823      	ldr	r3, [r4, #0]
 8011598:	079b      	lsls	r3, r3, #30
 801159a:	d413      	bmi.n	80115c4 <_printf_i+0x204>
 801159c:	68e0      	ldr	r0, [r4, #12]
 801159e:	9b03      	ldr	r3, [sp, #12]
 80115a0:	4298      	cmp	r0, r3
 80115a2:	bfb8      	it	lt
 80115a4:	4618      	movlt	r0, r3
 80115a6:	e7a3      	b.n	80114f0 <_printf_i+0x130>
 80115a8:	2301      	movs	r3, #1
 80115aa:	464a      	mov	r2, r9
 80115ac:	4639      	mov	r1, r7
 80115ae:	4630      	mov	r0, r6
 80115b0:	47c0      	blx	r8
 80115b2:	3001      	adds	r0, #1
 80115b4:	d09a      	beq.n	80114ec <_printf_i+0x12c>
 80115b6:	3501      	adds	r5, #1
 80115b8:	68e3      	ldr	r3, [r4, #12]
 80115ba:	9a03      	ldr	r2, [sp, #12]
 80115bc:	1a9b      	subs	r3, r3, r2
 80115be:	42ab      	cmp	r3, r5
 80115c0:	dcf2      	bgt.n	80115a8 <_printf_i+0x1e8>
 80115c2:	e7eb      	b.n	801159c <_printf_i+0x1dc>
 80115c4:	2500      	movs	r5, #0
 80115c6:	f104 0919 	add.w	r9, r4, #25
 80115ca:	e7f5      	b.n	80115b8 <_printf_i+0x1f8>
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d1ac      	bne.n	801152a <_printf_i+0x16a>
 80115d0:	7803      	ldrb	r3, [r0, #0]
 80115d2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80115d6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80115da:	e76c      	b.n	80114b6 <_printf_i+0xf6>
 80115dc:	08014fbe 	.word	0x08014fbe
 80115e0:	08014fcf 	.word	0x08014fcf

080115e4 <_scanf_float>:
 80115e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e8:	469a      	mov	sl, r3
 80115ea:	688b      	ldr	r3, [r1, #8]
 80115ec:	4616      	mov	r6, r2
 80115ee:	1e5a      	subs	r2, r3, #1
 80115f0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80115f4:	b087      	sub	sp, #28
 80115f6:	bf83      	ittte	hi
 80115f8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80115fc:	189b      	addhi	r3, r3, r2
 80115fe:	9301      	strhi	r3, [sp, #4]
 8011600:	2300      	movls	r3, #0
 8011602:	bf86      	itte	hi
 8011604:	f240 135d 	movwhi	r3, #349	; 0x15d
 8011608:	608b      	strhi	r3, [r1, #8]
 801160a:	9301      	strls	r3, [sp, #4]
 801160c:	680b      	ldr	r3, [r1, #0]
 801160e:	4688      	mov	r8, r1
 8011610:	f04f 0b00 	mov.w	fp, #0
 8011614:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8011618:	f848 3b1c 	str.w	r3, [r8], #28
 801161c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8011620:	4607      	mov	r7, r0
 8011622:	460c      	mov	r4, r1
 8011624:	4645      	mov	r5, r8
 8011626:	465a      	mov	r2, fp
 8011628:	46d9      	mov	r9, fp
 801162a:	f8cd b008 	str.w	fp, [sp, #8]
 801162e:	68a1      	ldr	r1, [r4, #8]
 8011630:	b181      	cbz	r1, 8011654 <_scanf_float+0x70>
 8011632:	6833      	ldr	r3, [r6, #0]
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	2b49      	cmp	r3, #73	; 0x49
 8011638:	d071      	beq.n	801171e <_scanf_float+0x13a>
 801163a:	d84d      	bhi.n	80116d8 <_scanf_float+0xf4>
 801163c:	2b39      	cmp	r3, #57	; 0x39
 801163e:	d840      	bhi.n	80116c2 <_scanf_float+0xde>
 8011640:	2b31      	cmp	r3, #49	; 0x31
 8011642:	f080 8088 	bcs.w	8011756 <_scanf_float+0x172>
 8011646:	2b2d      	cmp	r3, #45	; 0x2d
 8011648:	f000 8090 	beq.w	801176c <_scanf_float+0x188>
 801164c:	d815      	bhi.n	801167a <_scanf_float+0x96>
 801164e:	2b2b      	cmp	r3, #43	; 0x2b
 8011650:	f000 808c 	beq.w	801176c <_scanf_float+0x188>
 8011654:	f1b9 0f00 	cmp.w	r9, #0
 8011658:	d003      	beq.n	8011662 <_scanf_float+0x7e>
 801165a:	6823      	ldr	r3, [r4, #0]
 801165c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011660:	6023      	str	r3, [r4, #0]
 8011662:	3a01      	subs	r2, #1
 8011664:	2a01      	cmp	r2, #1
 8011666:	f200 80ea 	bhi.w	801183e <_scanf_float+0x25a>
 801166a:	4545      	cmp	r5, r8
 801166c:	f200 80dc 	bhi.w	8011828 <_scanf_float+0x244>
 8011670:	2601      	movs	r6, #1
 8011672:	4630      	mov	r0, r6
 8011674:	b007      	add	sp, #28
 8011676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801167a:	2b2e      	cmp	r3, #46	; 0x2e
 801167c:	f000 809f 	beq.w	80117be <_scanf_float+0x1da>
 8011680:	2b30      	cmp	r3, #48	; 0x30
 8011682:	d1e7      	bne.n	8011654 <_scanf_float+0x70>
 8011684:	6820      	ldr	r0, [r4, #0]
 8011686:	f410 7f80 	tst.w	r0, #256	; 0x100
 801168a:	d064      	beq.n	8011756 <_scanf_float+0x172>
 801168c:	9b01      	ldr	r3, [sp, #4]
 801168e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8011692:	6020      	str	r0, [r4, #0]
 8011694:	f109 0901 	add.w	r9, r9, #1
 8011698:	b11b      	cbz	r3, 80116a2 <_scanf_float+0xbe>
 801169a:	3b01      	subs	r3, #1
 801169c:	3101      	adds	r1, #1
 801169e:	9301      	str	r3, [sp, #4]
 80116a0:	60a1      	str	r1, [r4, #8]
 80116a2:	68a3      	ldr	r3, [r4, #8]
 80116a4:	3b01      	subs	r3, #1
 80116a6:	60a3      	str	r3, [r4, #8]
 80116a8:	6923      	ldr	r3, [r4, #16]
 80116aa:	3301      	adds	r3, #1
 80116ac:	6123      	str	r3, [r4, #16]
 80116ae:	6873      	ldr	r3, [r6, #4]
 80116b0:	3b01      	subs	r3, #1
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	6073      	str	r3, [r6, #4]
 80116b6:	f340 80ac 	ble.w	8011812 <_scanf_float+0x22e>
 80116ba:	6833      	ldr	r3, [r6, #0]
 80116bc:	3301      	adds	r3, #1
 80116be:	6033      	str	r3, [r6, #0]
 80116c0:	e7b5      	b.n	801162e <_scanf_float+0x4a>
 80116c2:	2b45      	cmp	r3, #69	; 0x45
 80116c4:	f000 8085 	beq.w	80117d2 <_scanf_float+0x1ee>
 80116c8:	2b46      	cmp	r3, #70	; 0x46
 80116ca:	d06a      	beq.n	80117a2 <_scanf_float+0x1be>
 80116cc:	2b41      	cmp	r3, #65	; 0x41
 80116ce:	d1c1      	bne.n	8011654 <_scanf_float+0x70>
 80116d0:	2a01      	cmp	r2, #1
 80116d2:	d1bf      	bne.n	8011654 <_scanf_float+0x70>
 80116d4:	2202      	movs	r2, #2
 80116d6:	e046      	b.n	8011766 <_scanf_float+0x182>
 80116d8:	2b65      	cmp	r3, #101	; 0x65
 80116da:	d07a      	beq.n	80117d2 <_scanf_float+0x1ee>
 80116dc:	d818      	bhi.n	8011710 <_scanf_float+0x12c>
 80116de:	2b54      	cmp	r3, #84	; 0x54
 80116e0:	d066      	beq.n	80117b0 <_scanf_float+0x1cc>
 80116e2:	d811      	bhi.n	8011708 <_scanf_float+0x124>
 80116e4:	2b4e      	cmp	r3, #78	; 0x4e
 80116e6:	d1b5      	bne.n	8011654 <_scanf_float+0x70>
 80116e8:	2a00      	cmp	r2, #0
 80116ea:	d146      	bne.n	801177a <_scanf_float+0x196>
 80116ec:	f1b9 0f00 	cmp.w	r9, #0
 80116f0:	d145      	bne.n	801177e <_scanf_float+0x19a>
 80116f2:	6821      	ldr	r1, [r4, #0]
 80116f4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80116f8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80116fc:	d13f      	bne.n	801177e <_scanf_float+0x19a>
 80116fe:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8011702:	6021      	str	r1, [r4, #0]
 8011704:	2201      	movs	r2, #1
 8011706:	e02e      	b.n	8011766 <_scanf_float+0x182>
 8011708:	2b59      	cmp	r3, #89	; 0x59
 801170a:	d01e      	beq.n	801174a <_scanf_float+0x166>
 801170c:	2b61      	cmp	r3, #97	; 0x61
 801170e:	e7de      	b.n	80116ce <_scanf_float+0xea>
 8011710:	2b6e      	cmp	r3, #110	; 0x6e
 8011712:	d0e9      	beq.n	80116e8 <_scanf_float+0x104>
 8011714:	d815      	bhi.n	8011742 <_scanf_float+0x15e>
 8011716:	2b66      	cmp	r3, #102	; 0x66
 8011718:	d043      	beq.n	80117a2 <_scanf_float+0x1be>
 801171a:	2b69      	cmp	r3, #105	; 0x69
 801171c:	d19a      	bne.n	8011654 <_scanf_float+0x70>
 801171e:	f1bb 0f00 	cmp.w	fp, #0
 8011722:	d138      	bne.n	8011796 <_scanf_float+0x1b2>
 8011724:	f1b9 0f00 	cmp.w	r9, #0
 8011728:	d197      	bne.n	801165a <_scanf_float+0x76>
 801172a:	6821      	ldr	r1, [r4, #0]
 801172c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8011730:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8011734:	d195      	bne.n	8011662 <_scanf_float+0x7e>
 8011736:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801173a:	6021      	str	r1, [r4, #0]
 801173c:	f04f 0b01 	mov.w	fp, #1
 8011740:	e011      	b.n	8011766 <_scanf_float+0x182>
 8011742:	2b74      	cmp	r3, #116	; 0x74
 8011744:	d034      	beq.n	80117b0 <_scanf_float+0x1cc>
 8011746:	2b79      	cmp	r3, #121	; 0x79
 8011748:	d184      	bne.n	8011654 <_scanf_float+0x70>
 801174a:	f1bb 0f07 	cmp.w	fp, #7
 801174e:	d181      	bne.n	8011654 <_scanf_float+0x70>
 8011750:	f04f 0b08 	mov.w	fp, #8
 8011754:	e007      	b.n	8011766 <_scanf_float+0x182>
 8011756:	eb12 0f0b 	cmn.w	r2, fp
 801175a:	f47f af7b 	bne.w	8011654 <_scanf_float+0x70>
 801175e:	6821      	ldr	r1, [r4, #0]
 8011760:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8011764:	6021      	str	r1, [r4, #0]
 8011766:	702b      	strb	r3, [r5, #0]
 8011768:	3501      	adds	r5, #1
 801176a:	e79a      	b.n	80116a2 <_scanf_float+0xbe>
 801176c:	6821      	ldr	r1, [r4, #0]
 801176e:	0608      	lsls	r0, r1, #24
 8011770:	f57f af70 	bpl.w	8011654 <_scanf_float+0x70>
 8011774:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8011778:	e7f4      	b.n	8011764 <_scanf_float+0x180>
 801177a:	2a02      	cmp	r2, #2
 801177c:	d047      	beq.n	801180e <_scanf_float+0x22a>
 801177e:	f1bb 0f01 	cmp.w	fp, #1
 8011782:	d003      	beq.n	801178c <_scanf_float+0x1a8>
 8011784:	f1bb 0f04 	cmp.w	fp, #4
 8011788:	f47f af64 	bne.w	8011654 <_scanf_float+0x70>
 801178c:	f10b 0b01 	add.w	fp, fp, #1
 8011790:	fa5f fb8b 	uxtb.w	fp, fp
 8011794:	e7e7      	b.n	8011766 <_scanf_float+0x182>
 8011796:	f1bb 0f03 	cmp.w	fp, #3
 801179a:	d0f7      	beq.n	801178c <_scanf_float+0x1a8>
 801179c:	f1bb 0f05 	cmp.w	fp, #5
 80117a0:	e7f2      	b.n	8011788 <_scanf_float+0x1a4>
 80117a2:	f1bb 0f02 	cmp.w	fp, #2
 80117a6:	f47f af55 	bne.w	8011654 <_scanf_float+0x70>
 80117aa:	f04f 0b03 	mov.w	fp, #3
 80117ae:	e7da      	b.n	8011766 <_scanf_float+0x182>
 80117b0:	f1bb 0f06 	cmp.w	fp, #6
 80117b4:	f47f af4e 	bne.w	8011654 <_scanf_float+0x70>
 80117b8:	f04f 0b07 	mov.w	fp, #7
 80117bc:	e7d3      	b.n	8011766 <_scanf_float+0x182>
 80117be:	6821      	ldr	r1, [r4, #0]
 80117c0:	0588      	lsls	r0, r1, #22
 80117c2:	f57f af47 	bpl.w	8011654 <_scanf_float+0x70>
 80117c6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80117ca:	6021      	str	r1, [r4, #0]
 80117cc:	f8cd 9008 	str.w	r9, [sp, #8]
 80117d0:	e7c9      	b.n	8011766 <_scanf_float+0x182>
 80117d2:	6821      	ldr	r1, [r4, #0]
 80117d4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80117d8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80117dc:	d006      	beq.n	80117ec <_scanf_float+0x208>
 80117de:	0548      	lsls	r0, r1, #21
 80117e0:	f57f af38 	bpl.w	8011654 <_scanf_float+0x70>
 80117e4:	f1b9 0f00 	cmp.w	r9, #0
 80117e8:	f43f af3b 	beq.w	8011662 <_scanf_float+0x7e>
 80117ec:	0588      	lsls	r0, r1, #22
 80117ee:	bf58      	it	pl
 80117f0:	9802      	ldrpl	r0, [sp, #8]
 80117f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80117f6:	bf58      	it	pl
 80117f8:	eba9 0000 	subpl.w	r0, r9, r0
 80117fc:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8011800:	bf58      	it	pl
 8011802:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8011806:	6021      	str	r1, [r4, #0]
 8011808:	f04f 0900 	mov.w	r9, #0
 801180c:	e7ab      	b.n	8011766 <_scanf_float+0x182>
 801180e:	2203      	movs	r2, #3
 8011810:	e7a9      	b.n	8011766 <_scanf_float+0x182>
 8011812:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011816:	9205      	str	r2, [sp, #20]
 8011818:	4631      	mov	r1, r6
 801181a:	4638      	mov	r0, r7
 801181c:	4798      	blx	r3
 801181e:	9a05      	ldr	r2, [sp, #20]
 8011820:	2800      	cmp	r0, #0
 8011822:	f43f af04 	beq.w	801162e <_scanf_float+0x4a>
 8011826:	e715      	b.n	8011654 <_scanf_float+0x70>
 8011828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801182c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011830:	4632      	mov	r2, r6
 8011832:	4638      	mov	r0, r7
 8011834:	4798      	blx	r3
 8011836:	6923      	ldr	r3, [r4, #16]
 8011838:	3b01      	subs	r3, #1
 801183a:	6123      	str	r3, [r4, #16]
 801183c:	e715      	b.n	801166a <_scanf_float+0x86>
 801183e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8011842:	2b06      	cmp	r3, #6
 8011844:	d80a      	bhi.n	801185c <_scanf_float+0x278>
 8011846:	f1bb 0f02 	cmp.w	fp, #2
 801184a:	d968      	bls.n	801191e <_scanf_float+0x33a>
 801184c:	f1ab 0b03 	sub.w	fp, fp, #3
 8011850:	fa5f fb8b 	uxtb.w	fp, fp
 8011854:	eba5 0b0b 	sub.w	fp, r5, fp
 8011858:	455d      	cmp	r5, fp
 801185a:	d14b      	bne.n	80118f4 <_scanf_float+0x310>
 801185c:	6823      	ldr	r3, [r4, #0]
 801185e:	05da      	lsls	r2, r3, #23
 8011860:	d51f      	bpl.n	80118a2 <_scanf_float+0x2be>
 8011862:	055b      	lsls	r3, r3, #21
 8011864:	d468      	bmi.n	8011938 <_scanf_float+0x354>
 8011866:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801186a:	6923      	ldr	r3, [r4, #16]
 801186c:	2965      	cmp	r1, #101	; 0x65
 801186e:	f103 33ff 	add.w	r3, r3, #4294967295
 8011872:	f105 3bff 	add.w	fp, r5, #4294967295
 8011876:	6123      	str	r3, [r4, #16]
 8011878:	d00d      	beq.n	8011896 <_scanf_float+0x2b2>
 801187a:	2945      	cmp	r1, #69	; 0x45
 801187c:	d00b      	beq.n	8011896 <_scanf_float+0x2b2>
 801187e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011882:	4632      	mov	r2, r6
 8011884:	4638      	mov	r0, r7
 8011886:	4798      	blx	r3
 8011888:	6923      	ldr	r3, [r4, #16]
 801188a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801188e:	3b01      	subs	r3, #1
 8011890:	f1a5 0b02 	sub.w	fp, r5, #2
 8011894:	6123      	str	r3, [r4, #16]
 8011896:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801189a:	4632      	mov	r2, r6
 801189c:	4638      	mov	r0, r7
 801189e:	4798      	blx	r3
 80118a0:	465d      	mov	r5, fp
 80118a2:	6826      	ldr	r6, [r4, #0]
 80118a4:	f016 0610 	ands.w	r6, r6, #16
 80118a8:	d17a      	bne.n	80119a0 <_scanf_float+0x3bc>
 80118aa:	702e      	strb	r6, [r5, #0]
 80118ac:	6823      	ldr	r3, [r4, #0]
 80118ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80118b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80118b6:	d142      	bne.n	801193e <_scanf_float+0x35a>
 80118b8:	9b02      	ldr	r3, [sp, #8]
 80118ba:	eba9 0303 	sub.w	r3, r9, r3
 80118be:	425a      	negs	r2, r3
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d149      	bne.n	8011958 <_scanf_float+0x374>
 80118c4:	2200      	movs	r2, #0
 80118c6:	4641      	mov	r1, r8
 80118c8:	4638      	mov	r0, r7
 80118ca:	f000 feb5 	bl	8012638 <_strtod_r>
 80118ce:	6825      	ldr	r5, [r4, #0]
 80118d0:	f8da 3000 	ldr.w	r3, [sl]
 80118d4:	f015 0f02 	tst.w	r5, #2
 80118d8:	f103 0204 	add.w	r2, r3, #4
 80118dc:	ec59 8b10 	vmov	r8, r9, d0
 80118e0:	f8ca 2000 	str.w	r2, [sl]
 80118e4:	d043      	beq.n	801196e <_scanf_float+0x38a>
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	e9c3 8900 	strd	r8, r9, [r3]
 80118ec:	68e3      	ldr	r3, [r4, #12]
 80118ee:	3301      	adds	r3, #1
 80118f0:	60e3      	str	r3, [r4, #12]
 80118f2:	e6be      	b.n	8011672 <_scanf_float+0x8e>
 80118f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80118f8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80118fc:	4632      	mov	r2, r6
 80118fe:	4638      	mov	r0, r7
 8011900:	4798      	blx	r3
 8011902:	6923      	ldr	r3, [r4, #16]
 8011904:	3b01      	subs	r3, #1
 8011906:	6123      	str	r3, [r4, #16]
 8011908:	e7a6      	b.n	8011858 <_scanf_float+0x274>
 801190a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801190e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8011912:	4632      	mov	r2, r6
 8011914:	4638      	mov	r0, r7
 8011916:	4798      	blx	r3
 8011918:	6923      	ldr	r3, [r4, #16]
 801191a:	3b01      	subs	r3, #1
 801191c:	6123      	str	r3, [r4, #16]
 801191e:	4545      	cmp	r5, r8
 8011920:	d8f3      	bhi.n	801190a <_scanf_float+0x326>
 8011922:	e6a5      	b.n	8011670 <_scanf_float+0x8c>
 8011924:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8011928:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801192c:	4632      	mov	r2, r6
 801192e:	4638      	mov	r0, r7
 8011930:	4798      	blx	r3
 8011932:	6923      	ldr	r3, [r4, #16]
 8011934:	3b01      	subs	r3, #1
 8011936:	6123      	str	r3, [r4, #16]
 8011938:	4545      	cmp	r5, r8
 801193a:	d8f3      	bhi.n	8011924 <_scanf_float+0x340>
 801193c:	e698      	b.n	8011670 <_scanf_float+0x8c>
 801193e:	9b03      	ldr	r3, [sp, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d0bf      	beq.n	80118c4 <_scanf_float+0x2e0>
 8011944:	9904      	ldr	r1, [sp, #16]
 8011946:	230a      	movs	r3, #10
 8011948:	4632      	mov	r2, r6
 801194a:	3101      	adds	r1, #1
 801194c:	4638      	mov	r0, r7
 801194e:	f000 feff 	bl	8012750 <_strtol_r>
 8011952:	9b03      	ldr	r3, [sp, #12]
 8011954:	9d04      	ldr	r5, [sp, #16]
 8011956:	1ac2      	subs	r2, r0, r3
 8011958:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801195c:	429d      	cmp	r5, r3
 801195e:	bf28      	it	cs
 8011960:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8011964:	490f      	ldr	r1, [pc, #60]	; (80119a4 <_scanf_float+0x3c0>)
 8011966:	4628      	mov	r0, r5
 8011968:	f000 f834 	bl	80119d4 <siprintf>
 801196c:	e7aa      	b.n	80118c4 <_scanf_float+0x2e0>
 801196e:	f015 0504 	ands.w	r5, r5, #4
 8011972:	d1b8      	bne.n	80118e6 <_scanf_float+0x302>
 8011974:	681f      	ldr	r7, [r3, #0]
 8011976:	ee10 2a10 	vmov	r2, s0
 801197a:	464b      	mov	r3, r9
 801197c:	ee10 0a10 	vmov	r0, s0
 8011980:	4649      	mov	r1, r9
 8011982:	f7ef f8d3 	bl	8000b2c <__aeabi_dcmpun>
 8011986:	b128      	cbz	r0, 8011994 <_scanf_float+0x3b0>
 8011988:	4628      	mov	r0, r5
 801198a:	f000 f81d 	bl	80119c8 <nanf>
 801198e:	ed87 0a00 	vstr	s0, [r7]
 8011992:	e7ab      	b.n	80118ec <_scanf_float+0x308>
 8011994:	4640      	mov	r0, r8
 8011996:	4649      	mov	r1, r9
 8011998:	f7ef f926 	bl	8000be8 <__aeabi_d2f>
 801199c:	6038      	str	r0, [r7, #0]
 801199e:	e7a5      	b.n	80118ec <_scanf_float+0x308>
 80119a0:	2600      	movs	r6, #0
 80119a2:	e666      	b.n	8011672 <_scanf_float+0x8e>
 80119a4:	08014fe0 	.word	0x08014fe0

080119a8 <_sbrk_r>:
 80119a8:	b538      	push	{r3, r4, r5, lr}
 80119aa:	4c06      	ldr	r4, [pc, #24]	; (80119c4 <_sbrk_r+0x1c>)
 80119ac:	2300      	movs	r3, #0
 80119ae:	4605      	mov	r5, r0
 80119b0:	4608      	mov	r0, r1
 80119b2:	6023      	str	r3, [r4, #0]
 80119b4:	f002 fe38 	bl	8014628 <_sbrk>
 80119b8:	1c43      	adds	r3, r0, #1
 80119ba:	d102      	bne.n	80119c2 <_sbrk_r+0x1a>
 80119bc:	6823      	ldr	r3, [r4, #0]
 80119be:	b103      	cbz	r3, 80119c2 <_sbrk_r+0x1a>
 80119c0:	602b      	str	r3, [r5, #0]
 80119c2:	bd38      	pop	{r3, r4, r5, pc}
 80119c4:	20002cb0 	.word	0x20002cb0

080119c8 <nanf>:
 80119c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80119d0 <nanf+0x8>
 80119cc:	4770      	bx	lr
 80119ce:	bf00      	nop
 80119d0:	7fc00000 	.word	0x7fc00000

080119d4 <siprintf>:
 80119d4:	b40e      	push	{r1, r2, r3}
 80119d6:	b500      	push	{lr}
 80119d8:	b09c      	sub	sp, #112	; 0x70
 80119da:	ab1d      	add	r3, sp, #116	; 0x74
 80119dc:	9002      	str	r0, [sp, #8]
 80119de:	9006      	str	r0, [sp, #24]
 80119e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80119e4:	4809      	ldr	r0, [pc, #36]	; (8011a0c <siprintf+0x38>)
 80119e6:	9107      	str	r1, [sp, #28]
 80119e8:	9104      	str	r1, [sp, #16]
 80119ea:	4909      	ldr	r1, [pc, #36]	; (8011a10 <siprintf+0x3c>)
 80119ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80119f0:	9105      	str	r1, [sp, #20]
 80119f2:	6800      	ldr	r0, [r0, #0]
 80119f4:	9301      	str	r3, [sp, #4]
 80119f6:	a902      	add	r1, sp, #8
 80119f8:	f002 fcb8 	bl	801436c <_svfiprintf_r>
 80119fc:	9b02      	ldr	r3, [sp, #8]
 80119fe:	2200      	movs	r2, #0
 8011a00:	701a      	strb	r2, [r3, #0]
 8011a02:	b01c      	add	sp, #112	; 0x70
 8011a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a08:	b003      	add	sp, #12
 8011a0a:	4770      	bx	lr
 8011a0c:	20000190 	.word	0x20000190
 8011a10:	ffff0208 	.word	0xffff0208

08011a14 <sulp>:
 8011a14:	b570      	push	{r4, r5, r6, lr}
 8011a16:	4604      	mov	r4, r0
 8011a18:	460d      	mov	r5, r1
 8011a1a:	ec45 4b10 	vmov	d0, r4, r5
 8011a1e:	4616      	mov	r6, r2
 8011a20:	f002 fb08 	bl	8014034 <__ulp>
 8011a24:	ec51 0b10 	vmov	r0, r1, d0
 8011a28:	b17e      	cbz	r6, 8011a4a <sulp+0x36>
 8011a2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011a2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	dd09      	ble.n	8011a4a <sulp+0x36>
 8011a36:	051b      	lsls	r3, r3, #20
 8011a38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011a3c:	2400      	movs	r4, #0
 8011a3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011a42:	4622      	mov	r2, r4
 8011a44:	462b      	mov	r3, r5
 8011a46:	f7ee fdd7 	bl	80005f8 <__aeabi_dmul>
 8011a4a:	bd70      	pop	{r4, r5, r6, pc}
 8011a4c:	0000      	movs	r0, r0
	...

08011a50 <_strtod_l>:
 8011a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a54:	461f      	mov	r7, r3
 8011a56:	b0a1      	sub	sp, #132	; 0x84
 8011a58:	2300      	movs	r3, #0
 8011a5a:	4681      	mov	r9, r0
 8011a5c:	4638      	mov	r0, r7
 8011a5e:	460e      	mov	r6, r1
 8011a60:	9217      	str	r2, [sp, #92]	; 0x5c
 8011a62:	931c      	str	r3, [sp, #112]	; 0x70
 8011a64:	f001 fff5 	bl	8013a52 <__localeconv_l>
 8011a68:	4680      	mov	r8, r0
 8011a6a:	6800      	ldr	r0, [r0, #0]
 8011a6c:	f7ee fbb0 	bl	80001d0 <strlen>
 8011a70:	f04f 0a00 	mov.w	sl, #0
 8011a74:	4604      	mov	r4, r0
 8011a76:	f04f 0b00 	mov.w	fp, #0
 8011a7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8011a7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011a7e:	781a      	ldrb	r2, [r3, #0]
 8011a80:	2a0d      	cmp	r2, #13
 8011a82:	d832      	bhi.n	8011aea <_strtod_l+0x9a>
 8011a84:	2a09      	cmp	r2, #9
 8011a86:	d236      	bcs.n	8011af6 <_strtod_l+0xa6>
 8011a88:	2a00      	cmp	r2, #0
 8011a8a:	d03e      	beq.n	8011b0a <_strtod_l+0xba>
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	930d      	str	r3, [sp, #52]	; 0x34
 8011a90:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011a92:	782b      	ldrb	r3, [r5, #0]
 8011a94:	2b30      	cmp	r3, #48	; 0x30
 8011a96:	f040 80ac 	bne.w	8011bf2 <_strtod_l+0x1a2>
 8011a9a:	786b      	ldrb	r3, [r5, #1]
 8011a9c:	2b58      	cmp	r3, #88	; 0x58
 8011a9e:	d001      	beq.n	8011aa4 <_strtod_l+0x54>
 8011aa0:	2b78      	cmp	r3, #120	; 0x78
 8011aa2:	d167      	bne.n	8011b74 <_strtod_l+0x124>
 8011aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011aa6:	9301      	str	r3, [sp, #4]
 8011aa8:	ab1c      	add	r3, sp, #112	; 0x70
 8011aaa:	9300      	str	r3, [sp, #0]
 8011aac:	9702      	str	r7, [sp, #8]
 8011aae:	ab1d      	add	r3, sp, #116	; 0x74
 8011ab0:	4a88      	ldr	r2, [pc, #544]	; (8011cd4 <_strtod_l+0x284>)
 8011ab2:	a91b      	add	r1, sp, #108	; 0x6c
 8011ab4:	4648      	mov	r0, r9
 8011ab6:	f001 fcf2 	bl	801349e <__gethex>
 8011aba:	f010 0407 	ands.w	r4, r0, #7
 8011abe:	4606      	mov	r6, r0
 8011ac0:	d005      	beq.n	8011ace <_strtod_l+0x7e>
 8011ac2:	2c06      	cmp	r4, #6
 8011ac4:	d12b      	bne.n	8011b1e <_strtod_l+0xce>
 8011ac6:	3501      	adds	r5, #1
 8011ac8:	2300      	movs	r3, #0
 8011aca:	951b      	str	r5, [sp, #108]	; 0x6c
 8011acc:	930d      	str	r3, [sp, #52]	; 0x34
 8011ace:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	f040 859a 	bne.w	801260a <_strtod_l+0xbba>
 8011ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011ad8:	b1e3      	cbz	r3, 8011b14 <_strtod_l+0xc4>
 8011ada:	4652      	mov	r2, sl
 8011adc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011ae0:	ec43 2b10 	vmov	d0, r2, r3
 8011ae4:	b021      	add	sp, #132	; 0x84
 8011ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aea:	2a2b      	cmp	r2, #43	; 0x2b
 8011aec:	d015      	beq.n	8011b1a <_strtod_l+0xca>
 8011aee:	2a2d      	cmp	r2, #45	; 0x2d
 8011af0:	d004      	beq.n	8011afc <_strtod_l+0xac>
 8011af2:	2a20      	cmp	r2, #32
 8011af4:	d1ca      	bne.n	8011a8c <_strtod_l+0x3c>
 8011af6:	3301      	adds	r3, #1
 8011af8:	931b      	str	r3, [sp, #108]	; 0x6c
 8011afa:	e7bf      	b.n	8011a7c <_strtod_l+0x2c>
 8011afc:	2201      	movs	r2, #1
 8011afe:	920d      	str	r2, [sp, #52]	; 0x34
 8011b00:	1c5a      	adds	r2, r3, #1
 8011b02:	921b      	str	r2, [sp, #108]	; 0x6c
 8011b04:	785b      	ldrb	r3, [r3, #1]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d1c2      	bne.n	8011a90 <_strtod_l+0x40>
 8011b0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011b0c:	961b      	str	r6, [sp, #108]	; 0x6c
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f040 8579 	bne.w	8012606 <_strtod_l+0xbb6>
 8011b14:	4652      	mov	r2, sl
 8011b16:	465b      	mov	r3, fp
 8011b18:	e7e2      	b.n	8011ae0 <_strtod_l+0x90>
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	e7ef      	b.n	8011afe <_strtod_l+0xae>
 8011b1e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011b20:	b13a      	cbz	r2, 8011b32 <_strtod_l+0xe2>
 8011b22:	2135      	movs	r1, #53	; 0x35
 8011b24:	a81e      	add	r0, sp, #120	; 0x78
 8011b26:	f002 fb7d 	bl	8014224 <__copybits>
 8011b2a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011b2c:	4648      	mov	r0, r9
 8011b2e:	f001 ffe9 	bl	8013b04 <_Bfree>
 8011b32:	3c01      	subs	r4, #1
 8011b34:	2c04      	cmp	r4, #4
 8011b36:	d806      	bhi.n	8011b46 <_strtod_l+0xf6>
 8011b38:	e8df f004 	tbb	[pc, r4]
 8011b3c:	1714030a 	.word	0x1714030a
 8011b40:	0a          	.byte	0x0a
 8011b41:	00          	.byte	0x00
 8011b42:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8011b46:	0730      	lsls	r0, r6, #28
 8011b48:	d5c1      	bpl.n	8011ace <_strtod_l+0x7e>
 8011b4a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011b4e:	e7be      	b.n	8011ace <_strtod_l+0x7e>
 8011b50:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8011b54:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011b56:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8011b5a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011b5e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011b62:	e7f0      	b.n	8011b46 <_strtod_l+0xf6>
 8011b64:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011cd8 <_strtod_l+0x288>
 8011b68:	e7ed      	b.n	8011b46 <_strtod_l+0xf6>
 8011b6a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011b6e:	f04f 3aff 	mov.w	sl, #4294967295
 8011b72:	e7e8      	b.n	8011b46 <_strtod_l+0xf6>
 8011b74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b76:	1c5a      	adds	r2, r3, #1
 8011b78:	921b      	str	r2, [sp, #108]	; 0x6c
 8011b7a:	785b      	ldrb	r3, [r3, #1]
 8011b7c:	2b30      	cmp	r3, #48	; 0x30
 8011b7e:	d0f9      	beq.n	8011b74 <_strtod_l+0x124>
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d0a4      	beq.n	8011ace <_strtod_l+0x7e>
 8011b84:	2301      	movs	r3, #1
 8011b86:	2500      	movs	r5, #0
 8011b88:	9306      	str	r3, [sp, #24]
 8011b8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b8c:	9308      	str	r3, [sp, #32]
 8011b8e:	9507      	str	r5, [sp, #28]
 8011b90:	9505      	str	r5, [sp, #20]
 8011b92:	220a      	movs	r2, #10
 8011b94:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011b96:	7807      	ldrb	r7, [r0, #0]
 8011b98:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011b9c:	b2d9      	uxtb	r1, r3
 8011b9e:	2909      	cmp	r1, #9
 8011ba0:	d929      	bls.n	8011bf6 <_strtod_l+0x1a6>
 8011ba2:	4622      	mov	r2, r4
 8011ba4:	f8d8 1000 	ldr.w	r1, [r8]
 8011ba8:	f002 fcd8 	bl	801455c <strncmp>
 8011bac:	2800      	cmp	r0, #0
 8011bae:	d031      	beq.n	8011c14 <_strtod_l+0x1c4>
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	9c05      	ldr	r4, [sp, #20]
 8011bb4:	9004      	str	r0, [sp, #16]
 8011bb6:	463b      	mov	r3, r7
 8011bb8:	4602      	mov	r2, r0
 8011bba:	2b65      	cmp	r3, #101	; 0x65
 8011bbc:	d001      	beq.n	8011bc2 <_strtod_l+0x172>
 8011bbe:	2b45      	cmp	r3, #69	; 0x45
 8011bc0:	d114      	bne.n	8011bec <_strtod_l+0x19c>
 8011bc2:	b924      	cbnz	r4, 8011bce <_strtod_l+0x17e>
 8011bc4:	b910      	cbnz	r0, 8011bcc <_strtod_l+0x17c>
 8011bc6:	9b06      	ldr	r3, [sp, #24]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d09e      	beq.n	8011b0a <_strtod_l+0xba>
 8011bcc:	2400      	movs	r4, #0
 8011bce:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011bd0:	1c73      	adds	r3, r6, #1
 8011bd2:	931b      	str	r3, [sp, #108]	; 0x6c
 8011bd4:	7873      	ldrb	r3, [r6, #1]
 8011bd6:	2b2b      	cmp	r3, #43	; 0x2b
 8011bd8:	d078      	beq.n	8011ccc <_strtod_l+0x27c>
 8011bda:	2b2d      	cmp	r3, #45	; 0x2d
 8011bdc:	d070      	beq.n	8011cc0 <_strtod_l+0x270>
 8011bde:	f04f 0c00 	mov.w	ip, #0
 8011be2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8011be6:	2f09      	cmp	r7, #9
 8011be8:	d97c      	bls.n	8011ce4 <_strtod_l+0x294>
 8011bea:	961b      	str	r6, [sp, #108]	; 0x6c
 8011bec:	f04f 0e00 	mov.w	lr, #0
 8011bf0:	e09a      	b.n	8011d28 <_strtod_l+0x2d8>
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	e7c7      	b.n	8011b86 <_strtod_l+0x136>
 8011bf6:	9905      	ldr	r1, [sp, #20]
 8011bf8:	2908      	cmp	r1, #8
 8011bfa:	bfdd      	ittte	le
 8011bfc:	9907      	ldrle	r1, [sp, #28]
 8011bfe:	fb02 3301 	mlale	r3, r2, r1, r3
 8011c02:	9307      	strle	r3, [sp, #28]
 8011c04:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011c08:	9b05      	ldr	r3, [sp, #20]
 8011c0a:	3001      	adds	r0, #1
 8011c0c:	3301      	adds	r3, #1
 8011c0e:	9305      	str	r3, [sp, #20]
 8011c10:	901b      	str	r0, [sp, #108]	; 0x6c
 8011c12:	e7bf      	b.n	8011b94 <_strtod_l+0x144>
 8011c14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c16:	191a      	adds	r2, r3, r4
 8011c18:	921b      	str	r2, [sp, #108]	; 0x6c
 8011c1a:	9a05      	ldr	r2, [sp, #20]
 8011c1c:	5d1b      	ldrb	r3, [r3, r4]
 8011c1e:	2a00      	cmp	r2, #0
 8011c20:	d037      	beq.n	8011c92 <_strtod_l+0x242>
 8011c22:	9c05      	ldr	r4, [sp, #20]
 8011c24:	4602      	mov	r2, r0
 8011c26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011c2a:	2909      	cmp	r1, #9
 8011c2c:	d913      	bls.n	8011c56 <_strtod_l+0x206>
 8011c2e:	2101      	movs	r1, #1
 8011c30:	9104      	str	r1, [sp, #16]
 8011c32:	e7c2      	b.n	8011bba <_strtod_l+0x16a>
 8011c34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c36:	1c5a      	adds	r2, r3, #1
 8011c38:	921b      	str	r2, [sp, #108]	; 0x6c
 8011c3a:	785b      	ldrb	r3, [r3, #1]
 8011c3c:	3001      	adds	r0, #1
 8011c3e:	2b30      	cmp	r3, #48	; 0x30
 8011c40:	d0f8      	beq.n	8011c34 <_strtod_l+0x1e4>
 8011c42:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011c46:	2a08      	cmp	r2, #8
 8011c48:	f200 84e4 	bhi.w	8012614 <_strtod_l+0xbc4>
 8011c4c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011c4e:	9208      	str	r2, [sp, #32]
 8011c50:	4602      	mov	r2, r0
 8011c52:	2000      	movs	r0, #0
 8011c54:	4604      	mov	r4, r0
 8011c56:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8011c5a:	f100 0101 	add.w	r1, r0, #1
 8011c5e:	d012      	beq.n	8011c86 <_strtod_l+0x236>
 8011c60:	440a      	add	r2, r1
 8011c62:	eb00 0c04 	add.w	ip, r0, r4
 8011c66:	4621      	mov	r1, r4
 8011c68:	270a      	movs	r7, #10
 8011c6a:	458c      	cmp	ip, r1
 8011c6c:	d113      	bne.n	8011c96 <_strtod_l+0x246>
 8011c6e:	1821      	adds	r1, r4, r0
 8011c70:	2908      	cmp	r1, #8
 8011c72:	f104 0401 	add.w	r4, r4, #1
 8011c76:	4404      	add	r4, r0
 8011c78:	dc19      	bgt.n	8011cae <_strtod_l+0x25e>
 8011c7a:	9b07      	ldr	r3, [sp, #28]
 8011c7c:	210a      	movs	r1, #10
 8011c7e:	fb01 e303 	mla	r3, r1, r3, lr
 8011c82:	9307      	str	r3, [sp, #28]
 8011c84:	2100      	movs	r1, #0
 8011c86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011c88:	1c58      	adds	r0, r3, #1
 8011c8a:	901b      	str	r0, [sp, #108]	; 0x6c
 8011c8c:	785b      	ldrb	r3, [r3, #1]
 8011c8e:	4608      	mov	r0, r1
 8011c90:	e7c9      	b.n	8011c26 <_strtod_l+0x1d6>
 8011c92:	9805      	ldr	r0, [sp, #20]
 8011c94:	e7d3      	b.n	8011c3e <_strtod_l+0x1ee>
 8011c96:	2908      	cmp	r1, #8
 8011c98:	f101 0101 	add.w	r1, r1, #1
 8011c9c:	dc03      	bgt.n	8011ca6 <_strtod_l+0x256>
 8011c9e:	9b07      	ldr	r3, [sp, #28]
 8011ca0:	437b      	muls	r3, r7
 8011ca2:	9307      	str	r3, [sp, #28]
 8011ca4:	e7e1      	b.n	8011c6a <_strtod_l+0x21a>
 8011ca6:	2910      	cmp	r1, #16
 8011ca8:	bfd8      	it	le
 8011caa:	437d      	mulle	r5, r7
 8011cac:	e7dd      	b.n	8011c6a <_strtod_l+0x21a>
 8011cae:	2c10      	cmp	r4, #16
 8011cb0:	bfdc      	itt	le
 8011cb2:	210a      	movle	r1, #10
 8011cb4:	fb01 e505 	mlale	r5, r1, r5, lr
 8011cb8:	e7e4      	b.n	8011c84 <_strtod_l+0x234>
 8011cba:	2301      	movs	r3, #1
 8011cbc:	9304      	str	r3, [sp, #16]
 8011cbe:	e781      	b.n	8011bc4 <_strtod_l+0x174>
 8011cc0:	f04f 0c01 	mov.w	ip, #1
 8011cc4:	1cb3      	adds	r3, r6, #2
 8011cc6:	931b      	str	r3, [sp, #108]	; 0x6c
 8011cc8:	78b3      	ldrb	r3, [r6, #2]
 8011cca:	e78a      	b.n	8011be2 <_strtod_l+0x192>
 8011ccc:	f04f 0c00 	mov.w	ip, #0
 8011cd0:	e7f8      	b.n	8011cc4 <_strtod_l+0x274>
 8011cd2:	bf00      	nop
 8011cd4:	08014fe8 	.word	0x08014fe8
 8011cd8:	7ff00000 	.word	0x7ff00000
 8011cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011cde:	1c5f      	adds	r7, r3, #1
 8011ce0:	971b      	str	r7, [sp, #108]	; 0x6c
 8011ce2:	785b      	ldrb	r3, [r3, #1]
 8011ce4:	2b30      	cmp	r3, #48	; 0x30
 8011ce6:	d0f9      	beq.n	8011cdc <_strtod_l+0x28c>
 8011ce8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011cec:	2f08      	cmp	r7, #8
 8011cee:	f63f af7d 	bhi.w	8011bec <_strtod_l+0x19c>
 8011cf2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8011cf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8011cfa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011cfc:	1c5f      	adds	r7, r3, #1
 8011cfe:	971b      	str	r7, [sp, #108]	; 0x6c
 8011d00:	785b      	ldrb	r3, [r3, #1]
 8011d02:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8011d06:	f1b8 0f09 	cmp.w	r8, #9
 8011d0a:	d937      	bls.n	8011d7c <_strtod_l+0x32c>
 8011d0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011d0e:	1a7f      	subs	r7, r7, r1
 8011d10:	2f08      	cmp	r7, #8
 8011d12:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8011d16:	dc37      	bgt.n	8011d88 <_strtod_l+0x338>
 8011d18:	45be      	cmp	lr, r7
 8011d1a:	bfa8      	it	ge
 8011d1c:	46be      	movge	lr, r7
 8011d1e:	f1bc 0f00 	cmp.w	ip, #0
 8011d22:	d001      	beq.n	8011d28 <_strtod_l+0x2d8>
 8011d24:	f1ce 0e00 	rsb	lr, lr, #0
 8011d28:	2c00      	cmp	r4, #0
 8011d2a:	d151      	bne.n	8011dd0 <_strtod_l+0x380>
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	f47f aece 	bne.w	8011ace <_strtod_l+0x7e>
 8011d32:	9a06      	ldr	r2, [sp, #24]
 8011d34:	2a00      	cmp	r2, #0
 8011d36:	f47f aeca 	bne.w	8011ace <_strtod_l+0x7e>
 8011d3a:	9a04      	ldr	r2, [sp, #16]
 8011d3c:	2a00      	cmp	r2, #0
 8011d3e:	f47f aee4 	bne.w	8011b0a <_strtod_l+0xba>
 8011d42:	2b4e      	cmp	r3, #78	; 0x4e
 8011d44:	d027      	beq.n	8011d96 <_strtod_l+0x346>
 8011d46:	dc21      	bgt.n	8011d8c <_strtod_l+0x33c>
 8011d48:	2b49      	cmp	r3, #73	; 0x49
 8011d4a:	f47f aede 	bne.w	8011b0a <_strtod_l+0xba>
 8011d4e:	49a0      	ldr	r1, [pc, #640]	; (8011fd0 <_strtod_l+0x580>)
 8011d50:	a81b      	add	r0, sp, #108	; 0x6c
 8011d52:	f001 fdd7 	bl	8013904 <__match>
 8011d56:	2800      	cmp	r0, #0
 8011d58:	f43f aed7 	beq.w	8011b0a <_strtod_l+0xba>
 8011d5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011d5e:	499d      	ldr	r1, [pc, #628]	; (8011fd4 <_strtod_l+0x584>)
 8011d60:	3b01      	subs	r3, #1
 8011d62:	a81b      	add	r0, sp, #108	; 0x6c
 8011d64:	931b      	str	r3, [sp, #108]	; 0x6c
 8011d66:	f001 fdcd 	bl	8013904 <__match>
 8011d6a:	b910      	cbnz	r0, 8011d72 <_strtod_l+0x322>
 8011d6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011d6e:	3301      	adds	r3, #1
 8011d70:	931b      	str	r3, [sp, #108]	; 0x6c
 8011d72:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011fe8 <_strtod_l+0x598>
 8011d76:	f04f 0a00 	mov.w	sl, #0
 8011d7a:	e6a8      	b.n	8011ace <_strtod_l+0x7e>
 8011d7c:	210a      	movs	r1, #10
 8011d7e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011d82:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011d86:	e7b8      	b.n	8011cfa <_strtod_l+0x2aa>
 8011d88:	46be      	mov	lr, r7
 8011d8a:	e7c8      	b.n	8011d1e <_strtod_l+0x2ce>
 8011d8c:	2b69      	cmp	r3, #105	; 0x69
 8011d8e:	d0de      	beq.n	8011d4e <_strtod_l+0x2fe>
 8011d90:	2b6e      	cmp	r3, #110	; 0x6e
 8011d92:	f47f aeba 	bne.w	8011b0a <_strtod_l+0xba>
 8011d96:	4990      	ldr	r1, [pc, #576]	; (8011fd8 <_strtod_l+0x588>)
 8011d98:	a81b      	add	r0, sp, #108	; 0x6c
 8011d9a:	f001 fdb3 	bl	8013904 <__match>
 8011d9e:	2800      	cmp	r0, #0
 8011da0:	f43f aeb3 	beq.w	8011b0a <_strtod_l+0xba>
 8011da4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011da6:	781b      	ldrb	r3, [r3, #0]
 8011da8:	2b28      	cmp	r3, #40	; 0x28
 8011daa:	d10e      	bne.n	8011dca <_strtod_l+0x37a>
 8011dac:	aa1e      	add	r2, sp, #120	; 0x78
 8011dae:	498b      	ldr	r1, [pc, #556]	; (8011fdc <_strtod_l+0x58c>)
 8011db0:	a81b      	add	r0, sp, #108	; 0x6c
 8011db2:	f001 fdbb 	bl	801392c <__hexnan>
 8011db6:	2805      	cmp	r0, #5
 8011db8:	d107      	bne.n	8011dca <_strtod_l+0x37a>
 8011dba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011dbc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011dc0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011dc4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011dc8:	e681      	b.n	8011ace <_strtod_l+0x7e>
 8011dca:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011ff0 <_strtod_l+0x5a0>
 8011dce:	e7d2      	b.n	8011d76 <_strtod_l+0x326>
 8011dd0:	ebae 0302 	sub.w	r3, lr, r2
 8011dd4:	9306      	str	r3, [sp, #24]
 8011dd6:	9b05      	ldr	r3, [sp, #20]
 8011dd8:	9807      	ldr	r0, [sp, #28]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	bf08      	it	eq
 8011dde:	4623      	moveq	r3, r4
 8011de0:	2c10      	cmp	r4, #16
 8011de2:	9305      	str	r3, [sp, #20]
 8011de4:	46a0      	mov	r8, r4
 8011de6:	bfa8      	it	ge
 8011de8:	f04f 0810 	movge.w	r8, #16
 8011dec:	f7ee fb8a 	bl	8000504 <__aeabi_ui2d>
 8011df0:	2c09      	cmp	r4, #9
 8011df2:	4682      	mov	sl, r0
 8011df4:	468b      	mov	fp, r1
 8011df6:	dc13      	bgt.n	8011e20 <_strtod_l+0x3d0>
 8011df8:	9b06      	ldr	r3, [sp, #24]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	f43f ae67 	beq.w	8011ace <_strtod_l+0x7e>
 8011e00:	9b06      	ldr	r3, [sp, #24]
 8011e02:	dd7a      	ble.n	8011efa <_strtod_l+0x4aa>
 8011e04:	2b16      	cmp	r3, #22
 8011e06:	dc61      	bgt.n	8011ecc <_strtod_l+0x47c>
 8011e08:	4a75      	ldr	r2, [pc, #468]	; (8011fe0 <_strtod_l+0x590>)
 8011e0a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011e0e:	e9de 0100 	ldrd	r0, r1, [lr]
 8011e12:	4652      	mov	r2, sl
 8011e14:	465b      	mov	r3, fp
 8011e16:	f7ee fbef 	bl	80005f8 <__aeabi_dmul>
 8011e1a:	4682      	mov	sl, r0
 8011e1c:	468b      	mov	fp, r1
 8011e1e:	e656      	b.n	8011ace <_strtod_l+0x7e>
 8011e20:	4b6f      	ldr	r3, [pc, #444]	; (8011fe0 <_strtod_l+0x590>)
 8011e22:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8011e26:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011e2a:	f7ee fbe5 	bl	80005f8 <__aeabi_dmul>
 8011e2e:	4606      	mov	r6, r0
 8011e30:	4628      	mov	r0, r5
 8011e32:	460f      	mov	r7, r1
 8011e34:	f7ee fb66 	bl	8000504 <__aeabi_ui2d>
 8011e38:	4602      	mov	r2, r0
 8011e3a:	460b      	mov	r3, r1
 8011e3c:	4630      	mov	r0, r6
 8011e3e:	4639      	mov	r1, r7
 8011e40:	f7ee fa24 	bl	800028c <__adddf3>
 8011e44:	2c0f      	cmp	r4, #15
 8011e46:	4682      	mov	sl, r0
 8011e48:	468b      	mov	fp, r1
 8011e4a:	ddd5      	ble.n	8011df8 <_strtod_l+0x3a8>
 8011e4c:	9b06      	ldr	r3, [sp, #24]
 8011e4e:	eba4 0808 	sub.w	r8, r4, r8
 8011e52:	4498      	add	r8, r3
 8011e54:	f1b8 0f00 	cmp.w	r8, #0
 8011e58:	f340 8096 	ble.w	8011f88 <_strtod_l+0x538>
 8011e5c:	f018 030f 	ands.w	r3, r8, #15
 8011e60:	d00a      	beq.n	8011e78 <_strtod_l+0x428>
 8011e62:	495f      	ldr	r1, [pc, #380]	; (8011fe0 <_strtod_l+0x590>)
 8011e64:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011e68:	4652      	mov	r2, sl
 8011e6a:	465b      	mov	r3, fp
 8011e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011e70:	f7ee fbc2 	bl	80005f8 <__aeabi_dmul>
 8011e74:	4682      	mov	sl, r0
 8011e76:	468b      	mov	fp, r1
 8011e78:	f038 080f 	bics.w	r8, r8, #15
 8011e7c:	d073      	beq.n	8011f66 <_strtod_l+0x516>
 8011e7e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011e82:	dd47      	ble.n	8011f14 <_strtod_l+0x4c4>
 8011e84:	2400      	movs	r4, #0
 8011e86:	46a0      	mov	r8, r4
 8011e88:	9407      	str	r4, [sp, #28]
 8011e8a:	9405      	str	r4, [sp, #20]
 8011e8c:	2322      	movs	r3, #34	; 0x22
 8011e8e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011fe8 <_strtod_l+0x598>
 8011e92:	f8c9 3000 	str.w	r3, [r9]
 8011e96:	f04f 0a00 	mov.w	sl, #0
 8011e9a:	9b07      	ldr	r3, [sp, #28]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	f43f ae16 	beq.w	8011ace <_strtod_l+0x7e>
 8011ea2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011ea4:	4648      	mov	r0, r9
 8011ea6:	f001 fe2d 	bl	8013b04 <_Bfree>
 8011eaa:	9905      	ldr	r1, [sp, #20]
 8011eac:	4648      	mov	r0, r9
 8011eae:	f001 fe29 	bl	8013b04 <_Bfree>
 8011eb2:	4641      	mov	r1, r8
 8011eb4:	4648      	mov	r0, r9
 8011eb6:	f001 fe25 	bl	8013b04 <_Bfree>
 8011eba:	9907      	ldr	r1, [sp, #28]
 8011ebc:	4648      	mov	r0, r9
 8011ebe:	f001 fe21 	bl	8013b04 <_Bfree>
 8011ec2:	4621      	mov	r1, r4
 8011ec4:	4648      	mov	r0, r9
 8011ec6:	f001 fe1d 	bl	8013b04 <_Bfree>
 8011eca:	e600      	b.n	8011ace <_strtod_l+0x7e>
 8011ecc:	9a06      	ldr	r2, [sp, #24]
 8011ece:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8011ed2:	4293      	cmp	r3, r2
 8011ed4:	dbba      	blt.n	8011e4c <_strtod_l+0x3fc>
 8011ed6:	4d42      	ldr	r5, [pc, #264]	; (8011fe0 <_strtod_l+0x590>)
 8011ed8:	f1c4 040f 	rsb	r4, r4, #15
 8011edc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011ee0:	4652      	mov	r2, sl
 8011ee2:	465b      	mov	r3, fp
 8011ee4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011ee8:	f7ee fb86 	bl	80005f8 <__aeabi_dmul>
 8011eec:	9b06      	ldr	r3, [sp, #24]
 8011eee:	1b1c      	subs	r4, r3, r4
 8011ef0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8011ef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011ef8:	e78d      	b.n	8011e16 <_strtod_l+0x3c6>
 8011efa:	f113 0f16 	cmn.w	r3, #22
 8011efe:	dba5      	blt.n	8011e4c <_strtod_l+0x3fc>
 8011f00:	4a37      	ldr	r2, [pc, #220]	; (8011fe0 <_strtod_l+0x590>)
 8011f02:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8011f06:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011f0a:	4650      	mov	r0, sl
 8011f0c:	4659      	mov	r1, fp
 8011f0e:	f7ee fc9d 	bl	800084c <__aeabi_ddiv>
 8011f12:	e782      	b.n	8011e1a <_strtod_l+0x3ca>
 8011f14:	2300      	movs	r3, #0
 8011f16:	4e33      	ldr	r6, [pc, #204]	; (8011fe4 <_strtod_l+0x594>)
 8011f18:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011f1c:	4650      	mov	r0, sl
 8011f1e:	4659      	mov	r1, fp
 8011f20:	461d      	mov	r5, r3
 8011f22:	f1b8 0f01 	cmp.w	r8, #1
 8011f26:	dc21      	bgt.n	8011f6c <_strtod_l+0x51c>
 8011f28:	b10b      	cbz	r3, 8011f2e <_strtod_l+0x4de>
 8011f2a:	4682      	mov	sl, r0
 8011f2c:	468b      	mov	fp, r1
 8011f2e:	4b2d      	ldr	r3, [pc, #180]	; (8011fe4 <_strtod_l+0x594>)
 8011f30:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011f34:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011f38:	4652      	mov	r2, sl
 8011f3a:	465b      	mov	r3, fp
 8011f3c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011f40:	f7ee fb5a 	bl	80005f8 <__aeabi_dmul>
 8011f44:	4b28      	ldr	r3, [pc, #160]	; (8011fe8 <_strtod_l+0x598>)
 8011f46:	460a      	mov	r2, r1
 8011f48:	400b      	ands	r3, r1
 8011f4a:	4928      	ldr	r1, [pc, #160]	; (8011fec <_strtod_l+0x59c>)
 8011f4c:	428b      	cmp	r3, r1
 8011f4e:	4682      	mov	sl, r0
 8011f50:	d898      	bhi.n	8011e84 <_strtod_l+0x434>
 8011f52:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011f56:	428b      	cmp	r3, r1
 8011f58:	bf86      	itte	hi
 8011f5a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011ff4 <_strtod_l+0x5a4>
 8011f5e:	f04f 3aff 	movhi.w	sl, #4294967295
 8011f62:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011f66:	2300      	movs	r3, #0
 8011f68:	9304      	str	r3, [sp, #16]
 8011f6a:	e077      	b.n	801205c <_strtod_l+0x60c>
 8011f6c:	f018 0f01 	tst.w	r8, #1
 8011f70:	d006      	beq.n	8011f80 <_strtod_l+0x530>
 8011f72:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8011f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7a:	f7ee fb3d 	bl	80005f8 <__aeabi_dmul>
 8011f7e:	2301      	movs	r3, #1
 8011f80:	3501      	adds	r5, #1
 8011f82:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011f86:	e7cc      	b.n	8011f22 <_strtod_l+0x4d2>
 8011f88:	d0ed      	beq.n	8011f66 <_strtod_l+0x516>
 8011f8a:	f1c8 0800 	rsb	r8, r8, #0
 8011f8e:	f018 020f 	ands.w	r2, r8, #15
 8011f92:	d00a      	beq.n	8011faa <_strtod_l+0x55a>
 8011f94:	4b12      	ldr	r3, [pc, #72]	; (8011fe0 <_strtod_l+0x590>)
 8011f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011f9a:	4650      	mov	r0, sl
 8011f9c:	4659      	mov	r1, fp
 8011f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa2:	f7ee fc53 	bl	800084c <__aeabi_ddiv>
 8011fa6:	4682      	mov	sl, r0
 8011fa8:	468b      	mov	fp, r1
 8011faa:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011fae:	d0da      	beq.n	8011f66 <_strtod_l+0x516>
 8011fb0:	f1b8 0f1f 	cmp.w	r8, #31
 8011fb4:	dd20      	ble.n	8011ff8 <_strtod_l+0x5a8>
 8011fb6:	2400      	movs	r4, #0
 8011fb8:	46a0      	mov	r8, r4
 8011fba:	9407      	str	r4, [sp, #28]
 8011fbc:	9405      	str	r4, [sp, #20]
 8011fbe:	2322      	movs	r3, #34	; 0x22
 8011fc0:	f04f 0a00 	mov.w	sl, #0
 8011fc4:	f04f 0b00 	mov.w	fp, #0
 8011fc8:	f8c9 3000 	str.w	r3, [r9]
 8011fcc:	e765      	b.n	8011e9a <_strtod_l+0x44a>
 8011fce:	bf00      	nop
 8011fd0:	08014fb1 	.word	0x08014fb1
 8011fd4:	0801503b 	.word	0x0801503b
 8011fd8:	08014fb9 	.word	0x08014fb9
 8011fdc:	08014ffc 	.word	0x08014ffc
 8011fe0:	08015078 	.word	0x08015078
 8011fe4:	08015050 	.word	0x08015050
 8011fe8:	7ff00000 	.word	0x7ff00000
 8011fec:	7ca00000 	.word	0x7ca00000
 8011ff0:	fff80000 	.word	0xfff80000
 8011ff4:	7fefffff 	.word	0x7fefffff
 8011ff8:	f018 0310 	ands.w	r3, r8, #16
 8011ffc:	bf18      	it	ne
 8011ffe:	236a      	movne	r3, #106	; 0x6a
 8012000:	4da0      	ldr	r5, [pc, #640]	; (8012284 <_strtod_l+0x834>)
 8012002:	9304      	str	r3, [sp, #16]
 8012004:	4650      	mov	r0, sl
 8012006:	4659      	mov	r1, fp
 8012008:	2300      	movs	r3, #0
 801200a:	f1b8 0f00 	cmp.w	r8, #0
 801200e:	f300 810a 	bgt.w	8012226 <_strtod_l+0x7d6>
 8012012:	b10b      	cbz	r3, 8012018 <_strtod_l+0x5c8>
 8012014:	4682      	mov	sl, r0
 8012016:	468b      	mov	fp, r1
 8012018:	9b04      	ldr	r3, [sp, #16]
 801201a:	b1bb      	cbz	r3, 801204c <_strtod_l+0x5fc>
 801201c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8012020:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012024:	2b00      	cmp	r3, #0
 8012026:	4659      	mov	r1, fp
 8012028:	dd10      	ble.n	801204c <_strtod_l+0x5fc>
 801202a:	2b1f      	cmp	r3, #31
 801202c:	f340 8107 	ble.w	801223e <_strtod_l+0x7ee>
 8012030:	2b34      	cmp	r3, #52	; 0x34
 8012032:	bfde      	ittt	le
 8012034:	3b20      	suble	r3, #32
 8012036:	f04f 32ff 	movle.w	r2, #4294967295
 801203a:	fa02 f303 	lslle.w	r3, r2, r3
 801203e:	f04f 0a00 	mov.w	sl, #0
 8012042:	bfcc      	ite	gt
 8012044:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8012048:	ea03 0b01 	andle.w	fp, r3, r1
 801204c:	2200      	movs	r2, #0
 801204e:	2300      	movs	r3, #0
 8012050:	4650      	mov	r0, sl
 8012052:	4659      	mov	r1, fp
 8012054:	f7ee fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8012058:	2800      	cmp	r0, #0
 801205a:	d1ac      	bne.n	8011fb6 <_strtod_l+0x566>
 801205c:	9b07      	ldr	r3, [sp, #28]
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	9a05      	ldr	r2, [sp, #20]
 8012062:	9908      	ldr	r1, [sp, #32]
 8012064:	4623      	mov	r3, r4
 8012066:	4648      	mov	r0, r9
 8012068:	f001 fd9e 	bl	8013ba8 <__s2b>
 801206c:	9007      	str	r0, [sp, #28]
 801206e:	2800      	cmp	r0, #0
 8012070:	f43f af08 	beq.w	8011e84 <_strtod_l+0x434>
 8012074:	9a06      	ldr	r2, [sp, #24]
 8012076:	9b06      	ldr	r3, [sp, #24]
 8012078:	2a00      	cmp	r2, #0
 801207a:	f1c3 0300 	rsb	r3, r3, #0
 801207e:	bfa8      	it	ge
 8012080:	2300      	movge	r3, #0
 8012082:	930e      	str	r3, [sp, #56]	; 0x38
 8012084:	2400      	movs	r4, #0
 8012086:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801208a:	9316      	str	r3, [sp, #88]	; 0x58
 801208c:	46a0      	mov	r8, r4
 801208e:	9b07      	ldr	r3, [sp, #28]
 8012090:	4648      	mov	r0, r9
 8012092:	6859      	ldr	r1, [r3, #4]
 8012094:	f001 fd02 	bl	8013a9c <_Balloc>
 8012098:	9005      	str	r0, [sp, #20]
 801209a:	2800      	cmp	r0, #0
 801209c:	f43f aef6 	beq.w	8011e8c <_strtod_l+0x43c>
 80120a0:	9b07      	ldr	r3, [sp, #28]
 80120a2:	691a      	ldr	r2, [r3, #16]
 80120a4:	3202      	adds	r2, #2
 80120a6:	f103 010c 	add.w	r1, r3, #12
 80120aa:	0092      	lsls	r2, r2, #2
 80120ac:	300c      	adds	r0, #12
 80120ae:	f7fe fd81 	bl	8010bb4 <memcpy>
 80120b2:	aa1e      	add	r2, sp, #120	; 0x78
 80120b4:	a91d      	add	r1, sp, #116	; 0x74
 80120b6:	ec4b ab10 	vmov	d0, sl, fp
 80120ba:	4648      	mov	r0, r9
 80120bc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80120c0:	f002 f82e 	bl	8014120 <__d2b>
 80120c4:	901c      	str	r0, [sp, #112]	; 0x70
 80120c6:	2800      	cmp	r0, #0
 80120c8:	f43f aee0 	beq.w	8011e8c <_strtod_l+0x43c>
 80120cc:	2101      	movs	r1, #1
 80120ce:	4648      	mov	r0, r9
 80120d0:	f001 fdf6 	bl	8013cc0 <__i2b>
 80120d4:	4680      	mov	r8, r0
 80120d6:	2800      	cmp	r0, #0
 80120d8:	f43f aed8 	beq.w	8011e8c <_strtod_l+0x43c>
 80120dc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80120de:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80120e0:	2e00      	cmp	r6, #0
 80120e2:	bfab      	itete	ge
 80120e4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80120e6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80120e8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80120ea:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80120ec:	bfac      	ite	ge
 80120ee:	18f7      	addge	r7, r6, r3
 80120f0:	1b9d      	sublt	r5, r3, r6
 80120f2:	9b04      	ldr	r3, [sp, #16]
 80120f4:	1af6      	subs	r6, r6, r3
 80120f6:	4416      	add	r6, r2
 80120f8:	4b63      	ldr	r3, [pc, #396]	; (8012288 <_strtod_l+0x838>)
 80120fa:	3e01      	subs	r6, #1
 80120fc:	429e      	cmp	r6, r3
 80120fe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8012102:	f280 80af 	bge.w	8012264 <_strtod_l+0x814>
 8012106:	1b9b      	subs	r3, r3, r6
 8012108:	2b1f      	cmp	r3, #31
 801210a:	eba2 0203 	sub.w	r2, r2, r3
 801210e:	f04f 0101 	mov.w	r1, #1
 8012112:	f300 809b 	bgt.w	801224c <_strtod_l+0x7fc>
 8012116:	fa01 f303 	lsl.w	r3, r1, r3
 801211a:	930f      	str	r3, [sp, #60]	; 0x3c
 801211c:	2300      	movs	r3, #0
 801211e:	930a      	str	r3, [sp, #40]	; 0x28
 8012120:	18be      	adds	r6, r7, r2
 8012122:	9b04      	ldr	r3, [sp, #16]
 8012124:	42b7      	cmp	r7, r6
 8012126:	4415      	add	r5, r2
 8012128:	441d      	add	r5, r3
 801212a:	463b      	mov	r3, r7
 801212c:	bfa8      	it	ge
 801212e:	4633      	movge	r3, r6
 8012130:	42ab      	cmp	r3, r5
 8012132:	bfa8      	it	ge
 8012134:	462b      	movge	r3, r5
 8012136:	2b00      	cmp	r3, #0
 8012138:	bfc2      	ittt	gt
 801213a:	1af6      	subgt	r6, r6, r3
 801213c:	1aed      	subgt	r5, r5, r3
 801213e:	1aff      	subgt	r7, r7, r3
 8012140:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012142:	b1bb      	cbz	r3, 8012174 <_strtod_l+0x724>
 8012144:	4641      	mov	r1, r8
 8012146:	461a      	mov	r2, r3
 8012148:	4648      	mov	r0, r9
 801214a:	f001 fe59 	bl	8013e00 <__pow5mult>
 801214e:	4680      	mov	r8, r0
 8012150:	2800      	cmp	r0, #0
 8012152:	f43f ae9b 	beq.w	8011e8c <_strtod_l+0x43c>
 8012156:	4601      	mov	r1, r0
 8012158:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801215a:	4648      	mov	r0, r9
 801215c:	f001 fdb9 	bl	8013cd2 <__multiply>
 8012160:	900c      	str	r0, [sp, #48]	; 0x30
 8012162:	2800      	cmp	r0, #0
 8012164:	f43f ae92 	beq.w	8011e8c <_strtod_l+0x43c>
 8012168:	991c      	ldr	r1, [sp, #112]	; 0x70
 801216a:	4648      	mov	r0, r9
 801216c:	f001 fcca 	bl	8013b04 <_Bfree>
 8012170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012172:	931c      	str	r3, [sp, #112]	; 0x70
 8012174:	2e00      	cmp	r6, #0
 8012176:	dc7a      	bgt.n	801226e <_strtod_l+0x81e>
 8012178:	9b06      	ldr	r3, [sp, #24]
 801217a:	2b00      	cmp	r3, #0
 801217c:	dd08      	ble.n	8012190 <_strtod_l+0x740>
 801217e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012180:	9905      	ldr	r1, [sp, #20]
 8012182:	4648      	mov	r0, r9
 8012184:	f001 fe3c 	bl	8013e00 <__pow5mult>
 8012188:	9005      	str	r0, [sp, #20]
 801218a:	2800      	cmp	r0, #0
 801218c:	f43f ae7e 	beq.w	8011e8c <_strtod_l+0x43c>
 8012190:	2d00      	cmp	r5, #0
 8012192:	dd08      	ble.n	80121a6 <_strtod_l+0x756>
 8012194:	462a      	mov	r2, r5
 8012196:	9905      	ldr	r1, [sp, #20]
 8012198:	4648      	mov	r0, r9
 801219a:	f001 fe7f 	bl	8013e9c <__lshift>
 801219e:	9005      	str	r0, [sp, #20]
 80121a0:	2800      	cmp	r0, #0
 80121a2:	f43f ae73 	beq.w	8011e8c <_strtod_l+0x43c>
 80121a6:	2f00      	cmp	r7, #0
 80121a8:	dd08      	ble.n	80121bc <_strtod_l+0x76c>
 80121aa:	4641      	mov	r1, r8
 80121ac:	463a      	mov	r2, r7
 80121ae:	4648      	mov	r0, r9
 80121b0:	f001 fe74 	bl	8013e9c <__lshift>
 80121b4:	4680      	mov	r8, r0
 80121b6:	2800      	cmp	r0, #0
 80121b8:	f43f ae68 	beq.w	8011e8c <_strtod_l+0x43c>
 80121bc:	9a05      	ldr	r2, [sp, #20]
 80121be:	991c      	ldr	r1, [sp, #112]	; 0x70
 80121c0:	4648      	mov	r0, r9
 80121c2:	f001 fed9 	bl	8013f78 <__mdiff>
 80121c6:	4604      	mov	r4, r0
 80121c8:	2800      	cmp	r0, #0
 80121ca:	f43f ae5f 	beq.w	8011e8c <_strtod_l+0x43c>
 80121ce:	68c3      	ldr	r3, [r0, #12]
 80121d0:	930c      	str	r3, [sp, #48]	; 0x30
 80121d2:	2300      	movs	r3, #0
 80121d4:	60c3      	str	r3, [r0, #12]
 80121d6:	4641      	mov	r1, r8
 80121d8:	f001 feb4 	bl	8013f44 <__mcmp>
 80121dc:	2800      	cmp	r0, #0
 80121de:	da55      	bge.n	801228c <_strtod_l+0x83c>
 80121e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80121e2:	b9e3      	cbnz	r3, 801221e <_strtod_l+0x7ce>
 80121e4:	f1ba 0f00 	cmp.w	sl, #0
 80121e8:	d119      	bne.n	801221e <_strtod_l+0x7ce>
 80121ea:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80121ee:	b9b3      	cbnz	r3, 801221e <_strtod_l+0x7ce>
 80121f0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80121f4:	0d1b      	lsrs	r3, r3, #20
 80121f6:	051b      	lsls	r3, r3, #20
 80121f8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80121fc:	d90f      	bls.n	801221e <_strtod_l+0x7ce>
 80121fe:	6963      	ldr	r3, [r4, #20]
 8012200:	b913      	cbnz	r3, 8012208 <_strtod_l+0x7b8>
 8012202:	6923      	ldr	r3, [r4, #16]
 8012204:	2b01      	cmp	r3, #1
 8012206:	dd0a      	ble.n	801221e <_strtod_l+0x7ce>
 8012208:	4621      	mov	r1, r4
 801220a:	2201      	movs	r2, #1
 801220c:	4648      	mov	r0, r9
 801220e:	f001 fe45 	bl	8013e9c <__lshift>
 8012212:	4641      	mov	r1, r8
 8012214:	4604      	mov	r4, r0
 8012216:	f001 fe95 	bl	8013f44 <__mcmp>
 801221a:	2800      	cmp	r0, #0
 801221c:	dc67      	bgt.n	80122ee <_strtod_l+0x89e>
 801221e:	9b04      	ldr	r3, [sp, #16]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d171      	bne.n	8012308 <_strtod_l+0x8b8>
 8012224:	e63d      	b.n	8011ea2 <_strtod_l+0x452>
 8012226:	f018 0f01 	tst.w	r8, #1
 801222a:	d004      	beq.n	8012236 <_strtod_l+0x7e6>
 801222c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012230:	f7ee f9e2 	bl	80005f8 <__aeabi_dmul>
 8012234:	2301      	movs	r3, #1
 8012236:	ea4f 0868 	mov.w	r8, r8, asr #1
 801223a:	3508      	adds	r5, #8
 801223c:	e6e5      	b.n	801200a <_strtod_l+0x5ba>
 801223e:	f04f 32ff 	mov.w	r2, #4294967295
 8012242:	fa02 f303 	lsl.w	r3, r2, r3
 8012246:	ea03 0a0a 	and.w	sl, r3, sl
 801224a:	e6ff      	b.n	801204c <_strtod_l+0x5fc>
 801224c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012250:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012254:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012258:	36e2      	adds	r6, #226	; 0xe2
 801225a:	fa01 f306 	lsl.w	r3, r1, r6
 801225e:	930a      	str	r3, [sp, #40]	; 0x28
 8012260:	910f      	str	r1, [sp, #60]	; 0x3c
 8012262:	e75d      	b.n	8012120 <_strtod_l+0x6d0>
 8012264:	2300      	movs	r3, #0
 8012266:	930a      	str	r3, [sp, #40]	; 0x28
 8012268:	2301      	movs	r3, #1
 801226a:	930f      	str	r3, [sp, #60]	; 0x3c
 801226c:	e758      	b.n	8012120 <_strtod_l+0x6d0>
 801226e:	4632      	mov	r2, r6
 8012270:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012272:	4648      	mov	r0, r9
 8012274:	f001 fe12 	bl	8013e9c <__lshift>
 8012278:	901c      	str	r0, [sp, #112]	; 0x70
 801227a:	2800      	cmp	r0, #0
 801227c:	f47f af7c 	bne.w	8012178 <_strtod_l+0x728>
 8012280:	e604      	b.n	8011e8c <_strtod_l+0x43c>
 8012282:	bf00      	nop
 8012284:	08015010 	.word	0x08015010
 8012288:	fffffc02 	.word	0xfffffc02
 801228c:	465d      	mov	r5, fp
 801228e:	f040 8086 	bne.w	801239e <_strtod_l+0x94e>
 8012292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012298:	b32a      	cbz	r2, 80122e6 <_strtod_l+0x896>
 801229a:	4aaf      	ldr	r2, [pc, #700]	; (8012558 <_strtod_l+0xb08>)
 801229c:	4293      	cmp	r3, r2
 801229e:	d153      	bne.n	8012348 <_strtod_l+0x8f8>
 80122a0:	9b04      	ldr	r3, [sp, #16]
 80122a2:	4650      	mov	r0, sl
 80122a4:	b1d3      	cbz	r3, 80122dc <_strtod_l+0x88c>
 80122a6:	4aad      	ldr	r2, [pc, #692]	; (801255c <_strtod_l+0xb0c>)
 80122a8:	402a      	ands	r2, r5
 80122aa:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80122ae:	f04f 31ff 	mov.w	r1, #4294967295
 80122b2:	d816      	bhi.n	80122e2 <_strtod_l+0x892>
 80122b4:	0d12      	lsrs	r2, r2, #20
 80122b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80122ba:	fa01 f303 	lsl.w	r3, r1, r3
 80122be:	4298      	cmp	r0, r3
 80122c0:	d142      	bne.n	8012348 <_strtod_l+0x8f8>
 80122c2:	4ba7      	ldr	r3, [pc, #668]	; (8012560 <_strtod_l+0xb10>)
 80122c4:	429d      	cmp	r5, r3
 80122c6:	d102      	bne.n	80122ce <_strtod_l+0x87e>
 80122c8:	3001      	adds	r0, #1
 80122ca:	f43f addf 	beq.w	8011e8c <_strtod_l+0x43c>
 80122ce:	4ba3      	ldr	r3, [pc, #652]	; (801255c <_strtod_l+0xb0c>)
 80122d0:	402b      	ands	r3, r5
 80122d2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80122d6:	f04f 0a00 	mov.w	sl, #0
 80122da:	e7a0      	b.n	801221e <_strtod_l+0x7ce>
 80122dc:	f04f 33ff 	mov.w	r3, #4294967295
 80122e0:	e7ed      	b.n	80122be <_strtod_l+0x86e>
 80122e2:	460b      	mov	r3, r1
 80122e4:	e7eb      	b.n	80122be <_strtod_l+0x86e>
 80122e6:	bb7b      	cbnz	r3, 8012348 <_strtod_l+0x8f8>
 80122e8:	f1ba 0f00 	cmp.w	sl, #0
 80122ec:	d12c      	bne.n	8012348 <_strtod_l+0x8f8>
 80122ee:	9904      	ldr	r1, [sp, #16]
 80122f0:	4a9a      	ldr	r2, [pc, #616]	; (801255c <_strtod_l+0xb0c>)
 80122f2:	465b      	mov	r3, fp
 80122f4:	b1f1      	cbz	r1, 8012334 <_strtod_l+0x8e4>
 80122f6:	ea02 010b 	and.w	r1, r2, fp
 80122fa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80122fe:	dc19      	bgt.n	8012334 <_strtod_l+0x8e4>
 8012300:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012304:	f77f ae5b 	ble.w	8011fbe <_strtod_l+0x56e>
 8012308:	4a96      	ldr	r2, [pc, #600]	; (8012564 <_strtod_l+0xb14>)
 801230a:	2300      	movs	r3, #0
 801230c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8012310:	4650      	mov	r0, sl
 8012312:	4659      	mov	r1, fp
 8012314:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8012318:	f7ee f96e 	bl	80005f8 <__aeabi_dmul>
 801231c:	4682      	mov	sl, r0
 801231e:	468b      	mov	fp, r1
 8012320:	2900      	cmp	r1, #0
 8012322:	f47f adbe 	bne.w	8011ea2 <_strtod_l+0x452>
 8012326:	2800      	cmp	r0, #0
 8012328:	f47f adbb 	bne.w	8011ea2 <_strtod_l+0x452>
 801232c:	2322      	movs	r3, #34	; 0x22
 801232e:	f8c9 3000 	str.w	r3, [r9]
 8012332:	e5b6      	b.n	8011ea2 <_strtod_l+0x452>
 8012334:	4013      	ands	r3, r2
 8012336:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801233a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801233e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8012342:	f04f 3aff 	mov.w	sl, #4294967295
 8012346:	e76a      	b.n	801221e <_strtod_l+0x7ce>
 8012348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801234a:	b193      	cbz	r3, 8012372 <_strtod_l+0x922>
 801234c:	422b      	tst	r3, r5
 801234e:	f43f af66 	beq.w	801221e <_strtod_l+0x7ce>
 8012352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012354:	9a04      	ldr	r2, [sp, #16]
 8012356:	4650      	mov	r0, sl
 8012358:	4659      	mov	r1, fp
 801235a:	b173      	cbz	r3, 801237a <_strtod_l+0x92a>
 801235c:	f7ff fb5a 	bl	8011a14 <sulp>
 8012360:	4602      	mov	r2, r0
 8012362:	460b      	mov	r3, r1
 8012364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012368:	f7ed ff90 	bl	800028c <__adddf3>
 801236c:	4682      	mov	sl, r0
 801236e:	468b      	mov	fp, r1
 8012370:	e755      	b.n	801221e <_strtod_l+0x7ce>
 8012372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012374:	ea13 0f0a 	tst.w	r3, sl
 8012378:	e7e9      	b.n	801234e <_strtod_l+0x8fe>
 801237a:	f7ff fb4b 	bl	8011a14 <sulp>
 801237e:	4602      	mov	r2, r0
 8012380:	460b      	mov	r3, r1
 8012382:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012386:	f7ed ff7f 	bl	8000288 <__aeabi_dsub>
 801238a:	2200      	movs	r2, #0
 801238c:	2300      	movs	r3, #0
 801238e:	4682      	mov	sl, r0
 8012390:	468b      	mov	fp, r1
 8012392:	f7ee fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 8012396:	2800      	cmp	r0, #0
 8012398:	f47f ae11 	bne.w	8011fbe <_strtod_l+0x56e>
 801239c:	e73f      	b.n	801221e <_strtod_l+0x7ce>
 801239e:	4641      	mov	r1, r8
 80123a0:	4620      	mov	r0, r4
 80123a2:	f001 ff0c 	bl	80141be <__ratio>
 80123a6:	ec57 6b10 	vmov	r6, r7, d0
 80123aa:	2200      	movs	r2, #0
 80123ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80123b0:	ee10 0a10 	vmov	r0, s0
 80123b4:	4639      	mov	r1, r7
 80123b6:	f7ee fb9b 	bl	8000af0 <__aeabi_dcmple>
 80123ba:	2800      	cmp	r0, #0
 80123bc:	d077      	beq.n	80124ae <_strtod_l+0xa5e>
 80123be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d04a      	beq.n	801245a <_strtod_l+0xa0a>
 80123c4:	4b68      	ldr	r3, [pc, #416]	; (8012568 <_strtod_l+0xb18>)
 80123c6:	2200      	movs	r2, #0
 80123c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80123cc:	4f66      	ldr	r7, [pc, #408]	; (8012568 <_strtod_l+0xb18>)
 80123ce:	2600      	movs	r6, #0
 80123d0:	4b62      	ldr	r3, [pc, #392]	; (801255c <_strtod_l+0xb0c>)
 80123d2:	402b      	ands	r3, r5
 80123d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80123d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80123d8:	4b64      	ldr	r3, [pc, #400]	; (801256c <_strtod_l+0xb1c>)
 80123da:	429a      	cmp	r2, r3
 80123dc:	f040 80ce 	bne.w	801257c <_strtod_l+0xb2c>
 80123e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80123e4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80123e8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80123ec:	ec4b ab10 	vmov	d0, sl, fp
 80123f0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80123f4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80123f8:	f001 fe1c 	bl	8014034 <__ulp>
 80123fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8012400:	ec53 2b10 	vmov	r2, r3, d0
 8012404:	f7ee f8f8 	bl	80005f8 <__aeabi_dmul>
 8012408:	4652      	mov	r2, sl
 801240a:	465b      	mov	r3, fp
 801240c:	f7ed ff3e 	bl	800028c <__adddf3>
 8012410:	460b      	mov	r3, r1
 8012412:	4952      	ldr	r1, [pc, #328]	; (801255c <_strtod_l+0xb0c>)
 8012414:	4a56      	ldr	r2, [pc, #344]	; (8012570 <_strtod_l+0xb20>)
 8012416:	4019      	ands	r1, r3
 8012418:	4291      	cmp	r1, r2
 801241a:	4682      	mov	sl, r0
 801241c:	d95b      	bls.n	80124d6 <_strtod_l+0xa86>
 801241e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012420:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8012424:	4293      	cmp	r3, r2
 8012426:	d103      	bne.n	8012430 <_strtod_l+0x9e0>
 8012428:	9b08      	ldr	r3, [sp, #32]
 801242a:	3301      	adds	r3, #1
 801242c:	f43f ad2e 	beq.w	8011e8c <_strtod_l+0x43c>
 8012430:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8012560 <_strtod_l+0xb10>
 8012434:	f04f 3aff 	mov.w	sl, #4294967295
 8012438:	991c      	ldr	r1, [sp, #112]	; 0x70
 801243a:	4648      	mov	r0, r9
 801243c:	f001 fb62 	bl	8013b04 <_Bfree>
 8012440:	9905      	ldr	r1, [sp, #20]
 8012442:	4648      	mov	r0, r9
 8012444:	f001 fb5e 	bl	8013b04 <_Bfree>
 8012448:	4641      	mov	r1, r8
 801244a:	4648      	mov	r0, r9
 801244c:	f001 fb5a 	bl	8013b04 <_Bfree>
 8012450:	4621      	mov	r1, r4
 8012452:	4648      	mov	r0, r9
 8012454:	f001 fb56 	bl	8013b04 <_Bfree>
 8012458:	e619      	b.n	801208e <_strtod_l+0x63e>
 801245a:	f1ba 0f00 	cmp.w	sl, #0
 801245e:	d11a      	bne.n	8012496 <_strtod_l+0xa46>
 8012460:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012464:	b9eb      	cbnz	r3, 80124a2 <_strtod_l+0xa52>
 8012466:	2200      	movs	r2, #0
 8012468:	4b3f      	ldr	r3, [pc, #252]	; (8012568 <_strtod_l+0xb18>)
 801246a:	4630      	mov	r0, r6
 801246c:	4639      	mov	r1, r7
 801246e:	f7ee fb35 	bl	8000adc <__aeabi_dcmplt>
 8012472:	b9c8      	cbnz	r0, 80124a8 <_strtod_l+0xa58>
 8012474:	4630      	mov	r0, r6
 8012476:	4639      	mov	r1, r7
 8012478:	2200      	movs	r2, #0
 801247a:	4b3e      	ldr	r3, [pc, #248]	; (8012574 <_strtod_l+0xb24>)
 801247c:	f7ee f8bc 	bl	80005f8 <__aeabi_dmul>
 8012480:	4606      	mov	r6, r0
 8012482:	460f      	mov	r7, r1
 8012484:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012488:	9618      	str	r6, [sp, #96]	; 0x60
 801248a:	9319      	str	r3, [sp, #100]	; 0x64
 801248c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8012490:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012494:	e79c      	b.n	80123d0 <_strtod_l+0x980>
 8012496:	f1ba 0f01 	cmp.w	sl, #1
 801249a:	d102      	bne.n	80124a2 <_strtod_l+0xa52>
 801249c:	2d00      	cmp	r5, #0
 801249e:	f43f ad8e 	beq.w	8011fbe <_strtod_l+0x56e>
 80124a2:	2200      	movs	r2, #0
 80124a4:	4b34      	ldr	r3, [pc, #208]	; (8012578 <_strtod_l+0xb28>)
 80124a6:	e78f      	b.n	80123c8 <_strtod_l+0x978>
 80124a8:	2600      	movs	r6, #0
 80124aa:	4f32      	ldr	r7, [pc, #200]	; (8012574 <_strtod_l+0xb24>)
 80124ac:	e7ea      	b.n	8012484 <_strtod_l+0xa34>
 80124ae:	4b31      	ldr	r3, [pc, #196]	; (8012574 <_strtod_l+0xb24>)
 80124b0:	4630      	mov	r0, r6
 80124b2:	4639      	mov	r1, r7
 80124b4:	2200      	movs	r2, #0
 80124b6:	f7ee f89f 	bl	80005f8 <__aeabi_dmul>
 80124ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124bc:	4606      	mov	r6, r0
 80124be:	460f      	mov	r7, r1
 80124c0:	b933      	cbnz	r3, 80124d0 <_strtod_l+0xa80>
 80124c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80124c6:	9010      	str	r0, [sp, #64]	; 0x40
 80124c8:	9311      	str	r3, [sp, #68]	; 0x44
 80124ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80124ce:	e7df      	b.n	8012490 <_strtod_l+0xa40>
 80124d0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80124d4:	e7f9      	b.n	80124ca <_strtod_l+0xa7a>
 80124d6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80124da:	9b04      	ldr	r3, [sp, #16]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d1ab      	bne.n	8012438 <_strtod_l+0x9e8>
 80124e0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80124e4:	0d1b      	lsrs	r3, r3, #20
 80124e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80124e8:	051b      	lsls	r3, r3, #20
 80124ea:	429a      	cmp	r2, r3
 80124ec:	465d      	mov	r5, fp
 80124ee:	d1a3      	bne.n	8012438 <_strtod_l+0x9e8>
 80124f0:	4639      	mov	r1, r7
 80124f2:	4630      	mov	r0, r6
 80124f4:	f7ee fb30 	bl	8000b58 <__aeabi_d2iz>
 80124f8:	f7ee f814 	bl	8000524 <__aeabi_i2d>
 80124fc:	460b      	mov	r3, r1
 80124fe:	4602      	mov	r2, r0
 8012500:	4639      	mov	r1, r7
 8012502:	4630      	mov	r0, r6
 8012504:	f7ed fec0 	bl	8000288 <__aeabi_dsub>
 8012508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801250a:	4606      	mov	r6, r0
 801250c:	460f      	mov	r7, r1
 801250e:	b933      	cbnz	r3, 801251e <_strtod_l+0xace>
 8012510:	f1ba 0f00 	cmp.w	sl, #0
 8012514:	d103      	bne.n	801251e <_strtod_l+0xace>
 8012516:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801251a:	2d00      	cmp	r5, #0
 801251c:	d06d      	beq.n	80125fa <_strtod_l+0xbaa>
 801251e:	a30a      	add	r3, pc, #40	; (adr r3, 8012548 <_strtod_l+0xaf8>)
 8012520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012524:	4630      	mov	r0, r6
 8012526:	4639      	mov	r1, r7
 8012528:	f7ee fad8 	bl	8000adc <__aeabi_dcmplt>
 801252c:	2800      	cmp	r0, #0
 801252e:	f47f acb8 	bne.w	8011ea2 <_strtod_l+0x452>
 8012532:	a307      	add	r3, pc, #28	; (adr r3, 8012550 <_strtod_l+0xb00>)
 8012534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012538:	4630      	mov	r0, r6
 801253a:	4639      	mov	r1, r7
 801253c:	f7ee faec 	bl	8000b18 <__aeabi_dcmpgt>
 8012540:	2800      	cmp	r0, #0
 8012542:	f43f af79 	beq.w	8012438 <_strtod_l+0x9e8>
 8012546:	e4ac      	b.n	8011ea2 <_strtod_l+0x452>
 8012548:	94a03595 	.word	0x94a03595
 801254c:	3fdfffff 	.word	0x3fdfffff
 8012550:	35afe535 	.word	0x35afe535
 8012554:	3fe00000 	.word	0x3fe00000
 8012558:	000fffff 	.word	0x000fffff
 801255c:	7ff00000 	.word	0x7ff00000
 8012560:	7fefffff 	.word	0x7fefffff
 8012564:	39500000 	.word	0x39500000
 8012568:	3ff00000 	.word	0x3ff00000
 801256c:	7fe00000 	.word	0x7fe00000
 8012570:	7c9fffff 	.word	0x7c9fffff
 8012574:	3fe00000 	.word	0x3fe00000
 8012578:	bff00000 	.word	0xbff00000
 801257c:	9b04      	ldr	r3, [sp, #16]
 801257e:	b333      	cbz	r3, 80125ce <_strtod_l+0xb7e>
 8012580:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012582:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012586:	d822      	bhi.n	80125ce <_strtod_l+0xb7e>
 8012588:	a327      	add	r3, pc, #156	; (adr r3, 8012628 <_strtod_l+0xbd8>)
 801258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258e:	4630      	mov	r0, r6
 8012590:	4639      	mov	r1, r7
 8012592:	f7ee faad 	bl	8000af0 <__aeabi_dcmple>
 8012596:	b1a0      	cbz	r0, 80125c2 <_strtod_l+0xb72>
 8012598:	4639      	mov	r1, r7
 801259a:	4630      	mov	r0, r6
 801259c:	f7ee fb04 	bl	8000ba8 <__aeabi_d2uiz>
 80125a0:	2800      	cmp	r0, #0
 80125a2:	bf08      	it	eq
 80125a4:	2001      	moveq	r0, #1
 80125a6:	f7ed ffad 	bl	8000504 <__aeabi_ui2d>
 80125aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125ac:	4606      	mov	r6, r0
 80125ae:	460f      	mov	r7, r1
 80125b0:	bb03      	cbnz	r3, 80125f4 <_strtod_l+0xba4>
 80125b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80125b6:	9012      	str	r0, [sp, #72]	; 0x48
 80125b8:	9313      	str	r3, [sp, #76]	; 0x4c
 80125ba:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80125be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80125c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80125c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80125c6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80125ca:	1a9b      	subs	r3, r3, r2
 80125cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80125ce:	ed9d 0b08 	vldr	d0, [sp, #32]
 80125d2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80125d6:	f001 fd2d 	bl	8014034 <__ulp>
 80125da:	4650      	mov	r0, sl
 80125dc:	ec53 2b10 	vmov	r2, r3, d0
 80125e0:	4659      	mov	r1, fp
 80125e2:	f7ee f809 	bl	80005f8 <__aeabi_dmul>
 80125e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80125ea:	f7ed fe4f 	bl	800028c <__adddf3>
 80125ee:	4682      	mov	sl, r0
 80125f0:	468b      	mov	fp, r1
 80125f2:	e772      	b.n	80124da <_strtod_l+0xa8a>
 80125f4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80125f8:	e7df      	b.n	80125ba <_strtod_l+0xb6a>
 80125fa:	a30d      	add	r3, pc, #52	; (adr r3, 8012630 <_strtod_l+0xbe0>)
 80125fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012600:	f7ee fa6c 	bl	8000adc <__aeabi_dcmplt>
 8012604:	e79c      	b.n	8012540 <_strtod_l+0xaf0>
 8012606:	2300      	movs	r3, #0
 8012608:	930d      	str	r3, [sp, #52]	; 0x34
 801260a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801260c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801260e:	6013      	str	r3, [r2, #0]
 8012610:	f7ff ba61 	b.w	8011ad6 <_strtod_l+0x86>
 8012614:	2b65      	cmp	r3, #101	; 0x65
 8012616:	f04f 0200 	mov.w	r2, #0
 801261a:	f43f ab4e 	beq.w	8011cba <_strtod_l+0x26a>
 801261e:	2101      	movs	r1, #1
 8012620:	4614      	mov	r4, r2
 8012622:	9104      	str	r1, [sp, #16]
 8012624:	f7ff bacb 	b.w	8011bbe <_strtod_l+0x16e>
 8012628:	ffc00000 	.word	0xffc00000
 801262c:	41dfffff 	.word	0x41dfffff
 8012630:	94a03595 	.word	0x94a03595
 8012634:	3fcfffff 	.word	0x3fcfffff

08012638 <_strtod_r>:
 8012638:	4b05      	ldr	r3, [pc, #20]	; (8012650 <_strtod_r+0x18>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	b410      	push	{r4}
 801263e:	6a1b      	ldr	r3, [r3, #32]
 8012640:	4c04      	ldr	r4, [pc, #16]	; (8012654 <_strtod_r+0x1c>)
 8012642:	2b00      	cmp	r3, #0
 8012644:	bf08      	it	eq
 8012646:	4623      	moveq	r3, r4
 8012648:	f85d 4b04 	ldr.w	r4, [sp], #4
 801264c:	f7ff ba00 	b.w	8011a50 <_strtod_l>
 8012650:	20000190 	.word	0x20000190
 8012654:	200001f4 	.word	0x200001f4

08012658 <_strtol_l.isra.0>:
 8012658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801265c:	4680      	mov	r8, r0
 801265e:	4689      	mov	r9, r1
 8012660:	4692      	mov	sl, r2
 8012662:	461e      	mov	r6, r3
 8012664:	460f      	mov	r7, r1
 8012666:	463d      	mov	r5, r7
 8012668:	9808      	ldr	r0, [sp, #32]
 801266a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801266e:	f001 f9ed 	bl	8013a4c <__locale_ctype_ptr_l>
 8012672:	4420      	add	r0, r4
 8012674:	7843      	ldrb	r3, [r0, #1]
 8012676:	f013 0308 	ands.w	r3, r3, #8
 801267a:	d132      	bne.n	80126e2 <_strtol_l.isra.0+0x8a>
 801267c:	2c2d      	cmp	r4, #45	; 0x2d
 801267e:	d132      	bne.n	80126e6 <_strtol_l.isra.0+0x8e>
 8012680:	787c      	ldrb	r4, [r7, #1]
 8012682:	1cbd      	adds	r5, r7, #2
 8012684:	2201      	movs	r2, #1
 8012686:	2e00      	cmp	r6, #0
 8012688:	d05d      	beq.n	8012746 <_strtol_l.isra.0+0xee>
 801268a:	2e10      	cmp	r6, #16
 801268c:	d109      	bne.n	80126a2 <_strtol_l.isra.0+0x4a>
 801268e:	2c30      	cmp	r4, #48	; 0x30
 8012690:	d107      	bne.n	80126a2 <_strtol_l.isra.0+0x4a>
 8012692:	782b      	ldrb	r3, [r5, #0]
 8012694:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012698:	2b58      	cmp	r3, #88	; 0x58
 801269a:	d14f      	bne.n	801273c <_strtol_l.isra.0+0xe4>
 801269c:	786c      	ldrb	r4, [r5, #1]
 801269e:	2610      	movs	r6, #16
 80126a0:	3502      	adds	r5, #2
 80126a2:	2a00      	cmp	r2, #0
 80126a4:	bf14      	ite	ne
 80126a6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80126aa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80126ae:	2700      	movs	r7, #0
 80126b0:	fbb1 fcf6 	udiv	ip, r1, r6
 80126b4:	4638      	mov	r0, r7
 80126b6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80126ba:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80126be:	2b09      	cmp	r3, #9
 80126c0:	d817      	bhi.n	80126f2 <_strtol_l.isra.0+0x9a>
 80126c2:	461c      	mov	r4, r3
 80126c4:	42a6      	cmp	r6, r4
 80126c6:	dd23      	ble.n	8012710 <_strtol_l.isra.0+0xb8>
 80126c8:	1c7b      	adds	r3, r7, #1
 80126ca:	d007      	beq.n	80126dc <_strtol_l.isra.0+0x84>
 80126cc:	4584      	cmp	ip, r0
 80126ce:	d31c      	bcc.n	801270a <_strtol_l.isra.0+0xb2>
 80126d0:	d101      	bne.n	80126d6 <_strtol_l.isra.0+0x7e>
 80126d2:	45a6      	cmp	lr, r4
 80126d4:	db19      	blt.n	801270a <_strtol_l.isra.0+0xb2>
 80126d6:	fb00 4006 	mla	r0, r0, r6, r4
 80126da:	2701      	movs	r7, #1
 80126dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80126e0:	e7eb      	b.n	80126ba <_strtol_l.isra.0+0x62>
 80126e2:	462f      	mov	r7, r5
 80126e4:	e7bf      	b.n	8012666 <_strtol_l.isra.0+0xe>
 80126e6:	2c2b      	cmp	r4, #43	; 0x2b
 80126e8:	bf04      	itt	eq
 80126ea:	1cbd      	addeq	r5, r7, #2
 80126ec:	787c      	ldrbeq	r4, [r7, #1]
 80126ee:	461a      	mov	r2, r3
 80126f0:	e7c9      	b.n	8012686 <_strtol_l.isra.0+0x2e>
 80126f2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80126f6:	2b19      	cmp	r3, #25
 80126f8:	d801      	bhi.n	80126fe <_strtol_l.isra.0+0xa6>
 80126fa:	3c37      	subs	r4, #55	; 0x37
 80126fc:	e7e2      	b.n	80126c4 <_strtol_l.isra.0+0x6c>
 80126fe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8012702:	2b19      	cmp	r3, #25
 8012704:	d804      	bhi.n	8012710 <_strtol_l.isra.0+0xb8>
 8012706:	3c57      	subs	r4, #87	; 0x57
 8012708:	e7dc      	b.n	80126c4 <_strtol_l.isra.0+0x6c>
 801270a:	f04f 37ff 	mov.w	r7, #4294967295
 801270e:	e7e5      	b.n	80126dc <_strtol_l.isra.0+0x84>
 8012710:	1c7b      	adds	r3, r7, #1
 8012712:	d108      	bne.n	8012726 <_strtol_l.isra.0+0xce>
 8012714:	2322      	movs	r3, #34	; 0x22
 8012716:	f8c8 3000 	str.w	r3, [r8]
 801271a:	4608      	mov	r0, r1
 801271c:	f1ba 0f00 	cmp.w	sl, #0
 8012720:	d107      	bne.n	8012732 <_strtol_l.isra.0+0xda>
 8012722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012726:	b102      	cbz	r2, 801272a <_strtol_l.isra.0+0xd2>
 8012728:	4240      	negs	r0, r0
 801272a:	f1ba 0f00 	cmp.w	sl, #0
 801272e:	d0f8      	beq.n	8012722 <_strtol_l.isra.0+0xca>
 8012730:	b10f      	cbz	r7, 8012736 <_strtol_l.isra.0+0xde>
 8012732:	f105 39ff 	add.w	r9, r5, #4294967295
 8012736:	f8ca 9000 	str.w	r9, [sl]
 801273a:	e7f2      	b.n	8012722 <_strtol_l.isra.0+0xca>
 801273c:	2430      	movs	r4, #48	; 0x30
 801273e:	2e00      	cmp	r6, #0
 8012740:	d1af      	bne.n	80126a2 <_strtol_l.isra.0+0x4a>
 8012742:	2608      	movs	r6, #8
 8012744:	e7ad      	b.n	80126a2 <_strtol_l.isra.0+0x4a>
 8012746:	2c30      	cmp	r4, #48	; 0x30
 8012748:	d0a3      	beq.n	8012692 <_strtol_l.isra.0+0x3a>
 801274a:	260a      	movs	r6, #10
 801274c:	e7a9      	b.n	80126a2 <_strtol_l.isra.0+0x4a>
	...

08012750 <_strtol_r>:
 8012750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012752:	4c06      	ldr	r4, [pc, #24]	; (801276c <_strtol_r+0x1c>)
 8012754:	4d06      	ldr	r5, [pc, #24]	; (8012770 <_strtol_r+0x20>)
 8012756:	6824      	ldr	r4, [r4, #0]
 8012758:	6a24      	ldr	r4, [r4, #32]
 801275a:	2c00      	cmp	r4, #0
 801275c:	bf08      	it	eq
 801275e:	462c      	moveq	r4, r5
 8012760:	9400      	str	r4, [sp, #0]
 8012762:	f7ff ff79 	bl	8012658 <_strtol_l.isra.0>
 8012766:	b003      	add	sp, #12
 8012768:	bd30      	pop	{r4, r5, pc}
 801276a:	bf00      	nop
 801276c:	20000190 	.word	0x20000190
 8012770:	200001f4 	.word	0x200001f4

08012774 <quorem>:
 8012774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012778:	6903      	ldr	r3, [r0, #16]
 801277a:	690c      	ldr	r4, [r1, #16]
 801277c:	42a3      	cmp	r3, r4
 801277e:	4680      	mov	r8, r0
 8012780:	f2c0 8082 	blt.w	8012888 <quorem+0x114>
 8012784:	3c01      	subs	r4, #1
 8012786:	f101 0714 	add.w	r7, r1, #20
 801278a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801278e:	f100 0614 	add.w	r6, r0, #20
 8012792:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012796:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801279a:	eb06 030c 	add.w	r3, r6, ip
 801279e:	3501      	adds	r5, #1
 80127a0:	eb07 090c 	add.w	r9, r7, ip
 80127a4:	9301      	str	r3, [sp, #4]
 80127a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80127aa:	b395      	cbz	r5, 8012812 <quorem+0x9e>
 80127ac:	f04f 0a00 	mov.w	sl, #0
 80127b0:	4638      	mov	r0, r7
 80127b2:	46b6      	mov	lr, r6
 80127b4:	46d3      	mov	fp, sl
 80127b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80127ba:	b293      	uxth	r3, r2
 80127bc:	fb05 a303 	mla	r3, r5, r3, sl
 80127c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80127c4:	b29b      	uxth	r3, r3
 80127c6:	ebab 0303 	sub.w	r3, fp, r3
 80127ca:	0c12      	lsrs	r2, r2, #16
 80127cc:	f8de b000 	ldr.w	fp, [lr]
 80127d0:	fb05 a202 	mla	r2, r5, r2, sl
 80127d4:	fa13 f38b 	uxtah	r3, r3, fp
 80127d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80127dc:	fa1f fb82 	uxth.w	fp, r2
 80127e0:	f8de 2000 	ldr.w	r2, [lr]
 80127e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80127e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80127f2:	4581      	cmp	r9, r0
 80127f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80127f8:	f84e 3b04 	str.w	r3, [lr], #4
 80127fc:	d2db      	bcs.n	80127b6 <quorem+0x42>
 80127fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8012802:	b933      	cbnz	r3, 8012812 <quorem+0x9e>
 8012804:	9b01      	ldr	r3, [sp, #4]
 8012806:	3b04      	subs	r3, #4
 8012808:	429e      	cmp	r6, r3
 801280a:	461a      	mov	r2, r3
 801280c:	d330      	bcc.n	8012870 <quorem+0xfc>
 801280e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012812:	4640      	mov	r0, r8
 8012814:	f001 fb96 	bl	8013f44 <__mcmp>
 8012818:	2800      	cmp	r0, #0
 801281a:	db25      	blt.n	8012868 <quorem+0xf4>
 801281c:	3501      	adds	r5, #1
 801281e:	4630      	mov	r0, r6
 8012820:	f04f 0c00 	mov.w	ip, #0
 8012824:	f857 2b04 	ldr.w	r2, [r7], #4
 8012828:	f8d0 e000 	ldr.w	lr, [r0]
 801282c:	b293      	uxth	r3, r2
 801282e:	ebac 0303 	sub.w	r3, ip, r3
 8012832:	0c12      	lsrs	r2, r2, #16
 8012834:	fa13 f38e 	uxtah	r3, r3, lr
 8012838:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801283c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012840:	b29b      	uxth	r3, r3
 8012842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012846:	45b9      	cmp	r9, r7
 8012848:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801284c:	f840 3b04 	str.w	r3, [r0], #4
 8012850:	d2e8      	bcs.n	8012824 <quorem+0xb0>
 8012852:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012856:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801285a:	b92a      	cbnz	r2, 8012868 <quorem+0xf4>
 801285c:	3b04      	subs	r3, #4
 801285e:	429e      	cmp	r6, r3
 8012860:	461a      	mov	r2, r3
 8012862:	d30b      	bcc.n	801287c <quorem+0x108>
 8012864:	f8c8 4010 	str.w	r4, [r8, #16]
 8012868:	4628      	mov	r0, r5
 801286a:	b003      	add	sp, #12
 801286c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012870:	6812      	ldr	r2, [r2, #0]
 8012872:	3b04      	subs	r3, #4
 8012874:	2a00      	cmp	r2, #0
 8012876:	d1ca      	bne.n	801280e <quorem+0x9a>
 8012878:	3c01      	subs	r4, #1
 801287a:	e7c5      	b.n	8012808 <quorem+0x94>
 801287c:	6812      	ldr	r2, [r2, #0]
 801287e:	3b04      	subs	r3, #4
 8012880:	2a00      	cmp	r2, #0
 8012882:	d1ef      	bne.n	8012864 <quorem+0xf0>
 8012884:	3c01      	subs	r4, #1
 8012886:	e7ea      	b.n	801285e <quorem+0xea>
 8012888:	2000      	movs	r0, #0
 801288a:	e7ee      	b.n	801286a <quorem+0xf6>
 801288c:	0000      	movs	r0, r0
	...

08012890 <_dtoa_r>:
 8012890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012894:	ec57 6b10 	vmov	r6, r7, d0
 8012898:	b097      	sub	sp, #92	; 0x5c
 801289a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801289c:	9106      	str	r1, [sp, #24]
 801289e:	4604      	mov	r4, r0
 80128a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80128a2:	9312      	str	r3, [sp, #72]	; 0x48
 80128a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80128a8:	e9cd 6700 	strd	r6, r7, [sp]
 80128ac:	b93d      	cbnz	r5, 80128be <_dtoa_r+0x2e>
 80128ae:	2010      	movs	r0, #16
 80128b0:	f7fe f970 	bl	8010b94 <malloc>
 80128b4:	6260      	str	r0, [r4, #36]	; 0x24
 80128b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80128ba:	6005      	str	r5, [r0, #0]
 80128bc:	60c5      	str	r5, [r0, #12]
 80128be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128c0:	6819      	ldr	r1, [r3, #0]
 80128c2:	b151      	cbz	r1, 80128da <_dtoa_r+0x4a>
 80128c4:	685a      	ldr	r2, [r3, #4]
 80128c6:	604a      	str	r2, [r1, #4]
 80128c8:	2301      	movs	r3, #1
 80128ca:	4093      	lsls	r3, r2
 80128cc:	608b      	str	r3, [r1, #8]
 80128ce:	4620      	mov	r0, r4
 80128d0:	f001 f918 	bl	8013b04 <_Bfree>
 80128d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80128d6:	2200      	movs	r2, #0
 80128d8:	601a      	str	r2, [r3, #0]
 80128da:	1e3b      	subs	r3, r7, #0
 80128dc:	bfbb      	ittet	lt
 80128de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80128e2:	9301      	strlt	r3, [sp, #4]
 80128e4:	2300      	movge	r3, #0
 80128e6:	2201      	movlt	r2, #1
 80128e8:	bfac      	ite	ge
 80128ea:	f8c8 3000 	strge.w	r3, [r8]
 80128ee:	f8c8 2000 	strlt.w	r2, [r8]
 80128f2:	4baf      	ldr	r3, [pc, #700]	; (8012bb0 <_dtoa_r+0x320>)
 80128f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80128f8:	ea33 0308 	bics.w	r3, r3, r8
 80128fc:	d114      	bne.n	8012928 <_dtoa_r+0x98>
 80128fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012900:	f242 730f 	movw	r3, #9999	; 0x270f
 8012904:	6013      	str	r3, [r2, #0]
 8012906:	9b00      	ldr	r3, [sp, #0]
 8012908:	b923      	cbnz	r3, 8012914 <_dtoa_r+0x84>
 801290a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801290e:	2800      	cmp	r0, #0
 8012910:	f000 8542 	beq.w	8013398 <_dtoa_r+0xb08>
 8012914:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012916:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012bc4 <_dtoa_r+0x334>
 801291a:	2b00      	cmp	r3, #0
 801291c:	f000 8544 	beq.w	80133a8 <_dtoa_r+0xb18>
 8012920:	f10b 0303 	add.w	r3, fp, #3
 8012924:	f000 bd3e 	b.w	80133a4 <_dtoa_r+0xb14>
 8012928:	e9dd 6700 	ldrd	r6, r7, [sp]
 801292c:	2200      	movs	r2, #0
 801292e:	2300      	movs	r3, #0
 8012930:	4630      	mov	r0, r6
 8012932:	4639      	mov	r1, r7
 8012934:	f7ee f8c8 	bl	8000ac8 <__aeabi_dcmpeq>
 8012938:	4681      	mov	r9, r0
 801293a:	b168      	cbz	r0, 8012958 <_dtoa_r+0xc8>
 801293c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801293e:	2301      	movs	r3, #1
 8012940:	6013      	str	r3, [r2, #0]
 8012942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012944:	2b00      	cmp	r3, #0
 8012946:	f000 8524 	beq.w	8013392 <_dtoa_r+0xb02>
 801294a:	4b9a      	ldr	r3, [pc, #616]	; (8012bb4 <_dtoa_r+0x324>)
 801294c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801294e:	f103 3bff 	add.w	fp, r3, #4294967295
 8012952:	6013      	str	r3, [r2, #0]
 8012954:	f000 bd28 	b.w	80133a8 <_dtoa_r+0xb18>
 8012958:	aa14      	add	r2, sp, #80	; 0x50
 801295a:	a915      	add	r1, sp, #84	; 0x54
 801295c:	ec47 6b10 	vmov	d0, r6, r7
 8012960:	4620      	mov	r0, r4
 8012962:	f001 fbdd 	bl	8014120 <__d2b>
 8012966:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801296a:	9004      	str	r0, [sp, #16]
 801296c:	2d00      	cmp	r5, #0
 801296e:	d07c      	beq.n	8012a6a <_dtoa_r+0x1da>
 8012970:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012974:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012978:	46b2      	mov	sl, r6
 801297a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801297e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012982:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012986:	2200      	movs	r2, #0
 8012988:	4b8b      	ldr	r3, [pc, #556]	; (8012bb8 <_dtoa_r+0x328>)
 801298a:	4650      	mov	r0, sl
 801298c:	4659      	mov	r1, fp
 801298e:	f7ed fc7b 	bl	8000288 <__aeabi_dsub>
 8012992:	a381      	add	r3, pc, #516	; (adr r3, 8012b98 <_dtoa_r+0x308>)
 8012994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012998:	f7ed fe2e 	bl	80005f8 <__aeabi_dmul>
 801299c:	a380      	add	r3, pc, #512	; (adr r3, 8012ba0 <_dtoa_r+0x310>)
 801299e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129a2:	f7ed fc73 	bl	800028c <__adddf3>
 80129a6:	4606      	mov	r6, r0
 80129a8:	4628      	mov	r0, r5
 80129aa:	460f      	mov	r7, r1
 80129ac:	f7ed fdba 	bl	8000524 <__aeabi_i2d>
 80129b0:	a37d      	add	r3, pc, #500	; (adr r3, 8012ba8 <_dtoa_r+0x318>)
 80129b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129b6:	f7ed fe1f 	bl	80005f8 <__aeabi_dmul>
 80129ba:	4602      	mov	r2, r0
 80129bc:	460b      	mov	r3, r1
 80129be:	4630      	mov	r0, r6
 80129c0:	4639      	mov	r1, r7
 80129c2:	f7ed fc63 	bl	800028c <__adddf3>
 80129c6:	4606      	mov	r6, r0
 80129c8:	460f      	mov	r7, r1
 80129ca:	f7ee f8c5 	bl	8000b58 <__aeabi_d2iz>
 80129ce:	2200      	movs	r2, #0
 80129d0:	4682      	mov	sl, r0
 80129d2:	2300      	movs	r3, #0
 80129d4:	4630      	mov	r0, r6
 80129d6:	4639      	mov	r1, r7
 80129d8:	f7ee f880 	bl	8000adc <__aeabi_dcmplt>
 80129dc:	b148      	cbz	r0, 80129f2 <_dtoa_r+0x162>
 80129de:	4650      	mov	r0, sl
 80129e0:	f7ed fda0 	bl	8000524 <__aeabi_i2d>
 80129e4:	4632      	mov	r2, r6
 80129e6:	463b      	mov	r3, r7
 80129e8:	f7ee f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 80129ec:	b908      	cbnz	r0, 80129f2 <_dtoa_r+0x162>
 80129ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80129f2:	f1ba 0f16 	cmp.w	sl, #22
 80129f6:	d859      	bhi.n	8012aac <_dtoa_r+0x21c>
 80129f8:	4970      	ldr	r1, [pc, #448]	; (8012bbc <_dtoa_r+0x32c>)
 80129fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80129fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012a06:	f7ee f887 	bl	8000b18 <__aeabi_dcmpgt>
 8012a0a:	2800      	cmp	r0, #0
 8012a0c:	d050      	beq.n	8012ab0 <_dtoa_r+0x220>
 8012a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012a12:	2300      	movs	r3, #0
 8012a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8012a16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012a18:	1b5d      	subs	r5, r3, r5
 8012a1a:	f1b5 0801 	subs.w	r8, r5, #1
 8012a1e:	bf49      	itett	mi
 8012a20:	f1c5 0301 	rsbmi	r3, r5, #1
 8012a24:	2300      	movpl	r3, #0
 8012a26:	9305      	strmi	r3, [sp, #20]
 8012a28:	f04f 0800 	movmi.w	r8, #0
 8012a2c:	bf58      	it	pl
 8012a2e:	9305      	strpl	r3, [sp, #20]
 8012a30:	f1ba 0f00 	cmp.w	sl, #0
 8012a34:	db3e      	blt.n	8012ab4 <_dtoa_r+0x224>
 8012a36:	2300      	movs	r3, #0
 8012a38:	44d0      	add	r8, sl
 8012a3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012a3e:	9307      	str	r3, [sp, #28]
 8012a40:	9b06      	ldr	r3, [sp, #24]
 8012a42:	2b09      	cmp	r3, #9
 8012a44:	f200 8090 	bhi.w	8012b68 <_dtoa_r+0x2d8>
 8012a48:	2b05      	cmp	r3, #5
 8012a4a:	bfc4      	itt	gt
 8012a4c:	3b04      	subgt	r3, #4
 8012a4e:	9306      	strgt	r3, [sp, #24]
 8012a50:	9b06      	ldr	r3, [sp, #24]
 8012a52:	f1a3 0302 	sub.w	r3, r3, #2
 8012a56:	bfcc      	ite	gt
 8012a58:	2500      	movgt	r5, #0
 8012a5a:	2501      	movle	r5, #1
 8012a5c:	2b03      	cmp	r3, #3
 8012a5e:	f200 808f 	bhi.w	8012b80 <_dtoa_r+0x2f0>
 8012a62:	e8df f003 	tbb	[pc, r3]
 8012a66:	7f7d      	.short	0x7f7d
 8012a68:	7131      	.short	0x7131
 8012a6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012a6e:	441d      	add	r5, r3
 8012a70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012a74:	2820      	cmp	r0, #32
 8012a76:	dd13      	ble.n	8012aa0 <_dtoa_r+0x210>
 8012a78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012a7c:	9b00      	ldr	r3, [sp, #0]
 8012a7e:	fa08 f800 	lsl.w	r8, r8, r0
 8012a82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012a86:	fa23 f000 	lsr.w	r0, r3, r0
 8012a8a:	ea48 0000 	orr.w	r0, r8, r0
 8012a8e:	f7ed fd39 	bl	8000504 <__aeabi_ui2d>
 8012a92:	2301      	movs	r3, #1
 8012a94:	4682      	mov	sl, r0
 8012a96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012a9a:	3d01      	subs	r5, #1
 8012a9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8012a9e:	e772      	b.n	8012986 <_dtoa_r+0xf6>
 8012aa0:	9b00      	ldr	r3, [sp, #0]
 8012aa2:	f1c0 0020 	rsb	r0, r0, #32
 8012aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8012aaa:	e7f0      	b.n	8012a8e <_dtoa_r+0x1fe>
 8012aac:	2301      	movs	r3, #1
 8012aae:	e7b1      	b.n	8012a14 <_dtoa_r+0x184>
 8012ab0:	900f      	str	r0, [sp, #60]	; 0x3c
 8012ab2:	e7b0      	b.n	8012a16 <_dtoa_r+0x186>
 8012ab4:	9b05      	ldr	r3, [sp, #20]
 8012ab6:	eba3 030a 	sub.w	r3, r3, sl
 8012aba:	9305      	str	r3, [sp, #20]
 8012abc:	f1ca 0300 	rsb	r3, sl, #0
 8012ac0:	9307      	str	r3, [sp, #28]
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8012ac6:	e7bb      	b.n	8012a40 <_dtoa_r+0x1b0>
 8012ac8:	2301      	movs	r3, #1
 8012aca:	930a      	str	r3, [sp, #40]	; 0x28
 8012acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	dd59      	ble.n	8012b86 <_dtoa_r+0x2f6>
 8012ad2:	9302      	str	r3, [sp, #8]
 8012ad4:	4699      	mov	r9, r3
 8012ad6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012ad8:	2200      	movs	r2, #0
 8012ada:	6072      	str	r2, [r6, #4]
 8012adc:	2204      	movs	r2, #4
 8012ade:	f102 0014 	add.w	r0, r2, #20
 8012ae2:	4298      	cmp	r0, r3
 8012ae4:	6871      	ldr	r1, [r6, #4]
 8012ae6:	d953      	bls.n	8012b90 <_dtoa_r+0x300>
 8012ae8:	4620      	mov	r0, r4
 8012aea:	f000 ffd7 	bl	8013a9c <_Balloc>
 8012aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012af0:	6030      	str	r0, [r6, #0]
 8012af2:	f1b9 0f0e 	cmp.w	r9, #14
 8012af6:	f8d3 b000 	ldr.w	fp, [r3]
 8012afa:	f200 80e6 	bhi.w	8012cca <_dtoa_r+0x43a>
 8012afe:	2d00      	cmp	r5, #0
 8012b00:	f000 80e3 	beq.w	8012cca <_dtoa_r+0x43a>
 8012b04:	ed9d 7b00 	vldr	d7, [sp]
 8012b08:	f1ba 0f00 	cmp.w	sl, #0
 8012b0c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012b10:	dd74      	ble.n	8012bfc <_dtoa_r+0x36c>
 8012b12:	4a2a      	ldr	r2, [pc, #168]	; (8012bbc <_dtoa_r+0x32c>)
 8012b14:	f00a 030f 	and.w	r3, sl, #15
 8012b18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012b1c:	ed93 7b00 	vldr	d7, [r3]
 8012b20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012b24:	06f0      	lsls	r0, r6, #27
 8012b26:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012b2a:	d565      	bpl.n	8012bf8 <_dtoa_r+0x368>
 8012b2c:	4b24      	ldr	r3, [pc, #144]	; (8012bc0 <_dtoa_r+0x330>)
 8012b2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012b32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012b36:	f7ed fe89 	bl	800084c <__aeabi_ddiv>
 8012b3a:	e9cd 0100 	strd	r0, r1, [sp]
 8012b3e:	f006 060f 	and.w	r6, r6, #15
 8012b42:	2503      	movs	r5, #3
 8012b44:	4f1e      	ldr	r7, [pc, #120]	; (8012bc0 <_dtoa_r+0x330>)
 8012b46:	e04c      	b.n	8012be2 <_dtoa_r+0x352>
 8012b48:	2301      	movs	r3, #1
 8012b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8012b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b4e:	4453      	add	r3, sl
 8012b50:	f103 0901 	add.w	r9, r3, #1
 8012b54:	9302      	str	r3, [sp, #8]
 8012b56:	464b      	mov	r3, r9
 8012b58:	2b01      	cmp	r3, #1
 8012b5a:	bfb8      	it	lt
 8012b5c:	2301      	movlt	r3, #1
 8012b5e:	e7ba      	b.n	8012ad6 <_dtoa_r+0x246>
 8012b60:	2300      	movs	r3, #0
 8012b62:	e7b2      	b.n	8012aca <_dtoa_r+0x23a>
 8012b64:	2300      	movs	r3, #0
 8012b66:	e7f0      	b.n	8012b4a <_dtoa_r+0x2ba>
 8012b68:	2501      	movs	r5, #1
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	9306      	str	r3, [sp, #24]
 8012b6e:	950a      	str	r5, [sp, #40]	; 0x28
 8012b70:	f04f 33ff 	mov.w	r3, #4294967295
 8012b74:	9302      	str	r3, [sp, #8]
 8012b76:	4699      	mov	r9, r3
 8012b78:	2200      	movs	r2, #0
 8012b7a:	2312      	movs	r3, #18
 8012b7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8012b7e:	e7aa      	b.n	8012ad6 <_dtoa_r+0x246>
 8012b80:	2301      	movs	r3, #1
 8012b82:	930a      	str	r3, [sp, #40]	; 0x28
 8012b84:	e7f4      	b.n	8012b70 <_dtoa_r+0x2e0>
 8012b86:	2301      	movs	r3, #1
 8012b88:	9302      	str	r3, [sp, #8]
 8012b8a:	4699      	mov	r9, r3
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	e7f5      	b.n	8012b7c <_dtoa_r+0x2ec>
 8012b90:	3101      	adds	r1, #1
 8012b92:	6071      	str	r1, [r6, #4]
 8012b94:	0052      	lsls	r2, r2, #1
 8012b96:	e7a2      	b.n	8012ade <_dtoa_r+0x24e>
 8012b98:	636f4361 	.word	0x636f4361
 8012b9c:	3fd287a7 	.word	0x3fd287a7
 8012ba0:	8b60c8b3 	.word	0x8b60c8b3
 8012ba4:	3fc68a28 	.word	0x3fc68a28
 8012ba8:	509f79fb 	.word	0x509f79fb
 8012bac:	3fd34413 	.word	0x3fd34413
 8012bb0:	7ff00000 	.word	0x7ff00000
 8012bb4:	08014fbd 	.word	0x08014fbd
 8012bb8:	3ff80000 	.word	0x3ff80000
 8012bbc:	08015078 	.word	0x08015078
 8012bc0:	08015050 	.word	0x08015050
 8012bc4:	08015041 	.word	0x08015041
 8012bc8:	07f1      	lsls	r1, r6, #31
 8012bca:	d508      	bpl.n	8012bde <_dtoa_r+0x34e>
 8012bcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012bd4:	f7ed fd10 	bl	80005f8 <__aeabi_dmul>
 8012bd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012bdc:	3501      	adds	r5, #1
 8012bde:	1076      	asrs	r6, r6, #1
 8012be0:	3708      	adds	r7, #8
 8012be2:	2e00      	cmp	r6, #0
 8012be4:	d1f0      	bne.n	8012bc8 <_dtoa_r+0x338>
 8012be6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012bea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012bee:	f7ed fe2d 	bl	800084c <__aeabi_ddiv>
 8012bf2:	e9cd 0100 	strd	r0, r1, [sp]
 8012bf6:	e01a      	b.n	8012c2e <_dtoa_r+0x39e>
 8012bf8:	2502      	movs	r5, #2
 8012bfa:	e7a3      	b.n	8012b44 <_dtoa_r+0x2b4>
 8012bfc:	f000 80a0 	beq.w	8012d40 <_dtoa_r+0x4b0>
 8012c00:	f1ca 0600 	rsb	r6, sl, #0
 8012c04:	4b9f      	ldr	r3, [pc, #636]	; (8012e84 <_dtoa_r+0x5f4>)
 8012c06:	4fa0      	ldr	r7, [pc, #640]	; (8012e88 <_dtoa_r+0x5f8>)
 8012c08:	f006 020f 	and.w	r2, r6, #15
 8012c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012c18:	f7ed fcee 	bl	80005f8 <__aeabi_dmul>
 8012c1c:	e9cd 0100 	strd	r0, r1, [sp]
 8012c20:	1136      	asrs	r6, r6, #4
 8012c22:	2300      	movs	r3, #0
 8012c24:	2502      	movs	r5, #2
 8012c26:	2e00      	cmp	r6, #0
 8012c28:	d17f      	bne.n	8012d2a <_dtoa_r+0x49a>
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d1e1      	bne.n	8012bf2 <_dtoa_r+0x362>
 8012c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	f000 8087 	beq.w	8012d44 <_dtoa_r+0x4b4>
 8012c36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	4b93      	ldr	r3, [pc, #588]	; (8012e8c <_dtoa_r+0x5fc>)
 8012c3e:	4630      	mov	r0, r6
 8012c40:	4639      	mov	r1, r7
 8012c42:	f7ed ff4b 	bl	8000adc <__aeabi_dcmplt>
 8012c46:	2800      	cmp	r0, #0
 8012c48:	d07c      	beq.n	8012d44 <_dtoa_r+0x4b4>
 8012c4a:	f1b9 0f00 	cmp.w	r9, #0
 8012c4e:	d079      	beq.n	8012d44 <_dtoa_r+0x4b4>
 8012c50:	9b02      	ldr	r3, [sp, #8]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	dd35      	ble.n	8012cc2 <_dtoa_r+0x432>
 8012c56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012c5a:	9308      	str	r3, [sp, #32]
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	2200      	movs	r2, #0
 8012c60:	4b8b      	ldr	r3, [pc, #556]	; (8012e90 <_dtoa_r+0x600>)
 8012c62:	4630      	mov	r0, r6
 8012c64:	f7ed fcc8 	bl	80005f8 <__aeabi_dmul>
 8012c68:	e9cd 0100 	strd	r0, r1, [sp]
 8012c6c:	9f02      	ldr	r7, [sp, #8]
 8012c6e:	3501      	adds	r5, #1
 8012c70:	4628      	mov	r0, r5
 8012c72:	f7ed fc57 	bl	8000524 <__aeabi_i2d>
 8012c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c7a:	f7ed fcbd 	bl	80005f8 <__aeabi_dmul>
 8012c7e:	2200      	movs	r2, #0
 8012c80:	4b84      	ldr	r3, [pc, #528]	; (8012e94 <_dtoa_r+0x604>)
 8012c82:	f7ed fb03 	bl	800028c <__adddf3>
 8012c86:	4605      	mov	r5, r0
 8012c88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012c8c:	2f00      	cmp	r7, #0
 8012c8e:	d15d      	bne.n	8012d4c <_dtoa_r+0x4bc>
 8012c90:	2200      	movs	r2, #0
 8012c92:	4b81      	ldr	r3, [pc, #516]	; (8012e98 <_dtoa_r+0x608>)
 8012c94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012c98:	f7ed faf6 	bl	8000288 <__aeabi_dsub>
 8012c9c:	462a      	mov	r2, r5
 8012c9e:	4633      	mov	r3, r6
 8012ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8012ca4:	f7ed ff38 	bl	8000b18 <__aeabi_dcmpgt>
 8012ca8:	2800      	cmp	r0, #0
 8012caa:	f040 8288 	bne.w	80131be <_dtoa_r+0x92e>
 8012cae:	462a      	mov	r2, r5
 8012cb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012cb8:	f7ed ff10 	bl	8000adc <__aeabi_dcmplt>
 8012cbc:	2800      	cmp	r0, #0
 8012cbe:	f040 827c 	bne.w	80131ba <_dtoa_r+0x92a>
 8012cc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012cc6:	e9cd 2300 	strd	r2, r3, [sp]
 8012cca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	f2c0 8150 	blt.w	8012f72 <_dtoa_r+0x6e2>
 8012cd2:	f1ba 0f0e 	cmp.w	sl, #14
 8012cd6:	f300 814c 	bgt.w	8012f72 <_dtoa_r+0x6e2>
 8012cda:	4b6a      	ldr	r3, [pc, #424]	; (8012e84 <_dtoa_r+0x5f4>)
 8012cdc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012ce0:	ed93 7b00 	vldr	d7, [r3]
 8012ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012cec:	f280 80d8 	bge.w	8012ea0 <_dtoa_r+0x610>
 8012cf0:	f1b9 0f00 	cmp.w	r9, #0
 8012cf4:	f300 80d4 	bgt.w	8012ea0 <_dtoa_r+0x610>
 8012cf8:	f040 825e 	bne.w	80131b8 <_dtoa_r+0x928>
 8012cfc:	2200      	movs	r2, #0
 8012cfe:	4b66      	ldr	r3, [pc, #408]	; (8012e98 <_dtoa_r+0x608>)
 8012d00:	ec51 0b17 	vmov	r0, r1, d7
 8012d04:	f7ed fc78 	bl	80005f8 <__aeabi_dmul>
 8012d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d0c:	f7ed fefa 	bl	8000b04 <__aeabi_dcmpge>
 8012d10:	464f      	mov	r7, r9
 8012d12:	464e      	mov	r6, r9
 8012d14:	2800      	cmp	r0, #0
 8012d16:	f040 8234 	bne.w	8013182 <_dtoa_r+0x8f2>
 8012d1a:	2331      	movs	r3, #49	; 0x31
 8012d1c:	f10b 0501 	add.w	r5, fp, #1
 8012d20:	f88b 3000 	strb.w	r3, [fp]
 8012d24:	f10a 0a01 	add.w	sl, sl, #1
 8012d28:	e22f      	b.n	801318a <_dtoa_r+0x8fa>
 8012d2a:	07f2      	lsls	r2, r6, #31
 8012d2c:	d505      	bpl.n	8012d3a <_dtoa_r+0x4aa>
 8012d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d32:	f7ed fc61 	bl	80005f8 <__aeabi_dmul>
 8012d36:	3501      	adds	r5, #1
 8012d38:	2301      	movs	r3, #1
 8012d3a:	1076      	asrs	r6, r6, #1
 8012d3c:	3708      	adds	r7, #8
 8012d3e:	e772      	b.n	8012c26 <_dtoa_r+0x396>
 8012d40:	2502      	movs	r5, #2
 8012d42:	e774      	b.n	8012c2e <_dtoa_r+0x39e>
 8012d44:	f8cd a020 	str.w	sl, [sp, #32]
 8012d48:	464f      	mov	r7, r9
 8012d4a:	e791      	b.n	8012c70 <_dtoa_r+0x3e0>
 8012d4c:	4b4d      	ldr	r3, [pc, #308]	; (8012e84 <_dtoa_r+0x5f4>)
 8012d4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012d52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d047      	beq.n	8012dec <_dtoa_r+0x55c>
 8012d5c:	4602      	mov	r2, r0
 8012d5e:	460b      	mov	r3, r1
 8012d60:	2000      	movs	r0, #0
 8012d62:	494e      	ldr	r1, [pc, #312]	; (8012e9c <_dtoa_r+0x60c>)
 8012d64:	f7ed fd72 	bl	800084c <__aeabi_ddiv>
 8012d68:	462a      	mov	r2, r5
 8012d6a:	4633      	mov	r3, r6
 8012d6c:	f7ed fa8c 	bl	8000288 <__aeabi_dsub>
 8012d70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012d74:	465d      	mov	r5, fp
 8012d76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d7a:	f7ed feed 	bl	8000b58 <__aeabi_d2iz>
 8012d7e:	4606      	mov	r6, r0
 8012d80:	f7ed fbd0 	bl	8000524 <__aeabi_i2d>
 8012d84:	4602      	mov	r2, r0
 8012d86:	460b      	mov	r3, r1
 8012d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d8c:	f7ed fa7c 	bl	8000288 <__aeabi_dsub>
 8012d90:	3630      	adds	r6, #48	; 0x30
 8012d92:	f805 6b01 	strb.w	r6, [r5], #1
 8012d96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8012d9e:	f7ed fe9d 	bl	8000adc <__aeabi_dcmplt>
 8012da2:	2800      	cmp	r0, #0
 8012da4:	d163      	bne.n	8012e6e <_dtoa_r+0x5de>
 8012da6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012daa:	2000      	movs	r0, #0
 8012dac:	4937      	ldr	r1, [pc, #220]	; (8012e8c <_dtoa_r+0x5fc>)
 8012dae:	f7ed fa6b 	bl	8000288 <__aeabi_dsub>
 8012db2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012db6:	f7ed fe91 	bl	8000adc <__aeabi_dcmplt>
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	f040 80b7 	bne.w	8012f2e <_dtoa_r+0x69e>
 8012dc0:	eba5 030b 	sub.w	r3, r5, fp
 8012dc4:	429f      	cmp	r7, r3
 8012dc6:	f77f af7c 	ble.w	8012cc2 <_dtoa_r+0x432>
 8012dca:	2200      	movs	r2, #0
 8012dcc:	4b30      	ldr	r3, [pc, #192]	; (8012e90 <_dtoa_r+0x600>)
 8012dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012dd2:	f7ed fc11 	bl	80005f8 <__aeabi_dmul>
 8012dd6:	2200      	movs	r2, #0
 8012dd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012ddc:	4b2c      	ldr	r3, [pc, #176]	; (8012e90 <_dtoa_r+0x600>)
 8012dde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012de2:	f7ed fc09 	bl	80005f8 <__aeabi_dmul>
 8012de6:	e9cd 0100 	strd	r0, r1, [sp]
 8012dea:	e7c4      	b.n	8012d76 <_dtoa_r+0x4e6>
 8012dec:	462a      	mov	r2, r5
 8012dee:	4633      	mov	r3, r6
 8012df0:	f7ed fc02 	bl	80005f8 <__aeabi_dmul>
 8012df4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012df8:	eb0b 0507 	add.w	r5, fp, r7
 8012dfc:	465e      	mov	r6, fp
 8012dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e02:	f7ed fea9 	bl	8000b58 <__aeabi_d2iz>
 8012e06:	4607      	mov	r7, r0
 8012e08:	f7ed fb8c 	bl	8000524 <__aeabi_i2d>
 8012e0c:	3730      	adds	r7, #48	; 0x30
 8012e0e:	4602      	mov	r2, r0
 8012e10:	460b      	mov	r3, r1
 8012e12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e16:	f7ed fa37 	bl	8000288 <__aeabi_dsub>
 8012e1a:	f806 7b01 	strb.w	r7, [r6], #1
 8012e1e:	42ae      	cmp	r6, r5
 8012e20:	e9cd 0100 	strd	r0, r1, [sp]
 8012e24:	f04f 0200 	mov.w	r2, #0
 8012e28:	d126      	bne.n	8012e78 <_dtoa_r+0x5e8>
 8012e2a:	4b1c      	ldr	r3, [pc, #112]	; (8012e9c <_dtoa_r+0x60c>)
 8012e2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012e30:	f7ed fa2c 	bl	800028c <__adddf3>
 8012e34:	4602      	mov	r2, r0
 8012e36:	460b      	mov	r3, r1
 8012e38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e3c:	f7ed fe6c 	bl	8000b18 <__aeabi_dcmpgt>
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d174      	bne.n	8012f2e <_dtoa_r+0x69e>
 8012e44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012e48:	2000      	movs	r0, #0
 8012e4a:	4914      	ldr	r1, [pc, #80]	; (8012e9c <_dtoa_r+0x60c>)
 8012e4c:	f7ed fa1c 	bl	8000288 <__aeabi_dsub>
 8012e50:	4602      	mov	r2, r0
 8012e52:	460b      	mov	r3, r1
 8012e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e58:	f7ed fe40 	bl	8000adc <__aeabi_dcmplt>
 8012e5c:	2800      	cmp	r0, #0
 8012e5e:	f43f af30 	beq.w	8012cc2 <_dtoa_r+0x432>
 8012e62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012e66:	2b30      	cmp	r3, #48	; 0x30
 8012e68:	f105 32ff 	add.w	r2, r5, #4294967295
 8012e6c:	d002      	beq.n	8012e74 <_dtoa_r+0x5e4>
 8012e6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012e72:	e04a      	b.n	8012f0a <_dtoa_r+0x67a>
 8012e74:	4615      	mov	r5, r2
 8012e76:	e7f4      	b.n	8012e62 <_dtoa_r+0x5d2>
 8012e78:	4b05      	ldr	r3, [pc, #20]	; (8012e90 <_dtoa_r+0x600>)
 8012e7a:	f7ed fbbd 	bl	80005f8 <__aeabi_dmul>
 8012e7e:	e9cd 0100 	strd	r0, r1, [sp]
 8012e82:	e7bc      	b.n	8012dfe <_dtoa_r+0x56e>
 8012e84:	08015078 	.word	0x08015078
 8012e88:	08015050 	.word	0x08015050
 8012e8c:	3ff00000 	.word	0x3ff00000
 8012e90:	40240000 	.word	0x40240000
 8012e94:	401c0000 	.word	0x401c0000
 8012e98:	40140000 	.word	0x40140000
 8012e9c:	3fe00000 	.word	0x3fe00000
 8012ea0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012ea4:	465d      	mov	r5, fp
 8012ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012eaa:	4630      	mov	r0, r6
 8012eac:	4639      	mov	r1, r7
 8012eae:	f7ed fccd 	bl	800084c <__aeabi_ddiv>
 8012eb2:	f7ed fe51 	bl	8000b58 <__aeabi_d2iz>
 8012eb6:	4680      	mov	r8, r0
 8012eb8:	f7ed fb34 	bl	8000524 <__aeabi_i2d>
 8012ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ec0:	f7ed fb9a 	bl	80005f8 <__aeabi_dmul>
 8012ec4:	4602      	mov	r2, r0
 8012ec6:	460b      	mov	r3, r1
 8012ec8:	4630      	mov	r0, r6
 8012eca:	4639      	mov	r1, r7
 8012ecc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012ed0:	f7ed f9da 	bl	8000288 <__aeabi_dsub>
 8012ed4:	f805 6b01 	strb.w	r6, [r5], #1
 8012ed8:	eba5 060b 	sub.w	r6, r5, fp
 8012edc:	45b1      	cmp	r9, r6
 8012ede:	4602      	mov	r2, r0
 8012ee0:	460b      	mov	r3, r1
 8012ee2:	d139      	bne.n	8012f58 <_dtoa_r+0x6c8>
 8012ee4:	f7ed f9d2 	bl	800028c <__adddf3>
 8012ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012eec:	4606      	mov	r6, r0
 8012eee:	460f      	mov	r7, r1
 8012ef0:	f7ed fe12 	bl	8000b18 <__aeabi_dcmpgt>
 8012ef4:	b9c8      	cbnz	r0, 8012f2a <_dtoa_r+0x69a>
 8012ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012efa:	4630      	mov	r0, r6
 8012efc:	4639      	mov	r1, r7
 8012efe:	f7ed fde3 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f02:	b110      	cbz	r0, 8012f0a <_dtoa_r+0x67a>
 8012f04:	f018 0f01 	tst.w	r8, #1
 8012f08:	d10f      	bne.n	8012f2a <_dtoa_r+0x69a>
 8012f0a:	9904      	ldr	r1, [sp, #16]
 8012f0c:	4620      	mov	r0, r4
 8012f0e:	f000 fdf9 	bl	8013b04 <_Bfree>
 8012f12:	2300      	movs	r3, #0
 8012f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012f16:	702b      	strb	r3, [r5, #0]
 8012f18:	f10a 0301 	add.w	r3, sl, #1
 8012f1c:	6013      	str	r3, [r2, #0]
 8012f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	f000 8241 	beq.w	80133a8 <_dtoa_r+0xb18>
 8012f26:	601d      	str	r5, [r3, #0]
 8012f28:	e23e      	b.n	80133a8 <_dtoa_r+0xb18>
 8012f2a:	f8cd a020 	str.w	sl, [sp, #32]
 8012f2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012f32:	2a39      	cmp	r2, #57	; 0x39
 8012f34:	f105 33ff 	add.w	r3, r5, #4294967295
 8012f38:	d108      	bne.n	8012f4c <_dtoa_r+0x6bc>
 8012f3a:	459b      	cmp	fp, r3
 8012f3c:	d10a      	bne.n	8012f54 <_dtoa_r+0x6c4>
 8012f3e:	9b08      	ldr	r3, [sp, #32]
 8012f40:	3301      	adds	r3, #1
 8012f42:	9308      	str	r3, [sp, #32]
 8012f44:	2330      	movs	r3, #48	; 0x30
 8012f46:	f88b 3000 	strb.w	r3, [fp]
 8012f4a:	465b      	mov	r3, fp
 8012f4c:	781a      	ldrb	r2, [r3, #0]
 8012f4e:	3201      	adds	r2, #1
 8012f50:	701a      	strb	r2, [r3, #0]
 8012f52:	e78c      	b.n	8012e6e <_dtoa_r+0x5de>
 8012f54:	461d      	mov	r5, r3
 8012f56:	e7ea      	b.n	8012f2e <_dtoa_r+0x69e>
 8012f58:	2200      	movs	r2, #0
 8012f5a:	4b9b      	ldr	r3, [pc, #620]	; (80131c8 <_dtoa_r+0x938>)
 8012f5c:	f7ed fb4c 	bl	80005f8 <__aeabi_dmul>
 8012f60:	2200      	movs	r2, #0
 8012f62:	2300      	movs	r3, #0
 8012f64:	4606      	mov	r6, r0
 8012f66:	460f      	mov	r7, r1
 8012f68:	f7ed fdae 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	d09a      	beq.n	8012ea6 <_dtoa_r+0x616>
 8012f70:	e7cb      	b.n	8012f0a <_dtoa_r+0x67a>
 8012f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f74:	2a00      	cmp	r2, #0
 8012f76:	f000 808b 	beq.w	8013090 <_dtoa_r+0x800>
 8012f7a:	9a06      	ldr	r2, [sp, #24]
 8012f7c:	2a01      	cmp	r2, #1
 8012f7e:	dc6e      	bgt.n	801305e <_dtoa_r+0x7ce>
 8012f80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012f82:	2a00      	cmp	r2, #0
 8012f84:	d067      	beq.n	8013056 <_dtoa_r+0x7c6>
 8012f86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012f8a:	9f07      	ldr	r7, [sp, #28]
 8012f8c:	9d05      	ldr	r5, [sp, #20]
 8012f8e:	9a05      	ldr	r2, [sp, #20]
 8012f90:	2101      	movs	r1, #1
 8012f92:	441a      	add	r2, r3
 8012f94:	4620      	mov	r0, r4
 8012f96:	9205      	str	r2, [sp, #20]
 8012f98:	4498      	add	r8, r3
 8012f9a:	f000 fe91 	bl	8013cc0 <__i2b>
 8012f9e:	4606      	mov	r6, r0
 8012fa0:	2d00      	cmp	r5, #0
 8012fa2:	dd0c      	ble.n	8012fbe <_dtoa_r+0x72e>
 8012fa4:	f1b8 0f00 	cmp.w	r8, #0
 8012fa8:	dd09      	ble.n	8012fbe <_dtoa_r+0x72e>
 8012faa:	4545      	cmp	r5, r8
 8012fac:	9a05      	ldr	r2, [sp, #20]
 8012fae:	462b      	mov	r3, r5
 8012fb0:	bfa8      	it	ge
 8012fb2:	4643      	movge	r3, r8
 8012fb4:	1ad2      	subs	r2, r2, r3
 8012fb6:	9205      	str	r2, [sp, #20]
 8012fb8:	1aed      	subs	r5, r5, r3
 8012fba:	eba8 0803 	sub.w	r8, r8, r3
 8012fbe:	9b07      	ldr	r3, [sp, #28]
 8012fc0:	b1eb      	cbz	r3, 8012ffe <_dtoa_r+0x76e>
 8012fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d067      	beq.n	8013098 <_dtoa_r+0x808>
 8012fc8:	b18f      	cbz	r7, 8012fee <_dtoa_r+0x75e>
 8012fca:	4631      	mov	r1, r6
 8012fcc:	463a      	mov	r2, r7
 8012fce:	4620      	mov	r0, r4
 8012fd0:	f000 ff16 	bl	8013e00 <__pow5mult>
 8012fd4:	9a04      	ldr	r2, [sp, #16]
 8012fd6:	4601      	mov	r1, r0
 8012fd8:	4606      	mov	r6, r0
 8012fda:	4620      	mov	r0, r4
 8012fdc:	f000 fe79 	bl	8013cd2 <__multiply>
 8012fe0:	9904      	ldr	r1, [sp, #16]
 8012fe2:	9008      	str	r0, [sp, #32]
 8012fe4:	4620      	mov	r0, r4
 8012fe6:	f000 fd8d 	bl	8013b04 <_Bfree>
 8012fea:	9b08      	ldr	r3, [sp, #32]
 8012fec:	9304      	str	r3, [sp, #16]
 8012fee:	9b07      	ldr	r3, [sp, #28]
 8012ff0:	1bda      	subs	r2, r3, r7
 8012ff2:	d004      	beq.n	8012ffe <_dtoa_r+0x76e>
 8012ff4:	9904      	ldr	r1, [sp, #16]
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	f000 ff02 	bl	8013e00 <__pow5mult>
 8012ffc:	9004      	str	r0, [sp, #16]
 8012ffe:	2101      	movs	r1, #1
 8013000:	4620      	mov	r0, r4
 8013002:	f000 fe5d 	bl	8013cc0 <__i2b>
 8013006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013008:	4607      	mov	r7, r0
 801300a:	2b00      	cmp	r3, #0
 801300c:	f000 81d0 	beq.w	80133b0 <_dtoa_r+0xb20>
 8013010:	461a      	mov	r2, r3
 8013012:	4601      	mov	r1, r0
 8013014:	4620      	mov	r0, r4
 8013016:	f000 fef3 	bl	8013e00 <__pow5mult>
 801301a:	9b06      	ldr	r3, [sp, #24]
 801301c:	2b01      	cmp	r3, #1
 801301e:	4607      	mov	r7, r0
 8013020:	dc40      	bgt.n	80130a4 <_dtoa_r+0x814>
 8013022:	9b00      	ldr	r3, [sp, #0]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d139      	bne.n	801309c <_dtoa_r+0x80c>
 8013028:	9b01      	ldr	r3, [sp, #4]
 801302a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801302e:	2b00      	cmp	r3, #0
 8013030:	d136      	bne.n	80130a0 <_dtoa_r+0x810>
 8013032:	9b01      	ldr	r3, [sp, #4]
 8013034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013038:	0d1b      	lsrs	r3, r3, #20
 801303a:	051b      	lsls	r3, r3, #20
 801303c:	b12b      	cbz	r3, 801304a <_dtoa_r+0x7ba>
 801303e:	9b05      	ldr	r3, [sp, #20]
 8013040:	3301      	adds	r3, #1
 8013042:	9305      	str	r3, [sp, #20]
 8013044:	f108 0801 	add.w	r8, r8, #1
 8013048:	2301      	movs	r3, #1
 801304a:	9307      	str	r3, [sp, #28]
 801304c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801304e:	2b00      	cmp	r3, #0
 8013050:	d12a      	bne.n	80130a8 <_dtoa_r+0x818>
 8013052:	2001      	movs	r0, #1
 8013054:	e030      	b.n	80130b8 <_dtoa_r+0x828>
 8013056:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013058:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801305c:	e795      	b.n	8012f8a <_dtoa_r+0x6fa>
 801305e:	9b07      	ldr	r3, [sp, #28]
 8013060:	f109 37ff 	add.w	r7, r9, #4294967295
 8013064:	42bb      	cmp	r3, r7
 8013066:	bfbf      	itttt	lt
 8013068:	9b07      	ldrlt	r3, [sp, #28]
 801306a:	9707      	strlt	r7, [sp, #28]
 801306c:	1afa      	sublt	r2, r7, r3
 801306e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013070:	bfbb      	ittet	lt
 8013072:	189b      	addlt	r3, r3, r2
 8013074:	930e      	strlt	r3, [sp, #56]	; 0x38
 8013076:	1bdf      	subge	r7, r3, r7
 8013078:	2700      	movlt	r7, #0
 801307a:	f1b9 0f00 	cmp.w	r9, #0
 801307e:	bfb5      	itete	lt
 8013080:	9b05      	ldrlt	r3, [sp, #20]
 8013082:	9d05      	ldrge	r5, [sp, #20]
 8013084:	eba3 0509 	sublt.w	r5, r3, r9
 8013088:	464b      	movge	r3, r9
 801308a:	bfb8      	it	lt
 801308c:	2300      	movlt	r3, #0
 801308e:	e77e      	b.n	8012f8e <_dtoa_r+0x6fe>
 8013090:	9f07      	ldr	r7, [sp, #28]
 8013092:	9d05      	ldr	r5, [sp, #20]
 8013094:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8013096:	e783      	b.n	8012fa0 <_dtoa_r+0x710>
 8013098:	9a07      	ldr	r2, [sp, #28]
 801309a:	e7ab      	b.n	8012ff4 <_dtoa_r+0x764>
 801309c:	2300      	movs	r3, #0
 801309e:	e7d4      	b.n	801304a <_dtoa_r+0x7ba>
 80130a0:	9b00      	ldr	r3, [sp, #0]
 80130a2:	e7d2      	b.n	801304a <_dtoa_r+0x7ba>
 80130a4:	2300      	movs	r3, #0
 80130a6:	9307      	str	r3, [sp, #28]
 80130a8:	693b      	ldr	r3, [r7, #16]
 80130aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80130ae:	6918      	ldr	r0, [r3, #16]
 80130b0:	f000 fdb8 	bl	8013c24 <__hi0bits>
 80130b4:	f1c0 0020 	rsb	r0, r0, #32
 80130b8:	4440      	add	r0, r8
 80130ba:	f010 001f 	ands.w	r0, r0, #31
 80130be:	d047      	beq.n	8013150 <_dtoa_r+0x8c0>
 80130c0:	f1c0 0320 	rsb	r3, r0, #32
 80130c4:	2b04      	cmp	r3, #4
 80130c6:	dd3b      	ble.n	8013140 <_dtoa_r+0x8b0>
 80130c8:	9b05      	ldr	r3, [sp, #20]
 80130ca:	f1c0 001c 	rsb	r0, r0, #28
 80130ce:	4403      	add	r3, r0
 80130d0:	9305      	str	r3, [sp, #20]
 80130d2:	4405      	add	r5, r0
 80130d4:	4480      	add	r8, r0
 80130d6:	9b05      	ldr	r3, [sp, #20]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	dd05      	ble.n	80130e8 <_dtoa_r+0x858>
 80130dc:	461a      	mov	r2, r3
 80130de:	9904      	ldr	r1, [sp, #16]
 80130e0:	4620      	mov	r0, r4
 80130e2:	f000 fedb 	bl	8013e9c <__lshift>
 80130e6:	9004      	str	r0, [sp, #16]
 80130e8:	f1b8 0f00 	cmp.w	r8, #0
 80130ec:	dd05      	ble.n	80130fa <_dtoa_r+0x86a>
 80130ee:	4639      	mov	r1, r7
 80130f0:	4642      	mov	r2, r8
 80130f2:	4620      	mov	r0, r4
 80130f4:	f000 fed2 	bl	8013e9c <__lshift>
 80130f8:	4607      	mov	r7, r0
 80130fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130fc:	b353      	cbz	r3, 8013154 <_dtoa_r+0x8c4>
 80130fe:	4639      	mov	r1, r7
 8013100:	9804      	ldr	r0, [sp, #16]
 8013102:	f000 ff1f 	bl	8013f44 <__mcmp>
 8013106:	2800      	cmp	r0, #0
 8013108:	da24      	bge.n	8013154 <_dtoa_r+0x8c4>
 801310a:	2300      	movs	r3, #0
 801310c:	220a      	movs	r2, #10
 801310e:	9904      	ldr	r1, [sp, #16]
 8013110:	4620      	mov	r0, r4
 8013112:	f000 fd0e 	bl	8013b32 <__multadd>
 8013116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013118:	9004      	str	r0, [sp, #16]
 801311a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801311e:	2b00      	cmp	r3, #0
 8013120:	f000 814d 	beq.w	80133be <_dtoa_r+0xb2e>
 8013124:	2300      	movs	r3, #0
 8013126:	4631      	mov	r1, r6
 8013128:	220a      	movs	r2, #10
 801312a:	4620      	mov	r0, r4
 801312c:	f000 fd01 	bl	8013b32 <__multadd>
 8013130:	9b02      	ldr	r3, [sp, #8]
 8013132:	2b00      	cmp	r3, #0
 8013134:	4606      	mov	r6, r0
 8013136:	dc4f      	bgt.n	80131d8 <_dtoa_r+0x948>
 8013138:	9b06      	ldr	r3, [sp, #24]
 801313a:	2b02      	cmp	r3, #2
 801313c:	dd4c      	ble.n	80131d8 <_dtoa_r+0x948>
 801313e:	e011      	b.n	8013164 <_dtoa_r+0x8d4>
 8013140:	d0c9      	beq.n	80130d6 <_dtoa_r+0x846>
 8013142:	9a05      	ldr	r2, [sp, #20]
 8013144:	331c      	adds	r3, #28
 8013146:	441a      	add	r2, r3
 8013148:	9205      	str	r2, [sp, #20]
 801314a:	441d      	add	r5, r3
 801314c:	4498      	add	r8, r3
 801314e:	e7c2      	b.n	80130d6 <_dtoa_r+0x846>
 8013150:	4603      	mov	r3, r0
 8013152:	e7f6      	b.n	8013142 <_dtoa_r+0x8b2>
 8013154:	f1b9 0f00 	cmp.w	r9, #0
 8013158:	dc38      	bgt.n	80131cc <_dtoa_r+0x93c>
 801315a:	9b06      	ldr	r3, [sp, #24]
 801315c:	2b02      	cmp	r3, #2
 801315e:	dd35      	ble.n	80131cc <_dtoa_r+0x93c>
 8013160:	f8cd 9008 	str.w	r9, [sp, #8]
 8013164:	9b02      	ldr	r3, [sp, #8]
 8013166:	b963      	cbnz	r3, 8013182 <_dtoa_r+0x8f2>
 8013168:	4639      	mov	r1, r7
 801316a:	2205      	movs	r2, #5
 801316c:	4620      	mov	r0, r4
 801316e:	f000 fce0 	bl	8013b32 <__multadd>
 8013172:	4601      	mov	r1, r0
 8013174:	4607      	mov	r7, r0
 8013176:	9804      	ldr	r0, [sp, #16]
 8013178:	f000 fee4 	bl	8013f44 <__mcmp>
 801317c:	2800      	cmp	r0, #0
 801317e:	f73f adcc 	bgt.w	8012d1a <_dtoa_r+0x48a>
 8013182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013184:	465d      	mov	r5, fp
 8013186:	ea6f 0a03 	mvn.w	sl, r3
 801318a:	f04f 0900 	mov.w	r9, #0
 801318e:	4639      	mov	r1, r7
 8013190:	4620      	mov	r0, r4
 8013192:	f000 fcb7 	bl	8013b04 <_Bfree>
 8013196:	2e00      	cmp	r6, #0
 8013198:	f43f aeb7 	beq.w	8012f0a <_dtoa_r+0x67a>
 801319c:	f1b9 0f00 	cmp.w	r9, #0
 80131a0:	d005      	beq.n	80131ae <_dtoa_r+0x91e>
 80131a2:	45b1      	cmp	r9, r6
 80131a4:	d003      	beq.n	80131ae <_dtoa_r+0x91e>
 80131a6:	4649      	mov	r1, r9
 80131a8:	4620      	mov	r0, r4
 80131aa:	f000 fcab 	bl	8013b04 <_Bfree>
 80131ae:	4631      	mov	r1, r6
 80131b0:	4620      	mov	r0, r4
 80131b2:	f000 fca7 	bl	8013b04 <_Bfree>
 80131b6:	e6a8      	b.n	8012f0a <_dtoa_r+0x67a>
 80131b8:	2700      	movs	r7, #0
 80131ba:	463e      	mov	r6, r7
 80131bc:	e7e1      	b.n	8013182 <_dtoa_r+0x8f2>
 80131be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80131c2:	463e      	mov	r6, r7
 80131c4:	e5a9      	b.n	8012d1a <_dtoa_r+0x48a>
 80131c6:	bf00      	nop
 80131c8:	40240000 	.word	0x40240000
 80131cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	f000 80fa 	beq.w	80133cc <_dtoa_r+0xb3c>
 80131d8:	2d00      	cmp	r5, #0
 80131da:	dd05      	ble.n	80131e8 <_dtoa_r+0x958>
 80131dc:	4631      	mov	r1, r6
 80131de:	462a      	mov	r2, r5
 80131e0:	4620      	mov	r0, r4
 80131e2:	f000 fe5b 	bl	8013e9c <__lshift>
 80131e6:	4606      	mov	r6, r0
 80131e8:	9b07      	ldr	r3, [sp, #28]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d04c      	beq.n	8013288 <_dtoa_r+0x9f8>
 80131ee:	6871      	ldr	r1, [r6, #4]
 80131f0:	4620      	mov	r0, r4
 80131f2:	f000 fc53 	bl	8013a9c <_Balloc>
 80131f6:	6932      	ldr	r2, [r6, #16]
 80131f8:	3202      	adds	r2, #2
 80131fa:	4605      	mov	r5, r0
 80131fc:	0092      	lsls	r2, r2, #2
 80131fe:	f106 010c 	add.w	r1, r6, #12
 8013202:	300c      	adds	r0, #12
 8013204:	f7fd fcd6 	bl	8010bb4 <memcpy>
 8013208:	2201      	movs	r2, #1
 801320a:	4629      	mov	r1, r5
 801320c:	4620      	mov	r0, r4
 801320e:	f000 fe45 	bl	8013e9c <__lshift>
 8013212:	9b00      	ldr	r3, [sp, #0]
 8013214:	f8cd b014 	str.w	fp, [sp, #20]
 8013218:	f003 0301 	and.w	r3, r3, #1
 801321c:	46b1      	mov	r9, r6
 801321e:	9307      	str	r3, [sp, #28]
 8013220:	4606      	mov	r6, r0
 8013222:	4639      	mov	r1, r7
 8013224:	9804      	ldr	r0, [sp, #16]
 8013226:	f7ff faa5 	bl	8012774 <quorem>
 801322a:	4649      	mov	r1, r9
 801322c:	4605      	mov	r5, r0
 801322e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013232:	9804      	ldr	r0, [sp, #16]
 8013234:	f000 fe86 	bl	8013f44 <__mcmp>
 8013238:	4632      	mov	r2, r6
 801323a:	9000      	str	r0, [sp, #0]
 801323c:	4639      	mov	r1, r7
 801323e:	4620      	mov	r0, r4
 8013240:	f000 fe9a 	bl	8013f78 <__mdiff>
 8013244:	68c3      	ldr	r3, [r0, #12]
 8013246:	4602      	mov	r2, r0
 8013248:	bb03      	cbnz	r3, 801328c <_dtoa_r+0x9fc>
 801324a:	4601      	mov	r1, r0
 801324c:	9008      	str	r0, [sp, #32]
 801324e:	9804      	ldr	r0, [sp, #16]
 8013250:	f000 fe78 	bl	8013f44 <__mcmp>
 8013254:	9a08      	ldr	r2, [sp, #32]
 8013256:	4603      	mov	r3, r0
 8013258:	4611      	mov	r1, r2
 801325a:	4620      	mov	r0, r4
 801325c:	9308      	str	r3, [sp, #32]
 801325e:	f000 fc51 	bl	8013b04 <_Bfree>
 8013262:	9b08      	ldr	r3, [sp, #32]
 8013264:	b9a3      	cbnz	r3, 8013290 <_dtoa_r+0xa00>
 8013266:	9a06      	ldr	r2, [sp, #24]
 8013268:	b992      	cbnz	r2, 8013290 <_dtoa_r+0xa00>
 801326a:	9a07      	ldr	r2, [sp, #28]
 801326c:	b982      	cbnz	r2, 8013290 <_dtoa_r+0xa00>
 801326e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013272:	d029      	beq.n	80132c8 <_dtoa_r+0xa38>
 8013274:	9b00      	ldr	r3, [sp, #0]
 8013276:	2b00      	cmp	r3, #0
 8013278:	dd01      	ble.n	801327e <_dtoa_r+0x9ee>
 801327a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801327e:	9b05      	ldr	r3, [sp, #20]
 8013280:	1c5d      	adds	r5, r3, #1
 8013282:	f883 8000 	strb.w	r8, [r3]
 8013286:	e782      	b.n	801318e <_dtoa_r+0x8fe>
 8013288:	4630      	mov	r0, r6
 801328a:	e7c2      	b.n	8013212 <_dtoa_r+0x982>
 801328c:	2301      	movs	r3, #1
 801328e:	e7e3      	b.n	8013258 <_dtoa_r+0x9c8>
 8013290:	9a00      	ldr	r2, [sp, #0]
 8013292:	2a00      	cmp	r2, #0
 8013294:	db04      	blt.n	80132a0 <_dtoa_r+0xa10>
 8013296:	d125      	bne.n	80132e4 <_dtoa_r+0xa54>
 8013298:	9a06      	ldr	r2, [sp, #24]
 801329a:	bb1a      	cbnz	r2, 80132e4 <_dtoa_r+0xa54>
 801329c:	9a07      	ldr	r2, [sp, #28]
 801329e:	bb0a      	cbnz	r2, 80132e4 <_dtoa_r+0xa54>
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	ddec      	ble.n	801327e <_dtoa_r+0x9ee>
 80132a4:	2201      	movs	r2, #1
 80132a6:	9904      	ldr	r1, [sp, #16]
 80132a8:	4620      	mov	r0, r4
 80132aa:	f000 fdf7 	bl	8013e9c <__lshift>
 80132ae:	4639      	mov	r1, r7
 80132b0:	9004      	str	r0, [sp, #16]
 80132b2:	f000 fe47 	bl	8013f44 <__mcmp>
 80132b6:	2800      	cmp	r0, #0
 80132b8:	dc03      	bgt.n	80132c2 <_dtoa_r+0xa32>
 80132ba:	d1e0      	bne.n	801327e <_dtoa_r+0x9ee>
 80132bc:	f018 0f01 	tst.w	r8, #1
 80132c0:	d0dd      	beq.n	801327e <_dtoa_r+0x9ee>
 80132c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80132c6:	d1d8      	bne.n	801327a <_dtoa_r+0x9ea>
 80132c8:	9b05      	ldr	r3, [sp, #20]
 80132ca:	9a05      	ldr	r2, [sp, #20]
 80132cc:	1c5d      	adds	r5, r3, #1
 80132ce:	2339      	movs	r3, #57	; 0x39
 80132d0:	7013      	strb	r3, [r2, #0]
 80132d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80132d6:	2b39      	cmp	r3, #57	; 0x39
 80132d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80132dc:	d04f      	beq.n	801337e <_dtoa_r+0xaee>
 80132de:	3301      	adds	r3, #1
 80132e0:	7013      	strb	r3, [r2, #0]
 80132e2:	e754      	b.n	801318e <_dtoa_r+0x8fe>
 80132e4:	9a05      	ldr	r2, [sp, #20]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	f102 0501 	add.w	r5, r2, #1
 80132ec:	dd06      	ble.n	80132fc <_dtoa_r+0xa6c>
 80132ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80132f2:	d0e9      	beq.n	80132c8 <_dtoa_r+0xa38>
 80132f4:	f108 0801 	add.w	r8, r8, #1
 80132f8:	9b05      	ldr	r3, [sp, #20]
 80132fa:	e7c2      	b.n	8013282 <_dtoa_r+0x9f2>
 80132fc:	9a02      	ldr	r2, [sp, #8]
 80132fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013302:	eba5 030b 	sub.w	r3, r5, fp
 8013306:	4293      	cmp	r3, r2
 8013308:	d021      	beq.n	801334e <_dtoa_r+0xabe>
 801330a:	2300      	movs	r3, #0
 801330c:	220a      	movs	r2, #10
 801330e:	9904      	ldr	r1, [sp, #16]
 8013310:	4620      	mov	r0, r4
 8013312:	f000 fc0e 	bl	8013b32 <__multadd>
 8013316:	45b1      	cmp	r9, r6
 8013318:	9004      	str	r0, [sp, #16]
 801331a:	f04f 0300 	mov.w	r3, #0
 801331e:	f04f 020a 	mov.w	r2, #10
 8013322:	4649      	mov	r1, r9
 8013324:	4620      	mov	r0, r4
 8013326:	d105      	bne.n	8013334 <_dtoa_r+0xaa4>
 8013328:	f000 fc03 	bl	8013b32 <__multadd>
 801332c:	4681      	mov	r9, r0
 801332e:	4606      	mov	r6, r0
 8013330:	9505      	str	r5, [sp, #20]
 8013332:	e776      	b.n	8013222 <_dtoa_r+0x992>
 8013334:	f000 fbfd 	bl	8013b32 <__multadd>
 8013338:	4631      	mov	r1, r6
 801333a:	4681      	mov	r9, r0
 801333c:	2300      	movs	r3, #0
 801333e:	220a      	movs	r2, #10
 8013340:	4620      	mov	r0, r4
 8013342:	f000 fbf6 	bl	8013b32 <__multadd>
 8013346:	4606      	mov	r6, r0
 8013348:	e7f2      	b.n	8013330 <_dtoa_r+0xaa0>
 801334a:	f04f 0900 	mov.w	r9, #0
 801334e:	2201      	movs	r2, #1
 8013350:	9904      	ldr	r1, [sp, #16]
 8013352:	4620      	mov	r0, r4
 8013354:	f000 fda2 	bl	8013e9c <__lshift>
 8013358:	4639      	mov	r1, r7
 801335a:	9004      	str	r0, [sp, #16]
 801335c:	f000 fdf2 	bl	8013f44 <__mcmp>
 8013360:	2800      	cmp	r0, #0
 8013362:	dcb6      	bgt.n	80132d2 <_dtoa_r+0xa42>
 8013364:	d102      	bne.n	801336c <_dtoa_r+0xadc>
 8013366:	f018 0f01 	tst.w	r8, #1
 801336a:	d1b2      	bne.n	80132d2 <_dtoa_r+0xa42>
 801336c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013370:	2b30      	cmp	r3, #48	; 0x30
 8013372:	f105 32ff 	add.w	r2, r5, #4294967295
 8013376:	f47f af0a 	bne.w	801318e <_dtoa_r+0x8fe>
 801337a:	4615      	mov	r5, r2
 801337c:	e7f6      	b.n	801336c <_dtoa_r+0xadc>
 801337e:	4593      	cmp	fp, r2
 8013380:	d105      	bne.n	801338e <_dtoa_r+0xafe>
 8013382:	2331      	movs	r3, #49	; 0x31
 8013384:	f10a 0a01 	add.w	sl, sl, #1
 8013388:	f88b 3000 	strb.w	r3, [fp]
 801338c:	e6ff      	b.n	801318e <_dtoa_r+0x8fe>
 801338e:	4615      	mov	r5, r2
 8013390:	e79f      	b.n	80132d2 <_dtoa_r+0xa42>
 8013392:	f8df b064 	ldr.w	fp, [pc, #100]	; 80133f8 <_dtoa_r+0xb68>
 8013396:	e007      	b.n	80133a8 <_dtoa_r+0xb18>
 8013398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801339a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80133fc <_dtoa_r+0xb6c>
 801339e:	b11b      	cbz	r3, 80133a8 <_dtoa_r+0xb18>
 80133a0:	f10b 0308 	add.w	r3, fp, #8
 80133a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80133a6:	6013      	str	r3, [r2, #0]
 80133a8:	4658      	mov	r0, fp
 80133aa:	b017      	add	sp, #92	; 0x5c
 80133ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b0:	9b06      	ldr	r3, [sp, #24]
 80133b2:	2b01      	cmp	r3, #1
 80133b4:	f77f ae35 	ble.w	8013022 <_dtoa_r+0x792>
 80133b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80133ba:	9307      	str	r3, [sp, #28]
 80133bc:	e649      	b.n	8013052 <_dtoa_r+0x7c2>
 80133be:	9b02      	ldr	r3, [sp, #8]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	dc03      	bgt.n	80133cc <_dtoa_r+0xb3c>
 80133c4:	9b06      	ldr	r3, [sp, #24]
 80133c6:	2b02      	cmp	r3, #2
 80133c8:	f73f aecc 	bgt.w	8013164 <_dtoa_r+0x8d4>
 80133cc:	465d      	mov	r5, fp
 80133ce:	4639      	mov	r1, r7
 80133d0:	9804      	ldr	r0, [sp, #16]
 80133d2:	f7ff f9cf 	bl	8012774 <quorem>
 80133d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80133da:	f805 8b01 	strb.w	r8, [r5], #1
 80133de:	9a02      	ldr	r2, [sp, #8]
 80133e0:	eba5 030b 	sub.w	r3, r5, fp
 80133e4:	429a      	cmp	r2, r3
 80133e6:	ddb0      	ble.n	801334a <_dtoa_r+0xaba>
 80133e8:	2300      	movs	r3, #0
 80133ea:	220a      	movs	r2, #10
 80133ec:	9904      	ldr	r1, [sp, #16]
 80133ee:	4620      	mov	r0, r4
 80133f0:	f000 fb9f 	bl	8013b32 <__multadd>
 80133f4:	9004      	str	r0, [sp, #16]
 80133f6:	e7ea      	b.n	80133ce <_dtoa_r+0xb3e>
 80133f8:	08014fbc 	.word	0x08014fbc
 80133fc:	08015038 	.word	0x08015038

08013400 <rshift>:
 8013400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013402:	6906      	ldr	r6, [r0, #16]
 8013404:	114b      	asrs	r3, r1, #5
 8013406:	429e      	cmp	r6, r3
 8013408:	f100 0414 	add.w	r4, r0, #20
 801340c:	dd30      	ble.n	8013470 <rshift+0x70>
 801340e:	f011 011f 	ands.w	r1, r1, #31
 8013412:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8013416:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801341a:	d108      	bne.n	801342e <rshift+0x2e>
 801341c:	4621      	mov	r1, r4
 801341e:	42b2      	cmp	r2, r6
 8013420:	460b      	mov	r3, r1
 8013422:	d211      	bcs.n	8013448 <rshift+0x48>
 8013424:	f852 3b04 	ldr.w	r3, [r2], #4
 8013428:	f841 3b04 	str.w	r3, [r1], #4
 801342c:	e7f7      	b.n	801341e <rshift+0x1e>
 801342e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8013432:	f1c1 0c20 	rsb	ip, r1, #32
 8013436:	40cd      	lsrs	r5, r1
 8013438:	3204      	adds	r2, #4
 801343a:	4623      	mov	r3, r4
 801343c:	42b2      	cmp	r2, r6
 801343e:	4617      	mov	r7, r2
 8013440:	d30c      	bcc.n	801345c <rshift+0x5c>
 8013442:	601d      	str	r5, [r3, #0]
 8013444:	b105      	cbz	r5, 8013448 <rshift+0x48>
 8013446:	3304      	adds	r3, #4
 8013448:	1b1a      	subs	r2, r3, r4
 801344a:	42a3      	cmp	r3, r4
 801344c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8013450:	bf08      	it	eq
 8013452:	2300      	moveq	r3, #0
 8013454:	6102      	str	r2, [r0, #16]
 8013456:	bf08      	it	eq
 8013458:	6143      	streq	r3, [r0, #20]
 801345a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801345c:	683f      	ldr	r7, [r7, #0]
 801345e:	fa07 f70c 	lsl.w	r7, r7, ip
 8013462:	433d      	orrs	r5, r7
 8013464:	f843 5b04 	str.w	r5, [r3], #4
 8013468:	f852 5b04 	ldr.w	r5, [r2], #4
 801346c:	40cd      	lsrs	r5, r1
 801346e:	e7e5      	b.n	801343c <rshift+0x3c>
 8013470:	4623      	mov	r3, r4
 8013472:	e7e9      	b.n	8013448 <rshift+0x48>

08013474 <__hexdig_fun>:
 8013474:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013478:	2b09      	cmp	r3, #9
 801347a:	d802      	bhi.n	8013482 <__hexdig_fun+0xe>
 801347c:	3820      	subs	r0, #32
 801347e:	b2c0      	uxtb	r0, r0
 8013480:	4770      	bx	lr
 8013482:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013486:	2b05      	cmp	r3, #5
 8013488:	d801      	bhi.n	801348e <__hexdig_fun+0x1a>
 801348a:	3847      	subs	r0, #71	; 0x47
 801348c:	e7f7      	b.n	801347e <__hexdig_fun+0xa>
 801348e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8013492:	2b05      	cmp	r3, #5
 8013494:	d801      	bhi.n	801349a <__hexdig_fun+0x26>
 8013496:	3827      	subs	r0, #39	; 0x27
 8013498:	e7f1      	b.n	801347e <__hexdig_fun+0xa>
 801349a:	2000      	movs	r0, #0
 801349c:	4770      	bx	lr

0801349e <__gethex>:
 801349e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a2:	b08b      	sub	sp, #44	; 0x2c
 80134a4:	468a      	mov	sl, r1
 80134a6:	9002      	str	r0, [sp, #8]
 80134a8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80134aa:	9306      	str	r3, [sp, #24]
 80134ac:	4690      	mov	r8, r2
 80134ae:	f000 fad0 	bl	8013a52 <__localeconv_l>
 80134b2:	6803      	ldr	r3, [r0, #0]
 80134b4:	9303      	str	r3, [sp, #12]
 80134b6:	4618      	mov	r0, r3
 80134b8:	f7ec fe8a 	bl	80001d0 <strlen>
 80134bc:	9b03      	ldr	r3, [sp, #12]
 80134be:	9001      	str	r0, [sp, #4]
 80134c0:	4403      	add	r3, r0
 80134c2:	f04f 0b00 	mov.w	fp, #0
 80134c6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80134ca:	9307      	str	r3, [sp, #28]
 80134cc:	f8da 3000 	ldr.w	r3, [sl]
 80134d0:	3302      	adds	r3, #2
 80134d2:	461f      	mov	r7, r3
 80134d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80134d8:	2830      	cmp	r0, #48	; 0x30
 80134da:	d06c      	beq.n	80135b6 <__gethex+0x118>
 80134dc:	f7ff ffca 	bl	8013474 <__hexdig_fun>
 80134e0:	4604      	mov	r4, r0
 80134e2:	2800      	cmp	r0, #0
 80134e4:	d16a      	bne.n	80135bc <__gethex+0x11e>
 80134e6:	9a01      	ldr	r2, [sp, #4]
 80134e8:	9903      	ldr	r1, [sp, #12]
 80134ea:	4638      	mov	r0, r7
 80134ec:	f001 f836 	bl	801455c <strncmp>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d166      	bne.n	80135c2 <__gethex+0x124>
 80134f4:	9b01      	ldr	r3, [sp, #4]
 80134f6:	5cf8      	ldrb	r0, [r7, r3]
 80134f8:	18fe      	adds	r6, r7, r3
 80134fa:	f7ff ffbb 	bl	8013474 <__hexdig_fun>
 80134fe:	2800      	cmp	r0, #0
 8013500:	d062      	beq.n	80135c8 <__gethex+0x12a>
 8013502:	4633      	mov	r3, r6
 8013504:	7818      	ldrb	r0, [r3, #0]
 8013506:	2830      	cmp	r0, #48	; 0x30
 8013508:	461f      	mov	r7, r3
 801350a:	f103 0301 	add.w	r3, r3, #1
 801350e:	d0f9      	beq.n	8013504 <__gethex+0x66>
 8013510:	f7ff ffb0 	bl	8013474 <__hexdig_fun>
 8013514:	fab0 f580 	clz	r5, r0
 8013518:	096d      	lsrs	r5, r5, #5
 801351a:	4634      	mov	r4, r6
 801351c:	f04f 0b01 	mov.w	fp, #1
 8013520:	463a      	mov	r2, r7
 8013522:	4616      	mov	r6, r2
 8013524:	3201      	adds	r2, #1
 8013526:	7830      	ldrb	r0, [r6, #0]
 8013528:	f7ff ffa4 	bl	8013474 <__hexdig_fun>
 801352c:	2800      	cmp	r0, #0
 801352e:	d1f8      	bne.n	8013522 <__gethex+0x84>
 8013530:	9a01      	ldr	r2, [sp, #4]
 8013532:	9903      	ldr	r1, [sp, #12]
 8013534:	4630      	mov	r0, r6
 8013536:	f001 f811 	bl	801455c <strncmp>
 801353a:	b950      	cbnz	r0, 8013552 <__gethex+0xb4>
 801353c:	b954      	cbnz	r4, 8013554 <__gethex+0xb6>
 801353e:	9b01      	ldr	r3, [sp, #4]
 8013540:	18f4      	adds	r4, r6, r3
 8013542:	4622      	mov	r2, r4
 8013544:	4616      	mov	r6, r2
 8013546:	3201      	adds	r2, #1
 8013548:	7830      	ldrb	r0, [r6, #0]
 801354a:	f7ff ff93 	bl	8013474 <__hexdig_fun>
 801354e:	2800      	cmp	r0, #0
 8013550:	d1f8      	bne.n	8013544 <__gethex+0xa6>
 8013552:	b10c      	cbz	r4, 8013558 <__gethex+0xba>
 8013554:	1ba4      	subs	r4, r4, r6
 8013556:	00a4      	lsls	r4, r4, #2
 8013558:	7833      	ldrb	r3, [r6, #0]
 801355a:	2b50      	cmp	r3, #80	; 0x50
 801355c:	d001      	beq.n	8013562 <__gethex+0xc4>
 801355e:	2b70      	cmp	r3, #112	; 0x70
 8013560:	d140      	bne.n	80135e4 <__gethex+0x146>
 8013562:	7873      	ldrb	r3, [r6, #1]
 8013564:	2b2b      	cmp	r3, #43	; 0x2b
 8013566:	d031      	beq.n	80135cc <__gethex+0x12e>
 8013568:	2b2d      	cmp	r3, #45	; 0x2d
 801356a:	d033      	beq.n	80135d4 <__gethex+0x136>
 801356c:	1c71      	adds	r1, r6, #1
 801356e:	f04f 0900 	mov.w	r9, #0
 8013572:	7808      	ldrb	r0, [r1, #0]
 8013574:	f7ff ff7e 	bl	8013474 <__hexdig_fun>
 8013578:	1e43      	subs	r3, r0, #1
 801357a:	b2db      	uxtb	r3, r3
 801357c:	2b18      	cmp	r3, #24
 801357e:	d831      	bhi.n	80135e4 <__gethex+0x146>
 8013580:	f1a0 0210 	sub.w	r2, r0, #16
 8013584:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013588:	f7ff ff74 	bl	8013474 <__hexdig_fun>
 801358c:	1e43      	subs	r3, r0, #1
 801358e:	b2db      	uxtb	r3, r3
 8013590:	2b18      	cmp	r3, #24
 8013592:	d922      	bls.n	80135da <__gethex+0x13c>
 8013594:	f1b9 0f00 	cmp.w	r9, #0
 8013598:	d000      	beq.n	801359c <__gethex+0xfe>
 801359a:	4252      	negs	r2, r2
 801359c:	4414      	add	r4, r2
 801359e:	f8ca 1000 	str.w	r1, [sl]
 80135a2:	b30d      	cbz	r5, 80135e8 <__gethex+0x14a>
 80135a4:	f1bb 0f00 	cmp.w	fp, #0
 80135a8:	bf0c      	ite	eq
 80135aa:	2706      	moveq	r7, #6
 80135ac:	2700      	movne	r7, #0
 80135ae:	4638      	mov	r0, r7
 80135b0:	b00b      	add	sp, #44	; 0x2c
 80135b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135b6:	f10b 0b01 	add.w	fp, fp, #1
 80135ba:	e78a      	b.n	80134d2 <__gethex+0x34>
 80135bc:	2500      	movs	r5, #0
 80135be:	462c      	mov	r4, r5
 80135c0:	e7ae      	b.n	8013520 <__gethex+0x82>
 80135c2:	463e      	mov	r6, r7
 80135c4:	2501      	movs	r5, #1
 80135c6:	e7c7      	b.n	8013558 <__gethex+0xba>
 80135c8:	4604      	mov	r4, r0
 80135ca:	e7fb      	b.n	80135c4 <__gethex+0x126>
 80135cc:	f04f 0900 	mov.w	r9, #0
 80135d0:	1cb1      	adds	r1, r6, #2
 80135d2:	e7ce      	b.n	8013572 <__gethex+0xd4>
 80135d4:	f04f 0901 	mov.w	r9, #1
 80135d8:	e7fa      	b.n	80135d0 <__gethex+0x132>
 80135da:	230a      	movs	r3, #10
 80135dc:	fb03 0202 	mla	r2, r3, r2, r0
 80135e0:	3a10      	subs	r2, #16
 80135e2:	e7cf      	b.n	8013584 <__gethex+0xe6>
 80135e4:	4631      	mov	r1, r6
 80135e6:	e7da      	b.n	801359e <__gethex+0x100>
 80135e8:	1bf3      	subs	r3, r6, r7
 80135ea:	3b01      	subs	r3, #1
 80135ec:	4629      	mov	r1, r5
 80135ee:	2b07      	cmp	r3, #7
 80135f0:	dc49      	bgt.n	8013686 <__gethex+0x1e8>
 80135f2:	9802      	ldr	r0, [sp, #8]
 80135f4:	f000 fa52 	bl	8013a9c <_Balloc>
 80135f8:	9b01      	ldr	r3, [sp, #4]
 80135fa:	f100 0914 	add.w	r9, r0, #20
 80135fe:	f04f 0b00 	mov.w	fp, #0
 8013602:	f1c3 0301 	rsb	r3, r3, #1
 8013606:	4605      	mov	r5, r0
 8013608:	f8cd 9010 	str.w	r9, [sp, #16]
 801360c:	46da      	mov	sl, fp
 801360e:	9308      	str	r3, [sp, #32]
 8013610:	42b7      	cmp	r7, r6
 8013612:	d33b      	bcc.n	801368c <__gethex+0x1ee>
 8013614:	9804      	ldr	r0, [sp, #16]
 8013616:	f840 ab04 	str.w	sl, [r0], #4
 801361a:	eba0 0009 	sub.w	r0, r0, r9
 801361e:	1080      	asrs	r0, r0, #2
 8013620:	6128      	str	r0, [r5, #16]
 8013622:	0147      	lsls	r7, r0, #5
 8013624:	4650      	mov	r0, sl
 8013626:	f000 fafd 	bl	8013c24 <__hi0bits>
 801362a:	f8d8 6000 	ldr.w	r6, [r8]
 801362e:	1a3f      	subs	r7, r7, r0
 8013630:	42b7      	cmp	r7, r6
 8013632:	dd64      	ble.n	80136fe <__gethex+0x260>
 8013634:	1bbf      	subs	r7, r7, r6
 8013636:	4639      	mov	r1, r7
 8013638:	4628      	mov	r0, r5
 801363a:	f000 fe0d 	bl	8014258 <__any_on>
 801363e:	4682      	mov	sl, r0
 8013640:	b178      	cbz	r0, 8013662 <__gethex+0x1c4>
 8013642:	1e7b      	subs	r3, r7, #1
 8013644:	1159      	asrs	r1, r3, #5
 8013646:	f003 021f 	and.w	r2, r3, #31
 801364a:	f04f 0a01 	mov.w	sl, #1
 801364e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8013652:	fa0a f202 	lsl.w	r2, sl, r2
 8013656:	420a      	tst	r2, r1
 8013658:	d003      	beq.n	8013662 <__gethex+0x1c4>
 801365a:	4553      	cmp	r3, sl
 801365c:	dc46      	bgt.n	80136ec <__gethex+0x24e>
 801365e:	f04f 0a02 	mov.w	sl, #2
 8013662:	4639      	mov	r1, r7
 8013664:	4628      	mov	r0, r5
 8013666:	f7ff fecb 	bl	8013400 <rshift>
 801366a:	443c      	add	r4, r7
 801366c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013670:	42a3      	cmp	r3, r4
 8013672:	da52      	bge.n	801371a <__gethex+0x27c>
 8013674:	4629      	mov	r1, r5
 8013676:	9802      	ldr	r0, [sp, #8]
 8013678:	f000 fa44 	bl	8013b04 <_Bfree>
 801367c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801367e:	2300      	movs	r3, #0
 8013680:	6013      	str	r3, [r2, #0]
 8013682:	27a3      	movs	r7, #163	; 0xa3
 8013684:	e793      	b.n	80135ae <__gethex+0x110>
 8013686:	3101      	adds	r1, #1
 8013688:	105b      	asrs	r3, r3, #1
 801368a:	e7b0      	b.n	80135ee <__gethex+0x150>
 801368c:	1e73      	subs	r3, r6, #1
 801368e:	9305      	str	r3, [sp, #20]
 8013690:	9a07      	ldr	r2, [sp, #28]
 8013692:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013696:	4293      	cmp	r3, r2
 8013698:	d018      	beq.n	80136cc <__gethex+0x22e>
 801369a:	f1bb 0f20 	cmp.w	fp, #32
 801369e:	d107      	bne.n	80136b0 <__gethex+0x212>
 80136a0:	9b04      	ldr	r3, [sp, #16]
 80136a2:	f8c3 a000 	str.w	sl, [r3]
 80136a6:	3304      	adds	r3, #4
 80136a8:	f04f 0a00 	mov.w	sl, #0
 80136ac:	9304      	str	r3, [sp, #16]
 80136ae:	46d3      	mov	fp, sl
 80136b0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80136b4:	f7ff fede 	bl	8013474 <__hexdig_fun>
 80136b8:	f000 000f 	and.w	r0, r0, #15
 80136bc:	fa00 f00b 	lsl.w	r0, r0, fp
 80136c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80136c4:	f10b 0b04 	add.w	fp, fp, #4
 80136c8:	9b05      	ldr	r3, [sp, #20]
 80136ca:	e00d      	b.n	80136e8 <__gethex+0x24a>
 80136cc:	9b05      	ldr	r3, [sp, #20]
 80136ce:	9a08      	ldr	r2, [sp, #32]
 80136d0:	4413      	add	r3, r2
 80136d2:	42bb      	cmp	r3, r7
 80136d4:	d3e1      	bcc.n	801369a <__gethex+0x1fc>
 80136d6:	4618      	mov	r0, r3
 80136d8:	9a01      	ldr	r2, [sp, #4]
 80136da:	9903      	ldr	r1, [sp, #12]
 80136dc:	9309      	str	r3, [sp, #36]	; 0x24
 80136de:	f000 ff3d 	bl	801455c <strncmp>
 80136e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136e4:	2800      	cmp	r0, #0
 80136e6:	d1d8      	bne.n	801369a <__gethex+0x1fc>
 80136e8:	461e      	mov	r6, r3
 80136ea:	e791      	b.n	8013610 <__gethex+0x172>
 80136ec:	1eb9      	subs	r1, r7, #2
 80136ee:	4628      	mov	r0, r5
 80136f0:	f000 fdb2 	bl	8014258 <__any_on>
 80136f4:	2800      	cmp	r0, #0
 80136f6:	d0b2      	beq.n	801365e <__gethex+0x1c0>
 80136f8:	f04f 0a03 	mov.w	sl, #3
 80136fc:	e7b1      	b.n	8013662 <__gethex+0x1c4>
 80136fe:	da09      	bge.n	8013714 <__gethex+0x276>
 8013700:	1bf7      	subs	r7, r6, r7
 8013702:	4629      	mov	r1, r5
 8013704:	463a      	mov	r2, r7
 8013706:	9802      	ldr	r0, [sp, #8]
 8013708:	f000 fbc8 	bl	8013e9c <__lshift>
 801370c:	1be4      	subs	r4, r4, r7
 801370e:	4605      	mov	r5, r0
 8013710:	f100 0914 	add.w	r9, r0, #20
 8013714:	f04f 0a00 	mov.w	sl, #0
 8013718:	e7a8      	b.n	801366c <__gethex+0x1ce>
 801371a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801371e:	42a0      	cmp	r0, r4
 8013720:	dd6a      	ble.n	80137f8 <__gethex+0x35a>
 8013722:	1b04      	subs	r4, r0, r4
 8013724:	42a6      	cmp	r6, r4
 8013726:	dc2e      	bgt.n	8013786 <__gethex+0x2e8>
 8013728:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801372c:	2b02      	cmp	r3, #2
 801372e:	d022      	beq.n	8013776 <__gethex+0x2d8>
 8013730:	2b03      	cmp	r3, #3
 8013732:	d024      	beq.n	801377e <__gethex+0x2e0>
 8013734:	2b01      	cmp	r3, #1
 8013736:	d115      	bne.n	8013764 <__gethex+0x2c6>
 8013738:	42a6      	cmp	r6, r4
 801373a:	d113      	bne.n	8013764 <__gethex+0x2c6>
 801373c:	2e01      	cmp	r6, #1
 801373e:	dc0b      	bgt.n	8013758 <__gethex+0x2ba>
 8013740:	9a06      	ldr	r2, [sp, #24]
 8013742:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8013746:	6013      	str	r3, [r2, #0]
 8013748:	2301      	movs	r3, #1
 801374a:	612b      	str	r3, [r5, #16]
 801374c:	f8c9 3000 	str.w	r3, [r9]
 8013750:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013752:	2762      	movs	r7, #98	; 0x62
 8013754:	601d      	str	r5, [r3, #0]
 8013756:	e72a      	b.n	80135ae <__gethex+0x110>
 8013758:	1e71      	subs	r1, r6, #1
 801375a:	4628      	mov	r0, r5
 801375c:	f000 fd7c 	bl	8014258 <__any_on>
 8013760:	2800      	cmp	r0, #0
 8013762:	d1ed      	bne.n	8013740 <__gethex+0x2a2>
 8013764:	4629      	mov	r1, r5
 8013766:	9802      	ldr	r0, [sp, #8]
 8013768:	f000 f9cc 	bl	8013b04 <_Bfree>
 801376c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801376e:	2300      	movs	r3, #0
 8013770:	6013      	str	r3, [r2, #0]
 8013772:	2750      	movs	r7, #80	; 0x50
 8013774:	e71b      	b.n	80135ae <__gethex+0x110>
 8013776:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013778:	2b00      	cmp	r3, #0
 801377a:	d0e1      	beq.n	8013740 <__gethex+0x2a2>
 801377c:	e7f2      	b.n	8013764 <__gethex+0x2c6>
 801377e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013780:	2b00      	cmp	r3, #0
 8013782:	d1dd      	bne.n	8013740 <__gethex+0x2a2>
 8013784:	e7ee      	b.n	8013764 <__gethex+0x2c6>
 8013786:	1e67      	subs	r7, r4, #1
 8013788:	f1ba 0f00 	cmp.w	sl, #0
 801378c:	d131      	bne.n	80137f2 <__gethex+0x354>
 801378e:	b127      	cbz	r7, 801379a <__gethex+0x2fc>
 8013790:	4639      	mov	r1, r7
 8013792:	4628      	mov	r0, r5
 8013794:	f000 fd60 	bl	8014258 <__any_on>
 8013798:	4682      	mov	sl, r0
 801379a:	117a      	asrs	r2, r7, #5
 801379c:	2301      	movs	r3, #1
 801379e:	f007 071f 	and.w	r7, r7, #31
 80137a2:	fa03 f707 	lsl.w	r7, r3, r7
 80137a6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80137aa:	4621      	mov	r1, r4
 80137ac:	421f      	tst	r7, r3
 80137ae:	4628      	mov	r0, r5
 80137b0:	bf18      	it	ne
 80137b2:	f04a 0a02 	orrne.w	sl, sl, #2
 80137b6:	1b36      	subs	r6, r6, r4
 80137b8:	f7ff fe22 	bl	8013400 <rshift>
 80137bc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80137c0:	2702      	movs	r7, #2
 80137c2:	f1ba 0f00 	cmp.w	sl, #0
 80137c6:	d048      	beq.n	801385a <__gethex+0x3bc>
 80137c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80137cc:	2b02      	cmp	r3, #2
 80137ce:	d015      	beq.n	80137fc <__gethex+0x35e>
 80137d0:	2b03      	cmp	r3, #3
 80137d2:	d017      	beq.n	8013804 <__gethex+0x366>
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d109      	bne.n	80137ec <__gethex+0x34e>
 80137d8:	f01a 0f02 	tst.w	sl, #2
 80137dc:	d006      	beq.n	80137ec <__gethex+0x34e>
 80137de:	f8d9 3000 	ldr.w	r3, [r9]
 80137e2:	ea4a 0a03 	orr.w	sl, sl, r3
 80137e6:	f01a 0f01 	tst.w	sl, #1
 80137ea:	d10e      	bne.n	801380a <__gethex+0x36c>
 80137ec:	f047 0710 	orr.w	r7, r7, #16
 80137f0:	e033      	b.n	801385a <__gethex+0x3bc>
 80137f2:	f04f 0a01 	mov.w	sl, #1
 80137f6:	e7d0      	b.n	801379a <__gethex+0x2fc>
 80137f8:	2701      	movs	r7, #1
 80137fa:	e7e2      	b.n	80137c2 <__gethex+0x324>
 80137fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80137fe:	f1c3 0301 	rsb	r3, r3, #1
 8013802:	9315      	str	r3, [sp, #84]	; 0x54
 8013804:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013806:	2b00      	cmp	r3, #0
 8013808:	d0f0      	beq.n	80137ec <__gethex+0x34e>
 801380a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801380e:	f105 0314 	add.w	r3, r5, #20
 8013812:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8013816:	eb03 010a 	add.w	r1, r3, sl
 801381a:	f04f 0c00 	mov.w	ip, #0
 801381e:	4618      	mov	r0, r3
 8013820:	f853 2b04 	ldr.w	r2, [r3], #4
 8013824:	f1b2 3fff 	cmp.w	r2, #4294967295
 8013828:	d01c      	beq.n	8013864 <__gethex+0x3c6>
 801382a:	3201      	adds	r2, #1
 801382c:	6002      	str	r2, [r0, #0]
 801382e:	2f02      	cmp	r7, #2
 8013830:	f105 0314 	add.w	r3, r5, #20
 8013834:	d138      	bne.n	80138a8 <__gethex+0x40a>
 8013836:	f8d8 2000 	ldr.w	r2, [r8]
 801383a:	3a01      	subs	r2, #1
 801383c:	42b2      	cmp	r2, r6
 801383e:	d10a      	bne.n	8013856 <__gethex+0x3b8>
 8013840:	1171      	asrs	r1, r6, #5
 8013842:	2201      	movs	r2, #1
 8013844:	f006 061f 	and.w	r6, r6, #31
 8013848:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801384c:	fa02 f606 	lsl.w	r6, r2, r6
 8013850:	421e      	tst	r6, r3
 8013852:	bf18      	it	ne
 8013854:	4617      	movne	r7, r2
 8013856:	f047 0720 	orr.w	r7, r7, #32
 801385a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801385c:	601d      	str	r5, [r3, #0]
 801385e:	9b06      	ldr	r3, [sp, #24]
 8013860:	601c      	str	r4, [r3, #0]
 8013862:	e6a4      	b.n	80135ae <__gethex+0x110>
 8013864:	4299      	cmp	r1, r3
 8013866:	f843 cc04 	str.w	ip, [r3, #-4]
 801386a:	d8d8      	bhi.n	801381e <__gethex+0x380>
 801386c:	68ab      	ldr	r3, [r5, #8]
 801386e:	4599      	cmp	r9, r3
 8013870:	db12      	blt.n	8013898 <__gethex+0x3fa>
 8013872:	6869      	ldr	r1, [r5, #4]
 8013874:	9802      	ldr	r0, [sp, #8]
 8013876:	3101      	adds	r1, #1
 8013878:	f000 f910 	bl	8013a9c <_Balloc>
 801387c:	692a      	ldr	r2, [r5, #16]
 801387e:	3202      	adds	r2, #2
 8013880:	f105 010c 	add.w	r1, r5, #12
 8013884:	4683      	mov	fp, r0
 8013886:	0092      	lsls	r2, r2, #2
 8013888:	300c      	adds	r0, #12
 801388a:	f7fd f993 	bl	8010bb4 <memcpy>
 801388e:	4629      	mov	r1, r5
 8013890:	9802      	ldr	r0, [sp, #8]
 8013892:	f000 f937 	bl	8013b04 <_Bfree>
 8013896:	465d      	mov	r5, fp
 8013898:	692b      	ldr	r3, [r5, #16]
 801389a:	1c5a      	adds	r2, r3, #1
 801389c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80138a0:	612a      	str	r2, [r5, #16]
 80138a2:	2201      	movs	r2, #1
 80138a4:	615a      	str	r2, [r3, #20]
 80138a6:	e7c2      	b.n	801382e <__gethex+0x390>
 80138a8:	692a      	ldr	r2, [r5, #16]
 80138aa:	454a      	cmp	r2, r9
 80138ac:	dd0b      	ble.n	80138c6 <__gethex+0x428>
 80138ae:	2101      	movs	r1, #1
 80138b0:	4628      	mov	r0, r5
 80138b2:	f7ff fda5 	bl	8013400 <rshift>
 80138b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80138ba:	3401      	adds	r4, #1
 80138bc:	42a3      	cmp	r3, r4
 80138be:	f6ff aed9 	blt.w	8013674 <__gethex+0x1d6>
 80138c2:	2701      	movs	r7, #1
 80138c4:	e7c7      	b.n	8013856 <__gethex+0x3b8>
 80138c6:	f016 061f 	ands.w	r6, r6, #31
 80138ca:	d0fa      	beq.n	80138c2 <__gethex+0x424>
 80138cc:	449a      	add	sl, r3
 80138ce:	f1c6 0620 	rsb	r6, r6, #32
 80138d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80138d6:	f000 f9a5 	bl	8013c24 <__hi0bits>
 80138da:	42b0      	cmp	r0, r6
 80138dc:	dbe7      	blt.n	80138ae <__gethex+0x410>
 80138de:	e7f0      	b.n	80138c2 <__gethex+0x424>

080138e0 <L_shift>:
 80138e0:	f1c2 0208 	rsb	r2, r2, #8
 80138e4:	0092      	lsls	r2, r2, #2
 80138e6:	b570      	push	{r4, r5, r6, lr}
 80138e8:	f1c2 0620 	rsb	r6, r2, #32
 80138ec:	6843      	ldr	r3, [r0, #4]
 80138ee:	6804      	ldr	r4, [r0, #0]
 80138f0:	fa03 f506 	lsl.w	r5, r3, r6
 80138f4:	432c      	orrs	r4, r5
 80138f6:	40d3      	lsrs	r3, r2
 80138f8:	6004      	str	r4, [r0, #0]
 80138fa:	f840 3f04 	str.w	r3, [r0, #4]!
 80138fe:	4288      	cmp	r0, r1
 8013900:	d3f4      	bcc.n	80138ec <L_shift+0xc>
 8013902:	bd70      	pop	{r4, r5, r6, pc}

08013904 <__match>:
 8013904:	b530      	push	{r4, r5, lr}
 8013906:	6803      	ldr	r3, [r0, #0]
 8013908:	3301      	adds	r3, #1
 801390a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801390e:	b914      	cbnz	r4, 8013916 <__match+0x12>
 8013910:	6003      	str	r3, [r0, #0]
 8013912:	2001      	movs	r0, #1
 8013914:	bd30      	pop	{r4, r5, pc}
 8013916:	f813 2b01 	ldrb.w	r2, [r3], #1
 801391a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801391e:	2d19      	cmp	r5, #25
 8013920:	bf98      	it	ls
 8013922:	3220      	addls	r2, #32
 8013924:	42a2      	cmp	r2, r4
 8013926:	d0f0      	beq.n	801390a <__match+0x6>
 8013928:	2000      	movs	r0, #0
 801392a:	e7f3      	b.n	8013914 <__match+0x10>

0801392c <__hexnan>:
 801392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013930:	680b      	ldr	r3, [r1, #0]
 8013932:	6801      	ldr	r1, [r0, #0]
 8013934:	115f      	asrs	r7, r3, #5
 8013936:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801393a:	f013 031f 	ands.w	r3, r3, #31
 801393e:	b087      	sub	sp, #28
 8013940:	bf18      	it	ne
 8013942:	3704      	addne	r7, #4
 8013944:	2500      	movs	r5, #0
 8013946:	1f3e      	subs	r6, r7, #4
 8013948:	4682      	mov	sl, r0
 801394a:	4690      	mov	r8, r2
 801394c:	9301      	str	r3, [sp, #4]
 801394e:	f847 5c04 	str.w	r5, [r7, #-4]
 8013952:	46b1      	mov	r9, r6
 8013954:	4634      	mov	r4, r6
 8013956:	9502      	str	r5, [sp, #8]
 8013958:	46ab      	mov	fp, r5
 801395a:	784a      	ldrb	r2, [r1, #1]
 801395c:	1c4b      	adds	r3, r1, #1
 801395e:	9303      	str	r3, [sp, #12]
 8013960:	b342      	cbz	r2, 80139b4 <__hexnan+0x88>
 8013962:	4610      	mov	r0, r2
 8013964:	9105      	str	r1, [sp, #20]
 8013966:	9204      	str	r2, [sp, #16]
 8013968:	f7ff fd84 	bl	8013474 <__hexdig_fun>
 801396c:	2800      	cmp	r0, #0
 801396e:	d143      	bne.n	80139f8 <__hexnan+0xcc>
 8013970:	9a04      	ldr	r2, [sp, #16]
 8013972:	9905      	ldr	r1, [sp, #20]
 8013974:	2a20      	cmp	r2, #32
 8013976:	d818      	bhi.n	80139aa <__hexnan+0x7e>
 8013978:	9b02      	ldr	r3, [sp, #8]
 801397a:	459b      	cmp	fp, r3
 801397c:	dd13      	ble.n	80139a6 <__hexnan+0x7a>
 801397e:	454c      	cmp	r4, r9
 8013980:	d206      	bcs.n	8013990 <__hexnan+0x64>
 8013982:	2d07      	cmp	r5, #7
 8013984:	dc04      	bgt.n	8013990 <__hexnan+0x64>
 8013986:	462a      	mov	r2, r5
 8013988:	4649      	mov	r1, r9
 801398a:	4620      	mov	r0, r4
 801398c:	f7ff ffa8 	bl	80138e0 <L_shift>
 8013990:	4544      	cmp	r4, r8
 8013992:	d944      	bls.n	8013a1e <__hexnan+0xf2>
 8013994:	2300      	movs	r3, #0
 8013996:	f1a4 0904 	sub.w	r9, r4, #4
 801399a:	f844 3c04 	str.w	r3, [r4, #-4]
 801399e:	f8cd b008 	str.w	fp, [sp, #8]
 80139a2:	464c      	mov	r4, r9
 80139a4:	461d      	mov	r5, r3
 80139a6:	9903      	ldr	r1, [sp, #12]
 80139a8:	e7d7      	b.n	801395a <__hexnan+0x2e>
 80139aa:	2a29      	cmp	r2, #41	; 0x29
 80139ac:	d14a      	bne.n	8013a44 <__hexnan+0x118>
 80139ae:	3102      	adds	r1, #2
 80139b0:	f8ca 1000 	str.w	r1, [sl]
 80139b4:	f1bb 0f00 	cmp.w	fp, #0
 80139b8:	d044      	beq.n	8013a44 <__hexnan+0x118>
 80139ba:	454c      	cmp	r4, r9
 80139bc:	d206      	bcs.n	80139cc <__hexnan+0xa0>
 80139be:	2d07      	cmp	r5, #7
 80139c0:	dc04      	bgt.n	80139cc <__hexnan+0xa0>
 80139c2:	462a      	mov	r2, r5
 80139c4:	4649      	mov	r1, r9
 80139c6:	4620      	mov	r0, r4
 80139c8:	f7ff ff8a 	bl	80138e0 <L_shift>
 80139cc:	4544      	cmp	r4, r8
 80139ce:	d928      	bls.n	8013a22 <__hexnan+0xf6>
 80139d0:	4643      	mov	r3, r8
 80139d2:	f854 2b04 	ldr.w	r2, [r4], #4
 80139d6:	f843 2b04 	str.w	r2, [r3], #4
 80139da:	42a6      	cmp	r6, r4
 80139dc:	d2f9      	bcs.n	80139d2 <__hexnan+0xa6>
 80139de:	2200      	movs	r2, #0
 80139e0:	f843 2b04 	str.w	r2, [r3], #4
 80139e4:	429e      	cmp	r6, r3
 80139e6:	d2fb      	bcs.n	80139e0 <__hexnan+0xb4>
 80139e8:	6833      	ldr	r3, [r6, #0]
 80139ea:	b91b      	cbnz	r3, 80139f4 <__hexnan+0xc8>
 80139ec:	4546      	cmp	r6, r8
 80139ee:	d127      	bne.n	8013a40 <__hexnan+0x114>
 80139f0:	2301      	movs	r3, #1
 80139f2:	6033      	str	r3, [r6, #0]
 80139f4:	2005      	movs	r0, #5
 80139f6:	e026      	b.n	8013a46 <__hexnan+0x11a>
 80139f8:	3501      	adds	r5, #1
 80139fa:	2d08      	cmp	r5, #8
 80139fc:	f10b 0b01 	add.w	fp, fp, #1
 8013a00:	dd06      	ble.n	8013a10 <__hexnan+0xe4>
 8013a02:	4544      	cmp	r4, r8
 8013a04:	d9cf      	bls.n	80139a6 <__hexnan+0x7a>
 8013a06:	2300      	movs	r3, #0
 8013a08:	f844 3c04 	str.w	r3, [r4, #-4]
 8013a0c:	2501      	movs	r5, #1
 8013a0e:	3c04      	subs	r4, #4
 8013a10:	6822      	ldr	r2, [r4, #0]
 8013a12:	f000 000f 	and.w	r0, r0, #15
 8013a16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8013a1a:	6020      	str	r0, [r4, #0]
 8013a1c:	e7c3      	b.n	80139a6 <__hexnan+0x7a>
 8013a1e:	2508      	movs	r5, #8
 8013a20:	e7c1      	b.n	80139a6 <__hexnan+0x7a>
 8013a22:	9b01      	ldr	r3, [sp, #4]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d0df      	beq.n	80139e8 <__hexnan+0xbc>
 8013a28:	f04f 32ff 	mov.w	r2, #4294967295
 8013a2c:	f1c3 0320 	rsb	r3, r3, #32
 8013a30:	fa22 f303 	lsr.w	r3, r2, r3
 8013a34:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8013a38:	401a      	ands	r2, r3
 8013a3a:	f847 2c04 	str.w	r2, [r7, #-4]
 8013a3e:	e7d3      	b.n	80139e8 <__hexnan+0xbc>
 8013a40:	3e04      	subs	r6, #4
 8013a42:	e7d1      	b.n	80139e8 <__hexnan+0xbc>
 8013a44:	2004      	movs	r0, #4
 8013a46:	b007      	add	sp, #28
 8013a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013a4c <__locale_ctype_ptr_l>:
 8013a4c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8013a50:	4770      	bx	lr

08013a52 <__localeconv_l>:
 8013a52:	30f0      	adds	r0, #240	; 0xf0
 8013a54:	4770      	bx	lr
	...

08013a58 <_localeconv_r>:
 8013a58:	4b04      	ldr	r3, [pc, #16]	; (8013a6c <_localeconv_r+0x14>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	6a18      	ldr	r0, [r3, #32]
 8013a5e:	4b04      	ldr	r3, [pc, #16]	; (8013a70 <_localeconv_r+0x18>)
 8013a60:	2800      	cmp	r0, #0
 8013a62:	bf08      	it	eq
 8013a64:	4618      	moveq	r0, r3
 8013a66:	30f0      	adds	r0, #240	; 0xf0
 8013a68:	4770      	bx	lr
 8013a6a:	bf00      	nop
 8013a6c:	20000190 	.word	0x20000190
 8013a70:	200001f4 	.word	0x200001f4

08013a74 <__ascii_mbtowc>:
 8013a74:	b082      	sub	sp, #8
 8013a76:	b901      	cbnz	r1, 8013a7a <__ascii_mbtowc+0x6>
 8013a78:	a901      	add	r1, sp, #4
 8013a7a:	b142      	cbz	r2, 8013a8e <__ascii_mbtowc+0x1a>
 8013a7c:	b14b      	cbz	r3, 8013a92 <__ascii_mbtowc+0x1e>
 8013a7e:	7813      	ldrb	r3, [r2, #0]
 8013a80:	600b      	str	r3, [r1, #0]
 8013a82:	7812      	ldrb	r2, [r2, #0]
 8013a84:	1c10      	adds	r0, r2, #0
 8013a86:	bf18      	it	ne
 8013a88:	2001      	movne	r0, #1
 8013a8a:	b002      	add	sp, #8
 8013a8c:	4770      	bx	lr
 8013a8e:	4610      	mov	r0, r2
 8013a90:	e7fb      	b.n	8013a8a <__ascii_mbtowc+0x16>
 8013a92:	f06f 0001 	mvn.w	r0, #1
 8013a96:	e7f8      	b.n	8013a8a <__ascii_mbtowc+0x16>

08013a98 <__malloc_lock>:
 8013a98:	4770      	bx	lr

08013a9a <__malloc_unlock>:
 8013a9a:	4770      	bx	lr

08013a9c <_Balloc>:
 8013a9c:	b570      	push	{r4, r5, r6, lr}
 8013a9e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013aa0:	4604      	mov	r4, r0
 8013aa2:	460e      	mov	r6, r1
 8013aa4:	b93d      	cbnz	r5, 8013ab6 <_Balloc+0x1a>
 8013aa6:	2010      	movs	r0, #16
 8013aa8:	f7fd f874 	bl	8010b94 <malloc>
 8013aac:	6260      	str	r0, [r4, #36]	; 0x24
 8013aae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013ab2:	6005      	str	r5, [r0, #0]
 8013ab4:	60c5      	str	r5, [r0, #12]
 8013ab6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013ab8:	68eb      	ldr	r3, [r5, #12]
 8013aba:	b183      	cbz	r3, 8013ade <_Balloc+0x42>
 8013abc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013ac4:	b9b8      	cbnz	r0, 8013af6 <_Balloc+0x5a>
 8013ac6:	2101      	movs	r1, #1
 8013ac8:	fa01 f506 	lsl.w	r5, r1, r6
 8013acc:	1d6a      	adds	r2, r5, #5
 8013ace:	0092      	lsls	r2, r2, #2
 8013ad0:	4620      	mov	r0, r4
 8013ad2:	f000 fbe2 	bl	801429a <_calloc_r>
 8013ad6:	b160      	cbz	r0, 8013af2 <_Balloc+0x56>
 8013ad8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013adc:	e00e      	b.n	8013afc <_Balloc+0x60>
 8013ade:	2221      	movs	r2, #33	; 0x21
 8013ae0:	2104      	movs	r1, #4
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	f000 fbd9 	bl	801429a <_calloc_r>
 8013ae8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013aea:	60e8      	str	r0, [r5, #12]
 8013aec:	68db      	ldr	r3, [r3, #12]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d1e4      	bne.n	8013abc <_Balloc+0x20>
 8013af2:	2000      	movs	r0, #0
 8013af4:	bd70      	pop	{r4, r5, r6, pc}
 8013af6:	6802      	ldr	r2, [r0, #0]
 8013af8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013afc:	2300      	movs	r3, #0
 8013afe:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b02:	e7f7      	b.n	8013af4 <_Balloc+0x58>

08013b04 <_Bfree>:
 8013b04:	b570      	push	{r4, r5, r6, lr}
 8013b06:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013b08:	4606      	mov	r6, r0
 8013b0a:	460d      	mov	r5, r1
 8013b0c:	b93c      	cbnz	r4, 8013b1e <_Bfree+0x1a>
 8013b0e:	2010      	movs	r0, #16
 8013b10:	f7fd f840 	bl	8010b94 <malloc>
 8013b14:	6270      	str	r0, [r6, #36]	; 0x24
 8013b16:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b1a:	6004      	str	r4, [r0, #0]
 8013b1c:	60c4      	str	r4, [r0, #12]
 8013b1e:	b13d      	cbz	r5, 8013b30 <_Bfree+0x2c>
 8013b20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013b22:	686a      	ldr	r2, [r5, #4]
 8013b24:	68db      	ldr	r3, [r3, #12]
 8013b26:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b2a:	6029      	str	r1, [r5, #0]
 8013b2c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013b30:	bd70      	pop	{r4, r5, r6, pc}

08013b32 <__multadd>:
 8013b32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b36:	690d      	ldr	r5, [r1, #16]
 8013b38:	461f      	mov	r7, r3
 8013b3a:	4606      	mov	r6, r0
 8013b3c:	460c      	mov	r4, r1
 8013b3e:	f101 0c14 	add.w	ip, r1, #20
 8013b42:	2300      	movs	r3, #0
 8013b44:	f8dc 0000 	ldr.w	r0, [ip]
 8013b48:	b281      	uxth	r1, r0
 8013b4a:	fb02 7101 	mla	r1, r2, r1, r7
 8013b4e:	0c0f      	lsrs	r7, r1, #16
 8013b50:	0c00      	lsrs	r0, r0, #16
 8013b52:	fb02 7000 	mla	r0, r2, r0, r7
 8013b56:	b289      	uxth	r1, r1
 8013b58:	3301      	adds	r3, #1
 8013b5a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013b5e:	429d      	cmp	r5, r3
 8013b60:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013b64:	f84c 1b04 	str.w	r1, [ip], #4
 8013b68:	dcec      	bgt.n	8013b44 <__multadd+0x12>
 8013b6a:	b1d7      	cbz	r7, 8013ba2 <__multadd+0x70>
 8013b6c:	68a3      	ldr	r3, [r4, #8]
 8013b6e:	42ab      	cmp	r3, r5
 8013b70:	dc12      	bgt.n	8013b98 <__multadd+0x66>
 8013b72:	6861      	ldr	r1, [r4, #4]
 8013b74:	4630      	mov	r0, r6
 8013b76:	3101      	adds	r1, #1
 8013b78:	f7ff ff90 	bl	8013a9c <_Balloc>
 8013b7c:	6922      	ldr	r2, [r4, #16]
 8013b7e:	3202      	adds	r2, #2
 8013b80:	f104 010c 	add.w	r1, r4, #12
 8013b84:	4680      	mov	r8, r0
 8013b86:	0092      	lsls	r2, r2, #2
 8013b88:	300c      	adds	r0, #12
 8013b8a:	f7fd f813 	bl	8010bb4 <memcpy>
 8013b8e:	4621      	mov	r1, r4
 8013b90:	4630      	mov	r0, r6
 8013b92:	f7ff ffb7 	bl	8013b04 <_Bfree>
 8013b96:	4644      	mov	r4, r8
 8013b98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b9c:	3501      	adds	r5, #1
 8013b9e:	615f      	str	r7, [r3, #20]
 8013ba0:	6125      	str	r5, [r4, #16]
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ba8 <__s2b>:
 8013ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013bac:	460c      	mov	r4, r1
 8013bae:	4615      	mov	r5, r2
 8013bb0:	461f      	mov	r7, r3
 8013bb2:	2209      	movs	r2, #9
 8013bb4:	3308      	adds	r3, #8
 8013bb6:	4606      	mov	r6, r0
 8013bb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8013bbc:	2100      	movs	r1, #0
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	429a      	cmp	r2, r3
 8013bc2:	db20      	blt.n	8013c06 <__s2b+0x5e>
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	f7ff ff69 	bl	8013a9c <_Balloc>
 8013bca:	9b08      	ldr	r3, [sp, #32]
 8013bcc:	6143      	str	r3, [r0, #20]
 8013bce:	2d09      	cmp	r5, #9
 8013bd0:	f04f 0301 	mov.w	r3, #1
 8013bd4:	6103      	str	r3, [r0, #16]
 8013bd6:	dd19      	ble.n	8013c0c <__s2b+0x64>
 8013bd8:	f104 0809 	add.w	r8, r4, #9
 8013bdc:	46c1      	mov	r9, r8
 8013bde:	442c      	add	r4, r5
 8013be0:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013be4:	4601      	mov	r1, r0
 8013be6:	3b30      	subs	r3, #48	; 0x30
 8013be8:	220a      	movs	r2, #10
 8013bea:	4630      	mov	r0, r6
 8013bec:	f7ff ffa1 	bl	8013b32 <__multadd>
 8013bf0:	45a1      	cmp	r9, r4
 8013bf2:	d1f5      	bne.n	8013be0 <__s2b+0x38>
 8013bf4:	eb08 0405 	add.w	r4, r8, r5
 8013bf8:	3c08      	subs	r4, #8
 8013bfa:	1b2d      	subs	r5, r5, r4
 8013bfc:	1963      	adds	r3, r4, r5
 8013bfe:	42bb      	cmp	r3, r7
 8013c00:	db07      	blt.n	8013c12 <__s2b+0x6a>
 8013c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c06:	0052      	lsls	r2, r2, #1
 8013c08:	3101      	adds	r1, #1
 8013c0a:	e7d9      	b.n	8013bc0 <__s2b+0x18>
 8013c0c:	340a      	adds	r4, #10
 8013c0e:	2509      	movs	r5, #9
 8013c10:	e7f3      	b.n	8013bfa <__s2b+0x52>
 8013c12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013c16:	4601      	mov	r1, r0
 8013c18:	3b30      	subs	r3, #48	; 0x30
 8013c1a:	220a      	movs	r2, #10
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f7ff ff88 	bl	8013b32 <__multadd>
 8013c22:	e7eb      	b.n	8013bfc <__s2b+0x54>

08013c24 <__hi0bits>:
 8013c24:	0c02      	lsrs	r2, r0, #16
 8013c26:	0412      	lsls	r2, r2, #16
 8013c28:	4603      	mov	r3, r0
 8013c2a:	b9b2      	cbnz	r2, 8013c5a <__hi0bits+0x36>
 8013c2c:	0403      	lsls	r3, r0, #16
 8013c2e:	2010      	movs	r0, #16
 8013c30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013c34:	bf04      	itt	eq
 8013c36:	021b      	lsleq	r3, r3, #8
 8013c38:	3008      	addeq	r0, #8
 8013c3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013c3e:	bf04      	itt	eq
 8013c40:	011b      	lsleq	r3, r3, #4
 8013c42:	3004      	addeq	r0, #4
 8013c44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013c48:	bf04      	itt	eq
 8013c4a:	009b      	lsleq	r3, r3, #2
 8013c4c:	3002      	addeq	r0, #2
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	db06      	blt.n	8013c60 <__hi0bits+0x3c>
 8013c52:	005b      	lsls	r3, r3, #1
 8013c54:	d503      	bpl.n	8013c5e <__hi0bits+0x3a>
 8013c56:	3001      	adds	r0, #1
 8013c58:	4770      	bx	lr
 8013c5a:	2000      	movs	r0, #0
 8013c5c:	e7e8      	b.n	8013c30 <__hi0bits+0xc>
 8013c5e:	2020      	movs	r0, #32
 8013c60:	4770      	bx	lr

08013c62 <__lo0bits>:
 8013c62:	6803      	ldr	r3, [r0, #0]
 8013c64:	f013 0207 	ands.w	r2, r3, #7
 8013c68:	4601      	mov	r1, r0
 8013c6a:	d00b      	beq.n	8013c84 <__lo0bits+0x22>
 8013c6c:	07da      	lsls	r2, r3, #31
 8013c6e:	d423      	bmi.n	8013cb8 <__lo0bits+0x56>
 8013c70:	0798      	lsls	r0, r3, #30
 8013c72:	bf49      	itett	mi
 8013c74:	085b      	lsrmi	r3, r3, #1
 8013c76:	089b      	lsrpl	r3, r3, #2
 8013c78:	2001      	movmi	r0, #1
 8013c7a:	600b      	strmi	r3, [r1, #0]
 8013c7c:	bf5c      	itt	pl
 8013c7e:	600b      	strpl	r3, [r1, #0]
 8013c80:	2002      	movpl	r0, #2
 8013c82:	4770      	bx	lr
 8013c84:	b298      	uxth	r0, r3
 8013c86:	b9a8      	cbnz	r0, 8013cb4 <__lo0bits+0x52>
 8013c88:	0c1b      	lsrs	r3, r3, #16
 8013c8a:	2010      	movs	r0, #16
 8013c8c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013c90:	bf04      	itt	eq
 8013c92:	0a1b      	lsreq	r3, r3, #8
 8013c94:	3008      	addeq	r0, #8
 8013c96:	071a      	lsls	r2, r3, #28
 8013c98:	bf04      	itt	eq
 8013c9a:	091b      	lsreq	r3, r3, #4
 8013c9c:	3004      	addeq	r0, #4
 8013c9e:	079a      	lsls	r2, r3, #30
 8013ca0:	bf04      	itt	eq
 8013ca2:	089b      	lsreq	r3, r3, #2
 8013ca4:	3002      	addeq	r0, #2
 8013ca6:	07da      	lsls	r2, r3, #31
 8013ca8:	d402      	bmi.n	8013cb0 <__lo0bits+0x4e>
 8013caa:	085b      	lsrs	r3, r3, #1
 8013cac:	d006      	beq.n	8013cbc <__lo0bits+0x5a>
 8013cae:	3001      	adds	r0, #1
 8013cb0:	600b      	str	r3, [r1, #0]
 8013cb2:	4770      	bx	lr
 8013cb4:	4610      	mov	r0, r2
 8013cb6:	e7e9      	b.n	8013c8c <__lo0bits+0x2a>
 8013cb8:	2000      	movs	r0, #0
 8013cba:	4770      	bx	lr
 8013cbc:	2020      	movs	r0, #32
 8013cbe:	4770      	bx	lr

08013cc0 <__i2b>:
 8013cc0:	b510      	push	{r4, lr}
 8013cc2:	460c      	mov	r4, r1
 8013cc4:	2101      	movs	r1, #1
 8013cc6:	f7ff fee9 	bl	8013a9c <_Balloc>
 8013cca:	2201      	movs	r2, #1
 8013ccc:	6144      	str	r4, [r0, #20]
 8013cce:	6102      	str	r2, [r0, #16]
 8013cd0:	bd10      	pop	{r4, pc}

08013cd2 <__multiply>:
 8013cd2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd6:	4614      	mov	r4, r2
 8013cd8:	690a      	ldr	r2, [r1, #16]
 8013cda:	6923      	ldr	r3, [r4, #16]
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	bfb8      	it	lt
 8013ce0:	460b      	movlt	r3, r1
 8013ce2:	4688      	mov	r8, r1
 8013ce4:	bfbc      	itt	lt
 8013ce6:	46a0      	movlt	r8, r4
 8013ce8:	461c      	movlt	r4, r3
 8013cea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013cee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013cf2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013cf6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013cfa:	eb07 0609 	add.w	r6, r7, r9
 8013cfe:	42b3      	cmp	r3, r6
 8013d00:	bfb8      	it	lt
 8013d02:	3101      	addlt	r1, #1
 8013d04:	f7ff feca 	bl	8013a9c <_Balloc>
 8013d08:	f100 0514 	add.w	r5, r0, #20
 8013d0c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013d10:	462b      	mov	r3, r5
 8013d12:	2200      	movs	r2, #0
 8013d14:	4573      	cmp	r3, lr
 8013d16:	d316      	bcc.n	8013d46 <__multiply+0x74>
 8013d18:	f104 0214 	add.w	r2, r4, #20
 8013d1c:	f108 0114 	add.w	r1, r8, #20
 8013d20:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013d24:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013d28:	9300      	str	r3, [sp, #0]
 8013d2a:	9b00      	ldr	r3, [sp, #0]
 8013d2c:	9201      	str	r2, [sp, #4]
 8013d2e:	4293      	cmp	r3, r2
 8013d30:	d80c      	bhi.n	8013d4c <__multiply+0x7a>
 8013d32:	2e00      	cmp	r6, #0
 8013d34:	dd03      	ble.n	8013d3e <__multiply+0x6c>
 8013d36:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d05d      	beq.n	8013dfa <__multiply+0x128>
 8013d3e:	6106      	str	r6, [r0, #16]
 8013d40:	b003      	add	sp, #12
 8013d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d46:	f843 2b04 	str.w	r2, [r3], #4
 8013d4a:	e7e3      	b.n	8013d14 <__multiply+0x42>
 8013d4c:	f8b2 b000 	ldrh.w	fp, [r2]
 8013d50:	f1bb 0f00 	cmp.w	fp, #0
 8013d54:	d023      	beq.n	8013d9e <__multiply+0xcc>
 8013d56:	4689      	mov	r9, r1
 8013d58:	46ac      	mov	ip, r5
 8013d5a:	f04f 0800 	mov.w	r8, #0
 8013d5e:	f859 4b04 	ldr.w	r4, [r9], #4
 8013d62:	f8dc a000 	ldr.w	sl, [ip]
 8013d66:	b2a3      	uxth	r3, r4
 8013d68:	fa1f fa8a 	uxth.w	sl, sl
 8013d6c:	fb0b a303 	mla	r3, fp, r3, sl
 8013d70:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013d74:	f8dc 4000 	ldr.w	r4, [ip]
 8013d78:	4443      	add	r3, r8
 8013d7a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013d7e:	fb0b 840a 	mla	r4, fp, sl, r8
 8013d82:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013d86:	46e2      	mov	sl, ip
 8013d88:	b29b      	uxth	r3, r3
 8013d8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013d8e:	454f      	cmp	r7, r9
 8013d90:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013d94:	f84a 3b04 	str.w	r3, [sl], #4
 8013d98:	d82b      	bhi.n	8013df2 <__multiply+0x120>
 8013d9a:	f8cc 8004 	str.w	r8, [ip, #4]
 8013d9e:	9b01      	ldr	r3, [sp, #4]
 8013da0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013da4:	3204      	adds	r2, #4
 8013da6:	f1ba 0f00 	cmp.w	sl, #0
 8013daa:	d020      	beq.n	8013dee <__multiply+0x11c>
 8013dac:	682b      	ldr	r3, [r5, #0]
 8013dae:	4689      	mov	r9, r1
 8013db0:	46a8      	mov	r8, r5
 8013db2:	f04f 0b00 	mov.w	fp, #0
 8013db6:	f8b9 c000 	ldrh.w	ip, [r9]
 8013dba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013dbe:	fb0a 440c 	mla	r4, sl, ip, r4
 8013dc2:	445c      	add	r4, fp
 8013dc4:	46c4      	mov	ip, r8
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013dcc:	f84c 3b04 	str.w	r3, [ip], #4
 8013dd0:	f859 3b04 	ldr.w	r3, [r9], #4
 8013dd4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013dd8:	0c1b      	lsrs	r3, r3, #16
 8013dda:	fb0a b303 	mla	r3, sl, r3, fp
 8013dde:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013de2:	454f      	cmp	r7, r9
 8013de4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013de8:	d805      	bhi.n	8013df6 <__multiply+0x124>
 8013dea:	f8c8 3004 	str.w	r3, [r8, #4]
 8013dee:	3504      	adds	r5, #4
 8013df0:	e79b      	b.n	8013d2a <__multiply+0x58>
 8013df2:	46d4      	mov	ip, sl
 8013df4:	e7b3      	b.n	8013d5e <__multiply+0x8c>
 8013df6:	46e0      	mov	r8, ip
 8013df8:	e7dd      	b.n	8013db6 <__multiply+0xe4>
 8013dfa:	3e01      	subs	r6, #1
 8013dfc:	e799      	b.n	8013d32 <__multiply+0x60>
	...

08013e00 <__pow5mult>:
 8013e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e04:	4615      	mov	r5, r2
 8013e06:	f012 0203 	ands.w	r2, r2, #3
 8013e0a:	4606      	mov	r6, r0
 8013e0c:	460f      	mov	r7, r1
 8013e0e:	d007      	beq.n	8013e20 <__pow5mult+0x20>
 8013e10:	3a01      	subs	r2, #1
 8013e12:	4c21      	ldr	r4, [pc, #132]	; (8013e98 <__pow5mult+0x98>)
 8013e14:	2300      	movs	r3, #0
 8013e16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e1a:	f7ff fe8a 	bl	8013b32 <__multadd>
 8013e1e:	4607      	mov	r7, r0
 8013e20:	10ad      	asrs	r5, r5, #2
 8013e22:	d035      	beq.n	8013e90 <__pow5mult+0x90>
 8013e24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013e26:	b93c      	cbnz	r4, 8013e38 <__pow5mult+0x38>
 8013e28:	2010      	movs	r0, #16
 8013e2a:	f7fc feb3 	bl	8010b94 <malloc>
 8013e2e:	6270      	str	r0, [r6, #36]	; 0x24
 8013e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013e34:	6004      	str	r4, [r0, #0]
 8013e36:	60c4      	str	r4, [r0, #12]
 8013e38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013e3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013e40:	b94c      	cbnz	r4, 8013e56 <__pow5mult+0x56>
 8013e42:	f240 2171 	movw	r1, #625	; 0x271
 8013e46:	4630      	mov	r0, r6
 8013e48:	f7ff ff3a 	bl	8013cc0 <__i2b>
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013e52:	4604      	mov	r4, r0
 8013e54:	6003      	str	r3, [r0, #0]
 8013e56:	f04f 0800 	mov.w	r8, #0
 8013e5a:	07eb      	lsls	r3, r5, #31
 8013e5c:	d50a      	bpl.n	8013e74 <__pow5mult+0x74>
 8013e5e:	4639      	mov	r1, r7
 8013e60:	4622      	mov	r2, r4
 8013e62:	4630      	mov	r0, r6
 8013e64:	f7ff ff35 	bl	8013cd2 <__multiply>
 8013e68:	4639      	mov	r1, r7
 8013e6a:	4681      	mov	r9, r0
 8013e6c:	4630      	mov	r0, r6
 8013e6e:	f7ff fe49 	bl	8013b04 <_Bfree>
 8013e72:	464f      	mov	r7, r9
 8013e74:	106d      	asrs	r5, r5, #1
 8013e76:	d00b      	beq.n	8013e90 <__pow5mult+0x90>
 8013e78:	6820      	ldr	r0, [r4, #0]
 8013e7a:	b938      	cbnz	r0, 8013e8c <__pow5mult+0x8c>
 8013e7c:	4622      	mov	r2, r4
 8013e7e:	4621      	mov	r1, r4
 8013e80:	4630      	mov	r0, r6
 8013e82:	f7ff ff26 	bl	8013cd2 <__multiply>
 8013e86:	6020      	str	r0, [r4, #0]
 8013e88:	f8c0 8000 	str.w	r8, [r0]
 8013e8c:	4604      	mov	r4, r0
 8013e8e:	e7e4      	b.n	8013e5a <__pow5mult+0x5a>
 8013e90:	4638      	mov	r0, r7
 8013e92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e96:	bf00      	nop
 8013e98:	08015140 	.word	0x08015140

08013e9c <__lshift>:
 8013e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ea0:	460c      	mov	r4, r1
 8013ea2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ea6:	6923      	ldr	r3, [r4, #16]
 8013ea8:	6849      	ldr	r1, [r1, #4]
 8013eaa:	eb0a 0903 	add.w	r9, sl, r3
 8013eae:	68a3      	ldr	r3, [r4, #8]
 8013eb0:	4607      	mov	r7, r0
 8013eb2:	4616      	mov	r6, r2
 8013eb4:	f109 0501 	add.w	r5, r9, #1
 8013eb8:	42ab      	cmp	r3, r5
 8013eba:	db32      	blt.n	8013f22 <__lshift+0x86>
 8013ebc:	4638      	mov	r0, r7
 8013ebe:	f7ff fded 	bl	8013a9c <_Balloc>
 8013ec2:	2300      	movs	r3, #0
 8013ec4:	4680      	mov	r8, r0
 8013ec6:	f100 0114 	add.w	r1, r0, #20
 8013eca:	461a      	mov	r2, r3
 8013ecc:	4553      	cmp	r3, sl
 8013ece:	db2b      	blt.n	8013f28 <__lshift+0x8c>
 8013ed0:	6920      	ldr	r0, [r4, #16]
 8013ed2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013ed6:	f104 0314 	add.w	r3, r4, #20
 8013eda:	f016 021f 	ands.w	r2, r6, #31
 8013ede:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ee2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013ee6:	d025      	beq.n	8013f34 <__lshift+0x98>
 8013ee8:	f1c2 0e20 	rsb	lr, r2, #32
 8013eec:	2000      	movs	r0, #0
 8013eee:	681e      	ldr	r6, [r3, #0]
 8013ef0:	468a      	mov	sl, r1
 8013ef2:	4096      	lsls	r6, r2
 8013ef4:	4330      	orrs	r0, r6
 8013ef6:	f84a 0b04 	str.w	r0, [sl], #4
 8013efa:	f853 0b04 	ldr.w	r0, [r3], #4
 8013efe:	459c      	cmp	ip, r3
 8013f00:	fa20 f00e 	lsr.w	r0, r0, lr
 8013f04:	d814      	bhi.n	8013f30 <__lshift+0x94>
 8013f06:	6048      	str	r0, [r1, #4]
 8013f08:	b108      	cbz	r0, 8013f0e <__lshift+0x72>
 8013f0a:	f109 0502 	add.w	r5, r9, #2
 8013f0e:	3d01      	subs	r5, #1
 8013f10:	4638      	mov	r0, r7
 8013f12:	f8c8 5010 	str.w	r5, [r8, #16]
 8013f16:	4621      	mov	r1, r4
 8013f18:	f7ff fdf4 	bl	8013b04 <_Bfree>
 8013f1c:	4640      	mov	r0, r8
 8013f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f22:	3101      	adds	r1, #1
 8013f24:	005b      	lsls	r3, r3, #1
 8013f26:	e7c7      	b.n	8013eb8 <__lshift+0x1c>
 8013f28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013f2c:	3301      	adds	r3, #1
 8013f2e:	e7cd      	b.n	8013ecc <__lshift+0x30>
 8013f30:	4651      	mov	r1, sl
 8013f32:	e7dc      	b.n	8013eee <__lshift+0x52>
 8013f34:	3904      	subs	r1, #4
 8013f36:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f3a:	f841 2f04 	str.w	r2, [r1, #4]!
 8013f3e:	459c      	cmp	ip, r3
 8013f40:	d8f9      	bhi.n	8013f36 <__lshift+0x9a>
 8013f42:	e7e4      	b.n	8013f0e <__lshift+0x72>

08013f44 <__mcmp>:
 8013f44:	6903      	ldr	r3, [r0, #16]
 8013f46:	690a      	ldr	r2, [r1, #16]
 8013f48:	1a9b      	subs	r3, r3, r2
 8013f4a:	b530      	push	{r4, r5, lr}
 8013f4c:	d10c      	bne.n	8013f68 <__mcmp+0x24>
 8013f4e:	0092      	lsls	r2, r2, #2
 8013f50:	3014      	adds	r0, #20
 8013f52:	3114      	adds	r1, #20
 8013f54:	1884      	adds	r4, r0, r2
 8013f56:	4411      	add	r1, r2
 8013f58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013f5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013f60:	4295      	cmp	r5, r2
 8013f62:	d003      	beq.n	8013f6c <__mcmp+0x28>
 8013f64:	d305      	bcc.n	8013f72 <__mcmp+0x2e>
 8013f66:	2301      	movs	r3, #1
 8013f68:	4618      	mov	r0, r3
 8013f6a:	bd30      	pop	{r4, r5, pc}
 8013f6c:	42a0      	cmp	r0, r4
 8013f6e:	d3f3      	bcc.n	8013f58 <__mcmp+0x14>
 8013f70:	e7fa      	b.n	8013f68 <__mcmp+0x24>
 8013f72:	f04f 33ff 	mov.w	r3, #4294967295
 8013f76:	e7f7      	b.n	8013f68 <__mcmp+0x24>

08013f78 <__mdiff>:
 8013f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f7c:	460d      	mov	r5, r1
 8013f7e:	4607      	mov	r7, r0
 8013f80:	4611      	mov	r1, r2
 8013f82:	4628      	mov	r0, r5
 8013f84:	4614      	mov	r4, r2
 8013f86:	f7ff ffdd 	bl	8013f44 <__mcmp>
 8013f8a:	1e06      	subs	r6, r0, #0
 8013f8c:	d108      	bne.n	8013fa0 <__mdiff+0x28>
 8013f8e:	4631      	mov	r1, r6
 8013f90:	4638      	mov	r0, r7
 8013f92:	f7ff fd83 	bl	8013a9c <_Balloc>
 8013f96:	2301      	movs	r3, #1
 8013f98:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fa0:	bfa4      	itt	ge
 8013fa2:	4623      	movge	r3, r4
 8013fa4:	462c      	movge	r4, r5
 8013fa6:	4638      	mov	r0, r7
 8013fa8:	6861      	ldr	r1, [r4, #4]
 8013faa:	bfa6      	itte	ge
 8013fac:	461d      	movge	r5, r3
 8013fae:	2600      	movge	r6, #0
 8013fb0:	2601      	movlt	r6, #1
 8013fb2:	f7ff fd73 	bl	8013a9c <_Balloc>
 8013fb6:	692b      	ldr	r3, [r5, #16]
 8013fb8:	60c6      	str	r6, [r0, #12]
 8013fba:	6926      	ldr	r6, [r4, #16]
 8013fbc:	f105 0914 	add.w	r9, r5, #20
 8013fc0:	f104 0214 	add.w	r2, r4, #20
 8013fc4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013fc8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013fcc:	f100 0514 	add.w	r5, r0, #20
 8013fd0:	f04f 0e00 	mov.w	lr, #0
 8013fd4:	f852 ab04 	ldr.w	sl, [r2], #4
 8013fd8:	f859 4b04 	ldr.w	r4, [r9], #4
 8013fdc:	fa1e f18a 	uxtah	r1, lr, sl
 8013fe0:	b2a3      	uxth	r3, r4
 8013fe2:	1ac9      	subs	r1, r1, r3
 8013fe4:	0c23      	lsrs	r3, r4, #16
 8013fe6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013fea:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013fee:	b289      	uxth	r1, r1
 8013ff0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013ff4:	45c8      	cmp	r8, r9
 8013ff6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013ffa:	4694      	mov	ip, r2
 8013ffc:	f845 3b04 	str.w	r3, [r5], #4
 8014000:	d8e8      	bhi.n	8013fd4 <__mdiff+0x5c>
 8014002:	45bc      	cmp	ip, r7
 8014004:	d304      	bcc.n	8014010 <__mdiff+0x98>
 8014006:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801400a:	b183      	cbz	r3, 801402e <__mdiff+0xb6>
 801400c:	6106      	str	r6, [r0, #16]
 801400e:	e7c5      	b.n	8013f9c <__mdiff+0x24>
 8014010:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014014:	fa1e f381 	uxtah	r3, lr, r1
 8014018:	141a      	asrs	r2, r3, #16
 801401a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801401e:	b29b      	uxth	r3, r3
 8014020:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014024:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8014028:	f845 3b04 	str.w	r3, [r5], #4
 801402c:	e7e9      	b.n	8014002 <__mdiff+0x8a>
 801402e:	3e01      	subs	r6, #1
 8014030:	e7e9      	b.n	8014006 <__mdiff+0x8e>
	...

08014034 <__ulp>:
 8014034:	4b12      	ldr	r3, [pc, #72]	; (8014080 <__ulp+0x4c>)
 8014036:	ee10 2a90 	vmov	r2, s1
 801403a:	401a      	ands	r2, r3
 801403c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8014040:	2b00      	cmp	r3, #0
 8014042:	dd04      	ble.n	801404e <__ulp+0x1a>
 8014044:	2000      	movs	r0, #0
 8014046:	4619      	mov	r1, r3
 8014048:	ec41 0b10 	vmov	d0, r0, r1
 801404c:	4770      	bx	lr
 801404e:	425b      	negs	r3, r3
 8014050:	151b      	asrs	r3, r3, #20
 8014052:	2b13      	cmp	r3, #19
 8014054:	f04f 0000 	mov.w	r0, #0
 8014058:	f04f 0100 	mov.w	r1, #0
 801405c:	dc04      	bgt.n	8014068 <__ulp+0x34>
 801405e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8014062:	fa42 f103 	asr.w	r1, r2, r3
 8014066:	e7ef      	b.n	8014048 <__ulp+0x14>
 8014068:	3b14      	subs	r3, #20
 801406a:	2b1e      	cmp	r3, #30
 801406c:	f04f 0201 	mov.w	r2, #1
 8014070:	bfda      	itte	le
 8014072:	f1c3 031f 	rsble	r3, r3, #31
 8014076:	fa02 f303 	lslle.w	r3, r2, r3
 801407a:	4613      	movgt	r3, r2
 801407c:	4618      	mov	r0, r3
 801407e:	e7e3      	b.n	8014048 <__ulp+0x14>
 8014080:	7ff00000 	.word	0x7ff00000

08014084 <__b2d>:
 8014084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014086:	6905      	ldr	r5, [r0, #16]
 8014088:	f100 0714 	add.w	r7, r0, #20
 801408c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014090:	1f2e      	subs	r6, r5, #4
 8014092:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8014096:	4620      	mov	r0, r4
 8014098:	f7ff fdc4 	bl	8013c24 <__hi0bits>
 801409c:	f1c0 0320 	rsb	r3, r0, #32
 80140a0:	280a      	cmp	r0, #10
 80140a2:	600b      	str	r3, [r1, #0]
 80140a4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801411c <__b2d+0x98>
 80140a8:	dc14      	bgt.n	80140d4 <__b2d+0x50>
 80140aa:	f1c0 0e0b 	rsb	lr, r0, #11
 80140ae:	fa24 f10e 	lsr.w	r1, r4, lr
 80140b2:	42b7      	cmp	r7, r6
 80140b4:	ea41 030c 	orr.w	r3, r1, ip
 80140b8:	bf34      	ite	cc
 80140ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80140be:	2100      	movcs	r1, #0
 80140c0:	3015      	adds	r0, #21
 80140c2:	fa04 f000 	lsl.w	r0, r4, r0
 80140c6:	fa21 f10e 	lsr.w	r1, r1, lr
 80140ca:	ea40 0201 	orr.w	r2, r0, r1
 80140ce:	ec43 2b10 	vmov	d0, r2, r3
 80140d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140d4:	42b7      	cmp	r7, r6
 80140d6:	bf3a      	itte	cc
 80140d8:	f1a5 0608 	subcc.w	r6, r5, #8
 80140dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80140e0:	2100      	movcs	r1, #0
 80140e2:	380b      	subs	r0, #11
 80140e4:	d015      	beq.n	8014112 <__b2d+0x8e>
 80140e6:	4084      	lsls	r4, r0
 80140e8:	f1c0 0520 	rsb	r5, r0, #32
 80140ec:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80140f0:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80140f4:	42be      	cmp	r6, r7
 80140f6:	fa21 fc05 	lsr.w	ip, r1, r5
 80140fa:	ea44 030c 	orr.w	r3, r4, ip
 80140fe:	bf8c      	ite	hi
 8014100:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8014104:	2400      	movls	r4, #0
 8014106:	fa01 f000 	lsl.w	r0, r1, r0
 801410a:	40ec      	lsrs	r4, r5
 801410c:	ea40 0204 	orr.w	r2, r0, r4
 8014110:	e7dd      	b.n	80140ce <__b2d+0x4a>
 8014112:	ea44 030c 	orr.w	r3, r4, ip
 8014116:	460a      	mov	r2, r1
 8014118:	e7d9      	b.n	80140ce <__b2d+0x4a>
 801411a:	bf00      	nop
 801411c:	3ff00000 	.word	0x3ff00000

08014120 <__d2b>:
 8014120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014124:	460e      	mov	r6, r1
 8014126:	2101      	movs	r1, #1
 8014128:	ec59 8b10 	vmov	r8, r9, d0
 801412c:	4615      	mov	r5, r2
 801412e:	f7ff fcb5 	bl	8013a9c <_Balloc>
 8014132:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014136:	4607      	mov	r7, r0
 8014138:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801413c:	bb34      	cbnz	r4, 801418c <__d2b+0x6c>
 801413e:	9301      	str	r3, [sp, #4]
 8014140:	f1b8 0300 	subs.w	r3, r8, #0
 8014144:	d027      	beq.n	8014196 <__d2b+0x76>
 8014146:	a802      	add	r0, sp, #8
 8014148:	f840 3d08 	str.w	r3, [r0, #-8]!
 801414c:	f7ff fd89 	bl	8013c62 <__lo0bits>
 8014150:	9900      	ldr	r1, [sp, #0]
 8014152:	b1f0      	cbz	r0, 8014192 <__d2b+0x72>
 8014154:	9a01      	ldr	r2, [sp, #4]
 8014156:	f1c0 0320 	rsb	r3, r0, #32
 801415a:	fa02 f303 	lsl.w	r3, r2, r3
 801415e:	430b      	orrs	r3, r1
 8014160:	40c2      	lsrs	r2, r0
 8014162:	617b      	str	r3, [r7, #20]
 8014164:	9201      	str	r2, [sp, #4]
 8014166:	9b01      	ldr	r3, [sp, #4]
 8014168:	61bb      	str	r3, [r7, #24]
 801416a:	2b00      	cmp	r3, #0
 801416c:	bf14      	ite	ne
 801416e:	2102      	movne	r1, #2
 8014170:	2101      	moveq	r1, #1
 8014172:	6139      	str	r1, [r7, #16]
 8014174:	b1c4      	cbz	r4, 80141a8 <__d2b+0x88>
 8014176:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801417a:	4404      	add	r4, r0
 801417c:	6034      	str	r4, [r6, #0]
 801417e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014182:	6028      	str	r0, [r5, #0]
 8014184:	4638      	mov	r0, r7
 8014186:	b003      	add	sp, #12
 8014188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801418c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014190:	e7d5      	b.n	801413e <__d2b+0x1e>
 8014192:	6179      	str	r1, [r7, #20]
 8014194:	e7e7      	b.n	8014166 <__d2b+0x46>
 8014196:	a801      	add	r0, sp, #4
 8014198:	f7ff fd63 	bl	8013c62 <__lo0bits>
 801419c:	9b01      	ldr	r3, [sp, #4]
 801419e:	617b      	str	r3, [r7, #20]
 80141a0:	2101      	movs	r1, #1
 80141a2:	6139      	str	r1, [r7, #16]
 80141a4:	3020      	adds	r0, #32
 80141a6:	e7e5      	b.n	8014174 <__d2b+0x54>
 80141a8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80141ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80141b0:	6030      	str	r0, [r6, #0]
 80141b2:	6918      	ldr	r0, [r3, #16]
 80141b4:	f7ff fd36 	bl	8013c24 <__hi0bits>
 80141b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80141bc:	e7e1      	b.n	8014182 <__d2b+0x62>

080141be <__ratio>:
 80141be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c2:	4688      	mov	r8, r1
 80141c4:	4669      	mov	r1, sp
 80141c6:	4681      	mov	r9, r0
 80141c8:	f7ff ff5c 	bl	8014084 <__b2d>
 80141cc:	a901      	add	r1, sp, #4
 80141ce:	4640      	mov	r0, r8
 80141d0:	ec57 6b10 	vmov	r6, r7, d0
 80141d4:	f7ff ff56 	bl	8014084 <__b2d>
 80141d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80141dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80141e0:	eba3 0c02 	sub.w	ip, r3, r2
 80141e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 80141e8:	1a9b      	subs	r3, r3, r2
 80141ea:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80141ee:	ec5b ab10 	vmov	sl, fp, d0
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	bfce      	itee	gt
 80141f6:	463a      	movgt	r2, r7
 80141f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80141fc:	465a      	movle	r2, fp
 80141fe:	4659      	mov	r1, fp
 8014200:	463d      	mov	r5, r7
 8014202:	bfd4      	ite	le
 8014204:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8014208:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801420c:	4630      	mov	r0, r6
 801420e:	ee10 2a10 	vmov	r2, s0
 8014212:	460b      	mov	r3, r1
 8014214:	4629      	mov	r1, r5
 8014216:	f7ec fb19 	bl	800084c <__aeabi_ddiv>
 801421a:	ec41 0b10 	vmov	d0, r0, r1
 801421e:	b003      	add	sp, #12
 8014220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014224 <__copybits>:
 8014224:	3901      	subs	r1, #1
 8014226:	b510      	push	{r4, lr}
 8014228:	1149      	asrs	r1, r1, #5
 801422a:	6914      	ldr	r4, [r2, #16]
 801422c:	3101      	adds	r1, #1
 801422e:	f102 0314 	add.w	r3, r2, #20
 8014232:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014236:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801423a:	42a3      	cmp	r3, r4
 801423c:	4602      	mov	r2, r0
 801423e:	d303      	bcc.n	8014248 <__copybits+0x24>
 8014240:	2300      	movs	r3, #0
 8014242:	428a      	cmp	r2, r1
 8014244:	d305      	bcc.n	8014252 <__copybits+0x2e>
 8014246:	bd10      	pop	{r4, pc}
 8014248:	f853 2b04 	ldr.w	r2, [r3], #4
 801424c:	f840 2b04 	str.w	r2, [r0], #4
 8014250:	e7f3      	b.n	801423a <__copybits+0x16>
 8014252:	f842 3b04 	str.w	r3, [r2], #4
 8014256:	e7f4      	b.n	8014242 <__copybits+0x1e>

08014258 <__any_on>:
 8014258:	f100 0214 	add.w	r2, r0, #20
 801425c:	6900      	ldr	r0, [r0, #16]
 801425e:	114b      	asrs	r3, r1, #5
 8014260:	4298      	cmp	r0, r3
 8014262:	b510      	push	{r4, lr}
 8014264:	db11      	blt.n	801428a <__any_on+0x32>
 8014266:	dd0a      	ble.n	801427e <__any_on+0x26>
 8014268:	f011 011f 	ands.w	r1, r1, #31
 801426c:	d007      	beq.n	801427e <__any_on+0x26>
 801426e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8014272:	fa24 f001 	lsr.w	r0, r4, r1
 8014276:	fa00 f101 	lsl.w	r1, r0, r1
 801427a:	428c      	cmp	r4, r1
 801427c:	d10b      	bne.n	8014296 <__any_on+0x3e>
 801427e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014282:	4293      	cmp	r3, r2
 8014284:	d803      	bhi.n	801428e <__any_on+0x36>
 8014286:	2000      	movs	r0, #0
 8014288:	bd10      	pop	{r4, pc}
 801428a:	4603      	mov	r3, r0
 801428c:	e7f7      	b.n	801427e <__any_on+0x26>
 801428e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014292:	2900      	cmp	r1, #0
 8014294:	d0f5      	beq.n	8014282 <__any_on+0x2a>
 8014296:	2001      	movs	r0, #1
 8014298:	e7f6      	b.n	8014288 <__any_on+0x30>

0801429a <_calloc_r>:
 801429a:	b538      	push	{r3, r4, r5, lr}
 801429c:	fb02 f401 	mul.w	r4, r2, r1
 80142a0:	4621      	mov	r1, r4
 80142a2:	f7fc fce9 	bl	8010c78 <_malloc_r>
 80142a6:	4605      	mov	r5, r0
 80142a8:	b118      	cbz	r0, 80142b2 <_calloc_r+0x18>
 80142aa:	4622      	mov	r2, r4
 80142ac:	2100      	movs	r1, #0
 80142ae:	f7fc fc8c 	bl	8010bca <memset>
 80142b2:	4628      	mov	r0, r5
 80142b4:	bd38      	pop	{r3, r4, r5, pc}

080142b6 <__ssputs_r>:
 80142b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142ba:	688e      	ldr	r6, [r1, #8]
 80142bc:	429e      	cmp	r6, r3
 80142be:	4682      	mov	sl, r0
 80142c0:	460c      	mov	r4, r1
 80142c2:	4690      	mov	r8, r2
 80142c4:	4699      	mov	r9, r3
 80142c6:	d837      	bhi.n	8014338 <__ssputs_r+0x82>
 80142c8:	898a      	ldrh	r2, [r1, #12]
 80142ca:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80142ce:	d031      	beq.n	8014334 <__ssputs_r+0x7e>
 80142d0:	6825      	ldr	r5, [r4, #0]
 80142d2:	6909      	ldr	r1, [r1, #16]
 80142d4:	1a6f      	subs	r7, r5, r1
 80142d6:	6965      	ldr	r5, [r4, #20]
 80142d8:	2302      	movs	r3, #2
 80142da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80142de:	fb95 f5f3 	sdiv	r5, r5, r3
 80142e2:	f109 0301 	add.w	r3, r9, #1
 80142e6:	443b      	add	r3, r7
 80142e8:	429d      	cmp	r5, r3
 80142ea:	bf38      	it	cc
 80142ec:	461d      	movcc	r5, r3
 80142ee:	0553      	lsls	r3, r2, #21
 80142f0:	d530      	bpl.n	8014354 <__ssputs_r+0x9e>
 80142f2:	4629      	mov	r1, r5
 80142f4:	f7fc fcc0 	bl	8010c78 <_malloc_r>
 80142f8:	4606      	mov	r6, r0
 80142fa:	b950      	cbnz	r0, 8014312 <__ssputs_r+0x5c>
 80142fc:	230c      	movs	r3, #12
 80142fe:	f8ca 3000 	str.w	r3, [sl]
 8014302:	89a3      	ldrh	r3, [r4, #12]
 8014304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014308:	81a3      	strh	r3, [r4, #12]
 801430a:	f04f 30ff 	mov.w	r0, #4294967295
 801430e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014312:	463a      	mov	r2, r7
 8014314:	6921      	ldr	r1, [r4, #16]
 8014316:	f7fc fc4d 	bl	8010bb4 <memcpy>
 801431a:	89a3      	ldrh	r3, [r4, #12]
 801431c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014324:	81a3      	strh	r3, [r4, #12]
 8014326:	6126      	str	r6, [r4, #16]
 8014328:	6165      	str	r5, [r4, #20]
 801432a:	443e      	add	r6, r7
 801432c:	1bed      	subs	r5, r5, r7
 801432e:	6026      	str	r6, [r4, #0]
 8014330:	60a5      	str	r5, [r4, #8]
 8014332:	464e      	mov	r6, r9
 8014334:	454e      	cmp	r6, r9
 8014336:	d900      	bls.n	801433a <__ssputs_r+0x84>
 8014338:	464e      	mov	r6, r9
 801433a:	4632      	mov	r2, r6
 801433c:	4641      	mov	r1, r8
 801433e:	6820      	ldr	r0, [r4, #0]
 8014340:	f000 f92b 	bl	801459a <memmove>
 8014344:	68a3      	ldr	r3, [r4, #8]
 8014346:	1b9b      	subs	r3, r3, r6
 8014348:	60a3      	str	r3, [r4, #8]
 801434a:	6823      	ldr	r3, [r4, #0]
 801434c:	441e      	add	r6, r3
 801434e:	6026      	str	r6, [r4, #0]
 8014350:	2000      	movs	r0, #0
 8014352:	e7dc      	b.n	801430e <__ssputs_r+0x58>
 8014354:	462a      	mov	r2, r5
 8014356:	f000 f939 	bl	80145cc <_realloc_r>
 801435a:	4606      	mov	r6, r0
 801435c:	2800      	cmp	r0, #0
 801435e:	d1e2      	bne.n	8014326 <__ssputs_r+0x70>
 8014360:	6921      	ldr	r1, [r4, #16]
 8014362:	4650      	mov	r0, sl
 8014364:	f7fc fc3a 	bl	8010bdc <_free_r>
 8014368:	e7c8      	b.n	80142fc <__ssputs_r+0x46>
	...

0801436c <_svfiprintf_r>:
 801436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014370:	461d      	mov	r5, r3
 8014372:	898b      	ldrh	r3, [r1, #12]
 8014374:	061f      	lsls	r7, r3, #24
 8014376:	b09d      	sub	sp, #116	; 0x74
 8014378:	4680      	mov	r8, r0
 801437a:	460c      	mov	r4, r1
 801437c:	4616      	mov	r6, r2
 801437e:	d50f      	bpl.n	80143a0 <_svfiprintf_r+0x34>
 8014380:	690b      	ldr	r3, [r1, #16]
 8014382:	b96b      	cbnz	r3, 80143a0 <_svfiprintf_r+0x34>
 8014384:	2140      	movs	r1, #64	; 0x40
 8014386:	f7fc fc77 	bl	8010c78 <_malloc_r>
 801438a:	6020      	str	r0, [r4, #0]
 801438c:	6120      	str	r0, [r4, #16]
 801438e:	b928      	cbnz	r0, 801439c <_svfiprintf_r+0x30>
 8014390:	230c      	movs	r3, #12
 8014392:	f8c8 3000 	str.w	r3, [r8]
 8014396:	f04f 30ff 	mov.w	r0, #4294967295
 801439a:	e0c8      	b.n	801452e <_svfiprintf_r+0x1c2>
 801439c:	2340      	movs	r3, #64	; 0x40
 801439e:	6163      	str	r3, [r4, #20]
 80143a0:	2300      	movs	r3, #0
 80143a2:	9309      	str	r3, [sp, #36]	; 0x24
 80143a4:	2320      	movs	r3, #32
 80143a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143aa:	2330      	movs	r3, #48	; 0x30
 80143ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143b0:	9503      	str	r5, [sp, #12]
 80143b2:	f04f 0b01 	mov.w	fp, #1
 80143b6:	4637      	mov	r7, r6
 80143b8:	463d      	mov	r5, r7
 80143ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80143be:	b10b      	cbz	r3, 80143c4 <_svfiprintf_r+0x58>
 80143c0:	2b25      	cmp	r3, #37	; 0x25
 80143c2:	d13e      	bne.n	8014442 <_svfiprintf_r+0xd6>
 80143c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80143c8:	d00b      	beq.n	80143e2 <_svfiprintf_r+0x76>
 80143ca:	4653      	mov	r3, sl
 80143cc:	4632      	mov	r2, r6
 80143ce:	4621      	mov	r1, r4
 80143d0:	4640      	mov	r0, r8
 80143d2:	f7ff ff70 	bl	80142b6 <__ssputs_r>
 80143d6:	3001      	adds	r0, #1
 80143d8:	f000 80a4 	beq.w	8014524 <_svfiprintf_r+0x1b8>
 80143dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143de:	4453      	add	r3, sl
 80143e0:	9309      	str	r3, [sp, #36]	; 0x24
 80143e2:	783b      	ldrb	r3, [r7, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	f000 809d 	beq.w	8014524 <_svfiprintf_r+0x1b8>
 80143ea:	2300      	movs	r3, #0
 80143ec:	f04f 32ff 	mov.w	r2, #4294967295
 80143f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143f4:	9304      	str	r3, [sp, #16]
 80143f6:	9307      	str	r3, [sp, #28]
 80143f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143fc:	931a      	str	r3, [sp, #104]	; 0x68
 80143fe:	462f      	mov	r7, r5
 8014400:	2205      	movs	r2, #5
 8014402:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014406:	4850      	ldr	r0, [pc, #320]	; (8014548 <_svfiprintf_r+0x1dc>)
 8014408:	f7eb feea 	bl	80001e0 <memchr>
 801440c:	9b04      	ldr	r3, [sp, #16]
 801440e:	b9d0      	cbnz	r0, 8014446 <_svfiprintf_r+0xda>
 8014410:	06d9      	lsls	r1, r3, #27
 8014412:	bf44      	itt	mi
 8014414:	2220      	movmi	r2, #32
 8014416:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801441a:	071a      	lsls	r2, r3, #28
 801441c:	bf44      	itt	mi
 801441e:	222b      	movmi	r2, #43	; 0x2b
 8014420:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014424:	782a      	ldrb	r2, [r5, #0]
 8014426:	2a2a      	cmp	r2, #42	; 0x2a
 8014428:	d015      	beq.n	8014456 <_svfiprintf_r+0xea>
 801442a:	9a07      	ldr	r2, [sp, #28]
 801442c:	462f      	mov	r7, r5
 801442e:	2000      	movs	r0, #0
 8014430:	250a      	movs	r5, #10
 8014432:	4639      	mov	r1, r7
 8014434:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014438:	3b30      	subs	r3, #48	; 0x30
 801443a:	2b09      	cmp	r3, #9
 801443c:	d94d      	bls.n	80144da <_svfiprintf_r+0x16e>
 801443e:	b1b8      	cbz	r0, 8014470 <_svfiprintf_r+0x104>
 8014440:	e00f      	b.n	8014462 <_svfiprintf_r+0xf6>
 8014442:	462f      	mov	r7, r5
 8014444:	e7b8      	b.n	80143b8 <_svfiprintf_r+0x4c>
 8014446:	4a40      	ldr	r2, [pc, #256]	; (8014548 <_svfiprintf_r+0x1dc>)
 8014448:	1a80      	subs	r0, r0, r2
 801444a:	fa0b f000 	lsl.w	r0, fp, r0
 801444e:	4318      	orrs	r0, r3
 8014450:	9004      	str	r0, [sp, #16]
 8014452:	463d      	mov	r5, r7
 8014454:	e7d3      	b.n	80143fe <_svfiprintf_r+0x92>
 8014456:	9a03      	ldr	r2, [sp, #12]
 8014458:	1d11      	adds	r1, r2, #4
 801445a:	6812      	ldr	r2, [r2, #0]
 801445c:	9103      	str	r1, [sp, #12]
 801445e:	2a00      	cmp	r2, #0
 8014460:	db01      	blt.n	8014466 <_svfiprintf_r+0xfa>
 8014462:	9207      	str	r2, [sp, #28]
 8014464:	e004      	b.n	8014470 <_svfiprintf_r+0x104>
 8014466:	4252      	negs	r2, r2
 8014468:	f043 0302 	orr.w	r3, r3, #2
 801446c:	9207      	str	r2, [sp, #28]
 801446e:	9304      	str	r3, [sp, #16]
 8014470:	783b      	ldrb	r3, [r7, #0]
 8014472:	2b2e      	cmp	r3, #46	; 0x2e
 8014474:	d10c      	bne.n	8014490 <_svfiprintf_r+0x124>
 8014476:	787b      	ldrb	r3, [r7, #1]
 8014478:	2b2a      	cmp	r3, #42	; 0x2a
 801447a:	d133      	bne.n	80144e4 <_svfiprintf_r+0x178>
 801447c:	9b03      	ldr	r3, [sp, #12]
 801447e:	1d1a      	adds	r2, r3, #4
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	9203      	str	r2, [sp, #12]
 8014484:	2b00      	cmp	r3, #0
 8014486:	bfb8      	it	lt
 8014488:	f04f 33ff 	movlt.w	r3, #4294967295
 801448c:	3702      	adds	r7, #2
 801448e:	9305      	str	r3, [sp, #20]
 8014490:	4d2e      	ldr	r5, [pc, #184]	; (801454c <_svfiprintf_r+0x1e0>)
 8014492:	7839      	ldrb	r1, [r7, #0]
 8014494:	2203      	movs	r2, #3
 8014496:	4628      	mov	r0, r5
 8014498:	f7eb fea2 	bl	80001e0 <memchr>
 801449c:	b138      	cbz	r0, 80144ae <_svfiprintf_r+0x142>
 801449e:	2340      	movs	r3, #64	; 0x40
 80144a0:	1b40      	subs	r0, r0, r5
 80144a2:	fa03 f000 	lsl.w	r0, r3, r0
 80144a6:	9b04      	ldr	r3, [sp, #16]
 80144a8:	4303      	orrs	r3, r0
 80144aa:	3701      	adds	r7, #1
 80144ac:	9304      	str	r3, [sp, #16]
 80144ae:	7839      	ldrb	r1, [r7, #0]
 80144b0:	4827      	ldr	r0, [pc, #156]	; (8014550 <_svfiprintf_r+0x1e4>)
 80144b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144b6:	2206      	movs	r2, #6
 80144b8:	1c7e      	adds	r6, r7, #1
 80144ba:	f7eb fe91 	bl	80001e0 <memchr>
 80144be:	2800      	cmp	r0, #0
 80144c0:	d038      	beq.n	8014534 <_svfiprintf_r+0x1c8>
 80144c2:	4b24      	ldr	r3, [pc, #144]	; (8014554 <_svfiprintf_r+0x1e8>)
 80144c4:	bb13      	cbnz	r3, 801450c <_svfiprintf_r+0x1a0>
 80144c6:	9b03      	ldr	r3, [sp, #12]
 80144c8:	3307      	adds	r3, #7
 80144ca:	f023 0307 	bic.w	r3, r3, #7
 80144ce:	3308      	adds	r3, #8
 80144d0:	9303      	str	r3, [sp, #12]
 80144d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144d4:	444b      	add	r3, r9
 80144d6:	9309      	str	r3, [sp, #36]	; 0x24
 80144d8:	e76d      	b.n	80143b6 <_svfiprintf_r+0x4a>
 80144da:	fb05 3202 	mla	r2, r5, r2, r3
 80144de:	2001      	movs	r0, #1
 80144e0:	460f      	mov	r7, r1
 80144e2:	e7a6      	b.n	8014432 <_svfiprintf_r+0xc6>
 80144e4:	2300      	movs	r3, #0
 80144e6:	3701      	adds	r7, #1
 80144e8:	9305      	str	r3, [sp, #20]
 80144ea:	4619      	mov	r1, r3
 80144ec:	250a      	movs	r5, #10
 80144ee:	4638      	mov	r0, r7
 80144f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144f4:	3a30      	subs	r2, #48	; 0x30
 80144f6:	2a09      	cmp	r2, #9
 80144f8:	d903      	bls.n	8014502 <_svfiprintf_r+0x196>
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d0c8      	beq.n	8014490 <_svfiprintf_r+0x124>
 80144fe:	9105      	str	r1, [sp, #20]
 8014500:	e7c6      	b.n	8014490 <_svfiprintf_r+0x124>
 8014502:	fb05 2101 	mla	r1, r5, r1, r2
 8014506:	2301      	movs	r3, #1
 8014508:	4607      	mov	r7, r0
 801450a:	e7f0      	b.n	80144ee <_svfiprintf_r+0x182>
 801450c:	ab03      	add	r3, sp, #12
 801450e:	9300      	str	r3, [sp, #0]
 8014510:	4622      	mov	r2, r4
 8014512:	4b11      	ldr	r3, [pc, #68]	; (8014558 <_svfiprintf_r+0x1ec>)
 8014514:	a904      	add	r1, sp, #16
 8014516:	4640      	mov	r0, r8
 8014518:	f7fc fc9c 	bl	8010e54 <_printf_float>
 801451c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014520:	4681      	mov	r9, r0
 8014522:	d1d6      	bne.n	80144d2 <_svfiprintf_r+0x166>
 8014524:	89a3      	ldrh	r3, [r4, #12]
 8014526:	065b      	lsls	r3, r3, #25
 8014528:	f53f af35 	bmi.w	8014396 <_svfiprintf_r+0x2a>
 801452c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801452e:	b01d      	add	sp, #116	; 0x74
 8014530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014534:	ab03      	add	r3, sp, #12
 8014536:	9300      	str	r3, [sp, #0]
 8014538:	4622      	mov	r2, r4
 801453a:	4b07      	ldr	r3, [pc, #28]	; (8014558 <_svfiprintf_r+0x1ec>)
 801453c:	a904      	add	r1, sp, #16
 801453e:	4640      	mov	r0, r8
 8014540:	f7fc ff3e 	bl	80113c0 <_printf_i>
 8014544:	e7ea      	b.n	801451c <_svfiprintf_r+0x1b0>
 8014546:	bf00      	nop
 8014548:	0801514c 	.word	0x0801514c
 801454c:	08015152 	.word	0x08015152
 8014550:	08015156 	.word	0x08015156
 8014554:	08010e55 	.word	0x08010e55
 8014558:	080142b7 	.word	0x080142b7

0801455c <strncmp>:
 801455c:	b510      	push	{r4, lr}
 801455e:	b16a      	cbz	r2, 801457c <strncmp+0x20>
 8014560:	3901      	subs	r1, #1
 8014562:	1884      	adds	r4, r0, r2
 8014564:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014568:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801456c:	4293      	cmp	r3, r2
 801456e:	d103      	bne.n	8014578 <strncmp+0x1c>
 8014570:	42a0      	cmp	r0, r4
 8014572:	d001      	beq.n	8014578 <strncmp+0x1c>
 8014574:	2b00      	cmp	r3, #0
 8014576:	d1f5      	bne.n	8014564 <strncmp+0x8>
 8014578:	1a98      	subs	r0, r3, r2
 801457a:	bd10      	pop	{r4, pc}
 801457c:	4610      	mov	r0, r2
 801457e:	e7fc      	b.n	801457a <strncmp+0x1e>

08014580 <__ascii_wctomb>:
 8014580:	b149      	cbz	r1, 8014596 <__ascii_wctomb+0x16>
 8014582:	2aff      	cmp	r2, #255	; 0xff
 8014584:	bf85      	ittet	hi
 8014586:	238a      	movhi	r3, #138	; 0x8a
 8014588:	6003      	strhi	r3, [r0, #0]
 801458a:	700a      	strbls	r2, [r1, #0]
 801458c:	f04f 30ff 	movhi.w	r0, #4294967295
 8014590:	bf98      	it	ls
 8014592:	2001      	movls	r0, #1
 8014594:	4770      	bx	lr
 8014596:	4608      	mov	r0, r1
 8014598:	4770      	bx	lr

0801459a <memmove>:
 801459a:	4288      	cmp	r0, r1
 801459c:	b510      	push	{r4, lr}
 801459e:	eb01 0302 	add.w	r3, r1, r2
 80145a2:	d807      	bhi.n	80145b4 <memmove+0x1a>
 80145a4:	1e42      	subs	r2, r0, #1
 80145a6:	4299      	cmp	r1, r3
 80145a8:	d00a      	beq.n	80145c0 <memmove+0x26>
 80145aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145ae:	f802 4f01 	strb.w	r4, [r2, #1]!
 80145b2:	e7f8      	b.n	80145a6 <memmove+0xc>
 80145b4:	4283      	cmp	r3, r0
 80145b6:	d9f5      	bls.n	80145a4 <memmove+0xa>
 80145b8:	1881      	adds	r1, r0, r2
 80145ba:	1ad2      	subs	r2, r2, r3
 80145bc:	42d3      	cmn	r3, r2
 80145be:	d100      	bne.n	80145c2 <memmove+0x28>
 80145c0:	bd10      	pop	{r4, pc}
 80145c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80145c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80145ca:	e7f7      	b.n	80145bc <memmove+0x22>

080145cc <_realloc_r>:
 80145cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ce:	4607      	mov	r7, r0
 80145d0:	4614      	mov	r4, r2
 80145d2:	460e      	mov	r6, r1
 80145d4:	b921      	cbnz	r1, 80145e0 <_realloc_r+0x14>
 80145d6:	4611      	mov	r1, r2
 80145d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80145dc:	f7fc bb4c 	b.w	8010c78 <_malloc_r>
 80145e0:	b922      	cbnz	r2, 80145ec <_realloc_r+0x20>
 80145e2:	f7fc fafb 	bl	8010bdc <_free_r>
 80145e6:	4625      	mov	r5, r4
 80145e8:	4628      	mov	r0, r5
 80145ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145ec:	f000 f814 	bl	8014618 <_malloc_usable_size_r>
 80145f0:	42a0      	cmp	r0, r4
 80145f2:	d20f      	bcs.n	8014614 <_realloc_r+0x48>
 80145f4:	4621      	mov	r1, r4
 80145f6:	4638      	mov	r0, r7
 80145f8:	f7fc fb3e 	bl	8010c78 <_malloc_r>
 80145fc:	4605      	mov	r5, r0
 80145fe:	2800      	cmp	r0, #0
 8014600:	d0f2      	beq.n	80145e8 <_realloc_r+0x1c>
 8014602:	4631      	mov	r1, r6
 8014604:	4622      	mov	r2, r4
 8014606:	f7fc fad5 	bl	8010bb4 <memcpy>
 801460a:	4631      	mov	r1, r6
 801460c:	4638      	mov	r0, r7
 801460e:	f7fc fae5 	bl	8010bdc <_free_r>
 8014612:	e7e9      	b.n	80145e8 <_realloc_r+0x1c>
 8014614:	4635      	mov	r5, r6
 8014616:	e7e7      	b.n	80145e8 <_realloc_r+0x1c>

08014618 <_malloc_usable_size_r>:
 8014618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801461c:	1f18      	subs	r0, r3, #4
 801461e:	2b00      	cmp	r3, #0
 8014620:	bfbc      	itt	lt
 8014622:	580b      	ldrlt	r3, [r1, r0]
 8014624:	18c0      	addlt	r0, r0, r3
 8014626:	4770      	bx	lr

08014628 <_sbrk>:
 8014628:	4b04      	ldr	r3, [pc, #16]	; (801463c <_sbrk+0x14>)
 801462a:	6819      	ldr	r1, [r3, #0]
 801462c:	4602      	mov	r2, r0
 801462e:	b909      	cbnz	r1, 8014634 <_sbrk+0xc>
 8014630:	4903      	ldr	r1, [pc, #12]	; (8014640 <_sbrk+0x18>)
 8014632:	6019      	str	r1, [r3, #0]
 8014634:	6818      	ldr	r0, [r3, #0]
 8014636:	4402      	add	r2, r0
 8014638:	601a      	str	r2, [r3, #0]
 801463a:	4770      	bx	lr
 801463c:	200009e0 	.word	0x200009e0
 8014640:	20002cb8 	.word	0x20002cb8

08014644 <_init>:
 8014644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014646:	bf00      	nop
 8014648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801464a:	bc08      	pop	{r3}
 801464c:	469e      	mov	lr, r3
 801464e:	4770      	bx	lr

08014650 <_fini>:
 8014650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014652:	bf00      	nop
 8014654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014656:	bc08      	pop	{r3}
 8014658:	469e      	mov	lr, r3
 801465a:	4770      	bx	lr
